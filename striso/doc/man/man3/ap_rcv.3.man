'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) $Id: ap_rcv.3.man,v 0.9.2.4 2008-04-25 08:38:27 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2008-04-25 08:38:27 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: ap_rcv.3.man,v $
.\" Revision 0.9.2.4  2008-04-25 08:38:27  brian
.\" - working up libraries modules and drivers
.\"
.\" Revision 0.9.2.3  2008-04-16 17:34:22  brian
.\" - working up manual pages
.\"
.\" =========================================================================
.\"
.\"
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database striso.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so striso.macros
.\"
.\"
.TH AP_RCV 3 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ Library Calls"
.SH NAME
.B ap_rcv
\- receive ACSE/Presentation primitive from an association
.\"
.\"
.SH INTERFACE
.PP
ACSE/Presentation Library Interface,
APLI,
.[
APLI UNIX International
.]
XAP.
.[
xap c303
.]
.\"
.\"
.SH LIBRARY
.PP
.BR libapli (3),
.BR libxap (3).
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <xap.h>
.HP
.BI "int ap_rcv(
.br
.BI "int " fd ,
.br
.BI "unsigned long *" sptype ,
.br
.BI "ap_cdata_t *" cdata ,
.br
.BI "ap_osi_vbuf_t **" ubuf ,
.br
.BI "int *" flags ,
.br
.BI "unsigned long *" aperrno_p );
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'\fIaperrno_p\fP\(em'u
.I fd
Identifies the XAP Library instance as returned by
.BR ap_open (3).
.TP
.I sptype
Upon successful return, indicates the primitive received.
.TP
.I cdata
Points to a
.B ap_cdata_t
structure that will receive primary information from the received primitive.
.TP
.I ubuf
Points to a
.B ap_osi_vbuf_t
buffer chain that, upon successful return, will receive the data associated with
the received primitive.
.TP
.I flags
Points to an integer that may contain the
.B AP_ALLOC
flag on call and may contain the
.B AP_MORE
flag on successful or unsuccessful return.
.TP
.I aperrno_p
Points to an area into which to receive an error code upon failure.
.\"
.\"
.SH DESCRIPTION
.PP
This function is used to receive and indication or confirm primitive.
.I fd
identifies the XAP instance for which the user wishes to receive primitives.
.PP
When
.BR ap_rcv ()
is called,
.I sptype
must point to an
.BR "unsinged long" ,
and
.I cdata
must point to an
.B ap_cdata_t
structure.
.PP
Upon return, the value of the
.B unsigned long
pointed to by the
.I sptype
parameter will contain the symbolic constant defined in
.RB < xap.h >
that identifies the received primitive.  The symbolic constants are derived
from the primitive anmes by prefixing the name with
.BR AP_ .
The table below lists the primitives that can be received using
.BR ap_rcv ().
The following information is provided in the table:
.TP
.B primitive
The name of the primitive.
.TP
.B valid in states
The states during which this primitive may be received (states are given as
values of the
.RB [ AP_STATE ]
attribute).
.TP
.B must be set
A list of XAP environment attributes that must be set to be able to receive
this primitive (attributes marked with * have defaults).
.sp
Note that some attributes that had to be set to enter a state where this
primitive is legal may not be listed.
.TP
.B may change
A list of the attributes that may change as a result of receiving this
primitive.
.TP
.B next state
The state that will be entered upon receipt of this primitive (states are given
as the value of the
.RB [ AP_STATE ]
attribute).
.TS
box center tab(:);
cb|cb|cb.
primitive:T{
valid in states
T}:T{
next state
T}
_
.T&
l|l|l.
A_ABORT_IND:T{
.ad l
.hy 0
all except:
AP_UNBOUND
AP_IDLE
T}:AP_IDLE
_
A_ASSOC_IND:AP_IDLE:AP_WASSOCrsp_ASSOCind
_
A_ASSOC_CNF:AP_WASSOCcnf_ASSOCreq:T{
.ad l
.hy 0
(AP_IDLE, AP_DATA_XFER)
T}
_
A_PABORT_IND:T{
.ad l
.hy 0
all except: AP_UNBOUND, AP_IDLE
T}:AP_IDLE
_
A_RELEASE_IND:AP_DATA_XFER:AP_WRELrsp_RELind
:AP_WRELcnf_RELreq:T{
.ad l
.hy 0
(AP_WRELrsp_RELind_init or AP_WRELcnf_RELreq_rsp)
T}
_
A_RELEASE_CNF:AP_WRELcnf_RELreq:T{
.ad l
.hy 0
(AP_IDLE or AP_DATA_XFER)
T}
:AP_WRELcnf_RELreq_rsp:AP_WRELrsp_RELind
_
P_ACTEND_IND:AP_DATA_XFER:AP_WACTErsp_ACTEind
_
P_ACTEND_CNF:AP_WACTEcnf_ACTEreq:AP_DATA_XFER
_
P_ACTDISCARD_IND:AP_WRESYNcnf_RESYNreq:AP_DATA_XFER
:AP_WSYNCMArsp_SYNCMAind
:AP_WACTErsp_ACTEind
:AP_WRECOVERYind
:AP_WRECOVERYreq
:AP_DATA_XFER
_
P_ACTDISCARD_CNF:AP_WACTDcnf_ACTDreq:AP_DATA_XFER
_
P_ACTINTR_IND:AP_WRESYNcnf_RESYNreq:AP_WACTIrsp_ACTIind
:AP_WSYNCMArsp_SYNCMAind
:AP_WACTErsp_ACTEind
:AP_WRECOVERYind
:AP_WRECOVERYreq
:AP_DATA_XFER
_
P_ACTINTR_CNF:AP_WACTIcnf_ACTIreq:AP_DATA_XFER
_
P_ACTRESUME_IND:AP_DATA_XFER:no state change
_
P_ACTSTART_IND:AP_DATA_XFER:no state change
_
P_CDATA_IND:AP_DATA_XFER:AP_WCDATArsp_CDATAind
_
P_CDATA_CNF:AP_WCDATAcnf_CDATAreq:AP_DATA_XFER
_
P_CTRLGIVE_IND:AP_DATA_XFER:no state change
_
P_DATA_IND:AP_DATA_XFER:no state change
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WACTEcnf_ACTEreq
:AP_WRESYNcnf_RESYNreq
_
P_PXREPORT_IND:AP_WRELcnf_RELreq:AP_WRECOVERYreq
:AP_WSYNCMAcnf_SYNCMAreq:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
:AP_WACTEcnf_ACTEreq:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
:AP_WRECOVERYind:no state change
:AP_WCDATAcnf_CDATAreq:AP_WRECOVERYreq
:AP_DATA_XFER:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
_
P_RESYNC_IND:AP_DATA_XFER:AP_WRESYNrsp_RESYNind
:AP_WRESYNcnf_RESYNreq
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WSYNCMArsp_SYNCMAind
:AP_WACTEcnf_ACTEreq
:AP_WRECOVERYind
:AP_WRECOVERYreq
_
P_RESYNC_CNF:AP_WRESYNcnf_RESYNreq:AP_DATA_XFER
_
P_SYNCMAJOR_IND:AP_DATA_XFER:AP_WSYNCMArsp_SYNCMAind
_
P_SYNCMAJOR_CNF:AP_WSYNCMAcnf_SYNCMAreq:AP_DATA_XFER
_
P_SYNCMINOR_IND:AP_DATA_XFER:no state change
_
P_SYNCMINOR_CNF:AP_DATA_XFER:no state change
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WACTEcnf_ACTEreq
_
P_TDATA_IND:AP_DATA_XFER:no state change
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WACTEcnf_ACTEreq
_
P_TOKENGIVE_IND:AP_DATA_XFER:no state change
:AP_WSYNCMAcnf_SYNCMAreq:no state change
:AP_WACTEcnf_ACTEreq:no state change
:AP_WSYNCMArsp_SYNCMAind:no state change
:AP_WACTErsp_ACTEind:no state change
:AP_WRECOVERYind:T{
.ad l
.hy 0
(no state change or AP_DATA_XFER)
T}
:AP_WRECOVERYreq:T{
.ad l
.hy 0
(no state change or AP_DATA_XFER)
T}
:AP_WCDATAcnf_CDATAreq:no state change
_
P_TOKENPLEASE_IND:AP_DATA_XFER:T{
.ad l
.hy 0
no state change
T}
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WACTEcnf_ACTEreq
:AP_WCDATAcnf_CDATAreq
_
P_UXREPORT_IND:AP_WRELcnf_RELreq:AP_WRECOVERYreq
:AP_WSYNCMAcnf_SYNCMAreq:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
:AP_WACTEcnf_ACTEreq:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
:AP_WRECOVERYind:T{
.ad l
.hy 0
no state change
T}
:AP_DATA_XFER:T{
.ad l
.hy 0
(AP_WRECOVERYreq or AP_DATA_XFER)
T}
_
P_XDATA_IND:AP_DATA_XFER:no state change
:AP_WRELcnf_RELreq
:AP_WSYNCMAcnf_SYNCMAreq
:AP_WACTEcnf_ACTEreq
.TE
.TS
box center tab(:);
cb|cb|cb.
primitive:T{
must be set
T}:T{
may change
T}
_
.T&
l|l|l.
A_ABORT_IND:none:AP_STATE
_
A_ASSOC_IND:T{
.ad l
.hy 0
AP_BIND_PADDR
AP_LIB_SEL
T}:T{
.ad l
.hy 0
AP_ACSE_SEL
AP_CLD_AEID
AP_CLD_AEQ
AP_CLD_APID
AP_CLD_APT
AP_CLG_AEID
AP_CLG_AEQ
AP_CLG_APID
AP_CLG_APT
AP_CNTX_NAME
AP_DCS
AP_DPCN
AP_INIT_SYNC_PT
AP_INIT_TOKENS
AP_LCL_PADDR
AP_MODE_SEL
AP_PCDL
AP_PFU_SEL
AP_PRES_SEL
AP_QOS
AP_REM_PADDR
AP_ROLE_CURRENT
AP_SESS_SEL
AP_SFU_SEL
AP_STATE
AP_TOKENS_AVAIL
AP_TOKENS_OWNED
T}
_
A_ASSOC_CNF:none:T{
.ad l
.hy 0
AP_ACSE_SEL
AP_AFU_SEL
AP_CNTX_NAME
AP_DCS
AP_INIT_SYNC_PT
AP_INIT_TOKENS
AP_PFU_SEL
AP_PCDRL
AP_PRES_SEL
AP_QOS
AP_REM_PADDR
AP_SESS_SEL
AP_SFU_SEL
AP_STATE
AP_TOKENS_AVAIL
AP_TOKENS_OWNED
T}
_
A_PABORT_IND:none:AP_STATE
_
A_RELEASE_IND:none:AP_STATE
_
A_RELEASE_CNF:none:AP_STATE
_
P_ACTEND_IND:none:AP_STATE
_
P_ACTEND_CNF:none:AP_STATE
_
P_ACTDISCARD_IND:none:AP_STATE
_
P_ACTDISCARD_CNF:none:AP_STATE
::AP_TOKENS_OWNED
_
P_ACTINTR_IND:none:AP_STATE
_
P_ACTINTR_CNF:none:AP_STATE
::AP_TOKENS_OWNED
_
P_ACTRESUME_IND:none:none
_
P_ACTSTART_IND:none:none
_
P_CDATA_IND:none:none
_
P_CDATA_CNF:none:none
_
P_CTRLGIVE_IND:none:AP_TOKENS_OWNED
_
P_DATA_IND:none:none
_
P_PXREPORT_IND:none:AP_STATE
_
P_RESYNC_IND:none:AP_STATE
_
P_RESYNC_CNF:none:AP_STATE
::AP_TOKENS_OWNED
_
P_SYNCMAJOR_IND:none:AP_STATE
_
P_SYNCMAJOR_CNF:none:AP_STATE
_
P_SYNCMINOR_IND:none:none
_
P_SYNCMINOR_CNF:none:none
_
P_TDATA_IND:none:none
_
P_TOKENGIVE_IND:none:AP_STATE
::AP_TOKENS_OWNED
_
P_TOKENPLEASE_IND:none:none
_
P_UXREPORT_IND:none:AP_STATE
_
P_XDATA_IND:none:none
.TE
.PP
Protocol information received with a primitive will be conveyed by the
.B ap_cdata_t
structure pointed to by
.IR cdata .
The value returned in
.I sptype
serves as the discriminant for what members of the
.I cdata
are affected.
.PP
User-data received with a primiitve will be returned to the user via the
.I ubuf
parameter.  The XAP interface supports a vectored buffering scheme for handling
user data.  All data buffers are passed to XAP by the user in a chain of one or
more
.B ap_osi_vbuf_t
and
.B ap_osi_dbuf_t
pairs.
.I ubuf
must point to a location holding a pointer to an
.B ap_osi_vbuf_t
structure, defined as follows:
.PP
.nf
\f(CW\s-1\
typedef struct {
    unsigned char *db_base;    /* beginning of buffer */
    unsigned char *db_lim;     /* last octet+1 of buffer */
    unsigned char db_ref;      /* reference count */
} ap_osi_dbuf_t;

typedef struct ap_osi_vbuf {
    ap_osi_vbuf_t *b_cont;     /* next message block */
    unsigned char *b_rptr;     /* 1st octet of data */
    unsigned char *b_wptr;     /* 1st free location */
    ap_os_dbuf_t  *b_datap;    /* data block */
} ap_osi_dbuf_t;
\s+1\fP
.fi
.PP
User-data associated with XAP primitives is returned in a linked list of
message blocks.  Each message block is represented by an
.B ap_osi_vbuf_t
structure and is associatedw ith a datablock.  Data blocks, which are
represented by
.B ap_osi_dbuf_t
structures, may be associated with more than one message block.  The
.I db_ref
field of the
.B ap_osi_dbuf_t
structure indicates the number of
.B ap_osi_vbuf_t
structure that reference a particular data block.  The
.I db_base
and
.I db_lim
files of the
.B ap_osi_dbuf_t
structure point to the beginning and end of the data block respectively.  The
.I b_rptr
and
.I b_wptr
fields of the referencing
.B ap_osi_vbuf_t
structures point to the first octet to be read and written within the data
block respectively.  The
.I b_cont
field of the
.B ap_osi_vbuf_t
points to the next message block in the chain or is
.B NULL
if this is the end of the list.
.PP
The user allocation routine is responsible for setting up all fields of the
.BR ap_osi_vbuf_t " and " ap_osi_dbuf_t
structures when allocating buffers.  If buffers are allocated by another
mechanism, the user must ensure that the fields of each
.BR ap_osi_vbuf_t " and " ap_osi_dbuf_t
pair in the chain are set up prior to calling
.BR ap_rcv ().
.PP
.BR ap_rcv ()
places data into any buffer where write space is available
.RI ( "b_wptr < db_lib" )
and updates
.I b_wptr
\(em no other fields in the
.BR ap_osi_vbuf_t " or " ap_osi_dbuf_t
structures are updated (with the exception of
.I b_cont
that is updated when adding further
.BR ap_osi_vbuf_t " and " ap_osi_dbuf_t
pairs to the chain).
.PP
The user may pass full, partially full and empty receive buffers to
.BR ap_rcv ().
The user is responsible for ensuring that it is valid for the XAP Library to
fill any of the supplied buffers from
.IR b_wptr " to " db_lim .
.PP
If the user wishes all the buffers for
.BR ap_rcv ()
to be allocated using the user allocation routine, then the
.I ubuf
pointer will point to a
.B NULL
.B ap_osi_vbuf_t
pointer.
.PP
The XAP user is responsible for decoding the user data received in the
.I ubuf
parameter.  The general rules for decoding user data are stated here, please see
individual manual pages in Section 7 for specific exceptions to these rules.
.IP \(bu \w'\(bu\(em'u
If the
.RI \(lq X.410-1984 \(rq
mode of operation is in effect (i.e., the
.B AP_X410_MODE
bit of
.B AP_MODE_SEL
is set), the contents of
.I ubuf
buffer(s) are mapped directly from the SS-user data parameter of the equivalent
session service primitive.  Refer to the ISO Presentation Layer Protocol
Specification (see reference ISO 8823)
.[
iso 8823
.]
for further information concerning the encoding of these values.  (The primary
exception to this rule is the A-ASSOCIATE primitives:
.BR A_ASSOC_REQ (7),
.BR A_ASSOC_IND (7),
.BR A_ASSOC_RSP (7),
.BR A_ASSOC_CNF (7).)
.IP \(bu
If the
.RI \(lq X.410-1984 \(rq
mode of operation is not in effect and the primitive received is an ACSE
primitive, the data received in the
.I ubuf
buffer(s) must be decoded according to the definition specified in the ACSE
Protocol Specification (reference ISO 8650)
.[
iso 8650-1
.]
as follows:
.RS
.PP
.nf
\f(CW\s-1\
[30] IMPLICIT SEQUENCE OF EXTERNAL
\s+1\fP
.fi
.RE
.IP \(bu
If the
.RI \(lq X.410-1984 \(rq
mode of operation is not in effect and the primitive received is a Presentation
primitive, the data received in the
.I ubuf
buffer(s) must be decoded according to the User-data definition specified in the
Presentation Protocol Specification (reference ISO 8823)
.[
iso 8823
.]
as follows:
.RS
.PP
.nf
\f(CW\s-1\
CHOICE {
    [APPLICATION 0] IMPLICIT OCTET STRING,
    [APPLICATION 1] IMPLICIT SEQUENCE OF PDV-list
}
\s+1\fP
.fi
.RE
.PP
The
.I flags
argument is a bit mask used to control certain aspects of XAP processing.
Values for this field are formed by OR'ing together zero or more of the
following flags:
.TP
.B AP_ALLOC
If
.B AP_ALLOC
is set and the user did not specify an allocation routine on
.BR ap_open (3)
(or
.BR ap_restore (3))
then minus one
.RB ( -1 )
is returned and the location pointed to by
.I aperrno_p
is set to the
.RB [ AP_BADFLAGS ]
error code.
.RS
.PP
If no space is available in the supplied buffer chain (or the location pointed
to by
.I ubuf
contains
.BR NULL )
and either
.B AP_ALLOC
is not set or
.B AP_ALLOC
is set but the user allocation routine refuses to supply any buffers, then the
call to
.BR ap_rcv ()
fails, minus one
.RB ( -1 )
is returned and the location pointed to by
.I aperrno_p
is set to the
.RB [ AP_NOBUF ]
error code.
.PP
Regardless of the setting of
.BR AP_ALLOC ,
the user must have set the location pointed to by
.I ubuf
either to
.B NULL
or to point to a chain of one or more buffers.  The
.B AP_ALLOC
flag setting only takes effect when any supplied buffers have been filled and
more data remains to be returned to the user:
.IP \(bu \w'\(bu\(em'u
If the
.B AP_ALLOC
flag is set and space was available in the supplied buffer chain, the user
allocation routine is called to supply further buffers as they are needed.  If
the user allocation routine refuses to supply further buffers then the
.B AP_MORE
flag is set and the call to
.BR ap_rcv ()
completes; zero
.RB ( 0 )
is returned.  The user must free any buffers allocated by the user allocation
routine either by calling the
.BR ap_free (3)
function or by calling the
.BR ap_user_dalloc ()
function directly.
.IP \(bu
If
.B AP_ALLOC
is not set and space was available in the supplied buffers, then the
.B AP_MORE
flag is set and zero
.RB ( 0 )
is returned.
.RE
.TP
.B AP_MORE
This flag is ignored by XAP when
.BR ap_rcv ()
is called.  Upon return, if all data associated with a primitive has not been
received, the
.B AP_MORE
bit of the
.I flags
argument will be set, and the error code
.RB [ AP_AGAIN ]
or
.RB [ AP_NOBUF ]
is returned.  This indicates to the user that further
.BR ap_rcv ()
calls are required to receive the remainder of the data.  If the
.B AP_MORE
bit is not set, all data associated with the primitive has been received.
.RS
.PP
A primitive that is received in multiple parts may be interrupted by an incoming
unsequenced primitive
.RB ( P_XDATA_IND "(7), " A_ABORT_IND "(7) or " A_PABORT_IND (7)).
See the discussion below for information on how this is indicated by the service
and how the reception of the current primitive is resumed if appropriate.
.PP
Note it is possible for
.BR ap_rcv ()
to return with the
.B AP_MORE
flag set even when the
.B AP_ALLOC
flag is set, if non-blocking execution mode is being used or an expedited data
primitive arrives at the XAP instance (see below).
.RE
.PP
If XAP is being used in blocking execution mode
.RB ( AP_NDELAY
bit of the
.B AP_FLAGS
environment attribute is not set),
.BR ap_rcv ()
blocks until either an entire primitive is received, or XAP fills the buffer(s)
pointed to by
.IR ubuf .
.PP
If XAP is being used in non-blocking execution mode
.RB ( AP_NDELAY
bit is set) and it runs out of data before receiving an entire primitive and it
has not filled the
.I ubuf
buffer(s),
.BR ap_rcv ()
returns a value of minus one
.RB ( -1 )
and the location pointed to by
.I aperrno_p
is set to the
.RB [ AP_AGAIN ]
error code.
.PP
If an unsequenced primitive (such as expedited data or an abort primitive)
arrives while another primitive is being processed,
.BR ap_rcv ()
returns minus one
.RB ( -1 )
and sets the location pointed to by
.I aperrno_p
to the
.RB [ AP_LOOK ]
error code.
.\"The
.\".B AP_MORE
.\"bit of the flags argument is set.
This indicates to the user that XAP has suspended processing of the current
primitive.  The user must use the
.BR ap_rcv ()
function to retrieve the unsequenced primitive.
.PP
For
.BR P_XDATA_IND (7),
XAP resume receiving data associated with the suspended primitive once the
expedited data has been successfully received.  If an abort primitive is
received, the rest of the in-progress primitive is lost and is not returned by
the service in subsequent
.BR ap_rcv ()
calls.
.PP
Note that it is possible for the processing of a single primitive to be
interrupted more than once due to the arrival of unsequenced indications.
.PP
.I aperrno_p
must be set to point to a location that will be used to carry an error code back
to the user.
.\"
.\"
.SH ENVIRONMENT
.PP
See
.BR ap_env (3).
.\"
.\"
.SH RETURN
.PP
Upon successful completion, a value of zero
.RB ( 0 )
is returned.  Otherwise, a value of minus one
.RB ( -1 )
is returned and the location pointed to by
.I aperrno_p
is set to indicate the error.
.\"
.\"
.SH ERRORS
.PP
.TP \w'[\fBAP_BADLSTATE\fP]\(em'u
.RB [ AP_AGAIN ]
XAP was unable to complete the requested action.  Try again.
.TP
.RB [ AP_BADF ]
The
.I fd
parameter does not identify an XAP instance.
.TP
.RB [ AP_BADFLAGS ]
.B AP_ALLOC
was set but a user-specified buffer allocation routine was not specified on
.BR ap_open "(3) or " ap_restore (3).
.TP
.RB [ AP_BADLSTATE ]
XAP is in a state where
.BR ap_rcv ()
is not allowed (i.e.,
.BR AP_UNBOUND ).
.TP
.RB [ AP_BADUBUF ]
Either the buffers pointed to by
.I ubuf
are invalid, or the pointer is
.B NULL
and yet
.B AP_ALLOC
is not set.
.TP
.RB [ AP_LOOK ]
An event is pending.
.TP
.RB [ AP_NOBUF ]
The supplied user data buffers contained no unused buffer space and, if
.B AP_ALLOC
was set, then no more buffers could be obtained.
.TP
.RB [ AP_NOENV ]
There is no XAP environment associated with
.IR fd .
.TP
.RB [ AP_NOMEM ]
Out of memory.
.TP
.RB [ AP_PDUREJ ]
XAP rejected the received PDU.
.PP
In addition, operating system and asn.1 class errors are reported.
.\"
.\"
.\".SH IMPLEMENTATION
.\".PP
.\"
.\"
.SH NOTICES
.PP
It is notworthy that the
.BR ap_osi_vbuf_t " and " ap_osi_dbuf_t
mirrors the
.BR mblk_t "(9) and " dblk_t (9)
of
.IR STREAMS (4).
.\"
.\"
.SH "SEE ALSO"
.PP
.BR ap_open (3),
.BR close (2),
.BR APLI (3),
.BR XAP (3).
.\"
.\"
.SH BUGS
.PP
.BR ap_rcv ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR ap_rcv ()
is compatible with APLI
.[
apli unix international
.]
and XAP,
.[
xap c303
.]
and implementations based on APLI or XAP, such as
.IR "USL ONP" \(rg,
.IR "Solaris Solstice OSI" \(rg,
.IR "HP-UX OTS/9000" \(rg,
.IR "AIX OSI/6000" \(rg,
.IR "Digital DECnet/OSI" \(rg,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Only source compatibility is attempted.
Binary compatibility will fail due to the lack of published and standard symbolic constants.
Any exhibited binary compatibility is coincidental and is scheduled to be removed on the next
release.
.IP \(em
.PP
See \fBAPLI\fP(3), \fBXAP\fP(3) and \fISTREAMS\fP(4) for additional
compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
APLI,
.[
apli unix international
.]
XAP.
.[
xap c303
.]
.\"
.\"
.SH HISTORY
.PP
.BR ap_rcv ()
first appeared in APLI.
.[
apli unix international
.]
.\"
.\"
.SH VERSIONS
.PP
This manual page was written for the OpenSS7 XAP Library.
.\"
.\"
.[
$LIST$
.]
.T4
