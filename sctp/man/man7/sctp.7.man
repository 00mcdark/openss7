.\" -*- nroff -*-
.\"
.\" @(#) $Id: sctp.7.man,v 0.9.2.4 2002/05/16 07:33:28 brian Exp $
.\"
.\" =========================================================================
.\"
.\" This manpage is Copyright (C) 2001-2002  OpenSS7 Corp. <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" =========================================================================
.\"
.\" Modified $Date: 2002/05/16 07:33:28 $ by $Author: brian $
.\"
.\" =========================================================================
.TH SCTP 7 "8 May 2002" "Linux Man Page" "Linux Programmer's Manual"
.SH "NAME"
sctp \- SCTP protocol.
.SH "SYNOPSIS"
.nf
\fB\)#include <sys/socket.h>\fR

\fB\)#include <netinet/in.h>\fR

\fB\)sctp_socket = socket(PF_INET, \fI\)SOCK_SEQPACKET\fB\), 0);
\fB\)sctp_socket = socket(PF_INET, \fI\)SOCK_SEQPACKET\fB\), IPPROTO_SCTP);
\fB\)sctp_socket = socket(PF_INET, \fI\)SOCK_STREAM\fB\), IPPROTO_SCTP);
\fB\)sctp_socket = socket(PF_INET, \fI\)SOCK_RDM\fB\), IPPROTO_SCTP);
.fi

.SH "DESCRIPTION"
This is an implementation of the SCTP (Stream Tranmission Control Protocol)
defined in RFC2960 with a \fB\)tcp\fR(7)-compatible \fI\)SOCK_STREAM\fR socket
interface similar to draft-ietf-tsvwg-sctpsocket-03.  SCTP provides reliable
delivery of sequenced or unsequenced packets over a full duplex connection
between two sockets on top of \fB\)ip\fR(7).  SCTP can guarantee that the data
arrives in order on a stream, if requested, and retransmits lost packets.  It
generates and checks a per packet checksum to catch transmission errors.  SCTP
\fI\)SOCK_SEQPACKET\fR sockets preserve message boundaries, Nagle at the
association level, and provide sequenced and unsequenced reliable and partial
reliable delivery; \fI\)SOCK_RDM\fR sockets preserve message boundaries, do
not Nagle, and provide only unsequenced but reliable or partially reliable
delivery; \fI\)SOCK_STREAM\fR sockets do not preserve message boundaries and
Nagle at the stream level similar to \fB\)tcp\fR(7).

A fresh SCTP socket has no remote or local address and is not fully specified.
To create an outgoing SCTP association use \fB\)connect\fR(2) to establish an
association with another SCTP endpoint.  To receive incoming associations
\fB\)bind\fR(2) the socket first to a number of local addresses and a port and
then call \fB\)listen\fR(2) to put the socket into listening state.  After
that a new socket for each incoming association can be accepted using
\fB\)accept\fR(2).  A socket which has had \fB\)accept\fR(2) or
\fB\)connect\fR(2) successfully called on it is fully specified and may
transmit data.  Data cannot be transmitted on listening or not yet connected
sockets.

SCTP supports large windows to support links with high latency or bandwidth.
Large SCTP windows can be used by increasing the send and receive buffer
sizes.  They can be set globally with the \fB\)net.core.wmem_default\fR and
\fB\)net.core.rmem_default\fR sysctls, or on individual sockets by using the
\fI\)SO_SNDBUF\fR and \fI\)SO_RCVBUF\fR socket options.  The maximum sizes for
socket buffers are limited by the \fB\)net.core.wmem_max\fR and
\fB\)net.core.rmem_max\fR sysctls.  See \fB\)socket\fR(7) for more
information.
.PP
.B Sending Data
.PP
When sending data, the specific destination address within the association to
which to send the data can be specified by providing a valid destination
address as an argument to \fB\)sendto\fR(2) or \fB\)sendmsg\fR(2).  Data sent
with \fB\)send\fR(2) or \fB\)write\fR(2) will use SCTP's destination transport
address selection policies for transmission and retransmission.  The stream
upon which to send the data can also be set with the \fB\)SCTP_SID\fR socket
option on a socket basis with \fB\)setsockopt\fR(2) or on a per-message basis
with \fB\)sendmsg\fR(2).  In addition, the \fB\)ip\fr(7) \fI\)IP_PKTINFO\fR
option can be used with \fB\)sendmsg\fR(2) to specify the interface, first-hop
destination address and source address to be used in the outbound packet on
\fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR sockets.  IP options can also be
specified for the outbound packet with the \fB\)ip\fR(7) \fI\)IP_OPTIONS\fR or
\fB\)IP_RETOPTS\fR control messages to \fB\)sendmsg\fR(2).
.PP
For \fI\)SOCK_SEQPACKET\fR socket, send operations may also use the
\fB\)MSG_MORE\fR flag when sending with \fB\)send\fR(2), \fB\)sendto\fR(2) or
\fB\)sendmsg\fR(2) to indicate that the next write operation will provide
additional data belonging to the same packet.
\fI\)SOCK_STREAM\fR sockets do not support send options and do not return
the \fB\)MSG_TRUNC\fR flag on send operations.
.PP
\fI\)SOCK_SEQPACKET\fR or \fI\)SOCK_STREAM\fR socket does not have sufficient
room to buffer the sent data, it buffers what it can and returns the amount of
user data buffered.  \fI\)SOCK_RDM\fR sockets wait for sufficient room to
buffer the entire sent packet before returning.  \fI\)SOCK_SEQPACKET\fR and
\fI\)SOCK_STREAM\fR sockets will segment large data writes in to smaller
segments for delivery to the peer.
.PP
For \fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR sockets, all receive
operations return only one packet, or a portion of one packet.  When the
packet is smaller than the passed buffer only that much data is returned, when
it is larger the packet is truncated and the \fB\)MSG_TRUNC\fR flag is set.
Subsequent \fB\)recv\fR or \fB\)read\fB\)(2), or a subsequent
\fB\)recvfrom\fR(2) or \fB\)recgmsg\fR for the same stream will return the
remainder of the packet.  SCTP \fI\)SOCK_SEQPACKET\fR sockets return the
\fB\)MSG_EOR\fR flag when the end of the packet has been received
successfully.
.PP
For \fI\)SOCK_STREAM\fR sockets, all receive operations return only the amount
of data available on the current stream.  \fB\)MSG_TRUNC\fR and
\fB\)MSG_EOR\fR are never set for \fI\)SOCK_STREAM\fR sockets.
.PP
IP options may be sent or received using the socket options described in
\fB\)ip\fR(7).  They are only processed by the kernel when the appropriate
sysctl is enabled (but still passed to the user even when it is turned off).
See \fB\)ip\fR(7).
.PP
When the \fB\)MSG_DONTROUTE\fR flag is set on sending, the destination address
must refer to a local interface address and the packet is only sent to that
interface.
.PP
SCTP fragments a packet when its total length exceeds the association MTU
(Maximum Transmission Unit).  A more network friendly alternative is to use
path MTU discovery as described in the \fB\)IP_PMTU_DISCOVER\fR section of
\fB\)ip\fR(7).
.PP
SCTP supports urgent data similar to \fB\)tcp\fR(7).  Urgent data is used to
signal the receiver that some important message is part of the data stream and
that it should be processed as soon as possible.  Urgent data is always sent
out of order.  To send urgent (or out of order) data specify the
\fB\)MSG_OOB\fR option to \fB\)send\fR(2), \fB\)sendto\fR(2), or
\fB\)sendmsg\fR(2).  When urgent data is received, the kernel sends a
\fB\)SIGURG\fR signal to the reading process or the process or process group
that has been set for the socket using the \fB\)FIOCSPGRP\fR or
\fB\)FIOCSETOWN\fR ioctls.  When the \fB\)SO_OOBINLINE\fR socket option is
enabled, urgent data is put into the normal data stream (and can be tested for
by the \fB\)SIOCATMARK\fR ioctl), otherwise it can be only received when the
\fB\)MSG_OOB\fR flag is set for \fB\)recvmsg\fR(2).
.SH "SOCKET CALLS"
.PP
Socket calls for SCTP \fI\)SOCK_STREAM\fR, \fI\)SOCK_SEQPACKET\fR and
\fI\)SOCK_RDM\fR sockets are different in some respects (addressing and
options) than their \fB\)tcp\fR(7) or \fB\)udp\fR(7) counterparts.  These
differences are described here.  For common behavior, please see the indicated
manual page in Section 2.
.TP
.BR bind (2)
A call to \fB\)bind\fR(2) can provide multiple address if the host is
multi-homed.  Binds to \fI\)INADDR_ANY\fR will result in a binding to all of
the local transport addresses belonging to host which do not cause a conflict
at the time that a connection is formed.  The local port number is assigned at
the time that the bind is called.

Binding to a socket address with address family \fI\)AF_UNSPEC\fR will cause
the socket to be unbound from all transport addresses.

SCTP supports binding of multiple sockets to the same transport address
providing that the socket option \fI\)SO_REUSEADDR\fR (see
\fB\)socket\fR\)(7)) is set on the sockets and that no sockets have executed
\fB\)listen\fR\)(2) bound to the same transport address.
.TP
.BR accept (2)
A call to \fB\)accept\fR(2) requesting the peer address of the connection will
return multiple transport addresses if the connecting peer is multi-homed.
The first transport address in the array is the primary transport address of
the connecting peer.  The primary transport address is the address upon which
the SCTP \fI\)INIT\fR message was received.  Otherwise, \fB\)accept\fR(2) is
unchanged.
.TP
.BR connect (2)
A call to \fB\)connect\fR(2) can provide multiple destination transport
addresses if the peer host is multi-homed.  If an \fI\)INIT\fR chunk sent to
the first destination transport address is not acknowledged, the next
\fI\)INIT\fR chunk will be sent to the next address in the list.  This will
occur until an acknolwegement is received from one of the addresses or the
connection attempt times out.  Each address will be retried
\fB\)sctp_max_init_retries\fR times before the connection process is
considered to have timed out.  Broadcast and Multicast addresses are permitted
for the call to \fB\)connect\fR(2) but will not form an endpoint address in
the association.  This feature permits fast and reliable initialization of
SCTP associations.

Connecting to a socket address with address family \fI\)AF_UNSPEC\fR will
sockets engaged in active connections to be disconnected.
.TP
.BR read "(2), " recv "(2), " recvfrom "(2) and " recvmsg "(2)"
SCTP preserves message boundaries on read for \fI\)SOCK_SEQPACKET\fR and
\fI\)SOCK_RDM\fR sockets.  Message boundaries are never preserved for
\fI\)SOCK_STREAM\fR sockets.

The following message flags to or returned from \fB\)recv\fR(2),
\fB\)recvfrom\fR(2) and \fB\)recvmsg\fR(2) have special interpretations for
SCTP:
.RS
.TP
.B MSG_OOB
SCTP supports the return of the \fB\)MSG_OOB\fR flag from \fB\)recv\fR(2),
\fB\)recvfrom\fR(2) and \fB\)recvmsg\fR(2).  Data read with the
\fB\)MSG_OOB\fR flag set indicates that the data was received on the
specified SCTP stream with the Unordered bit set.
.TP
.B MSG_EOR
For \fI\)SOCK_SEQPACKET\fR sockets, the \fB\)MSG_EOR\fR flag indicates that
the data read has been read to the end of a record.  The \fB\)MSG_EOR\fR flag
is not used for \fI\)SOCK_STREAM\fR or \fI\)SOCK_RDM\fR SCTP sockets.
.TP
.B MSG_TRUNC
SCTP supports the use of the \fB\)MSG_TRUNC\fR flag to \fB\)recv\fR(2),
\fB\)recvfrom\fR(2) and \fB\)recvmsg\fR(2).  Data read with the
\fB\)MSG_TRUNC\fR flag set will return the number of bytes available in the
packet rather than the number of bytes read.  When the \fB\)MSG_TRUNC\fR flag
is returned from \fB\)recv\fR(2), \fB\)recvfrom\fR(2) and \fB\)recvmsg\fR(2),
it indicates that the record was truncated.  This latter behavior is only
valid for \fI\)SOCK_RDM\fR sockets.  \fB\)MSG_TRUNC\fR is never set on return
for \fI\)SOCK_STREAM\fR and \fI\)SOCK_SEQPACKET\fR sockets.
.RE
.IP
Other message flags have the same interpretation as described in
\fB\)recv\fR(2), \fB\)recvfrom\fR(2) and \fB\)recvmsg\fR(2).
.TP
.BR write "(2), " send "(2), " sendto "(2) and " sendmsg "(2)"
SCTP preserves message boundaries on write for \fI\)SOCK_SEQPACKET\fR and
\fI\)SOCK_RDM\fR sockets.  Message boundaries are never preserved for
\fI\)SOCK_STREAM\fR sockets.

The following message flags to \fB\)send\fR(2), \fB\)sendto\fR(2) and
\fB\)sendmsg\fR(2) have special interpretations for SCTP:
.RS
.TP
.B MSG_OOB
SCTP supports the use of the \fB\)MSG_OOB\fR flag to \fB\)send\fR(2),
\fB\)sendto\fR(2) and \fB\)sendmsg\fR(2).  Data written with the
\fB\)MSG_OOB\fR flag set indicates that the data is to be sent on the
specified SCTP stream with the Unordered bit set.
.TP
.B MSG_MORE
SCTP supports the use of the \fB\)MSG_MORE\fR flag to \fB\)send\fR(2),
\fB\)sendto\fR(2) and \fB\)sendmsg\fR(2).  Data written with the
\fB\)MSG_MORE\fR flag set indicates that the data of a subsequent send
operation on the same stream contains additional data belonging to the same
record.  Use of the \fB\)MSG_MORE\fR flag is only supported for
\fI\)SOCK_SEQPACKET\fR sockets.  Data written with \fB\)write\fR(2) is assumed
to contain an entire record.
.RE
.IP
Other message flags have the same interpretation as described in
\fB\)send\fR(2), \fB\)sendto\fR(2) and \fB\)sendmsg\fR(2).
.TP
.BR shutdown "(2) and " close (2)
.SH "ADDRESS FORMATS"
SCTP is built on top of IP (see \fB\)ip\fR(7)).  The address formats defined
by \fB\)ip\fR(7) apply to SCTP.  SCTP uses the IPv4 \fB\)sockaddr_in\fR
address format described in \fB\)ip\fR(7).
.PP
SCTP supports multiple-stream point-to-point communication within multi-homed
associations; broadcasting and multicasting are not supported.
.PP
In addition to normal IP addressing, SCTP provides extensions on the
\fB\)bind\fR(2), \fB\)accept\fR, \fB\)connect\fR(2), \fB\)getsockname\fR(2),
and \fB\)getpeername\fR(2) system calls.  These functions normally take or
return a single \fB\)sockaddr_in\fR as an address argument.  When used in
conjunction with a SCTP socket on or to a multi-homed host, these calls will
accept or return an array of \fB\)sockaddr_in\fR structures.  The number of
addresses in the structure is indicated by the length of the structure and the
protocol family of the socket.  SCTP will only support one port number being
specified in the address list.  (Note: Linux only provides
\fI\)MAX_SOCK_ADDR\fR as a maximum size of the socket address length.  This is
current 128 bytes or 8 \fB\)sockaddr_in\fR structures.)

Multiple addresses provided to the \fB\)bind\fR(2) system call will be
interpreted as multiple local addresses to provide to the peer at connection
time as well as the local address/port combinations upon which a listening
socket will accept incoming associations.  A call to \fB\)accept\fR(2)
requesting the source address of the peer will return multiple transport
addresses if the connecting peer is multihomed.  Multiple addresses provided
to the \fB\)connect\fR(2) system call will be interpreted as multiple
destination address/port combinations to which to form an association. The
\fB\)getpeername\fR(2) system call returns the list of destination
address/port combinations to which the socket is connected.  The
\fB\)getsockname\fR(2) system call returnes the list of local address/port
combinations to which the socket is bound.
.TP
.BR getsockname (2)
A call to \fB\)getsockname\fR(2) can provide multiple bound transport
addresses for a multihomed SCTP host when the socket is bound to multiple
addresses using \fB\)bind\fR(2).  The first address in the list is the primary
address to which the SCTP socket is bound.  This is the first address that
will be attempted to be used as a source address when sending an \fI\)INIT\fR
chunk to the SCTP peer as a result of a call to \fB\)connect\fR(2).
Otherwise, the order of the addresses has no significance.

When the SCTP socket is not bound to any address, the call to
\fB\)getsockname\fR(2) returns a socket address with address family
\fI\)AF_UNSPEC\fR.

As a result of binding to \fI\)INADDR_ANY\fR or the \fB\)ADD-IP\fR extension
to SCTP, subsequent calls to \fB\)getsockname\fR(2) may return different
addresses depending on the state of the connection and resulting from the
exchange of \fI\)ASCONF\fR control chunks.  This list of transport addresses
returned by \fB\)getsockname\fR(2) represents the current list of local
transport addresses bound to the endpoint.

When the SCTP connection is multi-homed or supports \fB\)ADD-IP\fR, this
behavior is different from \fB\)tcp\fR(7) and other connection-oriented
protocols, whose bound address does not change during the lifespan of a
connection.
.TP
.BR getpeername (2)
A call to \fB\)getpeername\fR(2) can provide multiple peer transport addresses
for a multihomed SCTP peer when the socket is connecting or connected to
multiple addresses using \fB\)connect\fR(2).  The first address is always the
current primary destination transport address.  The current primary
destination transport address is the address to which all SCTP messages will
be sent in the absence of congestion or failure.

As a result of connecting to multiple transport addresses using
\fB\)connect\fR(2) or the \fB\)ADD-IP\fR extension to SCTP, the membership of
the list of transport addresses returned by \fB\)getpeername\fR(2) may change
due to the state of the socket or resulting from the exchange of
\fB\)ASCONF\fR control chunks.

When the SCTP connection is multi-homed or supports \fB\)ADD-IP\fR, this
behavior is different from \fB\)tcp\fR(7) and other connection-oriented
protocol, whose peer address does not change during the lifespan of a
connection.
.SH "SYSCTLS"
These sysctls can be accessed by the \fB\)/proc/sys/net/ipv4/*\fR files or
with the \fB\)sysctl\fR(2) interface.
.PP
In addition, 
all \fB\)socket\fR(7) sysctls
.IR rmem_default ", " rmem_max ", " wmem_default ", " wmem_max ", " msg_cost ", " msg_burst ", " netdev_max_backlog " and " optmem_max
are supported by SCTP without modification.
\fB\)ip\fR(7) sysctls
.IR ip_default_ttl ", " ip_dynaddr ", " ip_autoconfig ", " ip_local_port_range " and " ip_no_pmtu_disc
are supported by SCTP without modification;
.IR ip_forward ", " ipfrag_high_thresh ", " ipfrag_low_thresh " and " ip_always_defrag
sysctls are not applicable to SCTP.
For more information, see \fB\)socket\fR(7) and \fB\)ip\fR(7).
.PP
The following \fB\)sctp\fR(7) specific sysctls are supported by SCTP:
.TP
.B sctp_max_istreams
Defines the default maximum number of inbound SCTP streams that will be
requested when forming or receiving connections on an SCTP socket.  This is a
default value.  The actual value used by a socket for both ougoing and
incoming connections can be changed with the SCTP option
\fI\)SCTP_ISTREAMS\fR before a call to \fB\)listen\fR(2) or \fB\)connect\fR(2).
.TP
.B sctp_req_ostreams
Defines the default requested number of outbound SCTP streams that will be
requested when forming or receiving connections on an SCTP socket.  This is a
default value.  The actual value used by a socket for both ougoing and
incoming connections can be changed with the SCTP option
\fI\)SCTP_OSTREAMS\fR before a call to \fB\)listen\fR(2) or \fB\)connect\fR(2).
.TP
.B sctp_rto_initial
Defines the time interval (in milliseconds) which will be used as an initial
RTO (Retransmission Time Out) value when sending packets to a destination for
the first time.  Valid values are zero or greater and must be within the range
from \fI\)sctp_rto_min\fR to \fI\)sctp_rto_max\fR.  The default value is the
value recommended in RFC 2960 (3,000 milliseconds).  (Note: this is only a
default value which will be assigned to new destinations.  Each destination
can be controlled with the socket option \fI\)SCTP_RTO\fR or
\fI\)SCTP_RTO_INITIAL\fR described below under \fB\)SOCKET OPTIONS\fR.)
.TP
.B sctp_rto_min
Defines the time interval (in milliseconds) which will be used as a RTO
(Retransmission Time Out) value when sending packets.  Valid values must be
the number of milliseconds in a tick (1000/HZ) or greater and must be less
than or equal to the value of \fI\)sctp_rto_max\fR. The default value is the
value recommended in RFC 2960 (1,000 milliseconds).  (Note: this is only a
default value which will be assigned to new destinations.  Each destination
can be controlled with the socket option \fI\)SCTP_RTO\fR or
\fI\)SCTP_RTO_MIN\fR described below under \fB\)SOCKET OPTIONS\fR.)
.TP
.B sctp_rto_max
Defines the time interval (in milliseconds) which will be used as a RTO
(Retransmission Time Out) value when sending packets.  Valid values must be
the number of milliseconds in a tick (1000/HZ) or greater and must be greater
than or equal to the value of \fI\)sctp_rto_min\fR.  The default value is the
value recommended in RFC 2960 (60,000 milliseconds).  (Note: this is only a
default value which will be assigned to new destinations.  Each destination
can be controlled with the socket option \fI\)SCTP_RTO\fR or
\fI\)SCTP_RTO_MAX\fR described below under \fB\)SOCKET OPTIONS\fR.)
.TP
.B sctp_valid_cookie_life
Defines the time interval (in seconds) beyond which a COOKIE ECHO with a
cookie sent in an INIT ACK will no longer be accepted.  Valid values are 1
second or greater.  The default value is the value recommended in RFC 2960 (60
seconds).  The value for a given socket can be changed with the socket option
\fI\)SCTP_COOKIE_LIFE\fR as described under \fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_max_sack_delay
Defines the interval of time (in milliseconds) that the sending endpoint is
permitted to delay an acknowledgement of a received data chunk.  Valid values
are in the range from 1 to 500 milliseconds.  (RFC 2960 forbids setting this
value larger than 500 milliseconds.)  The default value is the value
recommended in RFC 2960 (200 milliseconds).  The value for a given socket can
be changed with the socket option \fI\)SCTP_SACK_DELAY\fR as described under
\fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_path_max_retrans
Defines the number of times that the sending SCTP endpoint will attempt
retransmitting a packet on to a given destination transport address before it
considers that destination transport address inactive.  Valid values include
zero.  The default value is the value recommended in RFC 2960 (5 retries).
(Note: this is only a default value which will be assigned to new
destinations.  Each destination can be controlled with the socket option
\fI\)SCTP_RTO\fR or \fI\)SCTP_PATH_MAX_RETRANS\fR described below under
\fB\)SOCKET OPTIONS\fR.)
.TP
.B sctp_assoc_max_retrans
Defines the number of times that the sending SCTP endpoint will attempt
retransmitting a packet on a given association before it aborts the
association.  Valid values include zero.  The default value is the value
recommended in RFC 2960 (10 retries).  This value should be larger than the
sum of all of the \fI\)path_max_retrans\fR values of each of the destinations.
The value for a given socket can be changed with the socket option
\fI\)SCTP_ASSOC_MAX_RETRANS\fR as described under \fB\)SOCKET OPTIONS\fR.  .TP
\fB\)sctp_max_init_retries\fR
The number of times that an SCTP INIT or COOKIE ECHO will be resent before
abandoning the association intialization.  Valid values include zero.  The
default value is the value recommended in RFC 2960 (8 retries).
The value for a given socket can be changed with the socket option
\fI\)SCTP_MAX_INIT_RETRIES\fR as described under \fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_heartbeat_itvl
Defines the interval (in seconds) between successive HEARTBEAT messages used
to probe destination transport address for RTT calculation and activity.
Valid valids are 1 second or greater.  The default value is the value
recommended in RFC 2960 (30 seconds).  (Note: This is only the default value
which will be assigned to new destinations.  Each destination can be
controlled with the socket option \fI\)SCTP_HB\fR or
\fI\)SCTP_HEARTBEAT_ITVL\fR described below under \fB\)SOCKET OPTIONS\fR.)

If the kernel configuration parameter \fI\)CONFIG_SCTP_THROTTLE_HEARTBEATS\fR
is set, then half this value is also used for throttling heartbeats.  Then
only two heartbeats per interval are permitted, any additional heartbeats are
discarded.
.TP
.B sctp_mac_type
Defines the MAC (Message Authentication Code) type which will be used when
signing cookies in INIT ACK messages.  Valid values are
\fI\)SCTP_HMAC_SHA_1\fR, for the FIPS 180-1 Secure Hash Algorithm SHA-1 HMAC,
\fI\)SCTP_HMAC_MD5\fR, for the RFC 1321 Message Digest 5 HMAC, and
\fI\)SCTP_HMAC_NONE\fR, for no secure signature.  There is no required value
here for RFC 2960.  The default value is (in priority of availability)
\fI\)SCTP_HMAC_MD5\fR, \fI\)SCTP_HMAC_SHA_1\fR, then \fI\)SCTP_HMAC_NONE\fR.
SHA-1 performs well on big-endian machines, MD5 performs well on little-endian
machines.  Whether either of these can be selected depends on the kernel
configuration parameters \fI\)CONFIG_SCTP_HMAC_SHA1\fR and
\fI\)CONFIG_SCTP_HMAC_MD5\fR.  The MAC for a given socket can be changed
before the \fB\)listen\fR(2) call with the socket option \fI\)SCTP_MAC_TYPE\fR
as described under \fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_cookie_inc
Defines the time increment (in milliseconds) which will be added to the
lifespan of the cookie in an INIT ACK if the received INIT requests cookie
preservative to lengthen the lifespan of the cookie.  Valid values include
zero.  The default value is the value recommended in RFC 2960 5.2.6 (1
second).  The cookie lifetime increment for a given socket can be changed
before the \fB\)listen\fR(2) call with the socket option
\fI\)SCTP_COOKIE_INC\fR as described under \fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_throttle_itvl
Defines the interval (in milliseconds) within which the SCTP receiver will not
accept more than one INIT or COOKIE ECHO.  Zero (don't throttle) is a valid
value.  The default value is 50 milliseconds.  When the HMAC type is SHA-1 or
MD5, the implementation is vulnerable to DoS flood attacks using INIT or
COOKIE ECHO messages.  When SCTP is compiled with
\fI\)CONFIG_SCTP_THROTTLE_PASSIVEOPENS\fR, this permits the throttling of INIT
and COOKIE ECHO messages.  Only one INIT and one COOKIE ECHO message will be
accepted in the interval set by this control.  The throttle interval for a
given socket can be changed before the \fB\)listen\fR(2) call with the socket
option \fI\)SCTP_THROTTLE_ITVL\fR as described under \fB\)SOCKET OPTIONS\fR.
.TP
.B sctp_checksum_algorithm
Defines the checksum algorithm which will be used when checksumming packets.
Valie values are \fI\)SCTP_CSUM_ADLER_32\fR for the RFC 2960 Appendix B
algorithm and \fI\)SCTP_CSUM_CRC_32C\fR for the
draft-ietf-tsvwg-sctpcsum-06.txt CRC-32C checksum algorithm.  This value may
also be set for a given socket using the \fI\)SCTP_CKSUM_TYPE\fR socket option
described below.
.TP
.B sctp_wmem
Defines three values (lower, default, upper) for the socket write buffer.  The
value associated with a given socket can also be changed with the
\fI\)SO_SNDBUF\fR option, see \fB\)socket\fR(7).
.TP
.B sctp_rmem
Defines three values (lower, default, upper) for the socket read buffer.  The
value associated with a given socket can also be changed with the
\fI\)SO_RCVBUF\fR option, see \fB\)socket\fR(7).
.SH "SOCKET_OPTIONS"
To set or get a SCTP socket option, call \fB\)getsockopt\fR(2) to read or
\fB\)setsockopt\fR(2) to write the option with the socket family argument set
to \fB\)SOL_SCTP\fR.  In addition, most \fB\)SOL_SOCKET\fR and \fB\)SOL_IP\fR
socket options are valid on SCTP sockets.  For more information see
\fB\)socket\fR(7) and \fB\)ip\fR(7).
.PP
The following \fI\)SOL_SOCKET\fR \fB\)socket\fR(7) socket options are supported:
.TP
.B SO_KEEPALIVE
Sets or gets a flag that controls heartbeats for the entire SCTP association.
See \fB\)socket\fR(7) for additional information.
.TP
.B SO_OOBINLINE
If this option is enabled, out of order data which has been received on a
stream will be placed between the ordered data for that stream.  Otherwise,
out of order data is only returned on a read call when the \fB\)MSG_OOB\fR
flag is set when receiving.  This option is ignored for \fI\)SOCK_RDM\fR
sockets and only applies to \fI\)SOCK_STREAM\fR and \fI\)SOCK_SEQPACKET\fR
SCTP sockets.
See \fB\)socket\fR(7) for additional information.
.TP
.B SO_BINDTODEVICE
Binds the socket to a particular device.  This is not yet supported for
LinuxSCTP; however, support it is planned for the future.
See \fB\)socket\fR(7) for additional information.
.TP
.B SO_REUSEADDR
Supported by SCTP without modification; however, consideration is made for
binding of multiple transport addresses.
See \fB\)socket\fR(7) for additional information.
.TP
.BR SO_RCVLOWAT ", " SO_SNDLOWAT ", " SO_RCVTIMEO ", " SO_SNDTIMEO ", " SO_DEBUG ", " SO_TYPE ", " SO_DONTROUTE ", " SO_SNDBUF ", " SO_RCVBUF ", " SO_LINGER ", " SO_PRIORITY " and " SO_ERROR
These socket options are supported by SCTP without modification.
See \fB\)socket\fR(7) for additional information.
.PP
The following \fI\)SOL_IP\fR \fB\)ip\fR(7) socket options are supported:
.TP
.B IP_OPTIONS
Sets or gets the IP options to be sent with every packet from this socket.
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_PKTINFO
Pass an \fI\)IP_PKINFO\fR ancilliary message that contains the \fB\)pktinfo\fR
structure that supplies some information about the incoming or outgoing
packet.  This only works for \fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR
sockets.  It is ignored for TCP-compatible \fI\)SOCK_STREAM\fR sockets.
For \fB\)setsockopt\fR(2)
and \fB\)getsockopt\fR(2), the argument is a flag that tells the socket wither
the \fI\)IP_PKTINFO\fR message should be passed or not.  The message itself
can only be sent or retrieved as a control message with a packet using
\fB\)recvmsg\fR(2) or \fB\)sendmsg\fR(2).

.nf
.ps -2
\fC\
struct in_pktinfo {
        unsigned int    ipi_ifindex;    /* Interface index      */
        struct in_addr  ipi_spec_dst;   /* Local address        */
        struct in_addr  ipi_addr;       /* Header Dest Address  */
};
.ps +2
.fi

.RS
.TP
.I ipi_ifindex
is the unique index of the interface the packet was received on, or the index
of the interface upon which the packet is to be sent;
.TP
.I ipi_spec_dst
is the local address of the received packet or sent packet, and
.TP
.I ipi_addr
is the destination address in the packet header.
.RE
.IP
If \fI\)IP_PKTINFO\fR is passed to \fB\)sendmsg\fR(2) then the outgoing packet
will be sent over the interface specified in \fI\)ipi_ifindex\fR with the
destination address set to \fI\)ipi_spec_dst\fR.

This option is used under SCTP to control the source (local) address of
packets sent with \fB\)sendmsg\fR(2) and to retrieve the destination (local)
address of packets received with \fB\)recvmsg\fR(2).
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_RECVTOS
Sets or gets the flag indicating whether the \fB\)recvmsg\fR(2) call will
return the type of service field for the received packet in an ancilliary
message as a \fI\)IP_TOS\fR control message for SCTP sockets of type
\fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR.  For \fI\)SOCK_STREAM\fR SCTP
sockets this option is ignored.
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_RECVTTL
Sets or gets the flag indicating whether the \fB\)recvmsg\fR(2) call will
return the time to live field for the received packet an ancilliary
message as a \fI\)IP_TTL\fR control message for SCTP sockets of type
\fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR.
For \fI\)SOCK_STREAM\fR SCTP sockets this option is ignored.
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_RECVOPTS
Sets or gets the flag indicating whether the \fB\)recvmsg\fR(2) call will
return the IP options for the received packet in an ancilliary message as an
\fI\)IP_OPTIONS\fR control message for SCTP sockets of type
\fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR.
For \fI\)SOCK_STREAM\fR SCTP sockets this option is ignored.
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_RETOPTS
Sets or gets the flag indicationg whether the \fB\)recvmsg\fR(2) call will
return the IP options for the received packet in an ancilliary message as an
\fI\)IP_RETOPTS\fR control message for SCTP sockets of type
\fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR.
For \fI\)SOCK_STREAM\fR SCTP sockets this option is ignored.
See \fB\)ip\fR(7) for additional information.

In contrast to \fI\)IP_OPTIONS\fR, the \fI\)IP_RETOPTS\fR ancilliary message
contains raw, unprocessed options, with the timestamp and route record options
not filled in for this hop.  It is also possible to pass an \fI\)IP_RETOPTS\fR
ancilliary message to \fB\)sendmsg\fR(2).
.TP
.B IP_TOS
Sets or gets the default type of service to be used in IP packets associated
with the connection.  For \fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR but not
\fI\)SOCK_STREAM\fR SCTP sockets, this option can also be passed to
\fB\)sendmsg\fR(2) in the ancilliary data and will be used as the type of
service field in the IP packet containing the data chunk associated with the
user data provided in the call to \fB\)sendmsg\fR(2).
For \fI\)SOCK_SEQPACKET\fR and \fI\)SOCK_RDM\fR but not \fI\)SOCK_STREAM\fR
SCTP sockets, this option returns the type of service parameter associated
with a packet in the ancilliary data returned from a call to
\fB\)recvmsg\fR(2) when the \fB\)IP_RECVTOS\fR option has been set on the
socket.
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_TTL
Sets or gets the default time to live to be used in IP packets associated with
the connection.  This option can also be passed to \fB\)sendmsg\fR(2) in the
ancilliary data and will be used as the time to live field in the IP packet
containing the data chunk associated with the user data provided in the call
to \fB\)sendmsg\fR(2).
See \fB\)ip\fR(7) for additional information.
.TP
.B IP_MTU
For SCTP sockets, this returns only the Path MTU for the association.  This
value is the minimum MTU of all the peer destinations.
See SCTP socket options for a mechanism for obtaining MTU on a per-destination
basis.
When the peer is not multi-homed, this option returns the same value as would
be obtained on a per-destination basis.
See \fB\)ip\fR(7) for additional information.
.TP
.BR IP_RECVERR " and " IP_PMTU_DISCOVER
Supported for SCTP sockets without modification.
See \fB\)ip\fR(7) for additional information.
.PP
The following \fI\)SOL_SCTP\fR \fB\)sctp\fR(7) socket options are supported:
.TP
.B SCTP_NODELAY
Turn the Nagle algorithm off.  This means that packets are always sent as soon
as possible and no unnecessary delays are introduced, at the cost of more
packets in the network.  Expects an integer boolean flag.

This parallels the \fI\)TCP_NODELAY\fR socket option for compatibility with
\fB\)tcp\fR(7).  \fI\)SCTP_NODELAY\fR and \fI\)TCP_NODELAY\fR can be used
interchangeably.  For \fI\)SOCK_STREAM\fR sockets, this setting applies to the
default stream as set the \fI\)SCTP_SID\fR socket option.  For regular
\fI\)SOCK_SEQPACKET\fR sockets, this setting applies to the entire
association.  This option has no effect on \fI\)SOCK_RDM\fR sockets.
.TP
.B SCTP_MAXSEG
Set or receive the maximum segment size for outgoing packets.  Values
greater than the association MTU are ignored and have no effect.

This parallels the \fI\)TCP_MAXSEG\fR socket option for compatibility with
\fB\)tcp\fR(7).  \fI\)SCTP_MAXSEG\fR and \fI\)TCP_MAXSEG\fR can be used
interchangeably.  This option is only applicable to \fI\)SOCK_STREAM\fR
sockets, where the setting applies to the default stream as set with the
\fI\)SCTP_SID\fR socket option.
.TP
.B SCTP_CORK
If enabled don't send out partial frames.  All queued partial frames are sent
when the option is cleared again.  This is useful for prepending headers
before calling \fB\)sendfile\fR(2), or for throughput optimization.  This
option cannot be combined with \fI\)SCTP_NODELAY\fR.

This parallels the \fI\)TCP_CORK\fR socket option for compatibility with
\fB\)tcp\fR(7).  \fI\)SCTP_CORK\fR and \fI\)TCP_CORK\fR can be used
interchangeably.  For \fI\)SOCK_STREAM\fR sockets, this setting applies to the
default stream as set by the \fI\)SCTP_SIB\fR socket option.  For regular
\fI\)SOCK_SEQPACKET\fR sockets, this setting applies to the entire
association.  This option has no effect on \fI\)SOCK_RDM\fR sockets.
.TP
.B SCTP_SID
Set or receive the default stream identifier for all outgoing packets.  If
\fI\)SCTP_SID\fR is passed to \fB\)sendmsg\fR(2) then the outgoing packet will
be sent over the stream specified by the integer stream identifier contained
in the ancillary message.

This setting also determines the default stream identifier for
\fI\)SCTP_NODELAY\fR, \fI\)SCTP_MAXSEG\fR, and \fI\)SCTP_CORK\fR options for
\fI\)SOCK_STREAM\fR sockets.
.TP
.B SCTP_PPI
Set or get the payload protocol identifier for all outgoing packets.  If
\fI\)SCTP_PPI\fR is passed to \fB\)sendmsg(\fR(2) then the outgoing packet
will be sent with the payload protocol identifier specified by the integer
payload protocol identifier contains in the ancillary message.
.TP
.B SCTP_RECVSID
When this flag is set pass a \fI\)SCTP_SID\fR control message with the stream
identifier for received packets as an integer in an ancillary message which
may be received with \fB\)recvmsg\fR(2).
.TP
.B SCTP_RECVPPI
When this flag is set pass a \fI\)SCTP_PPI\fR control message with the payload
protocol identifier for received packets as an integer in an ancillary message
which may be received with \fB\)recvmsg\fR(2).
.TP
.B SCTP_HB
Set or receive the heartbeat activation and interval associated with the
specified destination address. The expected value is a \fB\)sctp_hbitvl\fR
structure.

.RS
.nf
.ps -2
\fC\
    struct sctp_hbitvl {
        struct sockaddr_in
              dest;   /* destination IP address */
        uint  active; /* activation flag */
        uint  itvl;   /* interval in milliseconds */
    };
.ps +2
.fi
.RE
.IP
\fI\)dest\fR is a \fB\)sockaddr_in\fR structure which contains the destination
address to which the heartbeat setting applies.  \fI\)active\fR is an integer
boolean activation flag indicating whether heartbeat is active on the
destination.  \fI\)itvl\fR is the integer heartbeat interval in milliseconds.
.TP
.B SCTP_RTO
Set or receive the retransmission timeout parameters associated with the
specified desination address.  The expected value is a \fB\)sctp_rtoval\fR
structure.

.RS
.nf
.ps -2
\fC\
    struct sctp_rtoval {
        struct sockaddr_in
              dest;        /* destination IP address     */
        uint  rto_initial; /* RTO.Initial (milliseconds) */
        uint  rto_min;     /* RTO.Min     (milliseconds) */
        uint  rto_max;     /* RTO.Max     (milliseconds) */
        uint  max_retrans; /* Path.Max.Retrans (retries) */
    };
.ps +2
.fi
.RE
.IP
\fI\)dest\fR is a \fB\)sockaddr_in\fR structure which contains the destination
address to which the rto parameter setting applies.  \fI\)rto_initial\fR is
the integer initial retransmission timeout value in milliseconds.
\fI\)rto_min\fR is the integer minimum retransmission timeout value in
milliseconds.  \fI\)rto_max\fR is the integer maximum retransmission timeout
value in milliseconds.  \fI\)max_retrans\fR is the integer maximum number of
retransmissions.
.TP
.B SCTP_COOKIE_LIFE
Sets or gets the cookie lifetime associated with a socket.  This is the amount
of time that cookies sent to a peer endpoint in an INIT-ACK message will be
valid.  For Linux SCTP this also limits the maximum for which the HMAC secret
key for the cookie will be valid.  The value is a integer time interval in
milliseconds.  Valid values are from 0 to MAXINT.  The default value is set by
the sysctl \fI\)sctp_cookie_life\fR.  This socket option must be set before
the call to \fB\)listen\fR(2).
.TP
.B SCTP_SACK_DELAY
Sets or gets the maximum SACK delay as the interval of time (in milliseconds)
that the sending enpoint will delay an acknowledgement of a received data
chunk.  Valid values are in the range from 0 to MAXINT, however, the value of
the maximum SACK delay should not exceed the maximum RTO as set by
\fI\)SCTP_RTO_MAX\fR.  The default value is set by the sysctl
\fI\)sctp_sack_delay\fR.  socket option may be set at any time during the life
of the socket.
.TP
.B SCTP_PATH_MAX_RETRANS
Sets or gets the number of times that the sending SCTP endpoint will attempt
retransmitting a packet to a given destination transport address before it
consideres that desstination transport address inactive.  Valid values include
zero.  The default values is set by the sysctl \fI\)sctp_path_max_retrans\fR.
This is the default value assigned to destinations before the call to
\fB\)listen\fR(2) or \fB\)connect\fR(2).  Active destinations can be
controlled with the \fB\)SCTP_RTO\fR socket option.
.TP
.B SCTP_ASSOC_MAX_RETRANS
Sets or gets the number of times that the sending SCTP endpoint will attempt
retransmitting a packet on a given association before it aborts the
association.  Valid values include zero.  The default value is set by the
sysctl \fI\)sctp_assoc_max_retrans\fR.  This valie should be larger than the
sumof all the \fI\)SCTP_PATH_MAX_RETRANS\fR values of each of the
destinations.  This value can be changed on an idle or active association
(connection) using this socket option.
.TP
.B SCTP_MAX_INIT_RETRIES
Sets or gets the number of times that an SCTP INIT or COOKIE ECHO will be
resent before abandoning the association initialization.  Valid values include
zero.  The default value is set by the sysctl \fI\)sctp_max_init_retries\fR.
This socket option must be set before the call to \fB\)listen\fR(2) or
\fB\)connect\fR(2).
.TP
.B SCTP_HEARTBEAT_ITVL
Sets or gets the interval (in seconds) between successive HEARTBEAT messages
use to probe destination transport addresses for RTT calculation and activity.
Valid valis are 1 second or greater.  The default value is set by the sysctl
\fI\)sctp_heartbeat_itvl\fR.  This is the default value which will be assigned
to new destinations.  Active destinations can be controlled with the socket
option \fI\)SCTP_HB\fR.  This socket option must be set before the call to
\fB\)listen\fR(2) or \fB\)connect\fR(2).
.TP
.B SCTP_RTO_INITIAL
Sets or gets the time interval (in milliseconds) which will be used as an
initial RTO (Retransmission Time Out) value when sending packets to a
destination for the first time.  Value values are zero or greater and must be
within the range from \fI\)SCTP_RTO_MIN\fR to \fI\)SCTP_RTO_MAX\fR.  The
default value is the value set by \fI\)sctp_rto_initial\fR.  This socket
option must be set before the call to \fB\)listen\fR(2) or \fB\)connect\fR(2),
but the value may be controlled on active destination with the
\fI\)SCTP_RTO\fR socket option.
.TP
.B SCTP_RTO_MIN
Sets of gest the time interval (in milliseconds) which will be used as a
minimum RTO (Retransmission Time Out) value when sending packets.  Valid
values are zero or greater and must be less than or equal to the value of
\fI\)SCTP_RTO_MAX\fR.  The default value is set by the sysctl
\fI\)sctp_rto_min\fR.  This socket option must be set before the call to
\fB\)listen\fR(2) or \fB\)connect\fR(2), but the value associated with active
destinations can be controlled using the \fI\)SCTP_RTO\fR socket option.
.TP
.B SCTP_RTO_MAX
Sets of gest the time interval (in milliseconds) which will be used as a
maximum RTO (Retransmission Time Out) value when sending packets.  Valid
values are zero or greater and must be greater than or equal to the value of
\fI\)SCTP_RTO_MIN\fR.  The default value is set by the sysctl
\fI\)sctp_rto_max\fR.  This socket option must be set before the call to
\fB\)listen\fR(2) or \fB\)connect\fR(2), but the value associated with active
destinations can be controlled using the \fI\)SCTP_RTO\fR socket option.
.TP
.B SCTP_OSTREAMS
Sets the number of requested outbound streams or gets the actual number of
outbound streams associated with a connection.  Valid values are from 1 to
16,736.  The default value is set by the sysctl \fI\)sctp_req_ostreams\fR.
This socket option must be set before or after the call to \fB\)listen\fR(2)
or \fB\)connect\fR(2) but can be read at any time.
.TP
.B SCTP_ISTREAMS
Sets the maximum number inbound streams or gets the actual number of inbound
streams associated with a connection.  Valid values are from 1 to 16,736.  The
default value is set by the sysctl \fI\)sctp_max_istreams\fR.  This socket
option must be set before or after the call to \fB\)listen\fR(2) or
\fB\)connect\fR(2) but can be read at any time.
.TP
.B SCTP_COOKIE_INC
Sets or gets the time increment (in milliseconds) which will be added to the
lifespan of the cookie in an INIT ACK if the receive INIT request cookie
preservation to lengthen the lifespan of the cookie.  Valid values include
zero.  The default value is set by the sysctl \fI\)sctp_cookie_inc\fR.  This
socket option must be set before or after the call to \fB\)listen\fR(2) but
can be read at any time.
.TP
.B SCTP_THROTTLE_ITVL
Sets or gets the interval (in milliseconds) within which the SCTP receive will
not accept more than one INIT or COOKIE ECHO.  Zero (don't throttle) is a
valid value.  The default is set by the sysctl \fI\)sctp_throttle_itvl\fR.
This socket option must be set before or after the call to \fB\)listen\fR(2).
.TP
.B SCTP_MAC_TYPE
Sets or gets the MAC (Message Authentication Code) type which will be used
when signing cookies in INIT ACK messages.  Valid values are
\fI\)SCTP_HMAC_SHA_1\fR, \fI\)SCTP_HMAC_MD5\fR, and \fI\)SCTP_HMAC_NONE\fR.
The default value is set by the sysctl \fI\)sctp_mac_type\fR.  This socket
option must be set before or after the call to \fB\)listen\fR(2).
.TP
.B SCTP_CKSUM_TYPE
Sets or gets the checksum algorithm associated with socket.  Valid values are
\fI\)SCTP_CSUM_ADLER_32\fR and \fI\)SCTP_CSUM_CRC_32C\fR.  The default value
is set by the sysctl \fI\)sctp_csum_algorithm\fR.  This socket option must be
set before the call to \fB\)listen\fR(2) or \fB\)connect\fR(2).
.TP
.B SCTP_DEBUG_OPTIONS
(tbd)
.TP
.B SCTP_STATUS
(tbd)

.SH "IOCTLS"
These ioctls can be accessed using \fB\)ioctl\fR(2).  The correct syntax is:
.PP
.RS
.nf
.BI int " value" ;
.IB error " = ioctl(" sctp_socket ", " ioctl_type ", &" value ");"
.fi
.RE
.PP
All \fB\)socket\fR(7) ioctls are supported by SCTP without
modification:
.IR SIOCGSTAMP ", " SIOCSPGRP ", " FIOASYNC " and " SIOCGPGRP .
All \fB\)socket\fR(7) fcntls are supported by SCTP:
.IR FIOCGETOWN " and " FIOCSETOWN ,
.PP
The following \fB\)tcp\fR(7) ioctls are supported by SCTP:
.TP
.B SIOCINQ
Returns the amount of queued unread data in the receive buffer.  Argument is a
pointer to an integer.
.TP
.B SIOCATMARK
Returns true when all urgent data has already been received by the user
program.  This is used together with \fB\)SO_OOBINLINE\fR.  Argument is a
pointer to an integer for the test result.
.TP
.B SIOCOUTQ
Returns the amount of unsent data in the socket send queue in the passed
integer value pointer.
.SH "ERROR HANDLING"
When a network error occurs, SCTP tries to resend the packet.  If it doesn't
succeed after some time, either \fB\)ETIMEDOUT\fR or the last received error
on this connection is reported.
.PP
Some applications require a quicker error notification.  This can be enabled
with the \fB\)SOL_IP\fR level \fB\)IP_RECVERR\fR socket option.  When this
option is enabled, all incoming errors are immediately passed to the user
program.  Use this option with care \- it makes SCTP less tolerant to routing
changes and other normal network conditions.
.SH "NOTES"
When an error occurs doing a connection setup occuring in a socket write
\fB\)SIGPIPE\fR is only raised when the \fB\)SO_KEEPOPEN\fR socket option is
set.

SCTP has no real out-of-band or urgent data; it has out-of-order data.  In
Linux this means if the other end sends newer out-of-band data the older
urgent data may arrive later.

If the socket option \fB\)SO_KEEPALIVE\fR is not set (see \fB\)socket\fR(7)),
SCTP will not generate heartbeats to any destination.  For regular
\fB\)SOCK_SEQPACKET\fR and \fB\)SOCK_RDM\fR SCTP sockets, \fB\)SO_KEEPALIVE\fR
defaults to set.  For \fB\)tcp\fR(7)-compatible \fB\)SOCK_STREAM\fR SCTP
sockets, \fB\)SO_KEEPALIVE\fR defaults to unset.
.SH "ERRORS"
.TP
.B EPIPE
The other end closed the socket unexpectedly or a read is executed on a shut
down socket.
.TP
.B ETIMEDOUT
The other end didn't acknowledge retransmitted data after some time.
.TP
.B EAFNOTSUPPORT
Passed socket address type in \fI\)sin_family\fR was not \fB\)AF_INET\fR.
.PP
Any errors defined for \fB\)ip\fR(7) or the generic \fB\)socket\fR(7) layer
may also be returned for SCTP.
.PP

.SH "CAVEATS"
.PP
Linux SCTP does not currently support IPv6.
.PP
SCTP host name addresses are not supported.
.SH "BUGS"
Not all errors are documented.
.PP
IPv6 is not described.
.PP
Transparent proxy options are not described.
.SH "VERSIONS"
This interface was new in Linux 2.2.
.B IP_RECVERR
is a new feature in Linux 2.2.
.B SCTP_CORK
is new in 2.2.
The socket options
.BR SCTP_COOKIE_LIFE ,
.BR SCTP_SACK_DELAY ,
.BR SCTP_PATH_MAX_RETRANS ,
.BR SCTP_ASSOC_MAX_RETRANS ,
.BR SCTP_MAX_INIT_RETRIES ,
.BR SCTP_HEARTBEAT_ITVL ,
.BR SCTP_RTO_INITIAL ,
.BR SCTP_RTO_MIN ,
.BR SCTP_RTO_MAX ,
.BR SCTP_OSTREAMS ,
.BR SCTP_ISTREAMS ,
.BR SCTP_COOKIE_INC ,
.BR SCTP_THROTTLE_ITVL ,
.BR SCTP_MAC_TYPE ,
.BR SCTP_CKSUM_TYPE ,
.BR SCTP_DEBUG_OPTIONS ,
and
.B SCTP_STATUS
are new for 2.4.
.SH "SEE ALSO"
.BR socket (7),
.BR socket (2),
.BR ip (7),
.BR sendmsg (7),
.BR recvmsg (7),
.BR bind (2),
.BR getsockname (2),
and
.BR getpeername (2).

RFC2960 for the SCTP specification.
.br
draft-ietf-tsvwg-sctpsocket-03.txt
for the description of a TCP-compatible SCTP API for sockets.
.br
RFC1122 for a description of the Nagle algorithm.
.br
draft-ietf-tsvwg-sctpcsum-06.txt
for a description of the CRC-32c checksum algorithm.
