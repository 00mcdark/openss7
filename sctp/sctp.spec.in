# vim: ft=spec sw=4 et tw=78
# =============================================================================
# 
# @(#) $RCSfile: sctp.spec.in,v $ $Name:  $($Revision: 0.9.2.8 $) $Date: 2004/12/29 21:32:03 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2004  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2004/12/29 21:32:03 $ by $Author: brian $
#
# =============================================================================

# default is to build kernel modules and tools
# conditional builds of binary rpms relies on the sneaky spec trick that
# rpmbuild will not build a binary rpm when it has no %files section
%global BUILD_modules 1
%global BUILD_tools   1

#
# there are three ways to pass kernel version to the build process:
#    define _kversion in /usr/lib/rpm/macros, /etc/rpm/macros or ~/.rpmmacros
#    define _kversion on the rpmbuild command line
#    define PACKAGE_KVERSION environment variable
#    just let it default to `uname -r`
#
%{!?_kversion: %{expand: %%global _kversion %(uname -r)}}

%global kernel_version %{_kversion}
%global kernel_source %(echo %{_kversion} | sed -e 's|BOOT$||;s|smp$||;s|bigmem$||;s|debug$||;s|enterprise$||;s|hugemem$||;s|secure$||;s|-i686-up-4GB$||;s|-p3-smp-64GB$||;s|-64GB-SMP|.SuSE|')
%global kernel_number %(echo %{_kversion} | sed -e 's|-.*$||')
%global kernel_release %(echo %{_kversion} | sed -e 's|-|.|g')
%global core_name core-%{_kversion}
%global info_name info-%{_kversion}
%global epoch @PACKAGE_EPOCH@
%global base @PACKAGE_TARNAME@
%global infofiles %{name} STREAMS SPG porting
%global title @PACKAGE_TITLE@
%global stitle @PACKAGE_SHORTTITLE@
%global libname streams

# because we only need to build the tools binaries once for each architecture,
# but need to build the modules binaries once for each architecture and kernel
# version, we accept the --with[out] options "modules" and "tools"
%{?_without_modules: %{expand: %%global BUILD_modules 0}}
%{?_without_tools:   %{expand: %%global BUILD_tools   0}}
%{?_with_modules:    %{expand: %%global BUILD_modules 1}}
%{?_with_tools:      %{expand: %%global BUILD_tools   1}}

%define oldrpm %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%define newrpm %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 1 ; else echo 0; fi)

%if %{BUILD_tools}
%global BUILD_devs    %newrpm
%global MAKE_devs     %oldrpm
%else
%global BUILD_devs    0
%global MAKE_devs     0
%endif

%global _conflict LiS

# we have some more options that control configure for the build
%{?disturl:%{!?url:%{expand: %%global url %{disturl}}}}
%global fullrelease @PACKAGE_RELEASE@%{extrarelease}

Summary:        %{title} (SVR 4.2 MP STREAMS)
%if %{?_without_public: 0}%{!?_without_public: 1}
Name:           @PACKAGE_TARNAME@
%else
Name:           @PACKAGE_NAME@-bin
%endif
Epoch:          @PACKAGE_EPOCH@
Version:        @PACKAGE_VERSION@
Release:        @PACKAGE_RELEASE@
License:        GPL
Group:          System Environment/Kernel
%if %{?url: 1}%{!?url: 0}
URL:            %{url}
%endif
%if %{?_xpm_icon: 1}%{!?_xpm_icon: 0}
Icon:           %{_xpm_icon}
%endif
%if %{?_gif_icon: 1}%{!?_gif_icon: 0}
Icon:           %{_gif_icon}
%endif
ExclusiveArch:  %{ix86} k6 x86_64 s390 s390x ppc ppciseries ppcpseries ppc64 arm armv4l sh mips mipsel
ExclusiveOs:    Linux
#Source:         %{name}-%{version}-%{release}.tar.bz2
Source:         ftp://ftp.openss7.org/pub/linux/src/%{name}/%{name}-%{version}-%{release}.tar.bz2
%if %{?buildroot: 0}%{!?buildroot: 1}
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{fullrelease}-root
%endif
%if %{BUILD_modules}
BuildRequires:  kernel-source = %{kernel_source}
BuildRequires:  modutils >= 2.4.12
%endif
%define newgcc %(if test `gcc -v 2>&1 | grep 'gcc version' | sed -e 's|gcc version ||;s| .*$||'` != '2.95.3' ; then echo 1 ; else echo 0 ; fi)
%ifarch s390 s390x
BuildRequires:  gcc >= 2.95.3
%else
%ifarch %{all_ppc}
BuildRequires:  gcc >= 2.96-75
%else
%if %{newgcc}
BuildRequires:  gcc >= 2.96-98
%else
BuildRequires:  gcc = 2.95.3
%endif
%endif
%endif
%if %{newgcc}
BuildRequires:  gcc >= 2.96
%else
BuildRequires:  gcc = 2.95.3
%endif
# these are some needs of the configure script
# to manipulate manual pages:
BuildRequires:  /usr/bin/soelim
BuildRequires:  /usr/bin/refer
BuildRequires:  /usr/bin/tbl
BuildRequires:  /usr/bin/pic
BuildRequires:  /usr/bin/gzip
# to generate kernel symbols:
BuildRequires:  /sbin/genksyms
# find the rest automagically
Autoreq:        true

# ---------------------------------------------------------------------------
%description
The %{name} package includes kernel module, utilities, development environment
and documentation for the development and execution of Stream Control
Transmission Protocol (SCTP) socket programs developed for Linux.  This
distribution is only currently applicable to 2.4 kernels and was targetted at
ix86 and ppc architectures, but should build and install for other
architectures as well.

%prep
# ---------------------------------------------------------------------------

%setup -q -n %{name}-%{version}-%{release}

%build
# ---------------------------------------------------------------------------

preferred_cflags="%{optflags}"

%ifarch %{ix86}
preferred_cflags="$preferred_cflags -D__USE_STRING_INLINES -fstrict-aliasing"
%endif

%ifarch sparc
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparcv9
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparc64
preferred_cflags="$preferred_cflags -mvis -fcall-used-g7"
%endif

%ifnarch ia64 s390 s390x ppc ppciseries ppc64
if test `gcc --version` != '2.95.3' ; then
preferred_cflags="$preferred_cflags -freorder-blocks"
fi
%endif

%define cache_file ../%{_target_platform}-%{kernel_version}-LiS-config.cache
%define csite_file ../%{_target_platform}-config.site

%define enable()  %(echo "%1" | sed -e 's|^--with-|--enable-|')
%define disable() %(echo "%1" | sed -e 's|^--without-|--disable-|')

./configure \
    CC="${CC}" \
    CFLAGS="${CFLAGS:-$preferred_cflags}" \
    LDFLAGS="${LDFLAGS}" \
    CPPFLAGS="${CPPFLAGS}" \
    CPP="${CPP}" \
    CXX="${CXX:-$CC}" \
    CXXFLAGS="${CXXFLAGS:-$preferred_cflags}" \
    CXXCPP="${CXXCPP:-$CPP}" \
    CONFIG_SITE="%{csite_file}" \
    --cache-file="%{cache_file}" \
    --build=%{_build} \
    --host=%{_target_platform} \
    --prefix=%{_prefix} \
    --exec-prefix=%{_exec_prefix} \
    --bindir=%{_bindir} \
    --sbindir=%{_sbindir} \
    --sysconfdir=%{_sysconfdir} \
    --datadir=%{_datadir} \
    --includedir=%{_includedir} \
    --libdir=%{_libdir} \
    --libexecdir=%{_libexecdir} \
    --localstatedir=%{_localstatedir} \
    --sharedstatedir=%{_sharedstatedir} \
    --mandir=%{_mandir} \
    --infodir=%{_infodir} \
    --disable-maintainer-mode \
    --enable-dependency-tracking \
    --with-gnu-ld \
    --with-k-release=%{kernel_version} \
    --with-k-modules=/%{_lib}/modules/%{kernel_version} \
    --with-rpm-epoch=%{epoch} \
    --with-rpm-release=%{release} \
    %{?_with_k_optimize:         %_with_k_optimize} \
    %{?_with_cooked_manpages:    %_with_cooked_manpages} \
    %{?_without_cooked_manpages: %_without_cooked_manpages} \
    %{?_with_public:             %enable %_with_public} \
    %{?_without_public:          %disable %_without_public} \
    %{?_with_k_debug:            %enable %_with_k_debug} \
    %{?_without_k_debug:         %disable %_without_k_debug} \
    %{?_with_k_test:             %enable %_with_k_test} \
    %{?_without_k_test:          %disable %_without_k_test} \
    %{?_with_k_safe:             %enable %_with_k_safe} \
    %{?_without_k_safe:          %disable %_without_k_safe} \
    %{?_with_k_inline:           %enable %_with_k_inline} \
    %{?_without_k_inline:        %disable %_without_k_inline} \
    %{?_with_tools:              %enable %_with_tools} \
    %{?_without_tools:           %disable %_without_tools} \
    %{?_with_modules:            %enable %_with_modules} \
    %{?_without_modules:         %disable %_without_modules} \
    %{?_with_compat_svr4:        %enable %_with_compat_svr4} \
    %{?_without_compat_svr4:     %disable%_without_compat_svr4} \
    %{?_with_compat_sol8:        %enable %_with_compat_sol8} \
    %{?_without_compat_sol8:     %disable%_without_compat_sol8} \
    %{?_with_compat_uw7:         %enable %_with_compat_uw7} \
    %{?_without_compat_uw7:      %disable%_without_compat_uw7} \
    %{?_with_compat_osf:         %enable %_with_compat_osf} \
    %{?_without_compat_osf:      %disable%_without_compat_osf} \
    %{?_with_compat_aix:         %enable %_with_compat_aix} \
    %{?_without_compat_aix:      %disable%_without_compat_aix} \
    %{?_with_compat_hpux:        %enable %_with_compat_hpux} \
    %{?_without_compat_hpux:     %disable%_without_compat_hpux} \
    %{?_with_compat_lis:         %enable %_with_compat_lis} \
    %{?_without_compat_lis:      %disable%_without_compat_lis} \
    || rm -f %{cache_file}

make

%install
# ---------------------------------------------------------------------------

[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf $RPM_BUILD_ROOT

mkdir -p $RPM_BUILD_ROOT

%if %{?_enable_debug_packages: %{_enable_debug_packages}}%{!?_enable_debug_packages: 0}
# we are going to create debug packages, so we need to install unstripped binaries.
make DESTDIR="$RPM_BUILD_ROOT" DOCDIR="$RPM_DOC_DIR" install
%else
# use libtoolized install-strip to strip binaries, modules, shared and static libraries.
make DESTDIR="$RPM_BUILD_ROOT" DOCDIR="$RPM_DOC_DIR" install-strip
%endif

# get the installed info directory out of the build root
[ -e "$RPM_BUILD_ROOT/%{_infodir}/dir" ] && rm -f "$RPM_BUILD_ROOT/%{_infodir}/dir"

%if %{?_without_public: 0}%{!?_without_public: %{BUILD_tools}}
# punch rpm release to Custom
echo '.Custom.1'  > .rpmextra
# create configured source directory for source package
mkdir -p $RPM_BUILD_ROOT%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# tar and move the sources for source release
make clean ; tar cf - . | tar xf - -C $RPM_BUILD_ROOT%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# create symbolic link
ln -sf %{name}-%{version}-%{fullrelease} $RPM_BUILD_ROOT%{_usrsrc}/%{name}
%endif

%clean
# ---------------------------------------------------------------------------

[ -n "$RPM_BUILD_ROOT" -a "$RPM_BUILD_ROOT" != / ] && rm -rf $RPM_BUILD_ROOT

# ===========================================================================
%package %{core_name}

Summary:        %{title} core kernel modules.
Group:          System Environment/Kernel
Prefix:         /%{_lib}/modules/%{kernel_version}/kernel/net
Requires:       kernel = %{kernel_version}
Conflicts:      %{_conflict}-%{core_name}
Prereq:         /sbin/depmod
Prereq:         /sbin/lsmod
Prereq:         /sbin/insmod
Prereq:         /sbin/modprobe
Prereq:         /bin/netstat
Autoreq:        true
%if %{?_xpm: 1}%{!?_xpm: 0}
Icon:           %{_xpm}
%endif
%if %{?_gif: 1}%{!?_gif: 0}
Icon:           %{_gif}
%endif
Provides:       %{name}-core = %{epoch}:%{version}-%{fullrelease}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description %{core_name}
The %{name}-%{core_name} package contains the kernel module that provides the
Stream Control Transmission Protocol (SCTP) facility.  This package is heavily
tied to the kernel for which it was compiled.  This package applies to kernel
version %{kernel_version}.

%pre %{core_name}
# ---------------------------------------------------------------------------
if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
#   if we are upgrading and the upgrade is for the running kernel, or we are
#   installing new on the running kernel, we have to worry about previous
#   loaded modules for the old version or a non-rpm version
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
#   modules running, kick the stack
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /bin/netstat -p 2>/dev/null | grep '^sctp' | while read -a tokens ; do
        case :"${tokens[6]}" in
            :[0-9]+) eval "kill -HUP $token" ;;
            :-) ;; # this is ssh hiding the pid
        esac
    done
    /sbin/sleep 5 # wait for processes to die and close sockets
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    echo 'Cannot install or upgrade with sctp modules running.' >&2
    exit 1
fi

%post %{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then
#   This is the end of a fresh install.
    k=/%{_lib}/modules/%{kernel_version}/kernel/net/sctp
    if [ -e $k/sctp.o ] ; then
        mv -f $k/sctp.o $k/sctp_deprecated.o
    fi
fi
if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
#   this is a running kernel, do a /sbin/depmod on the modules directory for
    /sbin/depmod -ae
elif [ -r /boot/System.map-%{kernel_version} ] ; then
#   non-running kernels a /sbin/depmod will be performed on boot by /sbin/depmod anyway
    UNAME_MACHINE=%{_target_cpu} \
    /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
fi

%preun %{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 0 -a ":%{kernel_version}" = ":`uname -r`" ] ; then
#   We are about to uninstall for good on a running kernel then we have to
#   worry about which modules are running
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
#   modules running, kick the stack
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /bin/netstat -p 2>/dev/null | grep '^sctp' | while read -a tokens ; do
        case :"${tokens[6]}" in
            :[0-9]+) eval "kill -HUP $token" ;;
            :-) ;; # this is ssh hiding the pid
        esac
    done
    /sbin/sleep 5 # wait for processes to die and close sockets
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    echo "Cannot uninstall with sctp modules running." >&2
    exit 1
fi

%postun %{core_name}
# ---------------------------------------------------------------------------

if [ $1 = 0 ]; then
#   this is the last stage of a removal we are going away
    k=/%{_lib}/modules/%{kernel_version}/kernel/net/sctp
    if [ -e $k/sctp_deprecated.o ] ; then
        mv -f $k/sctp_deprecated.o $k/sctp.o
    fi
fi
if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
#   this is a running kernel, do a /sbin/depmod on the modules directory for
    /sbin/depmod -ae
elif [ -r /boot/System.map-%{kernel_version} ] ; then
#   non-running kernels a /sbin/depmod will be performed on boot but /sbin/depmod anyway
    UNAME_MACHINE=%{_target_cpu} \
    /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
fi
if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
#   one more kick at killing any loaded modules on uninstall, last stage of
#   the upgrade on a running kernel for upgrade.
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
#   modules running, kick the stack
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    /sbin/insmod -ar sctp
    /bin/netstat -p 2>/dev/null | grep '^sctp' | while read -a tokens ; do
        case :"${tokens[6]}" in
            :[0-9]+)
                if [ $1 = 0 ] ; then
#                   extreme prejudice for removal
                    eval "kill -KILL ${tokens[6]}"
                else
#                   try to get them to reload for upgrade
                    eval "kill -HUP ${tokens[6]}"
                fi ;;
            :-) ;; # this is ssh hiding the pid
        esac
    done
    /sbin/sleep 5 # wait for processes to die and close sockets
    /sbin/modprobe -r `/sbin/lsmod | grep '^sctp' | cut -f1 '-d '`
    ( /sbin/lsmod | grep -q '^sctp' ) || exit 0
    echo "Error: modules may be still loaded" >&2
    /sbin/lsmod | grep '^sctp' >&2
    echo "you may have to reboot" >&2
    exit 1
fi

%if %{BUILD_modules}
%files %{core_name}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
/%{_lib}/modules/%{kernel_version}/kernel/net/*
%endif

# ===========================================================================
%package doc

Summary:        %{title} manpages, manuals and docs.
Group:          Documentation
Prefix:         %{_docdir}
Prefix:         %{_infodir}
Prefix:         %{_mandir}
Conflicts:      texinfo < 3.11
Conflicts:      %{_conflict}-doc
Conflicts:      %{_conflict}-docs
Obsoletes:      %{name}-docs
Prereq:         /sbin/install-info
Autoreq:        true
%if %{?_xpm: 1}%{!?_xpm: 0}
Icon:           %{_xpm}
%endif
%if %{?_gif: 1}%{!?_gif: 0}
Icon:           %{_gif}
%endif
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description doc
The %{name}-doc package contains html documentation for the development of
%{title} applications, modules and drivers.

%post doc
# ---------------------------------------------------------------------------
if [ -x /sbin/install-info ] ; then
    # older rpm versions do not compress info files
    for n in %{infofiles} ; do
        if [ -f %{_infodir}/$n.info ] ; then
            /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info
        elif [ -f %{_infodir}/$n.info.gz ] ; then
            /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.gz
        fi
    done
fi

%preun doc
# ---------------------------------------------------------------------------
if [ "$1" = 0 -a -x /sbin/install-info ] ; then
    # older rpm versions do not compress info files
    for n in %{infofiles} ; do
        if [ -f %{_infodir}/$n.info ] ; then
            /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info
        elif [ -f %{_infodir}/$n.info.gz ] ; then
            /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz
        fi
    done
fi

%if %{BUILD_tools}
%files doc
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%doc AUTHORS ChangeLog COPYING INSTALL NEWS README THANKS
%doc doc/manual
%{_infodir}/*
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.refs
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.macros
%{_mandir}/man*/*
%endif

# ===========================================================================
%package devel

Summary:        %{title} headers, libs and docs.
Group:          Development/System
Prefix:         %{_includedir}
#Requires:       %{name}-lib = %{epoch}:%{version}-%{fullrelease}
#Requires:       %{name}-doc = %{epoch}:%{version}-%{fullrelease}
#Conflicts:      %{_conflict}
Autoreq:        true
%if %{?_xpm: 1}%{!?_xpm: 0}
Icon:           %{_xpm}
%endif
%if %{?_gif: 1}%{!?_gif: 0}
Icon:           %{_gif}
%endif
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description devel
The %{name}-devel package contains library archives for static compilation,
and headers files to develop %{title} modules and drivers.  This
also includes the header files and static libraries required to compile
%{title} applications programs.  In addition it contains all of the
manual pages necessary for developing %{title} application programs.

%if %{BUILD_tools}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_includedir}/*
%endif

# ===========================================================================
%package test

Summary:        %{title} test programs.
Group:          Development/System
Prefix:         %{_libexecdir}
Autoreq:        true
%if %{?_xpm: 1}%{!?_xpm: 0}
Icon:           %{_xpm}
%endif
%if %{?_gif: 1}%{!?_gif: 0}
Icon:           %{_gif}
%endif
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description test
The %{name}-test package contains a number of test programs for testing the
installation and operation of the %{name} package.

%if %{BUILD_tools}
%files test
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_libexecdir}/test*
%endif

# ===========================================================================
%package source

Summary:        %{title} source package.
Group:          Development/System
Prefix:         %{_usrsrc}
Autoreq:        true
%if %{?_xpm: 1}%{!?_xpm: 0}
Icon:           %{_xpm}
%endif
%if %{?_gif: 1}%{!?_gif: 0}
Icon:           %{_gif}
%endif
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description source
The %{name}-source package contains the source code necessary for building the
%{name} release.  It includes the autoconf configuration utilities necessary
to create and distribute this rpm.

%if %{?_without_public: 0}%{!?_without_public: %{BUILD_tools}}
%files source
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir %{_usrsrc}/%{name}-%{version}-%{fullrelease}
%{_usrsrc}/%{name}
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/*
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/.[a-zA-Z0-9]*
%endif

# ===========================================================================
%changelog
# ---------------------------------------------------------------------------
# $Log: sctp.spec.in,v $
# Revision 0.9.2.8  2004/12/29 21:32:03  brian
# - Straighten out cache and site files.
#
# Revision 1.8  2004/12/29 21:32:03  brian
# - Straighten out cache and site files.
#
# Revision 1.7  2004/12/24 18:30:12  brian
# - Updated descriptions.
#
# Revision 1.6  2004/12/24 12:56:24  brian
# - Get a few things in the right places.
#
# Revision 1.5  2004/12/24 12:17:30  brian
# - Path error.
#
# Revision 1.4  2004/12/24 07:58:00  brian
# - Added test package.
#
# Revision 1.3  2004/12/23 12:49:15  brian
# - Corrections for first rpm build.
#
# Revision 1.2  2004/12/21 12:23:52  brian
# - Proper install scriplets for SCTP package.
#
# Revision 1.1  2004/12/20 10:18:07  brian
# - Big start on autoconf release of Linux Native SCTP.
#

* Mon Dec 20 2004 Brian Bidulock <bidulock@openss7.org>
- Begain this RPM build for Linux Native SCTP.
- Borrowed heavily from the OpenSS7 STREAMS builds.

# vim: ft=spec sw=4 et tw=78
