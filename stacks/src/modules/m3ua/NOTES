OpenSS7 SS7 Stack -- notes.  2007-08-13
$Id: NOTES,v 0.9.2.3 2007/08/14 12:18:02 brian Exp $
Copyright (c) 2001-2007  OpenSS7 Corporation. <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian Bidulock <bidulock@openss7.org>
See the end for copying conditions (for this file).


The STREAMS model for the M3UA ASP side is as follows:

Each ASP may be responsible for establishing its own SCTP associations to
SGP and SG as follows:

	-   The ASP opens an SCTP transport stream and binds it to the
	    appropriate transport addresses with the number of streams
	    which are required for operation.  The ASP does not connect
	    these associations but leaves that for the SG or SGP proxy
	    to perform.

	-   When there are multiple SGP's, the ASP opens an SG-proxy
	    multiplexor for each of the SGs that the ASP is bound to.

	    The ASP configures the SG-proxy for the appropriate
	    distribution algorithms for distributing outgoing messages
	    over the available SGP.

	    The ASP I_LINK's each of the SCTP transport streams under an
	    SG-proxy multiplexor and gets returned an SG-proxy Mux Id
	    which is later used as the SGP identifier.  (If the ASP
	    addresses the SG-proxy multiplexor by minor device number,
	    it is also possible to I_PLINK the SCTP streams.  In this
	    case, the streams will not close if the ASP process dies and
	    a subsequent open of the SG-proxy Mux will bring the Mux up
	    preconfigured.)

	-   When there is only a single SGP for particular SG, the ASP
	    may I_PUSH the SG-proxy module over the SCTP stream (SGP)
	    instead of linking.  The SG-proxy module used in this
	    fashion knows that the trivial case of 1 SGP is what is
	    desired and that the distribution mechanism is implied.

	-   When there are multiple SG's, the ASP opens an M3UA-asp
	    multiplexor and I_LINKs the SG-proxy modules under the
	    M3UA-asp multiplexor and gets returned an M3UA-asp Mux Id
	    which is later used as an SG identifier.

	-   When there is only one SG which the ASP connects to, the ASP
	    may I_PUSH the M3UA-asp module over the SG-proxy stream (SG)
	    instead of linking.  The M3UA-asp module used in this
	    fashion knows that the trivial case of 1 SG is what is
	    desired and routing is implied.

An alternative arrangement for configuring operation for ASPs is the
M3UA ASP configuration daemon (m3ua_aspd).  This daemon establishes SCTP
associations and links them under SG-proxy multiplexors and links
SG-proxy multiplexors under M3UA-asp multiplexors using an SG-proxy
multiplexor control stream and an M3UA-asp multiplexor control stream.
Then it is possible for the ASP to merely open M3UA-asp multiplexors
(preconfigured, and ready to use) by minor device number.

The resulting configuration is as follows:

		+------+                        +------+
		|stream|                        |stream|
		| head |                        | head |
		+------+                        +------+
                   |                               |
		+------+                        +------+
		| M3UA |                        | M3UA |
		| Mux  |                        | Mux  |
		+------+                        +------+
                   ||                              ||
            +------++-------+              +-------++-------+
            |               |              |                |
	+------+        +------+        +------+        +------+
	|  SG  |        |  SG  |        |  SG  |        |  SG  |
	| Mux  |        | Mux  |        | Mux  |        | Mux  |
	+------+        +------+        +------+        +------+
           ||              ||              ||              ||
       +---++---+      +---++---+      +---++---+      +---++---+
       |        |      |        |      |        |      |        |
    +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
    |SCTP | |SCTP | |SCTP | |SCTP | |SCTP | |SCTP | |SCTP | |SCTP |
    +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
           
The model also makes it possible to communicate to more than one SGP
over the same SCTP association, or to communicate to multiple ASPs over
the same over the same SCTP association by use of routing control within
the multiplexor.

Actually, I think that it may be better to use a single multiplexor as
follows:


		+------+                        +------+
		|stream|                        |stream|
		| head |                        | head |
		+--+---+                        +---+--+
                   |                                |
      +------------+--------------------------------+-------------+
      |                                                           |
      |                          M3UA-ASP                         |
      |                                                           |
      |                         Muxtiplexor                       |
      |                                                           |
      +-----+-------+-------+-------+-------+-------+-------+-----+
            |       |       |       |       |       |       |
         +--+--+ +--+--+ +--+--+ +--+--+ +--+--+ +--+--+ +--+--+ 
         |SCTP | |SCTP | |SCTP | |SCTP | |SCTP | |SCTP | |SCTP |
         +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+

Routing functions would then be used to define which SCTP associations
are used for which M3UA-ASP stream heads, for which SG and for which
SGP.  SCTP associations could be formed and I_PLINKed under the M3UA
multiplexor, and routing tables configured by an M3UA control stream,
and then the M3UA configuration daemon could exit if necessary.  The
M3UA daemon then could then also perform Layer Management functions.

This is a better arrangement.  This would require two routing table
mechanisms:
	
For messages arriving from the SG, the mapping would be:

	SCTP Id/Stream Id/Context Id ==> ASP Id/AS Id
	ASP Id/AS Id ==> SCTP Id/Stream Id/Context Id

	Routing Id <==> SCTP Id/Stream Id/ASP Id/Routing Context

That is, when ASPs send messages within an AS context, the M3UA must
keep a list of all of the SGPs for which the ASP has registered in the
AS context and which SCTP association and streams upon which to
communicate with the SGPs in question.  For example:

	ASP1:    AS1:    SG1:    SGP1 --> SCTP1/Stream1
	                         SGP2 --> SCTP1/Stream2
			
			 SG2:    SGP1 --> SCTP2/Stream1 thru 16
			         SGP2 --> SCTP3/Stream1 thru 16


The other way would be:

	SCTP3/Stream 2/RC 1 --> SG2/AS1/ASP1


============================================

Here is the basic design for M3UA.  There are two components to M3UA:
the SG component and the ASP component.  The SG component works within
the OpenSS7 STREAMS framework as follows:


	M3UA Layer Manager
	        |
	        |
	        |
	+-------+-----------------------------+
	|                                     |
	|                                     |
	|              M3UA SG                |
	|                                     |
	|        Streams Multiplexor          |
	|                                     |
	|                                     |
	|                                     |
	|                                     |
	|                                     |
	+---+-+-+-+-+-+---------+-+-+-+-+-+---+
	    | | | | | |         | | | | | |
	    | | | | | |         | | | | | |
	    | | | | | |         | | | | | |
	    | | | | | |         | | | | | |
	    | | | | | |         | | | | | |

	    MTP Streams        SCTP Streams

Intialization and Configuration
-------------------------------

When the system is initialized, the M3UA SG configuration daemon is
started.  The actions of the M3UA SG daemon are as follows:

-   The m3ua_sgd starts.

-   The m3ua_sgd reads whatever configuration files are necessary to
    determine the necessary configuration for the SG.

-   The m3ua_sgd opens the M3UA_SG multiplexor control stream and
    performs initial configurations and optioning on the M3UA subsystem.

-   The m3ua_sgd opens MTP user (MTP) streasm and configures them as
    would the ss7d in OpenSS7, some of these streams may be bound to
    fixed routing contexts, and others could be unbound in anticipation
    of registration of routing keys.

-   The m3ua_sgd LINKs or PLINKs the MTP streams under the M3UA_SG
    multiplexor and provides the M3UA SG with any additional information
    which is required pertaining to the configuration of each of the
    signalling links.

-   Each MTP stream which is linked is provided with a Routing Context
    which is statically allocated, or is left unbound and is placed in a
    pool for dynamic registration of Routing Keys.

-   The m3ua_sgd opens SCTP streams and configures them.

-   The m3ua_sgd LINKs or PLINKs the SCTP streams under the M3UA_SG
    multiplexor and provides the M3UA SG with any additional information
    which is required pertaining to the configuration of each of the
    SCTP streams.

-   At least one of the SCTP streams is bound as a listener stream and
    the remainder are left unbound.  (When a connection is made from the
    ASP to the SG, the connection indication will appear on the listener
    stream and the M3UA will use one of the available SCTP non-listener
    streams to accept the incoming connection.

-   The M3UA control stream is kept open and is used to exchange
    management information between the M3UA SG and user level programs.
    The M3UA_SGD should be prepared to respond to signals or user
    commands on a socket to permit the user to reconfigure and manage
    the system during operation.

NOTE:
	As an altenative to LINKing or PLINKing SCTP associations under
	the multiplexor, it is possible that the M3UA Layer Manager on
	the control stream could respond to incoming connections by
	opening an SCTP stream to accept incoming connections on demand
	rather than linking any of them under the multiplexor in
	advance.  That way, the m3ua_sgd can be responsible for managing
	incoming connections or can form outgoing connections if
	necessary.  The same is possible for MTP streams using
	registration of routing keys: the appropriate MTP stream could
	be opened at registration time and linked under the multiplexor
	only when it is needed.

-----

=========================================================================

 Copyright (c) 2001-2007  OpenSS7 Corporation  <http://www.openss7.com/>
 Copyright (c) 1997-2000  Brian Bidulock  <bidulock@openss7.org>

 All Rights Reserved.

 Permission is granted to make and distribute verbatim copies of this
 manual provided the copyright notice and this permission notice are
 preserved on all copies.

 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided that the
 entire resulting derived work is distributed under the terms of a
 permission notice identical to this one

 Since the Linux kernel and libraries are constantly changing, this
 manual page may be incorrect or out-of-date.  The author(s) assume no
 responsibility for errors or omissions, or for damages resulting from
 the use of the information contained herein.  The author(s) may not
 have taken the same level of care in the production of this manual,
 which is licensed free of charge, as they might when working
 professionally.

 Formatted or processed versions of this manual, if unaccompanied by the
 source, must acknowledge the copyright and authors of this work.

-------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
 on behalf of the U.S. Government ("Government"), the following
 provisions apply to you.  If the Software is supplied by the Department
 of Defense ("DoD"), it is classified as "Commercial Computer Software"
 under paragraph 252.227-7014 of the DoD Supplement to the Federal
 Acquisition Regulations ("DFARS") (or any successor regulations) and
 the Government is acquiring only the license rights granted herein (the
 license rights customarily provided to non-Government users).  If the
 Software is supplied to any unit or agency of the Government other than
 DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19
 of the Federal Acquisition Regulations ("FAR") (or any successor
 regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
 NASA Supplement to the FAR (or any successor regulations).

=========================================================================

 Commercial licensing and support of this software is available from
 OpenSS7 Corporation at a fee.  See http://www.openss7.com/

=========================================================================
vim: ft=README tw=72 nocindent nosmartindent formatoptions+=tcqlorn
