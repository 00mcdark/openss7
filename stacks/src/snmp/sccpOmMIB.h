/*****************************************************************************

 @(#) $Id: sccpOmMIB.h,v 0.9.2.10 2009-01-19 13:31:49 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-01-19 13:31:49 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: sccpOmMIB.h,v $
 Revision 0.9.2.10  2009-01-19 13:31:49  brian
 - updating standalone agents

 Revision 0.9.2.9  2009-01-16 20:45:00  brian
 - updating mibs and agents

 Revision 0.9.2.8  2009-01-14 14:30:06  brian
 - working up agents

 Revision 0.9.2.7  2009-01-10 17:09:21  brian
 - updated agents

 Revision 0.9.2.6  2009-01-04 13:16:05  brian
 - updated agents

 Revision 0.9.2.5  2009-01-03 10:51:06  brian
 - updated agent

 Revision 0.9.2.4  2009-01-02 15:04:15  brian
 - updated agents

 Revision 0.9.2.3  2008-12-31 16:04:47  brian
 - updated mibs

 Revision 0.9.2.2  2008-12-24 13:08:26  brian
 - building ss7confd

 *****************************************************************************/

#ifndef __LOCAL_SCCPOMMIB_H__
#define __LOCAL_SCCPOMMIB_H__

#ident "@(#) $RCSfile: sccpOmMIB.h,v $ $Name:  $($Revision: 0.9.2.10 $) Copyright (c) 2008-2009 Monavacon Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

#undef MASTER
extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct sccpOmMIB_data {
	uint sccpOmMIB_request;
	oid *sccpOm1stAndIntervalActivate;	/* WriteOnly */
	size_t sccpOm1stAndIntervalActivateLen;
	oid *sccpOm1stAndIntervalDeactivate;	/* WriteOnly */
	size_t sccpOm1stAndIntervalDeactivateLen;
	oid *sccpOm5MinActivate;	/* WriteOnly */
	size_t sccpOm5MinActivateLen;
	oid *sccpOm5MinDeaActivate;	/* WriteOnly */
	size_t sccpOm5MinDeaActivateLen;
	oid *sccpOm15MinActivate;	/* WriteOnly */
	size_t sccpOm15MinActivateLen;
	oid *sccpOm15MinDeaActivate;	/* WriteOnly */
	size_t sccpOm15MinDeaActivateLen;
	long sccpOmDiscontinuityTime;	/* ReadOnly */
	long sccpOmTimeStamp;		/* ReadOnly */
	ulong sccpOm5MinMaxIntervals;	/* ReadWrite */
	ulong sccpOm15MinMaxIntervals;	/* ReadWrite */
	long sccpOmpDefault;		/* ReadWrite */
	long sccpOmNrOfSubLevelsDefault;	/* ReadWrite */
	long sccpOmNrOfRestrictionLevelsDefault;	/* ReadWrite */
};
struct sccpOmErrorsTable_data {
	uint sccpOmErrorsTable_request;
	uint sccpOmErrorsTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmNoTranslatorForAddress;	/* ReadOnly */
	long sccpOmNoRuleForAddress;	/* ReadOnly */
	long sccpOmPointCodeNotAvailable;	/* ReadOnly */
	long sccpOmPointCodeCongested;	/* ReadOnly */
	long sccpOmSubsystemUnavailable;	/* ReadOnly */
	long sccpOmSubsystemCongested;	/* ReadOnly */
	long sccpOmUnequippedSubsystem;	/* ReadOnly */
	long sccpOmSyntaxErrorDetected;	/* ReadOnly */
	long sccpOmRoutingFailure;	/* ReadOnly */
	long sccpOmReassemblyTimeOut;	/* ReadOnly */
	long sccpOmSegmentOutOfOrder;	/* ReadOnly */
	long sccpOmNoReassemblySpace;	/* ReadOnly */
	long sccpOmHopCounterViolation;	/* ReadOnly */
	long sccpOmTooLargeForSegmentation;	/* ReadOnly */
	long sccpOmReleaseFailure;	/* ReadOnly */
	long sccpOmInactivityTimerExpiry;	/* ReadOnly */
	long sccpOmProviderInitiatedReset;	/* ReadOnly */
	long sccpOmProviderInitiatedRelease;	/* ReadOnly */
	long sccpOmNoSegmentationSupport;	/* ReadOnly */
	long sccpOmSegmentationFailure;	/* ReadOnly */
	long sccpOmReassemblyFailure;	/* ReadOnly */
	long sccpOmErrors5MinValidIntervals;	/* ReadOnly */
	long sccpOmErrors15MinValidIntervals;	/* ReadOnly */
};
struct sccpOmMessageTable_data {
	uint sccpOmMessageTable_request;
	uint sccpOmMessageTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmTotalMessagesHandled;	/* ReadOnly */
	long sccpOmTotalMessagesLocal;	/* ReadOnly */
	long sccpOmTotalMessagesGTT;	/* ReadOnly */
	long sccpOmUDTMessagesSent;	/* ReadOnly */
	long sccpOmUDTSMessagesSent;	/* ReadOnly */
	long sccpOmUDTMessagesReceived;	/* ReadOnly */
	long sccpOmUDTSMessagesReceived;	/* ReadOnly */
	long sccpOmCRMessagesSent;	/* ReadOnly */
	long sccpOmCREFMessagesSent;	/* ReadOnly */
	long sccpOmCRMessagesReceived;	/* ReadOnly */
	long sccpOmCREFMessagesReceived;	/* ReadOnly */
	long sccpOmRSRMessagesSent;	/* ReadOnly */
	long sccpOmRSRMessagesReceived;	/* ReadOnly */
	long sccpOmERRMessagesSent;	/* ReadOnly */
	long sccpOmERRMessagesReceived;	/* ReadOnly */
	long sccpOmXUDTMessagesSent;	/* ReadOnly */
	long sccpOmXUDTSMessagesSent;	/* ReadOnly */
	long sccpOmXUDTMessagesReceived;	/* ReadOnly */
	long sccpOmXUDTSMessagesReceived;	/* ReadOnly */
	long sccpOmLUDTMessagesSent;	/* ReadOnly */
	long sccpOmLUDTSMessagesSent;	/* ReadOnly */
	long sccpOmLUDTMessagesReceived;	/* ReadOnly */
	long sccpOmLUDTSMessagesReceived;	/* ReadOnly */
	long sccpOmMessage5MinValidIntervals;	/* ReadOnly */
	long sccpOmMessage15MinValidIntervals;	/* ReadOnly */
};
struct sccpOmAccessibilityTable_data {
	uint sccpOmAccessibilityTable_request;
	uint sccpOmAccessibilityTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmSSCMessageReceived;	/* ReadOnly */
	long sccpOmSSPMessageReceived;	/* ReadOnly */
	ulong sccpOmSccpUnavailableDuration;	/* ReadOnly */
	long sccpOmAccessibility5MinValidIntervals;	/* ReadOnly */
	long sccpOmAccessibility15MinValidIntervals;	/* ReadOnly */
};
struct sccpOmUtilizationTable_data {
	uint sccpOmUtilizationTable_request;
	uint sccpOmUtilizationTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmSsn;			/* Notify */
	long sccpOmLXUDTMessagesOrigClass0;	/* ReadOnly */
	long sccpOmLXUDTMessagesOrigClass1;	/* ReadOnly */
	long sccpOmLXUDTMessagesTermClass0;	/* ReadOnly */
	long sccpOmLXUDTMessagesTermClass1;	/* ReadOnly */
	long sccpOmMessagesSentToBackup;	/* ReadOnly */
	long sccpOmDT1MessagesReceived;	/* ReadOnly */
	long sccpOmDT1MessagesSent;	/* ReadOnly */
	long sccpOmDT2MessagesReceived;	/* ReadOnly */
	long sccpOmDT2MessagesSent;	/* ReadOnly */
	long sccpOmEDMessagesSent;	/* ReadOnly */
	long sccpOmEDMessagesReceived;	/* ReadOnly */
	long sccpOmUtilization5MinValidIntervals;	/* ReadOnly */
	long sccpOmUtilization15MinValidIntervals;	/* ReadOnly */
};
struct sccpOm5MinHistoryTable_data {
	uint sccpOm5MinHistoryTable_request;
	uint sccpOm5MinHistoryTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmInterval;		/* NoAccess */
	long sccpOm5MinNoTranslatorForAddress;	/* ReadOnly */
	long sccpOm5MinNoRuleForAddress;	/* ReadOnly */
	long sccpOm5MinPointCodeNotAvailable;	/* ReadOnly */
	long sccpOm5MinPointCodeCongested;	/* ReadOnly */
	long sccpOm5MinSubsystemUnavailable;	/* ReadOnly */
	long sccpOm5MinSubsystemCongested;	/* ReadOnly */
	long sccpOm5MinUnequippedSubsystem;	/* ReadOnly */
	long sccpOm5MinSyntaxErrorDetected;	/* ReadOnly */
	long sccpOm5MinRoutingFailure;	/* ReadOnly */
	long sccpOm5MinReassemblyTimeOut;	/* ReadOnly */
	long sccpOm5MinSegmentOutOfOrder;	/* ReadOnly */
	long sccpOm5MinNoReassemblySpace;	/* ReadOnly */
	long sccpOm5MinHopCounterViolation;	/* ReadOnly */
	long sccpOm5MinTooLargeForSegmentation;	/* ReadOnly */
	long sccpOm5MinReleaseFailure;	/* ReadOnly */
	long sccpOm5MinInactivityTimerExpiry;	/* ReadOnly */
	long sccpOm5MinProviderInitiatedReset;	/* ReadOnly */
	long sccpOm5MinProviderInitiatedRelease;	/* ReadOnly */
	long sccpOm5MinNoSegmentationSupport;	/* ReadOnly */
	long sccpOm5MinSegmentationFailure;	/* ReadOnly */
	long sccpOm5MinReassemblyFailure;	/* ReadOnly */
	long sccpOm5MinTotalMessagesHandled;	/* ReadOnly */
	long sccpOm5MinTotalMessagesLocal;	/* ReadOnly */
	long sccpOm5MinTotalMessagesGTT;	/* ReadOnly */
	long sccpOm5MinUDTMessagesSent;	/* ReadOnly */
	long sccpOm5MinUDTSMessagesSent;	/* ReadOnly */
	long sccpOm5MinUDTMessagesReceived;	/* ReadOnly */
	long sccpOm5MinUDTSMessagesReceived;	/* ReadOnly */
	long sccpOm5MinCRMessagesSent;	/* ReadOnly */
	long sccpOm5MinCREFMessagesSent;	/* ReadOnly */
	long sccpOm5MinCRMessagesReceived;	/* ReadOnly */
	long sccpOm5MinCREFMessagesReceived;	/* ReadOnly */
	long sccpOm5MinRSRMessagesSent;	/* ReadOnly */
	long sccpOm5MinRSRMessagesReceived;	/* ReadOnly */
	long sccpOm5MinERRMessagesSent;	/* ReadOnly */
	long sccpOm5MinERRMessagesReceived;	/* ReadOnly */
	long sccpOm5MinXUDTMessagesSent;	/* ReadOnly */
	long sccpOm5MinXUDTSMessagesSent;	/* ReadOnly */
	long sccpOm5MinXUDTMessagesReceived;	/* ReadOnly */
	long sccpOm5MinXUDTSMessagesReceived;	/* ReadOnly */
	long sccpOm5MinLUDTMessagesSent;	/* ReadOnly */
	long sccpOm5MinLUDTSMessagesSent;	/* ReadOnly */
	long sccpOm5MinLUDTMessagesReceived;	/* ReadOnly */
	long sccpOm5MinLUDTSMessagesReceived;	/* ReadOnly */
	long sccpOm5MinSSCMessageReceived;	/* ReadOnly */
	long sccpOm5MinSSPMessageReceived;	/* ReadOnly */
};
struct sccpOm15MinHistoryTable_data {
	uint sccpOm15MinHistoryTable_request;
	uint sccpOm15MinHistoryTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmInterval;		/* NoAccess */
	long sccpOm15MinNoTranslatorForAddress;	/* ReadOnly */
	long sccpOm15MinNoRuleForAddress;	/* ReadOnly */
	long sccpOm15MinPointCodeNotAvailable;	/* ReadOnly */
	long sccpOm15MinPointCodeCongested;	/* ReadOnly */
	long sccpOm15MinSubsystemUnavailable;	/* ReadOnly */
	long sccpOm15MinSubsystemCongested;	/* ReadOnly */
	long sccpOm15MinUnequippedSubsystem;	/* ReadOnly */
	long sccpOm15MinSyntaxErrorDetected;	/* ReadOnly */
	long sccpOm15MinRoutingFailure;	/* ReadOnly */
	long sccpOm15MinReassemblyTimeOut;	/* ReadOnly */
	long sccpOm15MinSegmentOutOfOrder;	/* ReadOnly */
	long sccpOm15MinNoReassemblySpace;	/* ReadOnly */
	long sccpOm15MinHopCounterViolation;	/* ReadOnly */
	long sccpOm15MinTooLargeForSegmentation;	/* ReadOnly */
	long sccpOm15MinReleaseFailure;	/* ReadOnly */
	long sccpOm15MinInactivityTimerExpiry;	/* ReadOnly */
	long sccpOm15MinProviderInitiatedReset;	/* ReadOnly */
	long sccpOm15MinProviderInitiatedRelease;	/* ReadOnly */
	long sccpOm15MinNoSegmentationSupport;	/* ReadOnly */
	long sccpOm15MinSegmentationFailure;	/* ReadOnly */
	long sccpOm15MinReassemblyFailure;	/* ReadOnly */
	long sccpOm15MinTotalMessagesHandled;	/* ReadOnly */
	long sccpOm15MinTotalMessagesLocal;	/* ReadOnly */
	long sccpOm15MinTotalMessagesGTT;	/* ReadOnly */
	long sccpOm15MinUDTMessagesSent;	/* ReadOnly */
	long sccpOm15MinUDTSMessagesSent;	/* ReadOnly */
	long sccpOm15MinUDTMessagesReceived;	/* ReadOnly */
	long sccpOm15MinUDTSMessagesReceived;	/* ReadOnly */
	long sccpOm15MinCRMessagesSent;	/* ReadOnly */
	long sccpOm15MinCREFMessagesSent;	/* ReadOnly */
	long sccpOm15MinCRMessagesReceived;	/* ReadOnly */
	long sccpOm15MinCREFMessagesReceived;	/* ReadOnly */
	long sccpOm15MinRSRMessagesSent;	/* ReadOnly */
	long sccpOm15MinRSRMessagesReceived;	/* ReadOnly */
	long sccpOm15MinERRMessagesSent;	/* ReadOnly */
	long sccpOm15MinERRMessagesReceived;	/* ReadOnly */
	long sccpOm15MinXUDTMessagesSent;	/* ReadOnly */
	long sccpOm15MinXUDTSMessagesSent;	/* ReadOnly */
	long sccpOm15MinXUDTMessagesReceived;	/* ReadOnly */
	long sccpOm15MinXUDTSMessagesReceived;	/* ReadOnly */
	long sccpOm15MinLUDTMessagesSent;	/* ReadOnly */
	long sccpOm15MinLUDTSMessagesSent;	/* ReadOnly */
	long sccpOm15MinLUDTMessagesReceived;	/* ReadOnly */
	long sccpOm15MinLUDTSMessagesReceived;	/* ReadOnly */
	ulong sccpOm15MinSccpUnavailableDuration;	/* ReadOnly */
};
struct sccpOm5MinSsnHistoryTable_data {
	uint sccpOm5MinSsnHistoryTable_request;
	uint sccpOm5MinSsnHistoryTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmSsn;			/* Notify */
	long sccpOmInterval;		/* NoAccess */
	long sccpOm5MinLXUDTMessagesOrigClass0;	/* ReadOnly */
	long sccpOm5MinLXUDTMessagesOrigClass1;	/* ReadOnly */
	long sccpOm5MinLXUDTMessagesTermClass0;	/* ReadOnly */
	long sccpOm5MinLXUDTMessagesTermClass1;	/* ReadOnly */
	long sccpOm5MinMessagesSentToBackup;	/* ReadOnly */
	long sccpOm5MinDT1MessagesReceived;	/* ReadOnly */
	long sccpOm5MinDT1MessagesSent;	/* ReadOnly */
	long sccpOm5MinDT2MessagesReceived;	/* ReadOnly */
	long sccpOm5MinDT2MessagesSent;	/* ReadOnly */
	long sccpOm5MinEDMessagesSent;	/* ReadOnly */
	long sccpOm5MinEDMessagesReceived;	/* ReadOnly */
};
struct sccpOm15MinSsnHistoryTable_data {
	uint sccpOm15MinSsnHistoryTable_request;
	uint sccpOm15MinSsnHistoryTable_refs;
	ulong sccpNetworkEntityId;	/* NoAccess */
	long sccpOmSsn;			/* Notify */
	long sccpOmInterval;		/* NoAccess */
	long sccpOm15MinLXUDTMessagesOrigClass0;	/* ReadOnly */
	long sccpOm15MinLXUDTMessagesOrigClass1;	/* ReadOnly */
	long sccpOm15MinLXUDTMessagesTermClass0;	/* ReadOnly */
	long sccpOm15MinLXUDTMessagesTermClass1;	/* ReadOnly */
	long sccpOm15MinMessagesSentToBackup;	/* ReadOnly */
	long sccpOm15MinDT1MessagesReceived;	/* ReadOnly */
	long sccpOm15MinDT1MessagesSent;	/* ReadOnly */
	long sccpOm15MinDT2MessagesReceived;	/* ReadOnly */
	long sccpOm15MinDT2MessagesSent;	/* ReadOnly */
	long sccpOm15MinEDMessagesSent;	/* ReadOnly */
	long sccpOm15MinEDMessagesReceived;	/* ReadOnly */
};

/* storage declarations */
extern struct sccpOmMIB_data *sccpOmMIBStorage;
extern struct header_complex_index *sccpOmErrorsTableStorage;
extern struct header_complex_index *sccpOmMessageTableStorage;
extern struct header_complex_index *sccpOmAccessibilityTableStorage;
extern struct header_complex_index *sccpOmUtilizationTableStorage;
extern struct header_complex_index *sccpOm5MinHistoryTableStorage;
extern struct header_complex_index *sccpOm15MinHistoryTableStorage;
extern struct header_complex_index *sccpOm5MinSsnHistoryTableStorage;
extern struct header_complex_index *sccpOm15MinSsnHistoryTableStorage;

/* enum definitions from the covered mib sections */

#define SCCPOMSYNTAXERRORTYPE_UNKNOWNMESSAGETYPE 0
#define SCCPOMSYNTAXERRORTYPE_INVALIDVALUEOFPROTOCOLCLASS 1
#define SCCPOMSYNTAXERRORTYPE_INVALIDVALUEOFGTI  2
#define SCCPOMSYNTAXERRORTYPE_INVALIDVALUEFORENCODINGSCHEME 3
#define SCCPOMSYNTAXERRORTYPE_INVALIDPARAMETERLENGTH 4
#define SCCPOMSYNTAXERRORTYPE_INVALIDPOINTERTOOPTIONALPARAMETER 5
#define SCCPOMSYNTAXERRORTYPE_OPTIONALPARAMETERTOLONG 6
#define SCCPOMSYNTAXERRORTYPE_POINTERINCONSISTENTWITHLENGTHS 7
#define SCCPOMSYNTAXERRORTYPE_INCOMPATIBLEADDRESSLENGTH 8
#define SCCPOMSYNTAXERRORTYPE_EXPECTEDSSNNOTFOUND 9

/* notifications */
extern oid sccpOm5minReport_oid[12];
extern oid sccpOm15minReport_oid[12];
extern oid sccpOm5minSsnReport_oid[12];
extern oid sccpOm15minSsnReport_oid[12];

/* scalars accessible only for notify */
extern oid sccpOmDuration_oid[13];
extern oid sccpOmSsn_oid[13];
extern oid sccpOmSyntaxErrorType_oid[13];

/* object id definitions */
extern oid sccpOmMIBCompliance_oid[13];
extern oid sccpOmObligatoryGroup_oid[13];
extern oid sccpOmRoutingGroup_oid[13];
extern oid sccpOmOblReassemblyGroup_oid[13];
extern oid sccpOmAllReassemblyGroup_oid[13];
extern oid sccpOmHopCounterGroup_oid[13];
extern oid sccpOmReplicatedGroup_oid[13];
extern oid sccpOmOblConnectionOrientedGroup_oid[13];
extern oid sccpOmAllConnectionOrientedGroup_oid[13];
extern oid sccpOmOblProtocolClass3Group_oid[13];
extern oid sccpOmAllProtocolClass3Group_oid[13];
extern oid sccpOmSccpManagementGroup_oid[13];
extern oid sccpOmGTTGroup_oid[13];
extern oid sccpOmNonObligatoryGroup_oid[13];
extern oid sccpOmSccpUnavailableGroup_oid[13];

/* function prototypes */
/* trap function prototypes */
extern void send_sccpOm5minReport_v2trap(struct variable_list *);
extern void send_sccpOm15minReport_v2trap(struct variable_list *);
extern void send_sccpOm5minSsnReport_v2trap(struct variable_list *);
extern void send_sccpOm15minSsnReport_v2trap(struct variable_list *);

/* variable function prototypes */
void init_sccpOmMIB(void);
void deinit_sccpOmMIB(void);
int term_sccpOmMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_sccpOmMIB;
void parse_sccpOmMIB(const char *, char *);
SNMPCallback store_sccpOmMIB;
void refresh_sccpOmMIB(int);
FindVarMethod var_sccpOmErrorsTable;
struct sccpOmErrorsTable_data *sccpOmErrorsTable_create(void);
struct sccpOmErrorsTable_data *sccpOmErrorsTable_duplicate(struct sccpOmErrorsTable_data *);
int sccpOmErrorsTable_destroy(struct sccpOmErrorsTable_data **);
int sccpOmErrorsTable_add(struct sccpOmErrorsTable_data *);
int sccpOmErrorsTable_del(struct sccpOmErrorsTable_data *);
void parse_sccpOmErrorsTable(const char *, char *);
SNMPCallback store_sccpOmErrorsTable;
void refresh_sccpOmErrorsTable(int);
FindVarMethod var_sccpOmMessageTable;
struct sccpOmMessageTable_data *sccpOmMessageTable_create(void);
struct sccpOmMessageTable_data *sccpOmMessageTable_duplicate(struct sccpOmMessageTable_data *);
int sccpOmMessageTable_destroy(struct sccpOmMessageTable_data **);
int sccpOmMessageTable_add(struct sccpOmMessageTable_data *);
int sccpOmMessageTable_del(struct sccpOmMessageTable_data *);
void parse_sccpOmMessageTable(const char *, char *);
SNMPCallback store_sccpOmMessageTable;
void refresh_sccpOmMessageTable(int);
FindVarMethod var_sccpOmAccessibilityTable;
struct sccpOmAccessibilityTable_data *sccpOmAccessibilityTable_create(void);
struct sccpOmAccessibilityTable_data *sccpOmAccessibilityTable_duplicate(struct sccpOmAccessibilityTable_data *);
int sccpOmAccessibilityTable_destroy(struct sccpOmAccessibilityTable_data **);
int sccpOmAccessibilityTable_add(struct sccpOmAccessibilityTable_data *);
int sccpOmAccessibilityTable_del(struct sccpOmAccessibilityTable_data *);
void parse_sccpOmAccessibilityTable(const char *, char *);
SNMPCallback store_sccpOmAccessibilityTable;
void refresh_sccpOmAccessibilityTable(int);
FindVarMethod var_sccpOmUtilizationTable;
struct sccpOmUtilizationTable_data *sccpOmUtilizationTable_create(void);
struct sccpOmUtilizationTable_data *sccpOmUtilizationTable_duplicate(struct sccpOmUtilizationTable_data *);
int sccpOmUtilizationTable_destroy(struct sccpOmUtilizationTable_data **);
int sccpOmUtilizationTable_add(struct sccpOmUtilizationTable_data *);
int sccpOmUtilizationTable_del(struct sccpOmUtilizationTable_data *);
void parse_sccpOmUtilizationTable(const char *, char *);
SNMPCallback store_sccpOmUtilizationTable;
void refresh_sccpOmUtilizationTable(int);
FindVarMethod var_sccpOm5MinHistoryTable;
struct sccpOm5MinHistoryTable_data *sccpOm5MinHistoryTable_create(void);
struct sccpOm5MinHistoryTable_data *sccpOm5MinHistoryTable_duplicate(struct sccpOm5MinHistoryTable_data *);
int sccpOm5MinHistoryTable_destroy(struct sccpOm5MinHistoryTable_data **);
int sccpOm5MinHistoryTable_add(struct sccpOm5MinHistoryTable_data *);
int sccpOm5MinHistoryTable_del(struct sccpOm5MinHistoryTable_data *);
void parse_sccpOm5MinHistoryTable(const char *, char *);
SNMPCallback store_sccpOm5MinHistoryTable;
void refresh_sccpOm5MinHistoryTable(int);
FindVarMethod var_sccpOm15MinHistoryTable;
struct sccpOm15MinHistoryTable_data *sccpOm15MinHistoryTable_create(void);
struct sccpOm15MinHistoryTable_data *sccpOm15MinHistoryTable_duplicate(struct sccpOm15MinHistoryTable_data *);
int sccpOm15MinHistoryTable_destroy(struct sccpOm15MinHistoryTable_data **);
int sccpOm15MinHistoryTable_add(struct sccpOm15MinHistoryTable_data *);
int sccpOm15MinHistoryTable_del(struct sccpOm15MinHistoryTable_data *);
void parse_sccpOm15MinHistoryTable(const char *, char *);
SNMPCallback store_sccpOm15MinHistoryTable;
void refresh_sccpOm15MinHistoryTable(int);
FindVarMethod var_sccpOm5MinSsnHistoryTable;
struct sccpOm5MinSsnHistoryTable_data *sccpOm5MinSsnHistoryTable_create(void);
struct sccpOm5MinSsnHistoryTable_data *sccpOm5MinSsnHistoryTable_duplicate(struct sccpOm5MinSsnHistoryTable_data *);
int sccpOm5MinSsnHistoryTable_destroy(struct sccpOm5MinSsnHistoryTable_data **);
int sccpOm5MinSsnHistoryTable_add(struct sccpOm5MinSsnHistoryTable_data *);
int sccpOm5MinSsnHistoryTable_del(struct sccpOm5MinSsnHistoryTable_data *);
void parse_sccpOm5MinSsnHistoryTable(const char *, char *);
SNMPCallback store_sccpOm5MinSsnHistoryTable;
void refresh_sccpOm5MinSsnHistoryTable(int);
FindVarMethod var_sccpOm15MinSsnHistoryTable;
struct sccpOm15MinSsnHistoryTable_data *sccpOm15MinSsnHistoryTable_create(void);
struct sccpOm15MinSsnHistoryTable_data *sccpOm15MinSsnHistoryTable_duplicate(struct sccpOm15MinSsnHistoryTable_data *);
int sccpOm15MinSsnHistoryTable_destroy(struct sccpOm15MinSsnHistoryTable_data **);
int sccpOm15MinSsnHistoryTable_add(struct sccpOm15MinSsnHistoryTable_data *);
int sccpOm15MinSsnHistoryTable_del(struct sccpOm15MinSsnHistoryTable_data *);
void parse_sccpOm15MinSsnHistoryTable(const char *, char *);
SNMPCallback store_sccpOm15MinSsnHistoryTable;
void refresh_sccpOm15MinSsnHistoryTable(int);

WriteMethod write_sccpOm1stAndIntervalActivate;
WriteMethod write_sccpOm1stAndIntervalDeactivate;
WriteMethod write_sccpOm5MinActivate;
WriteMethod write_sccpOm5MinDeaActivate;
WriteMethod write_sccpOm15MinActivate;
WriteMethod write_sccpOm15MinDeaActivate;
WriteMethod write_sccpOm5MinMaxIntervals;
WriteMethod write_sccpOm15MinMaxIntervals;
WriteMethod write_sccpOmpDefault;
WriteMethod write_sccpOmNrOfSubLevelsDefault;
WriteMethod write_sccpOmNrOfRestrictionLevelsDefault;
#endif				/* __LOCAL_SCCPOMMIB_H__ */
