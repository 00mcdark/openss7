/*****************************************************************************

 @(#) $Id: smiMIB.h,v 0.9.2.5 2009-02-18 20:18:54 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-02-18 20:18:54 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: smiMIB.h,v $
 Revision 0.9.2.5  2009-02-18 20:18:54  brian
 - updated agents

 Revision 0.9.2.4  2009-01-16 20:45:01  brian
 - updating mibs and agents

 Revision 0.9.2.3  2009-01-14 14:30:07  brian
 - working up agents

 Revision 0.9.2.2  2009-01-10 17:09:22  brian
 - updated agents

 Revision 0.9.2.1  2009-01-04 13:16:00  brian
 - updated agents

 *****************************************************************************/

#ifndef __LOCAL_SMIMIB_H__
#define __LOCAL_SMIMIB_H__

#ident "@(#) $RCSfile: smiMIB.h,v $ $Name:  $($Revision: 0.9.2.5 $) Copyright (c) 2008-2009 Monavacon Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct smiMIB_data {
	uint smiMIB_request;
};
struct discriminatorTable_data {
	uint discriminatorTable_request;
	uint discriminatorTable_refs;
	uint8_t *discriminatorId;	/* NoAccess */
	size_t discriminatorIdLen;
	uint8_t *discriminatorConstruct;	/* Create */
	size_t discriminatorConstructLen;
	long discriminatorAdministrativeState;	/* Create */
	long discriminatorOperationalState;	/* ReadOnly */
	uint8_t *discriminatorAvailabilityStatus;	/* ReadOnly */
	size_t discriminatorAvailabilityStatusLen;
	long discriminatorStartTime;	/* Create */
	long discriminatorStopTime;	/* Create */
	uint8_t *discriminatorIntervalsOfDay;	/* Create */
	size_t discriminatorIntervalsOfDayLen;
	uint8_t *discriminatorWeekMask;	/* Create */
	size_t discriminatorWeekMaskLen;
	oid *discriminatorSchedulerName;	/* Create */
	size_t discriminatorSchedulerNameLen;
	long discriminatorEntryStatus;	/* Create */
};
struct eventForwardingDiscriminatorTable_data {
	uint eventForwardingDiscriminatorTable_request;
	uint eventForwardingDiscriminatorTable_refs;
	uint8_t *discriminatorId;	/* NoAccess */
	size_t discriminatorIdLen;
	uint8_t *destination;		/* Create */
	size_t destinationLen;
	uint8_t *activeDestination;	/* Create */
	size_t activeDestinationLen;
	uint8_t *backUpDestinationList;	/* Create */
	size_t backUpDestinationListLen;
	long confirmedMode;		/* Create */
	long eventForwardingDiscriminatorEntryStatus;	/* Create */
};
struct logTable_data {
	uint logTable_request;
	uint logTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logDiscriminatorConstruct;	/* Create */
	size_t logDiscriminatorConstructLen;
	long logAdministrativeState;	/* Create */
	long logOperationalState;	/* ReadOnly */
	uint8_t *logAvailabilityStatus;	/* Create */
	size_t logAvailabilityStatusLen;
	long logFullAction;		/* Create */
	ulong maxLogSize;		/* Create */
	long currentLogSize;		/* ReadOnly */
	long numberOfRecords;		/* ReadOnly */
	uint8_t *capacityAlarmThreshold;	/* Create */
	size_t capacityAlarmThresholdLen;
	long logStartTime;		/* Create */
	long logStopTime;		/* Create */
	uint8_t *logIntervalsOfDay;	/* Create */
	size_t logIntervalsOfDayLen;
	uint8_t *logWeekMask;		/* Create */
	size_t logWeekMaskLen;
	oid *logSchedulerName;		/* Create */
	size_t logSchedulerNameLen;
	long logEntryStatus;		/* Create */
};
struct logRecordTable_data {
	uint logRecordTable_request;
	uint logRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	long loggingTime;		/* ReadOnly */
	long logRecordEntryStatus;	/* ReadWrite */
};
struct eventLogRecordTable_data {
	uint eventLogRecordTable_request;
	uint eventLogRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	oid *managedObjectClass;	/* ReadOnly */
	size_t managedObjectClassLen;
	oid *managedObjectInstance;	/* ReadOnly */
	size_t managedObjectInstanceLen;
	oid *eventType;			/* ReadOnly */
	size_t eventTypeLen;
	long eventTimes;		/* ReadOnly */
	long eventNotificationIdentifier;	/* ReadOnly */
	uint8_t *eventCorrelatedNotifications;	/* ReadOnly */
	size_t eventCorrelatedNotificationsLen;
	uint8_t *eventAdditionalText;	/* ReadOnly */
	size_t eventAdditionalTextLen;
	uint8_t *eventAdditionalInformation;	/* ReadOnly */
	size_t eventAdditionalInformationLen;
};
struct alarmRecordTable_data {
	uint alarmRecordTable_request;
	uint alarmRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	oid *alarmRecordProbableCause;	/* ReadOnly */
	size_t alarmRecordProbableCauseLen;
	long alarmRecordPerceivedSeverity;	/* ReadOnly */
	oid *alarmRecordSpecificProblems;	/* ReadOnly */
	size_t alarmRecordSpecificProblemsLen;
	long alarmRecordBackedUpStatus;	/* ReadOnly */
	oid *alarmRecordBackUpObject;	/* ReadOnly */
	size_t alarmRecordBackUpObjectLen;
	long alarmRecordTrendIndication;	/* ReadOnly */
	uint8_t *alarmRecordThresholdInfo;	/* ReadOnly */
	size_t alarmRecordThresholdInfoLen;
	uint8_t *alarmRecordStateChangeDefinition;	/* ReadOnly */
	size_t alarmRecordStateChangeDefinitionLen;
	uint8_t *alarmRecordMonitoredAttributes;	/* ReadOnly */
	size_t alarmRecordMonitoredAttributesLen;
	oid *alarmRecordProposedRepairActions;	/* ReadOnly */
	size_t alarmRecordProposedRepairActionsLen;
};
struct attributeValueChangeRecordTable_data {
	uint attributeValueChangeRecordTable_request;
	uint attributeValueChangeRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	uint8_t *attributeValueChangeRecordDefinition;	/* ReadOnly */
	size_t attributeValueChangeRecordDefinitionLen;
	long attributeValueChangeSourceIndicator;	/* ReadOnly */
	oid *attributeValueChangeAttributeIdentifierList;	/* ReadOnly */
	size_t attributeValueChangeAttributeIdentifierListLen;
};
struct objectCreationRecordTable_data {
	uint objectCreationRecordTable_request;
	uint objectCreationRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	long objectCreationSourceIndicator;	/* ReadOnly */
	oid *objectCreationAttributeIdentifierList;	/* ReadOnly */
	size_t objectCreationAttributeIdentifierListLen;
};
struct objectDeletionRecordTable_data {
	uint objectDeletionRecordTable_request;
	uint objectDeletionRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	long objectDeletionSourceIndicator;	/* ReadOnly */
	oid *objectDeletionAttributeIdentifierList;	/* ReadOnly */
	size_t objectDeletionAttributeIdentifierListLen;
};
struct relationshipChangeRecordTable_data {
	uint relationshipChangeRecordTable_request;
	uint relationshipChangeRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	uint8_t *relationshipChangeRecordDefinition;	/* ReadOnly */
	size_t relationshipChangeRecordDefinitionLen;
	long relationshipChangeSourceIndicator;	/* ReadOnly */
	oid *relationshipChangeAttributeIdentifierList;	/* ReadOnly */
	size_t relationshipChangeAttributeIdentifierListLen;
};
struct securityAlarmReportRecordTable_data {
	uint securityAlarmReportRecordTable_request;
	uint securityAlarmReportRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	oid *securityAlarmRecordCause;	/* ReadOnly */
	size_t securityAlarmRecordCauseLen;
	long securityAlarmRecordSeverity;	/* ReadOnly */
	oid *securityAlarmRecordDetector;	/* ReadOnly */
	size_t securityAlarmRecordDetectorLen;
	uint8_t *securityServiceUser;	/* ReadOnly */
	size_t securityServiceUserLen;
	uint8_t *securityServiceProvider;	/* ReadOnly */
	size_t securityServiceProviderLen;
};
struct stateChangeRecordTable_data {
	uint stateChangeRecordTable_request;
	uint stateChangeRecordTable_refs;
	uint8_t *logId;			/* NoAccess */
	size_t logIdLen;
	uint8_t *logRecordId;		/* NoAccess */
	size_t logRecordIdLen;
	uint8_t *stateChangeRecordDefinition;	/* ReadOnly */
	size_t stateChangeRecordDefinitionLen;
	long stateChangeSourceIndicator;	/* ReadOnly */
	oid *stateChangeAttributeIdentifierList;	/* ReadOnly */
	size_t stateChangeAttributeIdentifierListLen;
};

/* storage declarations */
extern struct smiMIB_data *smiMIBStorage;
extern struct header_complex_index *discriminatorTableStorage;
extern struct header_complex_index *eventForwardingDiscriminatorTableStorage;
extern struct header_complex_index *logTableStorage;
extern struct header_complex_index *logRecordTableStorage;
extern struct header_complex_index *eventLogRecordTableStorage;
extern struct header_complex_index *alarmRecordTableStorage;
extern struct header_complex_index *attributeValueChangeRecordTableStorage;
extern struct header_complex_index *objectCreationRecordTableStorage;
extern struct header_complex_index *objectDeletionRecordTableStorage;
extern struct header_complex_index *relationshipChangeRecordTableStorage;
extern struct header_complex_index *securityAlarmReportRecordTableStorage;
extern struct header_complex_index *stateChangeRecordTableStorage;

/* enum definitions from the covered mib sections */

#define TMNPERCEIVEDSEVERITY_INDETERMINATE       0
#define TMNPERCEIVEDSEVERITY_CRITICAL            1
#define TMNPERCEIVEDSEVERITY_MAJOR               2
#define TMNPERCEIVEDSEVERITY_MINOR               3
#define TMNPERCEIVEDSEVERITY_WARNING             4
#define TMNPERCEIVEDSEVERITY_CLEARED             5

#define TMNBACKEDUPSTATUS_NONE                   0
#define TMNBACKEDUPSTATUS_BACKEDUP               1

#define TMNTRENDINDICATION_LESSSEVERE            0
#define TMNTRENDINDICATION_NOCHANGE              1
#define TMNTRENDINDICATION_MORESEVERE            2

#define TMNSOURCEINDICATOR_RESOURCEOPERATION     0
#define TMNSOURCEINDICATOR_MANAGEMENTOPERATION   1
#define TMNSOURCEINDICATOR_UNKNOWN               2

#define TMNSECURITYALARMSEVERITY_INDETERMINATE   0
#define TMNSECURITYALARMSEVERITY_CRITICAL        1
#define TMNSECURITYALARMSEVERITY_MAJOR           2
#define TMNSECURITYALARMSEVERITY_MINOR           3
#define TMNSECURITYALARMSEVERITY_WARNING         4

#define DISCRIMINATORADMINISTRATIVESTATE_LOCKED  0
#define DISCRIMINATORADMINISTRATIVESTATE_UNLOCKED 1
#define DISCRIMINATORADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define DISCRIMINATOROPERATIONALSTATE_DISABLED   0
#define DISCRIMINATOROPERATIONALSTATE_ENABLED    1

#define DISCRIMINATORAVAILABILITYSTATUS_INTEST   0
#define DISCRIMINATORAVAILABILITYSTATUS_FAILED   1
#define DISCRIMINATORAVAILABILITYSTATUS_POWEROFF 2
#define DISCRIMINATORAVAILABILITYSTATUS_OFFLINE  3
#define DISCRIMINATORAVAILABILITYSTATUS_OFFDUTY  4
#define DISCRIMINATORAVAILABILITYSTATUS_DEPENDENCY 5
#define DISCRIMINATORAVAILABILITYSTATUS_DEGRADED 6
#define DISCRIMINATORAVAILABILITYSTATUS_NOTINSTALLED 7
#define DISCRIMINATORAVAILABILITYSTATUS_LOGFULL  8

#define CONFIRMEDMODE_TRUE                       1
#define CONFIRMEDMODE_FALSE                      2

#define LOGADMINISTRATIVESTATE_LOCKED            0
#define LOGADMINISTRATIVESTATE_UNLOCKED          1
#define LOGADMINISTRATIVESTATE_SHUTTINGDOWN      2

#define LOGOPERATIONALSTATE_DISABLED             0
#define LOGOPERATIONALSTATE_ENABLED              1

#define LOGAVAILABILITYSTATUS_INTEST             0
#define LOGAVAILABILITYSTATUS_FAILED             1
#define LOGAVAILABILITYSTATUS_POWEROFF           2
#define LOGAVAILABILITYSTATUS_OFFLINE            3
#define LOGAVAILABILITYSTATUS_OFFDUTY            4
#define LOGAVAILABILITYSTATUS_DEPENDENCY         5
#define LOGAVAILABILITYSTATUS_DEGRADED           6
#define LOGAVAILABILITYSTATUS_NOTINSTALLED       7
#define LOGAVAILABILITYSTATUS_LOGFULL            8

#define LOGFULLACTION_WRAP                       0
#define LOGFULLACTION_HALT                       1

#define ALARMRECORDPERCEIVEDSEVERITY_INDETERMINATE 0
#define ALARMRECORDPERCEIVEDSEVERITY_CRITICAL    1
#define ALARMRECORDPERCEIVEDSEVERITY_MAJOR       2
#define ALARMRECORDPERCEIVEDSEVERITY_MINOR       3
#define ALARMRECORDPERCEIVEDSEVERITY_WARNING     4
#define ALARMRECORDPERCEIVEDSEVERITY_CLEARED     5

#define ALARMRECORDBACKEDUPSTATUS_NONE           0
#define ALARMRECORDBACKEDUPSTATUS_BACKEDUP       1

#define ALARMRECORDTRENDINDICATION_LESSSEVERE    0
#define ALARMRECORDTRENDINDICATION_NOCHANGE      1
#define ALARMRECORDTRENDINDICATION_MORESEVERE    2

#define ATTRIBUTEVALUECHANGESOURCEINDICATOR_RESOURCEOPERATION 0
#define ATTRIBUTEVALUECHANGESOURCEINDICATOR_MANAGEMENTOPERATION 1
#define ATTRIBUTEVALUECHANGESOURCEINDICATOR_UNKNOWN 2

#define OBJECTCREATIONSOURCEINDICATOR_RESOURCEOPERATION 0
#define OBJECTCREATIONSOURCEINDICATOR_MANAGEMENTOPERATION 1
#define OBJECTCREATIONSOURCEINDICATOR_UNKNOWN    2

#define OBJECTDELETIONSOURCEINDICATOR_RESOURCEOPERATION 0
#define OBJECTDELETIONSOURCEINDICATOR_MANAGEMENTOPERATION 1
#define OBJECTDELETIONSOURCEINDICATOR_UNKNOWN    2

#define RELATIONSHIPCHANGESOURCEINDICATOR_RESOURCEOPERATION 0
#define RELATIONSHIPCHANGESOURCEINDICATOR_MANAGEMENTOPERATION 1
#define RELATIONSHIPCHANGESOURCEINDICATOR_UNKNOWN 2

#define SECURITYALARMRECORDSEVERITY_INDETERMINATE 0
#define SECURITYALARMRECORDSEVERITY_CRITICAL     1
#define SECURITYALARMRECORDSEVERITY_MAJOR        2
#define SECURITYALARMRECORDSEVERITY_MINOR        3
#define SECURITYALARMRECORDSEVERITY_WARNING      4

#define STATECHANGESOURCEINDICATOR_RESOURCEOPERATION 0
#define STATECHANGESOURCEINDICATOR_MANAGEMENTOPERATION 1
#define STATECHANGESOURCEINDICATOR_UNKNOWN       2

/* notifications */
extern oid attributeValueChange_oid[12];
extern oid communicationsAlarm_oid[12];
extern oid environmentalAlarm_oid[12];
extern oid equipmentAlarm_oid[12];
extern oid integrityViolation_oid[12];
extern oid objectCreation_oid[12];
extern oid objectDeletion_oid[12];
extern oid operationalViolation_oid[12];
extern oid physicalViolation_oid[12];
extern oid processingErrorAlarm_oid[12];
extern oid qualityofServiceAlarm_oid[12];
extern oid relationshipChange_oid[12];
extern oid securityServiceOrMechanismViolation_oid[12];
extern oid stateChange_oid[12];
extern oid timeDomainViolation_oid[12];
extern oid communicationsInformation_oid[12];

/* scalars accessible only for notify */
extern oid tmnObjectInstance_oid[12];
extern oid tmnNotificationIdentifier_oid[12];
extern oid tmnCorrelatedNotifications_oid[12];
extern oid tmnProbableCause_oid[12];
extern oid tmnSpecificProblems_oid[12];
extern oid tmnPerceivedSeverity_oid[12];
extern oid tmnBackedUpStatus_oid[12];
extern oid tmnBackUpObject_oid[12];
extern oid tmnTrendIndication_oid[12];
extern oid tmnThresholdInfo_oid[12];
extern oid tmnStateChangeDefinition_oid[12];
extern oid tmnMonitoredAttributes_oid[12];
extern oid tmnProposedRepairActions_oid[12];
extern oid tmnSourceIndicator_oid[12];
extern oid tmnAttributeIdentifierList_oid[12];
extern oid tmnAttributeValueChangeDefinition_oid[12];
extern oid tmnAdditionalText_oid[12];
extern oid tmnAdditionalInformation_oid[12];
extern oid tmnSecurityAlarmCause_oid[12];
extern oid tmnSecurityAlarmSeverity_oid[12];
extern oid tmnSecurityAlarmDetector_oid[12];
extern oid tmnServiceUser_oid[12];
extern oid tmnServiceProvider_oid[12];
extern oid tmnAttributeList_oid[12];
extern oid tmnRelationshipChangeDefinition_oid[12];
extern oid tmnInformationType_oid[12];
extern oid tmnInformationData_oid[12];

/* object id definitions */
extern oid attributeValueChangeType_oid[13];
extern oid communicationsAlarmType_oid[13];
extern oid environmentalAlarmType_oid[13];
extern oid equipmentAlarmType_oid[13];
extern oid integrityViolationType_oid[13];
extern oid objectCreationType_oid[13];
extern oid objectDeletionType_oid[13];
extern oid operationalViolationType_oid[13];
extern oid physicalViolationType_oid[13];
extern oid processingErrorAlarmType_oid[13];
extern oid qualityofServiceAlarmType_oid[13];
extern oid relationshipChangeType_oid[13];
extern oid securityServiceOrMechanismViolationType_oid[13];
extern oid stateChangeType_oid[13];
extern oid timeDomainViolationType_oid[13];
extern oid communicationsInformationType_oid[13];
extern oid adapterError_oid[13];
extern oid applicationSubsystemFailure_oid[13];
extern oid bandwidthReduced_oid[13];
extern oid callEstablishmentError_oid[13];
extern oid communicationsProtocolError_oid[13];
extern oid communicationsSubsystemFailure_oid[13];
extern oid configurationOrCustomizationError_oid[13];
extern oid congestion_oid[13];
extern oid corruptData_oid[13];
extern oid cpuCyclesLimitExceeded_oid[13];
extern oid dataSetOrModemError_oid[13];
extern oid degradedSignal_oid[13];
extern oid dTE_DCEInterfaceError_oid[13];
extern oid enclosureDoorOpen_oid[13];
extern oid equipmentMalfunction_oid[13];
extern oid excessiveVibration_oid[13];
extern oid fileError_oid[13];
extern oid fireDetected_oid[13];
extern oid floodDetected_oid[13];
extern oid framingError_oid[13];
extern oid heatingOrVentilationOrCoolingSystemProblem_oid[13];
extern oid humidityUnacceptable_oid[13];
extern oid inputOutputDeviceError_oid[13];
extern oid inputDeviceError_oid[13];
extern oid lANError_oid[13];
extern oid leakDetected_oid[13];
extern oid localNodeTransmissionError_oid[13];
extern oid lossOfFrame_oid[13];
extern oid lossOfSignal_oid[13];
extern oid materialSupplyExhausted_oid[13];
extern oid multiplexerProblem_oid[13];
extern oid outOfMemory_oid[13];
extern oid ouputDeviceError_oid[13];
extern oid performanceDegraded_oid[13];
extern oid powerProblem_oid[13];
extern oid pressureUnacceptable_oid[13];
extern oid processorProblem_oid[13];
extern oid pumpFailure_oid[13];
extern oid queueSizeExceeded_oid[13];
extern oid receiveFailure_oid[13];
extern oid receiverFailure_oid[13];
extern oid remoteNodeTransmissionError_oid[13];
extern oid resourceAtOrNearingCapacity_oid[13];
extern oid responseTimeExcessive_oid[13];
extern oid retransmissionRateExcessive_oid[13];
extern oid softwareError_oid[13];
extern oid softwareProgramAbnormallyTerminated_oid[13];
extern oid softwareProgramError_oid[13];
extern oid storageCapacityProblem_oid[13];
extern oid temperatureUnacceptable_oid[13];
extern oid thresholdCrossed_oid[13];
extern oid timingProblem_oid[13];
extern oid toxicLeakDetected_oid[13];
extern oid transmitFailure_oid[13];
extern oid transmitterFailure_oid[13];
extern oid underlyingResourceUnavailable_oid[13];
extern oid versionMismatch_oid[13];
extern oid authenticationFailure_oid[13];
extern oid breachOfConfidentiality_oid[13];
extern oid cableTamper_oid[13];
extern oid delayedInformation_oid[13];
extern oid denialOfService_oid[13];
extern oid duplicateInformation_oid[13];
extern oid informationMissing_oid[13];
extern oid informationModificationDetected_oid[13];
extern oid informationOutOfSequence_oid[13];
extern oid intrusionDetection_oid[13];
extern oid keyExpired_oid[13];
extern oid nonRepudiationFailure_oid[13];
extern oid outOfHoursActivity_oid[13];
extern oid outOfService_oid[13];
extern oid proceduralError_oid[13];
extern oid unauthorizedAccessAttempt_oid[13];
extern oid unexpectedInformation_oid[13];
extern oid unspecifiedReason_oid[13];
extern oid noActionRequired_oid[13];
extern oid repairActionRequired_oid[13];
extern oid aIS_oid[13];
extern oid callSetUpFailure_oid[13];
extern oid degradedSignalGnm_oid[13];
extern oid farEndReceiverFailure_oid[13];
extern oid framingErrorGnm_oid[13];
extern oid lossOfFrameGnm_oid[13];
extern oid lossOfPointer_oid[13];
extern oid lossOfSignalGnm_oid[13];
extern oid payloadTypeMismatch_oid[13];
extern oid transmissionError_oid[13];
extern oid remoteAlarmInterface_oid[13];
extern oid excessiveBER_oid[13];
extern oid pathTraceMismatch_oid[13];
extern oid unavailable_oid[13];
extern oid signalLabelMismatch_oid[13];
extern oid lossOfMultiFrame_oid[13];
extern oid backplaneFailure_oid[13];
extern oid dataSetProblem_oid[13];
extern oid equipmentIdentifierDuplication_oid[13];
extern oid externalIFDeviceProblem_oid[13];
extern oid lineCardProblem_oid[13];
extern oid multiplexerProblemGnm_oid[13];
extern oid nEIdentifierDuplication_oid[13];
extern oid powerProblemGnm_oid[13];
extern oid processorProblemGnm_oid[13];
extern oid protectionPathFailure_oid[13];
extern oid receiverFailureGnm_oid[13];
extern oid replaceableUnitMissing_oid[13];
extern oid replaceableUnitTypeMismatch_oid[13];
extern oid synchronizationSourceMismatch_oid[13];
extern oid terminalProblem_oid[13];
extern oid timingProblemGnm_oid[13];
extern oid transmitterFailureGnm_oid[13];
extern oid trunkCardProblem_oid[13];
extern oid replaceableUnitProblem_oid[13];
extern oid airCompressorFailure_oid[13];
extern oid airConditioningFailure_oid[13];
extern oid airDryerFailure_oid[13];
extern oid batteryDischarging_oid[13];
extern oid batteryFailure_oid[13];
extern oid commercialPowerFailure_oid[13];
extern oid coolingFanFailure_oid[13];
extern oid engineFailure_oid[13];
extern oid fireDetectorFailure_oid[13];
extern oid fuseFailure_oid[13];
extern oid generatorFailure_oid[13];
extern oid lowBatteryThreshold_oid[13];
extern oid pumpFailureGnm_oid[13];
extern oid rectifierFailure_oid[13];
extern oid rectifierHighVoltage_oid[13];
extern oid rectifierLowVoltage_oid[13];
extern oid ventilationsSystemFailure_oid[13];
extern oid enclosureDoorOpenGnm_oid[13];
extern oid explosiveGas_oid[13];
extern oid fire_oid[13];
extern oid flood_oid[13];
extern oid highHumidity_oid[13];
extern oid highTemperature_oid[13];
extern oid highWind_oid[13];
extern oid iceBuildUp_oid[13];
extern oid intrusionDetectionGnm_oid[13];
extern oid lowFuel_oid[13];
extern oid lowHumidity_oid[13];
extern oid lowCablePressure_oid[13];
extern oid lowTemperature_oid[13];
extern oid lowWater_oid[13];
extern oid smoke_oid[13];
extern oid toxicGas_oid[13];
extern oid storageCapacityProblemGnm_oid[13];
extern oid memoryMismatchGnm_oid[13];
extern oid corruptDataGnm_oid[13];
extern oid outOfCPUCycles_oid[13];
extern oid sfwrEnvironmentProblem_oid[13];
extern oid sfwrDownloadFailure_oid[13];
extern oid smiMandatoryParametersGroup_oid[12];
extern oid smiConditionalParametersGroup_oid[12];
extern oid smiOptionalParametersGroup_oid[12];
extern oid smiMandatoryNotificationsGroup_oid[12];
extern oid smiConditionalNotificationsGroup_oid[12];
extern oid smiOptionalNotificationsGroup_oid[12];
extern oid smiDiscriminatorGroup_oid[12];
extern oid smiEventForwardingDiscriminatorGroup_oid[12];
extern oid smiLogGroup_oid[12];
extern oid smiLogRecordGroup_oid[12];
extern oid smiEventLogRecordGroup_oid[12];
extern oid smiAlarmRecordGroup_oid[12];
extern oid smiAttributeValueChangeRecordGroup_oid[12];
extern oid smiObjectCreationRecordGroup_oid[12];
extern oid smiObjectDeletionRecordGroup_oid[12];
extern oid smiRelationshipChangeRecordGroup_oid[12];
extern oid smiSecurityAlarmReportRecordGroup_oid[12];
extern oid smiStateChangeRecordGroup_oid[12];
extern oid createDeleteNotificationsPackage_oid[12];
extern oid attributeValueChangeNotificationPackage_oid[12];
extern oid communicationsAlarmPackage_oid[12];
extern oid smiCompliance_oid[12];

/* function prototypes */
/* trap function prototypes */
extern void send_attributeValueChange_v2trap(struct variable_list *);
extern void send_communicationsAlarm_v2trap(struct variable_list *);
extern void send_environmentalAlarm_v2trap(struct variable_list *);
extern void send_equipmentAlarm_v2trap(struct variable_list *);
extern void send_integrityViolation_v2trap(struct variable_list *);
extern void send_objectCreation_v2trap(struct variable_list *);
extern void send_objectDeletion_v2trap(struct variable_list *);
extern void send_operationalViolation_v2trap(struct variable_list *);
extern void send_physicalViolation_v2trap(struct variable_list *);
extern void send_processingErrorAlarm_v2trap(struct variable_list *);
extern void send_qualityofServiceAlarm_v2trap(struct variable_list *);
extern void send_relationshipChange_v2trap(struct variable_list *);
extern void send_securityServiceOrMechanismViolation_v2trap(struct variable_list *);
extern void send_stateChange_v2trap(struct variable_list *);
extern void send_timeDomainViolation_v2trap(struct variable_list *);
extern void send_communicationsInformation_v2trap(struct variable_list *);

/* variable function prototypes */
void init_smiMIB(void);
void deinit_smiMIB(void);
int term_smiMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_smiMIB;
void parse_smiMIB(const char *, char *);
SNMPCallback store_smiMIB;
void refresh_smiMIB(int);
FindVarMethod var_discriminatorTable;
struct discriminatorTable_data *discriminatorTable_create(void);
struct discriminatorTable_data *discriminatorTable_duplicate(struct discriminatorTable_data *);
int discriminatorTable_destroy(struct discriminatorTable_data **);
int discriminatorTable_add(struct discriminatorTable_data *);
int discriminatorTable_del(struct discriminatorTable_data *);
void parse_discriminatorTable(const char *, char *);
SNMPCallback store_discriminatorTable;
void refresh_discriminatorTable(int);
FindVarMethod var_eventForwardingDiscriminatorTable;
struct eventForwardingDiscriminatorTable_data *eventForwardingDiscriminatorTable_create(void);
struct eventForwardingDiscriminatorTable_data *eventForwardingDiscriminatorTable_duplicate(struct eventForwardingDiscriminatorTable_data *);
int eventForwardingDiscriminatorTable_destroy(struct eventForwardingDiscriminatorTable_data **);
int eventForwardingDiscriminatorTable_add(struct eventForwardingDiscriminatorTable_data *);
int eventForwardingDiscriminatorTable_del(struct eventForwardingDiscriminatorTable_data *);
void parse_eventForwardingDiscriminatorTable(const char *, char *);
SNMPCallback store_eventForwardingDiscriminatorTable;
void refresh_eventForwardingDiscriminatorTable(int);
FindVarMethod var_logTable;
struct logTable_data *logTable_create(void);
struct logTable_data *logTable_duplicate(struct logTable_data *);
int logTable_destroy(struct logTable_data **);
int logTable_add(struct logTable_data *);
int logTable_del(struct logTable_data *);
void parse_logTable(const char *, char *);
SNMPCallback store_logTable;
void refresh_logTable(int);
FindVarMethod var_logRecordTable;
struct logRecordTable_data *logRecordTable_create(void);
struct logRecordTable_data *logRecordTable_duplicate(struct logRecordTable_data *);
int logRecordTable_destroy(struct logRecordTable_data **);
int logRecordTable_add(struct logRecordTable_data *);
int logRecordTable_del(struct logRecordTable_data *);
void parse_logRecordTable(const char *, char *);
SNMPCallback store_logRecordTable;
void refresh_logRecordTable(int);
FindVarMethod var_eventLogRecordTable;
struct eventLogRecordTable_data *eventLogRecordTable_create(void);
struct eventLogRecordTable_data *eventLogRecordTable_duplicate(struct eventLogRecordTable_data *);
int eventLogRecordTable_destroy(struct eventLogRecordTable_data **);
int eventLogRecordTable_add(struct eventLogRecordTable_data *);
int eventLogRecordTable_del(struct eventLogRecordTable_data *);
void parse_eventLogRecordTable(const char *, char *);
SNMPCallback store_eventLogRecordTable;
void refresh_eventLogRecordTable(int);
FindVarMethod var_alarmRecordTable;
struct alarmRecordTable_data *alarmRecordTable_create(void);
struct alarmRecordTable_data *alarmRecordTable_duplicate(struct alarmRecordTable_data *);
int alarmRecordTable_destroy(struct alarmRecordTable_data **);
int alarmRecordTable_add(struct alarmRecordTable_data *);
int alarmRecordTable_del(struct alarmRecordTable_data *);
void parse_alarmRecordTable(const char *, char *);
SNMPCallback store_alarmRecordTable;
void refresh_alarmRecordTable(int);
FindVarMethod var_attributeValueChangeRecordTable;
struct attributeValueChangeRecordTable_data *attributeValueChangeRecordTable_create(void);
struct attributeValueChangeRecordTable_data *attributeValueChangeRecordTable_duplicate(struct attributeValueChangeRecordTable_data *);
int attributeValueChangeRecordTable_destroy(struct attributeValueChangeRecordTable_data **);
int attributeValueChangeRecordTable_add(struct attributeValueChangeRecordTable_data *);
int attributeValueChangeRecordTable_del(struct attributeValueChangeRecordTable_data *);
void parse_attributeValueChangeRecordTable(const char *, char *);
SNMPCallback store_attributeValueChangeRecordTable;
void refresh_attributeValueChangeRecordTable(int);
FindVarMethod var_objectCreationRecordTable;
struct objectCreationRecordTable_data *objectCreationRecordTable_create(void);
struct objectCreationRecordTable_data *objectCreationRecordTable_duplicate(struct objectCreationRecordTable_data *);
int objectCreationRecordTable_destroy(struct objectCreationRecordTable_data **);
int objectCreationRecordTable_add(struct objectCreationRecordTable_data *);
int objectCreationRecordTable_del(struct objectCreationRecordTable_data *);
void parse_objectCreationRecordTable(const char *, char *);
SNMPCallback store_objectCreationRecordTable;
void refresh_objectCreationRecordTable(int);
FindVarMethod var_objectDeletionRecordTable;
struct objectDeletionRecordTable_data *objectDeletionRecordTable_create(void);
struct objectDeletionRecordTable_data *objectDeletionRecordTable_duplicate(struct objectDeletionRecordTable_data *);
int objectDeletionRecordTable_destroy(struct objectDeletionRecordTable_data **);
int objectDeletionRecordTable_add(struct objectDeletionRecordTable_data *);
int objectDeletionRecordTable_del(struct objectDeletionRecordTable_data *);
void parse_objectDeletionRecordTable(const char *, char *);
SNMPCallback store_objectDeletionRecordTable;
void refresh_objectDeletionRecordTable(int);
FindVarMethod var_relationshipChangeRecordTable;
struct relationshipChangeRecordTable_data *relationshipChangeRecordTable_create(void);
struct relationshipChangeRecordTable_data *relationshipChangeRecordTable_duplicate(struct relationshipChangeRecordTable_data *);
int relationshipChangeRecordTable_destroy(struct relationshipChangeRecordTable_data **);
int relationshipChangeRecordTable_add(struct relationshipChangeRecordTable_data *);
int relationshipChangeRecordTable_del(struct relationshipChangeRecordTable_data *);
void parse_relationshipChangeRecordTable(const char *, char *);
SNMPCallback store_relationshipChangeRecordTable;
void refresh_relationshipChangeRecordTable(int);
FindVarMethod var_securityAlarmReportRecordTable;
struct securityAlarmReportRecordTable_data *securityAlarmReportRecordTable_create(void);
struct securityAlarmReportRecordTable_data *securityAlarmReportRecordTable_duplicate(struct securityAlarmReportRecordTable_data *);
int securityAlarmReportRecordTable_destroy(struct securityAlarmReportRecordTable_data **);
int securityAlarmReportRecordTable_add(struct securityAlarmReportRecordTable_data *);
int securityAlarmReportRecordTable_del(struct securityAlarmReportRecordTable_data *);
void parse_securityAlarmReportRecordTable(const char *, char *);
SNMPCallback store_securityAlarmReportRecordTable;
void refresh_securityAlarmReportRecordTable(int);
FindVarMethod var_stateChangeRecordTable;
struct stateChangeRecordTable_data *stateChangeRecordTable_create(void);
struct stateChangeRecordTable_data *stateChangeRecordTable_duplicate(struct stateChangeRecordTable_data *);
int stateChangeRecordTable_destroy(struct stateChangeRecordTable_data **);
int stateChangeRecordTable_add(struct stateChangeRecordTable_data *);
int stateChangeRecordTable_del(struct stateChangeRecordTable_data *);
void parse_stateChangeRecordTable(const char *, char *);
SNMPCallback store_stateChangeRecordTable;
void refresh_stateChangeRecordTable(int);

WriteMethod write_discriminatorConstruct;
WriteMethod write_discriminatorAdministrativeState;
WriteMethod write_discriminatorStartTime;
WriteMethod write_discriminatorStopTime;
WriteMethod write_discriminatorIntervalsOfDay;
WriteMethod write_discriminatorWeekMask;
WriteMethod write_discriminatorSchedulerName;
WriteMethod write_discriminatorEntryStatus;
WriteMethod write_destination;
WriteMethod write_activeDestination;
WriteMethod write_backUpDestinationList;
WriteMethod write_confirmedMode;
WriteMethod write_eventForwardingDiscriminatorEntryStatus;
WriteMethod write_logDiscriminatorConstruct;
WriteMethod write_logAdministrativeState;
WriteMethod write_logAvailabilityStatus;
WriteMethod write_logFullAction;
WriteMethod write_maxLogSize;
WriteMethod write_capacityAlarmThreshold;
WriteMethod write_logStartTime;
WriteMethod write_logStopTime;
WriteMethod write_logIntervalsOfDay;
WriteMethod write_logWeekMask;
WriteMethod write_logSchedulerName;
WriteMethod write_logEntryStatus;
WriteMethod write_logRecordEntryStatus;
#endif				/* __LOCAL_SMIMIB_H__ */
