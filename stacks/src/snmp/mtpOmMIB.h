/*****************************************************************************

 @(#) $Id: mtpOmMIB.h,v 0.9.2.2 2008-12-24 13:08:25 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2008-12-24 13:08:25 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: mtpOmMIB.h,v $
 Revision 0.9.2.2  2008-12-24 13:08:25  brian
 - building ss7confd

 *****************************************************************************/

#ifndef __LOCAL_MTPOMMIB_H__
#define __LOCAL_MTPOMMIB_H__

#ident "@(#) $RCSfile: mtpOmMIB.h,v $ $Name:  $($Revision: 0.9.2.2 $) Copyright (c) 2001-2008 OpenSS7 Corporation."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct mtpOmMIB_data {
	uint mtpOmMIB_request;

};
struct mtpOmHandledMSUsOpcDpcSioTable_data {
	uint mtpOmHandledMSUsOpcDpcSioTable_request;
	char *mtpOmOpc;
	size_t mtpOmOpcLen;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	char *mtpOmSio;
	size_t mtpOmSioLen;
	long mtpOmHandledMSUsOpcDpcSio;
	long mtpOmHandledMSUsOpcDpcSioRowStatus;
};
struct mtpOmHandledOctetsOpcDpcSioTable_data {
	uint mtpOmHandledOctetsOpcDpcSioTable_request;
	char *mtpOmOpc;
	size_t mtpOmOpcLen;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	char *mtpOmSio;
	size_t mtpOmSioLen;
	long mtpOmHandledOctetsOpcDpcSioInterval;
	long mtpOmHandledOctetsOpcDpcSio;
	long mtpOmHandledOctetsOpcDpcSioRowStatus;
};
struct mtpOmHandledOctetsSIOTable_data {
	uint mtpOmHandledOctetsSIOTable_request;
	char *mtpOmSio;
	size_t mtpOmSioLen;
	long mtpOmHandledOctetsSIO;
};
struct mtpOmOblSpUtilizationTable_data {
	uint mtpOmOblSpUtilizationTable_request;
	long mtpOmAdjacentInaccessibleDuration;
};
struct mtpOmAllSpUtilizationTable_data {
	uint mtpOmAllSpUtilizationTable_request;
	long mtpOmAdjacentInaccessibleEvents;
	long mtpOmAllSpUtilizationRowStatus;
};
struct mtpOmReceivedOctetsOPCTable_data {
	uint mtpOmReceivedOctetsOPCTable_request;
	char *mtpOmOpc;
	size_t mtpOmOpcLen;
	long mtpOmReceivedOctetsOPCInterval;
	long mtpOmReceivedOctetsOPC;
	long mtpOmReceivedOctetsOPCRowStatus;
};
struct mtpOmReceivedOctetsOpcSioTable_data {
	uint mtpOmReceivedOctetsOpcSioTable_request;
	char *mtpOmOpc;
	size_t mtpOmOpcLen;
	char *mtpOmSio;
	size_t mtpOmSioLen;
	long mtpOmReceivedOctetsOpcSioInterval;
	long mtpOmReceivedOctetsOpcSio;
	long mtpOmReceivedOctetsOpcSioRowStatus;
};
struct mtpOmSpDataTable_data {
	uint mtpOmSpDataTable_request;
	long mtpOmUserPart;
	long mtpOmCongestionLevel;
	long mtpOmSpDiscardedMSUs;
	long mtpOmSpTransmittedUPUnavailable;
	long mtpOmSpReceivedUPUnavailable;
	long mtpOmSpReceivedTFC;
	long mtpOmSpReceivedTFCLevel0;
	long mtpOmSpReceivedTFCLevel1;
	long mtpOmSpReceivedTFCLevel2;
	long mtpOmSpReceivedTFCLevel3;
};
struct mtpOmTransmittedOctetsDPCTable_data {
	uint mtpOmTransmittedOctetsDPCTable_request;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;

	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	long mtpOmTransmittedOctetsDPCRowStatus;
};
struct mtpOmTransmittedOctetsDPCTable_data {
	uint mtpOmTransmittedOctetsDPCTable_request;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;

	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	long mtpOmTransmittedOctetsDPCRowStatus;
};
struct mtpOmTransmittedOctetsDPCTable_data {
	uint mtpOmTransmittedOctetsDPCTable_request;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;

	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	long mtpOmTransmittedOctetsDPCRowStatus;
};
struct mtpOmTransmittedOctetsDpcSioTable_data {
	uint mtpOmTransmittedOctetsDpcSioTable_request;
	char *mtpOmDpc;
	size_t mtpOmDpcLen;
	char *mtpOmSio;
	size_t mtpOmSioLen;
	long mtpOmTransmittedOctetsDpcSio;
	long mtpOmTransmittedOctetsDpcSioRowStatus;
};
struct mtpOmSignRsInformationTable_data {
	uint mtpOmSignRsInformationTable_request;
	long mtpOmRouteSetUnavailable;
	long mtpOmRouteSetUnavailableDuration;
};
struct mtpOmSlsDurationTable_data {
	uint mtpOmSlsDurationTable_request;
	long mtpOmSlsUnavailable;
};
struct mtpOmAll5And30MinSlDurationTable_data {
	uint mtpOmAll5And30MinSlDurationTable_request;
	long mtpOmAll5And30MinSlDurationInterval;
	long mtpOmLocalMgntInhibit;
	long mtpOmLocalMgntUninhibit;
	long mtpOmLocalBusy;
	long mtpOmAll5And30MinSlDurationRowStatus;
};
struct mtpOmOblSlDurationTable_data {
	uint mtpOmOblSlDurationTable_request;
	long mtpOmSlUnavailabilityDuration;
	long mtpOmSlInServiceDuration;
};
struct mtpOmAll30MinSlDurationTable_data {
	uint mtpOmAll30MinSlDurationTable_request;
	long mtpOmAll30MinSlDurationInterval;
	long mtpOmSlLocalInhibition;
	long mtpOmSlRemoteInhibition;
	long mtpOmSlFailed;
	long mtpOmSlRemoteProcOutage;
	long mtpOmAll30MinSlDurationRowStatus;
};
struct mtpOmOblSlUtilizationTable_data {
	uint mtpOmOblSlUtilizationTable_request;
	long mtpOmSlSignUnitsReceived;
	long mtpOmSlTransmittedOctetsSIFSIO;
	long mtpOmSlReceivedOctetsSIFSIO;
	long mtpOmSlDiscardedMSUs;
};
struct mtpOmAllSlUtilizationTable_data {
	uint mtpOmAllSlUtilizationTable_request;
	long mtpOmSlAlignment;
	long mtpOmSlNegAckReceived;
	long mtpOmSlRetransmittedOctets;
	long mtpOmSlTransmittedMSUs;
	long mtpOmSlReceivedMSUs;
	long mtpOmAllSlUtilizationRowStatus;
};
struct mtpOmSlCongestionTable_data {
	uint mtpOmSlCongestionTable_request;
	long mtpOmCongestionLevel;
	long mtpOmSlCongestionFirst;
	long mtpOmSlCongestionInterval;
	long mtpOmSlCongestionStarts;
	long mtpOmSlCongestionStops;
	long mtpOmSlCongestionEventsMSULoss;
	long mtpOmSlCongestionRowStatus;
};

/* storage declarations */
extern struct mtpOmMIB_data *mtpOmMIBStorage;
extern struct header_complex_index *mtpOmHandledMSUsOpcDpcSioTableStorage;
extern struct header_complex_index *mtpOmHandledOctetsOpcDpcSioTableStorage;
extern struct header_complex_index *mtpOmHandledOctetsSIOTableStorage;
extern struct header_complex_index *mtpOmOblSpUtilizationTableStorage;
extern struct header_complex_index *mtpOmAllSpUtilizationTableStorage;
extern struct header_complex_index *mtpOmReceivedOctetsOPCTableStorage;
extern struct header_complex_index *mtpOmReceivedOctetsOpcSioTableStorage;
extern struct header_complex_index *mtpOmSpDataTableStorage;
extern struct header_complex_index *mtpOmTransmittedOctetsDPCTableStorage;
extern struct header_complex_index *mtpOmTransmittedOctetsDPCTableStorage;
extern struct header_complex_index *mtpOmTransmittedOctetsDPCTableStorage;
extern struct header_complex_index *mtpOmTransmittedOctetsDpcSioTableStorage;
extern struct header_complex_index *mtpOmSignRsInformationTableStorage;
extern struct header_complex_index *mtpOmSlsDurationTableStorage;
extern struct header_complex_index *mtpOmAll5And30MinSlDurationTableStorage;
extern struct header_complex_index *mtpOmOblSlDurationTableStorage;
extern struct header_complex_index *mtpOmAll30MinSlDurationTableStorage;
extern struct header_complex_index *mtpOmOblSlUtilizationTableStorage;
extern struct header_complex_index *mtpOmAllSlUtilizationTableStorage;
extern struct header_complex_index *mtpOmSlCongestionTableStorage;

/* enum definitions from the covered mib sections */

#define MTPOMUSERPART_SNMM                       0
#define MTPOMUSERPART_SNTM                       1
#define MTPOMUSERPART_SNSM                       2
#define MTPOMUSERPART_SCCP                       3
#define MTPOMUSERPART_TUP                        4
#define MTPOMUSERPART_ISUP                       5
#define MTPOMUSERPART_DUP1                       6
#define MTPOMUSERPART_DUP2                       7
#define MTPOMUSERPART_MTUP                       8
#define MTPOMUSERPART_BISUP                      9
#define MTPOMUSERPART_SIUP                       10
#define MTPOMUSERPART_USER11                     11
#define MTPOMUSERPART_USER12                     12
#define MTPOMUSERPART_USER13                     13
#define MTPOMUSERPART_USER14                     14
#define MTPOMUSERPART_USER15                     15

#define MTPOMCONGESTIONLEVEL_NONE                0
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL1    1
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL2    2
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL3    3

#define MTPOMCONGESTIONLEVEL_NONE                0
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL1    1
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL2    2
#define MTPOMCONGESTIONLEVEL_CONGESTIONLEVEL3    3

#define MTPOMSLCONGESTIONFIRST_TRUE              1
#define MTPOMSLCONGESTIONFIRST_FALSE             2

/* function prototypes */
void init_mtpOmMIB(void);
void deinit_mtpOmMIB(void);
int term_mtpOmMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_mtpOmMIB;
void parse_mtpOmMIB(const char *, char *);
SNMPCallback store_mtpOmMIB;
void refresh_mtpOmMIB(void);
FindVarMethod var_mtpOmHandledMSUsOpcDpcSioTable;
void parse_mtpOmHandledMSUsOpcDpcSioTable(const char *, char *);
SNMPCallback store_mtpOmHandledMSUsOpcDpcSioTable;
void refresh_mtpOmHandledMSUsOpcDpcSioTable(void);
FindVarMethod var_mtpOmHandledOctetsOpcDpcSioTable;
void parse_mtpOmHandledOctetsOpcDpcSioTable(const char *, char *);
SNMPCallback store_mtpOmHandledOctetsOpcDpcSioTable;
void refresh_mtpOmHandledOctetsOpcDpcSioTable(void);
FindVarMethod var_mtpOmHandledOctetsSIOTable;
void parse_mtpOmHandledOctetsSIOTable(const char *, char *);
SNMPCallback store_mtpOmHandledOctetsSIOTable;
void refresh_mtpOmHandledOctetsSIOTable(void);
FindVarMethod var_mtpOmOblSpUtilizationTable;
void parse_mtpOmOblSpUtilizationTable(const char *, char *);
SNMPCallback store_mtpOmOblSpUtilizationTable;
void refresh_mtpOmOblSpUtilizationTable(void);
FindVarMethod var_mtpOmAllSpUtilizationTable;
void parse_mtpOmAllSpUtilizationTable(const char *, char *);
SNMPCallback store_mtpOmAllSpUtilizationTable;
void refresh_mtpOmAllSpUtilizationTable(void);
FindVarMethod var_mtpOmReceivedOctetsOPCTable;
void parse_mtpOmReceivedOctetsOPCTable(const char *, char *);
SNMPCallback store_mtpOmReceivedOctetsOPCTable;
void refresh_mtpOmReceivedOctetsOPCTable(void);
FindVarMethod var_mtpOmReceivedOctetsOpcSioTable;
void parse_mtpOmReceivedOctetsOpcSioTable(const char *, char *);
SNMPCallback store_mtpOmReceivedOctetsOpcSioTable;
void refresh_mtpOmReceivedOctetsOpcSioTable(void);
FindVarMethod var_mtpOmSpDataTable;
void parse_mtpOmSpDataTable(const char *, char *);
SNMPCallback store_mtpOmSpDataTable;
void refresh_mtpOmSpDataTable(void);
FindVarMethod var_mtpOmTransmittedOctetsDPCTable;
void parse_mtpOmTransmittedOctetsDPCTable(const char *, char *);
SNMPCallback store_mtpOmTransmittedOctetsDPCTable;
void refresh_mtpOmTransmittedOctetsDPCTable(void);
FindVarMethod var_mtpOmTransmittedOctetsDPCTable;
void parse_mtpOmTransmittedOctetsDPCTable(const char *, char *);
SNMPCallback store_mtpOmTransmittedOctetsDPCTable;
void refresh_mtpOmTransmittedOctetsDPCTable(void);
FindVarMethod var_mtpOmTransmittedOctetsDPCTable;
void parse_mtpOmTransmittedOctetsDPCTable(const char *, char *);
SNMPCallback store_mtpOmTransmittedOctetsDPCTable;
void refresh_mtpOmTransmittedOctetsDPCTable(void);
FindVarMethod var_mtpOmTransmittedOctetsDpcSioTable;
void parse_mtpOmTransmittedOctetsDpcSioTable(const char *, char *);
SNMPCallback store_mtpOmTransmittedOctetsDpcSioTable;
void refresh_mtpOmTransmittedOctetsDpcSioTable(void);
FindVarMethod var_mtpOmSignRsInformationTable;
void parse_mtpOmSignRsInformationTable(const char *, char *);
SNMPCallback store_mtpOmSignRsInformationTable;
void refresh_mtpOmSignRsInformationTable(void);
FindVarMethod var_mtpOmSlsDurationTable;
void parse_mtpOmSlsDurationTable(const char *, char *);
SNMPCallback store_mtpOmSlsDurationTable;
void refresh_mtpOmSlsDurationTable(void);
FindVarMethod var_mtpOmAll5And30MinSlDurationTable;
void parse_mtpOmAll5And30MinSlDurationTable(const char *, char *);
SNMPCallback store_mtpOmAll5And30MinSlDurationTable;
void refresh_mtpOmAll5And30MinSlDurationTable(void);
FindVarMethod var_mtpOmOblSlDurationTable;
void parse_mtpOmOblSlDurationTable(const char *, char *);
SNMPCallback store_mtpOmOblSlDurationTable;
void refresh_mtpOmOblSlDurationTable(void);
FindVarMethod var_mtpOmAll30MinSlDurationTable;
void parse_mtpOmAll30MinSlDurationTable(const char *, char *);
SNMPCallback store_mtpOmAll30MinSlDurationTable;
void refresh_mtpOmAll30MinSlDurationTable(void);
FindVarMethod var_mtpOmOblSlUtilizationTable;
void parse_mtpOmOblSlUtilizationTable(const char *, char *);
SNMPCallback store_mtpOmOblSlUtilizationTable;
void refresh_mtpOmOblSlUtilizationTable(void);
FindVarMethod var_mtpOmAllSlUtilizationTable;
void parse_mtpOmAllSlUtilizationTable(const char *, char *);
SNMPCallback store_mtpOmAllSlUtilizationTable;
void refresh_mtpOmAllSlUtilizationTable(void);
FindVarMethod var_mtpOmSlCongestionTable;
void parse_mtpOmSlCongestionTable(const char *, char *);
SNMPCallback store_mtpOmSlCongestionTable;
void refresh_mtpOmSlCongestionTable(void);

WriteMethod write_mtpOmHandledMSUsOpcDpcSioRowStatus;
WriteMethod write_mtpOmHandledOctetsOpcDpcSioInterval;
WriteMethod write_mtpOmHandledOctetsOpcDpcSioRowStatus;
WriteMethod write_mtpOmAllSpUtilizationRowStatus;
WriteMethod write_mtpOmReceivedOctetsOPCInterval;
WriteMethod write_mtpOmReceivedOctetsOPCRowStatus;
WriteMethod write_mtpOmReceivedOctetsOpcSioInterval;
WriteMethod write_mtpOmReceivedOctetsOpcSioRowStatus;
WriteMethod write_mtpOmTransmittedOctetsDpcSioRowStatus;
WriteMethod write_mtpOmAll5And30MinSlDurationInterval;
WriteMethod write_mtpOmAll5And30MinSlDurationRowStatus;
WriteMethod write_mtpOmAll30MinSlDurationInterval;
WriteMethod write_mtpOmAll30MinSlDurationRowStatus;
WriteMethod write_mtpOmAllSlUtilizationRowStatus;
WriteMethod write_mtpOmSlCongestionFirst;
WriteMethod write_mtpOmSlCongestionInterval;
WriteMethod write_mtpOmSlCongestionRowStatus;

#endif				/* __LOCAL_MTPOMMIB_H__ */
