% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
% =========================================================================
%
% @(#) $Id: sdli.texi,v 0.9.2.3 2007/08/14 12:17:01 brian Exp $
%
% =========================================================================
%
% Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2007/08/14 12:17:01 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
@c %**start of header
@setfilename sdli.info
@include texi/args.texi
@set MANUAL_TITLE Signalling Data Link Interface (SDLI)
@set MANUAL_TYPE Application Programming Interface
@settitle @value{MANUAL_TITLE}
@c %**end of header

@dircategory OpenSS7
@direntry
* SDLI: (sdli).			Signalling Data Link Interface
@end direntry

@include texi/args.texi
@set MANUAL_TITLE Signalling Data Link Interface (SDLI)
@set MANUAL_TYPE Application Programming Interface

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file documents the OpenSS7 @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}
published by @uref{http://www.openss7.com/,OpenSS7 Corporation}.

Copyright @copyright{} 2001-2007  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@ignore
Permission is granted to process this file through Tex and print the results, provided the printed
document carries copying permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
OpenSS7 Corporation disclaims all warranties with regard to this documentation including all implied
warranties of merchantability, fitness for a particular purpose, non-infringement, or title; that
the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.

OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Signalling Data Link Interface (SDLI)
@set MANUAL_TYPE Application Programming Interface

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2007  OpenSS7 Corporation
@subtitle All Rights Reserved.
@sp 4
@quotation
@subheading Abstract
This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the
signalling data link interface to these components as well as providing a basis for signalling data
link control for other signalling data link protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2007  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

@noindent
All Rights Reserved.

@subsubheading Published by:
@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@ignore
@noindent
This software and related documentation is protected by copyright and distributed under licenses
restricting its use, copying, distribution and decompilation.  No part of this software or related
documentation may be reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect
this information and keep it confidential, and will not disclose the information contained in this
document without the written permission of its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ignore

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@subsubheading Notice:

@noindent
@b{OpenSS7 Corporation disclaims all warranties with regard to this documentation including all
implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title;
that the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.}

@sp 1

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of protocol states
@defcodeindex st
@c Define an index of manual pages
@defcodeindex pe
@c Define an index of protocol errors
@defindex mp

@c @syncodeindex pr cp
@c @syncodeindex pv cp
@c @syncodeindex pe cp
@c @syncodeindex tp cp
@c @syncodeindex vr cp

@include texi/macros.texi
@include texi/versions.texi

@macro prim {name}
@prindex \name\
@code{\name\}
@end macro

@macro pval {name}
@pvindex \name\
@code{\name\}
@end macro

@macro perr {name}
@peindex \name\
@code{\name\}
@end macro

@macro psta {name}
@stindex \name\
@code{\name\}
@end macro

@macro parm {name}
@vrindex \name\
@code{\name\}
@end macro

@ifnottex
@node Top
@top Signalling Data Link Interface
@end ifnottex

@menu
* Preface::
* Introduction::
* The Signalling Data Link Layer::
* SDLI Services Definition::
* SDLI Primitives::
* Diagnostics Requirements::
@c * Addendum for ITU-T Q.703 Conformance::
@c * Addendum for ANSI T1.111.3 Conformance::
@c * Addendum for ETSI Conformance::
@c * Mapping of SDLI Primitives to ITU-T Q.703::
@c * Mapping of SDLI Primitives to ANSI T1.111.3::
@c * State/Event Tables::
@c * Primitive Precedence Tables::
* LMI Header File Listing::
* SDLI Header File Listing::
* License::
* Glossary::
* Acronyms::
* References::
* Indices::
@end menu

@node Preface
@unnumbered Preface

@section Security Warning

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of @cite{OpenSS7 Corporation} not be used
in advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  @cite{OpenSS7 Corporation} makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with regard to this
documentation including all implied warranties of merchantability, fitness for a particular purpose,
non-infringement, or title; that the contents of the document are suitable for any purpose, or that
the implementation of such contents will not infringe on any third party patents, copyrights,
trademarks or other rights.  In no event shall @cite{OpenSS7 Corporation} be liable for any direct,
indirect, special or consequential damages or any damages whatsoever resulting from loss of use,
data or profits, whether in an action of contract, negligence or other tortious action, arising out
of or in connection with any use of this document or the performance or implementation of the
contents thereof.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} is making this documentation available as a
reference point for the industry.  While @cite{OpenSS7 Corporation} believes that these interfaces
are well defined in this release of the document, minor changes may be made prior to products
conforming to the interfaces being made available.

@section Abstract

This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.

@noindent
This document specifies a @value{MANUAL_TITLE} Specification in support of the OpenSS7 Signalling
Data Link (SDL) protocol stacks.  It provides abstraction of the signalling data link interface to
these components as well as providing a basis for signalling data link control for other data link
control protocols.

@section Purpose

The purpose of this document is to provide technical documentation of the @value{MANUAL_TITLE}.
This document is intended to be included with the OpenSS7 @cite{STREAMS}
@cpindex STREAMS
software package released by @cite{OpenSS7 Corporation}.  It is intended to assist software
developers, maintainers and users of the @value{MANUAL_TITLE} with understanding the software
architecture and technical interfaces that are made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of information concerning the
@value{MANUAL_TITLE}.  This document is intended to provide information for writers of OpenSS7
@value{MANUAL_TITLE} applications as well as writers of OpenSS7 @value{MANUAL_TITLE} Users.

@section Audience

The audience for this document is software developers, maintainers and users and integrators of the
@value{MANUAL_TITLE}.  The target audience is developers and users of the OpenSS7 SS7 stack.

@section Disclaimer

Although the author has attempted to ensure that the information in this document is complete and
correct, neither the Author nor OpenSS7 Corporation will take any responsibility in it.

@section Revision History

Take care that you are working with a current version of this documentation: you will not be
notified of updates.  To ensure that you are working with a current version, check the
@uref{http://www.openss7.org/,OpenSS7 Project} website for a current version.

Only the texinfo or roff source is controlled.  A printed (or postscript) version of this document
is an @strong{UNCONTROLLED VERSION}.

@smallexample

$Log: sdli.texi,v $
Revision 0.9.2.3  2007/08/14 12:17:01  brian
- GPLv3 header updates

Revision 0.9.2.2  2007/07/09 09:23:04  brian
- working up SDLI specification

Revision 0.9.2.1  2007/07/04 08:24:57  brian
- added new files

@end smallexample

@node Introduction
@chapter Introduction

This document specifies a @cite{STREAMS}-based
@cpindex STREAMS
kernel-level instantiation of the ITU-T @value{MANUAL_TITLE} definition.  The @value{MANUAL_TITLE}
enables the user of a a signalling data link service to access and use any of a variety of
conforming signalling data link providers without specific knowledge of the provider's protocol.
The service interface is designed to support any network signalling data link protocol and user
signalling data link protocol.  This interface only specifies access to signalling data link service
providers, and does not address issues concerning signalling data link management, protocol
performance, and performance analysis tools.

This specification assumes that the reader is familiar with ITU-T state machines and signalling data
link interfaces (e.g.  Q.703, Q.2210), and @cite{STREAMS}.
@cpindex STREAMS

@section Related Documentation

@itemize ---
@item @strong{ITU-T Recommendation Q.703 (White Book)}
@item @strong{ITU-T Recommendation Q.2210 (White Book)}
@item @strong{ANSI T1.111.3/2002}
@item @strong{System V Interface Definition, Issue 2 - Volume 3}
@end itemize

@subsection Role

This document specifies an interface that supports the services provided by the @dfn{Signalling
System No. 7 (SS7)} for ITU-T, ANSI and ETSI applications as described in ITU-T Recommendation
Q.703, ITU-T Recommendation Q.2210, ANSI T1.111.3, ETSI ETS 300 008-1.  These specifications are
targeted for use by developers and testers of protocol modules that require signalling data link
service.

@section Definitions, Acronyms, Abbreviations

@table @dfn
@item LM
Local Management.
@item LMS
Local Management Service.
@item LMS User
A user of Local Management Services.
@item LMS Provider
A provider of Local Management Services.
@item Originating SDL User
A SDL-User that initiates a Signalling Data Link.
@item Destination SDL User
A SDL-User with whom an originating SDL user wishes to establish a Signalling Data Link.
@item ISO
International Organization for Standardization
@item SDL User
Kernel level protocol or user level application that is accessing the services of the Signalling
Data Link sub-layer.
@item SDL Provider
Signalling Data Link sub-layer entity/entities that provide/s the services of the Signalling Data
Link interface.
@item SDLI
Signalling Data Link Interface
@item TIDU
Signalling Data Link Interface Data Unit
@item TSDU
Signalling Data Link Service Data Unit
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
@cpindex STREAMS
A communication services development facility first available with UNIX System V Release 3.
@end table

@node The Signalling Data Link Layer
@chapter The Signalling Data Link Layer

@menu
* Model of the SDLI::
* SDLI Services::
* Purpose of the SDLI::
@end menu

The Signalling Data Link Layer provides the means to manage the association of SDL-Users into
connections.  It is responsible for the routing and management of data to and from signalling data
link connections between SDL-user entities.

@node Model of the SDLI
@section Model of the SDLI

The SDLI defines the services provided by the signalling data link layer to the signalling data link
user at the boundary between the signalling data link provider and the signalling data link user
entity.  The interface consists of a set of primitives defined as @cite{STREAMS}
@cpindex STREAMS
messages that provide access to the signalling data link layer services, and are transferred between
the SDLS user entity and the SDLS provider.  These primitives are of two types; ones that originate
from the SDLS user, and other that originate from the SDLS provider.  The primitives that originate
from the SDLS user make requests to the SDLS provider, or respond to an indication of an event of
the SDLS provider.  The primitives that originate from the SDLS provider are either confirmations of
a request or are indications to the CCS user that an event has occurred.  @figref{1} shows the model
of the SDLI.

@figuresized{sdli01,1,Model of the SDLI,3.0in}

The SDLI allows the SDLS provider to be configured with any signalling data link layer user (such as
a signalling data terminal application) that also conforms to the SDLI.  A signalling data link
layer user can also be a user program that conforms to the SDLI and accesses the SDLS provider via
@command{@b{putmsg}(2s)} and @command{@b{getmsg}(2s)} system calls.  The typical configuration,
however, is to place a signalling data terminal module above the signalling data link layer.

@node SDLI Services
@section SDLI Services

The features of the SDLI are defined in terms of the services provided by the SDLS provider, and the
individual primitives that may flow between the SDLS user and the SDLS provider.

The SDLI Services are broken into two groups: local management services and protocol services.
Local management services are responsible for the local management of streams, assignment of streams
to physical points of attachment, enabling and disabling of streams, management of options
associated with a stream, and general acknowledgement and event reporting for the stream.  Protocol
services consist of connecting a stream to a medium, exchanging bits with the medium, and
disconnecting the stream from the medium.

@subsection Local Management

Local management services are listed in @tabref{1}.

@tabfig{lmit01,1,Local Management Services}

The local management services interface is described in @ref{Local Management Services}, and the
primitives are detailed in @ref{Local Management Service Primitives}.  The local management services
interface is defined by the @file{ss7/lmi.h} header file (@pxref{LMI Header File Listing}).

@subsection Protocol

Protocol services are listed in @tabref{2}.

@tabfig{sdlit02,2,Protocol Services}

The protocol services interface is described in @ref{Protocol Services}, and the primitives are
detailed in @ref{Protocol Service Primitives}.  The protocol services interface is defined by the
@file{ss7/sdli.h} header file (@pxref{SDLI Header File Listing}).

@node Purpose of the SDLI
@section Purpose of the SDLI

The SDLI is typically implemented as a device driver controlling a TDM (Time Division Multiplexing)
device that provides access to channels.  The purpose behind exposing this low level interface is
that almost all communications channel devices can be placed into a @emph{raw} mode, where a bit
stream can be exchanged between the driver and the medium.  The SDLI provides a interface that, once
implemented as a driver for a new device, can provide complete and verified SS7 signalling link
capabilities by pushing generic SDT (Signalling Data Terminal) and SL (Signalling Link) modules over
an open device stream.

This allows SDT and SL modules to be verified independently for correct operation and then simply
used for all manner of new device drivers that can implement the SDLI interface.

@node SDLI Services Definition
@chapter SDLI Services Definition

@menu
* Local Management Services::
* Protocol Services::
@end menu

@node Local Management Services
@section Local Management Services

@menu
* Acknowledgement Service::
* Information Reporting Service::
* Physical Point of Attachment Service::
* Initialization Service::
* Options Management Service::
* Error Reporting Service::
* Statistics Reporting Service::
* Event Reporting Service::
@end menu

@node Acknowledgement Service
@subsection Acknowledgement Service

The acknowledgement service provides the LMS user with the ability to receive positive and negative
acknowledgements regarding the successful or unsuccessful completion of services.

@itemize @bullet

@item @b{@prim{LMI_@-OK_@-ACK}}:
The @prim{LMI_@-OK_@-ACK} message is used by the LMS provider to indicate successful receipt and
completion of a service primitive request that requires positive acknowledgement.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
The @prim{LMI_@-ERROR_@-ACK} message is used by the LMS provider to indicate successful receipt and
failure to complete a service primitive request that requires negative acknowledgement.

@end itemize

A successful invocation of the acknowledgement service is illustrated in @figref{15}.

@figuresized{lmi15,15,Message Flow: Successful Acknowledgement Service,4.0in}

As illustrated in @figref{15}, the
service primitives for which a positive acknowledgement may be returned are the
@prim{LMI_@-ATTACH_@-REQ} and @prim{LMI_@-DETACH_@-REQ}.

An unsuccessful invocation of the acknowledgement service is illustrated in @figref{16}.

@figuresized{lmi16,16,Message Flow: Unsuccessful Acknowledgement Service,4.0in}

As illustrated in @figref{16}, the
service primitives for which a negative acknowledgement may be returned are the
@prim{LMI_@-INFO_@-REQ}, @prim{LMI_@-ATTACH_@-REQ}, @prim{LMI_@-DETACH_@-REQ},
@prim{LMI_@-ENABLE_@-REQ}, @prim{LMI_@-DISABLE_@-REQ} and @prim{LMI_@-OPTMGMT_@-REQ} messages.

@node Information Reporting Service
@subsection Information Reporting Service

The information reporting service provides the LMS user with the ability to elicit information from
the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-INFO_@-REQ}}:
The @prim{LMI_@-INFO_@-REQ} message is used by the LMS user to request information about the LMS
provider.

@item @b{@prim{LMI_@-INFO_@-ACK}}:
The @prim{LMI_@-INFO_@-ACK} message is issued by the LMS provider to provide requested information about
the LMS provider.

@end itemize

A successful invocation of the information reporting service is illustrated in @figref{2}.

@figuresized{lmi02,2,Message Flow: Successful Information Reporting Service,4.0in}

@node Physical Point of Attachment Service
@subsection Physical Point of Attachment Service

The local management interface provides the LMS user with the ability to associate a stream to a
physical point of appearance (@dfn{PPA}) or to disassociate a stream from a PPA.  The local
management interface provides for two styles of LMS provider:

@subsubheading Style 1 LMS Provider

A @dfn{Style 1} LMS provider is a provider that associates a stream with a PPA at the time of the
first @manref{open(2)} call for the device, and disassociates a stream from a PPA at the time of the
last @manref{close(2)} call for the device.

Physical points of attachment (PPA) are assigned to major and minor device number combinations.
When the major and minor device number combination is opened, the opened stream is automatically
associated with the PPA for the major and minor device number combination.  The last close of the
device disassociates the PPA from the stream.

Freshly opened @dfn{Style 1} LMS provider streams start life in the @psta{LMI_@-DISABLED} state.

This approach is suitable for LMS providers implemented as real or pseudo-device drivers and is
applicable when the number of minor devices is small and static.

@subsubheading Style 2 LMS Provider

A @dfn{Style 2} LMS provider is a provider that associates a stream with a PPA at the time that the
LMS user issues the @prim{LMI_@-ATTACH_@-REQ} message.  Freshly opened streams are not associated with any
PPA.  The @dfn{Style 2} LMS provider stream is disassociated from a PPA when the stream is closed
or when the LMS user issues the @prim{LMI_@-DETACH_@-REQ} message.

Freshly opened @dfn{Style 2} LMS provider streams start life in the @psta{LMI_@-UNATTACHED} state.

This approach is suitable for LMS providers implemented as clone real or pseudo-device drivers  and
is applicable when the number of minor devices is large or dynamic.

@menu
* PPA Attachment Service::
* PPA Detachment Service::
@end menu

@node PPA Attachment Service
@subsubsection PPA Attachment Service

The PPA attachment service provides the LMS user with the ability to attach a @dfn{Style 2} LMS
provider stream to a physical point of appearance (PPA).

@itemize @bullet

@item @b{@prim{LMI_@-ATTACH_@-REQ}}:
The @prim{LMI_@-ATTACH_@-REQ} message is issued by the LMS user to request that a @dfn{Style 2} LMS
provider stream be attached to a specified physical point of appearance (PPA).

@item @b{@prim{LMI_@-OK_@-ACK}}:
Upon successful receipt and processing of the @prim{LMI_@-ATTACH_@-REQ} message, the LMS provider
acknowledges the success of the service completion with a @prim{LMI_@-OK_@-ACK} message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt but failure to process the @prim{LMI_@-ATTACH_@-REQ} message, the LMS provider
acknowledges the failure of the service completion with a @prim{LMI_@-ERROR_@-ACK} message.

@end itemize

A successful invocation of the attachment service is illustrated in @figref{3}.

@figuresized{lmi03,3,Message Flow: Successful Attachment Service,4.0in}


@node PPA Detachment Service
@subsubsection PPA Detachment Service

The PPA detachment service provides the LMS user with the ability to detach a @dfn{Style 2} LMS
provider stream from a physical point of attachment (PPA).

@itemize @bullet

@item @b{@prim{LMI_@-DETACH_@-REQ}}:
The @prim{LMI_@-DETACH_@-REQ} message is issued by the LMS user to request that a @dfn{Style 2} LMS
provider stream be detached from the attached physical point of appearance (PPA).

@item @b{@prim{LMI_@-OK_@-ACK}}:
Upon successful receipt and processing of the @prim{LMI_@-DETACH_@-REQ} message, the LMS provider
acknowledges the success of the service completion with a @prim{LMI_@-OK_@-ACK} message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt but failure to process the @prim{LMI_@-DETACH_@-REQ} message, the LMS provider
acknowledges the failure of the service completion with a @prim{LMI_@-ERROR_@-ACK} message.

@end itemize

A successful invocation of the detachment service is illustrated in @figref{4}.

@figuresized{lmi04,4,Message Flow: Successful Detachment Service,4.0in}

@node Initialization Service
@subsection Initialization Service

The initialization service provides the LMS user with the abilty to enable and disable the stream
for the associated PPA.

@menu
* Interface Enable Service::
* Interface Disable Service::
@end menu

@node Interface Enable Service
@subsubsection Interface Enable Service

The interface enable service provides the LMS user with the ability to enable an LMS provider
stream that is associated with a PPA.  Enabling the interface permits the LMS user to exchange
protocol service interface messages with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-ENABLE_@-REQ}}:
The @prim{LMI_@-ENABLE_@-REQ} message is issued by the LMS user to request that the protocol service
interface be enabled.

@item @b{@prim{LMI_@-ENABLE_@-CON}}:
Upon successful enabling of the protocol service interface, the LMS provider acknowledges
successful completion of the service by issuing a @prim{LMI_@-ENABLE_@-CON} message to the LMS user.

@item @b{@prim{LMI_@-ERRORK_@-ACK}}:
Upon unsuccessful enabling of the protocol service interface, the LMS provider acknowledges the
failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK} message to the LMS user.

@end itemize

A successful invocation of the enable service is illustrated in @figref{5}.

@figuresized{lmi05,5,Message Flow: Successful Enable Service,4.0in}

@node Interface Disable Service
@subsubsection Interface Disable Service

The interface disable service provides the LMS user with the ability to disable an LMS provider
stream that is associated with a PPA.  Disabling the interface withdraws the LMS user's ability to
exchange protocol service interface messages with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-DISABLE_@-REQ}}:
The @prim{LMI_@-DISABLE_@-REQ} message is issued by the LMS user to request that the protocol service
interface be disabled.

@item @b{@prim{LMI_@-DISABLE_@-CON}}:
Upon successful disabling of the protocol service interface, the LMS provider acknowledges
successful completion of the service by issuing a @prim{LMI_@-DISABLE_@-CON} message to the LMS user.

@item @b{@prim{LMI_@-ERRORK_@-ACK}}:
Upon unsuccessful disabling of the protocol service interface, the LMS provider acknowledges the
failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK} message to the LMS user.

@end itemize

A successful invocation of the disable service is illustrated in @figref{6}.

@figuresized{lmi06,6,Message Flow: Successful Disable Service,4.0in}

@node Options Management Service
@subsection Options Management Service

The options management service provides the LMS user with the ability to control and affect various
generic and provider-specific options associated with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-OPTMGMT_@-REQ}}:
The LMS user issues a @prim{LMI_@-OPTMGMT_@-REQ} message when it wishes to interrogate or affect the
setting of various generic or provider-specific options associated with the LMS provider for the
stream upon which the message is issued.

@item @b{@prim{LMI_@-OPTMGMT_@-ACK}}:
Upon successful receipt of the @prim{LMI_@-OPTMGMT_@-REQ} message, and successful options processing, the
LMS provider acknowledges the successful completion of the service with an @prim{LMI_@-OPTMGMT_@-ACK}
message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt of the @prim{LMI_@-OPTMGMT_@-REQ} message, and unsuccessful options processing, the
LMS provider acknowledges the failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK}
message to the LMS user.

@end itemize

A successful invocation of the options management service is illustrated in @figref{7}.

@figuresized{lmi07,7,Message Flow: Successful Options Management Service,4.0in}

@node Error Reporting Service
@subsection Error Reporting Service

The error reporting service provides the LMS provider with the ability to indicate asynchronous
errors to the LMS user.

@itemize @bullet

@item @b{@prim{LMI_@-ERROR_@-IND}}:
The LMS provider issues the @prim{LMI_@-ERROR_@-IND} message to the LMS user when it needs to indicate an
asynchronous error (such as the unusability of the communications medium).

@end itemize

A successful invocation of the error reporting service is illustrated in @figref{8}.

@figuresized{lmi08,8,Message Flow: Successful Error Reporting Service,4.0in}

@node Statistics Reporting Service
@subsection Statistics Reporting Service

@itemize @bullet

@item @b{@prim{LMI_@-STATS_@-IND}}:

@end itemize

A successful invocation of the statistics reporting service is illustrated in @figref{9}.

@figuresized{lmi09,9,Message Flow: Successful Statistics Reporting Service,4.0in}

@node Event Reporting Service
@subsection Event Reporting Service

The event reporting service provides the LMS provider with the ability to indicate specific
asynchronous management events to the LMS user.

@itemize @bullet

@item @b{@prim{LMI_@-EVENT_@-IND}}:
The LMS provider issues the @prim{LMI_@-EVENT_@-IND} message to the LMS user when it wishes to indicate
an asynchronous (management) event to the LMS user.

@end itemize

A successful invocation of the event reporting service is illustrated in @figref{10}.

@figuresized{lmi10,10,Message Flow: Successful Event Reporting Service,4.0in}

@node Protocol Services
@section Protocol Services

Protocol services are specific to the Signalling Data Link interface.  These services consist of
connection services that permit the transmit and receive directions to be connected to or
disconnected from the medium, and data transfer services that permit the exchange of bits between SDLS
users.

The service primitives that implement the protocol services are described in detail in @ref{Protocol
Service Primitives}.

@menu
* Connection Service::
* Data Transfer Service::
* Disconnection Service::
@end menu

@node Connection Service
@subsection Connection Service

The connection service provides the ability for the SDLS user to connect to the medium for the
purpose of transmitting bits, receiving bits, or both.  In SS7, this is a Level 1 function, possibly
the responsibility of multiplex or digital cross-connect switch.

@itemize @bullet

@item @b{@prim{SDL_@-CONNECT_@-REQ}}:
The @prim{SDL_@-CONNECT_@-REQ} message is used by the SDLS user to request that the stream be connected to
the medium.  Connection to the medium might require some switching or other mechanism to prepare the
stream for data transmission and receiption.  Connections can be formed for the receive direction or
the transmit direction independently.

@end itemize

A successful invocation of the connection service is illustrated in @figref{11}.

@figuresized{sdli11,11,Message Flow: Successful Connection Service,4.0in}

@node Data Transfer Service
@subsection Data Transfer Service

The data transfer service provides the SDLS user with the ability to request that bits be
transmitted on the medium, and the SDLS provider with the ability to indicate bits that have been
received from the medium.

@itemize @bullet

@item @b{@prim{SDL_@-BITS_@-FOR_@-TRANSMISSION_@-REQ}}:
The @prim{SDL_@-BITS_@-FOR_@-TRANSMISSION_@-REQ} message is used by the SDLS user to place raw bits onto
the medium.  The stream must have first been successfully activated in the transmit direction using
the @prim{SDL_@-CONNECT_@-REQ} message.

@item @b{@prim{SDL_@-RECEIVED_@-BITS_@-IND}}:
The @prim{SDL_@-RECEIVED_@-BITS_@-IND} message is issued by the SDLS provider when activated for the
receive direction with the @prim{SDL_@-CONNECT_@-REQ} message, to indicate bits received on the medium.

@end itemize

A successful invocation of the data transfer service is illustrated in @figref{12}.

@figuresized{sdli12,12,Message Flow: Successful Data Transfer Service,4.0in}

@node Disconnection Service
@subsection Disconnection Service

The disconnection service provides the ability for the SDLS user to disconnect from the medium,
withdrawing from the purpose of transmitting bits, receiving bits, or both.  It allow allows the
SDLS provider to autonomously indicate that the medium has been disconnected from the stream.  In
SS7, this is a Level 1 function, possible the responsibility of a multiplex or digital cross-connect
switch.

@itemize @bullet

@item @b{@prim{SDL_@-DISCONNECT_@-REQ}}:
The @prim{SDL_@-DISCONNECT_@-REQ} message is used by the SDLS user to request that the stream be
disconnected from the medium.  Disconnection from the medium might require some switching or other
mechanism.  Disconnection can be perofrmed for the receive direction or the transmit direction
independently.

@item @b{@prim{SDL_@-DISCONNECT_@-IND}}:
The @prim{SDL_@-DISCONNECT_@-IND} message is used by the SDLS provider to indicate to the SDLS user
that the stream has been disconnected from the medium.  Disconnection is indicated for both the
receive and transmit directions.

@end itemize

A successful invocation of the disconnection service by  the SDLS user is illustrated in @figref{13}.

@figuresized{sdli13,13,Message Flow: Successful Disconnection Service by SDLS User,4.0in}

A successful invocation of the disconnection service by  the SDLS provider is illustrated in @figref{14}.

@figuresized{sdli14,14,Message Flow: Successful Disconnection Service by SDLS Provider,4.0in}

@node SDLI Primitives
@chapter SDLI Primitives

@menu
* Local Management Service Primitives::
* Protocol Service Primitives::
@end menu

@node Local Management Service Primitives
@section Local Management Service Primitives

These service primitives implement the local management services (@pxref{Local Management
Services}).

@menu
* Acknowledgement Service Primitives::
* Information Reporting Service Primitives::
* Physical Point of Attachment Service Primitives::
* Initialization Service Primitives::
* Options Management Service Primitives::
* Event Reporting Service Primitives::
@end menu

@node Acknowledgement Service Primitives
@subsection Acknowledgement Service Primitives

These service primitives implement the acknowledgement service (@pxref{Acknowledgement Service}).

@menu
* LMI_OK_ACK::
* LMI_ERROR_ACK::
@end menu

@node LMI_OK_ACK
@subsubsection LMI_OK_ACK

@subsubheading Description

This primitive is used to acknowledge receipt and successful service completion for
primitives requiring acknowledgement that have no confirmation primitive.

@subsubheading Format

This primitive consists of one @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_long lmi_correct_primitive;
    lmi_ulong lmi_state;
} lmi_ok_ack_t;
@end verbatim
@tpindex lmi_ok_ack_t
@end display

@subsubheading Parameters

The service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-OK_@-ACK}.

@item lmi_@-correct_@-primitive
Indicates the service primitive that was received and serviced correctly.  This field can be one of
the following values:

@table @prim

@ignore
@item LMI_@-INFO_@-REQ
Information request.
@end ignore
@item LMI_@-ATTACH_@-REQ
Attach request.
@item LMI_@-DETACH_@-REQ
Detach request.
@ignore
@item LMI_@-ENABLE_@-REQ
Enable request.
@item LMI_@-DISABLE_@-REQ
Disable request.
@item LMI_@-OPTMGMT_@-REQ
Options management request.
@item LMI_@-INFO_@-ACK
Information acknowledgement.
@item LMI_@-OK_@-ACK
Successful receipt acknowledgement.
@item LMI_@-ERROR_@-ACK
Error acknowledgement.
@item LMI_@-ENABLE_@-CON
Enable confirmation.
@item LMI_@-DISABLE_@-CON
Disable confirmation.
@item LMI_@-OPTMGMT_@-ACK
Options Management acknowledgement.
@item LMI_@-ERROR_@-IND
Error indication.
@item LMI_@-STATS_@-IND
Statistics indication.
@item LMI_@-EVENT_@-IND
Event indication.
@end ignore

@end table

@item lmi_@-state

Indicates the current state of the LMS provider at the time that the primitive was issued.
This field can be one of the following values:

@table @psta

@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@ignore
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@end ignore
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@ignore
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@end ignore
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@ignore
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-ATTACH_@-PENDING} or
@psta{LMI_@-DETACH_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-UNATTACHED} or @psta{LMI_@-DISABLED}, depending on thee primitive to
which the message is responding.

@page
@node LMI_ERROR_ACK
@subsubsection LMI_ERROR_ACK

@subsubheading Description

The error acknowledgement primitive is used to acknowledge receipt and unsuccessful service
completion for primitives requiring acknowledgement.

@subsubheading Format

The error acknowledgement primitive consists of one @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_errno;
    lmi_ulong lmi_reason;
    lmi_long lmi_error_primitive;
    lmi_ulong lmi_state;
} lmi_error_ack_t;
@end verbatim
@tpindex lmi_error_ack_t
@end display

@subsubheading Parameters

The error acknowledgement primitive contains the following parameters:

@table @parm

@item lmi_@-primitive

Indicates the primitive type.  Always @prim{LMI_@-ERROR_@-ACK}.

@item lmi_@-errno

Indicates the LM error number.
This field can have one of the following values:

@table @perr
@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.
@end table

@item lmi_@-reason

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{lmi_@-errno} field
is @perr{LMI_@-SYSERR}, the @parm{lmi_@-reason} field is the UNIX error number as described in
@manref{errno(3)}.

@item lmi_@-error_@-primitive

Indicates the primitive that was in error.
This field can have one of the following values:

@table @prim
@item LMI_@-INFO_@-REQ
Information request.
@item LMI_@-ATTACH_@-REQ
Attach request.
@item LMI_@-DETACH_@-REQ
Detach request.
@item LMI_@-ENABLE_@-REQ
Enable request.
@item LMI_@-DISABLE_@-REQ
Disable request.
@item LMI_@-OPTMGMT_@-REQ
Options management request.
@item LMI_@-INFO_@-ACK
Information acknowledgement.
@item LMI_@-OK_@-ACK
Successful receipt acknowledgement.
@item LMI_@-ERROR_@-ACK
Error acknowledgement.
@item LMI_@-ENABLE_@-CON
Enable confirmation.
@item LMI_@-DISABLE_@-CON
Disable confirmation.
@item LMI_@-OPTMGMT_@-ACK
Options Management acknowledgement.
@item LMI_@-ERROR_@-IND
Error indication.
@item LMI_@-STATS_@-IND
Statistics indication.
@item LMI_@-EVENT_@-IND
Event indication.
@end table

@item lmi_@-state

Indicates the state of the LMS provider at the time that the primitive was issued.
This field can have one of the following values:

@table @psta
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end table

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
LMS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node Information Reporting Service Primitives
@subsection Information Reporting Service Primitives

These service primitives implement the information reporting service (@pxref{Information Reporting
Service}).

@menu
* LMI_INFO_REQ::
* LMI_INFO_ACK::
@end menu

@node LMI_INFO_REQ
@subsubsection LMI_INFO_REQ

@subsubheading Description

This LMS user originated primitive is issued by the LMS user to request that the LMS provider
return information concerning the capabilities and state of the LMS provider.

@subsubheading Format

The primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_ulong lmi_primitive;
} lmi_info_req_t;
@end verbatim
@tpindex lmi_info_req_t
@end display

@subsubheading Parameters

This primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the primitive type.  Always @prim{LMI_@-INFO_@-REQ}.

@end table

@subsubheading State

This primitive may be issued in any state but only when a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

This primitive requires the LMS provider to acknowledge receipt of the primitive as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider is required to acknowledge receipt of the primitive and provide the requested
information using the @prim{LMI_@-INFO_@-ACK} primitive.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider is required to negatively acknowledge the primitive using the @prim{LMI_@-ERROR_@-ACK}
primitive, and include the reason for failure in the primitive.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}: applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_INFO_ACK
@subsubsection LMI_INFO_ACK

@subsubheading Description

This LMS provider originated primitive acknowledges receipt and successful processing of the
@prim{LMI_@-INFO_@-REQ} primitive and provides the request information concerning the LMS provider.

@subsubheading Format

This message is formatted a one @prim{M_PROTO} or @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_version;
    lmi_ulong lmi_state;
    lmi_ulong lmi_max_sdu;
    lmi_ulong lmi_min_sdu;
    lmi_ulong lmi_header_len;
    lmi_ulong lmi_ppa_style;
    lmi_uchar lmi_ppa_addr[0];
} lmi_info_ack_t;
@end verbatim
@tpindex lmi_info_ack_t
@end display

@subsubheading Parameters

The information acknowledgement service primitive has the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-INFO_@-ACK}.

@item lmi_@-version
Indicates the version of this specification that is being used by the LMS provider.

@item lmi_@-state
Indicates the state of the LMS provider at the time that the information acknowledgement service
primitive was issued.  This field can be one of the following values:

@table @psta

@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.

@end table

@item lmi_@-max_@-sdu
Indicates the maximum size of a Service Data Unit.

@item lmi_@-min_@-sdu
Indicates the minimum size of a Service Data Unit.

@item lmi_@-header_@-len
Indicates the amount of header space that should be reserved for placing LMS provider headers.

@item lmi_@-ppa_@-style
Indicates the PPA style of the LMS provider.  This value can be one of the following values:

@table @pval

@item LMI_@-STYLE1
PPA is implicitly attached by @manref{open(2)}.

@item LMI_@-STYLE2
PPA must be explicitly attached using @prim{LMI_@-ATTACH_@-REQ}.

@end table

@item lmi_@-ppa_@-addr
This is a variable length field.  The length of the field is determined by the length of the
@prim{M_PROTO}
or @prim{M_PCPROTO} message block.

For a @dfn{Style 2} driver, when @parm{lmi_@-ppa_@-style} is @pval{LMI_@-STYLE2}, and when in an attached state,
this field providers the current PPA associated with the stream; the length is typically 4 bytes.

For a @dfn{Style 1} driver, when @parm{lmi_@-ppa_@-style} is @pval{LMI_@-STYLE1}, the length it 0 bytes.

@end table

@subsubheading State

This primitive can be issued in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node Physical Point of Attachment Service Primitives
@subsection Physical Point of Attachment Service Primitives

These service primitives implement the physical point of attachment service (@pxref{Physical Point
of Attachment Service}).

@menu
* LMI_ATTACH_REQ::
* LMI_DETACH_REQ::
@end menu

@node LMI_ATTACH_REQ
@subsubsection LMI_ATTACH_REQ

@subsubheading Description

This LMS user originated primitive requests that the stream upon which the primitive is issued by
associated with the specified Physical Point of Attachment (PPA).  This primitive is only applicable
to @dfn{Style 2} LMS provider streams, that is, streams that return @pval{LMI_@-STYLE2} in the
@parm{lmi_@-ppa_@-style} field of the @prim{LMI_@-INFO_@-ACK}.

@subsubheading Format

This primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_uchar lmi_ppa[0];
} lmi_attach_req_t;
@end verbatim
@tpindex lmi_attach_req_t
@end display

@subsubheading Parameters

The attach request primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-ATTACH_@-REQ}.

@item lmi_@-ppa
Specifies the Physical Point of Attachment (PPA) to which to associated the @dfn{Style 2} stream.
This is a variable length identifier whose length is determined by the length of the @prim{M_PROTO} message
block.

@end table

@subsubheading State

This primitive is only valid in state @psta{LMI_@-UNATTACHED} and when a local acknowledgement is not
pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-ATTACH_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The attach request service primitive requires that the LMS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider acknowledges receipt of the primitive and successful outcome of the attach service
with a @prim{LMI_@-OK_@-ACK} primitive.  The new state is @psta{LMI_@-DISABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider acknowledges receipt of the primitive and failure of the attach service with a
@prim{LMI_@-ERROR_@-ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_DETACH_REQ
@subsubsection LMI_DETACH_REQ

@subsubheading Description

This LMS user originated primitive request that the stream upon which the primitive is issued be
disassociated from the Physical Point of Appearance (PPA) to which it is currently attached.  This
primitive is only applicable to @dfn{Style 2} LMS provider streams, that is, streams that return
@pval{LMI_@-STYLE2} in the @parm{lmi_@-ppa_@-style} field of the @prim{LMI_@-INFO_@-ACK}.

@subsubheading Format

The detach request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
} lmi_detach_req_t;
@end verbatim
@tpindex lmi_detach_req_t
@end display

@subsubheading Parameters

The detach request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-DETACH_@-REQ}.

@end table

@subsubheading State

This primitive is valid in the @psta{LMI_@-DISABLED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-DETACH_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The detach request service primitive requires that the LMS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider acknowledges receipt of the primitive and successful outcome of the detach service
with a @prim{LMI_@-OK_@-ACK} primitive.  The new state is @psta{LMI_@-UNATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider acknowledges receipt of the primitive and failure of the detach service with a
@prim{LMI_@-ERROR_@-ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node Initialization Service Primitives
@subsection Initialization Service Primitives

Initialization service primitives allow the LMS user to enable or disable the protocol service
interface.  Enabling the protocol service interface may require that some action be taken to prepare
the protocol service interface for use or to remove it from use.  For example, where the PPA
corresponds to a signalling data link identifier as defined in Q.704, it may be necessary to perform
switching to connect or disconnect the circuit identification code associated with the signalling
data link identifier.

These service primitives implement the initialization service (@pxref{Initialization Service}).

@menu
* LMI_ENABLE_REQ::
* LMI_ENABLE_CON::
* LMI_DISABLE_REQ::
* LMI_DISABLE_CON::
@end menu

@node LMI_ENABLE_REQ
@subsubsection LMI_ENABLE_REQ

@subsubheading Description

This LMS user originated primitive request that the LMS provider perform the actions necessary to
enable the protocol service interface and confirm that it is enabled.  This primitive is applicable
to both styles of PPA.

@subsubheading Format

The enable request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_uchar lmi_rem[0];
} lmi_enable_req_t;
@end verbatim
@tpindex lmi_enable_req_t
@end display

@subsubheading Parameters

The enable request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-ENABLE_@-REQ}.

@item lmi_@-rem
Specifies a remote address to which to connect the PPA.  The need for and form of this address is
provider-specific.  The length of the field is determined by the length of the @prim{M_PROTO} message
block.  This remote address could be a circuit identification code, an IP address, or some other
form of circuit or channel identifier.

@end table

@subsubheading State

This primitive is valid in the @psta{LMI_@-DISABLED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success the new state is @psta{LMI_@-ENABLE_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The enable request service primitive requires that the LMS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the LMS provider acknowledges successful completion of the enable service with an
@prim{LMI_@-ENABLE_@-CON} primitive.  The new state is @psta{LMI_@-ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the LMS provider acknowledges the failure of the  enable service wtih an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_ENABLE_CON
@subsubsection LMI_ENABLE_CON

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to confirm the successful
completion of the enable service.

@subsubheading Format

The enable confirmation service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_state;
} lmi_enable_con_t;
@end verbatim
@tpindex lmi_enable_con_t
@end display

@subsubheading Parameters

The enable confirmation service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-ENABLE_@-CON}.

@item lmi_@-state
Indicates the state following issuing the enable confirmation primitive.  This field can take on one
of the following values:

@table @psta

@ignore
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@end ignore
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@ignore
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-ENABLE_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-ENABLED}.

@page
@node LMI_DISABLE_REQ
@subsubsection LMI_DISABLE_REQ

@subsubheading Description

This LMS user originated primitive requests that the LMS provider perform the actions necessary to
disable the protocol service interface and confirm that it is disabled.  The primitive is applicable
to both styles of PPA.

@subsubheading Format

The disable request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
} lmi_disable_req_t;
@end verbatim
@tpindex lmi_disable_req_t
@end display

@subsubheading Parameters

The disable request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-DISABLE_@-REQ}.

@end table

@subsubheading State

The disable request service primitive is valid in the @psta{LMI_@-ENABLED} state and when no local
acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-DISABLE_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The disable request service primitive requires the LMS provider to acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the LMS provider acknowledges successful completion of the disable service with an
@prim{LMI_@-DISABLE_@-CON} primitive.  The new state is @psta{LMI_@-DISABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the LMS provider acknowledges the failure of the disable service with an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_DISABLE_CON
@subsubsection LMI_DISABLE_CON

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to confirm the successful
completion of the disable service.

@subsubheading Format

The disable confirmation service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_state;
} lmi_disable_con_t;
@end verbatim
@tpindex lmi_disable_con_t
@end display

@subsubheading Parameters

The disable confirmation service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-DISABLE_@-CON}.

@item lmi_@-state
Indicates the state following issuing the disable confirmation primitive.  This field can take on one
of the following values:

@table @psta

@ignore
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@end ignore
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@ignore
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-DISABLE_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-DISABLED}.

@page
@node Options Management Service Primitives
@subsection Options Management Service Primitives

The options management service primitives allow the LMS user to negotiate options with the LMS
provider, retrieve the current and default values of options, and check that values specified for
options are correct.

The options management service primitive implement the options management service (@pxref{Options
Management Service}).

@menu
* LMI_OPTMGMT_REQ::
* LMI_OPTMGMT_ACK::
@end menu

@node LMI_OPTMGMT_REQ
@subsubsection LMI_OPTMGMT_REQ

@subsubheading Description

This LMS user originated primitive requests that LMS provider options be managed.

@subsubheading Format

The option management request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_req_t;
@end verbatim
@tpindex lmi_optmgmt_req_t
@end display

@subsubheading Parameters

The option management request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-OPTMGMT_@-REQ}.

@item lmi_@-opt_@-length
Specifies the length of the options.

@item lmi_@-opt_@-offset
Specifies the offset, from the beginning of the @prim{M_PROTO} message block, of the start of the options.

@item lmi_@-mgmt_@-flags
Specifies the management flags which determine what operation the LMS provider is expected to
perform on the specified options.  This field can assume one of the following values:

@table @pval

@item LMI_@-NEGOTIATE
Negotiate the specified value of each specified option and return the negotiated value.

@item LMI_@-CHECK
Check the validity of the specified value of each specified option and return the result.  Do not
alter the current value assumed by the LMS provider.

@item LMI_@-DEFAULT
Return the default value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@item LMI_@-CURRENT
Return the current value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@end table

@end table

@subsubheading State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The option management request service primitive requires the LMS provider to acknowledge receipt of
the primitive as follows:

@itemize @minus

@item @b{Successful}:
Upon success, the LMS provider acknowledges receipt of the service primitive and successful
completion of the options management service with an @prim{LMI_@-OPTMGMT_@-ACK} primitive containing the
options management result.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors)}:
Upon failure, the LMS provider acknowledges receipt of the service primitive and failure to
complete the options management service with an @prim{LMI_@-ERROR_@-ACK} primitive containing the error.
The state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_OPTMGMT_ACK
@subsubsection LMI_OPTMGMT_ACK

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider upon successful completion of
the options management service.  It indicates the outcome of the options management operation
requested by the LMS user in a @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@subsubheading Format

The option management acknowledgement service primitive consists of one @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_ack_t;
@end verbatim
@tpindex lmi_optmgmt_ack_t
@end display

@subsubheading Parameters

The option management acknowledgement service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-OPTMGMT_@-ACK}.

@item lmi_@-opt_@-length
Indicates the length of the returned options.

@item lmi_@-opt_@-offset
Indicates the offset of the returned options from the start of the @prim{M_PCPROTO} message block.

@item lmi_@-mgmt_@-flags
Indicates the returned management flags.  These flags indicate the overall success of the options
management service.  This field can assume one of the following values:

@table @pval

@item LMI_@-SUCCESS
The LMS provider succeeded in negotiating or returning all of the options specified by the LMS
user in the @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@item LMI_@-FAILURE
The LMS provider failed to negotiate one or more of the options specified by the LMS user.

@item LMI_@-PARTSUCCESS
The LMS provider negotiated a value of lower quality for one or more of the options specified by
the LMS user.

@item LMI_@-READONLY
The LMS provider failed to negotiate one ore more of the options specified by the LMS user because
the option is treated as read-only by the LMS provider.

@item LMI_@-NOTSUPPORT
The LMS provider failed to recognize one or more of the options specified by the LMS user.

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in direct response to an @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The LMS provider follows the following rules when processing option management service requests:

@itemize ---

@item
When the @parm{lmi_@-mgmt_@-flags} field in the @prim{LMI_@-OPTMGMT_@-REQ} primitive is set to @pval{LMI_@-NEGOTIATE},
the LMS provider will attempt to negotiate a value for each of the options specified in the
request.

@item
When the flags are @pval{LMI_@-DEFAULT}, the LMS provider will return the default values of the specified
options, or the default values of all options known to the LMS provider if no options were
specified.

@item
When the flags are @pval{LMI_@-CURRENT}, the LMS provider will return the current values of the specified
options, or all options.

@item
When the flags are @pval{LMI_@-CHECK}, the LMS provider will attempt to negotiate a value for each of the
options specified in the request and return the resulg of the negotiation, but will not affect the
current value of the option.

@end itemize

@page
@node Event Reporting Service Primitives
@subsection Event Reporting Service Primitives

The event reporting service primitives allow the LMS provider to indicate asynchronous errors,
events and statistics collection to the LMS user.

These service primitives implement the event reporting service (@pxref{Event Reporting Service}).

@menu
* LMI_ERROR_IND::
* LMI_STATS_IND::
* LMI_EVENT_IND::
@end menu

@node LMI_ERROR_IND
@subsubsection LMI_ERROR_IND

@subsubheading Description

This LMS provider originated service primitive is issued by the LMS provider when it detects and
asynchronous error event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The error indication service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_errno;
    lmi_ulong lmi_reason;
    lmi_ulong lmi_state;
} lmi_error_ind_t;
@end verbatim
@tpindex lmi_error_ind_t
@end display

@subsubheading Parameters

The error indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-ERROR_@-IND}.

@item lmi_@-errno
Indicates the LMI error number describing the error.  This field can have one of the following
values:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@item lmi_@-reason

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{lmi_@-errno} field
is @perr{LMI_@-SYSERR}, the @parm{lmi_@-reason} field is the UNIX error number as described in
@manref{errno(3)}.

@item lmi_@-state

Indicates the state of the LMS provider at the time that the primitive was issued.
This field can have one of the following values:

@table @psta
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end table

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
LMS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node LMI_STATS_IND
@subsubsection LMI_STATS_IND

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to indicate a periodic
statistics collection event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The statistics indication service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_interval;
    lmi_ulong lmi_timestamp;
} lmi_stats_ind_t;
@end verbatim
@tpindex lmi_stats_ind_t
@end display

Following this structure within the @prim{M_PROTO} message block is the provider-specific statistics.

@subsubheading Parameters

The statistics indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-STATS_@-IND}.

@item lmi_@-interval
Indicates the statistics collection interval to which the statistics apply.  This interval is
specified in milliseconds.

@item lmi_@-timestamp
Indicates the UNIX time (from epoch) at which statistics were collected.  The timestamp is given in
milliseconds from epoch.

@end table

@subsubheading State

This service primitive may be issued by the LMS provider in any state in which a local
acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node LMI_EVENT_IND
@subsubsection LMI_EVENT_IND

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to indicate an asynchronous
event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The event indication service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_objectid;
    lmi_ulong lmi_timestamp;
    lmi_ulong lmi_severity;
} lmi_event_ind_t;
@end verbatim
@tpindex lmi_event_ind_t
@end display

Following this structure within the @prim{M_PROTO} message block is the provider-specific event
information.

@subsubheading Parameters

THe event indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-EVENT_@-IND}.

@item lmi_@-objectid
Indicates the provider-specific object identifier that identifies the managed object to which the
event is associated.

@item lmi_@-timestamp
Indicates the UNIX time from epoch (in milliseconds).

@item lmi_@-severity
Indicates the provider-specific severity of the event.

@end table

@subsubheading State

This service primitive can be issued by the LMS provider in any state where a local
acknowledgement is not pending.  Normally the LMS provider must be in the @psta{LMI_@-ENABLED} state for
event reporting to occur.

@subsubheading New State

The new state remains unchanged.

@page
@node Protocol Service Primitives
@section Protocol Service Primitives

Protocol service primitives implement the Signalling Data Link Interface protocol.  Protocol service
primitives provide the SDLS user with the ability to connect transmission or reception directions of
the bit stream, pass bits for transmission and accept recevied bits.

These service primitives implement the protocol services (@pxref{Protocol Services}).

@menu
* Connection Service Primitives::
* Data Transfer Service Primitives::
* Disconnection Service Primitives::
@end menu

@node Connection Service Primitives
@subsection Connection Service Primitives

The connection service primitives permit the SDLS user to establish a connection between the line
(circuit or channel) and the SDLS user in the transmit, receive, or both, directions.

These service primitives implement the connection service (@pxref{Connection Service}).

@menu
* SDL_CONNECT_REQ::
@end menu

@node SDL_CONNECT_REQ
@subsubsection SDL_CONNECT_REQ

@subsubheading Description

This SDLS user originated service primitive allows the SDLS user to connect the user stream to the
medium in the transmit, receive, or both, directions.

@subsubheading Format

The connect request primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sdl_long sdl_primitive;
    sdl_ulong sdl_flags;
} sdl_connect_req_t;
@end verbatim
@tpindex sdl_connect_req_t
@end display

@subsubheading Parameters

The connect request service primitive contains the following parameters:

@table @parm

@item sdl_@-primitive
Specifies the service primitive type.  Always @prim{SDL_@-CONNECT_@-REQ}.

@item sdl_@-flags
Specifies the direction in which to connect.  This field can contain a bitwise OR of one or more of
the following flags:

@table @pval

@item SDL_@-RX_@-DIRECTION
Specifies that the SDLS user stream is to be connected to the medium in the receive direction.

@item SDL_@-TX_@-DIRECTION
Specifies that the SDLS user stream is to be connected to the medium in the transmit direction.

@end table

@end table

@subsubheading State

This service primitive is only valid in the @psta{LMI_@-ENABLED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response

The connection request service primitive is not acknowledged.  However, the primitive may result in
a non-fatal error as follows:

@itemize @minus

@item @b{Successful:}
Upon success, the connection request service primitive is not acknowledged.

@item @b{Unsuccessful (non-fatal errors):}
Upon failure, the SDLS provider indicates a non-fatal error with a @prim{LMI_@-ERROR_@-ACK} message
containing the error.

@end itemize

@subsubheading Reasons for Failure

@page
@node Data Transfer Service Primitives
@subsection Data Transfer Service Primitives

The data transfer service primitives permit the SDLS user to pass bits for transmission to the SDLS
provider and accept received bits from the SDLS provider.

These service primitives implement the data transfer service (@pxref{Data Transfer Service}).

@menu
* SDL_BITS_FOR_TRANSMISSION_REQ::
* SDL_RECEIVED_BITS_IND::
@end menu

@node SDL_BITS_FOR_TRANSMISSION_REQ
@subsubsection SDL_BITS_FOR_TRANSMISSION_REQ

@subsubheading Description

This SDLS user originated primitive allows the SDLS user to specify bits for transmission on the
medium.

@subsubheading Format

The transmission request service primitive consists of one optional @prim{M_PROTO} message block followed
by one or more @prim{M_DATA} message blocks containing the bits for transmission.  The @prim{M_PROTO} message
block is structured as follows:

@display
@verbatim
typedef struct {
    sdl_long sdl_primitive;
} sdl_bits_for_transmission_req_t;
@end verbatim
@tpindex sdl_bits_for_transmission_req_t
@end display

@subsubheading Parameters

The transmission request service primitive contains the following parameters:

@table @parm

@item sdl_@-primitive
Specifies the service primitive type.  Always @prim{SDL_@-BITS_@-FOR_@-TRANSMISSION_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node SDL_RECEIVED_BITS_IND
@subsubsection SDL_RECEIVED_BITS_IND

@subsubheading Description

This SDLS provider originated primitive is issued by the SDLS provider to indicate bits that were
received on the medium.

@subsubheading Format

The receive indication service primitive consists of one optional @prim{M_PROTO} message block followed by
one or more @prim{M_DATA} message blocks containing the received bits.  The @prim{M_PROTO} message block is
structured as follows:

@display
@verbatim
typedef struct {
    sdl_long sdl_primitive;
} sdl_received_bits_ind_t;
@end verbatim
@tpindex sdl_received_bits_ind_t
@end display

@subsubheading Parameters

The receive indication service primitive contains the following parameters:

@table @parm

@item sdl_@-primitive
Indicates the service primitive type.  Always @prim{SDL_@-RECEIVED_@-BITS_@-IND}.

@end table

@subsubheading State

This primitive is only issued by the SDLS provider in the @psta{LMI_@-ENABLED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node Disconnection Service Primitives
@subsection Disconnection Service Primitives

The disconnection service primitives permit the SDLS user to disconnect the stream from the line
(circuit or channel) for the transmit, receive, or both, directions.  They also alow the SDLS
provider to indicate that a disconnection has occured outside of SDLS user control.

These service primitives implement the disconnection service (@pxref{Disconnection Service}).

@menu
* SDL_DISCONNECT_REQ::
* SDL_DISCONNECT_IND::
@end menu

@node SDL_DISCONNECT_REQ
@subsubsection SDL_DISCONNECT_REQ

@subsubheading Description

This SDLS user originated service primitive allow the SDLS user to disconnect the SDLS user stream
from the bit-stream in the transmit, receive, or both, directions.

@subsubheading Format

The disconnect request primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sdl_long sdl_primitive;
    sdl_ulong sdl_flags;
} sdl_disconnect_req_t;
@end verbatim
@tpindex sdl_disconnect_req_t
@end display

@subsubheading Parameters

The disconnect request service primitive contains the following parameters:

@table @parm

@item sdl_@-primitive
Specifies the service primitive type.  Always @prim{SDL_@-DISCONNECT_@-REQ}.

@item sdl_@-flags
Specifies the direction from which to disconnect.  This field can be a bitwise OR of one or more of
the following flags:

@table @pval

@item SDL_@-RX_@-DIRECTION
Specifies that the SDLS user stream is to be disconnected from the medium in the receive direction.

@item SDL_@-TX_@-DIRECTION
Specifies that the SDLS user stream is to be disconnected from the medium in the transmit direction.

@end table

@end table

@subsubheading State

This service primitive is only valid in the @psta{LMI_@-ENABLED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node SDL_DISCONNECT_IND
@subsubsection SDL_DISCONNECT_IND

@subsubheading Description

This SDLS provider originated primitive is issued by the SDLS provider if an autonomous event
results in the disconnection of the transmit and receive bit-streams from the SDLS user without
an explicit SDLS user request.

@subsubheading Format

The disconnect indication primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sdl_long sdl_primitive;
} sdl_disconnect_ind_t;
@end verbatim
@tpindex sdl_disconnect_ind_t
@end display

@subsubheading Parameters
@subsubheading State
@subsubheading New State
@subsubheading Response
@subsubheading Reasons for Failure

@node Diagnostics Requirements
@chapter Diagnostics Requirements

Two error handling facilities should be provided to the SDLS user: one to handle non-fatal errors,
and the other to handle fatal errors.

@section Non-Fatal Error Handling Facility

These are errors that do not change the state of the SDLS interface as seen by the SDLS user and
provide the user with the option of reissuing the SDL primitive with the corrected options
specification.  The non-fatal error handling is provided only to those primitives that require
acknowledgements, and uses the @prim{LMI_@-ERROR_@-ACK} to report these errors.  These errors retain the
state of the SDLS interface the same as it was before the SDL provider received the primitive that
was in error.  Syntax errors and rule violations are reported via the non-fatal error handling
facility.

@section Fatal Error Handling Facility

These errors are issued by the SDL provider when it detects errors that are not correctable by the
SDL user, or if it is unable to report a correctible error to the SDLS user.  Fatal errors are
indicated via the STREAMS message type @code{M_ERROR} with the UNIX system error @code{EPROTO}.  The
@code{M_ERROR} STREAMS message type will result in the failure of all the UNIX system calls on the
stream.  The SDLS user can recover from a fatal error by having all the processes close the files
associated with the stream, and then reopening them for processing.

@ignore
@node Addendum for ITU-T Q.703 Conformance
@unnumbered Addendum for ITU-T Q.703 Conformance

@node Addendum for ANSI T1.111.3 Conformance
@unnumbered Addendum for ANSI T1.111.3 Conformance

@node Addendum for ETSI Conformance
@unnumbered Addendum for ETSI Conformance

@node Mapping of SDLI Primitives to ITU-T Q.703
@appendix Mapping of SDLI Primitives to ITU-T Q.703

@node Mapping of SDLI Primitives to ANSI T1.111.3
@appendix Mapping of SDLI Primitives to ANSI T1.111.3

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables
@end ignore

@node LMI Header File Listing
@appendix LMI Header File Listing

@noindent
@smallformat
@verbatiminclude lmi.h
@end smallformat

@node SDLI Header File Listing
@appendix SDLI Header File Listing

@noindent
@smallformat
@verbatiminclude sdli.h
@end smallformat

@node License
@unnumbered License

@menu
* GNU Free Documentation License::
@end menu

@include texi/fdl.texi

@node Glossary
@unnumbered Glossary

@table @emph

@item Signalling Data Link Service Data Unit

A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link
connection to the other.

@item Data transfer

The phase in connection and connectionless modes that supports the transfer of data between to
signalling data link users.

@item SDL provider

The signalling data link layer protocol that provides the services of the signalling data link
interface.

@item SDL user

The user-level application or user-level or kernel-level protocol that accesses the services of the
signalling data link layer.

@item Local management

The phase in connection and connectionless modes in which a SDL user initializes a stream and
attaches a PPA address to the stream.  Primitives in this phase generate local operations only.

@item PPA

The point at which a system attaches itself to a physical communications medium.

@item PPA identifier

An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {LMS Provider}{International Telecommunication Union - Telecom Sector}
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item LM @tab Local Management
@item LMS @tab Local Management Service
@item LMS Provider @tab A provider of Local Management Services
@item LMS User @tab A user of Local Management Services
@item PPA @tab Physical Point of Attachment
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item SDLI @tab Signalling Data Link Interface
@item SDLS @tab Signalling Data Link Service
@item SDT @tab Signalling Data Terminal
@item SDTI @tab Signalling Data Terminal Interface
@item SDTS @tab Signalling Data Terminal Service
@item SL @tab Signalling Link
@item SLI @tab Signalling Link Interface
@item SLS @tab Signalling Link Service
@item SS7 @tab Signalling System No. 7
@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}
@item [1] @tab ITU-T Recommendation Q.700
@item [2] @tab ITU-T Recommendation Q.701
@item [3] @tab ITU-T Recommendation Q.702
@item [4] @tab ITU-T Recommendation Q.703
@item [5] @tab ITU-T Recommendation Q.704
@item [6] @tab Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item [7] @tab ITU-T Recommendation Q.771
@end multitable

@c @node Index
@c @unnumbered Index
@c @printindex cp

@node Indices
@unnumbered Indices

@menu
* Concept Index::
* Type Index::
@c * Function Index::
* Variable Index::
@c * File Index::
@c * Option Index::
@c * Author Index::
* Primitive Index::
* Primitive Value Index::
* Protocol State Index::
* Protocol Error Index::
* Manual Page Index::
@end menu

@node Concept Index
@section Concept Index

@printindex cp

@page
@node Type Index
@section Type Index

@printindex tp

@c @page
@c @node Function Index
@c @section Function Index

@c @printindex fn

@page
@node Variable Index
@section Variable Index

@printindex vr

@c @page
@c @node File Index
@c @section File Index

@printindex pg

@c @page
@c @node Option Index
@c @section Option Index

@c @printindex op

@c @page
@c @node Author Index
@c @section Author Index

@c @printindex au

@page
@node Primitive Index
@section Primitive Index

@printindex pr

@page
@node Primitive Value Index
@section Primitive Value Index

@printindex pv

@page
@node Protocol State Index
@section Protocol State Index

@printindex st

@page
@node Protocol Error Index
@section Protocol Error Index

@printindex pe

@page
@node Manual Page Index
@section Manual Page Index

@printindex mp


@page
@shortcontents
@page
@contents
@bye
