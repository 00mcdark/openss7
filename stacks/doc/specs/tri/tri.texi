% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
% =========================================================================
%
% @(#) $Id: tri.texi,v 0.9.2.2 2004/10/13 08:18:18 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2004  OpenSS7 Corporation <www.openss7.com>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any success
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2004/10/13 08:18:18 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename tri.info
@settitle Transaction Interface
@c %**end of header

@dircategory OpenSS7
@direntry
* TRI: (tri).			Transaction Interface Specification.
@end direntry

@include texi/args.texi

@ifinfo
This files documents the Transaction Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATA}, for
@value{PACKAGE_TITLE} version @value{PACKAVE_VERSION} release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2004 @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000 @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*

All Rights Reserved. @*

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
@noindent
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copyring, provided the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

@noindent
Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@ignore
@shorttitlepage Transaction Interface --- Application Program Interface
@end ignore
@titlepage
@titlefont{Transaction Interface}
@sp 0.5
@title Application Program Interface
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{PACKAGE_VERSION}-@value{PACKAGE_RELEASE}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2004  OpenSS7 Corporation @url{http://www.openss7.com/} @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@noindent
This software and related documentation is protected by copyright and distributed under licenses restricting its use,
copying, distribution and decompilation.  No part of this software or related documentation may be reproduced in any
form by any means without the prior written authorization of the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect this information and
keep it confidential, and will not disclose the information contained in this document without the written permission of
its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason, including but not
limited to, conformity with standards promulgated by various agencies, utilization of advances in the state of the
technical arts, or the reflection of changes in the design of any techniques, or procedures embodied, described, or
referred to herein.  OpenSS7 Corporation is under no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @emph{Released under GFDL} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @emph{Released under GFDL} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defindex pr
@c Define an index of primitive values
@defindex pv
@c Define an index of protocol states
@c @defindex tp

@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex tp cp
@syncodeindex vr cp

@ifnottex
@ifinfo
@node Top
@top Transaction Interface
@end ifinfo
@ifnotinfo
@node Top
@top
@end ifnotinfo
@end ifnottex

@menu
* Preface::
* Introduction::
* The Transaction Sub-Layer::
* TRI Services Definition::
* TRI Primitives::
* Diagnostics Requirements::
* Transaction Service Interface Sequence of Primitives::
* Addendum for ITU-T Conformance::
* TCAP Transport Provider TPI Addendum::
* Mapping TRI Primitives to ITU-T Q.771::
* State/Event Tables::
* Primitive Precedence Tables::
* TRI Header File Listing::
* License::
* Glossary::
* Acronyms::
* References::
* Index::
@end menu

@node Preface
@unnumbered Preface

@section Security Warning

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and without fee or
royalty is hereby granted, provided that both the above copyright notice and this permission notice appears in all
copies and that the name of OpenSS7 Corporation not be used in advertising or publicity pertaining to distribution of
this documentation or its contents without specific, written prior permission.  OpenSS7 Corporation makes no
representation about the suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with regard to this documentation including
all implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title; that the
contents of the document are suitable for any purpose, or that the implementation of such contents will not infringe on
any third party patents, copyrights, trademarks or other rights..  In no event shall OpenSS7 corporation be liable for
any direct, indirect, special or consequential damages or any damages whatsoever resulting from loss of use, data or
profits, whether in an action of contract, negligence or other tortious action, arising out of or in connection with any
use of this document or the performance or implementation of the contents thereof.

@section Abstract

This document is a Application Program Interface containing technical details concerning the implementation of the
Transaction Interface (TRI) for OpenSS7.  It contains recommendations on software architecture as well as platform and
system applicability of the Transaction Interface (TRI).

@section Purpose

The purpose of this document is to provide technical documentation of the Transaction Interface (TRI).  This document is
intended to be included with the OpenSS7 STREAMS software package released by OpenSS7 Corporation.  It is intended to
assist software developers, maintainers and users of the Transaction Interface (TRI) with understanding the software
architecture and technical interfaces which are made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of information concerning the Transaction Interface
(TRI).

@section Audience
The audience for this document is software developers, maintainers and users and integrators of the
Transaction Interface (TRI).

@section Revision History

Take care that you are working with a current version of this documentation: you will not be notified of updates.  To
ensure that you are working with a current version, check the @uref{http://www.openss7.org/,OpenSS7 Project} website for
a current version.

A printed (or postscript) version of this document is an UNCONTROLLED version.

@node Introduction
@chapter Introduction

This document specifies a STREAMS-based kernel-level instantiation of the ITU-T Transaction Capabilities Application
Part (TCAP) Transaction (TR) Sub-Layer.  The Transaction Interface (TRI) enables the user of a transaction sub-layer
service to access and use any of a variety of conforming transaction providers without specific knowledge of the
provider's protocol.  The service interface is designed to support any transaction protocol.  This interface only
specifies access to transaction sub-layer services providers, and does not address issues concerning transaction
sub-layer management, protocol performance, and performance analysis tools.

The specification assumes that the reader is familiar with the ISO reference model terminology, ISO/ITU-T transaction
service definitions (ROSE, ACSE, TCAP), and STREAMS.

@section Related Documentation

@itemize ---
@item ITU-T Recommendation X.200 (White Book) --- ISO/IEC 7498-1:1994
@item ITU-T Recommendation X.219 (White Book) --- ISO/IEC
@item ITU-T Recommendation X.229 (White Book) --- ISO/IEC
@item ITU-T Recommendation X.217 (White Book) --- ISO/IEC 8649 : 1996
@item ITU-T Recommendation X.227 (White Book) --- ISO/IEC 8650-1 : 1995
@item ITU-T Recommendation X.237 (White Book) --- ISO/IEC 10035-1 : 1995
@item ITU-T Recommendation Q.771 (White Book)
@item System V Interface Definition, Issue 2 - Volume 3
@end itemize 

@subsection Role

This document specifies an interface that supports the service provided by the Association Control Service Element
(ACSE) for Open Systems Interconnect for ITU-T Applications as specified in ITU-T Recommendation X.217 (ISO/IEC 8649).
It is also intended to support the Transaction Sub-layer provided by the Transaction Capabilities Application Part
(TCAP) for Signalling System Number 7 (SS7) as specified in ITU-T Recommendation Q.771.  These specifications are
targeted for use by developers and testers of protocol modules that require transaction sub-layer service.@footnote{For
an alternative interface, see @ref{Introduction, , , tci, Transaction Component Interface}, or @ref{Introduction, , ,
xti, Using XTI for TCAP}.}

@section Definitions, Acronyms, and Abbreviations

@table @emph
@item Originating TR User
A TR-User that initiates a transaction.
@item Destination TR User
A TR-User with whom an originating TR user wishes to establish a transaction association.
@item ISO
International Organization for Standardization
@item TR User
Kernel level protocol or user level application that is accessing the services of the transaction
sub-layer.
@item TR Provider
Transaction sub-layer entity/entities that provide/s the services of the transaction interface.
@item TRI
Transaction Interface
@item TIDU
Transaction Interface Data Unit
@item ASDU
Association Service Data Unit
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
A communication services development facility first available with UNIX System V Release 3
@end table

@node The Transaction Sub-Layer
@chapter The Transaction Sub-Layer

The Transaction Sub-Layer provides the means to manage the association of TR-User into transactions dialogues.  It is
responsible for the routing and management of transaction component exchange between TR-user entities.

@section Model of the TRI

The TRI defines the services provided by the transaction sub-layer to the transaction-user at the boundary between the
Transaction Component (TC) Sub-Layer and the Transaction (TR) Sub-Layer in the model presented in ITU-T Recommendation
Q.771.  The interface consists of a set of primitives defined as STREAMS messages that provide access to the transaction
sub-layer services, and are transferred between the TR user entity and the TR provider.  These primitives are of two
types: ones that originate from the TR user, and others that originate from the TR provider, or respond to an event of
the TR provider.  The primitives that originate from the TR provider are either confirmations of a request or are
indications to the NS user that the event has occurred.  @emph{Figure 1} shows the model of the TRI.

@cartouche
@center Figure 1@strong{@emph{.  Model of the TRI}}
@image{tri_new,4in}
@end cartouche

The TRI allows the TR provider to be configured with any transaction sub-layer user (such as the Transaction Component
(TC) Sub-Layer) that also conforms to the TRI.  A transaction sub-layer user can also be a user program that conforms to
the TRI and accesses the TR provider via @strong{putmsg}(2) and @strong{getmsg}(2) system calls.

@dfn{STREAMS} messages that are used to communicate transaction service primitives between the transaction user and the
transaction provider may have one of the following formats:

@enumerate
@item
A @var{M_PROTO}
@prindex M_PROTO
message block follwed by zero or more @var{M_DATA}
@prindex M_DATA
message blocks.  The @var{M_PROTO} message block contains the type of service primitive and all relevant
arguments associated with the primitive.  The @var{M_DATA} blocks contain user data associated with the
service primitive.
@item
One @var{M_PCPROTO}
@prindex M_PCPROTO
message block containing the type of service primitive and all the relevant arguments associated with the primitive.
@item
One or more @var{M_DATA}
@prindex M_DATA
message blocks containing user data.
@end enumerate

The following sections describe the service primitives which define both connection-mode and connectionless-mode
service.

For both types of service, two types of primitives exist: primitives that originate from the service user and primitives
that originate from the service provider.  The primitives that originate from the service user make requests to the
service provider or response to an event of the service provider.  The primitive that originate from the service
provider are either confirmations of a request or are indications to the service user that an event has occurred.  The
primitive types along with the mapping of those primitives to the @dfn{STREAMS} message types and the service primitives
of the ISO/IEC xxxxx and service definitions are listed in @ref{TRI Primitives}.  The format of these primitives and the
rules governing the use of them are described in @ref{Management Primitives}, @ref{Connection-Oriented Mode Primitives},
and @ref{Connectionless Mode Primitives}.

@section TRI Services

The features of the TRI are defined in terms of the services provided by the service provider, and the individual
primitives that may flow between the service user and the service provider.

The services supported by the TRI are based on two distinct modes of communication, connection-mode association service
(COAS) and connectionless association service (CLAS).  Also, the TRI supports services for local management.

@subsection COAS

The main features of the connection mode communication are:

@enumerate a
@item It is virtual circuit oriented;
@item it provides transfer of data via a pre-established path; and,
@item it provides reliable data transfer.@footnote{That is, it supports TCAP operation classes 1, 2, and 3; ROSE operation classes 1, 2, 3 and 4.}
@end enumerate

There are three phases to each instance of communication: Association Establishment, Data Transfer, and Association
Release.  Units of data arrive at the destination in the same order as they departed their source and the data is
protected against duplication or loss of data units within some specified quality of service.

@subsection CLAS

The main features of the connectionless mode communication are:

@enumerate a
@item It is datagram oriented;
@item it provides transfer of data in self contained units;
@item there is no logical relationship between these units of data; and,
@item it is unreliable.
@end enumerate

Connectionless mode communication has no separate phases.  Each unit of data is transmitted from source to destination
independently, appropriate addressing information is included with each unit of data.  As the units of data are
transmitted independently from source to destination, there are, in general, no guarantees of proper sequence and
completeness of the data stream.

@c @subsection Operation Class 1
@c 
@c The main features of operation class 1 transactions are:
@c 
@c @itemize 
@c @item Operation success is reported.
@c @item Operation failure is reported.
@c @end itemize 
@c 
@c There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
@c Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
@c data is protected against duplication or loss of data units within some specified quality of service.
@c 
@c @subsection Operation Class 2
@c 
@c The main features of operation class 2 transactions are:
@c 
@c @itemize 
@c @item Operation success is @emph{not} reported.
@c @item Operation failure is reported.
@c @end itemize 
@c 
@c There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
@c Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
@c data is protected against duplication or loss of data units within some specified quality of service.
@c 
@c @subsection Operation Class 3
@c 
@c The main features of operation class 3 transactions are:
@c 
@c @itemize 
@c @item Operation success is reported.
@c @item Operation failure is @emph{not} reported.
@c @end itemize 
@c 
@c There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
@c Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
@c data is protected against duplication or loss of data units within some specified quality of service.
@c 
@c @subsection Operation Class 4
@c 
@c The main features of operation class 4 transactions are:
@c 
@c @itemize 
@c @item Operation success is @emph{not} reported.
@c @item Operation failure is @emph{not} reported.
@c @end itemize 
@c 
@c Operation class 4 has no structure to the transaction and has no separate phases.  Each transaction component is
@c transmitted from source to destination independently, appropriate addressing information is included with each component
@c sequence.  As the components are transmitted independently from source to destination, there are, in general, no
@c guarantees of proper sequence and completeness of the data transmission.

@subsection Local Management

The TRI specifications also define a set of local management functions that apply to both COAS and CLAS modes of
communication.  These services have local significance only.

Table 1 and Table 2 summarizes the TRI service primitives by their state and service.

@sp 1
@center Table 1@strong{@emph{.  Service Primitives for Connection Mode Association}}

@multitable @columnfractions .20 .20 .60
@item @strong{STATE}
@tab @strong{SERVICE}
@tab @strong{PRIMITIVES}

@item Local@*Management
@tab Information@*Reporting
@tab TR_INFO_REQ, TR_INFO_ACK,@*TR_ERROR_ACK

@item
@tab Bind
@tab TR_BIND_REQ, TR_BIND_ACK,@*TR_UNBIND_ACK, TR_OK_ACK,@*TR_ERROR_ACK

@item
@tab Options@*Management
@tab TR_OPTMGMT_REQ, TR_OK_ACK,@*TR_ERROR_ACK

@item Association@*Establishment
@tab Transaction@*Begin
@tab TR_BEGIN_REQ, TR_BEGIN_IND,@*TR_BEGIN_RES, TR_BEGIN_CON,@*TR_TOKEN_REQ, TR_TOKEN_ACK,@*TR_OK_ACK, TR_ERROR_ACK

@item Association@*Data Transfer
@tab Transaction@*Continue
@tab TR_CONT_REQ, TR_CONT_IND

@item Association@*Release
@tab Transaction@*End
@tab TR_END_REQ, TR_END_IND

@item
@tab Transaction@*Abort
@tab TR_ABORT_REQ, TR_ABORT_IND
@end multitable

@sp 1
@center Table 2@strong{@emph{.  Service Primitives for Connectionless Mode Association}}

@multitable @columnfractions .20 .20 .60
@item @strong{STATE}
@tab @strong{SERVICE}
@tab @strong{PRIMITIVES}

@item Local@*Management
@tab Information@*Reporting
@tab TR_INFO_REQ, TR_INFO_ACK,@*TR_ERROR_ACK

@item
@tab Bind
@tab TR_BIND_REQ, TR_BIND_ACK,@*TR_UNBIND_ACK, TR_OK_ACK,@*TR_ERROR_ACK

@item
@tab Options@*Management
@tab TR_OPTMGMT_REQ, TR_OK_ACK,@*TR_ERROR_ACK

@item Association@*Unitdata
@tab Transaction@*Unidirectional
@tab TR_UNI_REQ, TR_UNI_IND
@end multitable

@node TRI Services Definition
@chapter TRI Services Definition

This section describes the services of the TRI primitives.  Time-sequence diagrams @footnote{Conventions for the
time-sequence diagrams are defined in ITU-T X.210, ISO/IEC 10731:1994.} that illustrate the sequence of primitives are
used.  The format of the primitives will be defined later in this document.

@section Local Management Services Definition

The services defined in this section are outside the scope of the international standards.  These services apply to both
connection-mode as well as connectionless modes of communication.  They are involved for the
initialization/de-initialization of a stream connected to the TR provider.  They are also used to manage options
supported by the TR provider and to report information on the supported parameter values.

@subsection Transaction Information Reporting Service
This service provides information on the options supported by the TR provider.

@itemize 
@item TR_INFO_REQ:
@prindex TR_INFO_REQ
This primitive request that the TR provider returns the values of all the supported protocol parameters.  This request
may be invoked during any phase.
@item TR_INFO_ACK:
@prindex TR_INFO_ACK
This primitive is in response to the TR_INFO_REQ primitive and returns the values of the supported protocol parameters
to the TR user.
@end itemize 

The sequence of primitives for transaction information management is shown in @emph{Figure 2}.

@cartouche
@center Figure 2@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Transaction Information Reporting Service}}
@image{tri_new1,3.5in}
@end cartouche

@subsection TR User Bind Service

This service allows an originating address to be associated with a stream.  It allows the TR user to negotiate the
number of transaction begin indications that can remain unacknowledged for that TR user (a transaction begin indication
is considered unacknowledged while it is awaiting a corresponding transaction response or abort request from the TR
user).  This service also defines a mechanism that allows a stream (bound to the address of the TR user) to be reserved
to handle incoming transactions only.  This stream is referred to as the listener stream.

@itemize 
@item TR_BIND_REQ:
@prindex TR_BIND_REQ
This primitive request that the TR user be bound to a particular originating address, and negotiate the number of
allowable outstanding transaction indications for that address.
@item TR_BIND_ACK:
@prindex TR_BIND_ACK
This primitive is in response to the TR_BIND_REQ primitive and indicates to the user that the specified TR user has been
bound to a protocol address.
@end itemize 

The sequence of primitives for the TR user bind service is shown in @emph{Figure 3}.

@cartouche
@center Figure 3@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TR User Bind Service}}
@image{tri_new2,3.5in}
@end cartouche

@subsection TR User Unbind Service

This service allows the TR user to be unbound from a protocol address.

@itemize 
@item TR_UNBIND_REQ:
@prindex TR_UNBIND_REQ
This primitive requests that the TR user be unbound from the protocol address it had previously been bound to.
@end itemize 

The sequence of primitives for the TR user unbind service is shown in @emph{Figure 4}.

@cartouche
@center Figure 4@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TR User Unbind &amp; Receipt Acknowledgement Services}}
@image{tri_new3,3.5in}
@end cartouche

@subsection Receipt Acknowledgement Service

@itemize 
@item TR_OK_ACK:
@prindex TR_OK_ACK
This primitive indicates to the TR user that the previous TR user originated primitive was received successfully by the
TR provider.
@end itemize 

An example showing the sequence of primitives for successful receive acknowledgement is depicted in @emph{Figure 4}.

@subsection Options Mangement Service

This service allows the TR user to manage the QOS parameter values associated with the TR provider.

@itemize 
@item TR_OPTMGMT_REQ:
@prindex TR_OPTMGMT_REQ
This primitive allows the TR user to select default values for QOS parameters within the range supported by the TR
provider, and to indicate the default selection of return option.
@end itemize 

@emph{Figure 5} shows the sequence of primitives for transaction options management.

@cartouche
@center Figure 5@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Options Management Service}}
@image{tri_new4,3.5in}
@end cartouche

@subsection Error Acknowledgement Service

@itemize 
@item TR_ERROR_ACK:
@prindex TR_ERROR_ACK
This primitive indicates to the TR user that a non-fatal error has occurred in the last TR user originated request or
response primitive (listed in ?) on the stream.
@end itemize 

@emph{Figure 6} shows the sequence of primitives for the error management primitive.

@cartouche
@center Figure 6@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Error Acknowledgement Service}}
@image{tri_new5,3.5in}
@end cartouche

@section Connection-Oriented Mode Services Definition

This section describes the required transaction service primitives that define the connection mode interface.

The queue model for connection-oriented services are discussed in more detail in ITU-T X.217 and ITU-T Q.771.

The queue model represents the operation of a transaction association in the abstract by a pair of queues linking two
transaction users.  There is one queue for each direction of component flow.  Each queue represents a flow control
function in one direction of transfer.  The ability of a user to add objects to a queue will be determined by the
behaviour of the user removing objects from that queue, and the state of the queue.  The pair of queues is considered to
be available for each potential transaction association.  Objects that are entered or removed from the queue are either
as a result of interactions at the two transaction addresses, or as the result of TR provider initiatives.

@itemize 
@item A queue is empty until a transaction object has been entered and can be returned to this
state, with loss of its contents, by the TR provider.
@item Objects may be entered into a queue as a result of the actions of the source TR user, subject
to control by the TR provider.
@item Objects may also be entered into a queue by the TR provider.
@item Objects are removed from the queue under the control of the TR user in the same order as they
were entered except:
@enumerate 
@item If the object is of type defined to be able to advance ahead of the preceding object (however,
no object is defined to be able to advance ahead of another object of the same type), or
@item If the following object is defined to be destructive with respect to the preceding object on
the queue.  If necessary, the last object on the queue will be deleted to allow a destructive object
to be entered - they will therefore always be added to the queue.  For example, ``abort'' objects
are defined to be destructive with respect to all other objects.
@end enumerate 
@end itemize 

@emph{Table 3} shows the ordering relationships among the queue model objects.

@c Table 3@strong{@emph{.  Ordering Relationships Between Queue Model Objects}}

@multitable @columnfractions .2 .2 .2 .2 .2
@item @strong{Object X} @tab @strong{BEGIN} @tab @strong{CONT} @tab @strong{END} @tab @strong{ABORT} 
@item @strong{Object Y} @tab @tab @tab @tab 
@item BEGIN @tab N/A @tab - @tab - @tab DES 
@item CONT @tab N/A @tab - @tab - @tab DES 
@item DISC @tab N/A @tab N/A @tab - @tab - 
@end multitable 

@multitable @columnfractions .09 .91
@item AA @tab Indicates that Object X is defined to be able to advance ahead of preceding Object Y 
@item DES @tab Indicates that Object X is defined to be destructive with respect to the preceding Object Y.  
@item - @tab Indicates that Object X is neither destructive with respect to Object Y, nor able to advance ahead of Object Y 
@item N/A @tab Indicates that Object X will not occur in a position succeeding Object Y in a valid state of a queue.  
@end multitable 

@subsection Transaction Initiation Phase

A pair of queues is associated with a transaction association between two transaction users when the TR provider
receives a
TR_BEGIN_REQ
@prindex TR_BEGIN_REQ
primitive at one of the TR users resulting in a begin object being entered into the queue.  The queues will remain
associated with the transaction until a
TR_END_REQ
@prindex TR_END_REQ
or
TR_ABORT_REQ
@prindex TR_ABORT_REQ
primitive (resulting in an end or abort object) is either entered or removed from a queue.  Similarly, in the queue from
the destination TR user, objects can be entered into the queue only after the begin object associated with the
TR_BEGIN_RES
@prindex TR_BEGIN_RES
has been entered into the queue.  Alternatively, the destination TR user can enter an end or abort object into the queue
instead of the begin object to terminate the transaction.

The transaction establishment procedure will fail if the TR provider is unable to establish a transaction association,
or if the destination TR user is unable to accept the
TR_BEGIN_IND
@prindex TR_BEGIN_IND
(see Transaction Termination primitive definition).

@subsubsection User Primitives Successful Transaction Establishment

@itemize 
@item TR_BEGIN_REQ:
@prindex TR_BEGIN_REQ
This primitive requests that the TR provider form a transaction association with the specified destination TR user.
@item TR_BEGIN_RES:
@prindex TR_BEGIN_RES
This primitive requests that the TR provider accept a previous transaction indication.
@end itemize 

@subsubsection Provider Primitives Successful Transaction Establishment

@itemize 
@item TR_BEGIN_IND:
@prindex TR_BEGIN_IND
This primitive indicates to the TR user that a transaction association request has been made by a user at the specified
source address.
@item TR_BEGIN_CON:
@prindex TR_BEGIN_CON
This primitive indicates to the TR user that a transaction initiation request has been confirmed on the specified
responding address.
@end itemize 

The sequence of primitives in a successful transaction initiation is defined by the time sequence
diagrams as shown in @emph{Figure 7}.

@cartouche
@center Figure 7@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Successful Transaction Initiation}}
@image{tri_new6,3.5in}
@end cartouche

The sequence of primitives for the transaction initiation response token value determination is shown
in @emph{Figure 8} (procedures for transaction initiation response token value determination are
discussed in sections 4.1.3 and 4.1.4).

@cartouche
@center Figure 8@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Transaction Response Token Value Determination}}
@image{tri_new7,3.5in}
@end cartouche

@subsection Transaction Component Transfer

Flow control on the transaction association is done by management of the queue capacity, and by
allowing objects of certain types to be inserted to the queues, as shown in @emph{Table 4}.

@subsubsection Primitives for Component Transfer

@itemize 
@item TR_CONT_REQ:
@prindex TR_CONT_REQ
This primitive requests that the TR provider transfer the specified components.
@item TR_CONT_IND:
@prindex TR_CONT_IND
This primitive indicates to the TR user that this message contains
components.
@end itemize 

@emph{Figure 9} shows the sequence of primitives for successful component transfer.  The sequence of
primitives may remain incomplete if a
TR_END_REQ,
@prindex TR_END_REQ
TR_END_IND,
@prindex TR_END_IND
TR_ABORT_REQ,
@prindex TR_ABORT_REQ
or
TR_ABORT_IND
@prindex TR_ABORT_IND
primitive occurs.

@cartouche
@center Figure 9@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Component Transfer}}
@image{tri_new8,3.5in}
@end cartouche

@subsection Transaction Termination Phase

The transaction association procedure is initialized by insertion of an end or abort object
(associated with a
TR_END_REQ
@prindex TR_END_REQ
or
TR_ABORT_REQ)
@prindex TR_ABORT_REQ
into the queue.  As shown in Table?, the termination
procedure is destructive with respect to other objects in the queue, and eventually results in the
emptying of queues and termination of the transaction association.

The sequence of primitives depends on the origin of the termination action.  The sequence may be:

@enumerate 
@item invoked by on TR user, with a request from that TR user leading to an indication to the other;
@item invoked by both TR users, with a request from each of the TR users;
@item invoked by the TR provider, with an indication to each of the NS users;
@item invoked independently by one TR user and the TR provider, with a request from the originating
TR user and an indication to the other.
@end enumerate 

@subsubsection Primitives for Transaction Termination

@itemize 
@item TR_END_REQ:
@prindex TR_END_REQ
This primitive requests that the TR provider deny an outstanding request for a transaction association or normal
termination of an existing transaction.
@item TR_ABORT_REQ:
@prindex TR_ABORT_REQ
This primitive requests that the TR provider deny an outstanding request for a transaction association or abnormal
termination of an existing transaction.
@item TR_END_IND:
@prindex TR_END_IND
This primitive indicates to the TR user that either a request for transaction initiation has been denied or an existing
transaction has been terminated normally.
@item TR_ABORT_IND:
@prindex TR_ABORT_IND
This primitive indicates to the TR user that either a request for transaction initiation has been denied or an existing
transaction has been terminated abnormally.
@end itemize 

The sequence of primitives are shown in the time sequence diagrams in the figures that follow:

@cartouche
@center Figure 10@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR User Invoked Termination}}
@image{tri_new9,3.5in}
@end cartouche

@cartouche
@center Figure 11@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TR User Invoked Termination}}
@image{tri_ne10,3.5in}
@end cartouche

@cartouche
@center Figure 12@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR Provider Invoked Termination}}
@image{tri_ne11,3.5in}
@end cartouche

@cartouche
@center Figure 13@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TR User and TR Provider Invoked Termination}}
@image{tri_ne12,3.5in}
@end cartouche

A TR user may reject a transaction initiation attempt by issuing a
TR_ABORT_REQ.
@prindex TR_ABORT_REQ
The originator
parameter in the
TR_ABORT_REQ
@prindex TR_ABORT_REQ
will indicate TR user invoked termination.  The sequence of primitives is shown in @emph{Figure 14}.

@cartouche
@center Figure 14@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR User Rejection of a Transaction Initiation Attempt}}
@image{tri_ne13,3.5in}
@end cartouche

If the TR provider is unable to establish a transaction, it indicates this to the requester by an
TR_ABORT_IND.
@prindex TR_ABORT_IND
The originator of the primitive indicates a TR provider invoked release.  This is shown in @emph{Figure 15}.

@cartouche
@center Figure 15@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR Provider Rejection of a Transaction Initiation Attempt}}
@image{tri_ne14,3.5in}
@end cartouche

@section Connectionless Mode Services Definition

The connectionless mode service allows for the transfer of transaction components in one and both directions
simultaneously without establishing a transaction dialogue.  A set of primitives are defined that carry transaction
components and control information between the TR user and the TR provider entities.  The primitives are modelled as
requests initiated by the TR user and indications initiated by the TR provider.  Indications may be initiated by the TR
provider independently from requests by the TR user.

The connectionless mode service consists of one phase.

@subsection Request and Response Primitives

@itemize 
@item TR_UNI_REQ:
@prindex TR_UNI_REQ
This primitive requests that the TR provider send the transaction components to the specified destination.
@item TR_UNI_IND:
@prindex TR_UNI_IND
This primitive indicates to the TR user that a component sequence has been received from the specified originating
address.
@end itemize 

@emph{Figure 16} shows the sequence of primitives for the connectionless mode of transfer.

@cartouche
@center Figure 16@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Connectionless Mode Data Transfer}}
@image{tri_ne15,3.5in}
@end cartouche

@itemize 
@item TR_NOTICE_IND:
@prindex TR_NOTICE_IND
This primitive indicates to the TR user that the components with the specified destination address and QOS parameters
produced an error.  This primitive is specific to CLAS.
@end itemize 

@emph{Figure 17} shows the sequence of primitives for the CLAS error management
primitive.

@cartouche
@center Figure 17@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{CLAS Error Indication Service}}
@image{tri_ne16,3.5in}
@end cartouche

@node TRI Primitives
@chapter TRI Primitives
This section describes the format and parameters of the TRI primitives.  In addition, it discusses the states in which
the primitive is valid, the resulting state, and the acknowledgement that the primitive expects.

@menu
* Management Primitives::
* Connection-Oriented Mode Primitives::
@end menu

The mapping of TRI of TRI primitives to the primitives defined in ITU-T Q.771 are shown in @ref{Mapping TRI Primitives
to ITU-T Q.771}.  The state/event tables for these primitives are shown in @ref{State/Event Tables}.  The precedence
tables for the TRI primitives are shown in @ref{Primitive Precedence Tables}.  Rules for SS7 conformance are described
in @ref{TCAP Transport Provider TPI Addendum}.

The following tables provide a summary of the TR primitives and their parameters.

@sp 1
@center Table 4@strong{@emph{.  Transaction Initiation Transaction Service Primitives}}
@multitable @columnfractions .25 .25 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS} 
@item TR Initiation @tab TR_BEGIN_REQ @tab () 
@item @tab TR_BEGIN_IND @tab () 
@item @tab TR_BEGIN_RES @tab () 
@item @tab TR_BEGIN_CON @tab () 
@end multitable 

@sp 1
@center Table 5@strong{@emph{.  Transaction Continuation Transaction Service Primitives}}
@multitable @columnfractions .25 .25 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS} 
@item TR Continuation @tab TR_CONT_REQ @tab () 
@item @tab TR_CONT_IND @tab () 
@end multitable 

@sp 1
@center Table 6@strong{@emph{.  Transaction Termination Transaction Service Primitives}}
@multitable @columnfractions .25 .25 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS} 
@item TR Termination @tab TR_END_REQ @tab () 
@item @tab TR_END_IND @tab () 
@item @tab TR_ABORT_REQ @tab () 
@item @tab TR_ABORT_IND @tab () 
@end multitable 

@page
@node Management Primitives
@section Management Primitives
These primitives apply to all association modes.
@menu
* TR_INFO_REQ::
* TR_INFO_ACK::
* TR_BIND_REQ::
* TR_BIND_ACK::
* TR_UNBIND_REQ::
* TR_ADDR_REQ::
* TR_ADDR_ACK::
* TR_OPTMGMT_REQ::
* TR_OPTMGMT_ACK::
* TR_OK_ACK::
* TR_ERROR_ACK::
@end menu
@subsection Transaction Information
@node TR_INFO_REQ
@subsubsection Transaction Information Request
@subsubheading TR_INFO_REQ
@prindex TR_INFO_REQ
This primitive request the TR provider to return the values of all supported protocol parameters
(see TR_INFO_ACK), and also the current state of the TR provider (as defined in Appendix B).  This
primitive does not affect the state of the TR provider and does not appear in the state tables.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:
@smallexample
typedef struct TR_info_req @{
        ulong PRIM_type;                /* Always TR_INFO_REQ */
@} TR_info_req_t;
@tpindex TR_info_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.
@end vtable
@subsubheading Valid States
This primitive is valid in any state where a local acknowledgement is not pending.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
For the rules governing the requests made by this primitive, see the @code{TR_INFO_ACK} primitive described in @ref{TR_INFO_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_INFO_ACK} primitive described in @ref{TR_INFO_ACK}.
@item @emph{Non-fatal Errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
There are no errors associated with the issuance of this primitive.
@end itemize 

@page
@node TR_INFO_ACK
@subsubsection Transaction Information Acknowledgement
@subsubheading TR_INFO_ACK
@prindex TR_INFO_ACK
This primitive indicates to the TR user any relevant protocol-dependent parameters.@footnote{}  It
should be initiated in response to the TR_INFO_REQ primitive described above.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:
@smallexample
typedef struct TR_info_ack @{
        long PRIM_type;                 /* Always TR_INFO_ACK */
        long ASDU_size;                 /* maximum ASDU size */
        long EASDU_size;                /* maximum EASDU size */
        long CDATA_size;                /* connect data size */
        long DDATA_size;                /* discon data size */
        long ADDR_size;                 /* address size */
        long OPT_size;                  /* options size */
        long TIDU_size;                 /* transaction i/f data unit size */
        long SERV_type;                 /* service type */
        long CURRENT_state;             /* current state */
        long PROVIDER_flag;             /* type of TR provider */
        long TRI_version;               /* version # of tri that is supported */
@} TR_info_ack_t;
@tpindex TR_info_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.
@item ASDU_size
Specifies the maximum size (in octets) of Transaction Service User Data supported by the TR
provider.
@item EASDU_size
Specifies the maximum size (in octets) of Expedited Transaction Service User Data supported by the
TR provider.
@item CDATA_size
Specifies the maximum number of octets of data that may be associated with a transaction initiation
primitive.
@item DDATA_size
Specifies the maximum number of octets of data that may be associated with a transaction termination
primitive.
@item ADDR_size
Specifies the maximum size (in decimal digits) of a protocol address.
@item ADDR_length
@itemx ADDR_offset
Specifies the length in bytes and offset from the beginning of the @samp{M_PCPROTO} message block of the
protocol address bound on the stream on which the TR_INFO_REQ was issued (a protocol address is bound
to a stream via a TR_BIND_REQ).
@item QOS_length
@itemx QOS_offset
@item QOS_range_length
@itemx QOS_range_offset
@item OPTIONS_flags
@item TIDU_size
@item SERV_type
@item CURRENT_state
@item PROVIDER_type
@item NODU_size
@item PROTOID_length
@itemx PROTOID_offset
@item TRI_version
@end vtable

@page
@subsection Transaction Protoocl Address Management
@node TR_BIND_REQ
@subsubsection Transaction Bind Request
@subsubheading TR_BIND_REQ
This primitive requests that the TR provider bind a protocol address to the @dfn{stream}, negotiate the number of
dialogue indications allowed to be outstanding by the TR provider for the specified protocol address, and
activate@footnote{A @dfn{stream} is viewed as active when the association provider may receive and transmit APDUs (ACSE
protocol data units) associated with the @dfn{stream}.} the @dfn{stream} associated with the protocol address.
@prindex TR_BIND_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block.  The format of the @samp{M_PROTO}
@prindex M_PROTO
message block is as follows:@footnote{The format of the @var{TR_BIND_REQ} primitive is chosen to be as consistent as
possible with the equivalent TPI and NPI primitives.}
@smallexample
typedef struct TR_bind_req @{
        ulong PRIM_type;                /* Always TR_BIND_REQ */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* address offset */
        ulong XACT_number;              /* maximum outstanding transaction reqs. */
        ulong BIND_flags;               /* bind flags */
@} TR_bind_req_t;
@tpindex TR_bind_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_BIND_REQ}.
@item ADDR_length
Specifies the length@footnote{All lengths, offsets and sizes in all structures refer to the number of octets.} of the
protocol address to be bound to the @dfn{stream}.
@item ADDR_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block where the protocol address begins.  The
proper alignment of the address in the @samp{M_PROTO} message block is not guaranteed.  The address in the
@samp{M_PROTO} message block is, however, aligned the same as it was received from the TR user.
@item XACT_number
@footnote{This field should be ignored by TR providers providing only a unidirectional (TCAP operation class 4, ROSE
operation class 5) service.}The requested number of dialogue begin indications@footnote{If the number of outstanding
``begin'' indications equals @var{XACT_number}, the TR provider need not discard further incoming ``begin'' indications,
but may choose to queue them internally until the number of outstanding ``begin'' indications dropts below
@var{XACT_number}.} allowed to be outstanding by the TR provider for the specified protocol address.
Only one stream per protocol address is allowed to have a @var{XACT_number} greater than zero.  This indicates to the TR
provider that the @dfn{stream} is a @dfn{listener stream} for the TR user.  This @dfn{stream} will be used by the TR
provider for dialogue ``begin'' indications for that protocol address, @pxref{TR_BEGIN_IND}.
@item BIND_flags
Unused.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_UNBND}.
@subsubheading New State
The new state is @samp{TRS_WACK_BREQ}.
@subsubheading Rules
For the rules governing the requests made by this primitive, see the @code{TR_BIND_ACK} primitive described in @ref{TR_BIND_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_BIND_ACK} primitive described in @ref{TR_BIND_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
@vtable @code
@item TRBAADDR
Indicates that the protocol address was in an incorrect format or the address contained illegal information.  It is not
intended to indicate protocol errors.
@item TRNOADDR
Indicates that the TR provider could not allocate an address.
@item TRACCES
Indicates that the user did not have proper permissions for the use of the requested address.
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@item TRADDRBUSY
Indicates that the requested address is already in use.
@end vtable
@end itemize

@page
@node TR_BIND_ACK
@subsubsection Transaction Bind Acknowledgement
@subsubheading TR_BIND_ACK
@prindex TR_BIND_ACK
This primitive indicates to the TR user that the specified protocol address has been bound to the @dfn{stream}, that the
specified number of dialogue indications are allowed to be queued by the TR provider for the specified protocol address,
and that the @dfn{stream} associated with the specified protocol address has been activated.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block.  The format of the @samp{M_PCPROTO} message block is as follows:
@smallexample
typedef struct TR_bind_ack @{
        ulong PRIM_type;                /* Always TR_BIND_ACK */
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* address offset */
        ulong XACT_number;              /* open transactions */
        ulong TOKEN_value;              /* value of "token" assigned to stream */
@} TR_bind_ack_t;
@tpindex TR_bind_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.
@item ADDR_length
Indicates the length of the protocol address that was bound to the @dfn{stream}.
@item ADDR_offset
Indicates the offset from the beginning of the @samp{M_PCPROTO} message block where the protocol address begins.
The proper alignment of the address in the @samp{M_PCPROTO} message block is not guaranteed.
@item XACT_number
@footnote{This field does not apply to unidirectional TR providers.}
Indicates the accepted number of dialogue indications allowed to be outstanding by the TR provider for the specified
protocol address.
@item TOKEN_value
Indicates a token value to be used when accepting dialogues indicated on other @dfn{streams} using this @dfn{stream}.
@end vtable
@subsubheading Valid State
This primitive is issued in response to a @samp{TR_BIND_REQ} and is valid in state @samp{TRS_WACK_BREQ}.
@subsubheading New State
On success, the new state is @samp{TRS_IDLE}; on error, @samp{TRS_UNBND}.
@subsubheading Rules
The following rules apply to the binding of the specified protocol address to the @dfn{stream}:
@itemize ---
@item If the @var{ADDR_length} field in the @samp{TR_BIND_REQ} primitive is zero (0), then the TR provider must assign a
protocol address to the user.
@item The TR provider is to bind the protocol address as specified in the @samp{TR_BIND_REQ} primitive.  If the
requested protocol address is in use or if the TR provider cannot bind the specified address, it must return an error.
@end itemize

The following rules apply to negotiating the @var{XACT_number} argument:
@itemize ---
@item The returned value must be less than or equal to the corresponding requested number as indicated in the
@samp{TR_BIND_REQ} primitive.
@item If the requested value is greater than zero, the returned value must also be greater than zero.
@item Only one @dfn{stream} that is bound to the indicated protocol address any have a negotiated accepted number of
maximum transaction requests greater than zero.  If a @samp{TR_BIND_REQ} primitive specifies a value greater than zero,
but another @dfn{stream} has already bound itself to the given protocol address with a value greater than zero, the TR
provider must return an error.
@item If a @dfn{stream} with @var{XACT_number} greater than zero is used to accept a dialogue (without specifying a
@var{TRANS_id}), the @dfn{stream} will be found busy during the duration of that connection and no other @dfn{streams}
may be bound to that protocol address with a @var{XACT_number} greater than zero.  This will prevent more than one
@dfn{stream} bound to the identical protocol address from accepting dialogue indications.  See also @ref{TR_BEGIN_RES}.
@item A @dfn{stream} requesting a @var{XACT_number} of zero should always be legal.  This indicates to the TR provider
that the @dfn{stream} is to be used to request dialogues only.
@item @ @dfn{stream} with a negotiated @var{XACT_number} greater than zero may generate dialogue requests
(@pxref{TR_BEGIN_REQ},) or accept dialogue indications (@pxref{TR_BEGIN_RES}.)
@end itemize

If the above rules result in an error condition, then the TR provider must issue a @samp{TR_ERROR_ACK} primitive to the
TR user specifying the error as defined in the description of the @samp{TR_BIND_REQ} primitive, @ref{TR_BIND_REQ}.


@page
@node TR_UNBIND_REQ
@subsubsection Transaction Unbind Request
@subsubheading TR_UNBIND_REQ
@prindex TR_UNBIND_REQ
This primitive requests that the TR provider unbind the protocol address previously associated with the @dfn{stream} and
deactivate the @dfn{stream}.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:
@smallexample
typedef struct TR_unbind_req @{
        ulong PRIM_type;                /* Always TR_UNBIND_REQ */
@} TR_unbind_req_t;
@tpindex TR_unbind_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_IDLE}.
@subsubheading New State
The new state is @samp{TRS_WACK_UREQ}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK} primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_ADDR_REQ
@subsubsection Transaction Protocol Address Request
@subsubheading TR_ADDR_REQ
@prindex TR_ADDR_REQ
This primitive requests that the TR provider return the local protocol address that is bound to the @dfn{stream} and the
address of the remote ASE if a association has been established.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:
@smallexample
typedef struct TR_addr_req @{
        long PRIM_type;             /* always TR_ADDR_REQ */
@} TR_addr_req_t;
@tpindex TR_addr_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_ADDR_REQ}.
@end vtable
@subsubheading Valid State
This primitive is valid in any state where a local acknowledgement is not pending.
@subsubheading New State
The new state is unchanged.
@subsubheading Rules
For the rules governing the requests made by this primitive, see the @code{TR_ADDR_ACK} primitive described in @ref{TR_ADDR_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_ADDR_ACK} primitive described in @ref{TR_ADDR_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
There are no errors associated with the issuance of this primitive.
@end itemize

@page
@node TR_ADDR_ACK
@subsubsection Transaction Protocol Address Acknowledgement
@subsubheading TR_ADDR_ACK
@prindex TR_ADDR_ACK
This primitive indicates to the TR user the addresses of the local and remote ASE.  The local address is the protocol
address that has been bound to the @dfn{stream}.  If an association has been established, the remote address is the
protocol address of the remote ASE.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@smallexample
typedef struct TR_addr_ack @{
        long PRIM_type;             /* always TR_ADDR_ACK */
        long LOCADDR_length;        /* length of local address */
        long LOCADDR_offset;        /* offset of local address */
        long REMADDR_length;        /* length of remote address */
        long REMADDR_offset;        /* offset of remote address */
@} TR_addr_ack_t;
@tpindex TR_addr_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type; always @samp{TR_ADDR_ACK}.
@item LOCADDR_length
Indicates the length of the protocol address that was bound to the @dfn{stream}.
@item LOCADDR_offset
Indicates the offset from the beginning of the @samp{M_PCPROTO} message block where the protocol address begins.
@item REMADDR_length
Indicates the length of the protocol address of the remote ASE.
@item REMADDR_offset
Indicates the offset from the beginning of the @samp{M_PCPROTO} message block where the protocol address begins.
@end vtable
@subsubheading Valid State
This primitive is issued in response to a @samp{TR_ADDR_REQ} primitive and is valid in any state where a response is
pending to a @samp{TR_ADDR_REQ}.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
The following rules apply:
@itemize ---
@item If the interface is in the @samp{TRS_UNINIT} or @samp{TRS_UNBND} state, the values returned for
@var{LOCADDR_length} and @var{LOCADDR_offset} must be zero (0).
@item If the interface is in any state but @samp{TRS_DATAXFER}, the values returned for @var{REMADDR_length} and
@var{REMADDR_offset} must be zero (0).
@end itemize

@page
@subsection Transaction Options Management
@node TR_OPTMGMT_REQ
@subsubsection Transaction Options Management Request
@subsubheading TR_OPTMGMT_REQ
@prindex TR_OPTMGMT_REQ
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@smallexample
typedef struct TR_optmgmt_req @{
        ulong PRIM_type;                /* Always T_OPTMGMT_REQ */
        ulong OPT_length;               /* options length */
        ulong OPT_offset;               /* options offset */
        ulong MGMT_flags;               /* options data flags */
@} TR_optmgmt_req_t;
@tpindex TR_optmgmt_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_OPTMGMT_REQ}.
@item OPT_length
@item OPT_offset
@item MGMT_flags
@end vtable
@subsubheading Flags
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
For the rules governing the requests made by this primitive, see the @var{TR_OPTMGMT_ACK} primitive described in
@ref{TR_OPTMGMT_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement is indicated with the @var{TR_OPTMGMT_ACK} primitive described in @ref{TR_OPTMGMT_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @var{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_OPTMGMT_ACK
@subsubsection Transaction Options Management Acknowledgement
@subsubheading TR_OPTMGMT_ACK
@prindex TR_OPTMGMT_ACK
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@smallexample
typedef struct TR_optmgmt_ack @{
        ulong PRIM_type;                /* Always T_OPTMGMT_ACK */
        ulong OPT_length;               /* options length */
        ulong OPT_offset;               /* options offset */
        ulong MGMT_flags;               /* options data flags */
@} TR_optmgmt_ack_t;
@tpindex TR_optmgmt_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{T_OPTMGMT_ACK}.
@item OPT_length
@item OPT_offset
@item MGMT_flags
@end vtable
@subsubheading Flags
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@subsection Transaction Error Management
@node TR_OK_ACK
@subsubsection Transaction Successful Receipt Acknowledgement
@subsubheading TR_OK_ACK
@prindex TR_OK_ACK
This primitive indicates to the TR user that the previous TR-user-originated primitive was received successfully by the
TR provider.  It does not indicate to the TR user any TR protocol action taken due to the issuance of the last
primitive.  This may only be initiated as an acknowledgement for those primitives that require one.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@smallexample
typedef struct TR_ok_ack @{
        ulong PRIM_type;                /* Always T_OK_ACK */
        ulong CORRECT_prim;             /* correct primitive */
@} TR_ok_ack_t;
@tpindex TR_ok_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_OK_ACK}.
@item CORRECT_prim
Indicates the primitive type that was successfully received.
@end vtable
@subsubheading Valid State
Valid in any state where a local acknowledgement requiring @samp{TR_OK_ACK} response is pending.
@subsubheading New State
Depends on the current state; @pxref{State/Event Tables}.

@page
@node TR_ERROR_ACK
@subsubsection Transaction Error Acknowledgement
@subsubheading TR_ERROR_ACK
@prindex TR_ERROR_ACK
This primitive indicates to the TR user that a non-fatal@footnote{For an overview of the error handling capabilities
available to the TR provider, see @ref{Diagnostics Requirements}.} error has occurred in the last TR-user-originated
primitive.  This may only be initiated as an acknowledgement for those primitives that require one.  It also indicates
to the TR user that no action was taken on the primitive that cause the error.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@smallexample
typedef struct TR_error_ack @{
        ulong PRIM_type;                /* Always T_ERROR_ACK */
        ulong ERROR_prim;               /* primitive in error */
        ulong TRI_error;                /* TRI error code */
        ulong UNIX_error;               /* UNIX error code */
        ulong TRANS_id;                 /* Transaction id */
@} TR_error_ack_t;
@tpindex TR_error_ack_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_ERROR_ACK}.
@item ERROR_prim
Indicates the primitive type that was in error.
@item TRI_error
Indicates the Transaction Sub-Layer Interface error code.
@item UNIX_error
Indicates the UNIX System error code.  This field is zero (0) unless the @var{TRI_error} is equal to @samp{TRSYSERR}.
@item TRANS_id
@end vtable
@subsubheading Valid State
This primitive is valid in any state where a local acknowledgement is pending and an error has occurred.
@subsubheading New State
The new state is the state that the interface was in before the primitive in error was issued, @pxref{State/Event
Tables}.
@subsubheading Rules
The TR provider is allowed to return any of the following TR error codes:
@table @var
@item TRBADADDR
Indicates that the protocol address as specified in the primitive was of an incorrect format or the address contained
illegal information.
@item TRBADOPT
Indicates that the options as specified in the primitive were in an incorrect format, or they contained illegal
information.
@item TRBADF
Indicates that the @dfn{stream} queue pointer as specified in the primitive was illegal.
@item TRNOADDR
Indicates that the TR provider could not allocate a protocol address.
@item TRACCES
Indicates that the user did not have proper permissions to use the protocol address or options specified in the
primitive.
@item TROUTSTATE
Indicates that the primitive would place the interface out of state.
@item TRBADSEQ
Indicates that the transaction identifier specified in the primitive was incorrect or illegal.
@item TRBADFLAG
Indicates that the flags specified in the primitive were incorrect or illegal.
@item TRBADDATA
Indicates that the amount of user data specified was illegal.
@item TRSYSERR
Indicates that a system error has occurred and that the UNIX System error is indicated in the primitive.
@item TRADDRBUSY
Indicates that the requested address is already in use.
@item TRRESADDR
Indicates that the TR provider requires the responding @dfn{stream} be bound to the same protocol address as the
@dfn{stream} on which the dialogue ``begin'' indication (@pxref{TR_BEGIN_IND}) was received.
@item TRNOTSUPPORT
Indicates that the TR provider does not support the requested capability.
@end table

@page
@node Connection-Oriented Mode Primitives
@section Connection-Oriented Mode Primitives
@menu
* TR_BEGIN_REQ::
* TR_BEGIN_IND::
* TR_BEGIN_RES::
* TR_BEGIN_CON::
* TR_CONT_REQ::
* TR_CONT_IND::
* TR_END_REQ::
* TR_END_IND::
* TR_ABORT_REQ::
* TR_ABORT_IND::
@end menu
@subsection Association Establishment Phase
The transaction begin service provides means to start a transaction between two TR-users.  This may be accompanied by
the transfer of TR-user information contained in @samp{M_DATA}
@prindex M_DATA
message blocks accompanying the primitive.
@node TR_BEGIN_REQ
@subsubsection Transaction Begin Request
@subsubheading TR_BEGIN_REQ
@prindex TR_BEGIN_REQ
This primitive requests that the TR provider form an association to the specified destination protocol address.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any user data is specified by the TR user.  The
format of the @samp{M_PROTO} message block is as follows:
@smallexample
typedef struct TR_begin_req @{
        ulong PRIM_type;                /* Always TR_BEGIN_REQ */
        ulong CORR_id;                  /* Correlation Id */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_begin_req_t;
@tpindex TR_begin_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_BEGIN_REQ}.
@item CORR_id
Specifies the correlation identifier for the newly formed transaction.  The correlation identifier is an identifier
chose by the TR user that uniquely identifies this association establishment request from other establishment requests
on the same @dfn{stream}.  If the @var{CORR_id} is zero (0), it specifies that this is the only transaction to be formed
on the requesting @dfn{stream} and attempts to form additional transactions before this transaction is complete will
fail.  The value of @var{CORR_id} will be returned in 
@item DEST_length
Specifies the length of the protocol address to which to establish an association.
@item DEST_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block where the protocol address begins.
@item ORIG_length
Specifies the length of the protocol address from which to establish an association.
@item ORIG_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block where the protocol address begins.
@item OPT_length
Specifies the length of the protocol options associated with the transaction.
@item OPT_offset
Sepcifies the offset from the beginning of the @samp{M_PROTO} message block where the protocol options begin.
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Notes
@subsubheading Rules
The following rules apply to the specification of parameters to this primitive:
@itemize ---
@item When the originating address is not specified, @var{ORIG_length} and @var{ORIG_offset} must be specified as zero
(0).
@item When the @var{ORIG_length} and @var{ORIG_offset} are zero (0), the originating address is the local address that
is implicitly associated with the access point from the local bind service (@pxref{TR_BIND_REQ}).
@item The destination address must be specified and the TR provider will return error @samp{TRNOADDR} if the
@var{DEST_length} and @var{DEST_offset} are zero (0).
@end itemize
@subsubheading Acknowledgements

@page
@node TR_BEGIN_IND
@subsubsection Transaction Begin Indication
@subsubheading TR_BEGIN_IND
@prindex TR_BEGIN_IND
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured
as follows:
@smallexample
typedef struct TR_begin_ind @{
        ulong PRIM_type;                /* Always TR_BEGIN_IND */
        ulong TRANS_id;                 /* Transaction id */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_begin_ind_t;
@tpindex TR_begin_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_BEGIN_IND}.
@item TRANS_id
@item DEST_length
@item DEST_offset
@item ORIG_length
@item ORIG_offset
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
@subsubheading Acknowledgements

@page
@node TR_BEGIN_RES
@subsubsection Transaction Begin Response
@subsubheading TR_BEGIN_RES
@prindex TR_BEGIN_RES
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured
as follows:
@smallexample
typedef struct TR_begin_res @{
        ulong PRIM_type;                /* Always TR_BEGIN_RES */
        ulong TRANS_id;                 /* Transaction id */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_begin_res_t;
@tpindex TR_begin_res_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_BEGIN_RES}.
@item TRANS_id
@item ORIG_length
@item ORIG_offset
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK} primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_BEGIN_CON
@subsubsection Transaction Begin Confirmation
@subsubheading TR_BEGIN_CON
@prindex TR_BEGIN_CON
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured as follows:
@smallexample
typedef struct TR_begin_con @{
        ulong PRIM_type;                /* Always TR_BEGIN_CON */
        ulong CORR_id;                  /* Correlation Id */
        ulong TRANS_id;                 /* Transaction id */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_begin_con_t;
@tpindex TR_begin_con_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_BEGIN_CON}.
@item CORR_id
@item TRANS_id
@item ORIG_length
@item ORIG_offset
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@subsection Association Continuation Phase
@node TR_CONT_REQ
@subsubsection Transaction Continue Request
@subsubheading TR_CONT_REQ
@prindex TR_CONT_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured as follows:
@smallexample
typedef struct TR_cont_req @{
        ulong PRIM_type;                /* Always TR_CONT_REQ */
        ulong TRANS_id;                 /* Transaction id */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_cont_req_t;
@tpindex TR_cont_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_CONT_REQ}.
@item TRANS_id
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
@subsubheading Acknowledgements
This primitive does not require acknowledgement.  If a non-fatal error occurs, it is the reponsibility of the peer ASE
to report it within the upper-layer protocol or using the @var{TR_ABORT_IND} primitive (@pxref{TR_ABORT_IND}).  Fatal
errors are indicated with the @samp{M_ERROR}
@prindex M_ERROR
message type which results in the failure of all operating system service routines on the @dfn{stream}.  The allowable
fatal errors are as follows:
@table @var
@item EPROTO
This error indicates on of the following unrecoverable protocol conditions:
@itemize ---
@item
@item
@end itemize
@end table

@page
@node TR_CONT_IND
@subsubsection Transaction Continue Indication
@subsubheading TR_CONT_IND
@prindex TR_CONT_IND
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured as follows:
@smallexample
typedef struct TR_cont_ind @{
        ulong PRIM_type;                /* Always TR_CONT_IND */
        ulong TRANS_id;                 /* Transaction id */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_cont_ind_t;
@tpindex TR_cont_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_CONT_IND}.
@item TRANS_id
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@subsection Association Termination Phase
@node TR_END_REQ
@subsubsection Transaction End Request
@subsubheading TR_END_REQ
@prindex TR_END_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured
as follows:
@smallexample
typedef struct TR_end_req @{
        ulong PRIM_type;                /* Always TR_END_REQ */
        ulong TRANS_id;                 /* Transaction id */
        ulong TERM_scenario;            /* Termination scenario */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_end_req_t;
@tpindex TR_end_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_END_REQ}.
@item TRANS_id
@item TERM_scenario
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK} primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_END_IND
@subsubsection Transaction End Indication
@subsubheading TR_END_IND
@prindex TR_END_IND
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured
as follows:
@smallexample
typedef struct TR_end_ind @{
        ulong PRIM_type;                /* Always TR_END_IND */
        ulong CORR_id;                  /* Correlation id */
        ulong TRANS_id;                 /* Transaction id */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_end_ind_t;
@tpindex TR_end_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_END_IND}.
@item CORR_id
@item TRANS_id
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@node TR_ABORT_REQ
@subsubsection Transaction Abort Request
@subsubheading TR_ABORT_REQ
@prindex TR_ABORT_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:
@smallexample
typedef struct TR_abort_req @{
        ulong PRIM_type;                /* Always TR_ABORT_REQ */
        ulong TRANS_id;                 /* Transaction id */
        ulong ABORT_cause;              /* Cause of the abort */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_abort_req_t;
@tpindex TR_abort_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_ABORT_REQ}.
@item TRANS_id
@item ABORT_cause
@item OPT_length
@item OPT_offset
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK} primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described in @ref{TR_ERROR_ACK}.  The allowable
errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_ABORT_IND
@subsubsection Transaction User Abort Indication
@subsubheading TR_ABORT_IND
@prindex TR_ABORT_IND
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:
@smallexample
typedef struct TR_abort_ind @{
        ulong PRIM_type;                /* Always TR_ABORT_IND */
        ulong CORR_id;                  /* Correlation id */
        ulong TRANS_id;                 /* Transaction id */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
        ulong ABORT_cause;              /* Cause of the abort */
        ulong ORIGINATOR;               /* Originator P or U */
@} TR_abort_ind_t;
@tpindex TR_abort_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_ABORT_IND}.
@item CORR_id
@item TRANS_id
@item OPT_length
@item OPT_offset
@item ABORT_cause
@item ORIGINATOR
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@node Connectionless Mode Primitives
@section Connectionless Mode Primitives
@menu
* TR_UNI_REQ::
* TR_UNI_IND::
* TR_NOTICE_IND::
@end menu
@subsection Transaction Phase
@node TR_UNI_REQ
@subsubsection Transaction Unidirectional Request
@subsubheading TR_UNI_REQ
@prindex TR_UNI_REQ
This primitive requests that the TR provider send the specified unidirectional (connectionless) message to the specified
destination with the specified options and optional originating protocol address.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured
as follows:
@smallexample
typedef struct TR_uni_req @{
        ulong PRIM_type;                /* Always TR_UNI_REQ */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
@} TR_uni_req_t;
@tpindex TR_uni_req_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_UNI_REQ}.
@item DEST_length
Specifies the length of the protocol address to which to send the unidirectional invocation.
@item DEST_offset
Specifies the offest from the beginning of the @samp{M_PROTO} message blcok where the protocol address begins.
@item ORIG_length
Specifies the length of the protocol address from which to send the unidirectional invocation.
Specification of the originating protocol address (@var{ORIG_length} and @var{ORIG_offset}) is optional.  When not
specified the TR provider will implicitly associate the local protocol address used in the bind service
(@pxref{TR_BIND_REQ}) with the primitive as the originating protocol address.
@item ORIG_offset
Specifies the offest from the beginning of the @samp{M_PROTO} message blcok where the protocol address begins.
@item OPT_length
Specifies the length of the protocol options associated with the unidirectional invocation.
@item OPT_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message blockw where the protocol options begin.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_IDLE}.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
@subsubheading Acknowledgements
This primitive does not require an acknowledgement.@footnote{This is a TCAP operations class 4 or a ROSE operations class 5
transaction that requires neither a positive or negative acknowledgement.}  If a non-fatal error occurs, it is the
responsibility of the TR provider to report it with the @samp{TR_NOTICE_IND} indication.  Fatal errors are indicated
with the @samp{M_ERROR}
@prindex M_ERROR
message type which results in the failure of all operating system service routines on the @dfn{stream}.  The allowable
fatal errors are as follows:
@table @var
@item EPROTO
This error indicates one of the following unrecoverable protocol conditions:
@itemize ---
@item The TR service interface was found to be in an incorrect state.
@item The amount of TR user data associated with the primitive defines an APDU (ACSE Protocol Data Unit) larger than
that allowed by the TR provider.
@end itemize
@end table

@page
@node TR_UNI_IND
@subsubsection Transaction Unidirectional Indication
@subsubheading TR_UNI_IND
@prindex TR_UNI_IND
This primitive indicates to the TR user that a unidirectional invocation has been received from the specified source
address.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, where each
@samp{M_DATA} message block contains at least one byte of data, structured as follows:
@smallexample
typedef struct TR_uni_ind @{
        ulong PRIM_type;                /* Always TR_UNI_REQ */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong ORIG_length;              /* Originating address length */
        ulong ORIG_offset;              /* Originating address offset */
        ulong OPT_length;               /* Options structure length */
        ulong OPT_offset;               /* Options structure offset */
@} TR_uni_ind_t;
@tpindex TR_uni_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_UNI_IND}.
@item DEST_length
Indicates the length of the protocol address to which the message was sent.  This is not necessarily the same as the
local protocol address to which the @dfn{stream} is bound.  The address provided here may contain additional information
for some protocols.  So, for example, under TCAP, although the @dfn{stream} is bound to an SCCP subsystem, this protocol
address may contain the SCCP Global Title.
@item DEST_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where the protocol address begins.
@item ORIG_length
Indicates the length of the protocol address from which the message was sent.
@item ORIG_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where the protocol address begins.
@item OPT_length
Indicates the length of the protocol options that were associated with the received message.
@item OPT_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where the protocol options begin.
@end vtable
@subsubheading Valid State
This primitive is only issued in state @samp{TRS_IDLE}.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
The proper alignment of the destination address, originating address and protocol options in the @samp{M_PROTO} mesasage
block is not guaranteed.

@page
@node TR_NOTICE_IND
@subsubsection Transaction Notice Indication
@subsubheading TR_NOTICE_IND
@prindex TR_NOTICE_IND
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing components for the dialogue, structured as follows:
@smallexample
typedef struct TR_notice_ind @{
        ulong PRIM_type;                /* Always TR_NOTICE_IND */
        ulong CORR_id;                  /* Correlation id */
        ulong TRANS_id;                 /* Transaction id */
        ulong REPORT_cause;             /* SCCP return cause */
@} TR_notice_ind_t;
@tpindex TR_notice_ind_t
@end smallexample
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_NOTICE_IND}.
@item CORR_id
@item TRANS_id
@item REPORT_cause
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@node Diagnostics Requirements
@chapter Diagnostics Requirements

There are two error handling facilities available to the TR user: one to handle non-fatal errors and one to handle fatal
errors.

@section Non-Fatal Errors

The non-fatal errors are those that a TR user can correct, and are reported in the form of an error acknowledgement to
the appropriate primitive in error.  Only those primitive which require acknowledgements may generate a non-fatal error
acknowledgement.  These acknowledgements always report syntactical error in the specified primitive when the TR provider
receives the primitive.  The primitive descriptions@footnote{@xref{TRI Primitives}} define those primitive and rules
regarding acknowledgement for each primitive.  These errors are reported to the TR user with the @samp{TR_ERROR_ACK}
primitive, (@pxref{TR_ERROR_ACK}), and give the TR user the option of reissuing the TR service primitive that cause the
error.  The @samp{TR_ERROR_ACK} primitive also indicates to the TR user that no action was taken by the TR provider upon
receipt of the primitive which cause the error.

These errors do not change the state of the TR service interface as seen by the TR user.  The state of the interface
after the issuance of a @samp{TR_ERROR_ACK} primitive should be the same as it was before the TR provider receive the
interface primitive that was in error.

The alloable errors that can be reported on the receipt of a TR initiated pirmitive are presented in the description of
the appropriate primitives, see @ref{TRI Primitives}.

@section Fatal Errors

Fatal errors are those that cannot be corrected by the TR user, or those errors that result in an uncorrectable error in
the interface or in the TR provider.

The most common of these errors are listed under the appropriate primitives (@pxref{TRI Primitives}).  The transaction
provider should issue fatal errors only if the transaction user cannot correct the condition that caused the error or if
the transaction provider has no means of reporting a transacion user correctable error.  If the transaction provider
detects an uncorrectable non-protocol error internal to the transaction provider, the provider should issue a fatal
error to the user.

Fatal errors are indicated to the transaction user with the @dfn{STREAMS} message type @var{M_ERROR}
@prindex M_ERROR
with the UNIX System error @samp{EPROTO}.  This is the only type of error that the transaction provider should use to
indicate a fatal protocol error to the transaction user.  The message @var{M_ERROR}
@prindex M_ERROR
will result in the failure of all the operating system service routines on the @dfn{stream}.  The only way for the user
to recover from a fatal error is to ensure that all processes close the file associated with the @dfn{stream}.  Then the
user may reopen the file associated with the @dfn{stream}.

@c Two error handling facilities should be provided to the TR service user: one to handle non-fatal errors, and the other
@c to handle fatal errors.
@c @section Non-Fatal Error Handling Facility
@c These are errors that do not change the state of the TR service interface as seen by the TR service user and provide
@c the user with the option of reissuing the TR primitive with the corrected options specification.  The non-fatal error
@c handling is provided only to those primitives that require acknowledgements, and uses the @code{TR_ERROR_ACK} to report
@c these errors.  These errors retain the state of the TR service interface the same as it was before the TR provider
@c received the primitive that was in error.  Syntax errors and rule violations are reported via the non-fatal error
@c handling facility.
@c @section Fatal Error Handling Facility
@c These errors are issued by the TR provider when it detects errors that are not correctable by the TR user, or if it is
@c unable to report a correctable error to the TR service user.  Fatal errors are indicated via the STREAMS message type
@c @code{M_ERROR} with the UNIX system error @code{EPROTO}.  The @code{M_ERROR} STREAMS message type will result in the
@c failure of all the UNIX system calls on the stream.  The TR service user can recover from a fatal error by having all
@c the processes close the files associated with the stream, and then reopening them for processing.

@node Transaction Service Interface Sequence of Primitives
@chapter Transaction Service Interface Sequence of Primitives

The allowable sequence of primitives are described in the state diagrams and tables for both the connection-oriented and
connectionless mode mode transaction services described in @ref{State/Event Tables}.

@section Rules for State Maintenance

@subsection General Rules for State Maintenace

The following are rules regarding the maintenance of the state of the interface:

@itemize @bullet
@item It is the responsibility of the transaction provider to keep record of the state of the interface as viewd by the
transaction user.
@item The transaction provider must never issue a primitive that places the interface out of state.
@item The uninitialized state of a @dfn{stream} is the initial and final state, and it must be bound
(@pxref{TR_BIND_REQ}) before the transaction provider may view it as an active @dfn{stream}.
@item If the transaction provider sends a @samp{M_ERROR}
@prindex M_ERROR
upstream, it should also drop any furhter messages received on its write side of the @dfn{stream}.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for State Maintenace

The following rules apply only to the connection-oriented mode transaction services:

@itemize @bullet
@item A transaction association end procedure can be initiated at any time during the transaction association
establishment or component transfer phases.
@item The state tables for the connection-oriented mode transaction service providers include the management of the correlation
and transaction identifiers when a transaction provider sends multiple @samp{TR_BEGIN_IND} indications or accepts
multiple @samp{TR_BEGIN_REQ} requests without waiting for the response or confirmation to the previous indication or
request.  It is the responsibility of the transaction provider not to change state until all the indicationes or
requests have been responded to or confirmed, therefore the provider should remain in the @samp{TRS_WRES_CIND} or
@samp{TRS_WACK_CREQ} state while there are any outstanding begin indications or requests pending response or
confirmation.  The provider should change state appropriately when all the begin indications or requests have been
responded to or confirmed.
@item The only time the state of the transaction service interface of a @dfn{stream} may be transferred to another
@dfn{stream} is when it is indicated in a @var{TR_BEGIN_RES} primitive.  The following rules then apply to the
cooperating @dfn{streams}:
@itemize ---
@item The @dfn{stream} that is to accept the current state of the interface must be bound to an appropriate protocol
address and must be in the idle state.@footnote{This is not really true for either TRI or TPI.  The accepting stream can
be bound or unbound, and for some protocols may be bound to an address different or the same as the stream upon which
the begin indication was issued.}
@item The user transferring the current state of a @dfn{stream} must have the correct permissions for the use of the
protocol address bound to the accepting @dfn{stream}.
@item  The @dfn{stream} which trasfers the state of the transaction interface must be placed into an appropriate state
after the completion of the transfer.
@end itemize
@end itemize

@section Rules for Precedence of Primitives on a @dfn{Stream}

@subsection General Rules for Precedence of Primitives

The following rules apply to the precedence of association interface primitives with respect to their position on a
@dfn{stream}:@footnote{The @dfn{stream} queue which contains a transaction user initiated primitives is referred to as
the @dfn{stream} write queue.  The @dfn{stream} queue which contains the transaction provider initiated primitives is
referred to as the @dfn{stream} read queue.}
@itemize @bullet
@item The transaction provider has responsibility for determining precedence of its @dfn{stream} write queue, as per the
rules defined in @ref{Primitive Precedence Tables}.  The appendix specifies the rules for precedence for both the
connection-oreinted and connectionless transaction services.
@item The transaction user has the responsibility for determining precedence on its @dfn{stream} read queue, as per the
rules defined in @ref{Primitive Precedence Tables}.
@item All primitives on the @dfn{stream} are assumed to be placed on the queue in the correct sequence as defined above.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for Precedence of Primitives

The following rules apply only to the connection-oriented transaction services:

@itemize @bullet
@item There is no guarantee of delivery of user data once a @var{TR_ABORT_REQ} primitive has been issued.
@end itemize

@section Rules for Flushing Queues

@subsection General Rules for Flushing Queues

The folowing rules pertain to flushing of @dfn{stream} queues: (No other flushes should be needed to keep the queues in
the proper condition.)

@itemize @bullet
@item The transaction providers must be aware that they will receive @var{M_FLUSH}
@prindex M_FLUSH
message from upstream.  These flush requres are issued to ensure that the providers receive certain messages and
primitives.  It is the responsibility of the providers to act appropriately as deemed necessary by the providers.
@item The transaction provider must send up a @var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues after receiving a successful @var{TR_UNBIND_REQ} message and prior to
issuing the @var{TR_OK_ACK} primitive.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for Flushing Queues

The following rules apply only to the connection-oriented transaction services:

@itemize @bullet
@item If the interface is in the @samp{TS_DATA_XFER}, @samp{TS_WIND_ORDREL} or @samp{TS_WACK_ORDREL} state, the
transaction provider must send up a @var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues before sending up a
@var{TR_ABORT_IND}.
@item If the interface is in the @samp{TS_DATA_XFER}, @samp{TS_WIND_ORDREL} or @samp{TS_WACK_ORDREL} state, the
transaction provider must send up a @var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues after receiving a successful @var{TR_ABORT_REQ} primitive and before
issuing the @var{TR_OK_ACK} primitive.
@end itemize


@node Addendum for ITU-T Conformance
@unnumbered Addendum for ITU-T Conformance

This section describes the formats and rules that are specified to ITU-T Q.771 operation.  The addendum must be used
along with the generic TRI as defined in the main document when implementing a TR provider that will be configured with
the ITU-T Q.771 (TCAP) Transaction Sub-Layer.

@section Quality of Service: Model and Description

The ``Quality of Service'' characteristics apply to both connection-oriented and connectionless transaction services.

@subsection QoS Overview

QoS (Quality of Service) is described in terms of QoS parameters.  There are two types of QoS parameters:
@enumerate
@item Those that are ``negotiated'' on a per-association basis during transaction association
establishment.@footnote{The connectionless transaction services do not support end-to-end QoS parameter negotiation.}
@item Those that are not ``negotiated'' and their values are selected or determined by local management methods.
@end enumerate

@section TRI Primitives: Rules for ITU-T Q.771 Conformance

The following rules apply to the TRI primitives for ITU-T Q.771 (TCAP) compatibility:

@subsection Addressing

TCAP uses SCCP formatted addresses instead of ISO Presentation Layer addresses.

@subsubsection Address Format

The address format for a TCAP address is as follows:

@subsection Options
@subsubsection TCAP Level Options
@subsubheading Application Context Name
@subsubheading User Information
@subsubsection SCCP Level Options
@subsubheading SCCP Quality of Service Options
The TCAP interface uses protocol level @var{T_SS7_SCCP} for options at the SCCP level.  SCCP QoS parameters are
communicated to the underlying transaction provider using the option name @var{T_SCCP_QOS}.  There are three QoS
structure that can be used in this fashion as follows:

@multitable @columnfractions .17 .26 .62
@item @b{Option Name} @tab @b{Option Type} @tab @b{Meaning}

@item @var{T_SCCP_QOS} @tab @var{N_qos_sel_sccp_t}      @tab
For use with
@var{TR_UNI_REQ},
@var{TR_BEGIN_REQ},
@var{TR_BEGIN_RES},
@var{TR_CONT_REQ},
@var{TR_END_REQ},
@var{TR_ABORT_REQ}.

@item @var{T_SCCP_QOS} @tab @var{N_qos_opt_sel_sccp_t}  @tab
For use with
@var{TR_BEGIN_REQ},
@var{TR_BEGIN_RES}.

@item @var{T_SCCP_QOS} @tab @var{N_qos_range_sccp_t}    @tab
For use with
@var{TR_INFO_ACK}.
@end multitable

Quality of service struct @var{N_qos_sel_sccp_t} has the following fields:
@table @var
@item n_qos_type
This is the NPI Quality of Service structure type and is always set to @samp{N_QOS_SEL_SCCP}, @samp{N_QOS_OPT_SEL_SCCP},
or @samp{N_QOS_RANGE_SCCP}.
@item protocol_class
This is the protocol class.  The @var{protocol_class} field can be one of the following:
@itemize @bullet
@item @samp{N_QOS_PCLASS_0} (SCCP connectionless protocol class 0),
@item @samp{N_QOS_PCLASS_1} (for SCCP connectionless protocol class 1),
@item @samp{N_QOS_PCLASS_2} (for SCCP connection-oriented protocol class 2),
@item @samp{N_QOS_PCLASS_3} (for SCCP connection-oriented protocol class 3) or
@item @samp{QOS_UNKNOWN}.
@end itemize
@samp{N_QOS_PCLASS_2} and @samp{N_QOS_PCLASS_3} are not applicable to TCAP.
@item option_flags
If the @var{options_flags} field has bit @samp{N_QOS_OPT_RETERR} set then the SCCP will return the PDU on error.
@item importance
This is the importance of the message for consideration for SCCP flow control.  This value is not normally set by the
user.  It can be any integer number from 0 to 7, or @samp{QOS_UNKNOWN}.
@item sequence_selection
This affects the SLS (Signalling Link Selection) value that will be used for protocol classes @samp{N_QOS_PCLASS_0} and
@samp{N_QOS_PCLASS_1}.  This value is not normally set by the user and can be an integer value or @samp{QOS_UNKNOWN}.
@item message_priority
This affects the MP (Message Priority) value that will be used for specific messages in all protocol classes.  This
value is not normally set by the use and can be any integer value from 0 to 3 or the value @samp{QOS_UNKNOWN}.
@end table

@section Supported Services
@subsection Common Transaction Services
@subsubsection Information Service
@subsubheading TR_INFO_REQ
@subsubheading TR_INFO_ACK
@subsubheading Parameters
The following discusses the values which may be returned in a @var{TR_INFO_ACK} primitive in response to a
@var{TR_INFO_REQ} primitive.
@vtable @var
@item ASDU_size
Depending on the underlying SCCP layer, TCAP can have effectively no limit to the amount of components that can be sent
in a particular transaction.  Protocol variants or versions of SCCP that support XUDT and segmentation-reassembly of
protocol class 0 or 1 messages will set @var{ASDU_size} to @samp{T_INFINITE} (@samp{-1}).  For protocol variants of SCCP
or other underlying network providers that do not support segmentation/reassembly of long messages, the provider wills
et @var{ASDU_size} to the maximum size (number of octets) of components that can be guaranteed transferred when
associated with a single @var{TR_BEGIN_RES} or @var{TR_CONT_REQ} message.

@item EASDU_size
TCAP has no expedited data service and the value of @var{EASDU_size} is set to @samp{T_UNKNOWN} (@samp{-2}).

@item CDATA_size
TCAP can send components with the initial Begin (Query) or first Continue (Conversation) package and can also send
@dfn{Application Context} and @dfn{User Information} in either package.  These messages correspond to @dfn{TR-BEGIN} and
the first @dfn{TR-CONTINUE} after receiving a @dfn{TR-BEGIN} and they correspond to @var{TR_BEGIN_REQ} and
@var{TR_BEGIN_RES}.  Because the underlying SCCP connectionless network may support unlimited size NSDUs, this value
may be set to @samp{T_INFINITE} (@samp{-1}) or may be set to the maximum amount of user data (including @dfn{Application
Context}, @dfn{User Information} and Components) that can be sent or received in either package.  This informs the user
as to what size to make data buffers associated with association begin indications and confirmations
(@var{TR_BEGIN_IND}, @var{TR_BEGIN_CON}) and how much data can be sent with association begin requests and responses
(@var{TR_BEGIN_REQ}, @var{TR_BEGIN_RES}).

@item DDATA_size
TCAP can send association end data (components) with the final End (Response) package.  These messages correspond to the
@dfn{TR-END} primitive and the @var{TR_END_REQ} or @var{TR_END_IND}.  Again, because the underlying SCCP connectionless
network may support unlimited size NSDUs, this value may be set to @samp{T_INFINITE} (@samp{-1}) or may be set to the
maximum amount of association end data that can be sent or received in the End (Response) package.  This informs the user
as to what size to make data buffers associated with association end indications (@var{TR_END_IND}) and how much data
can be sent with association end requests (@var{TR_END_REQ}).

@item ADDR_size
This is the maximum TCAP address size that can be communicated across the interface.  This address size is the maximum
sizeo of the defined SCCP address structure (@samp{sizeof sccp_addr_t}) that also will include address digits up to a
maximum of @var{SCCP_MAX_ADDR_LENGTH} octets of digits.  This informs the user as to what size it should reserver for
control buffers so as to receive control information without buffer truncation.

@item OPT_size
This is the maximum size of the options field used in any TRI message (@pxref{TRI Primitives}) and is the sum of the
maximum option sizes of one of each of the options that can occur together.  This informs the user as to what size it
should reserve for control buffers to ensure that received control messages that include options cna be contained within
the buffer without truncation.

@item TIDU_size
Although a TCAP provider can support unlimited ASDU size, it cannot normally support unlimited TIDU size.  This is
because the underlying SCCP NSDU may be limited in size.  The TCAP provider is not responsible for segmenting component
sequences offered to the provider from the user in an @var{M_DATA}
@prindex M_DATA
message chain.  This is the maximum size of the TIDU which corresponds to the maximum size of the underlying NSDU.
Because the underlying SCCP provider may have no limit on the NSDU size (i.e, it supports segmentation of connectionless
NSDUs) this may be more in the manner of a optimal recommendation to the user rather than an absolute maximum.  Because
of this, a given TCAP provider might not reject TIDUs which are larger than this value.

@item SERV_type
There are two service types supported by a transaction provider: connection-oriented association service (COAS) and
connectionless association service (CLAS).  CLAS is a connectionless unidirectional association service with no error
notification.  COAS is a connection-oriented association services with or without error notification.  The value
reflected here is dependent on the setting of option @var{T_ACSE_PCLASS} or @var{T_TCAP_OCLASS}.

@item CURRENT_state
Provides the current state of the transaction interface.  TCAP providers use the same states as other TRI providers.

@item PROVIDER_flag
Unused.

@item TRI_version
Set to the current version.
@end vtable
@subsubheading TR_ADDR_REQ
@subsubheading TR_ADDR_ACK
@subsubsection Bind Service
@subsubheading TR_BIND_REQ
@subsubheading TR_BIND_ACK
@subsubsection Options Management Service
@subsubheading TR_OPTMGMT_REQ
@subsubheading TR_OPTMGMT_ACK
@subsection Connection-Oriented Transaction Services
@subsubsection Association Begin
@subsubheading TR_BEGIN_REQ
@subsubheading TR_BEGIN_IND
@subsubheading TR_BEGIN_RES
@subsubheading TR_BEGIN_CON
@subsubsection Association Continue
@subsubheading TR_CONT_REQ
@subsubheading TR_CONT_IND
@subsubsection Association End
@subsubsection TR_ABORT_REQ
@subsubsection TR_ABORT_IND
@subsubheading TR_END_REQ
@subsubheading TR_END_IND
@subsection Connectionless Transaction Services
@subsubheading TR_UNI_REQ
@subsubheading TR_UNI_IND
@subsubheading TR_NOTICE_IND


@node TCAP Transport Provider TPI Addendum
@unnumbered TCAP Transport Provider TPI Addendum

The Transaction Interface (TRI) is written as an addendum to the XTI/TPI (X/Open Transport
Interface/Transport Provider Interface).  No new primitive or semantics have been added to the
interface, merely a definition of the protocol-specific and provider-specific aspects of TCAP
Transport.

TCAP Transport is very close to the XTI mOSI transport specification.  The major difference is that
SCCP Network Layer Addresses and options are used instead of ISO Presentation Layer addresses and
options.  Aside from that, TCAP Transport resembles X.219 (ROSE) ISO/OSI Transport.

@section Addressing

TCAP uses SCCP formatted addresses instead of ISO Presentation Layer addresses.

@subsection Address Format

The address format for a TCAP address is as follows:

@section Options

@subsection TCAP Level Options

@subsubsection Application Context Name

@subsubsection User Information

@subsection SCCP Level Options

@unnumberedsubsubsec SCCP Quality of Service Options

The TCAP interface uses protocol level T_SS7_SCCP for options at the SCCP level.  SCCP QOS
parameters are communicated to the underlying transport using the option name T_SCCP_QOS.  There are
three QOS structures which can be used in this fashion are listed in @emph{Table 7} as follows:

Table 7@strong{@emph{.  SCCP QOS Option Values}}

@multitable @columnfractions .17 .26 .62
@item @b{Option Name} @tab @b{Option Type} @tab @b{Meaning}

@item T_SCCP_QOS @tab N_qos_sel_sccp_t	    @tab
For use with @var{T_UNITDATA_REQ},@* @var{T_OPTDATA_REQ}.

@item T_SCCP_QOS @tab N_qos_opt_sel_sccp_t  @tab
For use with @var{T_CONN_REQ}, @var{T_CONN_RES}.

@item T_SCCP_QOS @tab N_qos_range_sccp_t    @tab
For use with @var{T_INFO_ACK}.
@end multitable 

Quality of service structure @code{N_qos_sel_sccp_t} has the following fields:

@table @emph
@item n_qos_type
This is the NPI Quality of Service structure type and is always set to @code{N_QOS_SEL_SCCP},
@code{N_QOS_OPT_SEL_SCCP}, or @code{N_QOS_RANGE_SCCP}.
@item protocol_class
This is the protocol class.  The @emph{protocol_class} field can be one of the following:
@code{N_QOS_PCLASS_0} (SCCP connectionless protocol class 0), @code{N_QOS_PCLASS_1} (for SCCP
connectionless protocol class 1), @code{N_QOS_PCLASS_2} (for SCCP connection-oriented protocol class
2), @code{N_QOS_PCLASS_3} (for SCCP connection-oriented protocol class 3) or @code{QOS_UNKNOWN}.

@code{N_QOS_PCLASS_2} and @code{N_QOS_PCLASS_3} are not applicable to TCAP.
@item option_flags
If the @emph{options_flags} field has bit @code{N_QOS_OPT_RETERR} set then the SCCP will return the
PDU on error.
@item importance
This is the importance of the message for consideration for SCCP flow control.  This value is not
normally set by the user.  It can be any integer number from 0 to 7, or QOS_UNKNOWN.
@item sequence_selection
This affects the SLS (Signalling Link Selection) value that will be used for protocol classes
@code{N_QOS_PCLASS_0} and @code{N_QOS_PCLASS_1}.  This value is not normally set by the user and can
be an integer value or @code{QOS_UNKNOWN}.
@item message_priority
This affects the MP (Message Priority) value that will be used for specific messages in all protocol
classes.  This value is not normally set by the use and can be any integer value from 0 to 3 or the
value @code{QOS_UNKNOWN}.
@end table

@section T_INFO_ACK Values

The following discusses the values which may be returned in the T_INFO_ACK primitive in response to
a T_INFO_REQ primitive.

@table @emph
@item TSDU_size
TCAP has effectively no limit to the amount of data which can be sent in a particular invoke or result component.  TCAP
includes a ``more'' bit concept in that an Invoke Not Last and Return Result Not Last can be used to indicated that the
next Invoke or Return Result are part of the same component sequence.  ITU-T does not include the Not Last concept for
Invokes.  As a result, for ANSI and other TCAPs supporting the Invoke Not Last components, TSDU_size will be set to
T_INFINITE (-1).  For other TCAPs not supporting Invoke Not Last, the TSDU_size will be set to the maximum size of a
single component sequence derived from the maximum size of the underlying SCCP network.  This may still be T_INFINITE
(-1) as the underlying SCCP connectionless network may support unlimited size NSDUs.
@item ETSDU_size
TCAP has no expedited data service and the value of ETSDU_size is set to T_UNKNOWN (-2).
@item CDATA_size
TCAP can send connection data (components) with the initial Begin (Query) or first Continue (Conversation) package and can
also send Application Context and User Information in either package.  These messages correspond to TR-BEGIN and the
first TR-CONTINUE after receiving a TR-BEGIN and these correspond to T_CONN_REQ and T_CONN_RES.  Because the underlying
SCCP connectionless network may support unlimited size NSDUs, this value may be set to T_INFINITE (-1) or may be set
to the maximum amount of connection data (including Application Context, User Information and Components) which can be
sent or received in either package.  This informs the user as to wht size to make data buffers associated with
connection indications and confirmations (T_CONN_IND, T_CONN_CON) and how much data can be sent with connection requests
and responses (T_CONN_REQ, T_CONN_RES).
@item DDATA_size
TCAP can send disconnect data (components) with the final End (Response) package.  These messages correspond to the
TR-END primitive and the T_DISCON_REQ or T_DISCON_IND.  Again, because the underlying SCCP connectionless network may
support unlimited size NSDUs, this value may be set to T_INFINITE (-1) or may be set to the maximum amount of
disconnection data which can be sent or received in the End (Response) package.  This informs the user as to what size to
make data buffers associated with disconnection indications (T_DISCON_IND) and how much data can be sent with
disconnection requests (T_DISCON_REQ).
@item ADDR_size
This is the maximum TCAP address size which can be communicated across the interface.  This address size is the maximum
size of the defined SCCP address structure (@code{sizeof sccp_addr_t}) which also will include address digits up to a
maximum of @code{SCCP_MAX_ADDR_LENGTH} octets of digits.  This informs the user as to what size it should reserve for
control buffers so as to receive control information without buffer truncation.
@item OPT_size
This is the maximum size of the options field used in any TPI message and is the sum of the maximum option sizes of one
of each of the options that can occur together.  This informs the user as to what size is should reserve for control
buffers to ensure that received control messages which include options can be contained within the buffer without
truncation.
@item TIDU_size
Even though a TCAP provider can support unlimited TSDU size, it cannot normally support unlimited TIDU size.  This is
because the underlying SCCP NSDU may be limited in size.  The TCAP provider is not responsible for segmenting component
sequences offered to the provider from the user in as M_DATA.
@prindex M_DATA
This is the maximum size of the TIDU which corresponds to the maximum size of the underlying NSDU.  Because the
underlying SCCP provider may have no limit on the NSDU size (i.e., it supports segmentation of connectionless NSDUs)
this may be more in the manner of a optimal recommendation to the user rather than an absolute maximum.  Because of
this, a given TCAP provider might not reject TIDUs which are larger than this value.
@item SERV_type
There are two service type supported by an ACSE provider: T_COTS and T_CLTS.  T_CLTS (ACSE Connectionless Class) is a
connectionless association service with no error notification.  T_COTS (ACSE Connection-Oriented Class) is a
connection-oriented association services with or without error notification.  The value reflected here is dependent on
the setting of option T_ACSE_PCLASS or T_TCAP_PCLASS.
@item CURRENT_state
Provides the current state of the Transport Provider.  TCAP providers use the same states as other TPI providers.
@item PROVIDER_flag
TPI provider flags which are set are SENDZERO (because TCAP supports the sending of packages without components) and
XPG4_1 (to indicate that the transport provider supports the latest TPI semantics).
@end table


@section Supported Services

@subsection Common Transport Services

@subsubsection Information Service

@unnumberedsubsubsec T_INFO_REQ

@unnumberedsubsubsec T_INFO_ACK

@unnumberedsubsubsec T_ADDR_REQ

@unnumberedsubsubsec T_ADDR_ACK

@subsubsection Bind Service

@unnumberedsubsubsec T_BIND_REQ

@unnumberedsubsubsec T_BIND_ACK

@subsubsection Options Management Service

@unnumberedsubsubsec T_OPTMGMT_REQ

@unnumberedsubsubsec T_OPTMGMT_ACK

@subsection Connection-Mode Services

@subsubsection Connection Establishment

@unnumberedsubsubsec T_CONN_REQ

@unnumberedsubsubsec T_CONN_IND

@unnumberedsubsubsec T_CONN_RES

@unnumberedsubsubsec T_CONN_CON

@subsubsection Data Transfer

@unnumberedsubsubsec T_DATA_REQ

@unnumberedsubsubsec T_DATA_IND

@unnumberedsubsubsec T_EXDATA_REQ

@unnumberedsubsubsec T_EXDATA_IND

@unnumberedsubsubsec T_OPTDATA_REQ

@unnumberedsubsubsec T_OPTDATA_IND

@subsubsection Connection Release

@unnumberedsubsubsec T_DISCON_REQ

@unnumberedsubsubsec T_DISCON_IND

@unnumberedsubsubsec T_ORDREL_REQ

@unnumberedsubsubsec T_ORDREL_IND

@subsubsection Connection-Less Mode Services

@unnumberedsubsubsec T_UNITDATA_REQ

@unnumberedsubsubsec T_UNITDATA_IND

@unnumberedsubsubsec T_UDERROR_IND

@subsubsection Component Services

@unnumberedsubsubsec T_INVOKE_REQ

@unnumberedsubsubsec T_INVOKE_IND

@unnumberedsubsubsec T_RESULT_REQ

@unnumberedsubsubsec T_RESULT_IND

@unnumberedsubsubsec T_ERROR_REQ

@unnumberedsubsubsec T_ERROR_IND

@unnumberedsubsubsec T_CANCEL_REQ

@unnumberedsubsubsec T_CANCEL_IND

@unnumberedsubsubsec T_REJECT_REQ

@unnumberedsubsubsec T_REJECT_IND


@node Mapping TRI Primitives to ITU-T Q.771
@appendix Mapping TRI Primitives to ITU-T Q.771

@section State Mapping

@cartouche
@center Figure 18@strong{@emph{.  TR Sub-Layer State Machine}}
@image{tri_ne17,4in}
@end cartouche

@cartouche
@center Figure 19@strong{@emph{.  TR Sub-Layer State Machine}}
@image{tri_ne18,4in}
@end cartouche

@section Primitive Mapping

@center Table 8@strong{@emph{.  Primitive Mapping}}

@multitable @columnfractions .34 .35 .31
@item @strong{TR Sub-Layer Primitive} @tab @strong{TC Sub-Layer Primitive} @tab @strong{TPI Primitive} 
@item TR-UNI Request @tab TC-UNI Request @tab T_UNITDATA_REQ 
@item TR-UNI Indication @tab TC-UNI Indication @tab T_UNITDATA_IND 
@item TR-BEGIN Request @tab TC-BEGIN Request @tab T_CONN_REQ 
@item TR-BEGIN Indication @tab TC-BEGIN Indication @tab T_CONN_IND 
@item TR-CONTINUE Request @tab TC-CONTINUE Request @tab T_CONN_RES 
@item TR-CONTINUE Indication @tab TC-CONTINUE Indication @tab T_CONN_CON 
@item TR-CONTINUE Request @tab TC-CONTINUE Request @tab T_OPTDATA_REQ 
@item TR-CONTINUE Indication @tab TC-CONTINUE Indication @tab T_OPTDATA_IND 
@item TR-END Request @tab TC-END Request @tab T_ORDREL_REQ 
@item TR-END Indication @tab TC-END Indication @tab T_ORDREL_IND 
@item TR-U-ABORT Request @tab TC-U-ABORT Request @tab T_DISCON_REQ 
@item TR-U-ABORT Indication @tab TC-U-ABORT Indication @tab T_DISCON_IND 
@item TR-P-ABORT Indication @tab @tab T_DISCON_IND 
@item TR-NOTICE Indication @tab TC-NOTICE Indication @tab T_UDERROR_IND 
@end multitable 

@subsection T-UNI

@subsubsection Request

The Q.771 TR-UNI and TC-UNI Requests map onto the TPI T_UNITDATA_REQ primitive as shown in Table 9.

@center Table 9@strong{@emph{.  T-UNI Request Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} 
@item TR-UNI Request @tab T_UNITDATA_REQ 
@item Quality of Service @tab OPT_offset, OPT_length 
@item Destination Address @tab DEST_offset, DEST_length 
@item Originating Address @tab implicit (see note 1) 
@item User Data @tab M_DATA blocks 

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} 
@item TC-UNI Request @tab T_UNITDATA_REQ 
@item Quality of Service @tab OPT_offset, OPT_length 
@item Destination Address @tab DEST_offset, DEST_length 
@item Application Context Name @tab OPT_offset, OPT_length 
@item Originating Address @tab implicit (see note 1) 
@item Dialogue ID @tab implicit (see note 2) 
@item User Information @tab OPT_offset, OPT_length 
@item Components Present @tab M_DATA blocks 
@end multitable 

Notes:
@enumerate 
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the
address which is bound to the stream in a previous T_BIND_REQ operation and which is returned as the
LOCADDR in a T_ADDR_ACK.
@item The @emph{Dialogue ID} is implicit to the stream.  Each stream supports only one dialogue at a
time.
@end enumerate 

@subsubsection Indication

The Q.771 TR-UNI and TC-UNI Indications map onto the T_UNITDATA_IND primitive as shown in Table 10.

Table 10@strong{@emph{.  T-UNI Indication Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} 
@item TR-UNI Indication @tab T_UNITDATA_IND 
@item Quality of Service @tab OPT_offset, OPT_length 
@item Destination Address @tab implicit (see note 1) 
@item Originating Address @tab SRC_offset, SRC_length 
@item User Data @tab M_DATA blocks 

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} 
@item TC-UNI Indication @tab T_UNITDATA_IND 
@item Quality of Service @tab OPT_offset, OPT_length 
@item Destination Address @tab implicit (see npte 1) 
@item Application Context Name @tab OPT_offset, OPT_length 
@item Originating Address @tab SRC_offset, SRC_length 
@item User Information @tab OPT_offset, OPT_length 
@item Components Present @tab M_DATA blocks 
@end multitable 

Notes:
@enumerate 
@item The @emph{Destination Address} parameter is implicit to the stream and is taken to be the
address which is bound to the stream.
@end enumerate 

@subsection TR-BEGIN

@subsubsection Request

The Q.771 TR-BEGIN and TC-BEGIN Requests map onto the T_CONN_REQ primitive as shown in Table 11.

@center Table 11@strong{@emph{.  T-Begin Request Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Originating Address @tab implicit (see note 1)
@item Transaction ID @tab implicit (see note 2)
@item User Data @tab M_DATA blocks
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Dialogue ID @tab implicit (see note 2)
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable 
Notes:
@enumerate 
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the
address which is bound to the stream in a previous T_BIND_REQ operation and which is returned as the
LOCADDR in a T_ADDR_ACK.
@item The @emph{Transaction ID} and @emph{Dialogue ID} are implicit to the stream.  Each stream only
supports one dialogue at a time.
@end enumerate 

@subsubsection Indication

The Q.771 TR-BEGIN and TC-BEGIN Indications map onto the T_CONN_IND primitive as shown in Table 12.

@c Table 12@strong{@emph{.  T-Begin Indication Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see note 1)
@item Originating Address @tab SRC_offset, SRC_length
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-BEGIN Indication @tab T_CONN_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see note 1)
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab SRC_offset, SRC_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable 
Notes:
@enumerate 
@item The @emph{Destination Address} parameter is implicit to the stream and is the address to which
the stream was bound with the previous T_BIND_REQ operation and which is returned as as the LOCADDR
in a T_ADDR_ACK.
@end enumerate 

@subsection T-CONTINUE

@subsubsection Confirming Request

The Q.771 TR-CONTINUE and TC-CONTINUE Requests confirming a transaction map onto the T_CONN_RES
primitive as shown in Table 13.

Table 13@strong{@emph{.  T-Continue Request Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Request @tab T_CONN_RES
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Request @tab T_CONN_RES
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Application Context Name @tab OPT_offset, OPT_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable 
Notes:
@enumerate 
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the
address which is bound to the stream in a previous T_BIND_REQ operation and which is returned as the
LOCADDR in a T_ADDR_ACK.
@end enumerate 

@subsubsection Confirming Indication

The Q.771 TR-CONTINUE and TC-CONTINUE Indications confirming a transaction map onto the T_CONN_CON
primitive as shown in Table 14.

@center Table 14@strong{@emph{.  T-Continue Indication Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Indication @tab T_CONN_CON
@item Quality of Service @tab PT_offset, OPT_length
@item Originating Address @tab RES_length, RES_offset
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Indication @tab T_CONN_CON
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab RES_length, RES_offset
@item Application Context Name @tab OPT_offset, OPT_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable 
Notes:
@enumerate 
@item The @emph{Responding Address} parameter is delivered in the primitive but may be ignored by
the TR-User.
@end enumerate 

@subsubsection Subsequent Request

The Q.771 TR-CONTINUE and TC-CONTINUE Requests continuing a transaction map onto the T_OPTDATA_REQ
primitive as shown in Table 15.

@center Table 15@strong{@emph{.  T-Continue Request Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Request @tab T_OPTDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Transaction ID @tab implicit (see note 1)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Request @tab T_OPTDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Dialogue ID @tab implicit (see note 1)
@item Components Present @tab M_DATA blocks
@item User Information @tab OPT_offset, OPT_length
@end multitable 
Notes:
@enumerate 
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.
Each stream supports only one dialogue at a time.
@end enumerate 

@subsubsection Subsequent Indication

The Q.771 TR-CONTINUE and TC-CONTINUE Indications continuing a transaction map onto the
T_OPTDATA_IND primitive as shown in Table 16.

@center Table 16@strong{@emph{.  T-Continue Indication Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Indication @tab T_OPTDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Transaction ID @tab implicit (see note 1)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Indication @tab T_OPTDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Dialogue ID @tab implicit (see note 1)
@item Components Present @tab M_DATA blocks
@item User Information @tab OPT_offset, OPT_length
@end multitable 
Notes:
@enumerate 
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.
Each stream supports only one dialogue at a time.
@end enumerate 

@subsection T-END

@subsubsection Request

The Q.771 TR-END and TC-END Requests map onto the T_ORDREL_REQ primitive as shown in Table 17.

@center Table 17@strong{@emph{.  T-END Request Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-END Request @tab T_ORDREL_REQ
@item Quality of Service @tab implicit (see notes)
@item Transaction ID @tab implicit (see notes)
@item Termination @tab implied (see notes)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-END Request @tab T_ORDREL_REQ
@item Quality of Service @tab implicit (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab
@item User Information @tab implicit (see notes)
@item Termination @tab implied (see notes)
@end multitable 
Notes:
@enumerate 
@item Pre-arranged or basic terminations are distinguished by operation class and options parameters.
@item User data in M_DATA blocks can be associated with the primitive.
@end enumerate 

@subsubsection Indication

The Q.771 TR-END and TC-END Indications map onto the T_ORDREL_IND primitive as shown in Table 18.

@center Table 18@strong{@emph{.  T-END Indication Mapping}}

@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item R-END Indication @tab T_ORDREL_IND
@item Quality of Service @tab implicit (see notes)
@item Transaction ID @tab implicit (see notes)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-END Indication @tab T_ORDREL_IND
@item Quality of Service @tab it (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes)
@end multitable 
Notes:
@enumerate 
@item 
@item 
@item
@end enumerate 

@subsection T-U-ABORT

@subsubsection Request

The Q.771 TR-U-ABORT and TC-U-ABORT Requests map onto the T_DISCON_REQ primitive as shown in Table
19.

@center Table 19@strong{@emph{.  T-U-ABORT Request Mapping}}

@multitable @columnfractions .43 .43 .14
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} @tab @strong{Notes} 
@item TR-U-ABORT Request @tab T_DISCON_REQ @tab 
@item Quality of Service @tab implicit (see notes) @tab (1) 
@item Transaction ID @tab SEQ_number @tab (2) 
@item User Data @tab M_DATA blocks @tab 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} @tab 
@item TC-U-ABORT Request @tab T_DISCON_REQ @tab 
@item Quality of Service @tab implicit (see notes) @tab (1) 
@item Dialogue ID @tab SEQ_number @tab (2) 
@item Abort reason @tab (implied by presence or absence of Application Context Name) @tab (3) 
@item Application Context Name @tab implicit (see notes) @tab (3) 
@item Components Present @tab M_DATA blocks @tab 
@item User Information @tab implicit (see notes) @tab (3) 
@end multitable 
Notes:
@enumerate 
@item The @emph{Quality of Service} parameter is implicit to the stream.  Each Operation Class 1, 2
or 3 stream (structured dialogue) either has a sequence control value associated with the stream or a
new sequence control is selected for each package in a transaction.  Thus, this parameter does not
need to be specified by the T-User.  If the T-User wants to change the return option or sequence
control associated with a T-U-ABORT, this can be performed with the T_OPTMGMT_REQ primitive before
the T_DISCON_REQ primitive is issued.
@item The @emph{Transaction ID} and @emph{Dialogue ID} are implicit to the stream when the
transaction association is fully formed.  When the transaction association has not been confirmed
and an T-U-ABORT is issued, the SEQ_number parameter identifies the transaction or dialogue in
question.
@end enumerate 

@subsubsection Indication

The TR-U-ABORT Indication primitive of Q.771 maps onto the T_DISCON_IND primitive.

@center Table 20@strong{@emph{.  T-U-ABORT Indication Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-U-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab (not provided)
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks
@item TC-U-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab implicit (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Abort reason @tab DISCON_reason
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes)
@end multitable 
Notes:
@enumerate 
@item The T_DISCON_IND reason distinguishes between TR-U-ABORT and TR-P-ABORT.
@item QOS parameters are not provided to the TR-User even when available at the transport provider.
@item User Data may be provided with the disconnect in M_DATA message blocks associated with the
@samp{M_PROTO}
@prindex M_PROTO
message block for the T_DISCON_IND.
@end enumerate 

@subsection T-P-ABORT

@subsubsection Indication

The TR-P-ABORT Indication primitive of Q.771 maps onto the T_DISCON_IND primitive.

@center Table 21@strong{@emph{.  T-P-ABORT Indication Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-P-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab (not provided)
@item Transaction ID @tab SEQ_number
@item P-Abort @tab DISCON_reason
@end multitable 

@enumerate 
@item The T_DISCON_IND reason distinguishes between TR-U-ABORT and TR-P-ABORT.
@item QOS parameters are not provided to the user on abort even when available at the transport
provider.
@end enumerate 

@subsection T-NOTICE

@subsubsection Indication

The TR-NOTICE Indication primitive of Q.771 maps onto the T_UDERROR_IND and T_DISCON_IND primitives.

@center Table 22@strong{@emph{.  T-NOTICE Indication Mapping}}
@multitable @columnfractions .5 .5 
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-NOTICE Indication @tab T_UDERROR_IND
@item Transaction ID @tab implicit (see note 1)
@item Report Cause @tab ERROR_type

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-NOTICE Indication @tab T_UDERROR_IND
@item Transaction ID @tab implicit (see note1)
@item Report Cause @tab ERROR_type
@end multitable 
Notes:
@enumerate 
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.
Each stream supports only one dialogue at a time.
@end enumerate 

@section Parameter Mapping

@subsection TR Sub-Layer Parameters

@subsubsection Quality of Service
The @emph{Quality of Service} parameters map to the @code{N_QOS_SEL_SCCP} quality of service
parameter set which can be placed in the @emph{OPT_length} and @emph{OPT_offset} fields of the
appropriate messages.  The @code{N_qos_sel_sccp_t} structure has the Return Option and Sequence
Control parameters referenced in the Q.771 recommendations.

@subsubsection Destination Address

The @emph{Destination Address} is an SCCP Called Party Address in the format specified for the
@uref{http://www.openss7.org/spi_idx.html,SCCP Newtork}.  This parameter is contained in the
@emph{DEST_length} and @emph{DEST_offset} fields of the appropriate TPI primitives.  It is also
contained in the @emph{REMADDR_length} and @emph{REMADDR_offset} fields of the T_ADDR_ACK management
primitive.

@subsubsection Originating Address

The @emph{Originating Address} is an SCCP Calling Party Address in the format specified for the
@uref{http://www.openss7.org/spi_idx.html,SCCP Newtork}.  This parameter is contained in the
@emph{SRC_length} and @emph{SRC_offset} or @emph{RES_length} and @emph{RES_offset} fields of the
appropriate TPI primitives.  It is also contained in the @emph{LOCADDR_length} and
@emph{LOCADDR_offset} fields in the T_ADDR_ACK management primitive.

@subsubsection P-Abort

@subsubsection Transaction ID

The @emph{Transaction ID} parameter is normally implicit to the stream for a fully associated
transaction.  Each stream supports only one fully associated transactions.  For unaccepted or
unconfirmed transactions, the @emph{SEQ_number} field of the appropriate TPI primitive is use to
identify the transaction.  The @emph{Transaction ID} is, therefore, implicit to the connection or
connection indication.

@subsubsection Termination

Whether the termination is pre-arranged or basic is a characteristic of the stream.

@subsubsection User Data

@subsubsection Report Cause

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables

@node TRI Header File Listing
@appendix TRI Header File Listing

@node License
@unnumbered License

@menu
* GNU Free Documentation License::
@end menu

@include texi/fdl.texi

@node Glossary
@unnumbered Glossary

@table @emph
@item Signalling Data Link Service Data Unit
A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link connection to the
other.
@item Data transfer
The phase in connection and connectionless modes that supports the transfer of data between to signalling data link
users.
@item SDL provider
The signalling data link layer protocol that provides the services of the signalling data link interface.
@item SDL user
The user-level application or user-level or kernel-level protocol that accesses the services of the signalling data link
layer.
@item Local management
The phase in connection and connectionless modes in which a SDL user initializes a stream and attaches a PPA address to
the stream.  Primitives in this phase generate local operations only.
@item PPA
The point at which a system attaches itself to a physical communications medium.
@item PPA identifier
An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {SDL SDU}{International Telecommunications Union}
@item SDLI @tab Signalling Data Link Interface
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item PPA @tab Physical Point of Attachment
@end multitable

@node References
@unnumbered References
@enumerate
@item ITU-T Recommendation X.210, (Geneva, 1993), ``Information Technology --- Open Systems Interconnection --- Basic reference model: Conventions for the definition of OSI services,'' ISO/IEC 10731:1994.
@item ITU-T Recommendation X.217, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Service definition for the Association Control Service Element,'' ISO/IEC 8649:1996.
@item ITU-T Recommendation X.227, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 8650-1.
@item ITU-T Recommendation X.237, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 10035-1 : 1995.
@item ITU-T Recommendation X.216, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Presentation service definition,'' ISO/IEC 8822:1994.
@item ITU-T Recommendation X.226, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Connection-oriented presentation protocol: Protocol specification,'' ISO/IEC 8823-1:1994.
@item ITU-T Recommendation X.236, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless presentation protocol: Protocol specification,'' ISO/IEC 9576-1:1995.
@item ITU-T Recommendation X.215, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Session service definition,'' ISO/IEC 8326:1996.
@item ITU-T Recommendation X.225, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented session protocol: Protocol specification,'' ISO/IEC 8327-1:1996.
@item ITU-T Recommendation X.235, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless session protocol: Protocol specification,'' ISO/IEC 9548-1:1995.
@item ITU-T Recommendation X.214, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Transport service definition,'' ISO/IEC 8072:1996.
@item ITU-T Recommendation X.224
@item ITU-T Recommendation Q.700
@item ITU-T Recommendation Q.701
@item ITU-T Recommendation Q.702
@item ITU-T Recommendation Q.703
@item ITU-T Recommendation Q.704
@item Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item ITU-T Recommendation Q.771, (Geneva, 1993), ``Signalling System No. 7 --- Functional description of transaction capabilities,'' (White Book).
@end enumerate

@node Index
@unnumbered Index

@printindex cp

@c @section Primitive Index

@c @printindex pr

@c @section Primitive Structure and Type Index
@c @printindex tp

@c @section Primitive Structure Field Index

@c @printindex vr

@bye
