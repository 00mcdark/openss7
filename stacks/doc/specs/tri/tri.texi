% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
% =========================================================================
%
% @(#) $Id: tri.texi,v 0.9.2.11 2006/08/22 12:44:22 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2004  OpenSS7 Corporation <www.openss7.com>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2006/08/22 12:44:22 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename tri.info
@settitle Transaction Interface
@c %**end of header

@dircategory OpenSS7
@direntry
* TRI: (tri).			Transaction Interface Specification.
@end direntry

@include texi/args.texi

@ifinfo
This file documents the Transaction Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copyring, provided the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi

@shorttitlepage Transaction Interface
@titlepage
@title Transaction Interface
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
@subsubheading Published by
@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

@noindent
All Rights Reserved.

@sp 1

@noindent
Permission to use, copy and distribute this documentation without modification,
for any purpose and without fee or royalty is hereby granted, provided that both
the above copyright notice and this permission notice appears in all copies and
that the name of OpenSS7 Corporation not be used in advertising or publicity
pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation
about the suitability of this documentation for any purpose.  It is provided
``as is'' without express or implied warranty.

@sp 1

@noindent
@b{OpenSS7 Corporation disclaims all warranties with regard to this documentation
including all implied warranties of merchantability, fitness for a particular
purpose, non-infringement, or title; that the contents of the document are
suitable for any purpose, or that the implementation of such contents will not
infringe on any third party patents, copyrights, trademarks or other rights..
In no event shall OpenSS7 Corporation be liable for any direct, indirect,
special or consequential damages or any damages whatsoever resulting from loss
of use, data or profits, whether in an action of contract, negligence or other
tortious action, arising out of or in connection with any use of this document
or the performance or implementation of the contents thereof.}

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defindex pr
@c Define an index of primitive values
@defindex pv
@c Define an index of protocol states
@defindex st

@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex tp cp
@syncodeindex vr cp

@defcodeindex mp
@include texi/macros.texi
@include texi/versions.texi

@ifnottex
@node Top
@top Transaction Interface
@end ifnottex

@menu
* Preface::
* Introduction::
* The Transaction Sub-Layer::
* TRI Services Definition::
* TRI Primitives::
* Diagnostics Requirements::
* Transaction Service Interface Sequence of Primitives::
* Addendum for ITU-T Conformance::
* Addendum for ANSI Conformance::
* Addendum for ETSI Conformance::
* Mapping TRI Primitives::
* State/Event Tables::
* Primitive Precedence Tables::
* TRI Header File Listing::
* License::
* Glossary::
* Acronyms::
* References::
* Index::
@end menu

@node Preface
@unnumbered Preface

@section Abstract

This document is a Application Program Interface containing technical details
concerning the implementation of the Transaction Interface (TRI) for OpenSS7.
It contains recommendations on software architecture as well as platform and
system applicability of the Transaction Interface (TRI).

@section Purpose

The purpose of this document is to provide technical documentation of the
Transaction Interface (TRI).  This document is intended to be included with the
OpenSS7 STREAMS software package released by
@uref{http://www.openss7.com/,OpenSS7 Corporation}.  It is intended to assist
software developers, maintainers and users of the Transaction Interface (TRI)
with understanding the software architecture and technical interfaces which are
made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of
information concerning the Transaction Interface (TRI).

@section Audience

The audience for this document is software developers, maintainers and users and
integrators of the Transaction Interface (TRI).

@section Revision History

Take care that you are working with a current version of this documentation: you
will not be notified of updates.  To ensure that you are working with a current
version, check the @uref{http://www.openss7.org/,OpenSS7 Project} website for a
current version.
@sp 1
Only the texinfo or roff source is controlled.  A printed (or postscript)
version of this document is an @strong{UNCONTROLLED VERSION}.

@node Introduction
@chapter Introduction

This document specifies a STREAMS-based kernel-level instantiation of the ITU-T
Transaction Capabilities Application Part (TCAP) Transaction (TR) Sub-Layer.
The Transaction Interface (TRI) enables the user of a transaction sub-layer
service to access and use any of a variety of conforming transaction providers
without specific knowledge of the provider's protocol.  The service interface is
designed to support any transaction protocol.  This interface only specifies
access to transaction sub-layer services providers, and does not address issues
concerning transaction sub-layer management, protocol performance, and
performance analysis tools.

The specification assumes that the reader is familiar with the ISO reference
model terminology, ISO/ITU-T transaction service definitions (ROSE, ACSE, TCAP),
and STREAMS.

@section Related Documentation

@itemize ---
@item ITU-T Recommendation X.200 (White Book) --- ISO/IEC 7498-1:1994
@item ITU-T Recommendation X.219 (White Book) --- ISO/IEC
@item ITU-T Recommendation X.229 (White Book) --- ISO/IEC
@item ITU-T Recommendation X.217 (White Book) --- ISO/IEC 8649 : 1996
@item ITU-T Recommendation X.227 (White Book) --- ISO/IEC 8650-1 : 1995
@item ITU-T Recommendation X.237 (White Book) --- ISO/IEC 10035-1 : 1995
@item ITU-T Recommendation Q.771 (White Book)
@item System V Interface Definition, Issue 2 - Volume 3
@end itemize 

@subsection Role

This document specifies an interface that supports the service provided by the
Association Control Service Element (ACSE) for Open Systems Interconnect for
ITU-T Applications as specified in ITU-T Recommendation X.217 (ISO/IEC 8649).
It is also intended to support the Transaction Sub-layer provided by the
Transaction Capabilities Application Part (TCAP) for Signalling System Number 7
(SS7) as specified in ITU-T Recommendation Q.771.  These specifications are
targeted for use by developers and testers of protocol modules that require
transaction sub-layer service.@footnote{For an alternative interface, see
@ref{Introduction, , , tci, Transaction Component Interface}, or
@ref{Introduction, , , xti, Using XTI for TCAP}.}

@section Definitions, Acronyms, and Abbreviations

@table @emph
@item Originating TR User
A TR-User that initiates a transaction.
@item Destination TR User
A TR-User with whom an originating TR user wishes to establish a transaction.
@item ISO
International Organization for Standardization
@item TR User
Kernel level protocol or user level application that is accessing the services
of the transaction sub-layer.
@item TR Provider
Transaction sub-layer entity/entities that provide/s the services of the
transaction interface.
@item TRI
Transaction Interface
@item TIDU
Transaction Interface Data Unit
@item TSDU
Transaction Service Data Unit
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
A communication services development facility first available with UNIX System V
Release 3
@end table

@node The Transaction Sub-Layer
@chapter The Transaction Sub-Layer

@menu
* Model of the TRI::
* TRI Services::
@end menu

The Transaction Sub-Layer provides the means to manage the association of
TR-User into transactions.  It is responsible for the routing and management of
transaction associations between TR-user entities.

@node Model of the TRI
@section Model of the TRI

The TRI defines the services provided by the transaction sub-layer to the
transaction-user at the boundary between the Transaction Component (TC)
Sub-Layer and the Transaction (TR) Sub-Layer in the model presented in ITU-T
Recommendation Q.771.  The interface consists of a set of primitives defined as
STREAMS messages that provide access to the transaction sub-layer services, and
are transferred between the TR user entity and the TR provider.  These
primitives are of two types: ones that originate from the TR user, and others
that originate from the TR provider, or respond to an event of the TR provider.
The primitives that originate from the TR provider are either confirmations of a
request or are indications to the NS user that the event has occurred.
@emph{Figure 1} shows the model of the TRI.

@cartouche
@image{tri_new,4in} @center Figure 1@strong{@emph{.  Model of the TRI}}
@end cartouche

The TRI allows the TR provider to be configured with any transaction sub-layer
user (such as the Transaction Component (TC) Sub-Layer) that also conforms to
the TRI.  A transaction sub-layer user can also be a user program that conforms
to the TRI and accesses the TR provider via @strong{putmsg}(2) and
@strong{getmsg}(2) system calls.

@dfn{STREAMS} messages that are used to communicate transaction service
primitives between the transaction user and the transaction provider may have
one of the following formats:

@enumerate
@item
A @var{M_PROTO}
@prindex M_PROTO
message block followed by zero or more @var{M_DATA}
@prindex M_DATA
message blocks.  The @var{M_PROTO} message block contains the type of service
primitive and all relevant arguments associated with the primitive.  The
@var{M_DATA} blocks contain user data associated with the service primitive.
@item
One @var{M_PCPROTO}
@prindex M_PCPROTO
message block containing the type of service primitive and all the relevant
arguments associated with the primitive.
@item
One or more @var{M_DATA}
@prindex M_DATA
message blocks containing user data.
@end enumerate

The following sections describe the service primitives which define both
connection-mode and connectionless-mode service.

For both types of service, two types of primitives exist: primitives that
originate from the service user and primitives that originate from the service
provider.  The primitives that originate from the service user make requests to
the service provider or response to an event of the service provider.  The
primitive that originate from the service provider are either confirmations of a
request or are indications to the service user that an event has occurred.  The
primitive types along with the mapping of those primitives to the @dfn{STREAMS}
message types and the service primitives of the ISO/IEC xxxxx and service
definitions are listed in @ref{TRI Primitives}.  The format of these primitives
and the rules governing the use of them are described in @ref{Management
Primitives}, @ref{Connection-Oriented Mode Primitives}, and @ref{Connectionless
Mode Primitives}.

@node TRI Services
@section TRI Services

The features of the TRI are defined in terms of the services provided by the
service provider, and the individual primitives that may flow between the
service user and the service provider.

The services supported by the TRI are based on two distinct modes of
communication, connection-mode transaction service (COTS) and connectionless
transaction service (CLTS).  Also, the TRI supports services for local
management.

@subsection COTS

The main features of the connection mode communication are:

@enumerate a
@item It is virtual circuit oriented;
@item it provides transfer of data via a pre-established path; and,
@item it provides reliable data transfer.@footnote{That is, it supports TCAP
operation classes 1, 2, and 3; ROSE operation classes 1, 2, 3 and 4.}
@end enumerate

There are three phases to each instance of communication: Transaction
Establishment, Data Transfer, and Transaction Release.  Units of data arrive at
the destination in the same order as they departed their source and the data is
protected against duplication or loss of data units within some specified
quality of service.

@subsection CLTS

The main features of the connectionless mode communication are:

@enumerate a
@item It is datagram oriented;
@item it provides transfer of data in self contained units;
@item there is no logical relationship between these units of data; and,
@item it is unreliable.
@end enumerate

Connectionless mode communication has no separate phases.  Each unit of data is
transmitted from source to destination independently, appropriate addressing
information is included with each unit of data.  As the units of data are
transmitted independently from source to destination, there are, in general, no
guarantees of proper sequence and completeness of the data stream.

@subsection Local Management

The TRI specifications also define a set of local management functions that
apply to both COTS and CLTS modes of communication.  These services have local
significance only.

Table 1 and Table 2 summarizes the TRI service primitives by their state and
service.

@image{tri_tab1} @center Table 1@strong{@emph{.  Service Primitives for Connection Mode Transaction}}

@image{tri_tab2} @center Table 2@strong{@emph{.  Service Primitives for Connectionless Mode Transaction}}

@node TRI Services Definition
@chapter TRI Services Definition

@menu
* Local Management Services Definition::
* Connection-Oriented Mode Services Definition::
* Connectionless Mode Services Definition::
@end menu

This section describes the services of the TRI primitives.  Time-sequence
diagrams @footnote{Conventions for the time-sequence diagrams are defined in
ITU-T X.210, ISO/IEC 10731:1994.} that illustrate the sequence of primitives are
used.  The format of the primitives will be defined later in this document.

@node Local Management Services Definition
@section Local Management Services Definition

@menu
* Transaction Information Reporting Service::
* TR User Bind Service::
* TR User Unbind Service::
* Receipt Acknowledgement Service::
* Options Mangement Service::
* Error Acknowledgement Service::
@end menu

The services defined in this section are outside the scope of the international
standards.  These services apply to both connection-mode as well as
connectionless modes of communication.  They are involved for the
initialization/de-initialization of a stream connected to the TR provider.  They
are also used to manage options supported by the TR provider and to report
information on the supported parameter values.

@node Transaction Information Reporting Service
@subsection Transaction Information Reporting Service
This service provides information on the options supported by the TR provider.

@itemize 
@item TR_INFO_REQ:
@prindex TR_INFO_REQ
This primitive request that the TR provider returns the values of all the
supported protocol parameters.  This request may be invoked during any phase.
@item TR_INFO_ACK:
@prindex TR_INFO_ACK
This primitive is in response to the @dfn{TR_INFO_REQ} primitive and returns
the values of the supported protocol parameters to the TR user.
@end itemize 

The sequence of primitives for transaction information management is shown in
@emph{Figure 2}.

@cartouche
@image{tri_new1,3.5in} @center Figure 2@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Transaction Information Reporting Service}}
@end cartouche

@node TR User Bind Service
@subsection TR User Bind Service

This service allows an originating address to be associated with a stream.  It
allows the TR user to negotiate the number of transaction begin indications that
can remain unacknowledged for that TR user (a transaction begin indication is
considered unacknowledged while it is awaiting a corresponding transaction
response or abort request from the TR user).  This service also defines a
mechanism that allows a stream (bound to the address of the TR user) to be
reserved to handle incoming transactions only.  This stream is referred to as
the listener stream.

@itemize 
@item TR_BIND_REQ:
@prindex TR_BIND_REQ
This primitive request that the TR user be bound to a particular originating
address, and negotiate the number of allowable outstanding transaction
indications for that address.
@item TR_BIND_ACK:
@prindex TR_BIND_ACK
This primitive is in response to the TR_BIND_REQ primitive and indicates to the
user that the specified TR user has been bound to a protocol address.
@end itemize 

The sequence of primitives for the TR user bind service is shown in @emph{Figure
3}.

@cartouche
@image{tri_new2,3.5in} @center Figure 3@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TR User Bind Service}}
@end cartouche

@node TR User Unbind Service
@subsection TR User Unbind Service

This service allows the TR user to be unbound from a protocol address.

@itemize 
@item TR_UNBIND_REQ:
@prindex TR_UNBIND_REQ
This primitive requests that the TR user be unbound from the protocol address it
had previously been bound to.
@end itemize 

The sequence of primitives for the TR user unbind service is shown in
@emph{Figure 4}.

@cartouche
@image{tri_new3,3.5in} @center Figure 4@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TR User Unbind and Receipt Acknowledgement Services}}
@end cartouche

@node Receipt Acknowledgement Service
@subsection Receipt Acknowledgement Service

@itemize 
@item TR_OK_ACK:
@prindex TR_OK_ACK
This primitive indicates to the TR user that the previous TR user originated
primitive was received successfully by the TR provider.
@end itemize 

An example showing the sequence of primitives for successful receive
acknowledgement is depicted in @emph{Figure 4}.

@node Options Mangement Service
@subsection Options Mangement Service

This service allows the TR user to manage the QOS parameter values associated
with the TR provider.

@itemize 
@item TR_OPTMGMT_REQ:
@prindex TR_OPTMGMT_REQ
This primitive allows the TR user to select default values for QOS parameters
within the range supported by the TR provider, and to indicate the default
selection of return option.
@end itemize 

@emph{Figure 5} shows the sequence of primitives for transaction options
management.

@cartouche
@image{tri_new4,3.5in} @center Figure 5@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Options Management Service}}
@end cartouche

@node Error Acknowledgement Service
@subsection Error Acknowledgement Service

@itemize 
@item TR_ERROR_ACK:
@prindex TR_ERROR_ACK
This primitive indicates to the TR user that a non-fatal error has occurred in
the last TR user originated request or response primitive (listed in
@cite{Figure 6}) on the stream.
@end itemize 

@emph{Figure 6} shows the sequence of primitives for the error management primitive.

@cartouche
@image{tri_new5,3.5in} @center Figure 6@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Error Acknowledgement Service}}
@end cartouche

@node Connection-Oriented Mode Services Definition
@section Connection-Oriented Mode Services Definition

@menu
* Transaction Initiation Phase::
* Transaction Data Transfer Phase::
* Transaction Termination Phase::
@end menu

This section describes the required transaction service primitives that define
the connection mode interface.

The queue model for connection-oriented services are discussed in more detail in
ITU-T X.217 and ITU-T Q.771.

The queue model represents the operation of a transaction association in the
abstract by a pair of queues linking two transaction users.  There is one queue
for each direction of data flow.  Each queue represents a flow control function
in one direction of transfer.  The ability of a user to add objects to a queue
will be determined by the behaviour of the user removing objects from that
queue, and the state of the queue.  The pair of queues is considered to be
available for each potential transaction association.  Objects that are entered
or removed from the queue are either as a result of interactions at the two
transaction addresses, or as the result of TR provider initiatives.

@itemize 
@item A queue is empty until a transaction object has been entered and can be
returned to this state, with loss of its contents, by the TR provider.
@item Objects may be entered into a queue as a result of the actions of the
source TR user, subject to control by the TR provider.
@item Objects may also be entered into a queue by the TR provider.
@item Objects are removed from the queue under the control of the TR user in the
same order as they were entered except:
@enumerate 
@item If the object is of type defined to be able to advance ahead of the
preceding object (however, no object is defined to be able to advance ahead of
another object of the same type), or
@item If the following object is defined to be destructive with respect to the
preceding object on the queue.  If necessary, the last object on the queue will
be deleted to allow a destructive object to be entered - they will therefore
always be added to the queue.  For example, ``abort'' objects are defined to be
destructive with respect to all other objects.
@end enumerate 
@end itemize 

@emph{Table 3} shows the ordering relationships among the queue model objects.

@image{tri_tab3} @center Table 3@strong{@emph{.  Ordering Relationships Between Queue Model Objects}}

@node Transaction Initiation Phase
@subsection Transaction Initiation Phase

A pair of queues is associated with a transaction association between two
transaction users when the TR provider receives a TR_BEGIN_REQ
@prindex TR_BEGIN_REQ
primitive at one of the TR users resulting in a begin object being entered into
the queue.  The queues will remain associated with the transaction until a TR_END_REQ
@prindex TR_END_REQ
or TR_ABORT_REQ
@prindex TR_ABORT_REQ
primitive (resulting in an end or abort object) is either entered or removed
from a queue.  Similarly, in the queue from the destination TR user, objects can
be entered into the queue only after the begin object associated with the
TR_BEGIN_RES
@prindex TR_BEGIN_RES
has been entered into the queue.  Alternatively, the destination TR user can
enter an end or abort object into the queue instead of the begin object to
terminate the transaction.

The transaction establishment procedure will fail if the TR provider is unable
to establish a transaction association, or if the destination TR user is unable
to accept the TR_BEGIN_IND
@prindex TR_BEGIN_IND
(see Transaction Termination primitive definition in @ref{TR_END_IND}).

@subsubsection User Primitives Successful Transaction Establishment
The following user primitives support COTS Phase I (Transaction Establishment)
services:

@itemize 
@item TR_BEGIN_REQ:
@prindex TR_BEGIN_REQ
This primitive requests that the TR provider form a transaction association with
the specified destination TR user.
@item TR_BEGIN_RES:
@prindex TR_BEGIN_RES
This primitive requests that the TR provider accept a previous transaction
indication.
@end itemize 

@subsubsection Provider Primitives Successful Transaction Establishment
The following provider primitives support COTS Phase I (Transaction
Establishment) services:

@itemize 
@item TR_BEGIN_IND:
@prindex TR_BEGIN_IND
This primitive indicates to the TR user that a transaction association request
has been made by a user at the specified source address.
@item TR_BEGIN_CON:
@prindex TR_BEGIN_CON
This primitive indicates to the TR user that a transaction initiation request
has been confirmed on the specified responding address.
@end itemize 

The sequence of primitives in a successful transaction initiation is defined by
the time sequence diagrams as shown in @emph{Figure 7}.

@cartouche
@image{tri_new6,3.5in} @center Figure 7@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Successful Transaction Initiation}}
@end cartouche

The sequence of primitives for the transaction initiation response token value
determination is shown in @emph{Figure 8} (procedures for transaction initiation
response token value determination are discussed in @ref{TR_BIND_REQ}, and
@ref{TR_BIND_ACK}).

@cartouche
@image{tri_new7,3.5in} @center Figure 8@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Transaction Response Token Value Determination}}
@end cartouche

@node Transaction Data Transfer Phase
@subsection Transaction Data Transfer Phase

Flow control on the transaction association is done by management of the queue
capacity, and by allowing objects of certain types to be inserted to the queues,
as shown in @emph{Table 4}.

@subsubsection Primitives for Data Transfer

The following primitives support COTS Phase II (Transaction Data Transfer)
services:

@itemize 
@item TR_CONT_REQ:
@prindex TR_CONT_REQ
This primitive requests that the TR provider transfer the specified user data.
@item TR_CONT_IND:
@prindex TR_CONT_IND
This primitive indicates to the TR user that this message contains user data.
@end itemize 

@emph{Figure 9} shows the sequence of primitives for successful user data
transfer.  The sequence of primitives may remain incomplete if a TR_END_REQ,
@prindex TR_END_REQ
TR_END_IND,
@prindex TR_END_IND
TR_ABORT_REQ,
@prindex TR_ABORT_REQ
or TR_ABORT_IND
@prindex TR_ABORT_IND
primitive occurs.

@cartouche
@image{tri_new8,3.5in} @center Figure 9@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Data Transfer}}
@end cartouche

@node Transaction Termination Phase
@subsection Transaction Termination Phase

The transaction association procedure is initialized by insertion of an end or
abort object (associated with a TR_END_REQ
@prindex TR_END_REQ
or TR_ABORT_REQ)
@prindex TR_ABORT_REQ
into the queue.  As shown in Table?, the termination procedure is destructive
with respect to other objects in the queue, and eventually results in the
emptying of queues and termination of the transaction association.

The sequence of primitives depends on the origin of the termination action.  The
sequence may be:

@enumerate 
@item invoked by on TR user, with a request from that TR user leading to an
indication to the other;
@item invoked by both TR users, with a request from each of the TR users;
@item invoked by the TR provider, with an indication to each of the TR users;
@item invoked independently by one TR user and the TR provider, with a request
from the originating TR user and an indication to the other.
@end enumerate 

@subsubsection Primitives for Transaction Termination

The following primitives support CONS Phase III (Transaction Termination)
services:

@itemize 
@item TR_END_REQ:
@prindex TR_END_REQ
This primitive requests that the TR provider deny an outstanding request for a
transaction association or normal termination of an existing transaction.
@item TR_ABORT_REQ:
@prindex TR_ABORT_REQ
This primitive requests that the TR provider deny an outstanding request for a
transaction association or abnormal termination of an existing transaction.
@item TR_END_IND:
@prindex TR_END_IND
This primitive indicates to the TR user that either a request for transaction
initiation has been denied or an existing transaction has been terminated
normally.
@item TR_ABORT_IND:
@prindex TR_ABORT_IND
This primitive indicates to the TR user that either a request for transaction
initiation has been denied or an existing transaction has been terminated
abnormally.
@end itemize 

The sequence of primitives are shown in the time sequence diagrams in the
figures that follow:

@cartouche
@image{tri_new9,3.5in} @center Figure 10@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR User Invoked Termination}}
@end cartouche

@cartouche
@image{tri_ne10,3.5in} @center Figure 11@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TR User Invoked Termination}}
@end cartouche

@cartouche
@image{tri_ne11,3.5in} @center Figure 12@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR Provider Invoked Termination}}
@end cartouche

@cartouche
@image{tri_ne12,3.5in} @center Figure 13@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TR User and TR Provider Invoked Termination}}
@end cartouche

A TR user may reject a transaction initiation attempt by issuing a TR_ABORT_REQ.
@prindex TR_ABORT_REQ
The originator parameter in the TR_ABORT_REQ
@prindex TR_ABORT_REQ
will indicate TR user invoked termination.  The sequence of primitives is shown
in @emph{Figure 14}.

@cartouche
@image{tri_ne13,3.5in} @center Figure 14@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR User Rejection of a Transaction Initiation Attempt}}
@end cartouche

If the TR provider is unable to establish a transaction, it indicates this to
the requester by an TR_ABORT_IND.
@prindex TR_ABORT_IND
The originator of the primitive indicates a TR provider invoked release.  This
is shown in @emph{Figure 15}.

@cartouche
@image{tri_ne14,3.5in} @center Figure 15@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TR Provider Rejection of a Transaction Initiation Attempt}}
@end cartouche

@node Connectionless Mode Services Definition
@section Connectionless Mode Services Definition

@menu
* Request and Response Primitives::
@end menu

The connectionless mode service allows for the transfer of transaction user data
in one and both directions simultaneously without establishing a transaction
dialogue.  A set of primitives are defined that carry transaction user data and
control information between the TR user and the TR provider entities.  The
primitives are modelled as requests initiated by the TR user and indications
initiated by the TR provider.  Indications may be initiated by the TR provider
independently from requests by the TR user.

The connectionless mode service consists of one phase.

@node Request and Response Primitives
@subsection Request and Response Primitives

@itemize 
@item TR_UNI_REQ:
@prindex TR_UNI_REQ
This primitive requests that the TR provider send the transaction user data to
the specified destination.
@item TR_UNI_IND:
@prindex TR_UNI_IND
This primitive indicates to the TR user that a user data sequence has been
received from the specified originating address.
@end itemize 

@emph{Figure 16} shows the sequence of primitives for the connectionless mode of
transfer.

@cartouche
@image{tri_ne15,3.5in} @center Figure 16@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Connectionless Mode Data Transfer}}
@end cartouche

@itemize 
@item TR_NOTICE_IND:
@prindex TR_NOTICE_IND
This primitive indicates to the TR user that the user data with the specified
destination address and QOS parameters produced an error.  This primitive is
specific to CLTS.
@end itemize 

@emph{Figure 17} shows the sequence of primitives for the CLTS error management
primitive.

@cartouche
@image{tri_ne16,3.5in} @center Figure 17@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{CLTS Error Indication Service}}
@end cartouche

@node TRI Primitives
@chapter TRI Primitives
This section describes the format and parameters of the TRI primitives.  In
addition, it discusses the states in which the primitive is valid, the resulting
state, and the acknowledgement that the primitive expects.

@menu
* Management Primitives::
* Connection-Oriented Mode Primitives::
* Connectionless Mode Primitives::
@end menu

The mapping of TRI of TRI primitives to the primitives defined in ITU-T Q.771,
ITU-T X.219 and ANSI T1.114 are shown in @ref{Mapping TRI Primitives}.  The
state/event tables for these primitives are shown in @ref{State/Event Tables}.
The precedence tables for the TRI primitives are shown in @ref{Primitive
Precedence Tables}.

The following tables provide a summary of the TR primitives and their
parameters.

@image{tri_tab4} @center Table 4@strong{@emph{.  Transaction Initiation Transaction Service Primitives}}

@image{tri_tab5} @center Table 5@strong{@emph{.  Transaction Data Transfer Transaction Service Primitives}}

@image{tri_tab6} @center Table 6@strong{@emph{.  Transaction Termination Transaction Service Primitives}}

@page
@node Management Primitives
@section Management Primitives

These primitives apply to all transaction modes.

@menu
* Transaction Information::
* Transaction Protocol Address Management::
* Transaction Options Management::
* Transaction Error Management::
@end menu

@node Transaction Information
@subsection Transaction Information

@menu
* TR_INFO_REQ::
* TR_INFO_ACK::
@end menu

@node TR_INFO_REQ
@subsubsection Transaction Information Request
@subsubheading TR_INFO_REQ
@prindex TR_INFO_REQ
This primitive request the TR provider to return the values of all supported protocol parameters
(@pxref{TR_INFO_ACK}), and also the current state of the TR provider (as defined in @ref{State/Event
Tables}).  This primitive does not affect the state of the TR provider and does not appear in the
state tables.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:
@example
typedef struct TR_info_req @{
    ulong PRIM_type;          /* Always TR_INFO_REQ */
@} TR_info_req_t;
@tpindex TR_info_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.  Always @samp{TR_INFO_REQ}.
@end vtable
@subsubheading Valid States
This primitive is valid in any state where a local acknowledgement is not pending.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
For the rules governing the requests made by this primitive, see the
@samp{TR_INFO_ACK} primitive described in @ref{TR_INFO_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the
@code{TR_INFO_ACK} primitive described in @ref{TR_INFO_ACK}.
@item @emph{Non-fatal Errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:

There are no errors associated with the issuance of this primitive.
@end itemize 

@page
@node TR_INFO_ACK
@subsubsection Transaction Information Acknowledgement
@subsubheading TR_INFO_ACK
@prindex TR_INFO_ACK
This primitive indicates to the TR user any relevant protocol-dependent
parameters.@footnote{}  It should be initiated in response to the TR_INFO_REQ
primitive described above under @ref{TR_INFO_REQ}.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:
@example
typedef struct TR_info_ack @{
    long PRIM_type;           /* Always TR_INFO_ACK */
    long ASDU_size;           /* maximum ASDU size */
    long EASDU_size;          /* maximum EASDU size */
    long CDATA_size;          /* connect data size */
    long DDATA_size;          /* discon data size */
    long ADDR_size;           /* address size */
    long OPT_size;            /* options size */
    long TIDU_size;           /* transaction i/f data unit size */
    long SERV_type;           /* service type */
    long CURRENT_state;       /* current state */
    long PROVIDER_flag;       /* type of TR provider */
    long TRI_version;         /* version # of tri that is supported */
@} TR_info_ack_t;
@tpindex TR_info_ack_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.
@item ASDU_size
Specifies the maximum size (in octets) of Transaction Service User Data
supported by the TR provider.
@item EASDU_size
Specifies the maximum size (in octets) of Expedited Transaction Service User
Data supported by the TR provider.
@item CDATA_size
Specifies the maximum number of octets of data that may be associated with a
transaction initiation primitive.
@item DDATA_size
Specifies the maximum number of octets of data that may be associated with a
transaction termination primitive.
@item ADDR_size
Specifies the maximum size (in decimal digits) of a protocol address.
@item ADDR_length
@itemx ADDR_offset
Specifies the length in bytes and offset from the beginning of the
@samp{M_PCPROTO} message block of the protocol address bound on the stream on
which the TR_INFO_REQ was issued (a protocol address is bound to a stream via a
TR_BIND_REQ).
@item QOS_length
@itemx QOS_offset
@item QOS_range_length
@itemx QOS_range_offset
@item OPTIONS_flags
@item TIDU_size
@item SERV_type
@item CURRENT_state
@item PROVIDER_type
@item NODU_size
@item PROTOID_length
@itemx PROTOID_offset
@item TRI_version
@end vtable

@page
@node Transaction Protocol Address Management
@subsection Transaction Protocol Address Management

@menu
* TR_BIND_REQ::
* TR_BIND_ACK::
* TR_UNBIND_REQ::
* TR_ADDR_REQ::
* TR_ADDR_ACK::
@end menu

@node TR_BIND_REQ
@subsubsection Transaction Bind Request
@subsubheading TR_BIND_REQ
This primitive requests that the TR provider bind a protocol address to the
@dfn{stream}, negotiate the number of dialogue indications allowed to be
outstanding by the TR provider for the specified protocol address, and
activate@footnote{A @dfn{stream} is viewed as active when the transaction
provider may receive and transmit APDUs (ACSE protocol data units) associated
with the @dfn{stream}.} the @dfn{stream} associated with the protocol address.
@prindex TR_BIND_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block.  The format of the @samp{M_PROTO}
@prindex M_PROTO
message block is as follows:@footnote{The format of the @var{TR_BIND_REQ}
primitive is chosen to be as consistent as possible with the equivalent TPI and
NPI primitives.}
@example
typedef struct TR_bind_req @{
    ulong PRIM_type;          /* Always TR_BIND_REQ */
    ulong ADDR_length;        /* address length */
    ulong ADDR_offset;        /* address offset */
    ulong XACT_number;        /* maximum outstanding transaction reqs. */
    ulong BIND_flags;         /* bind flags */
@} TR_bind_req_t;
@tpindex TR_bind_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_BIND_REQ}.
@item ADDR_length
Specifies the length@footnote{All lengths, offsets and sizes in all structures
refer to the number of octets.} of the protocol address to be bound to the
@dfn{stream}.
@item ADDR_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.  The proper alignment of the address in the
@samp{M_PROTO} message block is not guaranteed.  The address in the
@samp{M_PROTO} message block is, however, aligned the same as it was received
from the TR user.
@item XACT_number
@footnote{This field should be ignored by TR providers providing only a
unidirectional (TCAP operation class 4, ROSE operation class 5) service.}The
requested number of dialogue begin indications@footnote{If the number of
outstanding ``begin'' indications equals @var{XACT_number}, the TR provider need
not discard further incoming ``begin'' indications, but may choose to queue them
internally until the number of outstanding ``begin'' indications dropts below
@var{XACT_number}.} allowed to be outstanding by the TR provider for the
specified protocol address.  Only one stream per protocol address is allowed to
have a @var{XACT_number} greater than zero.  This indicates to the TR provider
that the @dfn{stream} is a @dfn{listener stream} for the TR user.  This
@dfn{stream} will be used by the TR provider for dialogue ``begin'' indications
for that protocol address, @pxref{TR_BEGIN_IND}.
@item BIND_flags
Unused.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_UNBND}.
@subsubheading New State
The new state is @samp{TRS_WACK_BREQ}.
@subsubheading Rules
For the rules governing the requests made by this primitive, see the
@code{TR_BIND_ACK} primitive described in @ref{TR_BIND_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the
@code{TR_BIND_ACK} primitive described in @ref{TR_BIND_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
@vtable @code
@item TRBAADDR
Indicates that the protocol address was in an incorrect format or the address
contained illegal information.  It is not intended to indicate protocol errors.
@item TRNOADDR
Indicates that the TR provider could not allocate an address.
@item TRACCES
Indicates that the user did not have proper permissions for the use of the
requested address.
@item TROUTSTATE
The primitive would place the transaction interface out of state for the
indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@item TRADDRBUSY
Indicates that the requested address is already in use.
@end vtable
@end itemize

@page
@node TR_BIND_ACK
@subsubsection Transaction Bind Acknowledgement
@subsubheading TR_BIND_ACK
@prindex TR_BIND_ACK
This primitive indicates to the TR user that the specified protocol address has
been bound to the @dfn{stream}, that the specified number of dialogue
indications are allowed to be queued by the TR provider for the specified
protocol address, and that the @dfn{stream} associated with the specified
protocol address has been activated.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block.  The format of the @samp{M_PCPROTO} message block is as follows:
@example
typedef struct TR_bind_ack @{
    ulong PRIM_type;          /* Always TR_BIND_ACK */
    ulong ADDR_length;        /* address length */
    ulong ADDR_offset;        /* address offset */
    ulong XACT_number;        /* open transactions */
    ulong TOKEN_value;        /* value of "token" assigned to stream */
@} TR_bind_ack_t;
@tpindex TR_bind_ack_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type.
@item ADDR_length
Indicates the length of the protocol address that was bound to the @dfn{stream}.
@item ADDR_offset
Indicates the offset from the beginning of the @samp{M_PCPROTO} message block
where the protocol address begins.  The proper alignment of the address in the
@samp{M_PCPROTO} message block is not guaranteed.
@item XACT_number
@footnote{This field does not apply to unidirectional TR providers.} Indicates
the accepted number of dialogue indications allowed to be outstanding by the TR
provider for the specified protocol address.
@item TOKEN_value
Indicates a token value to be used when accepting dialogues indicated on other
@dfn{streams} using this @dfn{stream}.
@end vtable
@subsubheading Valid State
This primitive is issued in response to a @samp{TR_BIND_REQ} and is valid in
state @samp{TRS_WACK_BREQ}.
@subsubheading New State
On success, the new state is @samp{TRS_IDLE}; on error, @samp{TRS_UNBND}.
@subsubheading Rules
The following rules apply to the binding of the specified protocol address to
the @dfn{stream}:
@itemize ---
@item If the @var{ADDR_length} field in the @samp{TR_BIND_REQ} primitive is zero
(0), then the TR provider must assign a protocol address to the user.
@item The TR provider is to bind the protocol address as specified in the
@samp{TR_BIND_REQ} primitive.  If the requested protocol address is in use or if
the TR provider cannot bind the specified address, it must return an error.
@end itemize

The following rules apply to negotiating the @var{XACT_number} argument:
@itemize ---
@item The returned value must be less than or equal to the corresponding
requested number as indicated in the @samp{TR_BIND_REQ} primitive.
@item If the requested value is greater than zero, the returned value must also
be greater than zero.
@item Only one @dfn{stream} that is bound to the indicated protocol address any
have a negotiated accepted number of maximum transaction requests greater than
zero.  If a @samp{TR_BIND_REQ} primitive specifies a value greater than zero,
but another @dfn{stream} has already bound itself to the given protocol address
with a value greater than zero, the TR provider must return an error.
@item If a @dfn{stream} with @var{XACT_number} greater than zero is used to
accept a dialogue (without specifying a @var{TRANS_id}), the @dfn{stream} will
be found busy during the duration of that connection and no other @dfn{streams}
may be bound to that protocol address with a @var{XACT_number} greater than
zero.  This will prevent more than one @dfn{stream} bound to the identical
protocol address from accepting dialogue indications.  See also
@ref{TR_BEGIN_RES}.
@item A @dfn{stream} requesting a @var{XACT_number} of zero should always be
legal.  This indicates to the TR provider that the @dfn{stream} is to be used to
request dialogues only.
@item @ @dfn{stream} with a negotiated @var{XACT_number} greater than zero may
generate dialogue requests (@pxref{TR_BEGIN_REQ},) or accept dialogue
indications (@pxref{TR_BEGIN_RES}.)
@end itemize

If the above rules result in an error condition, then the TR provider must issue
a @samp{TR_ERROR_ACK} primitive to the TR user specifying the error as defined
in the description of the @samp{TR_BIND_REQ} primitive, @ref{TR_BIND_REQ}.


@page
@node TR_UNBIND_REQ
@subsubsection Transaction Unbind Request
@subsubheading TR_UNBIND_REQ
@prindex TR_UNBIND_REQ
This primitive requests that the TR provider unbind the protocol address
previously associated with the @dfn{stream} and deactivate the @dfn{stream}.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:
@example
typedef struct TR_unbind_req @{
    ulong PRIM_type;          /* Always TR_UNBIND_REQ */
@} TR_unbind_req_t;
@tpindex TR_unbind_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_IDLE}.
@subsubheading New State
The new state is @samp{TRS_WACK_UREQ}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK}
primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the
indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_ADDR_REQ
@subsubsection Transaction Protocol Address Request

@subsubheading TR_ADDR_REQ
@prindex TR_ADDR_REQ

This primitive requests that the TR provider return the local protocol address
that is bound to the @dfn{stream} and the address of the remote ASE if a
transaction association has been established.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@example
typedef struct TR_addr_req @{
    long PRIM_type;           /* always TR_ADDR_REQ */
    ulong TRANS_id;           /* Transaction id */
@} TR_addr_req_t;
@tpindex TR_addr_req_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Specifies the primitive type: always
@samp{TR_ADDR_REQ}.

@item TRANS_id
Specifies the transaction association identifier for which address service is requested.
If address service is requested for local bind address only, then the transaction identifier must be
@samp{-1}.

@end vtable

@subsubheading Valid State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state is unchanged.

@subsubheading Rules

For the rules governing the requests made by this primitive, see the
@code{TR_ADDR_ACK} primitive described in @ref{TR_ADDR_ACK}.

@subsubheading Acknowledgements

This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the
@code{TR_ADDR_ACK} primitive described in @ref{TR_ADDR_ACK}.

@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:

@vtable @code

@item TRBADID
The transaction identifier specified in the primitive was incorrect or invalid.

@item TRNOTSUPPORT
This primitive is not supported by the transaction provider.

@item TRSYSERR
A system error has occured and the Linux system error is indicated in the primitive.

@end vtable

@end itemize

@page
@node TR_ADDR_ACK
@subsubsection Transaction Protocol Address Acknowledgement

@subsubheading TR_ADDR_ACK
@prindex TR_ADDR_ACK

This primitive indicates to the TR user the addresses of the local and remote
ASE.  The local address is the protocol address that has been bound to the
@dfn{stream}.  If an transaction association has been established, the remote
address is the protocol address of the remote ASE.

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:

@example
typedef struct TR_addr_ack @{
    long PRIM_type;           /* always TR_ADDR_ACK */
    long LOCADDR_length;      /* length of local address */
    long LOCADDR_offset;      /* offset of local address */
    long REMADDR_length;      /* length of remote address */
    long REMADDR_offset;      /* offset of remote address */
@} TR_addr_ack_t;
@tpindex TR_addr_ack_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Indicates the primitive type: always
@samp{TR_ADDR_ACK}.

@item LOCADDR_length
Indicates the length of the protocol address that was bound to the
@dfn{stream}.

@item LOCADDR_offset
Indicates the offset from the beginning of the
@samp{M_PCPROTO}
message block where the protocol address begins.

@item REMADDR_length
Indicates the length of the protocol address of the remote ASE.

@item REMADDR_offset
Indicates the offset from the beginning of the
@samp{M_PCPROTO}
message block where the protocol address begins.

@end vtable

The proper alignement of the addresses in the
@samp{M_PCPROTO}
message block is not guaranteed.

@subsubheading Modes

Both connection-mode and connectionless-mode.

@subsubheading Originator

Transaction provider.

@subsubheading Valid State

This primitive is issued in response to a
@samp{TR_ADDR_REQ}
primitive and is valid in any state where a response is pending to a
@samp{TR_ADDR_REQ}.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The following rules apply:

@itemize ---

@item If the requested transaction identifier was @samp{-1} in the corresponding
@samp{TR_ADDR_REQ}
primitive, and the transaction endpoint is not bound to a local address,
(i.e. it is in the @samp{TRS_UNINIT} or @samp{TRS_UNBND} state)
the
@var{LOCADDR_length}
and
@var{LOCADDR_offset}
fields must be set to @samp{0}.

@item If the requested transaction exists as identifed in the corresponding
@samp{TR_ADDR_REQ}
primitive,
@var{LOCADDR_length}
and
@var{LOCADDR_offset}
fields will be populated to reflect the local association address for the specified transaction.

@item If the requested transaction identifier was @samp{-1} in the corresponding
@samp{TR_ADDR_REQ}
primitive, the
@var{REMADDR_length}
and
@var{REMADDR_offset}
fields must be set to @samp{0}.

@item If the requested transaction exists as identified in the corresponding
@samp{TR_ADDR_REQ}
primitive,
@var{REMADDR_length}
and
@var{REMADDR_offset}
fields will be populated to reflect the remote association address for the specified transaction.

@end itemize

@page
@node Transaction Options Management
@subsection Transaction Options Management

@menu
* TR_OPTMGMT_REQ::
* TR_OPTMGMT_ACK::
@end menu

@node TR_OPTMGMT_REQ
@subsubsection Transaction Options Management Request
@subsubheading TR_OPTMGMT_REQ
@prindex TR_OPTMGMT_REQ
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@example
typedef struct TR_optmgmt_req @{
    ulong PRIM_type;          /* Always TR_OPTMGMT_REQ */
    ulong OPT_length;         /* options length */
    ulong OPT_offset;         /* options offset */
    ulong MGMT_flags;         /* options data flags */
@} TR_optmgmt_req_t;
@tpindex TR_optmgmt_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_OPTMGMT_REQ}.
@item OPT_length
@item OPT_offset
@item MGMT_flags
@end vtable
@subsubheading Flags
@vtable @var
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules
For the rules governing the requests made by this primitive, see the
@var{TR_OPTMGMT_ACK} primitive described in
@ref{TR_OPTMGMT_ACK}.
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement is indicated with the @var{TR_OPTMGMT_ACK} primitive
described in @ref{TR_OPTMGMT_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @var{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the
indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_OPTMGMT_ACK
@subsubsection Transaction Options Management Acknowledgement
@subsubheading TR_OPTMGMT_ACK
@prindex TR_OPTMGMT_ACK
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@example
typedef struct TR_optmgmt_ack @{
    ulong PRIM_type;          /* Always TR_OPTMGMT_ACK */
    ulong OPT_length;         /* options length */
    ulong OPT_offset;         /* options offset */
    ulong MGMT_flags;         /* options data flags */
@} TR_optmgmt_ack_t;
@tpindex TR_optmgmt_ack_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_OPTMGMT_ACK}.
@item OPT_length
@item OPT_offset
@item MGMT_flags
@end vtable
@subsubheading Flags
@vtable @var
@end vtable
@subsubheading Valid State
@subsubheading New State
@subsubheading Rules

@page
@node Transaction Error Management
@subsection Transaction Error Management

@menu
* TR_OK_ACK::
* TR_ERROR_ACK::
@end menu

@node TR_OK_ACK
@subsubsection Transaction Successful Receipt Acknowledgement
@subsubheading TR_OK_ACK
@prindex TR_OK_ACK
This primitive indicates to the TR user that the previous TR-user-originated
primitive was received successfully by the TR provider.  It does not indicate to
the TR user any TR protocol action taken due to the issuance of the last
primitive.  This may only be initiated as an acknowledgement for those
primitives that require one.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@example
typedef struct TR_ok_ack @{
    ulong PRIM_type;          /* Always TR_OK_ACK */
    ulong CORRECT_prim;       /* correct primitive */
@} TR_ok_ack_t;
@tpindex TR_ok_ack_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_OK_ACK}.
@item CORRECT_prim
Indicates the primitive type that was successfully received.
@end vtable
@subsubheading Valid State
Valid in any state where a local acknowledgement requiring @samp{TR_OK_ACK}
response is pending.
@subsubheading New State
Depends on the current state; @pxref{State/Event Tables}.

@page
@node TR_ERROR_ACK
@subsubsection Transaction Error Acknowledgement
@subsubheading TR_ERROR_ACK
@prindex TR_ERROR_ACK
This primitive indicates to the TR user that a non-fatal@footnote{For an
overview of the error handling capabilities available to the TR provider, see
@ref{Diagnostics Requirements}.} error has occurred in the last
TR-user-originated primitive.  This may only be initiated as an acknowledgement
for those primitives that require one.  It also indicates to the TR user that no
action was taken on the primitive that cause the error.
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:
@example
typedef struct TR_error_ack @{
    ulong PRIM_type;          /* Always TR_ERROR_ACK */
    ulong ERROR_prim;         /* primitive in error */
    ulong TRI_error;          /* TRI error code */
    ulong UNIX_error;         /* UNIX error code */
    ulong TRANS_id;           /* Transaction id */
@} TR_error_ack_t;
@tpindex TR_error_ack_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_ERROR_ACK}.
@item ERROR_prim
Indicates the primitive type that was in error.
@item TRI_error
Indicates the Transaction Sub-Layer Interface error code.
@item UNIX_error
Indicates the UNIX System error code.  This field is zero (0) unless the
@var{TRI_error} is equal to @samp{TRSYSERR}.
@item TRANS_id
@end vtable
@subsubheading Valid State
This primitive is valid in any state where a local acknowledgement is pending
and an error has occurred.
@subsubheading New State
The new state is the state that the interface was in before the primitive in
error was issued, @pxref{State/Event Tables}.
@subsubheading Rules
The TR provider is allowed to return any of the following TR error codes:
@table @var
@item TRBADADDR
Indicates that the protocol address as specified in the primitive was of an
incorrect format or the address contained illegal information.
@item TRBADOPT
Indicates that the options as specified in the primitive were in an incorrect
format, or they contained illegal information.
@item TRBADF
Indicates that the @dfn{stream} queue pointer as specified in the primitive was
illegal.
@item TRNOADDR
Indicates that the TR provider could not allocate a protocol address.
@item TRACCES
Indicates that the user did not have proper permissions to use the protocol
address or options specified in the primitive.
@item TROUTSTATE
Indicates that the primitive would place the interface out of state.
@item TRBADSEQ
Indicates that the transaction identifier specified in the primitive was
incorrect or illegal.
@item TRBADFLAG
Indicates that the flags specified in the primitive were incorrect or illegal.
@item TRBADDATA
Indicates that the amount of user data specified was illegal.
@item TRSYSERR
Indicates that a system error has occurred and that the UNIX System error is
indicated in the primitive.
@item TRADDRBUSY
Indicates that the requested address is already in use.
@item TRRESADDR
Indicates that the TR provider requires the responding @dfn{stream} be bound to
the same protocol address as the @dfn{stream} on which the dialogue ``begin''
indication (@pxref{TR_BEGIN_IND}) was received.
@item TRNOTSUPPORT
Indicates that the TR provider does not support the requested capability.
@end table

@page
@node Connection-Oriented Mode Primitives
@section Connection-Oriented Mode Primitives

@menu
* Transaction Establishment::
* Transaction Data Transfer::
* Transaction Termination::
@end menu

@node Transaction Establishment
@subsection Transaction Establishment

@menu
* TR_BEGIN_REQ::
* TR_BEGIN_IND::
* TR_BEGIN_RES::
* TR_BEGIN_CON::
@end menu

The transaction begin service provides means to start a transaction between two
TR-users.  This may be accompanied by the transfer of TR-user information
contained in @samp{M_DATA}
@prindex M_DATA
message blocks accompanying the primitive.

@node TR_BEGIN_REQ
@subsubsection Transaction Begin Request

@subsubheading TR_BEGIN_REQ
@prindex TR_BEGIN_REQ

This primitive requests that the TR provider form an transaction association to
the specified destination protocol address.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any user data is specified by the TR user.  The
format of the @samp{M_PROTO} message block is as follows:

@example
typedef struct TR_begin_req @{
    ulong PRIM_type;          /* Always TR_BEGIN_REQ */
    ulong CORR_id;            /* Correlation Id */
    ulong ASSOC_flags;        /* Association flags */
    ulong DEST_length;        /* Destination address length */
    ulong DEST_offset;        /* Destination address offset */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_begin_req_t;
@tpindex TR_begin_req_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type: always @samp{TR_BEGIN_REQ}.

@item CORR_id

Specifies the correlation identifier for the newly formed transaction.  The
correlation identifier is an identifier chose by the TR user that uniquely
identifies this transaction association establishment request from other
establishment requests on the same @dfn{stream}.  If the @var{CORR_id} is zero
(0), it specifies that this is the only transaction to be formed on the
requesting @dfn{stream} and attempts to form additional transactions before this
transaction is complete will fail.  The value of @var{CORR_id} will be returned
in 

@item ASSOC_flags

Specifies the option flags provided with the primitive.  See ``Flags'' below.
Some flags may be provider specific.

@item DEST_length

Specifies the length of the protocol address to which to establish an
transaction association.

@item DEST_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.

@item ORIG_length

Specifies the length of the protocol address from which to establish an
transaction association.

@item ORIG_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.

@item OPT_length

Specifies the length of the protocol options associated with the transaction.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@end vtable

@subsubheading Flags

@vtable @var

@item TR_SEQ_ASSURANCE

By setting this flag on the primitive, the originating transaction user can
indicate that ``sequence assured'' service is requested from the underlying
network service provider.

@item TR_NO_PERMISSION

By setting this flag on the primitive, the originating transaction user can
either deny (set) or grant (clear) permission for the transaction peer to
terminate the transaction association upon receipt of the corresponding
primitive at the peer (@pxref{TR_BEGIN_IND}).  This flag can only be used with
transaction provider that support it (@pxref{Addendum for ANSI Conformance}).

@end vtable

@subsubheading Valid State

This primitive is valid in transaction state @var{TRS_IDLE}.  This primitive is
only valid in connection-oriented mode.

@subsubheading New State

The new state for the interface is @var{TR_WACK_CREQ}.

@subsubheading Rules

The following rules apply to the specification of parameters to this primitive:

@itemize ---

@item When the originating address is not specified, @var{ORIG_length} and
@var{ORIG_offset} must be specified as zero (0).

@item When the @var{ORIG_length} and @var{ORIG_offset} are zero (0), the
originating address is the local address that is implicitly associated with the
access point from the local bind service (@pxref{TR_BIND_REQ}).

@item The destination address must be specified and the TR provider will return
error @samp{TRNOADDR} if the @var{DEST_length} and @var{DEST_offset} are zero
(0).

@end itemize

@subsubheading Acknowledgements

This primitive requires the transaction provider to generate one of the
following acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful Association Establishment:}
This is indicated with the @samp{TR_BEGIN_CON} primitive described in
@ref{TR_BEGIN_REQ}.  This results in the @var{TRS_DATA_XFER} state for the
transaction.  Successful establishment and tear down can also be indicated with
the @samp{TR_END_IND} primitive described in @ref{TR_END_IND}.  This results in
the @var{TRS_IDLE} state for the transaction.

@item @emph{Unsuccessful Association Establishment:}
This is indicated with the @samp{TR_ABORT_IND} primitive described in
@ref{TR_ABORT_IND}.  For example, an association may be rejected because either
the called transaction user cannot be reached, or the transaction provider or
the called transaction user did not agree on the specified options.  This
results in the @var{TRS_IDLE} state for the transaction.

@item @emph{Non-fatal errors:}
These are indicated with the @samp{TR_ERROR_ACK} primitive.  The applicable
non-fatal errors are defined as follows:

@vtable @var

@item TRACCES

This indicates that the user did not have proper permissions for the use of the
requested protocol address or protocol options.

@item TRBADADDR

This indicates that the protocol address was in an incorrect format or the
address contained illegal information.  It is not intended to indicate protocol
connection errors, such as an unreachable destination.  Those types of errors
are indicated with the @samp{TR_ABORT_IND} primitive described in
@ref{TR_ABORT_IND}.

@item TRBADOPT

This indicates that the options were in an incorrect format or they contained
illegal information.

@item TROUTSTATE

The primitive would place the transaction interface out of state.

@item TRBADDATA

The amount of user data specified was illegal (@pxref{TR_INFO_ACK}).

@item TRSYSERR

A system error has occured and the UNIX System error is indicated in the
primitive.

@end vtable

@end itemize

@page
@node TR_BEGIN_IND
@subsubsection Transaction Begin Indication

@subsubheading TR_BEGIN_IND
@prindex TR_BEGIN_IND

This primitive indicates to the destination TR user that a transaction
association begin request has been made by the user at the specified source
protocol address.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured
as follows:

@example
typedef struct TR_begin_ind @{
    ulong PRIM_type;          /* Always TR_BEGIN_IND */
    ulong TRANS_id;           /* Transaction id */
    ulong ASSOC_flags;        /* Association flags */
    ulong DEST_length;        /* Destination address length */
    ulong DEST_offset;        /* Destination address offset */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_begin_ind_t;
@tpindex TR_begin_ind_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type: always @samp{TR_BEGIN_IND}.

@item TRANS_id

Indicates the transaction identifier associated by the transaction provider with
this begin indication.

@item ASSOC_flags

Specifies the option flags provided with the primitive.  See ``Flags'' below.
Some flags may be provider specific.

@item DEST_length

Indicates the length of the protocol address to which a transaction association
was requested established by the peer.

@item DEST_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.

@item ORIG_length

Indicates the length of the protocol address from which a transaction
association was requested established.

@item ORIG_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.

@item OPT_length

Indicates the length of the protocol options associated with the transaction
begin indication.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@end vtable

@subsubheading Flags

@vtable @var

@item TR_NO_PERMISSION

The value of this flag  may indicate either that the transaction peer gives
permission (clear) to end the transaction association or refuses permission
(set) to end the transaction association.  This flag is only valid for
transaction providers that support it (@pxref{Addendum for ANSI Conformance}).

@end vtable

@subsubheading Valid State

This primitive is valid in state @var{TRS_IDLE}.  This primitive is only valid in
connection-oriented mode.

@subsubheading New State

The new state for the identified transaction is @var{TR_WRES_CIND}.

@subsubheading Rules

The following rules apply to the issuance of this primitive by the transaction
provider:

@itemize ---

@item The transaction identifier provided by the transaction provider uniquely
identifies this transaction begin indication within the stream upon which the
primitive is issued.  This must be a positive, non-zero value.  The high bit of
the transaction identifier is reserved for exclusive use by the transaction user
in generating correlation identifiers.

@item It is not necessary to indicate a destination address in
@var{DEST_length}, and @var{DEST_offset} when the protocol address to which the
begin indication corresponds is the same as the local protocol address to which
the listening stream is bound.  In the case that the destination protocol
address is not provided, @var{DEST_length} and @var{DEST_offset} must both be
set to zero (0).  When the local protocol address to which the begin indication
corresponds is not the same as the bound address for the stream, the transaction
provider must indicate the destination protocol address using @var{DEST_length}
and @var{DEST_offset}.

@item The origination protocol address is a mandatory field.  The transaction
provider must indicate the originating protocol address corresponding to the
begin indication using the @var{ORIG_length} and @var{ORIG_offset} fields.

@item Any indicated options are included in the @var{OPT_length} and
@var{OPT_offset} fields.

@item When the @samp{TR_NO_PERMISSION} flag is set, the transaction user must
not issue a @samp{TR_END_REQ} primitive in response to this indication.

@end itemize

@page
@node TR_BEGIN_RES
@subsubsection Transaction Begin Response

@subsubheading TR_BEGIN_RES
@prindex TR_BEGIN_RES

This primitive allows the destination TR user to request that the transaction
provider accept a previous transaction association begin indication.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured
as follows:

@example
typedef struct TR_begin_res @{
    ulong PRIM_type;          /* Always TR_BEGIN_RES */
    ulong TRANS_id;           /* Transaction id */
    ulong ASSOC_flags;        /* Association flags */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_begin_res_t;
@tpindex TR_begin_res_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type: always @samp{TR_BEGIN_RES}.

@item TRANS_id

Specifies the transaction identifier of an outstanding begin indication to which
the transaction user is responding.

@item ASSOC_flags

Specifies the option flags provided with the primitive.  See ``Flags'' below.
Some flags may be provider specific.

@item ORIG_length

Specifies the length of the protocol address to be used as the responding
address.

@item ORIG_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.

@item OPT_length

Specifies the length of the protocol options to be associated with the begin
response.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@end vtable

@subsubheading Flags

@vtable @var

@item TR_SEQ_ASSURANCE

By setting this flag on the primitive, the originating transaction user can
indicate that ``sequence assured'' service is requested from the underlying
network service provider.

@item TR_NO_PERMISSION

By setting this flag on the primitive, the originating transaction user can
either deny (set) or grant (clear) permission for the transaction peer to
terminate the transaction association upon receipt of the corresponding
primitive at the peer (@pxref{TR_BEGIN_IND}).  This flag can only be used with
transaction provider that support it (@pxref{Addendum for ANSI Conformance}).

@end vtable

@subsubheading Valid State

This primitive is valid in transaction state @var{TR_WRES_CIND}.  This primitive
is only valid in connection-oriented mode.

@subsubheading New State

The new state for the specified transaction is @var{TRS_DATA_XFER}.

@subsubheading Rules

@subsubheading Acknowledgements

This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK}
primitive described in @ref{TR_OK_ACK}.

@item @emph{Unsuccessful (Non-fatal errors):}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:

@vtable @code

@item TRBADF

The token specified is not associated with an open stream.

@item TRBADOPT

The options were in an incorrect format, or they contained illegal information.

@item TRACCES

The user did not have proper permissions for the use of the responding protocol
address or protocol options.

@item TROUTSTATE

The primitive would place the transaction interface out of state for the
indicated transaction.

@item TRBADDATA

The amount of user data specified was outside the range supported by the
transaction provider.

@item TRBADSEQ

The transaction identifier specified in the primitive was incorrect or illegal.

@item TRSYSERR

A system error occurred and the UNIX System error is indicated in the primitive.

@item TRRESADDR

The transaction provider requires that the responding @dfn{stream} is bound to
the same address as the @dfn{stream} on which the transaction association begin
indication was received.

@item TRBADADDR

This indicates that the protocol address was in an incorrect format or the
protocol address contained illegal information.

@end vtable

@end itemize

@page
@node TR_BEGIN_CON
@subsubsection Transaction Begin Confirmation

@subsubheading TR_BEGIN_CON
@prindex TR_BEGIN_CON

This primitive indicates to the source transaction user that a previous
transaction association begin request has been confirmed on the specified
responding protocol address.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured as follows:

@example
typedef struct TR_begin_con @{
    ulong PRIM_type;          /* Always TR_BEGIN_CON */
    ulong CORR_id;            /* Correlation Id */
    ulong TRANS_id;           /* Transaction id */
    ulong ASSOC_flags;        /* Association flags */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_begin_con_t;
@tpindex TR_begin_con_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Indicates the primitive type: always
@samp{TR_BEGIN_CON}.

@item CORR_id
Indicates the correlation identifier used by the transport user to uniquely identify the transaction
begin request of the stream to which this confirmation corresponds.
This is the transaction user assigned transaction identifier of the corresponding
@samp{TR_BEGIN_REQ}
that this message is confirming.

@item TRANS_id
Indicates the transaction identifier provided by the transport provider to uniquely identify the
transaction on this stream.

@item ASSOC_flags
Indicates the option flags provided with the primitive.
See ``Flags'' below.
Some flags may be provider specific.

@item ORIG_length
Indicates the length of the responding protocol address from which the confirmation was received.

@item ORIG_offset
Indicates the offset from the beginning of the
@samp{M_PROTO}
message block where the responding protocol address begins.

@item OPT_length
Indicates the length of the confirmed protocol options negotiated by the transaction peer.

@item OPT_offset
Indicates the offset from the beginning of the
@samp{M_PROTO}
message block where the confirmed protocol options begin.

@end vtable

The proper alignment of the responding address and options in the
@samp{M_PROTO}
message block is not guaranteed.

@subsubheading Flags

The following association flags are defined:

@vtable @var

@item TR_NO_PERMISSION
The value of this flag may indicate either that the transaction peer gives permission (clear) to end
the transaction association or refuses permission (set) to end the transaction association.
This flag is only valid for transaction providers that support it
(@pxref{Addendum for ANSI Conformance}).

@end vtable

@subsubheading Mode

This primitive is only valid in connection-oriented mode.

@subsubheading Originator

Transaction provider.

@subsubheading Valid State

This primitive is valid in transaction state
@var{TRS_WCON_CREQ}.

@subsubheading New State

The new state for the transaction is
@var{TRS_DATA_XFER}.

@subsubheading Rules

The following rules apply to the issuance of this primitive:

@itemize ---

@item It is not always necessary for the transport provider to provide the responding address in the
@var{ORIG_length}
and
@var{ORIG_offiset}
fields.
Where the responding protocol address is the same as the destination protocol address for which the
transaction initialization was requested, it is not necessary to provide the responding address in
the
@dfn{TR_BEGIN_CON}.
Where the responding protocol address is not provided, the
@var{ORIG_length}
and
@var{ORIG_offset}
fields are set to zero (0).

@item When the
@samp{TR_NO_PERMISSION}
flag is set, the transaction user must not issue a
@samp{TR_END_REQ}
primitive in response to this indication.

@end itemize

@page
@node Transaction Data Transfer
@subsection Transaction Data Transfer

@menu
* TR_CONT_REQ::
* TR_CONT_IND::
@end menu

The data transfer service primitives provide for an exchange of transaction user
data known as TSDUs, in either direction or in both directions simultaneously on
a transaction association.  The transaction service preserves both the sequence
and the boundaries of the TSDUs.
@node TR_CONT_REQ
@subsubsection Transaction Continue Request
@subsubheading TR_CONT_REQ
@prindex TR_CONT_REQ
This user-originated primitive specifies to the transaction provider that this
message contains transaction user data.  It allows the transfer of transaction
user data between transaction users, without modification by the transaction
provider.

The transaction user must send an integral number of octets of data greater than
zero.  In a case where the size of the TSDU exceeds the TIDU (as specified by
the size of the @var{TIDU_size} parameter of the @samp{TR_INFO_ACK} primitive
described in @ref{TR_INFO_ACK}), the TSDU may be broken up into more than one
TIDU.  When a TSDU is broken up into more than one TIDU, the @samp{T_MORE} flag
will be set on each TIDU except the last one.
@subsubheading Format
The format of the message is one or more @samp{M_DATA}
@prindex M_DATA
message blocks.  Use of a @samp{M_PROTO}
@prindex M_PROTO
message block is optional.  The @samp{M_PROTO}
@prindex M_PROTO
message block is used for two reasons:
@enumerate a
@item to indicate that the TSDU is broken into more than one TIDU, and that the
data carried in the following @samp{M_DATA} message block constitutes one TIDU;
@item to indicate whether receipt confirmation is desired for the TSDU.
@end enumerate
message block, followed by zero or more @samp{M_DATA} message blocks containing
user data for the association, structured as follows:
@example
typedef struct TR_cont_req @{
    ulong PRIM_type;          /* Always TR_CONT_REQ */
    ulong TRANS_id;           /* Transaction id */
    ulong ASSOC_flags;        /* Association flags */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_cont_req_t;
@tpindex TR_cont_req_t
@end example
@subsubheading Guidelines for use of @t{M_PROTO}
The following guidelines must be followed with respect to the user of the
@samp{M_PROTO} message block:
@enumerate
@item The @t{M_PROTO} message block need not be present when the TSDU size is
less that or equal to the TIDU size and one of the following is true:
@itemize ---
@item receipt confirmation has been negotiated for non-use; or
@item receipt confirmation has been successfully negotiated for use or non-use
and the default selection as specified via the @samp{TR_OPTMGMT_REQ} primitive
is to be used.
@end itemize
@item The @t{M_PROTO} message block must be present when:
@itemize ---
@item the TSDU size is greater than the TIDU size;
@item receipt confirmation has been successfully negotiated for use and the
default selection as specified with the @samp{TR_OPTMGMT_REQ} primitive needs to
be overridden.
@end itemize
@end enumerate
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_CONT_REQ}.
@item TRANS_id
Specifies the transaction identifier previously indicated by the transport
provider to uniquely identify the transaction.  The transaction identifier must
be specified by the transaction user unless there is only one transaction
supported by the stream in transaction state @var{TRS_DATA_XFER}.  When
specified, the transaction identifier must be the same as the transaction
identifier that was indicated by the transaction provider in the corresponding
@samp{TR_BEGIN_IND} or @samp{TR_BEGIN_CON}.
@item ASSOC_flags
Specifies the option flags provided with the primitive.  See ``Flags'' below.
Some flags may be provider specific.
@item OPT_length
Specifies the length of the protocol options associated with the user data
transfer.  Supplying protocol options with the primitive is optional.  If the
transaction user does not provide protocol options with the primitive, the
@var{OPT_length} and @var{OPT_offset} fields must be set to zero (0) by the
transaction user.  The format of the protocol options are provider specific.
@item OPT_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.  Alignment of the protocol options in the
@samp{M_PROTO} message block is not guaranteed.  However, the alignment of the
protocol options in the @samp{M_PROTO} message block are the same as was
specified by the transport user.
@end vtable
@subsubheading Flags
@vtable @var
@item TR_MORE_DATA_FLAG
When set, the @var{MORE_DATA_FLAG} indicates that the next @samp{TR_CONT_REQ}
primitive (TIDU) is also part of this TSDU.
@item TR_RC_FLAG
By setting this flag on the @samp{TR_CONT_REQ}, the originating transaction user
can request confirmation of receipt of the @var{TR_CONT_REQ} primitive.
@item TR_SEQ_ASSURANCE
By setting this flag on the primitive, the originating transaction user can
indicate that ``sequence assured'' service is requested from the underlying
network service provider.
@item TR_NO_PERMISSION
By setting this flag on the @samp{TR_CONT_REQ}, the originating transaction user
can either deny (set) or grant (clear) permission for the transaction peer to
terminate the transaction association upon receipt of the corresponding
@samp{TR_CONT_IND} primitive.  This flag is only used for transaction providers
that support this feature (@pxref{Addendum for ANSI Conformance}).
@end vtable
@subsubheading Valid State
This primitive is valid in transaction state @var{TRS_DATA_XFER}.  This primitive
is only valid in connection-oriented mode.
@subsubheading New State
The new state for the transaction remains unchanged.
@subsubheading Acknowledgements
This primitive does not require acknowledgement.  If a non-fatal error occurs,
it is the responsibility of the peer ASE to report it within the upper-layer
protocol or using the @var{TR_ABORT_IND} primitive (@pxref{TR_ABORT_IND}).
Fatal errors are indicated with the @samp{M_ERROR}
@prindex M_ERROR
message type which results in the failure of all operating system service
routines on the @dfn{stream}.  The allowable fatal errors are as follows:
@table @var
@item EPROTO
This error indicates on of the following unrecoverable protocol conditions:
@itemize ---
@item The transaction interface was found to be in an incorrect state.
@item The amount of transaction user data associated with the primitive is
outside the range supported by the transaction provider (as specified by the
@var{TIDU_size} parameter of the @samp{TR_INFO_ACK} primitive described in
@ref{TR_INFO_ACK}.)
@item The options requested are either not support by the transaction provider
or their use is not specified with the @var{TR_BEGIN_REQ} primitive.
@item The @samp{M_PROTO} message block was not follows by one or more
@samp{M_DATA} message blocks.
@item The amount of transaction user data associated with the current NSDU is
outside the range supported by the transaction provider (as specified by the
@var{TSDU_size} parameter in the @samp{TR_INFO_ACK} primitive described in
@ref{TR_INFO_ACK}.)
@item The @var{TR_RC_FLAG} and @var{TR_MORE_DATA_FLAG} were both set in the
primitive, or the flags field contained an unknown value.
@end itemize
@end table

@b{NOTE:} If the interface is in the @var{TRS_IDLE} state when the provider
receives the @samp{TR_CONT_REQ} primitive, then the transaction provider should
discard the request without generating a fatal error.

@page
@node TR_CONT_IND
@subsubsection Transaction Continue Indication
@subsubheading TR_CONT_IND
@prindex TR_CONT_IND
This transaction provider originated primitive indicates to the transaction user
that this message contains transaction user data.  As in the @samp{TR_CONT_REQ}
primitive (@pxref{TR_CONT_REQ}), the TSDU can eb segmented into more than one
TIDU.  The TIDUs are assocated with the TSDU by using the
@var{TR_MORE_DATA_FLAG}.  The @var{TR_RC_FLAG} and @var{TR_NO_PERMISSION} flags
are allowed to be set only on the last TIDU.  Use of the @samp{M_PROTO} message
blocks is optional (see guidelines describe in @pxref{TR_CONT_REQ}).
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured as follows:
@example
typedef struct TR_cont_ind @{
    ulong PRIM_type;          /* Always TR_CONT_IND */
    ulong TRANS_id;           /* Transaction id */
    ulong ASSOC_flags;        /* Association flags */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_cont_ind_t;
@tpindex TR_cont_ind_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_CONT_IND}.
@item TRANS_id
Indicates the transaction identifier previously indicated by the transport
provider to uniquely identify the transaction.  The transaction identifier must
be indicated by the transaction provider.  The transaction identifier must be
the same as the transaction identifier that was indicated in the corresponding
@samp{TR_BEGIN_IND} or @samp{TR_BEGIN_CON}.
@item ASSOC_flags
Specifies the option flags provided with the primitive.  See ``Flags'' below.
Some flags may be provider specific.
@item OPT_length
Indicates the length of the protocol options associated with the user data
transfer.  Protocol options are only indicated by the transaction provider when
they were supplied by the underlying protocol.  If the transport provider does
not indicate protocol options, the @var{OPT_length} and @var{OPT_offset} fields
must be set to zero (0).  The format of the protocol options are provider
specific.
@item OPT_offset
Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.
@end vtable
@subsubheading Flags
@vtable @var
@item TR_MORE_DATA_FLAG
When set, indicates taht the next @samp{TR_CONT_IND} message (TIDU) is part of
this TSDU.
@item TR_RC_FLAG
The value of the flag may indicate either that confirmation is requested or that
it is not requested.  The flag is allowed to be set only if use of the Receipt
Confirmation was agreed between both the transaction users and the transaction
provider during transaction association establishment.  The value of this flag
is always identical to that supplied in the corresponding @samp{TR_CONT_REQ}.
@item TR_NO_PERMISSION
The value of this flag may indicate either that the transaction peer gives
permission (clear) to end the transaction association or does not give
permission (set) to end the transaction association.  This flag is only valid
for transaction providers that support it (@pxref{Addendum for ANSI
Conformance}).
@end vtable
@subsubheading Valid State
This primitive is valid in transaction state @var{TRS_DATA_XFER}.  This primitive
is only valid in connection-oriented mode.
@subsubheading New State
The new state for the transaction is unchanged.
@subsubheading Rules
@itemize ---
@item When the @samp{TR_NO_PERMISSION} flag is set, the transaction user must
not issue a @samp{TR_END_REQ} primitive in response to this indication.
@end itemize

@page
@node Transaction Termination
@subsection Transaction Termination

@menu
* TR_END_REQ::
* TR_END_IND::
* TR_ABORT_REQ::
* TR_ABORT_IND::
@end menu

@node TR_END_REQ
@subsubsection Transaction End Request
@subsubheading TR_END_REQ
@prindex TR_END_REQ
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured
as follows:
@example
typedef struct TR_end_req @{
    ulong PRIM_type;          /* Always TR_END_REQ */
    ulong TRANS_id;           /* Transaction id */
    ulong TERM_scenario;      /* Termination scenario */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_end_req_t;
@tpindex TR_end_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_END_REQ}.
@item TRANS_id
Specifies the transaction identifier previously indicated by the transport provider to uniquely
identify the transaction.  The transaction identifier must be specified by the transaction user
unless there is only one transaction supported by the stream in transaction state
@var{TRS_DATA_XFER}.  When specified, the transaction identifier must be the same as the transaction
identifier that was indicated by the transaction provider in the corresponding @samp{TR_BEGIN_IND}
or @samp{TR_BEGIN_CON}.
@item TERM_scenario
Specifies the termination scenario.  Termination scenarios are provider specific.
@item OPT_length
Specifies the length of the protocol options associated with the transaction
association termination.  Supplying protocol options with the primitive is
optional.  If the transaction user does not provide protocol options with the
primitive, the @var{OPT_length} and @var{OPT_offset} fields must be set to zero
(0) by the transaction user.  The format of the protocol options are provider
specific.
@item OPT_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.  Alignment of the protocol options in the
@samp{M_PROTO} message block is not guaranteed.  However, the alignment of the
protocol options in the @samp{M_PROTO} message block are the same as was
specified by the transport user.
@end vtable
@subsubheading Valid State
This primitive is valid in transaction state @var{TRS_DATA_XFER}.  This primitive
is only valid in connection-oriented mode.
@subsubheading New State
The new state of the transaction is @var{TRS_IDLE}.
@subsubheading Rules
@subsubheading Acknowledgements
This primitive requires the TR provider to generate one of the following
acknowledgements upon receipt of the primitive:
@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TR_OK_ACK}
primitive described in @ref{TR_OK_ACK}.
@item @emph{Non-fatal errors:}
These errors will be indicated with the @code{TR_ERROR_ACK} primitive described
in @ref{TR_ERROR_ACK}.  The allowable errors are as follows:
@vtable @code
@item TROUTSTATE
The primitive would place the transaction interface out of state for the
indicated transaction.
@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.
@end vtable
@end itemize

@page
@node TR_END_IND
@subsubsection Transaction End Indication
@subsubheading TR_END_IND
@prindex TR_END_IND
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured
as follows:
@example
typedef struct TR_end_ind @{
    ulong PRIM_type;          /* Always TR_END_IND */
    ulong CORR_id;            /* Correlation id */
    ulong TRANS_id;           /* Transaction id */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_end_ind_t;
@tpindex TR_end_ind_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_END_IND}.
@item CORR_id
Indicates the correlation identifier previously specified by the transport user
to uniquely identify an outstanding transaction request that has not yet
received transaction confirmation.  For all other cases, this field must be set
to zero (0).
@item TRANS_id
Indicates the transaction identifier previously indicated by the transport
provider to uniquely identify the transaction.  The transaction identifier must
be indicated by the transaction provider.  The transaction identifier must be
the same as the transaction identifier that was indicated in the corresponding
@samp{TR_BEGIN_IND} or @samp{TR_BEGIN_CON} (if any).
@item OPT_length
Indicates the length of the protocol options associated with the transaction
association termination.  Protocol options are only indicated by the transaction
provider when they were supplied by the underlying protocol.  If the transport
provider does not indicate protocol options, the @var{OPT_length} and
@var{OPT_offset} fields must be set to zero (0).  The format of the protocol
options are provider specific.
@item OPT_offset
Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.
@end vtable
@subsubheading Valid State
This primitive is valid in transaction states @var{TRS_WCON_CREQ} or
@var{TRS_DATA_XFER}.  This primitive is only valid in connection-oriented mode.
@subsubheading New State
The new state for the transaction is @var{TRS_IDLE}.
@subsubheading Rules
The following rules apply to the issuance of this primitive:
@itemize ---
@item This primitive may be issued in response to a @var{TR_BEGIN_REQ}
primitive.  When issued in this case, the transaction provider is indicating
that a transaction is both confirmed and terminated.

@item This primitive may be issued after receiving a @var{TR_BEGIN_RES} or
issuing a @var{TR_BEGIN_CON}, but before receiving a @var{TR_END_REQ} or
@var{TR_ABORT_REQ} primitive, or issuing a @var{TR_UABORT_IND} or
@var{TR_PABORT_IND} primitive.

@item When issued, this primitive indicates the tear-down of the transaction
association corresponding to the @var{TRANS_id} indicated in the primitive.
@end itemize

@page
@node TR_ABORT_REQ
@subsubsection Transaction User Abort Request

@subsubheading TR_ABORT_REQ
@prindex TR_ABORT_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@example
typedef struct TR_abort_req @{
    ulong PRIM_type;          /* Always TR_ABORT_REQ */
    ulong TRANS_id;           /* Transaction id */
    ulong ABORT_cause;        /* Cause of the abort */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_abort_req_t;
@tpindex TR_abort_req_t
@end example

@subsubheading Parameters
The primitive has the following arguments:

@vtable @var

@item PRIM_type
Specifies the primitive type: always @samp{TR_ABORT_REQ}.

@item TRANS_id
Specifies the transaction identifier previously indicated by the transport provider to uniquely
identify the association.
The transaction identifier must be the same as the transaction identifier that was
indicated by the transaction provider in the corresponding @samp{TR_BEGIN_IND} or
@samp{TR_BEGIN_CON} primitive.

@item ABORT_cause
Specifies the (user) cause for the abort.
Abort causes are provider specific.

@item OPT_length
Specifies the length of the protocol options associated with the abort.
Supplying protocol options with the primitive is optional.
If the transaction user does not provide protocol options with the primitive, the @var{OPT_length}
and @var{OPT_offset} fields must be set to zero (0) by the transaction user.
The format of the protocol options are provider specific.

@item OPT_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block where the protocol
options begin.
Alignment of the protocol options in the @samp{M_PROTO} message block is not guaranteed.
However, the alignment of the protocol options in the @samp{M_PROTO} message block are the same as
was specified by the transport user.

@end vtable

@subsubheading Modes

This primitive is only valid in connection-oriented mode.

@subsubheading Originator

Transaction user.

@subsubheading Valid State

This primitive is valid in any connection oriented transaction state other than @var{TRS_IDLE}.

@subsubheading New State

The new state for the transaction is @var{TRS_IDLE}.

@c @subsubheading Rules

@subsubheading Acknowledgements

This primitive requires the TR provider to generate one of the following acknowledgements upon
receipt of the primitive:

@itemize ---

@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @samp{TR_OK_ACK} primitive described
in @ref{TR_OK_ACK}.

@item @emph{Non-fatal errors:}
These errors will be indicated with the @samp{TR_ERROR_ACK} primitive described in
@ref{TR_ERROR_ACK}.  The allowable errors are as follows:

@vtable @code

@item TRBADDATA
The amount of user data specified was invalid.

@item TRBADID
The transaction identifier specified in the primitive was incorrect or invalid.

@item TRNOTSUPPORT
This primitive is not supported by the transaction provider.

@item TROUTSTATE
The primitive would place the transaction interface out of state for the indicated transaction.

@item TRSYSERR
A system error occurred and the UNIX System error is indicated in the primitive.

@end vtable

@end itemize

The transport provider should not generate an error if it receives this primitive in the
@var{TRS_IDLE} state for the transaction.

@page
@node TR_ABORT_IND
@subsubsection Transaction Abort Indication

@subsubheading TR_ABORT_IND
@prindex TR_ABORT_IND

This primitive indicates to the user that either a request for association has been denied or an
existing association has been aborted.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@example
typedef struct TR_abort_ind @{
    ulong PRIM_type;          /* Always TR_ABORT_IND */
    ulong CORR_id;            /* Correlation id */
    ulong TRANS_id;           /* Transaction id */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
    ulong ABORT_cause;        /* Cause of the abort */
    ulong ORIGINATOR;         /* Originator P or U */
@} TR_abort_ind_t;
@tpindex TR_abort_ind_t
@end example

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Indicates the primitive type: always @samp{TR_ABORT_IND}.

@item CORR_id
Indicates the correlation identifier previously specified by the transport user to uniquely identify
an outstanding transaction request that has not yet received transaction confirmation.
For all other cases, this field must be set to zero (0).

@item TRANS_id
Indicates the transaction identifier previously indicated by the transport provider to uniquely
identify the transaction.
The transaction identifier must be indicated by the transaction provider.
The transaction identifier must be the same as the transaction identifier that was indicated in the
corresponding
@samp{TR_BEGIN_IND}
or
@samp{TR_BEGIN_CON}
primitive (if any).

@item OPT_length
Indicates the length of the protocol options associated with the transaction
association termination.
Protocol options are only indicated by the transaction provider when they were supplied by the
underlying protocol.
If the transport provider does not indicate protocol options, the
@var{OPT_length}
and
@var{OPT_offset}
fields must be set to zero (0).
The format of the protocol options are provider specific.

@item OPT_offset
Indicates the offset from the beginning of the
@samp{M_PROTO}
message block where the protocol options begin.

@item ABORT_cause
Indicates the cause of the abort.
Abort causes are provider specific.

@item ORIGINATOR
Indicates the originator of the abort.
This field can have values
@code{TR_USER}
or
@code{TR_PROVIDER}
or
@code{TR_UNSPECIFIED}.

@end vtable

@subsubheading Modes

This primitive is only valid in connection-oriented mode.

@subsubheading Originator

Transaction provider.

@subsubheading Valid State

This primitive is valid in any connection oriented transaction state other than
@var{TRS_IDLE}.

@subsubheading New State

The new state for the transaction is
@var{TRS_IDLE}.

@page
@node Connectionless Mode Primitives
@section Connectionless Mode Primitives
@menu
* Transaction Phase::
@end menu
@node Transaction Phase
@subsection Transaction Phase
@menu
* TR_UNI_REQ::
* TR_UNI_IND::
* TR_NOTICE_IND::
@end menu
@node TR_UNI_REQ
@subsubsection Transaction Unidirectional Request
@subsubheading TR_UNI_REQ
@prindex TR_UNI_REQ
This primitive requests that the TR provider send the specified unidirectional
(connectionless) message to the specified destination with the specified options
and optional originating protocol address.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured
as follows:
@example
typedef struct TR_uni_req @{
    ulong PRIM_type;          /* Always TR_UNI_REQ */
    ulong DEST_length;        /* Destination address length */
    ulong DEST_offset;        /* Destination address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
@} TR_uni_req_t;
@tpindex TR_uni_req_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Specifies the primitive type: always @samp{TR_UNI_REQ}.
@item DEST_length
Specifies the length of the protocol address to which to send the unidirectional
invocation.
@item DEST_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.
@item ORIG_length
Specifies the length of the protocol address from which to send the
unidirectional invocation.  Specification of the originating protocol address
(@var{ORIG_length} and @var{ORIG_offset}) is optional.  When not specified the
TR provider will implicitly associate the local protocol address used in the
bind service (@pxref{TR_BIND_REQ}) with the primitive as the originating
protocol address.
@item ORIG_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol address begins.
@item OPT_length
Specifies the length of the protocol options associated with the unidirectional
invocation.
@item OPT_offset
Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.
@end vtable
@subsubheading Valid State
This primitive is valid in state @samp{TRS_IDLE}.
This primitive is only valid in connectionless mode.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
@subsubheading Acknowledgements
This primitive does not require an acknowledgement.@footnote{This is a TCAP
operations class 4 or a ROSE operations class 5 transaction that requires
neither a positive or negative acknowledgement.}  If a non-fatal error occurs,
it is the responsibility of the TR provider to report it with the
@samp{TR_NOTICE_IND} indication.  Fatal errors are indicated with the
@samp{M_ERROR}
@prindex M_ERROR
message type which results in the failure of all operating system service
routines on the @dfn{stream}.  The allowable fatal errors are as follows:
@table @var
@item EPROTO
This error indicates one of the following unrecoverable protocol conditions:
@itemize ---
@item The TR service interface was found to be in an incorrect state.
@item The amount of TR user data associated with the primitive defines an APDU
(ACSE Protocol Data Unit) larger than that allowed by the TR provider.
@end itemize
@end table

@page
@node TR_UNI_IND
@subsubsection Transaction Unidirectional Indication
@subsubheading TR_UNI_IND
@prindex TR_UNI_IND
This primitive indicates to the TR user that a unidirectional invocation has
been received from the specified source address.
@subsubheading Format
The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, where each
@samp{M_DATA} message block contains at least one byte of data, structured as
follows:
@example
typedef struct TR_uni_ind @{
    ulong PRIM_type;          /* Always TR_UNI_REQ */
    ulong DEST_length;        /* Destination address length */
    ulong DEST_offset;        /* Destination address offset */
    ulong ORIG_length;        /* Originating address length */
    ulong ORIG_offset;        /* Originating address offset */
    ulong OPT_length;         /* Options structure length */
    ulong OPT_offset;         /* Options structure offset */
@} TR_uni_ind_t;
@tpindex TR_uni_ind_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_UNI_IND}.
@item DEST_length
Indicates the length of the protocol address to which the message was sent.
This is not necessarily the same as the local protocol address to which the
@dfn{stream} is bound.  The address provided here may contain additional
information for some protocols.  So, for example, under TCAP, although the
@dfn{stream} is bound to an SCCP subsystem, this protocol address may contain
the SCCP Global Title.
@item DEST_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where
the protocol address begins.
@item ORIG_length
Indicates the length of the protocol address from which the message was sent.
@item ORIG_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where
the protocol address begins.
@item OPT_length
Indicates the length of the protocol options that were associated with the
received message.
@item OPT_offset
Indicates the offset from the start of the @samp{M_PROTO} message block where
the protocol options begin.
@end vtable
@subsubheading Valid State
This primitive is only issued in state @samp{TRS_IDLE}.
This primitive is only valid in connectionless mode.
@subsubheading New State
The new state remains unchanged.
@subsubheading Rules
The proper alignment of the destination address, originating address and
protocol options in the @samp{M_PROTO} message block is not guaranteed.

@page
@node TR_NOTICE_IND
@subsubsection Transaction Notice Indication
@subsubheading TR_NOTICE_IND
@prindex TR_NOTICE_IND
@subsubheading Format
The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks containing user data for the association, structured as follows:
@example
typedef struct TR_notice_ind @{
    ulong PRIM_type;          /* Always TR_NOTICE_IND */
    ulong CORR_id;            /* Correlation id */
    ulong TRANS_id;           /* Transaction id */
    ulong REPORT_cause;       /* SCCP return cause */
@} TR_notice_ind_t;
@tpindex TR_notice_ind_t
@end example
@subsubheading Parameters
The primitive has the following arguments:
@vtable @var
@item PRIM_type
Indicates the primitive type: always @samp{TR_NOTICE_IND}.
@item CORR_id
@item TRANS_id
@item REPORT_cause
@end vtable
@subsubheading Valid State
This primitive is only valid in connectionless mode.
@subsubheading New State
@subsubheading Rules

@node Diagnostics Requirements
@chapter Diagnostics Requirements

@menu
* Non-Fatal Errors::
* Fatal Errors::
@end menu

There are two error handling facilities available to the TR user: one to handle
non-fatal errors and one to handle fatal errors.

@node Non-Fatal Errors
@section Non-Fatal Errors

The non-fatal errors are those that a TR user can correct, and are reported in
the form of an error acknowledgement to the appropriate primitive in error.
Only those primitive which require acknowledgements may generate a non-fatal
error acknowledgement.  These acknowledgements always report syntactical error
in the specified primitive when the TR provider receives the primitive.  The
primitive descriptions@footnote{@xref{TRI Primitives}.} define those primitive
and rules regarding acknowledgement for each primitive.  These errors are
reported to the TR user with the @samp{TR_ERROR_ACK} primitive,
(@pxref{TR_ERROR_ACK}), and give the TR user the option of reissuing the TR
service primitive that cause the error.  The @samp{TR_ERROR_ACK} primitive also
indicates to the TR user that no action was taken by the TR provider upon
receipt of the primitive which cause the error.

These errors do not change the state of the TR service interface as seen by the
TR user.  The state of the interface after the issuance of a @samp{TR_ERROR_ACK}
primitive should be the same as it was before the TR provider receive the
interface primitive that was in error.

The allowable errors that can be reported on the receipt of a TR initiated
primitive are presented in the description of the appropriate primitives, see
@ref{TRI Primitives}.

@node Fatal Errors
@section Fatal Errors

Fatal errors are those that cannot be corrected by the TR user, or those errors
that result in an uncorrectable error in the interface or in the TR provider.

The most common of these errors are listed under the appropriate primitives
(@pxref{TRI Primitives}).  The transaction provider should issue fatal errors
only if the transaction user cannot correct the condition that caused the error
or if the transaction provider has no means of reporting a transaction user
correctable error.  If the transaction provider detects an uncorrectable
non-protocol error internal to the transaction provider, the provider should
issue a fatal error to the user.

Fatal errors are indicated to the transaction user with the @dfn{STREAMS}
message type @var{M_ERROR}
@prindex M_ERROR
with the UNIX System error @samp{EPROTO}.  This is the only type of error that
the transaction provider should use to indicate a fatal protocol error to the
transaction user.  The message @var{M_ERROR}
@prindex M_ERROR
will result in the failure of all the operating system service routines on the
@dfn{stream}.  The only way for the user to recover from a fatal error is to
ensure that all processes close the file associated with the @dfn{stream}.  Then
the user may reopen the file associated with the @dfn{stream}.

@c Two error handling facilities should be provided to the TR service user: one to handle non-fatal errors, and the other
@c to handle fatal errors.
@c @section Non-Fatal Error Handling Facility
@c These are errors that do not change the state of the TR service interface as seen by the TR service user and provide
@c the user with the option of reissuing the TR primitive with the corrected options specification.  The non-fatal error
@c handling is provided only to those primitives that require acknowledgements, and uses the @code{TR_ERROR_ACK} to report
@c these errors.  These errors retain the state of the TR service interface the same as it was before the TR provider
@c received the primitive that was in error.  Syntax errors and rule violations are reported via the non-fatal error
@c handling facility.
@c @section Fatal Error Handling Facility
@c These errors are issued by the TR provider when it detects errors that are not correctable by the TR user, or if it is
@c unable to report a correctable error to the TR service user.  Fatal errors are indicated via the STREAMS message type
@c @code{M_ERROR} with the UNIX system error @code{EPROTO}.  The @code{M_ERROR} STREAMS message type will result in the
@c failure of all the UNIX system calls on the stream.  The TR service user can recover from a fatal error by having all
@c the processes close the files associated with the stream, and then reopening them for processing.

@node Transaction Service Interface Sequence of Primitives
@chapter Transaction Service Interface Sequence of Primitives

The allowable sequence of primitives are described in the state diagrams and
tables for both the connection-oriented and connectionless mode mode transaction
services described in @ref{State/Event Tables}.

@section Rules for State Maintenance

@subsection General Rules for State Maintenace

The following are rules regarding the maintenance of the state of the interface:

@itemize @bullet
@item It is the responsibility of the transaction provider to keep record of the
state of the interface as viewed by the transaction user.
@item The transaction provider must never issue a primitive that places the
interface out of state.
@item The uninitialized state of a @dfn{stream} is the initial and final state,
and it must be bound (@pxref{TR_BIND_REQ}) before the transaction provider may
view it as an active @dfn{stream}.
@item If the transaction provider sends a @samp{M_ERROR}
@prindex M_ERROR
upstream, it should also drop any further messages received on its write side of
the @dfn{stream}.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for State Maintenace

The following rules apply only to the connection-oriented mode transaction
services:

@itemize @bullet
@item A transaction association end procedure can be initiated at any time
during the transaction association establishment or user data transfer phases.
@item The state tables for the connection-oriented mode transaction service
providers include the management of the correlation and transaction identifiers
when a transaction provider sends multiple @samp{TR_BEGIN_IND} indications or
accepts multiple @samp{TR_BEGIN_REQ} requests without waiting for the response
or confirmation to the previous indication or request.  It is the responsibility
of the transaction provider not to change state until all the indications or
requests have been responded to or confirmed, therefore the provider should
remain in the @samp{TRS_WRES_CIND} or @samp{TRS_WACK_CREQ} state while there are
any outstanding begin indications or requests pending response or confirmation.
The provider should change state appropriately when all the begin indications or
requests have been responded to or confirmed.
@item The only time the state of the transaction service interface of a
@dfn{stream} may be transferred to another @dfn{stream} is when it is indicated
in a @var{TR_BEGIN_RES} primitive.  The following rules then apply to the
cooperating @dfn{streams}:
@itemize ---
@item The @dfn{stream} that is to accept the current state of the interface must
be bound to an appropriate protocol address and must be in the idle
state.@footnote{This is not really true for either TRI or TPI.  The accepting
stream can be bound or unbound, and for some protocols may be bound to an
address different or the same as the stream upon which the begin indication was
issued.}
@item The user transferring the current state of a @dfn{stream} must have the
correct permissions for the use of the protocol address bound to the accepting
@dfn{stream}.
@item  The @dfn{stream} which transfers the state of the transaction interface
must be placed into an appropriate state after the completion of the transfer.
@end itemize
@end itemize

@section Rules for Precedence of Primitives on a @dfn{Stream}

@subsection General Rules for Precedence of Primitives

The following rules apply to the precedence of transaction interface primitives
with respect to their position on a @dfn{stream}:@footnote{The @dfn{stream}
queue which contains a transaction user initiated primitives is referred to as
the @dfn{stream} write queue.  The @dfn{stream} queue which contains the
transaction provider initiated primitives is referred to as the @dfn{stream}
read queue.}
@itemize @bullet
@item The transaction provider has responsibility for determining precedence of
its @dfn{stream} write queue, as per the rules defined in @ref{Primitive
Precedence Tables}.  The appendix specifies the rules for precedence for both
the connection-oriented and connectionless transaction services.
@item The transaction user has the responsibility for determining precedence on
its @dfn{stream} read queue, as per the rules defined in @ref{Primitive
Precedence Tables}.
@item All primitives on the @dfn{stream} are assumed to be placed on the queue
in the correct sequence as defined above.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for Precedence of Primitives

The following rules apply only to the connection-oriented transaction services:

@itemize @bullet
@item There is no guarantee of delivery of user data once a @var{TR_ABORT_REQ} primitive has been issued.
@end itemize

@section Rules for Flushing Queues

@subsection General Rules for Flushing Queues

The following rules pertain to flushing of @dfn{stream} queues: (No other
flushes should be needed to keep the queues in the proper condition.)

@itemize @bullet
@item The transaction providers must be aware that they will receive
@var{M_FLUSH}
@prindex M_FLUSH
message from upstream.  These flush requests are issued to ensure that the
providers receive certain messages and primitives.  It is the responsibility of
the providers to act appropriately as deemed necessary by the providers.
@item The transaction provider must send up a @var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues after receiving a successful
@var{TR_UNBIND_REQ} message and prior to issuing the @var{TR_OK_ACK} primitive.
@end itemize

@subsection Connection-Oriented Transaction Service Rules for Flushing Queues

The following rules apply only to the connection-oriented transaction services:

@itemize @bullet
@item If the interface is in the @samp{TRS_DATA_XFER}, @samp{TRS_WIND_ORDREL} or
@samp{TRS_WACK_ORDREL} state, the transaction provider must send up a
@var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues before sending up a
@var{TR_ABORT_IND}.
@item If the interface is in the @samp{TRS_DATA_XFER}, @samp{TRS_WIND_ORDREL} or
@samp{TRS_WACK_ORDREL} state, the transaction provider must send up a
@var{M_FLUSH}
@prindex M_FLUSH
message to flush both the read and write queues after receiving a successful
@var{TR_ABORT_REQ} primitive and before issuing the @var{TR_OK_ACK} primitive.
@end itemize


@node Addendum for ITU-T Conformance
@unnumbered Addendum for ITU-T Conformance

This section describes the formats and rules that are specified to ITU-T Q.771
operation.  The addendum must be used along with the generic TRI as defined in
the main document when implementing a TR provider that will be configured with
the ITU-T Q.771 (TCAP) Transaction Sub-Layer.

@section Quality of Service: Model and Description

The ``Quality of Service'' characteristics apply to both connection-oriented and
connectionless transaction services.

@subsection QoS Overview

QoS (Quality of Service) is described in terms of QoS parameters.  There are two
types of QoS parameters:
@enumerate
@item Those that are ``negotiated'' on a per-association basis during
transaction association establishment.@footnote{The connectionless transaction
services do not support end-to-end QoS parameter negotiation.}
@item Those that are not ``negotiated'' and their values are selected or
determined by local management methods.
@end enumerate

@section TRI Primitives: Rules for ITU-T Q.771 Conformance

The following rules apply to the TRI primitives for ITU-T Q.771 (TCAP)
compatibility:

@subsection Addressing

TCAP uses SCCP formatted addresses instead of ISO Presentation Layer addresses.

@subsubsection Address Format

The address format for a TCAP address is as follows:

@subsection Options
@subsubsection TCAP Level Options
@subsubheading Application Context Name
@subsubheading User Information
@subsubsection SCCP Level Options
@subsubheading SCCP Quality of Service Options
The TCAP interface uses protocol level @var{T_SS7_SCCP} for options at the SCCP
level.  SCCP QoS parameters are communicated to the underlying transaction
provider using the option name @var{T_SCCP_QOS}.  There are three QoS structure
that can be used in this fashion as follows:

@image{tri_tabn}

Quality of service struct @var{N_qos_sel_sccp_t} has the following fields:
@table @var
@item n_qos_type
This is the NPI Quality of Service structure type and is always set to
@samp{N_QOS_SEL_SCCP}, @samp{N_QOS_OPT_SEL_SCCP}, or @samp{N_QOS_RANGE_SCCP}.
@item protocol_class
This is the protocol class.  The @var{protocol_class} field can be one of the
following:
@itemize @bullet
@item @samp{N_QOS_PCLASS_0} (SCCP connectionless protocol class 0),
@item @samp{N_QOS_PCLASS_1} (for SCCP connectionless protocol class 1),
@item @samp{N_QOS_PCLASS_2} (for SCCP connection-oriented protocol class 2),
@item @samp{N_QOS_PCLASS_3} (for SCCP connection-oriented protocol class 3) or
@item @samp{QOS_UNKNOWN}.
@end itemize
@samp{N_QOS_PCLASS_2} and @samp{N_QOS_PCLASS_3} are not applicable to TCAP.
@item option_flags
If the @var{options_flags} field has bit @samp{N_QOS_OPT_RETERR} set then the
SCCP will return the PDU on error.
@item importance
This is the importance of the message for consideration for SCCP flow control.
This value is not normally set by the user.  It can be any integer number from 0
to 7, or @samp{QOS_UNKNOWN}.
@item sequence_selection
This affects the SLS (Signalling Link Selection) value that will be used for
protocol classes @samp{N_QOS_PCLASS_0} and @samp{N_QOS_PCLASS_1}.  This value is
not normally set by the user and can be an integer value or @samp{QOS_UNKNOWN}.
@item message_priority
This affects the MP (Message Priority) value that will be used for specific
messages in all protocol classes.  This value is not normally set by the use and
can be any integer value from 0 to 3 or the value @samp{QOS_UNKNOWN}.
@end table

@section Supported Services
@subsection Common Transaction Services
@subsubsection Information Service
@subsubheading TR_INFO_REQ
@subsubheading TR_INFO_ACK
@subsubheading Parameters
The following discusses the values which may be returned in a @var{TR_INFO_ACK}
primitive in response to a @var{TR_INFO_REQ} primitive.
@vtable @var
@item ASDU_size
Depending on the underlying SCCP layer, TCAP can have effectively no limit to
the amount of user data that can be sent in a particular transaction.  Protocol
variants or versions of SCCP that support XUDT and segmentation-reassembly of
protocol class 0 or 1 messages will set @var{ASDU_size} to @samp{T_INFINITE}
(@samp{-1}).  For protocol variants of SCCP or other underlying network
providers that do not support segmentation/reassembly of long messages, the
provider wills et @var{ASDU_size} to the maximum size (number of octets) of user
data that can be guaranteed transferred when associated with a single
@var{TR_BEGIN_RES} or @var{TR_CONT_REQ} message.

@item EASDU_size
TCAP has no expedited data service and the value of @var{EASDU_size} is set to
@samp{T_UNKNOWN} (@samp{-2}).

@item CDATA_size
TCAP can send user data with the initial Begin (Query) or first Continue
(Conversation) package and can also send @dfn{Application Context} and @dfn{User
Information} in either package.  These messages correspond to @dfn{TR-BEGIN} and
the first @dfn{TR-CONTINUE} after receiving a @dfn{TR-BEGIN} and they correspond
to @var{TR_BEGIN_REQ} and @var{TR_BEGIN_RES}.  Because the underlying SCCP
connectionless network may support unlimited size NSDUs, this value may be set
to @samp{T_INFINITE} (@samp{-1}) or may be set to the maximum amount of user
data (including @dfn{Application Context}, @dfn{User Information} and user data)
that can be sent or received in either package.  This informs the user as to
what size to make data buffers associated with transaction begin indications and
confirmations (@var{TR_BEGIN_IND}, @var{TR_BEGIN_CON}) and how much data can be
sent with transaction begin requests and responses (@var{TR_BEGIN_REQ},
@var{TR_BEGIN_RES}).

@item DDATA_size
TCAP can send transaction end data (user data) with the final End (Response)
package.  These messages correspond to the @dfn{TR-END} primitive and the
@var{TR_END_REQ} or @var{TR_END_IND}.  Again, because the underlying SCCP
connectionless network may support unlimited size NSDUs, this value may be set
to @samp{T_INFINITE} (@samp{-1}) or may be set to the maximum amount of
transaction end data that can be sent or received in the End (Response) package.
This informs the user as to what size to make data buffers associated with
transaction end indications (@var{TR_END_IND}) and how much data can be sent
with transaction end requests (@var{TR_END_REQ}).

@item ADDR_size
This is the maximum TCAP address size that can be communicated across the
interface.  This address size is the maximum size of the defined SCCP address
structure (@samp{sizeof sccp_addr_t}) that also will include address digits up
to a maximum of @var{SCCP_MAX_ADDR_LENGTH} octets of digits.  This informs the
user as to what size it should reserver for control buffers so as to receive
control information without buffer truncation.

@item OPT_size
This is the maximum size of the options field used in any TRI message
(@pxref{TRI Primitives}) and is the sum of the maximum option sizes of one of
each of the options that can occur together.  This informs the user as to what
size it should reserve for control buffers to ensure that received control
messages that include options cna be contained within the buffer without
truncation.

@item TIDU_size
Although a TCAP provider can support unlimited ASDU size, it cannot normally
support unlimited TIDU size.  This is because the underlying SCCP NSDU may be
limited in size.  The TCAP provider is not responsible for segmenting user data
sequences offered to the provider from the user in an @var{M_DATA}
@prindex M_DATA
message chain.  This is the maximum size of the TIDU which corresponds to the
maximum size of the underlying NSDU.  Because the underlying SCCP provider may
have no limit on the NSDU size (i.e, it supports segmentation of connectionless
NSDUs) this may be more in the manner of a optimal recommendation to the user
rather than an absolute maximum.  Because of this, a given TCAP provider might
not reject TIDUs which are larger than this value.

@item SERV_type
There are two service types supported by a transaction provider:
connection-oriented transaction service (COTS) and connectionless transaction
service (CLTS).  CLTS is a connectionless unidirectional transaction service
with no error notification.  COTS is a connection-oriented transaction services
with or without error notification.  The value reflected here is dependent on
the setting of option @var{T_ACSE_PCLASS} or @var{T_TCAP_OCLASS}.

@item CURRENT_state
Provides the current state of the transaction interface.  TCAP providers use the
same states as other TRI providers.

@item PROVIDER_flag
Unused.

@item TRI_version
Set to the current version.
@end vtable

@subsubsection Address service
@subsubheading TR_ADDR_REQ
@subsubheading TR_ADDR_ACK
@subsubsection Bind Service
@subsubheading TR_BIND_REQ
@subsubheading TR_BIND_ACK
@subsubsection Options Management Service
@subsubheading TR_OPTMGMT_REQ
@subsubheading TR_OPTMGMT_ACK
@subsection Connection-Oriented Transaction Services
@subsubsection Transaction Begin
@subsubheading TR_BEGIN_REQ
@subsubheading TR_BEGIN_IND
@subsubheading TR_BEGIN_RES
@subsubheading TR_BEGIN_CON
@subsubsection Transaction Continue
@subsubheading TR_CONT_REQ
@subsubheading TR_CONT_IND
@subsubsection Transaction End
@subsubheading TR_ABORT_REQ
@subsubheading TR_ABORT_IND
@subsubheading TR_END_REQ
@subsubheading TR_END_IND
@subsection Connectionless Transaction Services
@subsubheading TR_UNI_REQ
@subsubheading TR_UNI_IND
@subsubheading TR_NOTICE_IND

@node Addendum for ANSI Conformance
@unnumbered Addendum for ANSI Conformance

This section describes the formats and rules that are specified to ANSI T1.114
operation.  The addendum must be used along with the generic TRI as defined in
the main document when implementing a TR provider that will be configured with
the ANSI T1.114 (TCAP) Transaction Sub-Layer.@footnote{It should be noted that
ANSI T1.114 does not provide a distinction between the TC and TR Sub-Layers of
TCAP, and do not specify a TC-User or TR-User interface at all.  However, as it
is still based on ITU-T Recommendation X.219, there can exist an identifiable TR
Sub-Layer interface within ANSI TCAP.}

@section Quality of Service: Model and Description

The ``Quality of Service'' characteristics apply to both connection-oriented and
connectionless transaction services.

@subsection QoS Overview

QoS (Quality of Service) is described in terms of QoS parameters.  There are two
types of QoS parameters:
@enumerate
@item Those that are ``negotiated'' on a per-association basis during
transaction association establishment.@footnote{The connectionless transaction
services do not support end-to-end QoS parameter negotiation.}
@item Those that are not ``negotiated'' and their values are selected or
determined by local management methods.
@end enumerate

@section TRI Primitives: Rules for ANSI T1.114 Conformance

The following rules apply to the TRI primitives for ANSI T1.114 (TCAP)
compatibility:

@subsection Addressing

TCAP uses SCCP formatted addresses instead of ISO Presentation Layer addresses.

@subsubsection Address Format

The address format for a TCAP address is as follows:

@subsection Options
@subsubsection TCAP Level Options
@subsubheading Application Context Name
@subsubheading User Information
@subsubsection SCCP Level Options
@subsubheading SCCP Quality of Service Options
The TCAP interface uses protocol level @var{T_SS7_SCCP} for options at the SCCP
level.  SCCP QoS parameters are communicated to the underlying transaction
provider using the option name @var{T_SCCP_QOS}.  There are three QoS structure
that can be used in this fashion as follows:

@image{tri_tabn}

Quality of service struct @var{N_qos_sel_sccp_t} has the following fields:
@table @var
@item n_qos_type
This is the NPI Quality of Service structure type and is always set to
@samp{N_QOS_SEL_SCCP}, @samp{N_QOS_OPT_SEL_SCCP}, or @samp{N_QOS_RANGE_SCCP}.
@item protocol_class
This is the protocol class.  The @var{protocol_class} field can be one of the
following:
@itemize @bullet
@item @samp{N_QOS_PCLASS_0} (SCCP connectionless protocol class 0),
@item @samp{N_QOS_PCLASS_1} (for SCCP connectionless protocol class 1),
@item @samp{N_QOS_PCLASS_2} (for SCCP connection-oriented protocol class 2),
@item @samp{N_QOS_PCLASS_3} (for SCCP connection-oriented protocol class 3) or
@item @samp{QOS_UNKNOWN}.
@end itemize
@samp{N_QOS_PCLASS_2} and @samp{N_QOS_PCLASS_3} are not applicable to TCAP.
@item option_flags
If the @var{options_flags} field has bit @samp{N_QOS_OPT_RETERR} set then the
SCCP will return the PDU on error.
@item importance
This is the importance of the message for consideration for SCCP flow control.
This value is not normally set by the user.  It can be any integer number from 0
to 7, or @samp{QOS_UNKNOWN}.
@item sequence_selection
This affects the SLS (Signalling Link Selection) value that will be used for
protocol classes @samp{N_QOS_PCLASS_0} and @samp{N_QOS_PCLASS_1}.  This value is
not normally set by the user and can be an integer value or @samp{QOS_UNKNOWN}.
@item message_priority
This affects the MP (Message Priority) value that will be used for specific
messages in all protocol classes.  This value is not normally set by the use and
can be any integer value from 0 to 3 or the value @samp{QOS_UNKNOWN}.
@end table

@section Supported Services
@subsection Common Transaction Services
@subsubsection Information Service
@subsubheading TR_INFO_REQ
@subsubheading TR_INFO_ACK
@subsubheading Parameters
The following discusses the values which may be returned in a @var{TR_INFO_ACK}
primitive in response to a @var{TR_INFO_REQ} primitive.
@vtable @var
@item ASDU_size
Depending on the underlying SCCP layer, TCAP can have effectively no limit to
the amount of user data that can be sent in a particular transaction.  Protocol
variants or versions of SCCP that support XUDT and segmentation-reassembly of
protocol class 0 or 1 messages will set @var{ASDU_size} to @samp{T_INFINITE}
(@samp{-1}).  For protocol variants of SCCP or other underlying network
providers that do not support segmentation/reassembly of long messages, the
provider wills et @var{ASDU_size} to the maximum size (number of octets) of user
data that can be guaranteed transferred when associated with a single
@var{TR_BEGIN_RES} or @var{TR_CONT_REQ} message.

@item EASDU_size
TCAP has no expedited data service and the value of @var{EASDU_size} is set to
@samp{T_UNKNOWN} (@samp{-2}).

@item CDATA_size
TCAP can send user data with the initial Begin (Query) or first Continue
(Conversation) package and can also send @dfn{Application Context} and @dfn{User
Information} in either package.  These messages correspond to @dfn{TR-BEGIN} and
the first @dfn{TR-CONTINUE} after receiving a @dfn{TR-BEGIN} and they correspond
to @var{TR_BEGIN_REQ} and @var{TR_BEGIN_RES}.  Because the underlying SCCP
connectionless network may support unlimited size NSDUs, this value may be set
to @samp{T_INFINITE} (@samp{-1}) or may be set to the maximum amount of user
data (including @dfn{Application Context}, @dfn{User Information} and user data)
that can be sent or received in either package.  This informs the user as to
what size to make data buffers associated with transaction begin indications and
confirmations (@var{TR_BEGIN_IND}, @var{TR_BEGIN_CON}) and how much data can be
sent with transaction begin requests and responses (@var{TR_BEGIN_REQ},
@var{TR_BEGIN_RES}).

@item DDATA_size
TCAP can send transaction end data (user data) with the final End (Response)
package.  These messages correspond to the @dfn{TR-END} primitive and the
@var{TR_END_REQ} or @var{TR_END_IND}.  Again, because the underlying SCCP
connectionless network may support unlimited size NSDUs, this value may be set
to @samp{T_INFINITE} (@samp{-1}) or may be set to the maximum amount of
transaction end data that can be sent or received in the End (Response) package.
This informs the user as to what size to make data buffers associated with
transaction end indications (@var{TR_END_IND}) and how much data can be sent
with transaction end requests (@var{TR_END_REQ}).

@item ADDR_size
This is the maximum TCAP address size that can be communicated across the
interface.  This address size is the maximum size of the defined SCCP address
structure (@samp{sizeof sccp_addr_t}) that also will include address digits up
to a maximum of @var{SCCP_MAX_ADDR_LENGTH} octets of digits.  This informs the
user as to what size it should reserver for control buffers so as to receive
control information without buffer truncation.

@item OPT_size
This is the maximum size of the options field used in any TRI message
(@pxref{TRI Primitives}) and is the sum of the maximum option sizes of one of
each of the options that can occur together.  This informs the user as to what
size it should reserve for control buffers to ensure that received control
messages that include options cna be contained within the buffer without
truncation.

@item TIDU_size
Although a TCAP provider can support unlimited ASDU size, it cannot normally
support unlimited TIDU size.  This is because the underlying SCCP NSDU may be
limited in size.  The TCAP provider is not responsible for segmenting user data
sequences offered to the provider from the user in an @var{M_DATA}
@prindex M_DATA
message chain.  This is the maximum size of the TIDU which corresponds to the
maximum size of the underlying NSDU.  Because the underlying SCCP provider may
have no limit on the NSDU size (i.e, it supports segmentation of connectionless
NSDUs) this may be more in the manner of a optimal recommendation to the user
rather than an absolute maximum.  Because of this, a given TCAP provider might
not reject TIDUs which are larger than this value.

@item SERV_type
There are two service types supported by a transaction provider:
connection-oriented transaction service (COTS) and connectionless transaction
service (CLTS).  CLTS is a connectionless unidirectional transaction service
with no error notification.  COTS is a connection-oriented transaction services
with or without error notification.  The value reflected here is dependent on
the setting of option @var{T_ACSE_PCLASS} or @var{T_TCAP_OCLASS}.

@item CURRENT_state
Provides the current state of the transaction interface.  TCAP providers use the
same states as other TRI providers.

@item PROVIDER_flag
Unused.

@item TRI_version
Set to the current version.
@end vtable

@subsubsection Address service
@subsubheading TR_ADDR_REQ
@subsubheading TR_ADDR_ACK
@subsubsection Bind Service
@subsubheading TR_BIND_REQ
@subsubheading TR_BIND_ACK
@subsubsection Options Management Service
@subsubheading TR_OPTMGMT_REQ
@subsubheading TR_OPTMGMT_ACK
@subsection Connection-Oriented Transaction Services
@subsubsection Transaction Begin
@subsubheading TR_BEGIN_REQ
@subsubheading TR_BEGIN_IND
@subsubheading TR_BEGIN_RES
@subsubheading TR_BEGIN_CON
@subsubsection Transaction Continue
@subsubheading TR_CONT_REQ
@subsubheading TR_CONT_IND
@subsubsection Transaction End
@subsubheading TR_ABORT_REQ
@subsubheading TR_ABORT_IND
@subsubheading TR_END_REQ
@subsubheading TR_END_IND
@subsection Connectionless Transaction Services
@subsubheading TR_UNI_REQ
@subsubheading TR_UNI_IND
@subsubheading TR_NOTICE_IND


@node Addendum for ETSI Conformance
@unnumbered Addendum for ETSI Conformance

@section ETSI Quality of Service Model and Description
@subsection QoS Overview

@section TRI Primitives: Rules for ETSI ETS 300 287 Conformance
@subsection Addressing
@subsubsection Address Format

@subsection Options
@subsubsection TCAP Level Options
@subsubsection SCCP Level Options

@section ETSI Supported Services
@subsection Common Transaction Services
@subsubsection Information service
@subsubheading TR_INFO_REQ
@subsubheading TR_INFO_ACK
@subsubsection Address service
@subsubheading TR_ADDR_REQ
@subsubheading TR_ADDR_ACK
@subsubsection Bind Service
@subsubheading TR_BIND_REQ
@subsubheading TR_BIND_ACK
@subsubsection Options Management Service
@subsubheading TR_OPTMGMT_REQ
@subsubheading TR_OPTMGMT_ACK
@subsection Connection-Oriented Transaction Services
@subsubsection Transaction Begin
@subsubheading TR_BEGIN_REQ
@subsubheading TR_BEGIN_IND
@subsubheading TR_BEGIN_RES
@subsubheading TR_BEGIN_CON
@subsubsection Transaction Continue
@subsubheading TR_CONT_REQ
@subsubheading TR_CONT_IND
@subsubsection Transaction End
@subsubheading TR_ABORT_REQ
@subsubheading TR_ABORT_IND
@subsubheading TR_END_REQ
@subsubheading TR_END_IND
@subsection Connectionless Transaction Services
@subsubheading TR_UNI_REQ
@subsubheading TR_UNI_IND
@subsubheading TR_NOTICE_IND

@node Mapping TRI Primitives
@appendix Mapping TRI Primitives

@menu
* Mapping TRI Primitives to ITU-T Q.771::
* Mapping TRI Primitives to ANSI T1.114::
* Mapping TRI Primitives to ITU-T X.219::
@end menu

@page
@node Mapping TRI Primitives to ITU-T Q.771
@section Mapping TRI Primitives to ITU-T Q.771

@page
@node Mapping TRI Primitives to ANSI T1.114
@section Mapping TRI Primitives to ANSI T1.114

@page
@node Mapping TRI Primitives to ITU-T X.219
@section Mapping TRI Primitives to ITU-T X.219

@subsection State Mapping

@subsection Primitive Mapping

@subsubsection A-ASSOCIATE
@subsubheading Request
@subsubheading Indication
@subsubheading Response
@subsubheading Confirm

@subsubsection A-RELEASE
@subsubheading Request
@subsubheading Indication
@subsubheading Response
@subsubheading Confirm

@subsubsection A-ABORT
@subsubheading Request
@subsubheading Indication

@subsubsection A-P-ABORT
@subsubheading Indication

@subsubsection A-UNIT-DATA
@subsubheading Request
@subsubheading Indication

@subsection Parameter Mapping

@subsubheading Application Context Name
@subsubheading Calling AP Title
@subsubheading Calling AE Qualifier
@subsubheading Calling AP Invocation-identifier
@subsubheading Calling AE Invocation-identifier
@subsubheading Called AP Title
@subsubheading Called AE Qualifier
@subsubheading Called AP Invocation-identifier
@subsubheading Called AE Invocation-identifier
@subsubheading Responding AP Title
@subsubheading Responding AE Qualifier
@subsubheading Responding AP Invocation-identifier
@subsubheading Responding AE Invocation-identifier
@subsubheading User Information
@subsubheading Result
@subsubheading Result Source
@subsubheading Diagnostic
@subsubheading Calling Presentation Address
@subsubheading Called Presentation Address
@subsubheading Responding Presentation Address
@subsubheading Presentation Context Definition List
@subsubheading Presentation Context Definition Result List
@subsubheading Default Presentation Context Name
@subsubheading Default Presentation Context Result
@subsubheading Quality of Service
@subsubheading Session Requirements
@subsubheading Initial Sycnhronization Point Serial Number
@subsubheading Initial Assignment of Tokens
@subsubheading Session-connection Identifier
@subsubheading Reason
@subsubheading User Information
@subsubheading Result
@subsubheading Abort Source
@subsubheading User Information
@subsubheading Provider Reason
@subsubheading Authentication
@subsubheading Authentication-mechanism name
@subsubheading Authentication-value
@subsubheading ACSE Requriements
@subsubheading Diagnostic
@subsubheading Application Context Identifier
@subsubheading Application Context Name List

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables

@node TRI Header File Listing
@appendix TRI Header File Listing

@node License
@unnumbered License

@menu
* GNU Free Documentation License::
@end menu

@include texi/fdl.texi

@node Glossary
@unnumbered Glossary

@table @emph
@item Signalling Data Link Service Data Unit
A grouping of SDL user data whose boundaries are preserved from one end of the
signalling data link connection to the other.
@item Data transfer
The phase in connection and connectionless modes that supports the transfer of
data between to signalling data link users.
@item SDL provider
The signalling data link layer protocol that provides the services of the
signalling data link interface.
@item SDL user
The user-level application or user-level or kernel-level protocol that accesses
the services of the signalling data link layer.
@item Local management
The phase in connection and connectionless modes in which a SDL user initializes
a stream and attaches a PPA address to the stream.  Primitives in this phase
generate local operations only.
@item PPA
The point at which a system attaches itself to a physical communications medium.
@item PPA identifier
An identifier of a particular physical medium over which communication
transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {SDL SDU}{International Telecommunications Union}
@item SDLI @tab Signalling Data Link Interface
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item PPA @tab Physical Point of Attachment
@end multitable

@node References
@unnumbered References
@enumerate
@item ITU-T Recommendation X.210, (Geneva, 1993), ``Information Technology --- Open Systems Interconnection --- Basic reference model: Conventions for the definition of OSI services,'' ISO/IEC 10731:1994.
@item ITU-T Recommendation X.217, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Service definition for the Association Control Service Element,'' ISO/IEC 8649:1996.
@item ITU-T Recommendation X.227, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 8650-1.
@item ITU-T Recommendation X.237, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless protocol for the Association Control Service Element: Protocol Specification,'' ISO/IEC 10035-1 : 1995.
@item ITU-T Recommendation X.216, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Presentation service definition,'' ISO/IEC 8822:1994.
@item ITU-T Recommendation X.226, (Geneva, 1994), ``Information Technology --- Open Systems Interconnection --- Connection-oriented presentation protocol: Protocol specification,'' ISO/IEC 8823-1:1994.
@item ITU-T Recommendation X.236, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless presentation protocol: Protocol specification,'' ISO/IEC 9576-1:1995.
@item ITU-T Recommendation X.215, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Session service definition,'' ISO/IEC 8326:1996.
@item ITU-T Recommendation X.225, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connection-oriented session protocol: Protocol specification,'' ISO/IEC 8327-1:1996.
@item ITU-T Recommendation X.235, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Connectionless session protocol: Protocol specification,'' ISO/IEC 9548-1:1995.
@item ITU-T Recommendation X.214, (Geneva, 1995), ``Information Technology --- Open Systems Interconnection --- Transport service definition,'' ISO/IEC 8072:1996.
@item ITU-T Recommendation X.224
@item ITU-T Recommendation Q.700
@item ITU-T Recommendation Q.701
@item ITU-T Recommendation Q.702
@item ITU-T Recommendation Q.703
@item ITU-T Recommendation Q.704
@item Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item ITU-T Recommendation Q.771, (Geneva, 1993), ``Signalling System No. 7 --- Functional description of transaction capabilities,'' (White Book).
@end enumerate

@node Index
@unnumbered Index

@printindex cp

@c @section Primitive Index

@c @printindex pr

@c @section Primitive Structure and Type Index
@c @printindex tp

@c @section Primitive Structure Field Index

@c @printindex vr

@page
@shortcontents
@page
@contents
@bye
