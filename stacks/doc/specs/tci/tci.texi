% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
% =========================================================================
%
% @(#) $Id: tci.texi,v 0.9.2.5 2005/03/14 11:03:15 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2004  OpenSS7 Corporation <www.openss7.com>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any success
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2005/03/14 11:03:15 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename tci.info
@settitle Transaction Component Interface
@c %**end of header

@dircategory OpenSS7
@direntry
* TCI: (tci).                   Transaction Component Interface.
@end direntry

@include texi/args.texi

@ifinfo
This file documents the Transaction Component Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copyring, provided the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi

@ignore
@shorttitlepage Transaction Component Interface --- Application Program Interface
@end ignore
@titlepage
@titlefont{Transaction Component Interface}
@sp 0.5
@title Application Program Interface
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE_TARNAME}-@value{PACKAGE_VERSION}-@value{PACKAGE_RELEASE}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2004  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
All Rights Reserved. @*

@noindent
Published by @uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@noindent
This software and related documentation is protected by copyright and
distributed under licenses restricting its use, copying, distribution and
decompilation.  No part of this software or related documentation may be
reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the
recipient will protect this information and keep it confidential, and will not
disclose the information contained in this document without the written
permission of its owner.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} reserves the right to revise
this software and documentation for any reason, including but not limited to,
conformity with standards promulgated by various agencies, utilization of
advances in the state of the technical arts, or the reflection of changes in the
design of any techniques, or procedures embodied, described, or referred to
herein.  @uref{http://www.openss7.com/,OpenSS7 Corporation} is under no
obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @emph{Released under GFDL} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @emph{Released under GFDL} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defindex pr
@c Define an index of primitive values
@defindex pv
@c Define an index of protocol states
@defindex st

@c @syncodeindex pr cp
@c @syncodeindex pv cp
@c @syncodeindex tp cp
@c @syncodeindex vr cp

@ifnottex
@node Top
@top Transaction Component Interface
@end ifnottex

@menu
* Preface::
* Introduction::
* The Transaction Component Sub-Layer::
* TCI Services Definition::
* TCI Primitives::
* TCAP Header File::
* Glossary::
* Acronyms::
* References::
* Indices::
@end menu

@node Preface
@unnumbered Preface

@section Security Warning

@noindent
Permission to use, copy and distribute this documentation without modification,
for any purpose and without fee or royalty is hereby granted, provided that both
the above copyright notice and this permission notice appears in all copies and
that the name of @uref{http://www.openss7.com/,OpenSS7 Corporation} not be used
in advertising or publicity pertaining to distribution of this documentation or
its contents without specific, written prior permission.
@uref{http://www.openss7.com/,OpenSS7 Corporation} makes no representation about
the suitability of this documentation for any purpose.  It is provided ``as is''
without express or implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with
regard to this documentation including all implied warranties of
merchantability, fitness for a particular purpose, non-infringement, or title;
that the contents of the document are suitable for any purpose, or that the
implementation of such contents will not infringe on any third party patents,
copyrights, trademarks or other rights..  In no event shall
@uref{http://www.openss7.com/,OpenSS7 Corporation} be liable for any direct,
indirect, special or consequential damages or any damages whatsoever resulting
from loss of use, data or profits, whether in an action of contract, negligence
or other tortious action, arising out of or in connection with any use of this
document or the performance or implementation of the contents thereof.

@section Abstract

This document is a Application Program Interface containing technical details
concerning the implementation of the Transaction Component Interface (TCI) for
OpenSS7.  It contains recommendations on software architecture as well as
platform and system applicability of the Transaction Component Interface (TCI).

@section Purpose

The purpose of this document is to provide technical documentation of the
Transaction Component Interface (TCI).  This document is intended to be included
with the OpenSS7 STREAMS software package released by
@uref{http://www.openss7.com/,OpenSS7 Corporation}.  It is intended to assist
software developers, maintainers and users of the Transaction Component
Interface (TCI) with understanding the software architecture and technical
interfaces which are made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of
information concerning the Transaction Component Interface (TCI).

@section Audience

The audience for this document is software developers, maintainers and users and
integrators of the Transaction Component Interface (TCI).

@section Revision History

Take care that you are working with a current version of this documentation: you
will not be notified of updates.  To ensure that you are working with a current
version, check the @uref{http://www.openss7.org/,OpenSS7 Project} website for a
current version.

A printed (or postscript) version of this document is an UNCONTROLLED version.

@node Introduction
@chapter Introduction

This document specifies a STREAMS-based kernel-level instantiation of the ITU-T
Transaction Capabilities Application Part (TCAP) Component (TC) Sub-Layer.  The
Transaction Component Interface (TCI) enables the user of a component sub-layer
service to access and use any of a variety of conforming transaction providers
without specific knowledge of the provider's protocol.  The service interface is
designed to support any transaction protocol but is intended for the ITU-T
Recommendation Q.771 Transaction Capabilities Application Part (TCAP) Component
(TC) Sub-Layer.  This interface only specifies access to transaction component
sub-layer services providers, and does not address issues concerning transaction
or component sub-layer management, protocol performance, and performance
analysis tools.

The specification assumes that the reader is familiar with the ISO reference
model terminology, ISO/ITU-T transaction service definitions (ROSE, ACSE, TCAP),
and STREAMS.

@section Related Documentation

@itemize

@item ITU-T Recommendation X.200 (White Book) --- ISO/IEC 7498-1:1994

@item ITU-T Recommendation X.219 (White Book) --- ISO/IEC

@item ITU-T Recommendation X.229 (White Book) --- ISO/IEC

@item ITU-T Recommendation X.217 (White Book) --- ISO/IEC 8649 : 1996

@item ITU-T Recommendation X.227 (White Book) --- ISO/IEC 8650-1 : 1995

@item ITU-T Recommendation X.237 (White Book) --- ISO/IEC 10035-1 : 1995

@item ITU-T Recommendation Q.771 (White Book)

@item System V Interface Definition, Issue 2 - Volume 3

@end itemize

@subsection Role

This document specifies an interface that supports the Transaction Component
(TC) Sub-Layer services provided by the Transaction Capabilities Application
Part (TCAP) as specified in ITU-T Recommendation Q.771.  It may also be capable
of supporting the transaction component capabilities of the Remote Operations
Service Execution (ROSE) for Open Systems Interconnect for CCITT Applications as
specified in ITU-T Recommendation X.219 and ISO ????.  These specifications are
targeted for use by developers and testers of protocol modules that require
transaction component sub-layer service.@footnote{An example of a protocol
module that requires transaction component sub-layer services is the 3GPP TS
29.002 Mobile Application Part (MAP).}

@section Definitions, Acronyms, and Abbreviations

@table @emph

@item Originating TC User

A TC-User that initiates a transaction.

@item Destination TC User

A TC-User with whom an originating TC user wishes to establish a transaction
dialogue.

@item ISO

International Organization for Standardization

@item TC User

Kernel level protocol or user level application that is accessing the services of the transaction component sub-layer.

@item TC Provider

Transaction sub-layer entity/entities that provide/s the services of the transaction component interface.

@item TCI

Transaction Component Interface

@item TIDU

Transaction Interface Data Unit

@item TSDU

Transaction Service Data Unit

@item OSI

Open Systems Interconnection

@item QOS

Quality of Service

@item STREAMS

A communication services development facility first available with UNIX System V Release 3

@end table

@node The Transaction Component Sub-Layer
@chapter The Transaction Component Sub-Layer

The Transaction Component Sub-Layer provides the means to manage the dialogue
of TC-Users into transaction components and dialogues.  It is responsible for
the routing and management of transaction component exchange within dialogues
between TC-user entities.

@menu
* Model of the TCI::
* TCI Services::
@end menu

@node Model of the TCI
@section Model of the TCI

The TCI defines the services provided by the transaction component sub-layer to
the transaction component-user at the boundary between the Transaction
Capabilities Application Part (TCAP) user and the Transaction Component (TC)
Sub-Layer in the model presented in ITU-T Recommendation Q.771.  The interface
consists of a set of primitives defined as STREAMS messages that provide access
to the component sub-layer services, and are transferred between the TC user
entity and the TC provider.  These primitives are of two types: ones that
originate from the TC user, and others that originate from the TC provider, or
respond to an event of the TC provider.  The primitives that originate from the
TC provider are either confirmations of a request or are indications to the TC
user that the event has occurred.  @emph{Figure 1} shows the model of the TCI.

@cartouche
@center Figure 1@strong{@emph{.  Model of the TCI}}
@image{tci_fig,3.5in}
@end cartouche

The TCI allows the TC provider to be configured with any component sub-layer
user (such as the Mobile Application Part whose upper layer interface is
described in @ref{Top, About This Manual, , mapi, Mobile Application Part
Interface}), that also conforms to the TCI.  A transaction component sub-layer
user can also be a user program that conforms to the TCI and accesses the TC
provider via @strong{putmsg}(2) and @strong{getmsg}(2) system calls.

@dfn{STREAMS} messages that are used to communicate transaction component
service primitives between the transaction component user and the transaction
component provider may have one of the following formats:

@enumerate
@item

A @var{M_PROTO}
@prindex M_PROTO
message block followed by zero or more @var{M_DATA}
@prindex M_DATA
message blocks.  The @var{M_PROTO} message block contains the type of service
primitive and all relevant arguments associated with the primitive.  The
@var{M_DATA} blocks contain user data associated with the service primitive.

@item

One @var{M_PCPROTO}
@prindex M_PCPROTO
message block containing the type of service primitive and all the relevant
arguments associated with the primitive.

@item

One or more @var{M_DATA}
@prindex M_DATA
message blocks containing user data.
@end enumerate

The following sections describe the service primitives which define all
operation classes of service.

For all operation classes of service, two types of primitives exist: primitives
that originate from the service user and primitives that originate from the
service provider.  The primitives that originate from the service user make
requests to the service provider or response to an event of the service
provider.  The primitive that originate from the service provider are either
confirmations of a request or are indications to the service user that an event
has occurred.  The primitive types along with the mapping of those primitives to
the @dfn{STREAMS} message types and the service primitives of the ISO/IEC xxxxx
and service definitions are listed in @ref{TCI Primitives}.  The format of these
primitives and the rules governing the use of them are described in
@ref{Management Primitives}, @ref{Operation Class 1 through 3 Primitives}, and
@ref{Operation Class 4 Primitives}.

@node TCI Services
@section TCI Services

The features of the TCI are defined in terms of the services provided by the TC
provider, and the individual primitives that may flow between the TC user and
the TC provider.

The services supported by the TCI are based on four distinct classes of
transaction, operation classes 1, 2, 3 and 4.  In addition, the TCI supports
services for local management.

@subsection Operation Class 1

The main features of operation class 1 transactions are:

@itemize 

@item Operation success is reported.

@item Operation failure is reported.

@end itemize 

There are three phases to each transaction: Transaction Initiation, Transaction
Data Transfer, and Transaction Termination.@footnote{All three phases in
operation class 1 can be combined into a single exchange of primitives.}
Transaction components arrive at their destination in the same order as they
departed their source and the data is protected against duplication or loss of
data units within some specified quality of service.

@subsection Operation Class 2

The main features of operation class 2 transactions are:

@itemize 

@item Operation success is @emph{not} reported.

@item Operation failure is reported.

@end itemize 

There are three phases to each transaction: Transaction Initiation, Transaction
Data Transfer, and Transaction Termination.@footnote{All three phases in
operation class 2 can be combined into a single exchange of primitives.}
Transaction components arrive at their destination in the same order as they
departed their source and the data is protected against duplication or loss of
data units within some specified quality of service.

@subsection Operation Class 3

The main features of operation class 3 transactions are:

@itemize 

@item Operation success is reported.

@item Operation failure is @emph{not} reported.

@end itemize 

There are three phases to each transaction: Transaction Initiation, Transaction
Data Transfer, and Transaction Termination.@footnote{All three phases in
operation class 3 can be combined into a single exchange of primitives.}
Transaction components arrive at their destination in the same order as they
departed their source and the data is protected against duplication or loss of
data units within some specified quality of service.

@subsection Operation Class 4

The main features of operation class 4 transactions are:

@itemize 

@item Operation success is @emph{not} reported.

@item Operation failure is @emph{not} reported.

@end itemize 

Operation class 4 has no structure to the transaction and has no separate
phases.  Each transaction component is transmitted from source to destination
independently, appropriate addressing information is included with each
component sequence.  As the components are transmitted independently from source
to destination, there are, in general, no guarantees of proper sequence and
completeness of the data transmission.

@subsection Component Handling

@multitable @columnfractions .6 .1 .1 .1 .1

@item TC-Invoke @tab 1 @tab 2  @tab 3  @tab 4

@item TC-Result @tab 1 @tab -- @tab 3  @tab --

@item TC-Error  @tab 1 @tab 2  @tab -- @tab --

@item TC-Cancel @tab 1 @tab 2  @tab 3  @tab --

@item TC-Reject @tab 1 @tab 2  @tab -- @tab 4

@end multitable

@subsection Local Management

The TCI specifications also define a set of local management functions that
apply to all operation classes.  These services have local significance only.

Table 1 and Table 2 summarize the TCI service primitives by their state and
service.

@sp 1
@center Table 1@strong{@emph{.  Service Primitives for Operation Classes 1, 2 and 3}}

@multitable @columnfractions .20 .20 .60

@item @b{STATE}
@tab @b{SERVICE}
@tab @b{PRIMITIVES}

@item Local@*Management
@tab Information@*Reporting
@tab TC_INFO_REQ, TC_INFO_ACK,@*TC_ERROR_ACK

@item
@tab Bind
@tab TC_BIND_REQ, TC_BIND_ACK,@*TC_UNBIND_REQ, TC_OK_ACK,@*TC_ERROR_ACK

@item
@tab Options@*Management
@tab TC_OPTMGMT_REQ, TC_OK_ACK,@*TC_ERROR_ACK

@item Transaction@*Initiation
@tab Transaction@*Begin
@tab TC_BEGIN_REQ, TC_BEGIN_IND,@*TC_BEGIN_RES, TC_BEGIN_CON,@*TC_TOKEN_REQ,
TC_TOKEN_ACK,@*TC_OK_ACK, TC_ERROR_ACK

@item Transaction@*Data Transfer
@tab Transaction@*Continue
@tab TC_CONT_REQ, TC_CONT_IND

@item Transaction@*Release
@tab Transaction@*End
@tab TC_END_REQ, TC_END_IND

@item
@tab Transaction@*Abort
@tab TC_ABORT_REQ, TC_ABORT_IND

@end multitable

@sp 1
@center Table 2@strong{@emph{.  Service Primitives for Operation Class 4}}

@multitable @columnfractions .20 .20 .60

@item @b{STATE}
@tab @b{SERVICE}
@tab @b{PRIMITIVES}

@item Local@*Management
@tab Information@*Reporting
@tab TC_INFO_REQ, TC_INFO_ACK,@*TC_ERROR_ACK

@item
@tab Bind
@tab TC_BIND_REQ, TC_BIND_ACK,@*TC_UNBIND_REQ, TC_OK_ACK,@*TC_ERROR_ACK

@item
@tab Options@*Management
@tab TC_OPTMGMT_REQ, TC_OK_ACK,@*TC_ERROR_ACK

@item Transaction@*Unitdata
@tab Transaction@*Unidirectional
@tab TC_UNI_REQ, TC_UNI_IND

@end multitable

@node TCI Services Definition
@chapter TCI Services Definition

This section describes the services of the TCI primitives.  Time-sequence
diagrams @footnote{Conventions for the time-sequence diagrams are defined in
ITU-T X.210, ISO/IEC 10731:1994.} that illustrate the sequence of primitives are
used.  The format of the primitives will be defined later in this document.

@menu
* Local Management Services Definition::
* Operation Class 1 through 3 Transaction Services Definition::
* Operation Class 4 Transaction Services Definition::
* Component Handling Services Definition::
@end menu

@node Local Management Services Definition
@section Local Management Services Definition

The services defined in this section are outside the scope of the international
standards.  These services apply to all operation classes.  They are involved
for the initialization/de-initialization of a stream connected to the TC
provider.  They are also used to manage options supported by the TC provider and
to report information on the supported parameter values.

@menu
* Transaction Information Reporting Service Definition::
* TC User Bind Service Definition::
* TC User Unbind Service Definition::
* Receipt Acknowledgement Service Definition::
* Options Mangement Service Definition::
* Error Acknowledgement Service Definition::
@end menu

@node Transaction Information Reporting Service Definition
@subsection Transaction Information Reporting Service
This service provides information on the options supported by the TC provider.

@itemize

@item @code{TC_INFO_REQ}:

@prindex TC_INFO_REQ
This primitive request that the TC provider returns the values of all the
supported protocol parameters.  This request may be invoked during any phase.

@item @code{TC_INFO_ACK}:

@prindex TC_INFO_ACK
This primitive is in response to the @dfn{TC_INFO_REQ} primitive and returns
the values of the supported protocol parameters to the TC user.
@end itemize

The sequence of primitives for transaction information management is shown in
@emph{Figure 2}.

@cartouche
@center Figure 2@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Transaction Information Reporting Service}}
@image{tci_fig1,3.5in}
@end cartouche

@node TC User Bind Service Definition
@subsection TC User Bind Service

This service allows an originating address to be associated with a stream.  It
allows the TC user to negotiate the number of transaction begin indications that
can remain unacknowledged for that TC user (a transaction begin indication is
considered unacknowledged while it is awaiting a corresponding transaction
response or abort request from the TC user).  This service also defines a
mechanism that allows a stream (bound to the address of the TC user) to be
reserved to handle incoming transactions only.  This stream is referred to as
the listener stream.

@itemize 

@item @code{TC_BIND_REQ}:

@prindex TC_BIND_REQ
This primitive request that the TC user be bound to a particular originating
address, and negotiate the number of allowable outstanding transaction
indications for that address.

@item @code{TC_BIND_ACK}:

@prindex TC_BIND_ACK
This primitive is in response to the @dfn{TC_BIND_REQ} primitive and indicates
to the user that the specified TC user has been bound to an originating address.
@end itemize

The sequence of primitives for the TC user bind service is shown in @emph{Figure
3}.

@cartouche
@center Figure 3@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TC User Bind Service}}
@image{tci_fig2,3.5in}
@end cartouche

@node TC User Unbind Service Definition
@subsection TC User Unbind Service

This service allows the TC user to be unbound from a network address.

@itemize

@item @code{TC_UNBIND_REQ}:

@prindex TC_UNBIND_REQ
This primitive requests that the TC user be unbound from the network address it
had previously been bound to.
@end itemize

The sequence of primitives for the TC user unbind service is shown in
@emph{Figure 4}.

@cartouche
@center Figure 4@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{TC User Unbind &amp; Receipt Acknowledgement Services}}
@image{tci_fig3,3.5in}
@end cartouche

@node Receipt Acknowledgement Service Definition
@subsection Receipt Acknowledgement Service

@itemize 

@item @code{TC_OK_ACK}:

@prindex TC_OK_ACK
This primitive indicates to the TC user that the previous TC user originated
primitive was received successfully by the TC provider.
@end itemize

An example showing the sequence of primitives for successful receive
acknowledgement is depicted in @emph{Figure 4}.

@node Options Mangement Service Definition
@subsection Options Mangement Service

This service allows the TC user to manage the QOS parameter values associated
with the TC provider.

@itemize 

@item @code{TC_OPTMGMT_REQ}:

@prindex TC_OPTMGMT_REQ
This primitive allows the TC user to select default values for QOS parameters
within the range supported by the TC provider, and to indicate the default
selection of return option.

@item @code{TC_OPTMGMT_ACK}:

@prindex TC_OPTMGMT_ACK
@end itemize

@emph{Figure 5} shows the sequence of primitives for transaction options
management.

@cartouche
@center Figure 5@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Options Management Service}}
@image{tci_fig4,3.5in}
@end cartouche

@node Error Acknowledgement Service Definition
@subsection Error Acknowledgement Service

@itemize 

@item @code{TC_ERROR_ACK}:

@prindex TC_ERROR_ACK
This primitive indicates to the TC user that a non-fatal error has occurred in
the last TC user originated request or response primitive (listed in
@cite{Figure 6}) on the stream.
@end itemize

@emph{Figure 6} shows the sequence of primitives for the error management primitive.

@cartouche
@center Figure 6@strong{@emph{.  Sequence of Primitives}}
@center @strong{@emph{Error Acknowledgement Service}}
@image{tci_fig5,3.5in}
@end cartouche

@node Operation Class 1 through 3 Transaction Services Definition
@section Operation Class 1, 2 and 3 Transaction Services Definition
@cindex Operation Class 1
@cindex Operation Class 2
@cindex Operation Class 3

This section describes the required transaction service primitives that define
the operation class 1, 2 and 3, structured transaction interface.

@menu
* Transaction Initiation::
* Transaction Component Transfer::
* Transaction Termination::
@end menu

The queue model for operation classes 1, 2 and 3 are discussed in more detail in
ITU-T X.219 and ITU-T Q.771.

The queue model represents the operation of a transaction dialogue in the
abstract by a pair of queues linking two transaction users.  There is one queue
for each direction of component flow.  Each queue represents a flow control
function in one direction of transfer.  The ability of a user to add objects to
a queue will be determined by the behaviour of the user removing objects from
that queue, and the state of the queue.  The pair of queues is considered to be
available for each potential transaction dialogue.  Objects that are entered
or removed from the queue are either as a result of interactions at the two
transaction addresses, or as the result of TC provider initiatives.

@itemize 

@item A queue is empty until a transaction object has been entered and can be
returned to this state, with loss of its contents, by the TC provider.

@item Objects may be entered into a queue as a result of the actions of the
source TC user, subject to control by the TC provider.

@item Objects may also be entered into a queue by the TC provider.

@item Objects are removed from the queue under the control of the TC user in the
same order as they were entered except:

@end itemize

@enumerate

@item If the object is of type defined to be able to advance ahead of the
preceding object (however, no object is defined to be able to advance ahead of
another object of the same type), or

@item If the following object is defined to be destructive with respect to the
preceding object on the queue.  If necessary, the last object on the queue will
be deleted to allow a destructive object to be entered - they will therefore
always be added to the queue.  For example, ``abort'' objects are defined to be
destructive with respect to all other objects.

@end enumerate

@emph{Table 3} shows the ordering relationships among the queue model objects.

@sp 1
@center Table 3@strong{@emph{.  Ordering Relationships Between Queue Model Objects}}

@multitable @columnfractions .20 .20 .20 .20 .20

@item @strong{Object X} @tab @strong{BEGIN} @tab @strong{CONT} @tab @strong{END} @tab @strong{ABORT}

@item @strong{Object Y}

@item BEGIN @tab N/A @tab - @tab - @tab DES

@item CONT @tab N/A @tab - @tab - @tab DES

@item END @tab N/A @tab N/A @tab - @tab -

@end multitable

@multitable @columnfractions .09 .91

@item AA @tab Indicates that Object X is defined to be able to advance ahead of preceding Object Y

@item DES @tab Indicates that Object X is defined to be destructive with respect to the preceding Object Y.

@item - @tab Indicates that Object X is neither destructive with respect to Object Y, nor able to advance ahead of Object Y

@item N/A @tab Indicates that Object X will not occur in a position succeeding Object Y in a valid state of a queue.

@end multitable

@node Transaction Initiation
@subsection Transaction Initiation

A pair of queues is associated with a transaction dialogue between two
transaction users when the TC provider receives a @code{TC_BEGIN_REQ}
@prindex TC_BEGIN_REQ
primitive at one of the TC users resulting in a begin object being entered into
the queue.  The queues will remain associated with the transaction until a
@code{TC_END_REQ}
@prindex TC_END_REQ
or @code{TC_ABORT_REQ}
@prindex TC_ABORT_REQ
primitive (resulting in an end or abort object) is either entered or removed
from a queue.  Similarly, in the queue from the destination TC user, objects can
be entered into the queue only after the begin object associated with the
@code{TC_BEGIN_RES}
@prindex TC_BEGIN_RES
has been entered into the queue.  Alternatively, the destination TC user can
enter an end or abort object into the queue instead of the begin object to
terminate the transaction.

The transaction establishment procedure will fail if the TC provider is unable
to establish a transaction dialogue, or if the destination TC user is unable
to accept the @code{TC_BEGIN_IND}
@prindex TC_BEGIN_IND
(see Transaction Termination primitive definition in @ref{TC_END_IND}).

@subsubsection User Primitives for Successful Transaction Establishment
The following user primitves support Operation Class 1, 2, or 3 Phase I
(Transaction Establishment) services:

@itemize 

@item @code{TC_BEGIN_REQ}:

@prindex TC_BEGIN_REQ
This primitive requests that the TC provider form a transaction dialogue with
the specified destination TC user.

@item @code{TC_BEGIN_RES}:

@prindex TC_BEGIN_RES
This primitive requests that the TC provider accept a previous transaction
indication.

@end itemize

@subsubsection Provider Primitives for Successful Transaction Establishment
The following provider primitives support Operation Class 1, 2, or 3 Phase I
(Transaction Establishment) services:

@itemize 

@item @code{TC_BEGIN_IND}:

@prindex TC_BEGIN_IND
This primitive indicates to the TC user that a transaction dialogue request
has been made by a user at the specified source address.

@item @code{TC_BEGIN_CON}:

@prindex TC_BEGIN_CON
This primitive indicates to the TC user that a transaction initiation request
has been confirmed on the specified responding address.

@end itemize

The sequence of primitives in a successful transaction initiation is defined by
the time sequence diagrams as shown in @emph{Figure 7}.

@cartouche
@center Figure 7@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Successful Transaction Initiation}}
@image{tci_fig6,3.5in}
@end cartouche

The sequence of primitives for the transaction initiation response token value
determination is shown in @emph{Figure 8} (procedures for transaction initiation
response token value determination are discussed in @ref{TC_BIND_REQ}, and
@ref{TC_BIND_ACK}).

@cartouche
@center Figure 8@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Transaction Response Token Value Determination}}
@image{tci_fig7,3.5in}
@end cartouche

@node Transaction Component Transfer
@subsection Transaction Component Transfer

Flow control on the transaction dialogue is done by management of the queue
capacity, and by allowing objects of certain types to be inserted to the queues,
as shown in @emph{Table 4}.

@subsubsection Primitives for Component Transfer

The following primitives support Operation Class 1, 2, or 3 Phase II
(Transaction Component Transfer) services:

@itemize 

@item @code{TC_CONT_REQ}:

@prindex TC_CONT_REQ
This primitive requests that the TC provider transfer the specified components.

@item @code{TC_CONT_IND}:

@prindex TC_CONT_IND
This primitive indicates to the TC user that this message contains components.

@end itemize

@emph{Figure 9} shows the sequence of primitives for successful component
transfer.  The sequence of primitives may remain incomplete if a
@samp{TC_END_REQ},
@prindex TC_END_REQ
@samp{TC_ABORT_REQ},
@prindex TC_ABORT_REQ
or @samp{TC_ABORT_IND}
@prindex TC_ABORT_IND
primitive occurs.

@cartouche
@center Figure 9@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Component Transfer}}
@image{tci_fig8,3.5in}
@end cartouche

@node Transaction Termination
@subsection Transaction Termination

The transaction dialogue procedure is initialized by insertion of an end or
abort object (associated with a @code{TC_END_REQ}
@prindex TC_END_REQ
or @code{TC_ABORT_REQ})
@prindex TC_ABORT_REQ
into the queue.  As shown in Table?, the termination procedure is destructive
with respect to other objects in the queue, and eventually results in the
emptying of queues and termination of the transaction dialogue.

The sequence of primitives depends on the origin of the termination action.  The
sequence may be:

@enumerate

@item invoked by on TC user, with a request from that TC user leading to an
indication to the other;

@item invoked by both TC users, with a request from each of the TC users;

@item invoked by the TC provider, with an indication to each of the TC users;

@item invoked independently by one TC user and the TC provider, with a request
from the originating TC user and an indication to the other.

@end enumerate

@subsubsection Primitives for Transaction Termination

The following primitives support Operation Class 1, 2, or 3 Phase III
(Transaction Termination) services:

@itemize 

@item @code{TC_END_REQ}:

@prindex TC_END_REQ
This primitive requests that the TC provider deny an outstanding request for a
transaction dialogue or normal termination of an existing transaction.

@item @code{TC_ABORT_REQ}:

@prindex TC_ABORT_REQ
This primitive requests that the TC provider deny an outstanding request for a
transaction dialogue or abnormal termination of an existing transaction.

@item @code{TC_END_IND}:

@prindex TC_END_IND
This primitive indicates to the TC user that either a request for transaction
initiation has been denied or an existing transaction has been terminated
normally.

@item @code{TC_ABORT_IND}:

@prindex TC_ABORT_IND
This primitive indicates to the TC user that either a request for transaction
initiation has been denied or an existing transaction has been terminated
abnormally.

@end itemize

The sequence of primitives are shown in the time sequence diagrams in the
figures that follow:

@cartouche
@center Figure 10@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TC User Invoked Termination}}
@image{tci_fig9,3.5in}
@end cartouche

@cartouche
@center Figure 11@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TC User Invoked Termination}}
@image{tci_fi10,3.5in}
@end cartouche

@cartouche
@center Figure 12@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TC Provider Invoked Termination}}
@image{tci_fi11,3.5in}
@end cartouche

@cartouche
@center Figure 13@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Simultaneous TC User and TC Provider Invoked Termination}}
@image{tci_fi12,3.5in}
@end cartouche

A TC user may reject a transaction initiation attempt by issuing a
@samp{TC_ABORT_REQ}.
@prindex TC_ABORT_REQ
The originator parameter in the @samp{TC_ABORT_REQ}
@prindex TC_ABORT_REQ
will indicate TC user invoked termination.  The sequence of primitives is shown
in @emph{Figure 14}.

@cartouche
@center Figure 14@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TC User Rejection of a Transaction Initiation Attempt}}
@image{tci_fi13,3.5in}
@end cartouche

If the TC provider is unable to establish a transaction, it indicates this to
the requester by an @samp{TC_ABORT_IND}.
@prindex TC_ABORT_IND
The originator of the primitive indicates a TC provider invoked release.  This
is shown in @emph{Figure 15}.

@cartouche
@center Figure 15@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{TC Provider Rejection of a Transaction Initiation Attempt}}
@image{tci_fi14,3.5in}
@end cartouche

@node Operation Class 4 Transaction Services Definition
@section Operation Class 4 Transaction Services Definition

The operation class 4 service allows for the transfer of transaction components
in one and both directions simultaneously without establishing a transaction
dialogue.  A set of primitives are defined that carry transaction components and
control information between the TC user and the TC provider entities.  The
primitives are modelled as requests initiated by the TC user and indications
initiated by the TC provider.  Indications may be initiated by the TC provider
independently from requests by the TC user.  The operation class 4 transaction
service consists of one phase.

@menu
* Request and Response Primitives::
@end menu

@node Request and Response Primitives
@subsection Request and Response Primitives

@itemize 

@item @code{TC_UNI_REQ}:

@prindex TC_UNI_REQ
This primitive requests that the TC provider send the transaction components to
the specified destination.

@item @code{TC_UNI_IND}:

@prindex TC_UNI_IND
This primitive indicates to the TC user that a component sequence has been
received from the specified originating address.

@end itemize

@emph{Figure 16} shows the sequence of primitives for the operation class 4 mode
of transfer.

@cartouche
@center Figure 16@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Operation Class 4 Component Transfer}}
@image{tci_fi15,3.5in}
@end cartouche

@itemize 

@item @code{TC_NOTICE_IND}:

This primitive indicates to the TC user that the components with the specified
destination address and QOS parameters produced an error.  This primitive is
specific to operation class 4.

@end itemize

@emph{Figure 17} shows the sequence of primitives for the operation class 4
error management primitive.

@cartouche
@center Figure 17@strong{@emph{.  Sequence of Primitives:}}
@center @strong{@emph{Operation Class 4 Error Indication Service}}
@image{tci_fi16,3.5in}
@end cartouche

@node Component Handling Services Definition
@section Component Handling Services Definition

@menu
* Component Invoke Service::
* Component Return Result Service::
* Component Error Service::
* Component Cancel Service::
* Component Reject Service::
@end menu

@node Component Invoke Service
@subsection Component Invoke Service

@itemize

@item @code{TC_INVOKE_REQ}:

@item @code{TC_INVOKE_IND}:

@end itemize

@node Component Return Result Service
@subsection Component Return Result Service

@itemize

@item @code{TC_RESULT_REQ}:

@item @code{TC_RESULT_IND}:

@end itemize

@node Component Error Service
@subsection Component Error Service

@itemize

@item @code{TC_ERROR_REQ}:

@item @code{TC_ERROR_IND}:

@end itemize

@node Component Cancel Service
@subsection Component Cancel Service

@itemize

@item @code{TC_CANCEL_REQ}:

@item @code{TC_CANCEL_IND}:

@end itemize

@node Component Reject Service
@subsection Component Reject Service

@itemize

@item @code{TC_REJECT_REQ}:

@item @code{TC_REJECT_IND}:

@end itemize

@node TCI Primitives
@chapter TCI Primitives

@menu
* Management Primitives::
* Operation Class 1 through 3 Primitives::
* Operation Class 4 Primitives::
* Component Handling Primitives::
@end menu

This section describes the format and parameters of the TCI primitives (Appendix
A shows the mapping of TCI primitives to the primitives defined in ITU-T Q.771).
In addition, it discusses the states in which the primitive is valid, the
resulting state, and the acknowledgement that the primitive expects.  (The
state/event tables for these primitives are shown in Appendix B.  The precedence
tables for the TCI primitives are shown in Appendix C.) Rules for SS7
conformance are described in Addendum 1 to this document.  The following tables
provide a summary of the TC primitives and their parameters.

@sp 1
@center Table 4@strong{@emph{.  Transaction Initiation Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50

@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}

@item TC Initiation @tab @code{TC_BEGIN_REQ} @tab ()
@prindex TC_BEGIN_REQ

@item @tab @code{TC_BEGIN_IND} @tab ()
@prindex TC_BEGIN_IND

@item @tab @code{TC_BEGIN_RES} @tab ()
@prindex TC_BEGIN_RES

@item @tab @code{TC_BEGIN_CON} @tab ()
@prindex TC_BEGIN_CON

@end multitable

@sp 1
@center Table 5@strong{@emph{.  Transaction Continuation Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50

@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}

@item TC Initiation @tab @code{TC_CONT_REQ} @tab ()
@prindex TC_CONT_REQ

@item @tab @code{TC_CONT_IND} @tab ()
@prindex TC_CONT_IND

@end multitable

@sp 1
@center Table 6@strong{@emph{.  Transaction Termination Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50

@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}

@item TC Initiation @tab @code{TC_END_REQ} @tab ()
@prindex TC_END_REQ

@item @tab @code{TC_END_IND} @tab ()
@prindex TC_END_IND

@item @tab @code{TC_ABORT_REQ} @tab ()
@prindex TC_ABORT_REQ

@item @tab @code{TC_ABORT_IND} @tab ()
@prindex TC_ABORT_IND

@end multitable

@page
@node Management Primitives
@section Management Primitives

These primitives apply to all operation classes.

@menu
* Transaction Information::
* Transaction Protocol Address Management::
* Transaction Options Management::
* Transaction Error Management::
@end menu

@ignore
@menu
---- detailed node listing ----

Transaction Information

* TC_INFO_REQ::
* TC_INFO_ACK::

Transaction Protocol Address Management

* TC_BIND_REQ::
* TC_BIND_ACK::
* TC_UNBIND_REQ::
* TC_ADDR_REQ::
* TC_ADDR_ACK::

Transaction Options Management

* TC_OPTMGMT_REQ::
* TC_OPTMGMT_ACK::

Transaction Error Management

* TC_OK_ACK::
* TC_ERROR_ACK::
@end menu
@end ignore

@node Transaction Information
@subsection Transaction Information

@menu
* TC_INFO_REQ::
* TC_INFO_ACK::
@end menu

@node TC_INFO_REQ
@subsubsection Transaction Information Request

@subsubheading TC_INFO_REQ
@prindex TC_INFO_REQ

This primitive request the TC provider to return the values of all supported
protocol parameters (@pxref{TC_INFO_ACK}), and also the current state of the TC
provider (as defined in @ref{State/Event Tables}).  This primitive does not
affect the state of the TC provider and does not appear in the state tables.

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:

@smallexample
typedef struct TC_info_req @{
        ulong PRIM_type;                /* Always TC_INFO_REQ */
@} TC_info_req_t;
@tpindex TC_info_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_INFO_REQ}.

@end vtable

@subsubheading Valid States

This primitive is valid in any state where a local acknowledgement is not
pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

For the rules governing the requests made by this primitive, see the
@samp{TC_INFO_ACK} primitive described in @ref{TC_INFO_ACK}.

@subsubheading Acknowledgements

This primitive requires the TC provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful:}

Acknowledgement of the primitive is indicatd with the @code{TC_INFO_ACK}
primitive described in @ref{TC_INFO_ACK}.

@item @emph{Non-fatal Errors:}

These errors will be indicated with the @code{TC_ERROR_ACK} primitive described
in @ref{TC_ERROR_ACK}.  The allowable errors are as follows:

There are no errors associated with the issuance of this primitive.

@end itemize

@page
@node TC_INFO_ACK
@subsubsection Transaction Information Acknowledgement

@subsubheading TC_INFO_ACK
@prindex TC_INFO_ACK

This primitive indicates to the TC user any relevant protocol-dependent
parameters.@footnote{}  It should be initiated in response to the
@code{TC_INFO_REQ} primitive described above under @ref{TC_INFO_REQ}.

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block and its structure is as follows:

@smallexample
typedef struct TC_info_ack @{
        long PRIM_type;                 /* always TC_INFO_ACK */
        long TSDU_size;                 /* maximum TSDU size */
        long ETSDU_size;                /* maximum ETSDU size */
        long CDATA_size;                /* connect data size */
        long DDATA_size;                /* disconnect data size */
        long ADDR_size;                 /* maximum address size */
        long OPT_size;                  /* maximum options size */
        long TIDU_size;                 /* transaction interface data size */
        long SERV_type;                 /* service type */
        long CURRENT_state;             /* current state */
        long PROVIDER_flag;             /* provider flags */
        long TCI_version;               /* TCI version */
@} TC_info_ack_t;
@tpindex TC_info_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@table @emph

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_INFO_ACK}.

@item TSDU_size

Specifies the maximum size (in octets) of Transaction Service User Data supported by the TR provider.

@item ETSDU_size

Specifies the maximum size (in octets) of Expedited Transaction Service User Data supported by the TR provider.

@item CDATA_size

Specifies the maximum number of octets of data that may be associated with a transaction initiation primitive.

@item DDATA_size

Specifies the maximum number of octets of data that may be associated with a transaction termination primitive.

@item ADDR_size

Specifies the maximum size (in decimal digits) of a network address.

@item ADDR_length, ADDR_offset

Specifies the length in bytes and offset from the beginning of the M_PCPROTO message block of the network address bound
on the stream on which the @code{TC_INFO_REQ} was issued (a network address is bound
@prindex TC_INFO_REQ
to a stream via a @code{TC_BIND_REQ}).
@prindex TC_BIND_REQ

@item QOS_length, QOS_offset

@item QOS_range_length, QOS_range_offset

@item OPTIONS_flags

@item TIDU_size

@item SERV_type

@item CURRENT_state

@item PROVIDER_type

@item NODU_size

@item PROTOID_length, PROTOID_offset

@item TCI_version

@end table

@page
@node Transaction Protocol Address Management
@subsection Transaction Protocol Address Management

@menu
* TC_BIND_REQ::
* TC_BIND_ACK::
* TC_UNBIND_REQ::
* TC_ADDR_REQ::
* TC_ADDR_ACK::
@end menu

@node TC_BIND_REQ
@subsubsection Transaction Bind Request

@subsubheading TC_BIND_REQ
@prindex TC_BIND_REQ

@subsubheading Format

@smallexample
typedef struct TC_bind_req @{
        ulong PRIM_type;
        ulong ADDR_length;              /* address length */
        ulong ADDR_offset;              /* address offset */
        ulong XACT_number;              /* maximum outstanding transaction reqs. */
        ulong BIND_flags;               /* bind flags */
@} TC_bind_req_t;
@tpindex TC_bind_req_t

typedef struct TC_subs_bind_req @{
        ulong PRIM_type;
@} TC_subs_bind_req_t;
@tpindex TC_subs_bind_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_BIND_REQ}.

@item ADDR_length

@item ADDR_offset

@item XACT_number

@item BIND_flags

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_BIND_ACK
@subsubsection Transaction Bind Acknowledgement

@subsubheading TC_BIND_ACK
@prindex TC_BIND_ACK

@subsubheading Format

@smallexample
typedef struct TC_bind_ack @{
        ulong PRIM_type;
        ulong ADDR_length;
        ulong ADDR_offset;
        ulong XACT_number;
        ulong TOKEN_value;
@} TC_bind_ack_t;
@tpindex TC_bind_ack_t

typedef struct TC_subs_bind_ack @{
        ulong PRIM_type;
@} TC_subs_bind_ack_t;
@tpindex TC_subs_bind_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_BIND_ACK}.

@item ADDR_length

@item ADDR_offset

@item XACT_number

@item TOKEN_value

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_UNBIND_REQ
@subsubsection Transaction Unbind Request

@subsubheading TC_UNBIND_REQ
@prindex TC_UNBIND_REQ

@subsubheading Format

@smallexample
typedef struct TC_unbind_req @{
        ulong PRIM_type;                /* Always TC_UNBIND_REQ */
@} TC_unbind_req_t;
@tpindex TC_unbind_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_UNBIND_REQ}.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_ADDR_REQ
@subsubsection Transaction Protocol Address Request

@subsubheading TC_ADDR_REQ
@prindex TC_ADDR_REQ

@subsubheading Format

@smallexample
@tpindex TC_addr_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_ADDR_ACK
@subsubsection Transaction Protocol Address Acknowledgement

@subsubheading TC_ADDR_ACK
@prindex TC_ADDR_ACK

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:

@smallexample
@tpindex TC_addr_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Transaction Options Management
@subsection Transaction Options Management

@menu
* TC_OPTMGMT_REQ::
* TC_OPTMGMT_ACK::
@end menu

@node TC_OPTMGMT_REQ
@subsubsection Transaction Options Management Request

@subsubheading TC_OPTMGMT_REQ
@prindex TC_OPTMGMT_REQ

@subsubheading Format

@smallexample
typedef struct TC_optmgmt_req @{
        ulong PRIM_type;
        ulong OPT_length;
        ulong OPT_offset;
        ulong MGMT_flags;
@} TC_optmgmt_req_t;
@tpindex TC_optmgmt_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_OPTMGMT_REQ}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item MGMT_flags

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_OPTMGMT_ACK
@subsubsection Transaction Options Management Acknowledgement

@subsubheading TC_OPTMGMT_ACK
@prindex TC_OPTMGMT_ACK

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:

@smallexample
typedef struct TC_optmgmt_ack @{
        ulong PRIM_type;
        ulong OPT_length;
        ulong OPT_offset;
        ulong MGMT_flags;
@} TC_optmgmt_ack_t;
@tpindex TC_optmgmt_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_OPTMGMT_ACK}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item MGMT_flags

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Transaction Error Management
@subsection Transaction Error Management

@menu
* TC_OK_ACK::
* TC_ERROR_ACK::
@end menu

@node TC_OK_ACK
@subsubsection Transaction Successful Receipt Acknowledgement

@subsubheading TC_OK_ACK
@prindex TC_OK_ACK

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:

@smallexample
typedef struct TC_ok_ack @{
        ulong PRIM_type;
        ulong CORRECT_prim;
@} TC_ok_ack_t;
@tpindex TC_ok_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_OK_ACK}.

@item CORRECT_prim

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_ERROR_ACK
@subsubsection Transaction Error Acknowledgement

@subsubheading TC_ERROR_ACK
@prindex TC_ERROR_ACK

@subsubheading Format

The format of the message is one @samp{M_PCPROTO}
@prindex M_PCPROTO
message block structured as follows:

@smallexample
typedef struct TC_error_ack @{
        ulong PRIM_type;
        ulong ERROR_prim;
        ulong TRPI_error;
        ulong UNIX_error;
        ulong DIALOG_id;
        ulong INVOKE_id;
@} TC_error_ack_t;
@tpindex TC_error_ack_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_ERROR_ACK}.

@item ERROR_prim

@item TRPI_error

@item UNIX_error

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Operation Class 1 through 3 Primitives
@section Operation Class 1, 2 and 3 Primitives

This section describes the operation class 1, 2, and 3 dialogue handling primitives.  Primitives are grouped into phases:

@enumerate 1

@item Transaction Establishment Phase

@ifnotinfo
@xref{Transaction Establishment Phase}.
@end ifnotinfo

@item Transaction Data Transfer Phase

@ifnotinfo
@xref{Transaction Data Transfer Phase}.
@end ifnotinfo

@item Transaction Termination Phase

@ifnotinfo
@xref{Transaction Termination Phase}.
@end ifnotinfo

@end enumerate

@menu
* Transaction Establishment Phase::
* Transaction Data Transfer Phase::
* Transaction Termination Phase::
@end menu

@ignore
@menu
---- detailed node listing ----

Transaction Establishment Phase

* TC_BEGIN_REQ::
* TC_BEGIN_IND::
* TC_BEGIN_RES::
* TC_BEGIN_CON::

Transaction Data Transfer Phase

* TC_CONT_REQ::
* TC_CONT_IND::

Transaction Termination Phase

* TC_END_REQ::
* TC_END_IND::
* TC_ABORT_REQ::
* TC_ABORT_IND::
@end menu
@end ignore

@node Transaction Establishment Phase
@subsection Transaction Establishment Phase

@menu
* TC_BEGIN_REQ::
* TC_BEGIN_IND::
* TC_BEGIN_RES::
* TC_BEGIN_CON::
@end menu

The transaction begin service provides means to start a transaction dialogue
between two TC-users.  This may be accompanied by the transfer of components
previously accumulated using the component handling primitives described in
@ref{Component Handling Primitives}.

@page
@node TC_BEGIN_REQ
@subsubsection Transaction Begin Request

@subsubheading TC_BEGIN_REQ
@prindex TC_BEGIN_REQ

This primitive requests that the transaction component provider form a
transaction dialogue to the specified destination protocol address, from the
specified source protocol address, using the specified options.  Any components
that have been accumulated using the component handling primitives
(@pxref{Component Handling Primitives}), will accompany the primitive.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block followed by zero or more @samp{M_DATA} message blocks containing
raw transaction user information.
The @samp{M_PROTO} message block is structured as follows:

@smallexample
typedef struct TC_begin_req @{
        ulong PRIM_type;                /* Always TC_BEGIN_REQ */
        ulong SRC_length;               /* Source address length */
        ulong SRC_offset;               /* Source address offset */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI QWP/QWOP */
@} TC_begin_req_t;
@tpindex TC_begin_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_BEGIN_REQ}.

@item SRC_length

Specifies the length of the source protocol address associated with the
primitive.

@item SRC_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the source protocol address begins.
Proper alignment of the protocol address in the @samp{M_PROTO} message block is
not guaranteed.

@item DEST_length

Specifies the length of the destination protocol address associated with the
primitive.

@item DEST_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the destination protocol address begins.
Proper alignment of the protocol address in the @samp{M_PROTO} message block is
not guaranteed.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Specifies additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

The @var{COMP_flags} field can contain any of the following flags:

@vtable @var

@item COMPONENTS_PRESENT

Specifies, when set, that components previously accumulated with the component
handling primitives (@pxref{Component Handling Primitives}) are to be associated
with the primitive.

@item NO_PERMISSION

Specifies, when set, that the the peer is not granted permission to end the
transaction upon the receipt of the corresponding @samp{TC_BEGIN_IND} primitive.

@end vtable

@subsubheading Valid State

This primitive is valid in transaction state @var{TC_IDLE}.

@subsubheading New State

The new state for the transaction is @var{TC_WACK_CREQ}.

@subsubheading Rules

The following rules apply to the specification of parameters to this primitive:

@itemize ---

@item When the source address is not specified, @var{SRC_length} and
@var{SRC_offset} must be specified as zero (0).

@item When the @var{SRC_length} and @var{SRC_offset} are zero (0), the source
protocol address is the local address that is implicitly associated with the
access point from the local bind service (@pxref{TC_BIND_REQ}).

@item The destination protocol address must be specified and the TC provider
will return error @samp{TCNOADDR} if the @var{DEST_length} and @var{DEST_offset}
are zero (0).

@end itemize

@subsubheading Acknowledgement

This primitive requires the transaction provider to generate one of the
following acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful Dialogue Establishment:}
This is indicated with the @samp{TC_BEGIN_CON} primitive described in
@ref{TC_BEGIN_REQ}.  This results in the @var{TC_DATA_XFER} state for the
transaction.  Successful establishment and tear down can also be indicated with
the @samp{TC_END_IND} primitive described in @ref{TC_END_IND}.  This results in
the @var{TC_IDLE} state for the transaction.

@item @emph{Unsuccessful Dialogue Establishment:}
This is indicated with the @samp{TC_ABORT_IND} primitive described in
@ref{TC_ABORT_IND}.  For example, an dialogue may be rejected because either
the called transaction user cannot be reached, or the transaction provider or
the called transaction user did not agree on the specified options.  This
results in the @var{TC_IDLE} state for the transaction.

@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @samp{TC_OK_ACK}
primitive described in @ref{TC_OK_ACK}.

@item @emph{Non-fatal errors:}
These are indicated with the @samp{TC_ERROR_ACK} primitive.  The applicable
non-fatal errors are defined as follows:

@vtable @var

@item TCACCES

This indicates that the user did not have proper permissions for the use of the
requested protocol address or protocol options.

@item TCBADADDR

This indicates that the protocol address was in an incorrect format or the
address contained illegal information.  It is not intended to indicate protocol
connection errors, such as an unreachable destination.  Those types of errors
are indicated with the @samp{TC_ABORT_IND} primitive described in
@ref{TC_ABORT_IND}.

@item TCBADOPT

This indicates that the options were in an incorrect format or they contained
illegal information.

@item TCOUTSTATE

The primitive would place the transaction interface out of state.

@item TCBADDATA

The amount of user data specified was illegal (@pxref{TC_INFO_ACK}).

@item TCBADFLAG

The flags specified were incorrect, not supported by the provider, or contained
illegal information.

@item TCBADSEQ

The specified dialogue identifier @var{DIALOG_id} was incorrect, or contained
illegal information.  This error would normally occur if the TC user selected a
dialogue identifier reserved for the provider (high bit set to 0).

@item TCSYSERR

A system error has occured and the UNIX System error is indicated in the
primitive.

@end vtable

@end itemize


@page
@node TC_BEGIN_IND
@subsubsection Transaction Begin Indication

@subsubheading TC_BEGIN_IND
@prindex TC_BEGIN_IND

The transaction indication service primitive indicates that a peer TC user has
initiated a transaction dialogue, the source protocol address associated with
the peer TC user, the destination address to which the transaction dialogue
is initiated, the options for the dialogue.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_begin_ind @{
        ulong PRIM_type;                /* Always TC_BEGIN_IND */
        ulong SRC_length;               /* Source address length */
        ulong SRC_offset;               /* Source address offset */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI QWP/QWOP */
@} TC_begin_ind_t;
@tpindex TC_begin_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_BEGIN_IND}.

@item SRC_length

Indicates the length of the source protocol address associated with the
primitive.

@item SRC_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the source protocol address begins.

@item DEST_length

Indicates the length of the destination protocol address associated with the
primitive.

@item DEST_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the destination protocol address begins.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Indicates additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

The @var{COMP_flags} field can contain any of the following flags:

@vtable @var

@item TC_COMPONENTS_PRESENT

Indicates, when set, that component handling primitives representing the
components associated with the begin indication follow this primitive.

@item TC_NO_PERMISSION

Indicates, when set, that the TC user is not permitted to end the dialogue upon
receipt of this primitive, nor when issuing a response.

@end vtable

@subsubheading Valid State

This primitive is valid in transaction state @var{TC_IDLE}.

@subsubheading New State

The new state of the transaction is @var{TC_WRES_CIND}.

@subsubheading Rules

The following rules apply to the issuance of this primitive by the transaction
provider:

@itemize ---

@item The dialogue identifier provided by the transaction provider uniquely
identifies this transaction begin indication within the stream upon which the
primitive is issued.  This must be a positive, non-zero value.  The high bit of
the transaction identifier is reserved for exclusive use by the transaction user
in generating correlation identifiers.

@item It is not necessary to indicate a destination address in
@var{DEST_length}, and @var{DEST_offset} when the protocol address to which the
begin indication corresponds is the same as the local protocol address to which
the listening stream is bound.  In the case that the destination protocol
address is not provided, @var{DEST_length} and @var{DEST_offset} must both be
set to zero (0).  When the local protocol address to which the begin indication
corresponds is not the same as the bound address for the stream, the transaction
provider must indicate the destination protocol address using @var{DEST_length}
and @var{DEST_offset}.

@item The source protocol address is a mandatory field.  The transaction
provider must indicate the source protocol address corresponding to the begin
indication using the @var{SRC_length} and @var{SRC_offset} fields.

@item Any indicated options are included in the @var{OPT_length} and
@var{OPT_offset} fields.

@item When the @samp{TC_NO_PERMISSION} flag is set, the TC user must not issue a
@samp{TC_END_REQ} primitive in response to this indication.

@end itemize


@page
@node TC_BEGIN_RES
@subsubsection Transaction Begin Response

@subsubheading TC_BEGIN_RES
@prindex TC_BEGIN_RES

This primitive allows the destination TC user to request that the TC provider
accept a previous transaction dialogue begin indication, either on the current
@dfn{stream} or on a specified acceptor @dfn{stream}.

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_begin_res @{
        ulong PRIM_type;                /* Always TC_CONT_REQ */
        ulong SRC_length;               /* Source address length */
        ulong SRC_offset;               /* Source address offset */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI CWP/CWOP */
@} TC_begin_res_t;
@tpindex TC_begin_res_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_BEGIN_RES}.

@item SRC_length

Specifies the length of the source protocol address associated with the
primitive.

@item SRC_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the source protocol address begins.
Proper alignment of the protocol address in the @samp{M_PROTO} message block is
not guaranteed.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Specifies additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

The @var{COMP_flags} field can contain any of the following flags:

@vtable @var

@item TC_COMPONENTS_PRESENT

Specifies, when set, that component handling primitives representing the
components associated with the begin indication precede this primitive.

@item TC_NO_PERMISSION

Specifies, when set, that the TC user peer is not permitted to end the dialogue
upon receipt of this primitive, nor when issuing a response.

@end vtable

@subsubheading Valid State

This primitive is valid in transaction state @var{TC_WRES_CIND}.

@subsubheading New State

The new state of the transaction is @var{TC_DATA_XFER}.

@subsubheading Rules

@subsubheading Acknowledgement

This primitive requires the TC provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---

@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated with the @code{TC_OK_ACK}
primitive described in @ref{TC_OK_ACK}.

@item @emph{Unsuccessful (Non-fatal errors):}
These errors will be indicated with the @code{TC_ERROR_ACK} primitive described
in @ref{TC_ERROR_ACK}.  The allowable errors are as follows:

@vtable @code

@item TCBADF

The token specified is not associated with an open stream.

@item TCBADOPT

The options were in an incorrect format, or they contained illegal information.

@item TCACCES

The user did not have proper permissions for the use of the responding protocol
address or protocol options.

@item TCOUTSTATE

The primitive would place the transaction interface out of state for the
indicated transaction.

@item TCBADDATA

The amount of user data specified was outside the range supported by the
transaction provider.

@item TCBADFLAG

The flags specified were incorrect, not supported by the provider, or contained
illegal information.

@item TCBADSEQ

The specified dialogue identifier @var{DIALOG_id} was incorrect, or contained
illegal information.  This error would normally occur if the TC user selected a
dialogue identifier reserved for the provider (high bit set to 0).

@item TCSYSERR

A system error occurred and the UNIX System error is indicated in the primitive.

@item TCRESADDR

The transaction provider requires that the responding @dfn{stream} is bound to
the same address as the @dfn{stream} on which the transaction dialogue begin
indication was received.

@item TCBADADDR

This indicates that the protocol address was in an incorrect format or the
protocol address contained illegal information.

@end vtable

@end itemize

@page
@node TC_BEGIN_CON
@subsubsection Transaction Begin Confirm

@subsubheading TC_BEGIN_CON
@prindex TC_BEGIN_CON

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_begin_con @{
        ulong PRIM_type;                /* Always TC_CONT_IND */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI CWP/CWOP */
@} TC_begin_con_t;
@tpindex TC_begin_con_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_BEGIN_CON}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Indicates additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Transaction Data Transfer Phase
@subsection Transaction Data Transfer Phase

@menu
* TC_CONT_REQ::
* TC_CONT_IND::
@end menu

The component transfer service primtiives provide for an exchange of component
user data known as TSDUs, in either direction or in both directions
simultaneously on a transaction dialogue.  The transaction service preserves
both the sequence and the boundaries of the TSDUs.

@node TC_CONT_REQ
@subsubsection Transaction Continue Request

@subsubheading TC_CONT_REQ
@prindex TC_CONT_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_cont_req @{
        ulong PRIM_type;                /* Always TC_CONT_REQ */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI CWP/CWOP */
@} TC_cont_req_t;
@tpindex TC_cont_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_CONT_REQ}.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Specifies additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_CONT_IND
@subsubsection Transaction Continue Indication

@subsubheading TC_CONT_IND
@prindex TC_CONT_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_cont_ind @{
        ulong PRIM_type;                /* Always TC_CONT_IND */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* For use with ANSI CWP/CWOP */
@} TC_cont_ind_t;
@tpindex TC_cont_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_CONT_IND}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Indicates additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Transaction Termination Phase
@subsection Transaction Termination Phase

@menu
* TC_END_REQ::
* TC_END_IND::
* TC_ABORT_REQ::
* TC_ABORT_IND::
@end menu

@node TC_END_REQ
@subsubsection Transaction End Request

@subsubheading TC_END_REQ
@prindex TC_END_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_end_req @{
        ulong PRIM_type;                /* Always TC_END_REQ */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong TERM_scenario;            /* Reason for termination */
@} TC_end_req_t;
@tpindex TC_end_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_END_REQ}.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item TERM_scenario

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_END_IND
@subsubsection Transaction End Indication

@subsubheading TC_END_IND
@prindex TC_END_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_end_ind @{
        ulong PRIM_type;                /* Always TC_END_IND */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* Components present flag */
@} TC_end_ind_t;
@tpindex TC_end_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_END_IND}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Indicates additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_ABORT_REQ
@subsubsection Transaction Abort Request

@subsubheading TC_ABORT_REQ
@prindex TC_ABORT_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_abort_req @{
        ulong PRIM_type;                /* Always TC_ABORT_REQ */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong ABORT_reason;             /* Abort reason */
@} TC_abort_req_t;
@tpindex TC_abort_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_ABORT_REQ}.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item ABORT_reason

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_ABORT_IND
@subsubsection Transaction Abort Indication

@subsubheading TC_ABORT_IND
@prindex TC_ABORT_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block structured as follows:

@smallexample
typedef struct TC_abort_ind @{
        ulong PRIM_type;                /* Always TC_ABORT_IND */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong ABORT_reason;             /* Abort reason */
        ulong ORIGINATOR;               /* Either User or Provider originated */
@} TC_abort_ind_t;
@tpindex TC_abort_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_ABORT_IND}.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item ABORT_reason


@item ORIGINATOR


@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Operation Class 4 Primitives
@section Operation Class 4 Primitives

@menu
* Transaction Phase::
@end menu

@page
@node Transaction Phase
@subsection Transaction Phase

@menu
* TC_UNI_REQ::
* TC_UNI_IND::
* TC_NOTICE_IND::
@end menu

@node TC_UNI_REQ
@subsubsection Transaction Unidirectional Request

@subsubheading TC_UNI_REQ
@prindex TC_UNI_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_uni_req @{
        ulong PRIM_type;                /* Always TC_UNI_REQ */
        ulong SRC_length;               /* Source address length */
        ulong SRC_offset;               /* Source address offset */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
@} TC_uni_req_t;
@tpindex TC_uni_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_UNI_REQ}.

@item SRC_length

Specifies the length of the source protocol address associated with the
primitive.

@item SRC_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the source protocol address begins.

@item DEST_length

Specifies the length of the destination protocol address associated with the
primitive.

@item DEST_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the destination protocol address begins.

@item OPT_length

Specifies the length of the protocol options associated with the primitive.

@item OPT_offset

Specifies the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_UNI_IND
@subsubsection Transaction Unidirectional Indication

@subsubheading TC_UNI_IND
@prindex TC_UNI_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_uni_ind @{
        ulong PRIM_type;                /* Always TC_UNI_IND */
        ulong SRC_length;               /* Source address length */
        ulong SRC_offset;               /* Source address offset */
        ulong DEST_length;              /* Destination address length */
        ulong DEST_offset;              /* Destination address offset */
        ulong OPT_length;               /* Options associated with the primitive */
        ulong OPT_offset;               /* Options associated with the primitive */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong COMP_flags;               /* Components preset flag */
@} TC_uni_ind_t;
@tpindex TC_uni_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_UNI_IND}.

@item SRC_length

Indicates the length of the source protocol address associated with the
primitive.

@item SRC_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the source protocol address begins.

@item DEST_length

Indicates the length of the destination protocol address associated with the
primitive.

@item DEST_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the destination protocol address begins.

@item OPT_length

Indicates the length of the protocol options associated with the primitive.

@item OPT_offset

Indicates the offset from the beginning of the @samp{M_PROTO} message block
where the protocol options begin.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item COMP_flags

Indicates additional information about the components.  See ``Flags'' below.
Component flags may be provider specific.

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_NOTICE_IND
@subsubsection Transaction Notice Indication

@subsubheading TC_NOTICE_IND
@prindex TC_NOTICE_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_notice_ind @{
        ulong PRIM_type;                /* Always TC_NOTICE_IND */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong REPORT_cause;             /* Report cause */
@} TC_notice_ind_t;
@tpindex TC_notice_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_NOTICE_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item REPORT_cause


@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement



@page
@node Component Handling Primitives
@section Component Handling Primitives

@menu
* Invocation of an Operation::
* Result of a Successful Operation::
* Error Reply to an Invoked Operation::
* Termination of an Operation Invocation::
* Rejection of a Component::
@end menu

@ignore
@menu
---- detailed node listing ----

Invocation of an Operation

* TC_INVOKE_REQ::
* TC_INVOKE_IND::

Result of a Successful Operation

* TC_RESULT_REQ::
* TC_RESULT_IND::

Error Reply to an Invoked Operation

* TC_ERROR_REQ::
* TC_ERROR_IND::

Termination of an Operation Invocation

* TC_CANCEL_REQ::
* TC_CANCEL_IND::

Rejection of a Component

* TC_REJECT_REQ::
* TC_REJECT_IND::
@end menu
@end ignore

@node Invocation of an Operation
@subsection Invocation of an Operation

@menu
* TC_INVOKE_REQ::
* TC_INVOKE_IND::
@end menu

@node TC_INVOKE_REQ
@subsubsection Invoke Request

@subsubheading TC_INVOKE_REQ
@prindex TC_INVOKE_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_invoke_req @{
        ulong PRIM_type;                /* Always TC_INVOKE_REQ */
        ulong DIALOG_id;                /* Dialog identifier */
        ulong PROTOCOL_class;           /* Application protocol class */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong LINKED_id;                /* Linked Invoke Identifier */
        ulong OPERATION;                /* Requested operation to invoke */
        ulong MORE_flag;                /* Not last */
        ulong TIMEOUT;                  /* Timeout */
@} TC_invoke_req_t;
@tpindex TC_invoke_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_INVOKE_REQ}.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item PROTOCOL_class

@item INVOKE_id

@item LINKED_id

@item OPERATION

@item MORE_flag

@item TIMEOUT

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node TC_INVOKE_IND
@subsubsection Invoke Indication

@subsubheading TC_INVOKE_IND
@prindex TC_INVOKE_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_invoke_ind @{
        ulong PRIM_type;                /* Always TC_INVOKE_IND */
        ulong DIALOG_id;                /* Dialog identifier */
        ulong OP_class;                 /* Application operation class */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong LINKED_id;                /* Linked Invoke Identifier */
        ulong OPERATION;                /* Requested operation to invoke */
        ulong MORE_flag;                /* Not last */
@} TC_invoke_ind_t;
@tpindex TC_invoke_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_INVOKE_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item OP_class

@item INVOKE_id

@item LINKED_id

@item OPERATION

@item MORE_flag

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Result of a Successful Operation
@subsection Result of a Successful Operation

@menu
* TC_RESULT_REQ::
* TC_RESULT_IND::
@end menu

@node TC_RESULT_REQ
@subsubsection Return Result Request

@subsubheading TC_RESULT_REQ
@prindex TC_RESULT_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_result_req @{
        ulong PRIM_type;                /* Always TC_RESULT_REQ */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong OPERATION;                /* Requested operation result */
        ulong MORE_flag;                /* Not last */
@} TC_result_req_t;
@tpindex TC_result_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_RESULT_REQ}.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item OPERATION

@item MORE_flag

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_RESULT_IND
@subsubsection Return Result Indication

@subsubheading TC_RESULT_IND
@prindex TC_RESULT_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_result_ind @{
        ulong PRIM_type;                /* Always TC_RESULT_IND */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong OPERATION;                /* Requested operation result */
        ulong MORE_flag;                /* Not last */
@} TC_result_ind_t;
@tpindex TC_result_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_RESULT_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item OPERATION

@item MORE_flag

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Error Reply to an Invoked Operation
@subsection Error Reply to an Invoked Operation

@menu
* TC_ERROR_REQ::
* TC_ERROR_IND::
@end menu

@node TC_ERROR_REQ
@subsubsection Return Error Request

@subsubheading TC_ERROR_REQ
@prindex TC_ERROR_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_error_req @{
        ulong PRIM_type;                /* Always TC_ERROR_REQ */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong ERROR_code;               /* Error code */
        ulong MORE_flag;                /* Not last */
@} TC_error_req_t;
@tpindex TC_error_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_RESULT_REQ}.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item ERROR_code

@item MORE_flag

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_ERROR_IND
@subsubsection Return Error Indication

@subsubheading TC_ERROR_IND
@prindex TC_ERROR_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_error_ind @{
        ulong PRIM_type;                /* Always TC_ERROR_IND */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke Identifier */
        ulong ERROR_code;               /* Error code */
@} TC_error_ind_t;
@tpindex TC_error_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_ERROR_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item ERROR_code

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement

@page
@node Termination of an Operation Invocation
@subsection Termination of an Operation Invocation

@menu
* TC_CANCEL_REQ::
* TC_CANCEL_IND::
@end menu

@node TC_CANCEL_REQ
@subsubsection Cancel Request

@subsubheading TC_CANCEL_REQ
@prindex TC_CANCEL_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_cancel_req @{
        ulong PRIM_type;                /* Always TC_CANCEL_REQ */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke identifier */
@} TC_cancel_req_t;
@tpindex TC_cancel_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Specifies the primitive type.  Always @samp{TC_CANCEL_REQ}.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_CANCEL_IND
@subsubsection Cancel Indication

@subsubheading TC_CANCEL_IND
@prindex TC_CANCEL_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_cancel_ind @{
        ulong PRIM_type;                /* Always TC_CANCEL_IND */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke identifier */
@} TC_cancel_ind_t;
@tpindex TC_cancel_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Indicates the primitive type.  Always @samp{TC_CANCEL_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node Rejection of a Component
@subsection Rejection of a Component

@menu
* TC_REJECT_REQ::
* TC_REJECT_IND::
@end menu

@node TC_REJECT_REQ
@subsubsection Reject Request

@subsubheading TC_REJECT_REQ
@prindex TC_REJECT_REQ

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_reject_req @{
        ulong PRIM_type;                /* Always TC_REJECT_REQ */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke identifier */
        ulong PROBLEM_code;             /* Problem code */
@} TC_reject_req_t;
@tpindex TC_reject_req_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type
Specifies the primitive type.  Always @samp{TC_REJECT_REQ}.

@item DIALOG_id

Specifies the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item PROBLEM_code

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement


@page
@node TC_REJECT_IND
@subsubsection Reject Indication

@subsubheading TC_REJECT_IND
@prindex TC_REJECT_IND

@subsubheading Format

The format of the message is one @samp{M_PROTO}
@prindex M_PROTO
message block, followed by zero or more @samp{M_DATA}
@prindex M_DATA
message blocks if any components are specified by the TC user.  The
format of the @samp{M_PROTO} message block is as follows:

@smallexample
typedef struct TC_reject_ind @{
        ulong PRIM_type;                /* Always TC_REJECT_IND */
        ulong DIALOG_id;                /* Dialog Identifier */
        ulong INVOKE_id;                /* Invoke identifier */
        ulong ORIGINATOR;               /* Either User, Local or Remote */
        ulong PROBLEM_code;             /* Problem code */
@} TC_reject_ind_t;
@tpindex TC_reject_ind_t
@end smallexample

@subsubheading Parameters

The primitive has the following arguments:

@vtable @var

@item PRIM_type

Indicates the primitive type.  Always @samp{TC_REJECT_IND}.

@item DIALOG_id

Indicates the dialogue identifier which uniquely identifies this transaction
dialogue within the stream.  Dialogue identifiers assigned by the component
user must have the high bit set to one (1); those assigned by the component
provider have the high bit set to zero (0).

@item INVOKE_id

@item ORIGINATOR

@item PROBLEM_code

@end vtable

@subsubheading Flags

@subsubheading Valid State

@subsubheading New State

@subsubheading Rules

@subsubheading Acknowledgement



@node TCAP Header File
@chapter TCAP Header File

@node Glossary
@unnumbered Glossary

@table @emph

@item Signalling Data Link Service Data Unit

A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link connection to the
other.

@item Data transfer

The phase in connection and connectionless modes that supports the transfer of data between to signalling data link
users.

@item SDL provider

The signalling data link layer protocol that provides the services of the signalling data link interface.

@item SDL user

The user-level application or user-level or kernel-level protocol that accesses the services of the signalling data link
layer.

@item Local management

The phase in connection and connectionless modes in which a SDL user initializes a stream and attaches a PPA address to
the stream.  Primitives in this phase generate local operations only.

@item PPA

The point at which a system attaches itself to a physical communications medium.

@item PPA identifier

An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {SDL SDU}{International Telecommunication Union - Telecom Sector}

@item SDLI @tab Signalling Data Link Interface

@item SDL @tab Signalling Data Link

@item SDL SDU @tab Signalling Data Link Service Data Unit

@item ITU-T @tab International Telecommunications Union - Telecom Sector

@item PPA @tab Physical Point of Attachment

@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}

@item [1] @tab ITU-T Recommendation Q.700

@item [2] @tab ITU-T Recommendation Q.701

@item [3] @tab ITU-T Recommendation Q.702

@item [4] @tab ITU-T Recommendation Q.703

@item [5] @tab ITU-T Recommendation Q.704

@item [6] @tab Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.

@item [7] @tab ITU-T Recommendation Q.771

@end multitable

@node Indices
@unnumbered Indices

@menu
* Concept Index::
* Type Index::
* Function Index::
* Variable Index::
* File Index::
@c * Option Index::
@c * Author Index::
* Primitive Index::
* Primitive Value Index::
* Protocol State Index::
@end menu

@page
@node Concept Index
@section Concept Index

@printindex cp

@page
@node Type Index
@section Type Index

@printindex tp

@page
@node Function Index
@section Function Index

@printindex fn

@page
@node Variable Index
@section Variable Index

@printindex vr

@page
@node File Index
@section File Index

@printindex pg

@c @page
@c @node Option Index
@c @section Option Index

@c @printindex op

@c @page
@c @node Author Index
@c @section Author Index

@c @printindex au

@page
@node Primitive Index
@section Primitive Index

@printindex pr

@page
@node Primitive Value Index
@section Primitive Value Index

@printindex pv

@page
@node Protocol State Index
@section Protocol State Index

@printindex st

@bye
