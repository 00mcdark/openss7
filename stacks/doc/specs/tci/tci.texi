\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename tci.info
@settitle Transaction Component Interface
@c %**end of header
@titlepage
@title Transaction Component Interface
@subtitle Application Program Interface
@subtitle Version:
@subtitle October 9, 2001
@author @uref{mailto:bidulock@@openss7.org,Brian F. G. Bidulock}

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2004  OpenSS7 Corporation @url{http://www.openss7.com/} @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@noindent
This software and related documentation is protected by copyright and distributed under licenses restricting its use,
copying, distribution and decompilation.  No part of this software or related documentation may be reproduced in any
form by any means without the prior written authorization of the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect this information and
keep it confidential, and will not disclose the information contained in this document without the written permission of
its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason, including but not
limited to, conformity with standards promulgated by various agencies, utilization of advances in the state of the
technical arts, or the reflection of changes in the design of any techniques, or procedures embodied, described, or
referred to herein.  OpenSS7 Corporation is under no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@page

@c Define an index of primitives
@c @defindex pr
@c Define an index of primitive values
@defindex pv
@c Define an index of protocol states
@defindex st

@ifnottex
@ifinfo
@node Top
@top Transaction Component Interface
@end ifinfo
@ifnotinfo
@node Top
@top
@end ifnotinfo
@end ifnottex

@iftex
@headings off
@everyheading @thistitle @| @| @thischaptername
@c @oddheading @thistitle @| @| @thischaptername
@c @evenheading @thischaptername @| @| @thistitle
@everyfooting DRAFT Version 0.9.3 @| @emph{This document is subject to NDA} @| @thispage
@c @oddfooting DRAFT Version 0.9.3 @| @emph{This document is subject to NDA} @| @thispage
@c @evenfooting @thispage @| @emph{This document is subject to NDA} @| DRAFT Version 0.9.3
@end iftex

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and without fee or
royalty is hereby granted, provided that both the above copyright notice and this permission notice appears in all
copies and that the name of OpenSS7 Corporation not be used in advertising or publicity pertaining to distribution of
this documentation or its contents without specific, written prior permission.  OpenSS7 Corporation makes no
representation about the suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with regard to this documentation including
all implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title; that the
contents of the document are suitable for any purpose, or that the implementation of such contents will not infringe on
any third party patents, copyrights, trademarks or other rights.  In no event shall OpenSS7 corporation be liable for
any direct, indirect, special or consequential damages or any damages whatsoever resulting from loss of use, data or
profits, whether in an action of contract, negligence or other tortious action, arising out of or in connection with any
use of this document or the performance or implementation of the contents thereof.

@node Preface
@unnumbered Preface

@node Abstract
@section Abstract

This document is a Application Program Interface containing technical details concerning the implementation of the
Transaction Component Interface (TCI) for OpenSS7.  It contains recommendations on software architecture as well as
platform and system applicability of the Transaction Component Interface (TCI).

@node Purpose
@section Purpose

The purpose of this document is to provide technical documentation of the Transaction Component Interface (TCI).  This
document is intended to be included with the OpenSS7 STREAMS software package released by OpenSS7 Corporation.  It is
intended to assist software developers, maintainers and users of the Transaction Component Interface (TCI) with
understanding the software architecture and technical interfaces which are made available in the software package.

@node Intent
@section Intent

It is the intent of this document that it act as the primary source of information concerning the Transaction Component
Interface (TCI).

@node Audience
@section Audience

The audience for this document is software developers, maintainers and users and integrators of the Transaction
Component Interface (TCI).

@node Revision History
@section Revision History

Take care that you are working with a current version of this documentation: you will not be notified of updates.  To
ensure that you are working with a current version, check the @uref{http://www.openss7.org/,OpenSS7 Project} website for
a current version.

A printed (or postscript) version of this document is an UNCONTROLLED version.

@c @strong{List of Tables}
@c Table 1.  Service Primitives for Protocol
@c Classes 1, 2 and 3&#9; 4
@c Table 2.  Service Primitives for Protocol Class
@c 4&#9; 4
@c Table 3.  Ordering Relationships Between Queue
@c Model Objects&#9; 6
@c Table 4.  Transaction Initiation Transaction
@c Service Primitives&#9; 9
@c Table 5.  Transaction Continuation Transaction
@c Service Primitives&#9; 9
@c Table 6.  Transaction Termination Transaction
@c Service Primitives&#9; 9
@c Table 7.  SCCP QOS Option Values&#9; 12
@c Table 8.  Primitive Mapping&#9; 17
@c Table 9.  T-UNI Request Mapping&#9; 17
@c Table 10.  T-UNI Indication Mapping&#9; 17
@c Table 11.  T-Begin Request Mapping&#9; 17
@c Table 12.  T-Begin Indication Mapping&#9; 18
@c Table 13.  T-Continue Request Mapping&#9; 18
@c Table 14.  T-Continue Indication Mapping&#9; 18
@c Table 15.  T-Continue Request Mapping&#9; 18
@c Table 16.  T-Continue Indication Mapping&#9; 18
@c Table 17.  T-END Request Mapping&#9; 19
@c Table 18.  T-END Indication Mapping&#9; 19
@c Table 19.  T-U-ABORT Request Mapping&#9; 19
@c Table 20.  T-U-ABORT Indication Mapping&#9; 19
@c Table 21.  T-P-ABORT Indication Mapping&#9; 20
@c Table 22.  T-NOTICE Indication Mapping&#9; 20
@c @strong{List of Figures}
@c 

@node Introduction
@chapter Introduction

This document specifies a STREAMS-based kernel-level instantiation of the ITU-T Transaction Capabilities Application
Part (TCAP) Component (TC) Sub-Layer.  The Transaction Component Interface (TCI) enables the user of a component
sub-layer service to access and use any of a variety of conforming transaction providers wtihout specific knowledge of
the provider's protocol.  Ther service interface is designed to support any transaction protocol but is intented for the
ITU-T Recommendation Q.771 Transaction Capabilities Application Part (TCAP) Component (TC) Sub-Layer.  This interface
only specifies acess to transaction component sub-layer services providers, and does not address issues concerning
transaction or component sub-layer management, protocol performance, and performance analysis tools.

The specification assumes that the reader is familiar with the ISO reference model terminology, ISO/ITU-T transaction
service definitions (ROSE, ACSE, TCAP), and STREAMS.

@node Related Documentation
@section Related Documentation

@itemize
@item 1993 ITU-T X.219 Recommendation
@item 1993 ITU-T X.217 Recommendation
@item 1993 ITU-T Q.771 Recommendation
@item System V Interface Definition, Issue 2 - Volume 3
@end itemize

@node Role
@subsection Role

This document specifies an interface that supports the Transaction Component (TC) Sub-Layer services provided by the
Transaction Capabilities Application Part (TCAP) as specified in ITU-T Recommendation Q.771.  It may also be capable of
supporting the transaction component capabilities of the Remote Operations Service Execution (ROSE) for Open Systems
Interconnect for CCITT Applications as specified in ITU-T Recommendation X.219 and ISO ????.  These specifications are
targetted for use by developers and testers of protocol modules that require transaction component sub-layer
service.@footnote{An example of a protocol module that requires transaction component sub-layer services is the 3GPP TS
29.002 Mobile Application Part (MAP).}

@node Definitions, Acronyms, and Abbreviations
@section Definitions, Acronyms, and Abbreviations

@table @emph
@item Originating TC User
A TC-User that initiates a transaction.
@item Desintation TC User
A TC-User with whom an originating TC user wishes to establish a transaction association.
@item ISO
International Organization for Standardization
@item TC User
Kernel level protocol or user level application that is accessing the services of the transaction component sub-layer.
@item TC Provider
Transaction sub-layer entity/entitites that provide/s the services of the transaction component interace.
@item TCI
Transaction Component Interface
@item TIDU
Transaction Interface Data Unit
@item TSDU
Transaction Service Data Unit
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
A communication services development facility first available with UNIX System V Release 3
@end table

@node The Transaction Component Sub-Layer
@chapter The Transaction Component Sub-Layer

The Transaction Component Sub-Layer provides the means to manage the association of TC-Users into transaction components
and dialogues.  It is responsible for the routing and management of transaction component exchange within dialogues
between TC-user entities.

@node Model of the TCI
@section Model of the TCI

The TCI defines the services provided by the transaction component sub-layer to the transaction component-user at the
boundary between the Transaction Capabilities Application Part (TCAP) user and the Transaction Component (TC) Sub-Layer
in the model presented in ITU-T Recommendation Q.771.  The interface consists of a set of primitives defined as STREAMS
messages that provide access to the component sub-layer services, and are transferred between the TC user entity and the
TC provider.  These primitives are of two types: ones that originate from the TC user, and others that originate from
the TC provider, or respond to an event of the TC provider.  The primitives that originate from the TC provider are
either confirmations of a request or are indications to the TC user that the event has occured.  @emph{Figure 1} shows
the model of the TCI.

@cartouche
@center Figure 1@strong{@emph{.  Model of the TRI}}
@image{tci_fig,3.5in}
@end cartouche

The TCI allows the TC provider to be configured with any component sub-layer user (such as the Transaction Component
(TC) Sub-Layer) that also conforms to the TCI.  A transction component sub-layer user can also be a user program that
conforms to the TCI and accesses the TC provider via @strong{putmsg}(2) and @strong{getmsg}(2) system calls.

@node TCI Services
@section TCI Services

The features of the TCI are defined in terms of the services provided by the TC provider, and the individual primitives
that may flow between the TC user and the TC provider.  The services supported by the TCI are based on five distinct
classes of transaction, protocol classes 1, 2, 3 and 4.  In addition, the TRI supports services for local management.
Table 1 and Table 2 summarizes the TCI service primitives by their state and service.

@node Protocol Class 1
@subsection Protocol Class 1
@cindex Protocol Classes
@cindex Protocol Class 1

The main features of protocol class 1 transactions are:

@itemize
@end itemize

There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
data is protected against duplication or loss of data units within some specified quality of service.

@node Protocol Class 2
@subsection Protocol Class 2
@cindex Protocol Classes
@cindex Protocol Class 2

The main features of protocol class 2 transactions are:

@itemize
@end itemize

There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
data is protected against duplication or loss of data units within some specified quality of service.

@node Protocol Class 3
@subsection Protocol Class 3
@cindex Protocol Classes
@cindex Protocol Class 3

The main features of protocol class 3 transactions are:

@itemize
@end itemize

There are three phases to each transaction: Transaction Initiation, Transaction Continuation, and Transaction
Termination.  Transaction components arrive at their destination in the same order as they departed their source and the
data is protected against duplication or loss of data units within some specified quality of service.

@node Protocol Class 4
@subsection Protocol Class 4
@cindex Protocol Classes
@cindex Protocol Class 4

The main features of protocol class 4 transactions are:

@itemize
@end itemize

Protocol class 4 has no structure to the transaction and has no separate phases.  Each transaction component is
transmitted from source to destination independently, appropriate addressing information is included with each component
sequence.  As the components are transmitted independently from source to destination, there are, in general, no
guarantees of proper sequence and completeness of the data transmission.

@node Local Management
@subsection Local Management

The TCI specifications also define a set of local management functions that apply to all protocol classes.  These
services have local significance only.

@c Table 1@strong{@emph{.  Service Primitives for Protocol Classes 1, 2 and 3}}

@multitable @columnfractions .33 .33 .33
@item @b{STATE} @tab @b{SERVICE} @tab @b{PRIMITIVES}
@item Local Management @tab Information Reporting @tab @code{TR_INFO_REQ, TR_INFO_ACK, TR_ERROR_ACK}
@tpindex TR_INFO_REQ
@tpindex TR_INFO_ACK
@tpindex TR_ERROR_ACK
@item @tab Bind @tab @code{TR_BIND_REQ, TR_BIND_ACK, TR_UNBIND_REQ, TR_OK_ACK, TR_ERROR_ACK}
@tpindex TR_BIND_REQ
@tpindex TR_BIND_ACK
@tpindex TR_UNBIND_REQ
@tpindex TR_OK_ACK
@tpindex TR_ERROR_ACK
@item @tab Options Management @tab @code{TR_OPTMGMT_REQ, TR_OK_ACK, TR_ERROR_ACK}
@tpindex TR_OPTMGMT_REQ
@tpindex TR_OK_ACK
@tpindex TR_ERROR_ACK
@item Transaction Initiation @tab Transaction Initiation @tab @code{TR_BEGIN_REQ, TR_BEGIN_IND, TR_CONT_REQ, TR_CONT_IND, TR_TOKEN_REQ, TR_TOKEN_ACK, TR_OK_ACK, TR_ERROR_ACK}
@tpindex TR_BEGIN_REQ
@tpindex TR_BEGIN_IND
@tpindex TR_CONT_REQ
@tpindex TR_CONT_IND
@tpindex TR_TOKEN_REQ
@tpindex TR_TOKEN_ACK
@tpindex TR_OK_ACK
@tpindex TR_ERROR_ACK
@item Transaction Continuation @tab Component Transfer @tab @code{TR_CONT_REQ, TR_CONT_IND}
@tpindex TR_CONT_REQ
@tpindex TR_CONT_IND
@item Transaction Termination @tab Transaction End @tab @code{TR_END_REQ, TR_END_IND}
@tpindex TR_END_REQ
@tpindex TR_END_IND
@item @tab Transaction Abort @tab @code{TR_ABORT_REQ, TR_ABORT_IND}
@tpindex TR_ABORT_REQ
@tpindex TR_ABORT_IND
@end multitable

@c Table 2@strong{@emph{.  Service Primitives for Protocol Class 4}}

@multitable @columnfractions .33 .33 .33
@item @b{STATE} @tab @b{SERVICE} @tab @b{PRIMITIVES}
@item Local Management @tab Information Reporting @tab @code{TR_INFO_REQ, TR_INFO_ACK, TR_ERROR_ACK}
@tpindex TR_INFO_REQ
@tpindex TR_INFO_ACK
@tpindex TR_ERROR_ACK
@item @tab Bind @tab @code{TR_BIND_REQ, TR_BIND_ACK, TR_UNBIND_REQ, TR_OK_ACK, TR_ERROR_ACK}
@tpindex TR_BIND_REQ
@tpindex TR_BIND_ACK
@tpindex TR_UNBIND_REQ
@tpindex TR_OK_ACK
@tpindex TR_ERROR_ACK
@item @tab Options Management @tab @code{TR_OPTMGMT_REQ, TR_OK_ACK, TR_ERROR_ACK}
@tpindex TR_OPTMGMT_REQ
@tpindex TR_OK_ACK
@tpindex TR_ERROR_ACK
@item Transaction @tab Component Transfer @tab @code{TR_UNI_REQ, TR_UNI_IND}
@tpindex TR_UNI_REQ
@tpindex TR_UNI_IND
@end multitable

@node TRI Services Definition
@chapter TRI Services Definition

This section describes the services of the TRI primitives.  Time-sequence diagrams that illustrate the sequence of
primitives are used.  (Conventions for the time-sequence diagrams are defined in ITU-T X.210.) The format of the
primitives will be defined later in this document.

@node Local Management Services Definition
@section Local Management Services Definition

The services defined in this section are outside the scope of the international standards.  These services apply to all
protocol classes.  They are involved for the initialization/de-initialization of a stream connected to the TR provider.
They are also used to manage options supported by the TR provider and to report information on the supported parameter
values.

@node Transaction Information Reporting Service
@subsection Transaction Information Reporting Service

This service provides information on the options supported by the TR provider.

@itemize
@item TR_INFO_REQ:
@tpindex TR_INFO_REQ
This primitive request that the TR provider returns the values of all the supported protocol
parameters.  This request may be invoked during any phase.
@item TR_INFO_ACK:
@tpindex TR_INFO_ACK
This primitive is in response to the @code{TR_INFO_REQ} primitive and returns the values of the supported
@tpindex TR_INFO_REQ
protocol parameters to the TR user.
@end itemize

The sequence of primitives for transaction information mangement is shown in @emph{Figure 2}.

@cartouche
@center Figure 2@strong{@emph{.  Sequence of Primitives Transaction Information Reporting Service}}
@image{tci_fig1,3.5in}
@end cartouche

@node TR User Bind Service
@subsection TR User Bind Service

This service allows an originating address to be associated with a stream.  It allows the TR user to negotiate the
number of transaction indications that can remain unacknowledged for that TR user (a transaction indication is
considered unacknowledged while it is awaiting a corresponding transaction response or abort request from the TR user).
This service also defines a mechanism that allows a stream (bound to the address of the TR user) to be reserved to
handle incoming transactions only.  This stream is referred to as the listener stream.

@itemize 
@item @code{TR_BIND_REQ}:
@tpindex TR_BIND_REQ
This primitive request that the TR user be bound to a particular originating address, and negotiate the number of
allowable outstanding transaction indications for that address.
@item @code{TR_BIND_ACK}:
@tpindex TR_BIND_ACK
This primtiive is in response to the @code{TR_BIND_REQ} primitive and indicates to the user that the specified TR user
has been bound to an originating address.
@end itemize

The sequence of primives for the TR user bind service is shown in @emph{Figure 3}.

@cartouche
@center Figure 3@strong{@emph{.  Sequence of Primitives TR User Bind Service}}
@image{tci_fig2,3.5in}
@end cartouche

@node TR User Unbind Service
@subsection TR User Unbind Service

This service allows the TR user to be unbound from a network address.

@itemize
@item @code{TR_UNBIND_REQ}:
@tpindex TR_UNBIND_REQ
This primitive requests that the TR user be unbound from the network address it had previously been bound to.
@end itemize

The sequence of primives for the TR user unbind service is shown in @emph{Figure 4}.

@cartouche
@center Figure 4@strong{@emph{.  Sequence of Primitives TR User Unbind &amp; Receipt Acknowledgement Services}}
@image{tci_fig3,3.5in}
@end cartouche

@node Receipt Acknowledgement Service
@subsection Receipt Acknowledgement Service

@itemize 
@item @code{TR_OK_ACK}:
@tpindex TR_OK_ACK
This primitive indicates to the TR user that the previous TR user originated primitive was received successfully by the
TR provider.
@end itemize

An example showing the sequence of primitives for successful receive acknowledgement is depicted in
@emph{Figure 4}.

@node Options Mangement Service
@subsection Options Mangement Service

This service allows the TR user to manage the QOS parameter values associated with the TR provider.

@itemize 
@item @code{TR_OPTMGMT_REQ}:
@tpindex TR_OPTMGMT_REQ
This primitive allows the TR user to select default values for QOS parameters within the range supported by the TR
provider, and to indicate the default seelction of return option.
@end itemize

@emph{Figure 5} shows the sequence of primitives for transaction options management.

@cartouche
@center Figure 5@strong{@emph{.  Sequence of Primitives Options Management Service}}
@image{tci_fig4,3.5in}
@end cartouche

@node Error Acknowledgement Service
@subsection Error Acknowledgement Service

@itemize 
@item @code{TR_ERROR_ACK}:
@tpindex TR_ERROR_ACK
This primitive indicates to the TR user that a non-fatal error has occured in the last TR user originated request or
response primitive (listed in ?) on the stream.
@end itemize

@emph{Figure 6} shows the sequence of primitives for the error management primitive.

@cartouche
@center Figure 6@strong{@emph{.  Sequence of Primitives Error Acknowledgement Service}}
@image{tci_fig5,3.5in}
@end cartouche

@node Protocol Class 1, 2 and 3 Transaction Services Definition
@section Protocol Class 1, 2 and 3 Transaction Services Definition
@cindex Protocol Class 1
@cindex Protocol Class 2
@cindex Protocol Class 3

This section describes the required transaction service primitives that define the protocol class 1, 2 and 3, structured
transaction interface.  The queue model for protocol classes 1, 2 and 3 are discussed in more detail in ITU-T X.219 and
ITU-T Q.771.  The queue model represents the operation of a transaction association in the abstract by a pair of queues
linking two transaction users.  There is one queue for each direction of component flow.  Each queue represents a flow
control function in one direction of transfer.  The ability of a user to add objects to a queue will be determined by
the behavior of the user removing objects from that queue, and the state of the queue.  The pair of queues is considered
to be available for each potential transaction association.  Objects that are entered or removed from the queue are
either as a result of interactions at the two transaction addresses, or as the result of TR provider intiatives.

@itemize 
@item A queue is empty until a transaction object has been entered and can be returned to this state, with loss of its
contents, by the TR provider.
@item Objects may be entered into a queue as a result of the actions of the source TR user, subject to control by the TR
provider.
@item Objects may also be enetered into a queue by the TR provider.
@item Objects are removed from the queue under the control of the TR user in the same order as they were entered except:
@end itemize

@enumerate
@item If the object is of type defined to be able to advance ahead of the preceding object (however, no object is
defined to be able to advance ahead of another object of the same type), or
@item If the following object is defined to be destructive with respect to the preceding object on the queue.  If
necessary, the last object on the queue will be deleted to allow a destructive object to be entered - they will
therefore always be added to the queue.  For example, &quot;abort&quot; objects are defined to be destructive with
resepect to all other objects.
@end enumerate

@emph{Table 3} shows the ordering relationships among the queue model objects.

@c Table 3@strong{@emph{.  Ordering Relationships Between Queue Model Objects}}

@multitable @columnfractions .20 .20 .20 .20 .20
@item @strong{Object X} @tab @strong{BEGIN} @tab @strong{CONT} @tab @strong{END} @tab @strong{ABORT}
@item @strong{Object Y}
@item BEGIN @tab N/A @tab - @tab - @tab DES
@item CONT @tab N/A @tab - @tab - @tab DES
@item DISC @tab N/A @tab N/A @tab - @tab -
@end multitable

@multitable @columnfractions .09 .91
@item AA @tab Indicates that Object X is defined to be able to advance ahead of preceding Object Y
@item DES @tab Indicates that Object X is defined to be destructive with respect to the preceding Object Y.
@item - @tab Indicates that Object X is neither destructive with respect to Object Y, nor able to advance ahead of Object Y
@item N/A @tab Indicates that Object X will not occur in a position succeeding Object Y in a valid state of a queue.
@end multitable

@node Transaction Initiation Phase
@subsection Transaction Initiation Phase

A pair of queues is associated with a transaction association between two transaction users when the TR provider
receives a @code{TR_BEGIN_REQ} primitive at one of the TR users resulting in a begin object being entered into the
queue.  The queues will remain associated with the transaction until a @code{TR_END_REQ} or @code{TR_ABORT_REQ}
primitive (resulting in an end or abort object) is either entered or removed from a queue.  Similarly, in the queue from
the destination TR user, objects can be entered into the queue only after the begin object associated with the
@code{TR_BEGIN_RES} has been entered into the queue.  Alternatively, the destination TR user can enter an end or abort
object into the queue instead of the begin object to terminate the transaction.  The transaction establishment procedure
will fail if the TR provider is unable to establish a transaction association, or if the destination TR user is unable
to accept the @code{TR_BEGIN_IND} (see Transaction Termination primitive definition).
@tpindex TR_BEGIN_REQ
@tpindex TR_END_REQ
@tpindex TR_ABORT_REQ
@tpindex TR_BEGIN_RES
@tpindex TR_BEGIN_IND

@node User Primitives for Successful Transaction Establishment
@subsubsection User Primitives for Successful Transaction Establishment

@itemize 
@item @code{TR_BEGIN_REQ}:
@tpindex TR_BEGIN_REQ
This primitive requests that the TR provider form a transaction association with the specified destination TR user.
@item @code{TR_BEGIN_RES}:
@tpindex TR_BEGIN_RES
This primitive requests that the TR provider accept a previous transaction indication.
@end itemize

@node Provider Primitives for Successful Transaction Establishment
@subsubsection Provider Primitives for Successful Transaction Establishment

@itemize 
@item @code{TR_BEGIN_IND}:
@tpindex TR_BEGIN_IND
This primitive indicates to the TR user that a transaction association request has been made by a user at the specified
source address.
@item @code{TR_BEGIN_CON}:
@tpindex TR_BEGIN_CON
This primitive indicates to the TR user that a transaction initiation request has been confirmed on the specified
responding address.
@end itemize

The sequence of primitives in a successful transaction initiation is defined by the time sequence diagrams as shown in
@emph{Figure 7}.

@cartouche
@center Figure 7@strong{@emph{.  Sequence of Primitives: Successful Transaction Initiation}}
@image{tci_fig6,3.5in}
@end cartouche

The sequence of primitives for the transaction intiation response token value determination is shown in @emph{Figure 8}
(procedures for transaction initiation response token value determination are discussed in sections 4.1.3 and 4.1.4).

@cartouche
@center Figure 8@strong{@emph{.  Sequence of Primitives: Transaction Response Token Value Determination}}
@image{tci_fig7,3.5in}
@end cartouche

@node Transaction Component Transfer
@subsection Transaction Component Transfer

Flow control on the transaction association is done by management of the queue capacity, and by allowing objects of
certain types to be inserted to the queues, as shown in @emph{Table 4}.

@node Primitives for Component Transfer
@subsubsection Primitives for Component Transfer

@itemize 
@item @code{TR_CONT_REQ}:
@tpindex TR_CONT_REQ
This primitive requests that the TR provider transfer the specified componets.
@item @code{TR_CONT_IND}:
@tpindex TR_CONT_IND
This primitive indicates to the TR user that this message contains components.
@end itemize

@emph{Figure 9} shows the sequence of primitives for successful component transfer.  The sequence of primitives may
remain incomplete if a TR_END or TR_ABORT primitive occurs.

@cartouche
@center Figure 9@strong{@emph{.  Sequence of Primitives: Component Transfer}}
@image{tci_fig8,3.5in}
@end cartouche

@node Transaction Termination Phase
@subsection Transaction Termination Phase

The transaction association procedure is initialized by insertion of an end or abort object (associated with a
@code{TR_END_REQ} or @code{TR_ABORT_REQ}) into the queue.  As shown in Table?, the termination procedure is destructive
with respect to other objects in the queue, and eventually results in the emptying of queues and termination of the
transaction association.  The sequence of primitives depends on the origin of the termination action.  The sequence may
be:
@tpindex TR_END_REQ
@tpindex TR_ABORT_REQ

@enumerate
@item invoked by on TR user, with a request from that TR user leading to an indication to the other;
@item invoked by both TR users, with a request from each of the TR users;
@item invoked by the TR provider, with an indication to each of the NS users;
@item invoked independently by one TR user and the TR provider, with a request from the originating TR user and an
indication to the other.
@end enumerate

@node Primitives for Transaction Termination
@subsubsection Primitives for Transaction Termination

@itemize 
@item @code{TR_END_REQ}:
@tpindex TR_END_REQ
This primitive requests that the TR provider deny an outstanding request for a transaction association or normal
termination of an existing transaction.
@item @code{TR_ABORT_REQ}:
@tpindex TR_ABORT_REQ
This primitive requests that the TR povider deny an outstanding request for a transaction association or abonormal
termination of an existing transaction.
@item @code{TR_END_IND}:
@tpindex TR_END_IND
This primitive indicates to the TR user that either a request for transaction initiation has been denied or an existing
transaction has been terminated normally.
@item @code{TR_ABORT_IND}:
@tpindex TR_ABORT_IND
This primitive indicates to the TR user that either a request for transaction initiation has been denied or an existing
transaction has been terminated abnormally.
@end itemize

The sequence of primitives are shown in the time sequence diagrams in the figures that follow:

@cartouche
@center Figure 10@strong{@emph{.  Sequence of Primitives: TR User Invoked Termination}}
@image{tci_fig9,3.5in}
@end cartouche

@cartouche
@center Figure 11@strong{@emph{.  Sequence of Primitives: Simultaneous TR User Invoked Termination}}
@image{tci_fi10,3.5in}
@end cartouche

@cartouche
@center Figure 12@strong{@emph{.  Sequence of Primitives: TR Provider Invoked Termination}}
@image{tci_fi11,3.5in}
@end cartouche

@cartouche
@center Figure 13@strong{@emph{.  Sequence of Primitives: Simultaneous TR User and TR Provider Invoked Termination}}
@image{tci_fi12,3.5in}
@end cartouche

A TR user may reject a transaction initiation attemp by issuing a @code{TR_ABORT_REQ}.  The originator parameter in the
@code{TR_ABORT_REQ} will indicate TR user invoked termination.  The sequence of primitives is shown in @emph{Figure 14}.
@tpindex TR_ABORT_REQ

@cartouche
@center Figure 14@strong{@emph{.  Sequence of Primitives: TR User Rejection of a Transaction Initiation Attempt}}
@image{tci_fi13,3.5in}
@end cartouche

If the TR provider is unable to establish a transaction, it indicates this to the requester by an N_ABORT_IND.  The
originator of the primitive indicates a TR provider invoked release.  This is shown in @emph{Figure 15}.

@cartouche
@center Figure 15@strong{@emph{.  Sequence of Primitives: TR Provider Rejection of a Transaction Initiation Attempt}}
@image{tci_fi14,3.5in}
@end cartouche

@node Protocol Class 4 Transaction Services Definition
@section Protocol Class 4 Transaction Services Definition

The protocol class 4 service allows for the transfer of transaction components in one and both directions simultaneously
wtihout establishing a transaction dialogue.  A set of primitives are defined that carry transaction components and
control information between the TR user and the TR provider entities.  The primitives are modeled as requests initiated
by the TR user and indications initiated by the TR provider.  Indications may be initiated by the TR provider
independently from requests by the TR user.  The protocol class 4 transaction service consists of one phase.

@node Request and Response Primitives
@subsection Request and Response Primitives

@itemize 
@item @code{TR_UNI_REQ}:
@tpindex TR_UNI_REQ
This primitive requests that the TR provider send the transaction components to the specified destination.
@item @code{TR_UNI_IND}:
@tpindex TR_UNI_IND
This primitive indicates to the TR user that a component sequence has been received from the specified originating
address.
@end itemize

@emph{Figure 16} shows the sequence of primitives for the protocol class 4 mode of transfer.

@cartouche
@center Figure 16@strong{@emph{.  Sequence of Primitives: Protocol Class 4 Component Transfer}}
@image{tci_fi15,3.5in}
@end cartouche

@itemize 
@item TR_NOTICE_IND:
This primitive indicates to the TR user that the components with the specified desintation address and QOS parameters
produced an error.  This primitive is specific to protocol class 4.
@end itemize

@emph{Figure 17} shows the sequence of primitives for the protocol class 4 error management primitive.

@cartouche
@center Figure 17@strong{@emph{.  Sequence of Primitives: Protocol Class 4 Error Indication Service}}
@image{tci_fi16,3.5in}
@end cartouche

@node TRI Primitives
@chapter TRI Primitives

This section describes the format and parameters of the TRI primitives (Appendix A shows the mapping of TRI primitives
to the primitives defined in ITU-T Q.771).  In addition, it discusses the states in which the primitive is valid, the
resulting state, and the acknowledgement that the primitive expects.  (The state/event tables for these primitives are
shown in Appendix B.  The precedence tables for the TRI primitives are shown in Appendix C.) Rules for SS7 conformance
are described in Addendum 1 to this document.  The following tables provide a summary of the TR primitives and their
parameters.

@c Table 4@strong{@emph{.  Transaction Initiation Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}
@item TR Initiation @tab @code{TR_BEGIN_REQ} @tab ()
@tpindex TR_BEGIN_REQ
@item @tab @code{TR_BEGIN_IND} @tab ()
@tpindex TR_BEGIN_IND
@item @tab @code{TR_BEGIN_RES} @tab ()
@tpindex TR_BEGIN_RES
@item @tab @code{TR_BEGIN_CON} @tab ()
@tpindex TR_BEGIN_CON
@end multitable

@c Table 5@strong{@emph{.  Transaction Continuation Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}
@item TR Initiation @tab @code{TR_CONT_REQ} @tab ()
@tpindex TR_CONT_REQ
@item @tab @code{TR_CONT_IND} @tab ()
@tpindex TR_CONT_IND
@end multitable

@c Table 6@strong{@emph{.  Transaction Termination Transaction Service Primitives}}

@multitable @columnfractions .23 .27 .50
@item @strong{SERVICE} @tab @strong{PRIMITIVE} @tab @strong{PARAMETERS}
@item TR Initiation @tab @code{TR_END_REQ} @tab ()
@tpindex TR_END_REQ
@item @tab @code{TR_END_IND} @tab ()
@tpindex TR_END_IND
@item @tab @code{TR_ABORT_REQ} @tab ()
@tpindex TR_ABORT_REQ
@item @tab @code{TR_ABORT_IND} @tab ()
@tpindex TR_ABORT_IND
@end multitable

@node Management Primitives
@section Management Primitives

These primitives apply to all protocol classes.

@node Transaction Information Request
@subsection Transaction Information Request
@unnumberedsubsubsec TR_INFO_REQ
@tpindex TR_INFO_REQ

This primitive request the TR provider to return the values of all supported protocol parameters (@pxref{TR_INFO_ACK}),
and also the current state of the TR provider (as defined in Appendix B).  This primitive does not affect the state of
the TR provider and does not appear in the state tables.

@unnumberedsubsubsec Format

The format of the message is one M_PCPROTO message block and its structure is as follows:

@smallexample
typedef struct
@{
    ulong PRIM_type;  /* always TR_INFO_REQ */
@tpindex TR_INFO_REQ
@} TR_info_req_t;
@end smallexample

@unnumberedsubsubsec Parameters

@table @emph
@item PRIM_type:
Indicates the primitive type.
@end table

@unnumberedsubsubsec Valid States

This primitive is valid in any state where a local acknowledgement is not pending.

@unnumberedsubsubsec New State

The new state remains unchanged.

@unnumberedsubsubsec Acknowledgements

This primitive requires the TR provider to generate one of the following acknowledgements upon receipt of the primitive:

@itemize 
@item @emph{Successful:} Acknowledgement of the primitive via the @code{TR_INFO_ACK} primitive.
@tpindex TR_INFO_ACK
@item @emph{Non-fatal Errors}: There are no errors associated with the issuance of this primitive.
@end itemize

@node Transaction Information Acknowledgement
@subsection Transaction Information Acknowledgement

@node TR_INFO_ACK
@unnumberedsubsubsec TR_INFO_ACK
@tpindex TR_INFO_ACK

This primitive indicates to the TR user any relevant protocol-dependent parameters.@footnote{}  It should be initiated
in response to the @code{TR_INFO_REQ} primitive described above.
@tpindex TR_INFO_REQ

@unnumberedsubsubsec Format

@smallexample
typedef struct @{
    ulong PRIM_type;      /* always TR_INFO_ACK*/
    ulong TSDU_size;      /* maximum TSDU size */
    ulong ETSDU_size;     /* maximum ETSDU size*/
    ulong CDATA_size;     /* connect data size  */
    ulong DDATA_size;     /* disconnect data size */
    ulong ADDR_size;      /* address size */
    ulong ADDR_length;    /* address length */
    ulong ADDR_offset;    /* address offset */
    ulong QOS_length;     /* default QOS values length */
    ulong QOS_offset;     /* default QOS values offset */
    ulong QOS_range_length;  /* QOS range length */
    ulong QOS_range_offset;  /* QOS range offset */
    ulong OPTIONS_flags;  /* bit masking for options */
    ulong TIDU_size;      /* transaction interface data size */
    long  SERV_type;      /* service type */
    ulong CURRENT_state;   /* current state */
    ulong PROVIDER_type;   /* type of provider */
    ulong NODU_size;       /* optimal TSDU size */
    ulong PROTOID_length;  /* length of bound protocol ids */
    ulong PROTOID_offset;  /* offset of bound protocol ids */
    ulong TRI_version;     /* supported TRI version number */
@} TR_info_ack_t;
@end smallexample

@unnumberedsubsubsec Parameters

@table @emph
@item PRIM_type
Indicates the primitive type.
@item TSDU_size
Specifies the maximum size (in octets) of Transaction Service User Data supported by the TR provider.
@item ETSDU_size
Specifies the maximum size (in octets) of Expedited Transaction Service User Data supported by the TR provider.
@item CDATA_size
Specifies the maximum number of octets of data that may be associated with a transaction initiation primitive.
@item DDATA_size
Specifies the maximum number of octets of data that may be associated with a transaction termination primitive.
@item ADDR_size
Specifies the maximum size (in decimal digits) of a network address.
@item ADDR_length, ADDR_offset
Specifies the length in bytes and offset from the beginning of the M_PCPROTO message block of the network address bound
on the stream on which the @code{TR_INFO_REQ} was issued (a network address is bound
@tpindex TR_INFO_REQ
to a stream via a @code{TR_BIND_REQ}).
@tpindex TR_BIND_REQ
@item QOS_length, QOS_offset

@item QOS_range_length, QOS_range_offset

@item OPTIONS_flags

@item TIDU_size

@item SERV_type

@item CURRENT_state

@item PROVIDER_type

@item NODU_size

@item PROTOID_length, PROTOID_offset

@item TRI_version
@end table

@node TCAP Transport Provider TPI Addendum
@chapter TCAP Transport Provider TPI Addendum

The Transaction Interface (TRI) is written as an addendum to the XTI/TPI (X/Open Tranport Interface/Transport Provider
Interface).  No new primitive or semantics have been added to the interface, merely a definition of the
protocol-specific and provider-specific aspects of TCAP Transport.  TCAP Transport is very close to the XTI mOSI
transport specification.  The major difference is that SCCP Network Layer Addresses and options are used instead of ISO
Presentation Layer addresses and options.  Aside from that, TCAP Transport resembles X.219 OSI Transport.

@node Addressing
@section Addressing

TCAP uses SCCP formatted addresses instead of ISO Presentation Layer addresses.

@node Address Format
@subsection Address Format

The address format for a TCAP address is as follows:

@node Options
@section Options

@node TCAP Level Options
@subsection TCAP Level Options

Application Context Name

User Information

@node SCCP Level Options
@subsection SCCP Level Options

@unnumberedsubsubsec SCCP Quality of Service Options

The TCAP interface uses protocol level T_SS7_SCCP for options at the SCCP level.  SCCP QOS parameters are communicated
to the underlying transport using the option name T_SCCP_QOS.  There are three QOS structures which can be used in this
fashion are listed in @emph{Table 7} as follows:

@c Table 7@strong{@emph{.  SCCP QOS Option Values}}

@multitable @columnfractions .25 .34 .15 .26
@item @strong{Option Name} @tab @strong{Type of Option Value} @tab @strong{Legal Option Value} @tab @strong{Meaning}
@item T_SCCP_QOS @tab N_qos_sel_sccp_t @tab see text @tab For use with T_UNITDATA_REQ, T_OPTDATA_REQ
@item T_SCCP_QOS @tab N_qos_opt_sel_sccp_t @tab see text @tab For use with T_CONN_REQ, T_CONN_RES
@item T_SCCP_QOS @tab N_qos_range_sccp_t @tab see text @tab For use with T_INFO_ACK
@end multitable

Quality of service structure @code{qos_sel_sccp_t} has the following fields:

@table @emph

@item n_qos_type
This is the NPI Quality of Service structure type and is always set to @code{N_QOS_SEL_SCCP},
@code{N_QOS_OPT_SEL_SCCP}, or @code{N_QOS_RANGE_SCCP}.

@item protocol_class
This is the protocol class.  The @emph{protocol_class} field can be one of the following: @code{N_QOS_PCLASS_0} (SCCP
connectionless protocol class 0), @code{N_QOS_PCLASS_1} (for SCCP connectionless protocol class 1),
@code{N_QOS_PCLASS_2} (for SCCP connection-oriented protocol class 2), @code{N_QOS_PCLASS_3} (for SCCP
connection-oriented protocol class 3) or @code{QOS_UNKNOWN}.  @code{N_QOS_PCLASS_2} and @code{N_QOS_PCLASS_3} are not
applicable to TCAP.
@cindex Protocol Classes
@cindex Protocol Class 1
@cindex Protocol Class 2
@cindex Protocol Class 3
@cindex Protocol Class 4

@item option_flags
If the @emph{options_flags} field has bit @code{N_QOS_OPT_RETERR} set then the SCCP will return the PDU on error.

@item importance
This is the importance of the message for consideration for SCCP flow control.  This value is not normally set by the
user.  It can be any integer number from 0 to 7, or @code{QOS_UNKNOWN}.

@item sequence_selection
This affects the SLS (Signalling Link Selection) value that will be used for protocol classes @code{N_QOS_PCLASS_0} and
@code{N_QOS_PCLASS_1}.  This value is not normally set by the user and can be an integer value or @code{QOS_UNKNOWN}.

@item message_priority
This affects the MP (Message Priority) value that will be used for specific messages in all protocol classes.  This
value is not normally set by the use and can be any integer value from 0 to 3 or the value @code{QOS_UNKNOWN}.

@end table

@node T_INFO_ACK Values
@section T_INFO_ACK Values

The following discusses the values which may be returned in the T_INFO_ACK primitive in response to
a T_INFO_REQ primitive.

@table @emph

@item TSDU_size
TCAP has effectively no limit to the amount of data which can be sent in a particular invoke or result component.  TCAP
includes a ``more'' bit concept in that an Invoke Not Last and Return Result Not Last can be used to indicated that the
next Invoke or Return Result are part of the same component sequence.  ITU-T does not include the Not Last concept for
Invokes.  As a result, for ANSI and other TCAPs supporting the Invoke Not Last components, TSDU_size will be set to
T_INFINITE (-1).  For other TCAPs not supporting Invoke Not Last, the TSDU_size will be set to the maximum size of a
single component sequence derived from the maximum size of the underlying SCCP transport.  This may still be T_INFINITE
(-1) as the underlying SCCP connectionless transport may support unlimited size NSDUs.

@item ETSDU_size
TCAP has no expedited data service and the value of ETSDU_size is set to T_UNKNOWN (-2).

@item CDATA_size
TCAP can send connection data (components) with the initial Begin(Query) or first Continue(Conversation) package and can
also send Application Context and User Information in either package.  These messages correspond to TR-BEGIN and the
first TR-CONTINUE after receiving a TR-BEGIN and these correspond to T_CONN_REQ and T_CONN_RES.  Because the underlying
SCCP connectionless transport may support unlimited size NSDUs, this value may be set to T_INFINITE (-1) or may be set
to the maximum amount of connection data (including Application Context, User Information and Components) which can be
sent or received in either package.  This informs the user as to wht size to make data buffers associated with
connection indications and confirmations (T_CONN_IND, T_CONN_CON) and how much data can be sent with connection requests
and responses (T_CONN_REQ, T_CONN_RES).

@item DDATA_size
TCAP can send disconnect data (components) with the final End(Response) package.  These messages correspond to the
TR-END primitive and the T_DISCON_REQ or T_DISCON_IND.  Again, becuase the underlying SCCP connectionless transport may
support unlimited size NSDUs, this value may be set to T_INFINITE(-1) or may be set to the maximum amount of
disconnection data which can be sent or received in the End(Response) package.  This informs the user as to what size to
make data buffers associated with disconnection indications (T_DISCON_IND) and how much data can be sent with
disconnection requests (T_DISCON_REQ).

@item ADDR_size
This is the maximum TCAP address size which can be communicated across the interface.  This address size is the maximum
size of the defined SCCP address structure (@code{sizeof(sccp_addr_t)}) which also will include and address digits up to
a maximum of @code{SCCP_MAX_ADDR_LENGTH} octets of digits.  This informs the user as to what size it should reserve for
control buffers so as to receive control information without buffer truncation.

@item OPT_size
This is the maximum size of the options field used in any TPI message and is the sum of the maximum option sizes of one
of each of the options that can occur together.  This informs the user as to what size is should reserve for control
buffers to ensure that received control messages which include options can be contained within the buffer without
truncation.

@item TIDU_size
Even though a TCAP provider can support unlimited TSDU size, it cannot normally support unlimited TIDU size.  This is
because the underlying SCCP NSDU may be limited in size.  The TCAP provider is not responsible for segmenting component
sequences offered to the provider from the user in as M_DATA.  This is the maximum size of the TIDU which corresponds to
the maximum size of the underlying NSDU.  Because the underlying SCCP provider may have no limit on the NSDU size (i.e.,
it supports segmentation of connectionless NSDUs) this may be more in the manner of a optimal recommendation to the user
rather than an absolute maximum.  Because of this, a given TCAP provider might not reject TIDUs which are larger than
this value.

@item SERV_type
There are two service type supported by a TCAP provider: T_COTS and T_CLTS.  T_CLTS (TCAP class 4) is a connectionless
unidirection unstructured transaction service with no error notification.  T_COTS (TCAP classes 1, 2 and 3) are
connection-oriented structured transaction services with or without error notification.  The value reflected here is
dependent on the setting of option T_TCAP_PCLASS.

@item CURRENT_state
Provides the current state of the Transport Provider.  TCAP providers use the same states as other TPI providers.

@item PROVIDER_flag
TPI provider flags which are set are SENDZERO (because TCAP supports the sending of packages without components) and
XPG4_1 (to indicate that the transport provider supports the latest TPI semantics).

@end table

@node Supported Services
@section Supported Services

@node Common Transport Services
@subsection Common Transport Services

@node Information Service
@subsubsection Information Service

@unnumberedsubsubsec T_INFO_REQ

@unnumberedsubsubsec T_INFO_ACK

@unnumberedsubsubsec T_ADDR_REQ

@unnumberedsubsubsec T_ADDR_ACK

@node Bind Service
@subsubsection Bind Service

@unnumberedsubsubsec T_BIND_REQ

@unnumberedsubsubsec T_BIND_ACK

@node Options Management Service
@subsubsection Options Management Service

@unnumberedsubsubsec T_OPTMGMT_REQ

@unnumberedsubsubsec T_OPTMGMT_ACK

@node Connection-Mode Services
@subsection Connection-Mode Services

@node Connection Establishment
@subsubsection Connection Establishment

@unnumberedsubsubsec T_CONN_REQ

@unnumberedsubsubsec T_CONN_IND

@unnumberedsubsubsec T_CONN_RES

@unnumberedsubsubsec T_CONN_CON

@node Data Transfer
@subsubsection Data Transfer

@unnumberedsubsubsec T_DATA_REQ

@unnumberedsubsubsec T_DATA_IND

@unnumberedsubsubsec T_EXDATA_REQ

@unnumberedsubsubsec T_EXDATA_IND

@unnumberedsubsubsec T_OPTDATA_REQ

@unnumberedsubsubsec T_OPTDATA_IND

@node Connection Release
@subsubsection Connection Release

@unnumberedsubsubsec T_DISCON_REQ

@unnumberedsubsubsec T_DISCON_IND

@unnumberedsubsubsec T_ORDREL_REQ

@unnumberedsubsubsec T_ORDREL_IND

@node Connection-Less Mode Services
@subsubsection Connection-Less Mode Services

@unnumberedsubsubsec T_UNITDATA_REQ

@unnumberedsubsubsec T_UNITDATA_IND

@unnumberedsubsubsec T_UDERROR_IND

@node Component Services
@subsubsection Component Services

@unnumberedsubsubsec T_INVOKE_REQ

@unnumberedsubsubsec T_INVOKE_IND

@unnumberedsubsubsec T_RESULT_REQ

@unnumberedsubsubsec T_RESULT_IND

@unnumberedsubsubsec T_ERROR_REQ

@unnumberedsubsubsec T_ERROR_IND

@unnumberedsubsubsec T_CANCEL_REQ

@unnumberedsubsubsec T_CANCEL_IND

@unnumberedsubsubsec T_REJECT_REQ

@unnumberedsubsubsec T_REJECT_IND

@node Mapping of TCAP to TPI
@chapter Mapping of TCAP to TPI

@node State Mapping
@section State Mapping

@cartouche
@center Figure 18@strong{@emph{.  TR Sub-Layer State Machine}}
@image{tci_fi17,4in}
@end cartouche

@cartouche
@center Figure 19@strong{@emph{.  TR Sub-Layer State Machine}}
@image{tci_fi18,4in}
@end cartouche

@node Primitive Mapping
@section Primitive Mapping

@c Table 8@strong{@emph{.  Primitive Mapping}}

@multitable @columnfractions .34 .35 .31
@item @strong{TR Sub-Layer Primitive} @tab @strong{TC Sub-Layer Primitive} @tab @strong{TPI Primitive}
@item TR-UNI Request @tab TC-UNI Request @tab T_UNITDATA_REQ
@item TR-UNI Indication @tab TC-UNI Indication @tab T_UNITDATA_IND
@item TR-BEGIN Request @tab TC-BEGIN Request @tab T_CONN_REQ
@item TR-BEGIN Indication @tab TC-BEGIN Indication @tab T_CONN_IND
@item TR-CONTINUE Request @tab TC-CONTINUE Request @tab T_CONN_RES
@item TR-CONTINUE Indication @tab TC-CONTINUE Indication @tab T_CONN_CON
@item TR-CONTINUE Request @tab TC-CONTINUE Request @tab T_OPTDATA_REQ
@item TR-CONTINUE Indication @tab TC-CONTINUE Indication @tab T_OPTDATA_IND
@item TR-END Request @tab TC-END Request @tab T_ORDREL_REQ
@item TR-END Indication @tab TC-END Indication @tab T_ORDREL_IND
@item TR-U-ABORT Request @tab TC-U-ABORT Request @tab T_DISCON_REQ
@item TR-U-ABORT Indication @tab TC-U-ABORT Indication @tab T_DISCON_IND
@item TR-P-ABORT Indication @tab @tab T_DISCON_IND
@item TR-NOTICE Indication @tab TC-NOTICE Indication @tab T_UDERROR_IND 
@end multitable

@node T-UNI
@subsection T-UNI

@node Request
@subsubsection Request

The Q.771 TR-UNI and TC-UNI Requests map onto the TPI T_UNITDATA_REQ primitive as shown in Table 9.

@c Table 9@strong{@emph{.  T-UNI Request Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-UNI Request @tab T_UNITDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Originating Address @tab implicit (see note 1)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-UNI Request @tab T_UNITDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Dialogue ID @tab implicit (see note 2)
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks 
@end multitable

Notes:
@enumerate
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the address which is bound to
the stream in a previous T_BIND_REQ operation and which is returned as the LOCADDR in a T_ADDR_ACK.
@item The @emph{Dialogue ID} is implicit to the stream.  Each stream supports only one dialog at a time.
@end enumerate

@node Indication
@subsubsection Indication

The Q.771 TR-UNI and TC-UNI Indications map onto the T_UNITDATA_IND primitive as shown in Table 10.

@c Table 10@strong{@emph{.  T-UNI Indication Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-UNI Indication @tab T_UNITDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see note 1)
@item Originating Address @tab SRC_offset, SRC_length
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-UNI Indication @tab T_UNITDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see npte 1)
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab SRC_offset, SRC_length
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable

Notes:
@enumerate
@item The @emph{Destination Address} parameter is implicit to the stream and is taken to be the address which is bound
to the stream.
@end enumerate

@node TR-BEGIN
@subsection TR-BEGIN

@node Request
@subsubsection Request

The Q.771 TR-BEGIN and TC-BEGIN Requests map onto the T_CONN_REQ primitive as shown in Table 11.

@c Table 11@strong{@emph{.  T-Begin Request Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Originating Address @tab implicit (see note 1)
@item Transaction ID @tab implicit (see note 2)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab DEST_offset, DEST_length
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Dialogue ID @tab implicit (see note 2)
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable

Notes:
@enumerate
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the address which is bound to
the stream in a previous T_BIND_REQ operation and which is returned as the LOCADDR in a T_ADDR_ACK.
@item The @emph{Transaction ID} and @emph{Dialogue ID} are implicit to the stream.  Each stream only supports one dialog
at a time.
@end enumerate

@node Indication
@subsubsection Indication

The Q.771 TR-BEGIN and TC-BEGIN Indications map onto the T_CONN_IND primitive as shown in Table 12.

@c Table 12@strong{@emph{.  T-Begin Indication Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-BEGIN Request @tab T_CONN_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see note 1)
@item Originating Address @tab SRC_offset, SRC_length
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-BEGIN Indication @tab T_CONN_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Destination Address @tab implicit (see note 1)
@item Application Context Name @tab OPT_offset, OPT_length
@item Originating Address @tab SRC_offset, SRC_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable
Notes:
@enumerate
@item The @emph{Destination Address} parameter is implicit to the stream and is the address to which the stream was
bound with the previous T_BIND_REQ operation and which is returned as as the LOCADDR in a T_ADDR_ACK.
@end enumerate

@node T-CONTINUE
@subsection T-CONTINUE

@node Confirming Request
@subsubsection Confirming Request

The Q.771 TR-CONTINUE and TC-CONTINUE Requests confirming a transaction map onto the T_CONN_RES primitive as shown in
Table 13.

@c Table 13@strong{@emph{.  T-Continue Request Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Request @tab T_CONN_RES
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Request @tab T_CONN_RES
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab implicit (see note 1)
@item Application Context Name @tab OPT_offset, OPT_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable

Notes:
@enumerate
@item The @emph{Originating Address} parameter is implicit to the stream and is taken from the address which is bound to
the stream in a previous T_BIND_REQ operation and which is returned as the LOCADDR in a T_ADDR_ACK.
@end enumerate

@node Confirming Indication
@subsubsection Confirming Indication

The Q.771 TR-CONTINUE and TC-CONTINUE Indications confirming a transaction map onto the T_CONN_CON primitive as shown in
Table 14.

@c Table 14@strong{@emph{.  T-Continue Indication Mapping}}
@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Indication @tab T_CONN_CON
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab RES_length, RES_offset
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Indication @tab T_CONN_CON
@item Quality of Service @tab OPT_offset, OPT_length
@item Originating Address @tab RES_length, RES_offset
@item Application Context Name @tab OPT_offset, OPT_length
@item Dialogue ID @tab SEQ_number
@item User Information @tab OPT_offset, OPT_length
@item Components Present @tab M_DATA blocks
@end multitable
Notes:
@enumerate
@item The @emph{Responding Address} parameter is delivered in the primitive but may be ignored by
the TR-User.
@end enumerate

@node Subsequent Request
@subsubsection Subsequent Request

The Q.771 TR-CONTINUE and TC-CONTINUE Requests continuing a transaction map onto the T_OPTDATA_REQ primitive as shown in
Table 15.

@c Table 15@strong{@emph{.  T-Continue Request Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Request @tab T_OPTDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Transaction ID @tab implicit (see note 1)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Request @tab T_OPTDATA_REQ
@item Quality of Service @tab OPT_offset, OPT_length
@item Dialogue ID @tab implicit (see note 1)
@item Components Present @tab M_DATA blocks
@item User Information @tab OPT_offset, OPT_length
@end multitable
Notes:
@enumerate
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.  Each stream
supports only one dialog at a time.
@end enumerate

@node Subsequent Indication
@subsubsection Subsequent Indication

The Q.771 TR-CONTINUE and TC-CONTINUE Indications continuing a transaction map onto the T_OPTDATA_IND primitive as shown
in Table 16.

@c Table 16@strong{@emph{.  T-Continue Indication Mapping}}

@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-CONTINUE Indication @tab T_OPTDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Transaction ID @tab implicit (see note 1)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-CONTINUE Indication @tab T_OPTDATA_IND
@item Quality of Service @tab OPT_offset, OPT_length
@item Dialogue ID @tab implicit (see note 1)
@item Components Present @tab M_DATA blocks
@item User Information @tab OPT_offset, OPT_length
@end multitable
Notes:
@enumerate
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.  Each stream
supports only one dialog at a time.
@end enumerate

@node T-END
@subsection T-END

@node Request
@subsubsection Request

The Q.771 TR-END and TC-END Requests map onto the T_ORDREL_REQ primitive as shown in Table 17.

@c Table 17@strong{@emph{.  T-END Request Mapping}}
@multitable @columnfractions .50 .50
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-END Request @tab T_ORDREL_REQ
@item Quality of Service @tab implicit (see notes)
@item Transaction ID @tab implicit (see notes)
@item Termination @tab implied (see notes)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-END Request @tab T_ORDREL_REQ
@item Quality of Service @tab implicit (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes)
@item Termination @tab implied (see notes)
@end multitable
Notes:
@enumerate
@item Pre-arranged or basic terminations are distinguished by protocol class and options parameters.
@item User data in M_DATA blocks can be associated wtih the primitive.
@end enumerate

@node Indication
@subsubsection Indication


The Q.771 TR-END and TC-END Indications map onto the T_ORDREL_IND primitive as shown in Table 18.

@c Table 18@strong{@emph{.  T-END Indication Mapping}}
@multitable @columnfractions .5 .5
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-END Indication @tab T_ORDREL_IND
@item Quality of Service @tab implicit (see notes)
@item Transaction ID @tab implicit (see notes)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-END Indication @tab T_ORDREL_IND
@item Quality of Service @tab implicit (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes)
@end multitable
Notes:
@enumerate
@end enumerate

@node T-U-ABORT
@subsection T-U-ABORT

@node Request
@subsubsection Request

The Q.771 TR-U-ABORT and TC-U-ABORT Requests map onto the T_DISCON_REQ primitive as shown in Table 19.

@c Table 19@strong{@emph{.  T-U-ABORT Request Mapping}}
@multitable @columnfractions .45 .45 .1
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive} @tab @strong{Notes}
@item TR-U-ABORT Request @tab T_DISCON_REQ
@item Quality of Service @tab implicit (see notes) @tab (1)
@item Transaction ID @tab SEQ_number @tab (2)
@item User Data @tab M_DATA blocks

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TC-U-ABORT Request @tab T_DISCON_REQ
@item Quality of Service @tab implicit (see notes) @tab (1)
@item Dialogue ID @tab SEQ_number @tab (2)
@item Abort reason @tab (implied by presence or absence of Application Context Name) @tab (3)
@item Application Context Name @tab implicit (see notes) @tab (3)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes) @tab (3)
@end multitable
Notes:
@enumerate
@item The @emph{Quality of Service} parameter is implicit to the stream.  Each Protocol Class 1, 2 or 3 stream
(structured dialog) either has a sequence control value associated with the stream or a new sequence control is selected
for each package in a transaction.  Thus, this parameter does not need to be specified by the T-User.  If the T-User
wants to change the return option or sequence control associated with a T-U-ABORT, this can be performed with the
T_OPTMGMT_REQ primitive before the T_DISCON_REQ primitive is issued.
@item The @emph{Transaction ID} and @emph{Dialogue ID} are implicit to the stream when the transaction association is
fully formed.  When the transaction association has not been confirmed and an T-U-ABORT is issued, the SEQ_number
parameter identifies the transaction or dialogue in question.
@end enumerate

@node Indication
@subsubsection Indication

The TR-U-ABORT Indication primitive of Q.771 maps onto the T_DISCON_IND primitive.

@c Table 20@strong{@emph{.  T-U-ABORT Indication Mapping}}
@multitable @columnfractions .5 .5
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-U-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab (not provided)
@item Transaction ID @tab SEQ_number
@item User Data @tab M_DATA blocks
@item TC-U-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab implicit (see notes)
@item Dialogue ID @tab implicit (see notes)
@item Abort reason @tab DISCON_reason
@item Application Context Name @tab implicit (see notes)
@item Components Present @tab M_DATA blocks
@item User Information @tab implicit (see notes)
@end multitable
Notes:
@enumerate
@item The T_DISCON_IND reason distinguishes between TR-U-ABORT and TR-P-ABORT.
@item QOS parameters are not provided to the TR-User even when available at the transport provider.
@item User Data may be provided with the disconnect in M_DATA message blocks associated with the M_PROTO message block
for the T_DISCON_IND.
@end enumerate

@node T-P-ABORT
@subsection T-P-ABORT

@node Indication
@subsubsection Indication

The TR-P-ABORT Indication primitive of Q.771 maps onto the T_DISCON_IND primitive.

@c Table 21@strong{@emph{.  T-P-ABORT Indication Mapping}}
@multitable @columnfractions .5 .5
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-P-ABORT Indication @tab T_DISCON_IND
@item Quality of Service @tab (not provided)
@item Transaction ID @tab SEQ_number
@item P-Abort @tab DISCON_reason
@end multitable
Notes:
@enumerate
@item The T_DISCON_IND reason distinguishes between TR-U-ABORT and TR-P-ABORT.
@item QOS parameters are not provided to the user on abort even when available at the transport provider.
@end enumerate

@node T-NOTICE
@subsection T-NOTICE

@node Indication
@subsubsection Indication

The TR-NOTICE Indication primitive of Q.771 maps onto the T_UDERROR_IND and T_DISCON_IND primitives.

@c Table 22@strong{@emph{.  T-NOTICE Indication Mapping}}
@multitable @columnfractions .5 .5
@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-NOTICE Indication @tab T_UDERROR_IND
@item Transaction ID @tab implicit (see note 1)
@item Report Cause @tab ERROR_type

@item @strong{Q.771 Primitive} @tab @strong{TPI Primitive}
@item TR-NOTICE Indication @tab T_UDERROR_IND
@item Transaction ID @tab implicit (see note1)
@item Report Cause @tab ERROR_type
@end multitable
Notes:
@enumerate
@item The @emph{Transaction} @emph{ID} and @emph{Dialogue ID} parameters are implicit to the stream.  Each stream
supports only one dialog at a time.
@end enumerate

@node Parameter Mapping
@section Parameter Mapping

@node TR Sub-Layer Parameters
@subsection TR Sub-Layer Parameters

@node Quality of Service
@subsubsection Quality of Service

The @emph{Quality of Service} parameters map to the @code{N_QOS_SEL_SCCP} quality of service parameter set which can be
placed in the @emph{OPT_length} and @emph{OPT_offset} fields of the appropriate messages.  The @code{N_qos_sel_sccp_t}
structure has the Return Option and Sequence Control parameters refererenced in the Q.771 recommendations.

@node Destination Address
@subsubsection Destination Address

The @emph{Destination Address} is an SCCP Called Party Address in the format specified for the
@uref{http://www.openss7.org/spi_idx.html,SCCP Network Provider Interface}.  This parameter is contained in the
@emph{DEST_length} and @emph{DEST_offset} fields of the appropriate TPI primitives.  It is also contained in the
@emph{REMADDR_length} and @emph{REMADDR_offset} fields of the T_ADDR_ACK management primitive.

@node Originating Address
@subsubsection Originating Address

The @emph{Originating Address} is an SCCP Calling Party Address in the format specified for the
@uref{http://www.openss7.org/spi_idx.html,SCCP Network Provider Interface}.  This parameter is contained in the
@emph{SRC_length} and @emph{SRC_offset} or @emph{RES_length} and @emph{RES_offset} fields of the appropriate TPI
primitives.  It is also contained in the @emph{LOCADDR_length} and @emph{LOCADDR_offset} fields in the T_ADDR_ACK
management primitive.

@node P-Abort
@subsubsection P-Abort

@node Transaction ID
@subsubsection Transaction ID

The @emph{Transaction ID} parameter is normally implicit to the stream for a fully associated transaction.  Each stream
supports only one fully associated transactions.  For unaccepted or unconfirmed transactions, the @emph{SEQ_number}
field of the appropriate TPI primitive is use to identify the transaction.  The @emph{Transaction ID} is, therefore,
implicit to the connection or connection indication.

@node Termination
@subsubsection Termination

Whether the termination is pre-arranged or basic is a characteristic of the stream.

@node User Data
@subsubsection User Data

@node Report Cause
@subsubsection Report Cause


@node TCAP Header File
@chapter TCAP Header File

@node Glossary
@unnumbered Glossary

@table @emph
@item Signalling Data Link Service Data Unit
A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link connection to the
other.
@item Data transfer
The phase in connection and connectionless modes that supports the transfer of data between to signalling data link
users.
@item SDL provider
The signalling data link layer protocol that provides the services of the signalling data link interface.
@item SDL user
The user-level application or user-level or kernel-level protocol that accesses the services of the signalling data link
layer.
@item Local management
The phase in connection and connectionless modes in which a SDL user initializes a stream and attaches a PPA address to
the stream.  Primitives in this phase generate local operations only.
@item PPA
The point at which a system attaches itself to a physical communications medium.
@item PPA identifier
An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {SDL SDU}{International Telecommunication Union - Telecom Sector}
@item SDLI @tab Signalling Data Link Interface
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item PPA @tab Physical Point of Attachment
@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}
@item [1] @tab ITU-T Recommendation Q.700
@item [2] @tab ITU-T Recommendation Q.701
@item [3] @tab ITU-T Recommendation Q.702
@item [4] @tab ITU-T Recommendation Q.703
@item [5] @tab ITU-T Recommendation Q.704
@item [6] @tab Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item [7] @tab ITU-T Recommendation Q.771
@end multitable

@node Indices
@unnumbered Indices

@menu
* Concept Index::
* Type Index::
* Function Index::
* Variable Index::
* File Index::
@c * Option Index::
@c * Author Index::
* Primitive Index::
* Primitive Value Index::
* Protocol State Index::
@end menu

@node Concept Index
@section Concept Index
@printindex cp

@node Type Index
@section Type Index
@printindex tp

@node Function Index
@section Function Index
@printindex fn

@node Variable Index
@section Variable Index
@printindex vr

@node File Index
@section File Index
@printindex pg

@c @node Option Index
@c @section Option Index
@c @printindex op

@c @node Author Index
@c @section Author Index
@c @printindex au

@c @node Primitive Index
@c @section Primitive Index
@c @printindex pr

@node Primitive Value Index
@section Primitive Value Index
@printindex pv

@node Protocol State Index
@section Protocol State Index
@printindex st

@bye
