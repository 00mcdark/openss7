% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
% =========================================================================
%
% @(#) $Id: sli.texi,v 0.9.2.2 2007/07/09 09:04:51 brian Exp $
%
% =========================================================================
%
% Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2007/07/09 09:04:51 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
@c %**start of header
@setfilename sli.info
@include texi/args.texi
@set MANUAL_TITLE Signalling Link Interface (SLI)
@set MANUAL_TYPE Application Programming Interface
@settitle @value{MANUAL_TITLE}
@c %**end of header

@dircategory OpenSS7
@direntry
* SLI: (sli).			Signalling Link Interface
@end direntry

@include texi/args.texi
@set MANUAL_TITLE Signalling Link Interface (SLI)
@set MANUAL_TYPE Application Programming Interface

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file documents the OpenSS7 @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}
published by @uref{http://www.openss7.com/,OpenSS7 Corporation}.

Copyright @copyright{} 2001-2007  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@ignore
Permission is granted to process this file through Tex and print the results, provided the printed
document carries copying permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
OpenSS7 Corporation disclaims all warranties with regard to this documentation including all implied
warranties of merchantability, fitness for a particular purpose, non-infringement, or title; that
the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.

OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Signalling Link Interface (SLI)
@set MANUAL_TYPE Application Programming Interface

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2007  OpenSS7 Corporation
@subtitle All Rights Reserved.
@sp 4
@quotation
@subheading Abstract
This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the
signalling link interface to these components as well as providing a basis for signalling link
control for other signalling link protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2007  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

@noindent
All Rights Reserved.

@subsubheading Published by:
@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@ignore
@noindent
This software and related documentation is protected by copyright and distributed under licenses
restricting its use, copying, distribution and decompilation.  No part of this software or related
documentation may be reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect
this information and keep it confidential, and will not disclose the information contained in this
document without the written permission of its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ignore

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@subsubheading Notice:

@noindent
@b{OpenSS7 Corporation disclaims all warranties with regard to this documentation including all
implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title;
that the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.}

@sp 1

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of protocol states
@defcodeindex st
@c Define an index of manual pages
@defcodeindex pe
@c Define an index of protocol errors
@defindex mp

@c @syncodeindex pr cp
@c @syncodeindex pv cp
@c @syncodeindex pe cp
@c @syncodeindex tp cp
@c @syncodeindex vr cp

@include texi/macros.texi
@include texi/versions.texi

@macro prim {name}
@prindex \name\
@code{\name\}
@end macro

@macro pval {name}
@pvindex \name\
@code{\name\}
@end macro

@macro perr {name}
@peindex \name\
@code{\name\}
@end macro

@macro psta {name}
@stindex \name\
@code{\name\}
@end macro

@macro parm {name}
@vrindex \name\
@code{\name\}
@end macro

@ifnottex
@node Top
@top Signalling Link Interface
@end ifnottex

@menu
* Preface::
* Introduction::
* The Signalling Link Layer::
* SLI Services Definition::
* SLI Primitives::
* Diagnostics Requirements::
@c * Addendum for ITU-T Q.703 Conformance::
@c * Addendum for ANSI T1.111.3 Conformance::
@c * Addendum for ETSI ETS 300 008-1 Conformance::
@c * Addendum for RFC 4165 Conformance::
@c * Mapping of SLI Primitives to ITU-T Q.703::
@c * Mapping of SLI Primitives to ANSI T1.111.3::
@c * State/Event Tables::
@c * Primitive Precedence Tables::
* LMI Header File Listing::
* SLI Header File Listing::
* License::
* Glossary::
* Acronyms::
* References::
* Indices::
@end menu

@node Preface
@unnumbered Preface

@section Security Warning

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of @cite{OpenSS7 Corporation} not be used
in advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  @cite{OpenSS7 Corporation} makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with regard to this
documentation including all implied warranties of merchantability, fitness for a particular purpose,
non-infringement, or title; that the contents of the document are suitable for any purpose, or that
the implementation of such contents will not infringe on any third party patents, copyrights,
trademarks or other rights.  In no event shall @cite{OpenSS7 Corporation} be liable for any direct,
indirect, special or consequential damages or any damages whatsoever resulting from loss of use,
data or profits, whether in an action of contract, negligence or other tortious action, arising out
of or in connection with any use of this document or the performance or implementation of the
contents thereof.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} is making this documentation available as a
reference point for the industry.  While @cite{OpenSS7 Corporation} believes that these interfaces
are well defined in this release of the document, minor changes may be made prior to products
conforming to the interfaces being made available.

@section Abstract

This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.

@noindent
This document specifies a @value{MANUAL_TITLE} Specification in support of the OpenSS7 Signalling
Link (SL) protocol stacks.  It provides abstraction of the signalling link interface to these
components as well as providing a basis for signalling link control for other link control
protocols.

@section Purpose

The purpose of this document is to provide technical documentation of the @value{MANUAL_TITLE}.
This document is intended to be included with the OpenSS7 @cite{STREAMS}
@cpindex STREAMS
software package released by @cite{OpenSS7 Corporation}.  It is intended to assist software
developers, maintainers and users of the @value{MANUAL_TITLE} with understanding the software
architecture and technical interfaces that are made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of information concerning the
@value{MANUAL_TITLE}.  This document is intended to provide information for writers of OpenSS7
@value{MANUAL_TITLE} applications as well as writers of OpenSS7 @value{MANUAL_TITLE} Users.

@section Audience

The audience for this document is software developers, maintainers and users and integrators of the
@value{MANUAL_TITLE}.  The target audience is developers and users of the OpenSS7 SS7 stack.

@section Disclaimer

Although the author has attempted to ensure that the information in this document is complete and
correct, neither the Author nor OpenSS7 Corporation will take any responsibility in it.

@section Revision History

Take care that you are working with a current version of this documentation: you will not be
notified of updates.  To ensure that you are working with a current version, check the
@uref{http://www.openss7.org/,OpenSS7 Project} website for a current version.

Only the texinfo or roff source is controlled.  A printed (or postscript) version of this document
is an @strong{UNCONTROLLED VERSION}.

@smallexample

$Log: sli.texi,v $
Revision 0.9.2.2  2007/07/09 09:04:51  brian
- working up SLI specification

Revision 0.9.2.1  2007/07/04 08:24:58  brian
- added new files

@end smallexample

@node Introduction
@chapter Introduction

This document specifies a @cite{STREAMS}-based
@cpindex STREAMS
kernel-level instantiation of the ITU-T @value{MANUAL_TITLE} definition.  The @value{MANUAL_TITLE}
enables the user of a a signalling link service to access and use any of a variety of
conforming signalling link providers without specific knowledge of the provider's protocol.
The service interface is designed to support any network signalling link protocol and user
signalling link protocol.  This interface only specifies access to signalling link
service providers, and does not address issues concerning signalling link management,
protocol performance, and performance analysis tools.

This specification assumes that the reader is familiar with ITU-T state machines and signalling link
interfaces (e.g.  Q.703, Q.2210), and @cite{STREAMS}.
@cpindex STREAMS

@section Related Documentation

@itemize ---
@item @strong{ITU-T Recommendation Q.703 (White Book)}
@item @strong{ITU-T Recommendation Q.2210 (White Book)}
@item @strong{ANSI T1.111.3/2002}
@item @strong{System V Interface Definition, Issue 2 - Volume 3}
@end itemize

@subsection Role

This document specifies an interface that supports the services provided by the @dfn{Signalling
System No. 7 (SS7)} for ITU-T, ANSI and ETSI applications as described in ITU-T Recommendation
Q.703, ITU-T Recommendation Q.2210, ANSI T1.111.3, ETSI ETS 300 008-1.  These specifications are
targeted for use by developers and testers of protocol modules that require signalling link
service.

@section Definitions, Acronyms, Abbreviations

@table @dfn
@item LM
Local Management.
@item LMS
Local Management Service.
@item LMS User
A user of Local Management Services.
@item LMS Provider
A provider of Local Management Services.
@item Originating SL User
A SL-User that initiates a Signalling Link.
@item Destination SL User
A SL-User with whom an originating SL user wishes to establish a Signalling Link.
@item ISO
International Organization for Standardization
@item SL User
Kernel level protocol or user level application that is accessing the services
of the Signalling Link sub-layer.
@item SL Provider
Signalling Link sub-layer entity/entities that provide/s the services of the
Signalling Link interface.
@item SLI
Signalling Link Interface
@item TIDU
Signalling Link Interface Data Unit
@item TSDU
Signalling Link Service Data Unit
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
@cpindex STREAMS
A communication services development facility first available with UNIX System V Release 3.
@end table

@node The Signalling Link Layer
@chapter The Signalling Link Layer

@menu
* Model of the SLI::
* SLI Services::
* Purpose of the SLI::
@end menu

The Signalling Link Layer provides the means to manage the association of SL-Users into
connections.  It is responsible for the routing and management of data to and from signalling link
connections between SL-user entities.

@node Model of the SLI
@section Model of the SLI

The SLI defines the services provided by the signalling link layer to the signalling
link user at the boundary between the signalling link provider and the signalling
link user entity.  The interface consists of a set of primitives defined as @cite{STREAMS}
@cpindex STREAMS
messages that provide access to the signalling link layer services, and are transferred between the
SLS user entity and the SLS provider.  These primitives are of two types; ones that originate from
the SLS user, and other that originate from the SLS provider.  The primitives that originate from
the SLS user make requests to the SLS provider, or respond to an indication of an event of the SLS
provider.  The primitives that originate from the SLS provider are either confirmations of a request
or are indications to the CCS user that an event has occurred.  @figref{1} shows the model
of the SLI.

@figuresized{sli01,1,Model of the SLI,3.0in}

The SLI allows the SLS provider to be configured with any signalling link layer user (such as
a signalling link application) that also conforms to the SLI.  A signalling link
layer user can also be a user program that conforms to the SLI and accesses the SLS provider via
@command{@b{putmsg}(2s)} and @command{@b{getmsg}(2s)} system calls.  The typical configuration,
however, is to link a signalling link stream beneath a message transfer part multiplexing driver.

@node SLI Services
@section SLI Services

The features of the SLI are defined in terms of the services provided by the SLS provider, and the
individual primitives that may flow between the SLS user and the SLS provider.

The SDLI Services are broken into two groups: local management services and protocol services.
Local management services are responsible for the local management of streams, assignment of streams
to physical points of attachment, enabling and disabling of streams, management of options
associated with a stream, and general acknowledgement and event reporting for the stream.  Protocol
services consist of .

@subsection Local Management

Local management services are listed in @tabref{1}.

@tabfig{lmit01,1,Local Management Services}

The local management services interface is described in @ref{Local Management Services}, and the
primitives are detailed in @ref{Local Management Service Primitives}.  The local management services
interface is defined by the @file{ss7/lmi.h} header file (@pxref{LMI Header File Listing}).

@subsection Protocol

Protocol services are listed in @tabref{2}.

@tabfig{slit02,2,Protocol Services}

The protocol services interface is described in @ref{Protocol Services}, and the primitives are
detailed in @ref{Protocol Service Primitives}.  The protocol services interface is defined by the
@file{ss7/sli.h} header file (@pxref{SLI Header File Listing}).

@node Purpose of the SLI
@section Purpose of the SLI

The SLI is typically implemented as a device driver controlling an intelligent protocol controller
device that provides access to channels.  The purpose behind exposing this low level interface is
that almost all communications channel devices can be placed into a SS7 HDLC mode, where a data
stream can be exchanged between the driver and the medium.  The SLI provides and inteface that, once
implemented as a driver for a new device, can provide complete and verified SS7 signalling link
capabilities by linking under a generic MTP (Message Transfer Part) multiplex driver
an open device stream.

This allows MTP drivers to be verified independently for correct operation and then simply
used for all manner of new device drivers that can implement the SLI interface.

@node SLI Services Definition
@chapter SLI Services Definition

@menu
* Local Management Services::
* Protocol Services::
@end menu

@node Local Management Services
@section Local Management Services

@menu
* Acknowledgement Service::
* Information Reporting Service::
* Physical Point of Attachment Service::
* Initialization Service::
* Options Management Service::
* Error Reporting Service::
* Statistics Reporting Service::
* Event Reporting Service::
@end menu

@node Acknowledgement Service
@subsection Acknowledgement Service

The acknowledgement service provides the LMS user with the ability to receive positive and negative
acknowledgements regarding the successful or unsuccessful completion of services.

@itemize @bullet

@item @b{@prim{LMI_@-OK_@-ACK}}:
The @prim{LMI_@-OK_@-ACK} message is used by the LMS provider to indicate successful receipt and
completion of a service primitive request that requires positive acknowledgement.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
The @prim{LMI_@-ERROR_@-ACK} message is used by the LMS provider to indicate successful receipt and
failure to complete a service primitive request that requires negative acknowledgement.

@end itemize

A successful invocation of the acknowledgement service is illustrated in @figref{15}.

@figuresized{lmi15,15,Message Flow: Successful Acknowledgement Service,4.0in}

As illustrated in @figref{15}, the
service primitives for which a positive acknowledgement may be returned are the
@prim{LMI_@-ATTACH_@-REQ} and @prim{LMI_@-DETACH_@-REQ}.

An unsuccessful invocation of the acknowledgement service is illustrated in @figref{16}.

@figuresized{lmi16,16,Message Flow: Unsuccessful Acknowledgement Service,4.0in}

As illustrated in @figref{16}, the
service primitives for which a negative acknowledgement may be returned are the
@prim{LMI_@-INFO_@-REQ}, @prim{LMI_@-ATTACH_@-REQ}, @prim{LMI_@-DETACH_@-REQ},
@prim{LMI_@-ENABLE_@-REQ}, @prim{LMI_@-DISABLE_@-REQ} and @prim{LMI_@-OPTMGMT_@-REQ} messages.

@node Information Reporting Service
@subsection Information Reporting Service

The information reporting service provides the LMS user with the ability to elicit information from
the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-INFO_@-REQ}}:
The @prim{LMI_@-INFO_@-REQ} message is used by the LMS user to request information about the LMS
provider.

@item @b{@prim{LMI_@-INFO_@-ACK}}:
The @prim{LMI_@-INFO_@-ACK} message is issued by the LMS provider to provide requested information about
the LMS provider.

@end itemize

A successful invocation of the information reporting service is illustrated in @figref{2}.

@figuresized{lmi02,2,Message Flow: Successful Information Reporting Service,4.0in}

@node Physical Point of Attachment Service
@subsection Physical Point of Attachment Service

The local management interface provides the LMS user with the ability to associate a stream to a
physical point of appearance (@dfn{PPA}) or to disassociate a stream from a PPA.  The local
management interface provides for two styles of LMS provider:

@subsubheading Style 1 LMS Provider

A @dfn{Style 1} LMS provider is a provider that associates a stream with a PPA at the time of the
first @manref{open(2)} call for the device, and disassociates a stream from a PPA at the time of the
last @manref{close(2)} call for the device.

Physical points of attachment (PPA) are assigned to major and minor device number combinations.
When the major and minor device number combination is opened, the opened stream is automatically
associated with the PPA for the major and minor device number combination.  The last close of the
device disassociates the PPA from the stream.

Freshly opened @dfn{Style 1} LMS provider streams start life in the @psta{LMI_@-DISABLED} state.

This approach is suitable for LMS providers implemented as real or pseudo-device drivers and is
applicable when the number of minor devices is small and static.

@subsubheading Style 2 LMS Provider

A @dfn{Style 2} LMS provider is a provider that associates a stream with a PPA at the time that the
LMS user issues the @prim{LMI_@-ATTACH_@-REQ} message.  Freshly opened streams are not associated with any
PPA.  The @dfn{Style 2} LMS provider stream is disassociated from a PPA when the stream is closed
or when the LMS user issues the @prim{LMI_@-DETACH_@-REQ} message.

Freshly opened @dfn{Style 2} LMS provider streams start life in the @psta{LMI_@-UNATTACHED} state.

This approach is suitable for LMS providers implemented as clone real or pseudo-device drivers  and
is applicable when the number of minor devices is large or dynamic.

@menu
* PPA Attachment Service::
* PPA Detachment Service::
@end menu

@node PPA Attachment Service
@subsubsection PPA Attachment Service

The PPA attachment service provides the LMS user with the ability to attach a @dfn{Style 2} LMS
provider stream to a physical point of appearance (PPA).

@itemize @bullet

@item @b{@prim{LMI_@-ATTACH_@-REQ}}:
The @prim{LMI_@-ATTACH_@-REQ} message is issued by the LMS user to request that a @dfn{Style 2} LMS
provider stream be attached to a specified physical point of appearance (PPA).

@item @b{@prim{LMI_@-OK_@-ACK}}:
Upon successful receipt and processing of the @prim{LMI_@-ATTACH_@-REQ} message, the LMS provider
acknowledges the success of the service completion with a @prim{LMI_@-OK_@-ACK} message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt but failure to process the @prim{LMI_@-ATTACH_@-REQ} message, the LMS provider
acknowledges the failure of the service completion with a @prim{LMI_@-ERROR_@-ACK} message.

@end itemize

A successful invocation of the attachment service is illustrated in @figref{3}.

@figuresized{lmi03,3,Message Flow: Successful Attachment Service,4.0in}


@node PPA Detachment Service
@subsubsection PPA Detachment Service

The PPA detachment service provides the LMS user with the ability to detach a @dfn{Style 2} LMS
provider stream from a physical point of attachment (PPA).

@itemize @bullet

@item @b{@prim{LMI_@-DETACH_@-REQ}}:
The @prim{LMI_@-DETACH_@-REQ} message is issued by the LMS user to request that a @dfn{Style 2} LMS
provider stream be detached from the attached physical point of appearance (PPA).

@item @b{@prim{LMI_@-OK_@-ACK}}:
Upon successful receipt and processing of the @prim{LMI_@-DETACH_@-REQ} message, the LMS provider
acknowledges the success of the service completion with a @prim{LMI_@-OK_@-ACK} message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt but failure to process the @prim{LMI_@-DETACH_@-REQ} message, the LMS provider
acknowledges the failure of the service completion with a @prim{LMI_@-ERROR_@-ACK} message.

@end itemize

A successful invocation of the detachment service is illustrated in @figref{4}.

@figuresized{lmi04,4,Message Flow: Successful Detachment Service,4.0in}

@node Initialization Service
@subsection Initialization Service

The initialization service provides the LMS user with the abilty to enable and disable the stream
for the associated PPA.

@menu
* Interface Enable Service::
* Interface Disable Service::
@end menu

@node Interface Enable Service
@subsubsection Interface Enable Service

The interface enable service provides the LMS user with the ability to enable an LMS provider
stream that is associated with a PPA.  Enabling the interface permits the LMS user to exchange
protocol service interface messages with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-ENABLE_@-REQ}}:
The @prim{LMI_@-ENABLE_@-REQ} message is issued by the LMS user to request that the protocol service
interface be enabled.

@item @b{@prim{LMI_@-ENABLE_@-CON}}:
Upon successful enabling of the protocol service interface, the LMS provider acknowledges
successful completion of the service by issuing a @prim{LMI_@-ENABLE_@-CON} message to the LMS user.

@item @b{@prim{LMI_@-ERRORK_@-ACK}}:
Upon unsuccessful enabling of the protocol service interface, the LMS provider acknowledges the
failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK} message to the LMS user.

@end itemize

A successful invocation of the enable service is illustrated in @figref{5}.

@figuresized{lmi05,5,Message Flow: Successful Enable Service,4.0in}

@node Interface Disable Service
@subsubsection Interface Disable Service

The interface disable service provides the LMS user with the ability to disable an LMS provider
stream that is associated with a PPA.  Disabling the interface withdraws the LMS user's ability to
exchange protocol service interface messages with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-DISABLE_@-REQ}}:
The @prim{LMI_@-DISABLE_@-REQ} message is issued by the LMS user to request that the protocol service
interface be disabled.

@item @b{@prim{LMI_@-DISABLE_@-CON}}:
Upon successful disabling of the protocol service interface, the LMS provider acknowledges
successful completion of the service by issuing a @prim{LMI_@-DISABLE_@-CON} message to the LMS user.

@item @b{@prim{LMI_@-ERRORK_@-ACK}}:
Upon unsuccessful disabling of the protocol service interface, the LMS provider acknowledges the
failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK} message to the LMS user.

@end itemize

A successful invocation of the disable service is illustrated in @figref{6}.

@figuresized{lmi06,6,Message Flow: Successful Disable Service,4.0in}

@node Options Management Service
@subsection Options Management Service

The options management service provides the LMS user with the ability to control and affect various
generic and provider-specific options associated with the LMS provider.

@itemize @bullet

@item @b{@prim{LMI_@-OPTMGMT_@-REQ}}:
The LMS user issues a @prim{LMI_@-OPTMGMT_@-REQ} message when it wishes to interrogate or affect the
setting of various generic or provider-specific options associated with the LMS provider for the
stream upon which the message is issued.

@item @b{@prim{LMI_@-OPTMGMT_@-ACK}}:
Upon successful receipt of the @prim{LMI_@-OPTMGMT_@-REQ} message, and successful options processing, the
LMS provider acknowledges the successful completion of the service with an @prim{LMI_@-OPTMGMT_@-ACK}
message.

@item @b{@prim{LMI_@-ERROR_@-ACK}}:
Upon successful receipt of the @prim{LMI_@-OPTMGMT_@-REQ} message, and unsuccessful options processing, the
LMS provider acknowledges the failure to complete the service by issuing an @prim{LMI_@-ERROR_@-ACK}
message to the LMS user.

@end itemize

A successful invocation of the options management service is illustrated in @figref{7}.

@figuresized{lmi07,7,Message Flow: Successful Options Management Service,4.0in}

@node Error Reporting Service
@subsection Error Reporting Service

The error reporting service provides the LMS provider with the ability to indicate asynchronous
errors to the LMS user.

@itemize @bullet

@item @b{@prim{LMI_@-ERROR_@-IND}}:
The LMS provider issues the @prim{LMI_@-ERROR_@-IND} message to the LMS user when it needs to indicate an
asynchronous error (such as the unusability of the communications medium).

@end itemize

A successful invocation of the error reporting service is illustrated in @figref{8}.

@figuresized{lmi08,8,Message Flow: Successful Error Reporting Service,4.0in}

@node Statistics Reporting Service
@subsection Statistics Reporting Service

@itemize @bullet

@item @b{@prim{LMI_@-STATS_@-IND}}:

@end itemize

A successful invocation of the statistics reporting service is illustrated in @figref{9}.

@figuresized{lmi09,9,Message Flow: Successful Statistics Reporting Service,4.0in}

@node Event Reporting Service
@subsection Event Reporting Service

The event reporting service provides the LMS provider with the ability to indicate specific
asynchronous management events to the LMS user.

@itemize @bullet

@item @b{@prim{LMI_@-EVENT_@-IND}}:
The LMS provider issues the @prim{LMI_@-EVENT_@-IND} message to the LMS user when it wishes to indicate
an asynchronous (management) event to the LMS user.

@end itemize

A successful invocation of the event reporting service is illustrated in @figref{10}.

@figuresized{lmi10,10,Message Flow: Successful Event Reporting Service,4.0in}

@node Protocol Services
@section Protocol Services

Protocol services are specific to the Signalling Link interface.  These services consist of
initialization of the link and preparation for the transfer of signal units, the transfer of signal
units, transmit and receive congestion control, BSNT retrieval, buffer updating, buffer clearing,
local processor outage, remote processor outage, link options management and management event
notification.

The service primitives that implement the protocol services are described in detail in @ref{Protocol
Service Primitives}.

@menu
* Link Initialization Services::
* Data Transfer Service::
* Congestion Services::
* Restoration Services::
* Processor Outage Services::
* Link Option Management Service::
* Event Notification Service::
@end menu

@node Link Initialization Services
@subsection Link Initialization Services

The link initialization services provide the SLS user with the ability to power on the terminal, set
emergency status, start the signalling link and stop the signalling link.
The service primitives that implement the link initialization services are described in detail in
@ref{Link Initialization Service Primitives}.

@menu
* Power On Service::
* Emergency Service::
* Start Service::
* Stop Service::
@end menu

@node Power On Service
@subsubsection Power On Service

The power on service provides the SLS user with the ability to power on the signalling data
terminal.  The signalling data terminal must be powered on at least once before the link can be
started.

@itemize @bullet

@item @b{@prim{SL_@-POWER_@-ON_@-REQ}}:
The @prim{SL_@-POWER_@-ON_@-REQ} message is used by the SLS user to request that the SLS provider
power on the signalling data terminal.  If the signalling data terminal does not require power
(such as a software module), this serves to initialize the signalling data terminal functions.

@end itemize

A successful invocation of the power on service is illustrated in @figref{17}.

@figuresized{sli17,17,Message Flow: Successful Power On Service,4.0in}

@node Emergency Service
@subsubsection Emergency Service

The emergency service provides the SLS user with the ability to specify whether normal or emergency
alignment procedures should take effect on the current or next alignment procedure.  Emergency
alignment procedures have a shorter duration (short proving period) than normal alignment
procedures.  Some SS7 protocol variants (TTC) always use emergency alignment procedures and are not
affected by this service.

@itemize @bullet

@item @b{@prim{SL_@-EMERGENCY_@-REQ}}:
The @prim{SL_@-EMERGENCY_@-REQ} message is used by the SLS user to request that the emergency
alignment procedure should take effect on the current or next alignment of the signalling link.

@item @b{@prim{SL_@-EMERGENCY_@-CEASES_@-REQ}}:
The @prim{SL_@-EMERGENCY_@-CEASES_@-REQ} message is used by the SLS user to request that the normal
alignment procedure should take effect on the current or next alignment of the signalling link.

@end itemize

A successful invocation of the emergency service is illustrated in @figref{18}.

@figuresized{sli18,18,Message Flow: Successful Emergency Service,4.0in}

@node Start Service
@subsubsection Start Service

The start service provides the SLS user with the ability to align the signalling link and have it
placed into service.  The start service must be successfully invoked on both sides of the signalling
link before the signalling link is able to exchange message signal units.

@itemize @bullet

@item @b{@prim{SL_@-START_@-REQ}}:
The @prim{SL_@-START_@-REQ} message is used by the SLS user to request that the signalling link be
aligned a placed into service.

@item @b{@prim{SL_@-IN_@-SERVICE_@-IND}}:
The @prim{SL_@-IN_@-SERVICE_@-IND} message is used by the SLS provider to indicate that the
signalling link has been successfully aligned and has been placed into service at Level 2.

@end itemize

A successful invocation of the start service is illustrated in @figref{19}.

@figuresized{sli19,19,Message Flow: Successful Start Service,4.0in}

A unsuccessful invocation of the start service is illustrated in @figref{20}.

@figuresized{sli20,20,Message Flow: Unsuccessful Start Service,4.0in}

@node Stop Service
@subsubsection Stop Service

The stop service provides the SLS user and provider with the ability to take a signalling link out
of service.  Once the stop service has successfully completed, the signalling link is no longer able
to exchange message signal units.

@itemize @bullet

@item @b{@prim{SL_@-STOP_@-REQ}}:
The @prim{SL_@-STOP_@-REQ} message is used by the SLS user to request that the signalling link be
taken out of service.

@item @b{@prim{SL_@-OUT_@-OF_@-SERVICE_@-IND}}:
The @prim{SL_@-OUT_@-OF_@-SERVICE_@-IND} message is used by the SLS provider to indicate that the
signalling link has been taken out of service by the SLS provider.

@end itemize

A successful invocation of the stop service is illustrated in @figref{21}.

@figuresized{sli21,21,Message Flow: Successful Stop Service,4.0in}

@node Data Transfer Service
@subsection Data Transfer Service

The data transfer service provides the SLS user with the ability to exchange message signal units
on the signalling link.
The service primitives that implement the data transfer service are described in detail in
@ref{Data Transfer Service Primitives}.

@itemize @bullet

@item @b{@prim{SL_@-PDU_@-REQ}}:
The @prim{SL_@-PDU_@-REQ} message is used by the SLS user to request that a message signal unit be
sent on the signalling link.

@item @b{@prim{SL_@-PDU_@-IND}}:
The @prim{SL_@-PDU_@-IND} message is used by the SLS provider to indicate that a message signal
unit has been received on the signalling link.

@end itemize

A successful invocation of the data transfer service is illustrated in @figref{22}.

@figuresized{sli22,22,Message Flow: Successful Data Transfer Service,4.0in}

@node Congestion Services
@subsection Congestion Services

The congestion services provide the SLS user with the ability to invoke a receive congestion policy.
They also provide the SLS provider with the ability to indicate transmit congestion levels.
The service primitives that implement the congestion services are described in detail in
@ref{Congestion Service Primitives}.

@menu
* Transmit Congestion Service::
* Receive Congestion Service::
@end menu

@node Transmit Congestion Service
@subsubsection Transmit Congestion Service

The transmit congestion service provides the SLS provider with the ability to indicate transmit
congestion (and corresponding levels) to the SLS user.  There are 4 levels of congestion, 0, 1, 2
and 3.  Each congestion level has an onset threshold and an abatement threshold.  When the transmit
buffer occupancy exceeds the onset threshold for the level, congestion is indicated at that level.
When the transmit buffer occupancy falls below the abatement threshold for the level, congestion
abatement is indicated.  Some SS7 protocol variants do not have congestion levels and only signal
the presence or lack of congestion.

When congestion is indicated at a level, the SLS user should discard messages that have a message
priority that is less than the level at which congestion has been indicated.

@itemize @bullet

@item @b{@prim{SL_@-LINK_@-CONGESTED_@-IND}}:
The @prim{SL_@-LINK_@-CONGESTED_@-IND} message is used by the SLS provider to indicate that
congestion onset has occurred for the congestion level indicated in the message.

@item @b{@prim{SL_@-LINK_@-CONGESTION_@-CEASED_@-IND}}:
The @prim{SL_@-LINK_@-CONGESTION_@-CEASED_@-IND} message is used by the SLS provider to indicate
that congestion abatement has occurred for the congestion level indicated in the message.

@end itemize

A successful indication of the transmit congestion service is illustrated in @figref{23}.

@figuresized{sli23,23,Message Flow: Successful Transmit Congestion Service,4.0in}

@node Receive Congestion Service
@subsubsection Receive Congestion Service

The receive congestion service provides the SLS user with the ability to specify that receive
congestion is in effect or has abated and the policy to use for received message signal units under
congestion.  A discard policy indicates that received message signal units should be discarded (and
not acknowledged); receive congestion is signalled to the sending side of the signalling link.  An
accept policy indicates that received message signal units should not be discarded and should be
acknowledged; receive congestion is signalled to the sending side of the signalling link.  When
receive congestion abates, the abatement of receive congestion is signalled to the sending side of
the signalling link.

The SLS provider may also perform its own receive congestion onset, abatement and policy.  The SLS
provider does not indicate its current receive congestion level or policy to the SLS user.

@itemize @bullet

@item @b{@prim{SL_@-NO_@-CONGESTION_@-REQ}}:
The @prim{SL_@-NO_@-CONGESTION_@-REQ} message is used by the SLS user to specify that receive
congestion has abated and that receive congestion should no longer be signalled to the sending side
of the signalling link.

@item @b{@prim{SL_@-CONGESTION_@-ACCEPT_@-REQ}}:
The @prim{SL_@-CONGESTION_@-ACCEPT_@-REQ} message is used by the SLS user to specify that receive
congestion has onset and that receive congestion should be signalled to the sending side of the
signalling link.  The congestion policy is an accept policy that allows message signal units to
continue to be delivered to the SLS user and acknowledged to the remote end of the signalling link.

@item @b{@prim{SL_@-CONGESTION_@-DISCARD_@-REQ}}:
The @prim{SL_@-CONGESTION_@-DISCARD_@-REQ} message is used by the SLS user to specify that receive
congestion has onset and that receive congestion should be signalled to the sending side of the
signalling link.  The congestion policy is a discard policy that requires the SLS provider to
discard message signal units without delivering them to the SLS user and they are not to be
acknowledged to the remote end of the signalling link. 

@end itemize

A successful invocation of the receive congestion service is illustrated in @figref{24}.

@figuresized{sli24,24,Message Flow: Successful Receive Congestion Service,4.0in}

@node Restoration Services
@subsection Restoration Services

Restoration services consist of the services necessary to change over a link, update its buffers,
and clearing any unnecessarily old MSUs from the receive buffer or retransmission buffer.  The
service primitives that implement the restoration services are detailed in @ref{Restoration Service
Primitives}.

@menu
* BSNT Retrieval Service::
* Buffer Updating Service::
* Buffer Clearing Service::
@end menu

@node BSNT Retrieval Service
@subsubsection BSNT Retrieval Service

The BSNT retrieval service is a somewhat optional service in support of the sequenced changeover
procedure of the Message Transfer Part.  It is @samp{somewhat} optional due to the possibility that
time-controlled changeover is always used, per ETSI ETS 300 008-1.

@itemize @bullet

@item @b{@prim{SL_@-RETRIEVE_@-BSNT_@-REQ}}:
The @prim{SL_@-RETRIEVE_@-BSNT_@-REQ} message is used by the SLS user to request that the SLS
provider indicate the last transmitted backward sequence number (BSNT).

@item @b{@prim{SL_@-BSNT_@-IND}}:
The @prim{SL_@-BSNT_@-IND} message is used by the SLS provider to indicate the last transmitted
backward sequence number (BSNT) when requested by the SLS user with a
@prim{SL_@-RETRIEVE_@-BSNT_@-REQ} message.

@item @b{@prim{SL_@-BSNT_@-NOT_@-RETRIEVABLE_@-IND}}:
The @prim{SL_@-BSNT_@-NOT_@-RETRIEVABLE_@-IND} message is used by the SLS provider to indicate that
the last transmitted backward sequence number (BSNT) is not available when requested by the SLS user
with a @prim{SL_@-RETRIEVE_@-BSNT_@-REQ} message.  This may be due to hardware or other failures.

@end itemize

A successful invocation of the BSNT retrieval service is illustrated in @figref{25}.

@figuresized{sli25,25,Message Flow: Successful BSNT Retreival Service,4.0in}

An unsuccessful invocation of the BSNT retrieval service is illustrated in @figref{26}.

@figuresized{sli26,26,Message Flow: Unsuccessful BSNT Retrieval Service,4.0in}

@node Buffer Updating Service
@subsubsection Buffer Updating Service

The buffer updating service provides the SLS user with the ability to update the retransmission
buffer and collect messages that have not been successfully received by the remote side of the
signalling link during a sequenced changeover procedure.  The SLS user specifies the FSNC (the
forward sequence number confirmed received by the remote end of the signalling link).  The SLS
provider uses the FSNC to purge successfully received messages from the retransmission buffer and
then indicates the remaining contents of the retransmission buffer and the transmission buffer to
the SLS user.

The SLS user may also clear the retransmission buffer using the buffer clearing service before
retrieving messages.  This this case, the messages retrieved by the SLS provider will be the
contents of the transmission buffer.  The combination of the two services are used to perform the
time controlled changeover procedure.

@itemize @bullet

@item @b{@prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ}}:
The @prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ} message is used by the SLS user to request
the SLS provider update the retransmission buffer to reflect the value of the specified FSNC and
retrieve and indicate the contents of the updated retransmission buffer followed by the contents of
the transmission buffer to the SLS user.

@item @b{@prim{SL_@-RETRIEVED_@-MESSAGE_@-IND}}:
The @prim{SL_@-RETRIEVED_@-MESSAGE_@-IND} message is used by the SLS provider to indicate one
message from the retransmission buffer or transmission buffer.

@item @b{@prim{SL_@-RETRIEVAL_@-COMPLETE_@-IND}}:
The @prim{SL_@-RETRIEVAL_@-COMPLETE_@-IND} message is used by the SLS provider to indicate that the
retrieval of messages from the retransmission buffer and transmission buffer is complete.

@item @b{@prim{SL_@-RETRIEVAL_@-NOT_@-POSSIBLE_@-IND}}:
The @prim{SL_@-RETRIEVAL_@-NOT_@-POSSIBLE_@-IND} message is used by the SLS provider to indicate
that the updating of the retransmission buffer to the specified FSNC and retrieval of messages from
the retransmission buffer and transmission buffer is not possible.  This may be due to hardware
failure.

@end itemize

A successful invocation of the buffer updating service is illustrated in @figref{27}.

@figuresized{sli27,27,Message Flow: Successful Buffer Updating Service,4.0in}

An unsuccessful invocation of the buffer updating service is illustrated in @figref{28}.

@figuresized{sli28,28,Message Flow: Unsuccessful Buffer Updating Service,4.0in}

@node Buffer Clearing Service
@subsubsection Buffer Clearing Service

The buffer clearing service provides the SLS user with the ability to request that all message
buffers be cleared (receive buffer, retransmission buffer, transmission buffer) and that the SLS
provider indicate when the receive and retransmission buffer are cleared.  It also provides the SLS
user with the ability to clear only the retransmission buffer and receive and indication when the
buffer is cleared.

Clearing of all buffers is performed when the signalling link has been blocked (local or remote
processor outage) for a long duration and messages contained in the buffer are too old to be
processed.

Clearing of the retransmission buffer is performed as part of the time-controlled changeover
procedure, when the value of the FSNC has not been received in a sequenced changeover message from
the adjacent signalling point.

@itemize @bullet

@item @b{@prim{SL_@-CLEAR_@-BUFFERS_@-REQ}}:
The @prim{SL_@-CLEAR_@-BUFFERS_@-REQ} message is used by the SLS user to request that all message
buffers (receive, retransmit, transmit) be cleared.

@item @b{@prim{SL_@-CLEAR_@-RTB_@-REQ}}:
The @prim{SL_@-CLEAR_@-RTB_@-REQ} message is used by the SLS user to request that only the
retransmission buffer be cleared as part of a time-controlled changeover procedure.

@item @b{@prim{SL_@-RB_@-CLEARED_@-IND}}:
The @prim{SL_@-RB_@-CLEARED_@-IND} message is used by the SLS provider to indicate when the receive
buffer has been successfully cleared.

@item @b{@prim{SL_@-RTB_@-CLEARED_@-IND}}:
The @prim{SL_@-RTB_@-CLEARED_@-IND} message is used by the SLS provider to indicate when the
retransmission buffer has been successfully cleared.

@end itemize

A successful invocation of the buffer clearing service is illustrated in @figref{29} and
@figref{32}.

@figuresized{sli29,29,Message Flow: Successful Buffer Clearing Service,4.0in}

@figuresized{sli32,32,Message Flow: Successful Buffer Clearing Service,4.0in}

@node Processor Outage Services
@subsection Processor Outage Services

The processor outage services provide the SLS user with the ability to request a local processor
outage as well as being informed of a local or remote processor outage.
The service primitives that implement the processor outage services are described in detail in
@ref{Processor Outage Service Primitives}.

@menu
* Local Processor Outage Service::
* Remote Processor Outage Service::
@end menu

@node Local Processor Outage Service
@subsubsection Local Processor Outage Service

The local processor outage service provides the SLS user with the ability to both request a local
processor outage as well as be informed of a local processor outage.  Local processor outage occurs
when the SLS user is unable to pass message signal units for transmission or accept received message
signal units, or the SLS provider is unable to deliver received message signal units or accept
message signal units for transmission.  Local processor outage conditions can exist independently
within the SLS user and within the SLS provider.

@itemize @bullet

@item @b{@prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-REQ}}:
The @prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-REQ} message is used by the SLS user to specify that a
local processor outage condition exists due to a condition within the SLS user.

@item @b{@prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-IND}}:
The @prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-IND} message is used by the SLS provider to indicate
that a local processor outage condition exists due to a condition within the SLS provider.

@item @b{@prim{SL_@-RESUME_@-REQ}}:
The @prim{SL_@-RESUME_@-REQ} message is used by the SLS use to specify that a local processor outage
condition no longer exists within the SLS user.

@item @b{@prim{SL_@-LOCAL_@-PROCESSOR_@-RECOVERED_@-IND}}:
The @prim{SL_@-LOCAL_@-PROCESSOR_@-RECOVERED_@-IND} message is used by the SLS provider to indicate
that a local processor outage condition no longer exists within the SLS provider.

@end itemize

A successful invocation of the local processor outage service is illustrated in @figref{30}.

@figuresized{sli30,30,Message Flow: Successful Processor Outage Service,4.0in}

@node Remote Processor Outage Service
@subsubsection Remote Processor Outage Service

The remote processor outage service provides the SLS user with the ability to be informed of remote
processor outage conditions.  Remote processor outage occurs when the remote SLS user is
experiencing a local processor outage.  Remote processor outage conditions can exist independent of
local processor outage conditions.

@itemize @bullet

@item @b{@prim{SL_@-REMOTE_@-PROCESSOR_@-OUTAGE_@-IND}}:
The @prim{SL_@-REMOTE_@-PROCESSOR_@-OUTAGE_@-IND} message is used by the SLS provider to indicate
that a remote processor outage condition exists.

@item @b{@prim{SL_@-REMOTE_@-PROCESSOR_@-RECOVERED_@-IND}}:
The @prim{SL_@-REMOTE_@-PROCESSOR_@-RECOVERED_@-IND} message is used by the SLS provider to indicate
that a remote processor has recovered.

@item @b{@prim{SL_@-CONTINUE_@-REQ}}:
The @prim{SL_@-CONTINUE_@-REQ} message is used by the SLS user to request that a signalling link
continue from where it left off after a remote processor has recovered.

@end itemize

A successful indication of the remote processor outage service is illustrated in @figref{31}.

@figuresized{sli31,31,Message Flow: Successful Processor Outage Service,4.0in}

@node Link Option Management Service
@subsection Link Option Management Service

The link option management service provides the SLS user with the ability to alter signalling link
options.
The service primitives that implement the link option management services are described in detail in
@ref{Link Option Management Service Primitives}.

@itemize @bullet

@item @b{@prim{SL_@-OPTMGMT_@-REQ}}:
The @prim{SL_@-OPTMGMT_@-REQ} message is used by the SLS user to request that link options be
managed.

@item @b{@prim{SL_@-OPTMGMT_@-ACK}}:
The @prim{SL_@-OPTMGMT_@-ACK} message is used by the SLS provider to acknowledge link option
management actions.

@end itemize

A successful invocation of the link options management service is illustrated in @figref{33}.

@figuresized{sli33,33,Message Flow: Successful Link Options Management Service,4.0in}

@node Event Notification Service
@subsection Event Notification Service

The event notification service provides the SLS user with the ability to register with the SLS
provider to receive provider-specific event notifications.  Event notifications normally
correspond to management indications on the SS7 signalling link.
The service primitives that implement the event notification services are described in detail in
@ref{Event Notification Service Primitives}.

@itemize @bullet

@item @b{@prim{SL_@-NOTIFY_@-REQ}}:
The @prim{SL_@-NOTIFY_@-REQ} message is used by the SLS user to register with the SLS provider to
receive specified event notifications.

@item @b{@prim{SL_@-NOTIFY_@-IND}}:
The @prim{SL_@-NOTIFY_@-IND} message is used by the SLS provider to indicate the occurrence of
registered events to the SLS user.

@end itemize

A successful invocation of the event notification service is illustrated in @figref{34}.

@figuresized{sli34,34,Message Flow: Successful Event Notification Service,4.0in}


@node SLI Primitives
@chapter SLI Primitives

@menu
* Local Management Service Primitives::
* Protocol Service Primitives::
@end menu

@node Local Management Service Primitives
@section Local Management Service Primitives

These service primitives implement the local management services (@pxref{Local Management
Services}).

@menu
* Acknowledgement Service Primitives::
* Information Reporting Service Primitives::
* Physical Point of Attachment Service Primitives::
* Initialization Service Primitives::
* Options Management Service Primitives::
* Event Reporting Service Primitives::
@end menu

@node Acknowledgement Service Primitives
@subsection Acknowledgement Service Primitives

These service primitives implement the acknowledgement service (@pxref{Acknowledgement Service}).

@menu
* LMI_OK_ACK::
* LMI_ERROR_ACK::
@end menu

@node LMI_OK_ACK
@subsubsection LMI_OK_ACK

@subsubheading Description

This primitive is used to acknowledge receipt and successful service completion for
primitives requiring acknowledgement that have no confirmation primitive.

@subsubheading Format

This primitive consists of one @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_long lmi_correct_primitive;
    lmi_ulong lmi_state;
} lmi_ok_ack_t;
@end verbatim
@tpindex lmi_ok_ack_t
@end display

@subsubheading Parameters

The service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-OK_@-ACK}.

@item lmi_@-correct_@-primitive
Indicates the service primitive that was received and serviced correctly.  This field can be one of
the following values:

@table @prim

@ignore
@item LMI_@-INFO_@-REQ
Information request.
@end ignore
@item LMI_@-ATTACH_@-REQ
Attach request.
@item LMI_@-DETACH_@-REQ
Detach request.
@ignore
@item LMI_@-ENABLE_@-REQ
Enable request.
@item LMI_@-DISABLE_@-REQ
Disable request.
@item LMI_@-OPTMGMT_@-REQ
Options management request.
@item LMI_@-INFO_@-ACK
Information acknowledgement.
@item LMI_@-OK_@-ACK
Successful receipt acknowledgement.
@item LMI_@-ERROR_@-ACK
Error acknowledgement.
@item LMI_@-ENABLE_@-CON
Enable confirmation.
@item LMI_@-DISABLE_@-CON
Disable confirmation.
@item LMI_@-OPTMGMT_@-ACK
Options Management acknowledgement.
@item LMI_@-ERROR_@-IND
Error indication.
@item LMI_@-STATS_@-IND
Statistics indication.
@item LMI_@-EVENT_@-IND
Event indication.
@end ignore

@end table

@item lmi_@-state

Indicates the current state of the LMS provider at the time that the primitive was issued.
This field can be one of the following values:

@table @psta

@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@ignore
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@end ignore
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@ignore
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@end ignore
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@ignore
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-ATTACH_@-PENDING} or
@psta{LMI_@-DETACH_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-UNATTACHED} or @psta{LMI_@-DISABLED}, depending on thee primitive to
which the message is responding.

@page
@node LMI_ERROR_ACK
@subsubsection LMI_ERROR_ACK

@subsubheading Description

The error acknowledgement primitive is used to acknowledge receipt and unsuccessful service
completion for primitives requiring acknowledgement.

@subsubheading Format

The error acknowledgement primitive consists of one @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_errno;
    lmi_ulong lmi_reason;
    lmi_long lmi_error_primitive;
    lmi_ulong lmi_state;
} lmi_error_ack_t;
@end verbatim
@tpindex lmi_error_ack_t
@end display

@subsubheading Parameters

The error acknowledgement primitive contains the following parameters:

@table @parm

@item lmi_@-primitive

Indicates the primitive type.  Always @prim{LMI_@-ERROR_@-ACK}.

@item lmi_@-errno

Indicates the LM error number.
This field can have one of the following values:

@table @perr
@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.
@end table

@item lmi_@-reason

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{lmi_@-errno} field
is @perr{LMI_@-SYSERR}, the @parm{lmi_@-reason} field is the UNIX error number as described in
@manref{errno(3)}.

@item lmi_@-error_@-primitive

Indicates the primitive that was in error.
This field can have one of the following values:

@table @prim
@item LMI_@-INFO_@-REQ
Information request.
@item LMI_@-ATTACH_@-REQ
Attach request.
@item LMI_@-DETACH_@-REQ
Detach request.
@item LMI_@-ENABLE_@-REQ
Enable request.
@item LMI_@-DISABLE_@-REQ
Disable request.
@item LMI_@-OPTMGMT_@-REQ
Options management request.
@item LMI_@-INFO_@-ACK
Information acknowledgement.
@item LMI_@-OK_@-ACK
Successful receipt acknowledgement.
@item LMI_@-ERROR_@-ACK
Error acknowledgement.
@item LMI_@-ENABLE_@-CON
Enable confirmation.
@item LMI_@-DISABLE_@-CON
Disable confirmation.
@item LMI_@-OPTMGMT_@-ACK
Options Management acknowledgement.
@item LMI_@-ERROR_@-IND
Error indication.
@item LMI_@-STATS_@-IND
Statistics indication.
@item LMI_@-EVENT_@-IND
Event indication.
@end table

@item lmi_@-state

Indicates the state of the LMS provider at the time that the primitive was issued.
This field can have one of the following values:

@table @psta
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end table

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
LMS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node Information Reporting Service Primitives
@subsection Information Reporting Service Primitives

These service primitives implement the information reporting service (@pxref{Information Reporting
Service}).

@menu
* LMI_INFO_REQ::
* LMI_INFO_ACK::
@end menu

@node LMI_INFO_REQ
@subsubsection LMI_INFO_REQ

@subsubheading Description

This LMS user originated primitive is issued by the LMS user to request that the LMS provider
return information concerning the capabilities and state of the LMS provider.

@subsubheading Format

The primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_ulong lmi_primitive;
} lmi_info_req_t;
@end verbatim
@tpindex lmi_info_req_t
@end display

@subsubheading Parameters

This primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the primitive type.  Always @prim{LMI_@-INFO_@-REQ}.

@end table

@subsubheading State

This primitive may be issued in any state but only when a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

This primitive requires the LMS provider to acknowledge receipt of the primitive as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider is required to acknowledge receipt of the primitive and provide the requested
information using the @prim{LMI_@-INFO_@-ACK} primitive.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider is required to negatively acknowledge the primitive using the @prim{LMI_@-ERROR_@-ACK}
primitive, and include the reason for failure in the primitive.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}: applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_INFO_ACK
@subsubsection LMI_INFO_ACK

@subsubheading Description

This LMS provider originated primitive acknowledges receipt and successful processing of the
@prim{LMI_@-INFO_@-REQ} primitive and provides the request information concerning the LMS provider.

@subsubheading Format

This message is formatted a one @prim{M_PROTO} or @prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_version;
    lmi_ulong lmi_state;
    lmi_ulong lmi_max_sdu;
    lmi_ulong lmi_min_sdu;
    lmi_ulong lmi_header_len;
    lmi_ulong lmi_ppa_style;
    lmi_uchar lmi_ppa_addr[0];
} lmi_info_ack_t;
@end verbatim
@tpindex lmi_info_ack_t
@end display

@subsubheading Parameters

The information acknowledgement service primitive has the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-INFO_@-ACK}.

@item lmi_@-version
Indicates the version of this specification that is being used by the LMS provider.

@item lmi_@-state
Indicates the state of the LMS provider at the time that the information acknowledgement service
primitive was issued.  This field can be one of the following values:

@table @psta

@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.

@end table

@item lmi_@-max_@-sdu
Indicates the maximum size of a Service Data Unit.

@item lmi_@-min_@-sdu
Indicates the minimum size of a Service Data Unit.

@item lmi_@-header_@-len
Indicates the amount of header space that should be reserved for placing LMS provider headers.

@item lmi_@-ppa_@-style
Indicates the PPA style of the LMS provider.  This value can be one of the following values:

@table @pval

@item LMI_@-STYLE1
PPA is implicitly attached by @manref{open(2)}.

@item LMI_@-STYLE2
PPA must be explicitly attached using @prim{LMI_@-ATTACH_@-REQ}.

@end table

@item lmi_@-ppa_@-addr
This is a variable length field.  The length of the field is determined by the length of the
@prim{M_PROTO}
or @prim{M_PCPROTO} message block.

For a @dfn{Style 2} driver, when @parm{lmi_@-ppa_@-style} is @pval{LMI_@-STYLE2}, and when in an attached state,
this field providers the current PPA associated with the stream; the length is typically 4 bytes.

For a @dfn{Style 1} driver, when @parm{lmi_@-ppa_@-style} is @pval{LMI_@-STYLE1}, the length it 0 bytes.

@end table

@subsubheading State

This primitive can be issued in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node Physical Point of Attachment Service Primitives
@subsection Physical Point of Attachment Service Primitives

These service primitives implement the physical point of attachment service (@pxref{Physical Point
of Attachment Service}).

@menu
* LMI_ATTACH_REQ::
* LMI_DETACH_REQ::
@end menu

@node LMI_ATTACH_REQ
@subsubsection LMI_ATTACH_REQ

@subsubheading Description

This LMS user originated primitive requests that the stream upon which the primitive is issued by
associated with the specified Physical Point of Attachment (PPA).  This primitive is only applicable
to @dfn{Style 2} LMS provider streams, that is, streams that return @pval{LMI_@-STYLE2} in the
@parm{lmi_@-ppa_@-style} field of the @prim{LMI_@-INFO_@-ACK}.

@subsubheading Format

This primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_uchar lmi_ppa[0];
} lmi_attach_req_t;
@end verbatim
@tpindex lmi_attach_req_t
@end display

@subsubheading Parameters

The attach request primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-ATTACH_@-REQ}.

@item lmi_@-ppa
Specifies the Physical Point of Attachment (PPA) to which to associated the @dfn{Style 2} stream.
This is a variable length identifier whose length is determined by the length of the @prim{M_PROTO} message
block.

@end table

@subsubheading State

This primitive is only valid in state @psta{LMI_@-UNATTACHED} and when a local acknowledgement is not
pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-ATTACH_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The attach request service primitive requires that the LMS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider acknowledges receipt of the primitive and successful outcome of the attach service
with a @prim{LMI_@-OK_@-ACK} primitive.  The new state is @psta{LMI_@-DISABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider acknowledges receipt of the primitive and failure of the attach service with a
@prim{LMI_@-ERROR_@-ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_DETACH_REQ
@subsubsection LMI_DETACH_REQ

@subsubheading Description

This LMS user originated primitive request that the stream upon which the primitive is issued be
disassociated from the Physical Point of Appearance (PPA) to which it is currently attached.  This
primitive is only applicable to @dfn{Style 2} LMS provider streams, that is, streams that return
@pval{LMI_@-STYLE2} in the @parm{lmi_@-ppa_@-style} field of the @prim{LMI_@-INFO_@-ACK}.

@subsubheading Format

The detach request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
} lmi_detach_req_t;
@end verbatim
@tpindex lmi_detach_req_t
@end display

@subsubheading Parameters

The detach request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-DETACH_@-REQ}.

@end table

@subsubheading State

This primitive is valid in the @psta{LMI_@-DISABLED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-DETACH_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The detach request service primitive requires that the LMS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The LMS provider acknowledges receipt of the primitive and successful outcome of the detach service
with a @prim{LMI_@-OK_@-ACK} primitive.  The new state is @psta{LMI_@-UNATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The LMS provider acknowledges receipt of the primitive and failure of the detach service with a
@prim{LMI_@-ERROR_@-ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node Initialization Service Primitives
@subsection Initialization Service Primitives

Initialization service primitives allow the LMS user to enable or disable the protocol service
interface.  Enabling the protocol service interface may require that some action be taken to prepare
the protocol service interface for use or to remove it from use.  For example, where the PPA
corresponds to a signalling data link identifier as defined in Q.704, it may be necessary to perform
switching to connect or disconnect the circuit identification code associated with the signalling
data link identifier.

These service primitives implement the initialization service (@pxref{Initialization Service}).

@menu
* LMI_ENABLE_REQ::
* LMI_ENABLE_CON::
* LMI_DISABLE_REQ::
* LMI_DISABLE_CON::
@end menu

@node LMI_ENABLE_REQ
@subsubsection LMI_ENABLE_REQ

@subsubheading Description

This LMS user originated primitive request that the LMS provider perform the actions necessary to
enable the protocol service interface and confirm that it is enabled.  This primitive is applicable
to both styles of PPA.

@subsubheading Format

The enable request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_uchar lmi_rem[0];
} lmi_enable_req_t;
@end verbatim
@tpindex lmi_enable_req_t
@end display

@subsubheading Parameters

The enable request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-ENABLE_@-REQ}.

@item lmi_@-rem
Specifies a remote address to which to connect the PPA.  The need for and form of this address is
provider-specific.  The length of the field is determined by the length of the @prim{M_PROTO} message
block.  This remote address could be a circuit identification code, an IP address, or some other
form of circuit or channel identifier.

@end table

@subsubheading State

This primitive is valid in the @psta{LMI_@-DISABLED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success the new state is @psta{LMI_@-ENABLE_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The enable request service primitive requires that the LMS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the LMS provider acknowledges successful completion of the enable service with an
@prim{LMI_@-ENABLE_@-CON} primitive.  The new state is @psta{LMI_@-ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the LMS provider acknowledges the failure of the  enable service wtih an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_ENABLE_CON
@subsubsection LMI_ENABLE_CON

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to confirm the successful
completion of the enable service.

@subsubheading Format

The enable confirmation service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_state;
} lmi_enable_con_t;
@end verbatim
@tpindex lmi_enable_con_t
@end display

@subsubheading Parameters

The enable confirmation service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-ENABLE_@-CON}.

@item lmi_@-state
Indicates the state following issuing the enable confirmation primitive.  This field can take on one
of the following values:

@table @psta

@ignore
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@end ignore
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@ignore
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-ENABLE_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-ENABLED}.

@page
@node LMI_DISABLE_REQ
@subsubsection LMI_DISABLE_REQ

@subsubheading Description

This LMS user originated primitive requests that the LMS provider perform the actions necessary to
disable the protocol service interface and confirm that it is disabled.  The primitive is applicable
to both styles of PPA.

@subsubheading Format

The disable request service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
} lmi_disable_req_t;
@end verbatim
@tpindex lmi_disable_req_t
@end display

@subsubheading Parameters

The disable request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-DISABLE_@-REQ}.

@end table

@subsubheading State

The disable request service primitive is valid in the @psta{LMI_@-ENABLED} state and when no local
acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{LMI_@-DISABLE_@-PENDING}.  Upon failure, the state remains unchanged.

@subsubheading Response

The disable request service primitive requires the LMS provider to acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the LMS provider acknowledges successful completion of the disable service with an
@prim{LMI_@-DISABLE_@-CON} primitive.  The new state is @psta{LMI_@-DISABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the LMS provider acknowledges the failure of the disable service with an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_DISABLE_CON
@subsubsection LMI_DISABLE_CON

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to confirm the successful
completion of the disable service.

@subsubheading Format

The disable confirmation service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_state;
} lmi_disable_con_t;
@end verbatim
@tpindex lmi_disable_con_t
@end display

@subsubheading Parameters

The disable confirmation service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-DISABLE_@-CON}.

@item lmi_@-state
Indicates the state following issuing the disable confirmation primitive.  This field can take on one
of the following values:

@table @psta

@ignore
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@end ignore
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@ignore
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end ignore

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in the @psta{LMI_@-DISABLE_@-PENDING} state.

@subsubheading New State

The new state is @psta{LMI_@-DISABLED}.

@page
@node Options Management Service Primitives
@subsection Options Management Service Primitives

The options management service primitives allow the LMS user to negotiate options with the LMS
provider, retrieve the current and default values of options, and check that values specified for
options are correct.

The options management service primitive implement the options management service (@pxref{Options
Management Service}).

@menu
* LMI_OPTMGMT_REQ::
* LMI_OPTMGMT_ACK::
@end menu

@node LMI_OPTMGMT_REQ
@subsubsection LMI_OPTMGMT_REQ

@subsubheading Description

This LMS user originated primitive requests that LMS provider options be managed.

@subsubheading Format

The option management request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_req_t;
@end verbatim
@tpindex lmi_optmgmt_req_t
@end display

@subsubheading Parameters

The option management request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{LMI_@-OPTMGMT_@-REQ}.

@item lmi_@-opt_@-length
Specifies the length of the options.

@item lmi_@-opt_@-offset
Specifies the offset, from the beginning of the @prim{M_PROTO} message block, of the start of the options.

@item lmi_@-mgmt_@-flags
Specifies the management flags which determine what operation the LMS provider is expected to
perform on the specified options.  This field can assume one of the following values:

@table @pval

@item LMI_@-NEGOTIATE
Negotiate the specified value of each specified option and return the negotiated value.

@item LMI_@-CHECK
Check the validity of the specified value of each specified option and return the result.  Do not
alter the current value assumed by the LMS provider.

@item LMI_@-DEFAULT
Return the default value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@item LMI_@-CURRENT
Return the current value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@end table

@end table

@subsubheading State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The option management request service primitive requires the LMS provider to acknowledge receipt of
the primitive as follows:

@itemize @minus

@item @b{Successful}:
Upon success, the LMS provider acknowledges receipt of the service primitive and successful
completion of the options management service with an @prim{LMI_@-OPTMGMT_@-ACK} primitive containing the
options management result.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors)}:
Upon failure, the LMS provider acknowledges receipt of the service primitive and failure to
complete the options management service with an @prim{LMI_@-ERROR_@-ACK} primitive containing the error.
The state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node LMI_OPTMGMT_ACK
@subsubsection LMI_OPTMGMT_ACK

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider upon successful completion of
the options management service.  It indicates the outcome of the options management operation
requested by the LMS user in a @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@subsubheading Format

The option management acknowledgement service primitive consists of one @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_ack_t;
@end verbatim
@tpindex lmi_optmgmt_ack_t
@end display

@subsubheading Parameters

The option management acknowledgement service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-OPTMGMT_@-ACK}.

@item lmi_@-opt_@-length
Indicates the length of the returned options.

@item lmi_@-opt_@-offset
Indicates the offset of the returned options from the start of the @prim{M_PCPROTO} message block.

@item lmi_@-mgmt_@-flags
Indicates the returned management flags.  These flags indicate the overall success of the options
management service.  This field can assume one of the following values:

@table @pval

@item LMI_@-SUCCESS
The LMS provider succeeded in negotiating or returning all of the options specified by the LMS
user in the @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@item LMI_@-FAILURE
The LMS provider failed to negotiate one or more of the options specified by the LMS user.

@item LMI_@-PARTSUCCESS
The LMS provider negotiated a value of lower quality for one or more of the options specified by
the LMS user.

@item LMI_@-READONLY
The LMS provider failed to negotiate one ore more of the options specified by the LMS user because
the option is treated as read-only by the LMS provider.

@item LMI_@-NOTSUPPORT
The LMS provider failed to recognize one or more of the options specified by the LMS user.

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in direct response to an @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The LMS provider follows the following rules when processing option management service requests:

@itemize ---

@item
When the @parm{lmi_@-mgmt_@-flags} field in the @prim{LMI_@-OPTMGMT_@-REQ} primitive is set to @pval{LMI_@-NEGOTIATE},
the LMS provider will attempt to negotiate a value for each of the options specified in the
request.

@item
When the flags are @pval{LMI_@-DEFAULT}, the LMS provider will return the default values of the specified
options, or the default values of all options known to the LMS provider if no options were
specified.

@item
When the flags are @pval{LMI_@-CURRENT}, the LMS provider will return the current values of the specified
options, or all options.

@item
When the flags are @pval{LMI_@-CHECK}, the LMS provider will attempt to negotiate a value for each of the
options specified in the request and return the resulg of the negotiation, but will not affect the
current value of the option.

@end itemize

@page
@node Event Reporting Service Primitives
@subsection Event Reporting Service Primitives

The event reporting service primitives allow the LMS provider to indicate asynchronous errors,
events and statistics collection to the LMS user.

These service primitives implement the event reporting service (@pxref{Event Reporting Service}).

@menu
* LMI_ERROR_IND::
* LMI_STATS_IND::
* LMI_EVENT_IND::
@end menu

@node LMI_ERROR_IND
@subsubsection LMI_ERROR_IND

@subsubheading Description

This LMS provider originated service primitive is issued by the LMS provider when it detects and
asynchronous error event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The error indication service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_errno;
    lmi_ulong lmi_reason;
    lmi_ulong lmi_state;
} lmi_error_ind_t;
@end verbatim
@tpindex lmi_error_ind_t
@end display

@subsubheading Parameters

The error indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-ERROR_@-IND}.

@item lmi_@-errno
Indicates the LMI error number describing the error.  This field can have one of the following
values:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@item lmi_@-reason

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{lmi_@-errno} field
is @perr{LMI_@-SYSERR}, the @parm{lmi_@-reason} field is the UNIX error number as described in
@manref{errno(3)}.

@item lmi_@-state

Indicates the state of the LMS provider at the time that the primitive was issued.
This field can have one of the following values:

@table @psta
@item LMI_@-UNATTACHED
No PPA attached, awaiting @prim{LMI_@-ATTACH_@-REQ}.
@item LMI_@-ATTACH_@-PENDING
Waiting for attach.
@item LMI_@-UNUSABLE
Device cannot be used, STREAM in hung state.
@item LMI_@-DISABLED
PPA attached, awaiting @prim{LMI_@-ENABLE_@-REQ}.
@item LMI_@-ENABLE_@-PENDING
Waiting to send @prim{LMI_@-ENABLE_@-CON}.
@item LMI_@-ENABLED
Ready for use, awaiting primitive exchange.
@item LMI_@-DISABLE_@-PENDING
Waiting to send @prim{LMI_@-DISABLE_@-CON}.
@item LMI_@-DETACH_@-PENDING
Waiting for detach.
@end table

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
LMS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node LMI_STATS_IND
@subsubsection LMI_STATS_IND

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to indicate a periodic
statistics collection event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The statistics indication service primitive consists of one @prim{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_interval;
    lmi_ulong lmi_timestamp;
} lmi_stats_ind_t;
@end verbatim
@tpindex lmi_stats_ind_t
@end display

Following this structure within the @prim{M_PROTO} message block is the provider-specific statistics.

@subsubheading Parameters

The statistics indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-STATS_@-IND}.

@item lmi_@-interval
Indicates the statistics collection interval to which the statistics apply.  This interval is
specified in milliseconds.

@item lmi_@-timestamp
Indicates the UNIX time (from epoch) at which statistics were collected.  The timestamp is given in
milliseconds from epoch.

@end table

@subsubheading State

This service primitive may be issued by the LMS provider in any state in which a local
acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node LMI_EVENT_IND
@subsubsection LMI_EVENT_IND

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider to indicate an asynchronous
event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format

The event indication service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_objectid;
    lmi_ulong lmi_timestamp;
    lmi_ulong lmi_severity;
} lmi_event_ind_t;
@end verbatim
@tpindex lmi_event_ind_t
@end display

Following this structure within the @prim{M_PROTO} message block is the provider-specific event
information.

@subsubheading Parameters

THe event indication service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{LMI_@-EVENT_@-IND}.

@item lmi_@-objectid
Indicates the provider-specific object identifier that identifies the managed object to which the
event is associated.

@item lmi_@-timestamp
Indicates the UNIX time from epoch (in milliseconds).

@item lmi_@-severity
Indicates the provider-specific severity of the event.

@end table

@subsubheading State

This service primitive can be issued by the LMS provider in any state where a local
acknowledgement is not pending.  Normally the LMS provider must be in the @psta{LMI_@-ENABLED} state for
event reporting to occur.

@subsubheading New State

The new state remains unchanged.

@page
@node Protocol Service Primitives
@section Protocol Service Primitives

Protocol service primitives implement the Signalling Link interface protocol.  Protocol service
primitives provide the SLS user with the ability to initialize the link, transfer data on the link,
request and receive reports of receive and transmit congestion, restore failed signalling links,
handle processor outage conditions, manage options and register for and receive event notifications.

These service primitives implement the protocol services (@pxref{Protocol Services}).

@menu
* Link Initialization Service Primitives::
* Data Transfer Service Primitives::
* Congestion Service Primitives::
* Restoration Service Primitives::
* Processor Outage Service Primitives::
* Link Option Management Service Primitives::
* Event Notification Service Primitives::
@end menu

@node Link Initialization Service Primitives
@subsection Link Initialization Service Primitives

The link initialization primitives permit the SLS user to power on the signalling data terminal,
specify emergency or normal alignment, start the signalling link and bring it into service, and stop
the signalling link or be informed of link failures.

These service primitives implement the link initialization services (@pxref{Link Initialization
Services}).

@menu
Power On:
* SL_POWER_ON_REQ::

Emergency:
* SL_EMERGENCY_REQ::
* SL_EMERGENCY_CEASES_REQ::

Start:
* SL_START_REQ::
* SL_IN_SERVICE_IND::

Stop:
* SL_OUT_OF_SERVICE_IND::
* SL_STOP_REQ::
@end menu

@node SL_POWER_ON_REQ
@subsubsection SL_POWER_ON_REQ

@subsubheading Description

The SLS user originated service primitive request that the SLS provider power on the signalling data
terminal.  Not all signalling data terminals can be powered on independent of the existence of the
signalling link interface.  Software signalling data terminals will mark idle on signalling links
until they are powered on, after which they will idle FISUs.

@subsubheading Format

The power on service primitive consists of one @prim{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_power_on_req_t;
@end verbatim
@tpindex sl_power_on_req_t
@end display

@subsubheading Parameters

The power on service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-POWER_@-ON_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state.
This primitive is valid in the @psta{SL_@-STATE_@-POWER_@-OFF} link state; however, when issued in
another link state the primitive is ignored and does not generate a non-fatal error.

@subsubheading New State

The new link state is @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading Rules

@subsubheading Response

The power on service primitive does not require receipt acknowledgement from the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the power on service primitive does not require acknowledgement.  

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider indicates failure using an @prim{LMI_@-ERROR_@-ACK} primitive
containing the error.

@end itemize

Note that the SLS provider should ignore this primitive, and not generate a non-fatal error, when
the management interface is in the @psta{LMI_@-ENABLED} state and the link state is other than
@psta{SL_@-STATE_@-POWER_@-OFF}.

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node SL_EMERGENCY_REQ
@subsubsection SL_EMERGENCY_REQ

@subsubheading Description

The emergency request service primitive provides the SLS user with the ability to specify that
emergency alignment procedures should be used on the current or next alignment of the signalling
link.  Emergency alignment procedures a shorter in duration (shorter proving period) than normal
alignment procedures.

@subsubheading Format

The emergency request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_emergency_req_t;
@end verbatim
@tpindex sl_emergency_req_t;
@end display

@subsubheading Parameters

The emergency request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-EMERGENCY_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state.  The primitive is valid
in any link state.

@subsubheading New State

The management and link state remains unchanged.

@subsubheading Response

The emergency request service primitive does not require receipt acknowledgement.

@itemize @minus

@item @b{Successful:}
When successful, the emergency request service primitive does not require receipt acknowledgement.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive with an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_EMERGENCY_CEASES_REQ
@subsubsection SL_EMERGENCY_CEASES_REQ

@subsubheading Description

The emergency ceases request service primitive provides the SLS user with the ability to specify
that normal alignment procedures should be used on the current or next alignment of the signalling
link.  Normal alignment procedures are longer in duration (longer proving period) than emergency
alignment procedures.

@subsubheading Format

The emergency ceases request primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_emergency_ceases_req_t;
@end verbatim
@tpindex sl_emergency_ceases_req_t
@end display

@subsubheading Parameters

The emergency ceases request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-EMERGENCY_@-CEASES_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state.  The primitive is valid
in any link state.

@subsubheading New State

The management and link state remains unchanged.

@subsubheading Response

The emergency ceases request service primitive does not require receipt acknowledgement.

@itemize @minus

@item @b{Successful:}
When successful, the emergency ceases request service primitive does not require receipt acknowledgement.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive with an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_START_REQ
@subsubsection SL_START_REQ

@subsubheading Description

The start request service primitive allows the SLS user to request that a signalling link be aligned
and brought into service by the SLS provider.

@subsubheading Format

The start request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_start_req_t;
@end verbatim
@tpindex sl_start_req_t
@end display

@subsubheading Parameters

The start request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-START_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in management state @psta{LMI_@-ENABLED}.  This primitive is valid in
link state @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading New State

The new link state is @psta{SL_@-STATE_@-INITIAL_@-ALIGNMENT}.

@subsubheading Response

The start request service primitive requires a response from the SLS provider indicating the success
or failure of the start request.

@itemize @minus

@item @b{Successful link start:}
When successful, the SLS provider indicates success with the @prim{SL_@-IN_@-SERVICE_@-IND}
primitive indicating that the signalling link has been brought into service.  A significant delay in
time might exist between the request and the in-service indication.  This results in the
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@item @b{Unuccessful link start:}
When unsuccessful, the SLS provider indicates failure to bring the link in-service with the
@prim{SL_@-OUT_@-OF_@-SERVICE_@-IND} primitive, containing the reason for failure.  This results int
the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item @b{Non-fatal errors:}
Non-fatal errors are indicated by the SLS provider using the @prim{LMI_@-ERROR_@-ACK} primitive with
the error number and reason contained.

@end itemize

When the management state is @psta{LMI_@-ENABLED}, but the link state is other than
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} and @psta{SL_@-STATE@-POWER_@-OFF}, the SLS provider should
ignore the @prim{SL_@-START_@-REQ} primitive and not generate a non-fatal error.

@subsubheading Reason for Failure

Applicable reasons for unsuccessful link start are as follows:

@table @perr

@item SL_@-FAIL_@-UNSPECIFIED
The signalling link failed for an unspecified reason.
@item SL_@-FAIL_@-CONG_@-TIMEOUT
The signalling link failed because of congestion timeout (T6 expiry).
@item SL_@-FAIL_@-ACK_@-TIMEOUT
The signalling link failed because of acknowledgement timeout (T7 expiry).
@item SL_@-FAIL_@-ABNORMAL_@-BSNR
The signalling link failed because of receipt of an abnormal backward sequence number (BSNR).
@item SL_@-FAIL_@-ABNORMAL_@-FIBR
The signalling link failed because of receipt of an abnormal forward indicator bit (FIBR).
@item SL_@-FAIL_@-SUERM_@-EIM
The signalling link failed because the SUERM or EIM error rate threshold was exceeded.
@item SL_@-FAIL_@-ALIGNMENT_@-NOT_@-POSSIBLE
The signalling link failed because the AERM threshold was exceeded and the maximum number of proving
periods was exceeded.
@item SL_@-FAIL_@-RECEIVED_@-SIO
The signalling link failed due to receipt of an SIO during or after alignment.
@item SL_@-FAIL_@-RECEIVED_@-SIN
The signalling link failed due to receipt of an SIN after proving.
@item SL_@-FAIL_@-RECEIVED_@-SIE
The signalling link failed due to receipt of an SIE after proving.
@item SL_@-FAIL_@-RECEIVED_@-SIOS
The signalling link failed due to receipt of an SIOS.
@item SL_@-FAIL_@-T1_@-TIMEOUT
The signalling link failed due to failure to align with remote (T1 timeout).

@end table

Applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_IN_SERVICE_IND
@subsubsection SL_IN_SERVICE_IND

@subsubheading Description

The in-service indication service primitive is issued by the SLS provider to indicate to the SLS
user that a previously invoked link start has successfully aligned and brought the signalling link
into service.

@subsubheading Format

The in-service indication service primitive consists of one @prim{M_PROTO} message block, structured
as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_in_service_ind_t;
@end verbatim
@tpindex sl_in_service_ind_t
@end display

@subsubheading Parameters

The in-service indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-IN_@-SERVICE_@-IND}.

@end table

@subsubheading State

This primitive is only issued in the @psta{LMI_@-ENABLED} management state.  This primitive is only
issued in the @psta{SL_@-STATE_@-ALIGNED_@-READY} state.

@subsubheading New State

The new link state is @psta{SL_@-STATE_@-IN_@-SERVICE}.

@subsubheading Rules

The following rules are observed by the SLS provider when issuing the in-service indication
primitive:

@itemize ---

@item
The primitive is only issued in response to a @prim{SL_@-START_@-REQ} primitive that was issued from
the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} state.

@item
The primitive is only issued once the signalling link has achieved the
@psta{SL_@-STATE_@-IN_@-SERVICE} state.

@end itemize



@page
@node SL_OUT_OF_SERVICE_IND
@subsubsection SL_OUT_OF_SERVICE_IND

@subsubheading Description

The out-of-service indication service primitive is issued by the SLS provider to indicate to the SLS
user that a previously invoked link start has been unsuccessful, or that a previously in-service
signalling link has failed.

@subsubheading Format

The out-of-service indication service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
    sl_ulong sl_reason;
} sl_out_of_service_ind_t;
@end verbatim
@tpindex sl_out_of_service_ind_t
@end display

@subsubheading Parameters

The out-of-service indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-OUT_@-OF_@-SERVICE_@-IND}.

@item sl_@-timestamp
Indication the time of the failure.  The time is indicated as UNIX time from epoch in milliseconds.

@item sl_@-reason
Indicates the reason for failure to start the link or the reason for failure of an in-service link.
The @parm{sl_@-reason} field can assume one of the following values:

@table @pval

@item SL_@-FAIL_@-UNSPECIFIED
The signalling link failed for an unspecified reason.
@item SL_@-FAIL_@-CONG_@-TIMEOUT
The signalling link failed because of congestion timeout (T6 expiry).
@item SL_@-FAIL_@-ACK_@-TIMEOUT
The signalling link failed because of acknowledgement timeout (T7 expiry).
@item SL_@-FAIL_@-ABNORMAL_@-BSNR
The signalling link failed because of receipt of an abnormal backward sequence number (BSNR).
@item SL_@-FAIL_@-ABNORMAL_@-FIBR
The signalling link failed because of receipt of an abnormal forward indicator bit (FIBR).
@item SL_@-FAIL_@-SUERM_@-EIM
The signalling link failed because the SUERM or EIM error rate threshold was exceeded.
@item SL_@-FAIL_@-ALIGNMENT_@-NOT_@-POSSIBLE
The signalling link failed because the AERM threshold was exceeded and the maximum number of proving
periods was exceeded.
@item SL_@-FAIL_@-RECEIVED_@-SIO
The signalling link failed due to receipt of an SIO during or after alignment.
@item SL_@-FAIL_@-RECEIVED_@-SIN
The signalling link failed due to receipt of an SIN after proving.
@item SL_@-FAIL_@-RECEIVED_@-SIE
The signalling link failed due to receipt of an SIE after proving.
@item SL_@-FAIL_@-RECEIVED_@-SIOS
The signalling link failed due to receipt of an SIOS.
@item SL_@-FAIL_@-T1_@-TIMEOUT
The signalling link failed due to failure to align with remote (T1 timeout).

@end table

@end table

@subsubheading State

This primitive is only issued in the @psta{LMI_@-ENABLED} management state.  This primitive is only
issued from a link state other than @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} or
@psta{SL_@-STATE_@-POWER_@-OFF}.

@subsubheading New State

The new link state is @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading Rules

The following rules are observed by the SLS provider when issuing the out-of-service indication
primitive:

@itemize ---

@item
The primitive is only issued in response to a @prim{SL_@-START_@-REQ} primitive that was issued from
the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} state, or as a result of a link failure from the
@psta{SL_@-STATE_@-IN_@-SERVICE} state.

@item
The primitive is only issued once the signalling link has achieved the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} state.

@end itemize


@page
@node SL_STOP_REQ
@subsubsection SL_STOP_REQ

@subsubheading Description

The stop request primitive allows the SLS user to request that a signalling link be brought out of
service by the SLS provider.

@subsubheading Format

The stop request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_stop_req_t;
@end verbatim
@tpindex sl_stop_req_t
@end display

@subsubheading Parameters

The stop request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-STOP_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in management state @psta{LMI_@-ENABLED}.  This primitive is valid in
link state
@psta{SL_@-STATE_@-INITIAL_@-ALIGNMENT},
@psta{SL_@-STATE_@-ALIGNED_@-READY},
@psta{SL_@-STATE_@-ALIGNED_@-NOT_@-READY} or
@psta{SL_@-STATE_@-IN_@-SERVICE}.

@subsubheading New State

The new link state is @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading Response

The stop request service primitive does not require receipt acknowledgement from the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the SLS provider does not need to acknowledge the stop request service primitive.
The resulting link state is @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the stop request service primitive with
a @prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason.  The resulting state is
unchanged.

@end itemize

When the management state is @psta{LMI_@-ENABLED}, but the link state is
@psta{SL_@-STATE_@-POWER_@-OFF} or @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}, the SLS provider should
ignore the @prim{SL_@-STOP_@-REQ} primitive and not generate a non-fatal error.

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node Data Transfer Service Primitives
@subsection Data Transfer Service Primitives

Data transfer service primitives provider the SLS user with the ability to send and receive message
signal units on an in-service signalling link.
These service primitives implement the data transfer service (@pxref{Data Transfer Service}).

@menu
* SL_PDU_REQ::
* SL_PDU_IND::
@end menu

@node SL_PDU_REQ
@subsubsection SL_PDU_REQ

@subsubheading Description

The PDU request service primitive provides the SLS user with the ability to request that a message
signal unit be transmitted on an in-service signalling link.

@subsubheading Format

The PDU request service primitive consists of zero or one @prim{M_PROTO} message block and one
@prim{M_DATA} message block containing the message signal unit.  The structure of the @prim{M_PROTO}
message block is as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_mp;
} sl_pdu_req_t;
@end verbatim
@tpindex sl_pdu_req_t
@end display

@subsubheading Parameters

The PDU request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-PDU_@-REQ}.

@item sl_@-mp
Specifies the message priority for the message signal unit.  Message priorities are
provider-specific, but are typically between 0 and 3.  This message priority field is only
applicable to SS7 protocol variants that place message priority bits in a field of the Level 2
header (TTC).

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state, and is valid from the
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The management and link state remains unchanged.

@subsubheading Rules

The following rules are observed when issuing the PDU request service primitive:

@itemize ---

@item
The @prim{M_PROTO} message block is optional and is only necessary for the TTC SS7 protocol variant,
or an SS7 protocol variant which places message priority bits into the Level 2 header.

@item
The PDU request service primitive does not require a response from the SLS provider.

@end itemize

@subsubheading Response

The PDU request service primitive is not acknowledged.


@page
@node SL_PDU_IND
@subsubsection SL_PDU_IND

@subsubheading Description

The PDU indication service primitive provides the SLS user with the ability to receive message
signal units from a signalling link.

@subsubheading Format

The PDU indication service primitive consists of zero or more @prim{M_PROTO} message blocks and one
or more @prim{M_DATA} message blocks containing the message signal unit.  The structure of the
@prim{M_PROTO} message block is as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_mp;
} sl_pdu_ind_t;
@end verbatim
@tpindex sl_pdu_ind_t
@end display

@subsubheading Parameters

The PDU indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-PDU_@-IND}.

@item sl_@-mp
Indicates the message priority of the message signal unit.  Message priorities are
provider-specific, but are typically between 0 and 3.  This message priority field is only
applicable to SS7 protocol variants that place message priority bits in a field of the Level 2
header (e.g. TTC).

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state, and is valid from the
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The management and link states remain unchanged.

@subsubheading Rules

The following rules are observed when issuing the PDU indication service primitive:

@itemize ---

@item
The @prim{M_PROTO} message block is optional and is only necessary for the TTC SS7 protocol variant,
or an SS7 protocol variant that passes message priority bits from the Level 2 header.

@item
The PDU indication service primitive does not require a response from the SLS user.

@end itemize


@page
@node Congestion Service Primitives
@subsection Congestion Service Primitives

These service primitives implement the congestion services (@pxref{Congestion Services}).

@menu
Transmit Congestion:
* SL_LINK_CONGESTED_IND::
* SL_LINK_CONGESTION_CEASED_IND::

Receive Congestion:
* SL_CONGESTION_DISCARD_REQ::
* SL_CONGESTION_ACCEPT_REQ::
* SL_NO_CONGESTION_REQ::
@end menu

@node SL_LINK_CONGESTED_IND
@subsubsection SL_LINK_CONGESTED_IND

@subsubheading Description

The link congested indication service primitive provides the SLS provider with the ability to
inidicate link transmit congestion onset at a congestion level to the SLS user.

@subsubheading Format

The link congested indication service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
    sl_ulong sl_cong_status;            /* congestion status */
    sl_ulong sl_disc_status;            /* discard status */
} sl_link_cong_ind_t;
@end verbatim
@tpindex sl_link_cong_ind_t
@end display

@subsubheading Parameters

The link congested indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-LINK_@-CONGESTED_@-IND}.

@item sl_@-timestamp
Indicates the time at which the change in congestion status occurred.  This is UNIX time from epoch
timestamp in milliseconds.

@item sl_@-cong_@-status
Indicates the congestion status.  The congestion status is the maximum level at which transmit congestion
onset has occurred.  This field is provider-specific but can typically take on a value from 0 to 3.
The SLS user should signal congestion to the senders of messages with message priority less than the
congestion status but should not discard messages of that priority.

@item sl_@-disc_@-status
Indicates the discard status.  The discard status is the maximum level at which transmit congestion discard
has occurred.  This field is provider-specific but can typically take on a value from 0 to 3.
The SLS user should signal congestion to senders of message with message priority less than the
discard status and should also discard messages of that priority.

@end table

@subsubheading State

This primitive is only issued in the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The management and link state remain unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the link congested indication service
primitive:

@itemize ---

@item
The service primitive is only issued from the @psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@item
The service primitive is only issued from the @psta{LMI_@-ENABLED} management state.

@item
The service primitive is only issued when the congestion status or discard status increases from the
value that was last indicated with either a @prim{SL_@-LINK_@-CONGESTION_@-IND} or
@prim{SL_@-LINK_@-CONGESTION_@-CEASED_@-IND} primitive.

@end itemize

@subsubheading Response

The SLS user upon receiving this primitive should avoid sending messages of message priority less
than the transmit congestion status, and must not send messages of message priority less than the
discard status.  The SLS provider does not actually discard messages with message priority less than
the discard status: it is the responsibility of the SLS user to discard lower priority messages.

Typically the SLS user is the SS7 Message Transfer Part.  The SS7 MTP issues congestion indications
to local MTP-Users and issues transfer-controlled messages to sending signalling points when
transmit congestion onset occurs.  When transmit congestion discard occurs, the SS7 MTP continues
to issue congestion indications to local MTP-User and transfer-controlled message to sending
signalling points, but also discards messages with insufficient priority for the discard level.

@page
@node SL_LINK_CONGESTION_CEASED_IND
@subsubsection SL_LINK_CONGESTION_CEASED_IND

@subsubheading Description

The link congestion ceased indication service primitive allows the SLS provider to indicate to the
SLS user when transmit congestion abates.

@subsubheading Format

The link congestion ceased service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
    sl_ulong sl_cong_status;            /* congestion status */
    sl_ulong sl_disc_status;            /* discard status */
} sl_link_cong_ceased_ind_t;
@end verbatim
@tpindex sl_link_cong_ceased_ind_t
@end display

@subsubheading Parameters

The link congestion ceased service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-CONGESTION_@-CEASED_@-IND}.

@item sl_@-timestamp
Indicates the time at which the change in transmit congestion status occurred.  This is UNIX time from epoch
timestamp in milliseconds.

@item sl_@-cong_@-status
Indicates the congestion status.  The congestion status is the maximum level at which transmit
congestion onset has occurred.  This field is provider-specific but can typically take on a value
from 0 to 3.  The SLS user should signal congestion to the senders of messages with message priority
less than the congestion status but should not discard messages of that priority.

@item sl_@-disc_@-status
Indicates the discard status.  The discard status is the maximum level at which transmit congestion
discard has occurred.  This field is provider-specific but can typically take on a value from 0 to
3.  The SLS user should signal congestion to senders of message with message priority less than the
discard status and should also discard messages of that priority.

@end table

@subsubheading State

This primitive is only issued in the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The management and link state remain unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the link congestion ceased indication
service primitive:

@itemize ---

@item
The service primitive is only issued from the @psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@item
The service primitive is only issued from the @psta{LMI_@-ENABLED} management state.

@item
The service primitive is only issued when the congestion status or discard status decreases from the
value that was last indicated with either a @prim{SL_@-LINK_@-CONGESTION_@-IND} or
@prim{SL_@-LINK_@-CONGESTION_@-CEASED_@-IND} primitive.

@end itemize

@subsubheading Response

The SLS user upon receiving this primitive should cease discarding or sending congestion indications
or transfer-controlled messages for the congestion level which has abated.


@page
@node SL_CONGESTION_DISCARD_REQ
@subsubsection SL_CONGESTION_DISCARD_REQ

@subsubheading Description

The congestion discard request service primitive is used by the SLS user to specify receive
congestion discard.

Normally an SLS user will first signal receive congestion onset with the
@prim{SL_@-CONGESTION_@-ACCEPT_@-REQ} primitive before signalling receive congestion discard with
this @prim{SL_@-CONGESTION_@-DISCARD_@-REQ} primitive.  The congestion discard service primitive
requests that the SLS provider discard all new undelivered message signal units and not acknowledge
them to the remote SLS provider.  The SLS provider will also generate receive congestion indications
to the remote SLS provider (i.e. will periodically generate SIB).

@subsubheading Format

The congestion discard request service primitive consists of one @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_cong_discard_req_t;
@end verbatim
@tpindex sl_cong_discard_req_t
@end display

@subsubheading Parameters

The congestion discard request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-CONGESTION_@-DISCARD_@-REQ}.

@end table

@subsubheading State

This primitive is valid only in @psta{LMI_@-ENABLED} management state.  It is valid in
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The link and management state remains the same.

@subsubheading Rules

The SLS user should observe the following rules when issuing the congestion discard request service
primitive:

@itemize ---

@item
The SLS user should not generate a congestion discard request unless a congestion accept request was
previously issued.

@item
The SLS user should not generate a congestion discard request unless a congestion accept request was
previously issued @emph{and} a message signal unit has been delivered since the congestion accept
request was issued.

@end itemize

@subsubheading Response

The congestion discard request service primitive does not require receipt acknowledgement.

@itemize @minus

@item @b{Successful:}
When successful, this primitive does not require acknowledgement.  The state remains the same.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason.  The state remains the same.

@end itemize

Note that if the SLS provider is in the @psta{LMI_@-ENABLED} state, but the link is not in the
@psta{SL_@-STATE_@-IN_@-SERVICE} state, the primitive should be ignored and no non-fatal error
generated.

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_CONGESTION_ACCEPT_REQ
@subsubsection SL_CONGESTION_ACCEPT_REQ

@subsubheading Description

The congestion accept request service primitive is used by the SLS user to specify receive
congestion onset.

@subsubheading Format

The congestion accept request service primitive consists of one @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_cong_accept_req_t;
@end verbatim
@tpindex sl_cong_accept_req_t
@end display

@subsubheading Parameters

The congestion accept request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-CONGESTION_@-ACCEPT_@-REQ}.

@end table

@subsubheading State

This primitive is valid only in @psta{LMI_@-ENABLED} management state.  It is valid in
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The link and management state remains the same.

@subsubheading Response

The congestion accept request service primitive does not require receipt acknowledgement.

@itemize @minus

@item @b{Successful:}
When successful, this primitive does not require acknowledgement.  The state remains the same.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason.  The state remains the same.

@end itemize

Note that if the SLS provider is in the @psta{LMI_@-ENABLED} state, but the link is not in the
@psta{SL_@-STATE_@-IN_@-SERVICE} state, the primitive should be ignored and no non-fatal error
generated.

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_NO_CONGESTION_REQ
@subsubsection SL_NO_CONGESTION_REQ

@subsubheading Description

The no congestion request service primitive is used by the SLS user to specify receive
congestion abatement.

@subsubheading Format

The no congestion request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_no_cong_req_t;
@end verbatim
@tpindex sl_no_cong_req_t
@end display

@subsubheading Parameters

The no congestion request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-NO_@-CONGESTION_@-REQ}.

@end table

@subsubheading State

This primitive is valid only in @psta{LMI_@-ENABLED} management state.  It is valid in
@psta{SL_@-STATE_@-IN_@-SERVICE} link state.

@subsubheading New State

The link and management state remains the same.

@subsubheading Response

The no congestion request service primitive does not require receipt acknowledgement.

@itemize @minus

@item @b{Successful:}
When successful, this primitive does not require acknowledgement.  The state remains the same.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason.  The state remains the same.

@end itemize

Note that if the SLS provider is in the @psta{LMI_@-ENABLED} state, but the link is not in the
@psta{SL_@-STATE_@-IN_@-SERVICE} state, the primitive should be ignored and no non-fatal error
generated.

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table



@page
@node Restoration Service Primitives
@subsection Restoration Service Primitives

The restoration service primitives permit the SLS user to perform functions necessary for BSNT
retrieval to initiate or respond to sequenced changeover, buffer updating to respond to sequenced or
time-controlled changeover, and buffer clearing to respond to time-controlled changeover or
processor outage related failures.

These service primitives implement the restoration services (@pxref{Restoration Services}).

@menu
BSNT Retrieval:
* SL_RETRIEVE_BSNT_REQ::
* SL_BSNT_IND::
* SL_BSNT_NOT_RETRIEVABLE_IND::

Buffer Updating:
* SL_RETRIEVAL_REQUEST_AND_FSNC_REQ::
* SL_RETRIEVED_MESSAGE_IND::
* SL_RETRIEVAL_COMPLETE_IND::
* SL_RETRIEVAL_NOT_POSSIBLE_IND::

Buffer Clearing:
* SL_CLEAR_BUFFERS_REQ::
* SL_CLEAR_RTB_REQ::
* SL_RB_CLEARED_IND::
* SL_RTB_CLEARED_IND::
@end menu

@node SL_RETRIEVE_BSNT_REQ
@subsubsection SL_RETRIEVE_BSNT_REQ

@subsubheading Description

The retrieve BSNT request service primitive allows the SLS user to request retrieval of the BSNT
(backward sequence number transmitted) which indicates the sequence number of the remove message
signal unit sent that was last acknowledged.  This function is necessary to properly generate or
respond to a sequenced changeover procedure by the SLS user.

@subsubheading Format

The retrieve BSNT request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_retrieve_bsnt_req_t;
@end verbatim
@tpindex sl_retrieve_bsnt_req_t
@end display

@subsubheading Parameters

The retrieve BSNT request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-RETRIEVE_@-BSNT_@-REQ}.

@end table

@subsubheading State

This primitive is valid only in the @psta{LMI_@-ENABLED} management state.  The primitive is valid
in the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} state.

@subsubheading New State

The new state is unchanged.

@subsubheading Rules

The SLS user should observe the following rules when issuing the retrieve BSNT request service
primitive:

@itemize ---

@item
The SLS user should ensure that the link is in the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} state
before issuing this primitive.  One easy way to ensure that the link is in this state is to issue
the stop request @prim{SL_@-STOP_@-REQ}.

@end itemize

@subsubheading Response

This service primitive requires the SLS provider to acknowledge success of failure of the retrieval
operation.

@itemize @minus

@item @b{Successful retrieval:}
When successful, the SLS provider indicate the retrieved BSNT value using the @prim{SL_@-BSNT_@-IND}
primitive containing the BSNT value.  The management and link states remain the same.

@item @b{Unsuccessful retrieval:}
When unsuccessful, the SLS provider indicates that the BSNT value cannot be retrieved using the
@prim{SL_@-BSNT_@-NOT_@-RETRIEVABLE_@-IND}.  The management and link states remain the same.

@item @b{Non-fatal errors:}
When a non-fatal error occurs, the SLS provider indicates the error using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and the reason.

@end itemize

When the management state is @psta{LMI_@-ENABLED} and the link state is other than
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}, the SLS provider should respond with
@prim{SL_@-BSNT_@-NOT_@-RETRIEVABLE_@-IND} instead of generating a non-fatal error.

@subsubheading Reason for Failure

Most SLS providers are always successful in retrieving the BSNT value.  Applicable reasons for
failing to retrieve the BSNT value are as follows:

@enumerate

@item Hardware failure.

@item The signalling link is in the incorrect state (e.g. the in-service state).

@end enumerate

Applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node SL_BSNT_IND
@subsubsection SL_BSNT_IND

@subsubheading Description

The BSNT indication service primitive is originated by the SLS provider to indicate the retrieved
BSNT value in response to a @prim{SL_@-RETRIEVE_@-BSNT_@-REQ} primitive from the SLS user.

@subsubheading Format

The BSNT indication service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_bsnt;
} sl_bsnt_ind_t;
@end verbatim
@tpindex sl_bsnt_ind_t
@end display

@subsubheading Parameters

The BSNT indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-BSNT_@-IND}.

@item sl_@-bsnt
Indicates the value of the BSNT.  The format of the BSNT value is provider-specific but is typically
a 7-bit or 12-bit sequence number.

@end table

@subsubheading State

This primitive is valid in management state @psta{LMI_@-ENABLED} and link state
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing a BSNT indication service primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item
The primitive is only issued in response to an outstanding @prim{SL_@-RETRIEVE_@-BSNT_@-REQ}
primitive when it is possible for the SLS provider to retrieve the BSNT value.

@end itemize

@subsubheading Response

The primitive does not require a response from the SLS user.


@page
@node SL_BSNT_NOT_RETRIEVABLE_IND
@subsubsection SL_BSNT_NOT_RETRIEVABLE_IND

@subsubheading Description

The BSNT not retrievable indication service primitive is originated by the SLS provider to indicate
that the BSNT value cannot be retrieved in response to a @prim{SL_@-RETRIEVE_@-BSNT_@-REQ} primitive
from the SLS user.

@subsubheading Format

The BSNT not retrievable indication service primitive consists of one @prim{M_PROTO} or
@prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_bsnt;
} sl_bsnt_not_retr_ind_t;
@end verbatim
@tpindex sl_bsnt_not_retr_ind_t
@end display

@subsubheading Parameters

The BSNT not retrievable indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-BSNT_@-NOT_@-RETRIEVABLE_@-IND}.

@item sl_@-bsnt
Indicates the value of the BSNT.  This value is the known value of the last acknowledged message
signal unit from the remote peer or minus one (-1UL) indicating that a reasonable BSNT value is not
known.  The format of the BSNT is provider-specific, but is typically a 7-bit or 12-bit sequence
number.

@end table

@subsubheading State

This primitive is valid in management state @psta{LMI_@-ENABLED} and is valid in any link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the BSNT not retrievable indication
service primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state, but may be issued from
any link state.

@item
The primitive is only issued in response to an outstanding @prim{SL_@-RETRIEVE_@-BSNT_@-REQ}
primitive when it is not possible for the SLS provider to retrieve the BSNT value.

@item
When issued, a non-fatal error for the same request will not be issued.

@end itemize

@subsubheading Response

The primitive does not require a response from the SLS user.


@page
@node SL_RETRIEVAL_REQUEST_AND_FSNC_REQ
@subsubsection SL_RETRIEVAL_REQUEST_AND_FSNC_REQ

@subsubheading Description

The retrieval request and FSNC request service primitive is originated by the SLS user when it
wishes to update the retransmission buffer with the last known acknowledged message (FSNC).  The
last known acknowledged message is acquired by the SLS user with the sequence changeover procedure
of the message transfer part.  The primitive requests that the SLS provider update the
retransmission buffer and then deliver the contents of the updated retransmission buffer and
transmit buffers to the SLS user.

@subsubheading Format

The retrieval request and FSNC request service primitive consists of one @prim{M_PROTO} or
@prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_fsnc;
} sl_retrieval_req_and_fsnc_t;
@end verbatim
@tpindex sl_retrieval_req_and_fsnc_t
@end display

@subsubheading Parameters

The retrieval request and FSNC request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-RETRIEVAL_@-REQ_@-AND_@-FSNC_@-REQ}.

@item sl_@-fsnc
Specifies the value of the FSNC (forward sequence number confirmed).  This is the last known message
to be acknowledge by the remote SLS provider.  The format of the FSNC is provider-specific, but is
typically a 7-bit or 12-bit sequence number.

@end table

@subsubheading State

This primitive is only valid in management state @psta{LMI_@-ENABLED} and is valid in link state
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

@subsubheading Response

The retrieval request and FSNC request service primitive request the SLS provider to acknowledge
the result of the retrieval action as follows:

@itemize @minus

@item @b{Successful retrieval:}
When successful, the SLS provider indicates the updated contents of the retransmission buffer and the
contents of the transmission buffer using the @prim{SL_@-RETRIEVED_@-MESSAGE_@-IND} primitive
followed by a @prim{SL_@-RETRIEVAL_@-COMPLETE_@-IND} primitive.  The state remains unchanged.

@item @b{Unsuccessful retrieval:}
When unsuccessful, the SLS provider indicates failure to retrieve the contents of the buffers with
the @prim{SL_@-RETRIEVAL_@-NOT_@-POSSIBLE_@-IND} primitive.

@item @b{Non-fatal errors:}
When a non-fatal error occurs, the SLS provider indicates the error using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and the reason.  The state remains
unchanged.

@end itemize

When the management stat is @psta{LMI_@-ENABLED} and the link state is other than
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}, the SLS provider should respond with
@prim{SL_@-RETRIEVAL_@-NOT_@-POSSIBLE_@-IND} instead of generating a non-fatal error.

@subsubheading Reason for Failure

Most SLS providers are always successful in retrieving the updated contents of the retransmission
buffer and transmission buffer.  Applicable reasons for failing to retrieve the updated buffer
contents are as follows:

@enumerate

@item Hardware failure.

@item The signalling link is in the incorrect link state (e.g. the in-service state).

@item The specified value of FSNC does not match and is not adjacent to a message contained in the
retransmission buffer.

@end enumerate

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_RETRIEVED_MESSAGE_IND
@subsubsection SL_RETRIEVED_MESSAGE_IND

@subsubheading Description

The retrieved message indication service primitive is originated by the SLS provider to transfer the
contents of the updated retransmission buffer and transmission buffer to the SLS user.  One
primitive is used for each message retrieved.  The oldest message in the buffers is indicated first.

@subsubheading Format

The retrieved message indication service primitive consists of one @prim{M_PROTO} message block
followed by one or more @prim{M_DATA} message blocks containing the retrieved message signal unit in
the same format as it was presented to the SLS provider for transmission.  The @prim{M_PROTO}
message block is structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_mp;
} sl_retrieved_msg_ind_t;
@end verbatim
@tpindex sl_retrieved_msg_ind_t
@end display

@subsubheading Parameters

The retrieve message indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-RETRIEVED_@-MESSAGE_@-IND}.

@item sl_@-mp
Indicates the message priority for the message that was specified in the @prim{SL_@-PDU_@-REQ}
primitive from the SLS user when the message was submitted for transmission.  Message priorities are
provider-specific, but are typically between 0 and 3.  This message priority field is only
applicable to SS7 protocol variants that place message priority bits in a field of the Level 2
header, such as TTC.

@end table

@subsubheading State

This primitive is only issued in management state @psta{LMI_@-ENABLED} and link state
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing a retrieved message indication service
primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item
The primitive is only issued in response to an outstanding
@prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ} primitive when it is possible for the SLS
provider to update and retrieve message signal units from the retransmission and transmission
buffers.

@item
The primitive is not issued when the updated retransmission buffer and transmission buffer are empty.

@end itemize

@subsubheading Response

This primitive does not require response from the SLS user.


@page
@node SL_RETRIEVAL_COMPLETE_IND
@subsubsection SL_RETRIEVAL_COMPLETE_IND

@subsubheading Description

The retrieval complete indication service primitive is originated by the SLS provider to indicate
the completion of transfer of the contents of the updated retransmission buffer and transmission
buffer to the SLS user.  The primitive is issued in response to a
@prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ} primitive issued by the SLS user.

@subsubheading Format

The retrieval complete indication service primitive consists of one @prim{M_PROTO} message block and
zero or more @prim{M_DATA} message blocks containing the last retrieved message signal unit in the
same format as it was presented to the SLS provider for transmission.  The @prim{M_PROTO} message
block is structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_mp;
} sl_retrieval_comp_ind_t;
@end verbatim
@tpindex sl_retrieval_comp_ind_t
@end display

@subsubheading Parameters

The retrieval complete indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-RETRIEVAL_@-COMPLETE_@-IND}.

@item sl_@-mp
When accompanied by @prim{M_DATA} message blocks containing the last retrieved message signal unit,
the @parm{sl_@-mp} field indicates the message priority for that message that was specified in the
@prim{SL_@-PDU_@-REQ} primitive from the SLSL user when the message was submitted for transmission.
Message priorities are provider-specific, but are typically between 0 and 3.  This message priority
field is only applicable to SS7 protocol variants that place message priority bits in a field of the
Level 2 header, such as TTC.

@end table

@subsubheading State

This primitive is only issued in management state @psta{LMI_@-ENABLED} and link state
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE}.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing a retrieval complete indication service
primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item
The primitive is only issued in response to an outstanding
@prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ} primitive when transfer of the updated
retransmission buffer and transmission buffer is complete.

@item
A message signal unit is not attached to the primitive in @prim{M_DATA} message blocks when the
updated retransmission and transmission buffers were empty.

@item
Attaching the last retrieved message to the primitive in @prim{M_DATA} message blocks is optional
and not recommended: the @prim{SL_@-RETRIEVED_@-MESSAGE_@-IND} primitive should be used to transfer
all retrieved message signal units first.

@item
Upon receipt of the retrieval complete indication service primitive, the SLS user will consider the
retrieval operation complete.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user.

@subsubheading Reason for Failure


@page
@node SL_RETRIEVAL_NOT_POSSIBLE_IND
@subsubsection SL_RETRIEVAL_NOT_POSSIBLE_IND

@subsubheading Description

The retrieval not possible indication service primitive is originated by the SLS provider to
indicate that the updated contents of the retransmission and transmission buffers is not possible.
The primitive is issued in response to a @prim{SL_@-RETREIVAL_@-REQUEST_@-AND_@-FSNC_@-REQ}
primitive received from the SLS user.

@subsubheading Format

The retrieval not possible indication service primitive consists of one @prim{M_PROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_retrieval_not_poss_ind_t;
@end verbatim
@tpindex sl_retrieval_not_poss_ind_t
@end display

@subsubheading Parameters

The retrieval not possible indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-RETRIEVAL_@-NOT_@-POSSIBLE_@-IND}.

@end table

@subsubheading State

This primitive is only issued from the @psta{LMI_@-ENABLED} management state, but may be issued from
any link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the retrieval not possible indication
service primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state, but may be issued from
any link state.

@item
The primitive is only issued in response to an outstanding
@prim{SL_@-RETRIEVAL_@-REQUEST_@-AND_@-FSNC_@-REQ} primitive when it is not possible to update and
retrieve the updated contents of the retransmission and transmission buffers.

@item
When issued, a non-fatal error will not be issued for the same request.

@item
Upon receipt of the primitive, the SLS user shall consider the retrieval operation complete.

@end itemize

@subsubheading Response

The primitive does not require a response from the SLS user.


@page
@node SL_CLEAR_BUFFERS_REQ
@subsubsection SL_CLEAR_BUFFERS_REQ

@subsubheading Description

The clear buffers request service primitive is originated by the SLS user to request that all
message buffers be cleared by the SLS provider.  This includes receive buffer, retransmission buffer
and transmission buffers.

@subsubheading Format

The clear buffers request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_clear_buffers_req_t;
@end verbatim
@tpindex sl_clear_buffers_req_t
@end display

@subsubheading Parameters

The clear buffers request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-CLEAR_@-BUFFERS_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The clear buffers request service primitive requires the SLS provider to indicate when the receive
buffer and retransmission buffers are cleared, as follows:

@itemize @minus

@item @b{Successful:}
When successful, the SLS provider clears the receive buffer, retransmission buffer and transmission
buffer.  When the receive buffer is cleared, the SLS provider indicates the clearing with the
@prim{SL_@-RB_@-CLEARED_@-IND} primitive.  When the retransmission buffer is cleared, the SLS
provider indicates the clearing with the @prim{SL_@-RTB_@-CLEARED_@-IND} primitive.  The state
remains unchanged.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.  The state remains
unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_CLEAR_RTB_REQ
@subsubsection SL_CLEAR_RTB_REQ

@subsubheading Description

The clear RTB request service primitive is originated by the SLS user to request that only the
retransmission buffer be cleared by the SLS provider.  This primitive is used in conjunction with
the time-controlled changeover procedure of the message transfer part.

@subsubheading Format

The clear RTB request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_clear_rtb_req_t;
@end verbatim
@tpindex sl_clear_rtb_req_t
@end display

@subsubheading Parameters

The clear RTB request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-CLEAR_@-RTB_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The clear RTB request service primitive requires the SLS provider to indicate when the
retransmission buffer has been cleared, as follows:

@itemize @minus

@item @b{Successful:}
When successful, the SLS provider clears the retransmission buffer.  When the retransmission buffer
is cleared, the SLS provider indicates the clearing with the @prim{SL_@-RTB_@-CLEARED_@-IND}
primitive.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.  The state remains
unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_RB_CLEARED_IND
@subsubsection SL_RB_CLEARED_IND

@subsubheading Description

The RB cleared indication service primitive is originated by the SLS provider whenever the receive
buffer has been cleared; either in response to a @prim{SL_@-CLEAR_@-BUFFERS_@-REQ} primitive from
the SLS user, or due to internal state machine operations.

@subsubheading Format

The RB cleared indication service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO}
message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_rb_cleared_ind_t;
@end verbatim
@tpindex sl_rb_cleared_ind_t
@end display

@subsubheading Parameters

The RB cleared indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-RB_@-CLEARED_@-IND}.

@end table

@subsubheading State

This primitive is only issued by the SLS provider in the @psta{LMI_@-ENABLED} management state and
the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the RB cleared indication service
primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item
The primitive is issued in response to a @prim{SL_@-CLEAR_@-BUFFERS_@-REQ} primitive from the SLS
user.

@item
The primitive is also issued in response to internal state machine transitions.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user.


@page
@node SL_RTB_CLEARED_IND
@subsubsection SL_RTB_CLEARED_IND

@subsubheading Description

The RTB cleared indication service primitive is originated by the SLS provider whenever the
retransmission buffer has been cleared; either in response to a @prim{SL_@-CLEAR_@-BUFFERS_@-REQ} or
@prim{SL_@-CLEAR_@-RTB_@-REQ} primitive, or due to internal state machine operations.

@subsubheading Format

The RTB cleared indication service primitive consists of one @prim{M_PROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_rtb_cleared_ind_t;
@end verbatim
@tpindex sl_rtb_cleared_ind_t
@end display

@subsubheading Parameters

The RTB cleared indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-RTB_@-CLEARED_@-IND}.

@end table

@subsubheading State

The primitive is only issued by the SLS provider from the @psta{LMI_@-ENABLED} management state and
the @psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the RTB cleared indication service
primitive:

@itemize ---

@item
The primitive is only issued from the @psta{LMI_@-ENABLED} management state and the
@psta{SL_@-STATE_@-OUT_@-OF_@-SERVICE} link state.

@item
The primitive is issued in response to a @prim{SL_@-CLEAR_@-BUFFERS_@-REQ} or
@prim{SL_@-CLEAR_@-RTB_@-REQ} primitive from the SLS user.

@item
The primitive is also issued in response to internal state machine transitions.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user.



@page
@node Processor Outage Service Primitives
@subsection Processor Outage Service Primitives

The processor outage service primitive permit the SLS user the ability to assert and resume from a
local processor outage condition as well as being informed by the SLS provider when a local or
remote processor outage condition is in effect or has cleared.  The SLS user is also able, using
these and other primitives, to recover from a local or remote processor outage condition.

These service primitives implement the processor outage services (@pxref{Processor Outage Services}).

@menu
Local Processor Outage:
* SL_LOCAL_PROCESSOR_OUTAGE_REQ::
* SL_LOCAL_PROCESSOR_OUTAGE_IND::
* SL_RESUME_REQ::
* SL_LOCAL_PROCESSOR_RECOVERED_IND::

Remote Processor Outage:
* SL_REMOTE_PROCESSOR_OUTAGE_IND::
* SL_REMOTE_PROCESSOR_RECOVERED_IND::
* SL_CONTINUE_REQ::
@end menu

@node SL_LOCAL_PROCESSOR_OUTAGE_REQ
@subsubsection SL_LOCAL_PROCESSOR_OUTAGE_REQ

@subsubheading Description

The local processor outage request service primitive allows the SLS user to specify that a local
processor outage condition exists.

@subsubheading Format

The local processor outage request service primitive consists of one @prim{M_PROTO} or
@prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_local_proc_outage_req_t;
@end verbatim
@tpindex sl_local_proc_outage_req_t
@end display

@subsubheading Parameters

The local processor outage request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state but is valid from any link
state.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE}.

@subsubheading Response

This primitive does not request a response from the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the link moves to the @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE} state and a local
processor outage condition is asserted.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider will negatively acknowledge the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.  The state remains
unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_LOCAL_PROCESSOR_OUTAGE_IND
@subsubsection SL_LOCAL_PROCESSOR_OUTAGE_IND

@subsubheading Description

The local processor outage indication service primitive is originated by the SLS provider when it
detects a local processor outage condition internal to the SLS provider.

@subsubheading Format

The local processor outage indication service primitive consists of on @prim{M_PROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
} sl_loc_proc_out_ind_t;
@end verbatim
@tpindex sl_loc_proc_out_ind_t
@end display

@subsubheading Parameters

The local processor outage indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-IND}.

@item sl_@-timestamp
Indicates the time at which the detection of local processor outage occurred.  This is UNIX time from
epoch timestamp in milliseconds.

@end table

@subsubheading State

This primitive is only issued by the SLS provider in the @psta{LMI_@-ENABLED} management state and
active or blocked link state.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE}.

@subsubheading Rules

The SLS provider observes the following rules when issuing the local processor outage indication
service primitive:

@itemize ---

@item
The primitive is only issued in the @psta{LMI_@-ENABLED} management state.

@item
SLS provider detection of local processor outage and SLS user detection of local processor outage
are independent conditions.

@item
The SLS provider will issue a @prim{SL_@-LOCAL_@-PROCESSOR_@-RECOVERED_@-IND} primitive when the
local processor outage condition is no longer in effect.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user.


@page
@node SL_RESUME_REQ
@subsubsection SL_RESUME_REQ

@subsubheading Description

The resume request service primitive allows the SLS user to specify that a local processor outage
condition is no longer in effect.  That is, that the local processor has recovered.

@subsubheading Format

The resume request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_resume_req_t;
@end verbatim
@tpindex sl_resume_req_t
@end display

@subsubheading Parameters

The resume request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-RESUME_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state and when the link is in
the @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE} state with a local processor outage condition asserted by
the SLS user with a previous @prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-REQ} primitive.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-IN_@-SERVICE} provided that no other processor outage condition
is currently asserted.

@subsubheading Response

This primitive does not request a response from the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the link moves to the @psta{SL_@-STATE_@-IN_@-SERVICE} state and the local
processor outage condition is removed.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider will negatively acknowledge the primitive using the
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.  The state remains
unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table


@page
@node SL_LOCAL_PROCESSOR_RECOVERED_IND
@subsubsection SL_LOCAL_PROCESSOR_RECOVERED_IND

@subsubheading Description

The local processor recovered indication service primitive is originated by the SLS provider when it
detects a remote processor recovery condition.

@subsubheading Format

The local processor recovered indication service primitive consists of one @prim{M_PROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
} sl_loc_proc_recovered_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The local processor recovered indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-LOCAL_@-PROCESSOR_@-RECOVERED_@-IND}.

@item sl_@-timestamp
Indicates the time at which the detection of local processor recovery occurred.  This is UNIX time
from epoch timestamp in milliseconds.

@end table

@subsubheading State

This primitive is only issued by the SLS provider in the @psta{LMI_@-ENABLED} management state and
the link state of @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE} with local outage asserted by the SLS
provider.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-IN_@-SERVICE} provided that no other processor outage condition
(SLS user local, or remote) exists.

@subsubheading Rules

The SLS provider observes the following rules when issuing a local processor recovered indication
service primitive:

@itemize ---

@item
The primitive is only issued in the @psta{LMI_@-ENABLED} management state.

@item
The SLS provider will only issue this primitive after it has issued a
@prim{SL_@-LOCAL_@-PROCESSOR_@-OUTAGE_@-IND} primitive and when the local processor outage condition
is no longer in effect.

@end itemize

@subsubheading Response

This primitive does not require a respnose from the SLS user, nevertheless, the SLS user will
typically attempt to continue on the link or restore it using restoration service primitives.


@page
@node SL_REMOTE_PROCESSOR_OUTAGE_IND
@subsubsection SL_REMOTE_PROCESSOR_OUTAGE_IND

@subsubheading Description

The remote processour outage indication service primitive is originated by the SLS provider when it
detects a remote processor outage condition.

@subsubheading Format

The remove processor outage indication service primitive consists of one @prim{M_PROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
} sl_rem_proc_out_ind_t;
@end verbatim
@tpindex sl_rem_proc_out_ind_t
@end display

@subsubheading Parameters

The remove processor outage indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-REMOTE_@-PROCESSOR_@-OUTAGE_@-IND}.

@item sl_@-timestamp
Indicates the time at which the detection of remote processor outage occurred.  This is UNIX time from
epoch timestamp in milliseconds.

@end table

@subsubheading State

This primitive is only issued by the SLS provider in the @psta{LMI_@-ENABLED} management state and
active or blocked link state.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE}.

@subsubheading Rules

The SLS provider observes the following rules when issuing the remote processor outage indication
service primitive:

@itemize ---

@item
The primitive is only issued in the @psta{LMI_@-ENABLED} management state.

@item
The SLS provider will issue a @prim{SL_@-REMOTE_@-PROCESSOR_@-RECOVERED_@-IND} primitive when the
remote processor outage condition is no longer in effect.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user.


@page
@node SL_REMOTE_PROCESSOR_RECOVERED_IND
@subsubsection SL_REMOTE_PROCESSOR_RECOVERED_IND

@subsubheading Description

The remote processor recovered indication service primitive is originated by the SLS provider when
it detects a remote processor recovery condition.

@subsubheading Format

The remote processor recovered indication service primitive consists of one @prim{M_PROTO} message
block, structured as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
    sl_ulong sl_timestamp;
} sl_rem_proc_recovered_ind_t;
@end verbatim
@tpindex sl_rem_proc_recovered_ind_t
@end display

@subsubheading Parameters

The remote processor recovered indication service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-REMOTE_@-PROCESSOR_@-RECOVERED_@-IND}.

@item sl_@-timestamp
Indicates the time at which the detection of remote processor recovery occurred.  This is UNIX time
from epoch timestamp in milliseconds.

@end table

@subsubheading State

This primitive is only issued by the SLS provider in the @psta{LMI_@-ENABLED} management state and
the link state of @psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE} with remote process outage asserted.

@subsubheading New State

The new state is unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing a remote processor recovered indication
service primitive:

@itemize ---

@item
The primitive is only issued in the @psta{LMI_@-ENABLED} management state.

@item
The SLS provider will only issue this primitive after it was issued a
@prim{SL_@-REMOTE_@-PROCESSOR_@-OUTAGE_@-IND} primitive when the remote processor outage condition
is no longer in effect.

@end itemize

@subsubheading Response

This primitive does not require a response from the SLS user, nevertheless, the SLS user will
typically attempt to continue on the link or restore it using restoration service primitives.


@page
@node SL_CONTINUE_REQ
@subsubsection SL_CONTINUE_REQ

@subsubheading Description

The continue request service primitive is originated by the SLS user to request that a link
previously in a remote processor outage condition, or a SLS provider detected local process outage
condition, be continued.  This action is normally performed where processor outage has not been of a
long duration and it is not necessary to fail or otherwise restore the signalling link.

@subsubheading Format

The continue request service primitive consists of one @prim{M_PROTO} or @prim{M_PCPROTO} message
block, formatted as follows:

@display
@verbatim
typedef struct {
    sl_long sl_primitive;
} sl_continue_req_t;
@end verbatim
@tpindex sl_continue_req_t
@end display

@subsubheading Parameters

The continue request service primitive contains the following parameters:

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-CONTINUE_@-REQ}.

@end table

@subsubheading State

This primitive is only valid in the @psta{LMI_@-ENABLED} management state and valid in the
@psta{SL_@-STATE_@-PROCESSOR_@-OUTAGE} state where local (SLS provider detected) or remote processor
recovery has been indicated.

@subsubheading New State

The new state is @psta{SL_@-STATE_@-IN_@-SERVICE}, provided that there is no other processor outage
condition in effect.

@subsubheading Response

This primitive does not require receipt acknowledgement by the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the primtiive does not require acknowledgement and the link moves to the
@psta{SL_@-STATE_@-IN_@-SERVICE} state.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider negatively acknowledges the primitive using an
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.  The state reamins
unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table



@page
@node Link Option Management Service Primitives
@subsection Link Option Management Service Primitives

The link option management service primitives provide another mechanism for options management
separate from the local management interface (i.e. the @prim{LMI_@-OPTMGMT_@-REQ} and
@prim{LMI_@-OPTMGMT_@-ACK} primitives).  These service primitives are not currently supported by any
SLS provider and their use is @emph{deprecated}.

These service primitives implement the link option management service (@pxref{Link Option Management
Service}).

@menu
* SL_OPTMGMT_REQ::
* SL_OPTMGMT_ACK::
@end menu

@node SL_OPTMGMT_REQ
@subsubsection SL_OPTMGMT_REQ

@subsubheading Description

This SLS user originated primitive requests that the SLS provider options be managed.

@subsubheading Format

The link option management request service primitive consists of one @prim{M_PROTO} or
@prim{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_req_t;
@end verbatim
@tpindex lmi_optmgmt_req_t
@end display

@subsubheading Parameters

The link option management request service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-OPTMGMT_@-REQ}.

@item lmi_@-opt_@-length
Specifies the length of the options.

@item lmi_@-opt_@-offset
Specifies the offset, from the beginning of the @prim{M_PROTO} message block, of the start of the options.

@item lmi_@-mgmt_@-flags
Specifies the management flags which determine what operation the LMS provider is expected to
perform on the specified options.  This field can assume one of the following values:

@table @pval

@item LMI_@-NEGOTIATE
Negotiate the specified value of each specified option and return the negotiated value.

@item LMI_@-CHECK
Check the validity of the specified value of each specified option and return the result.  Do not
alter the current value assumed by the LMS provider.

@item LMI_@-DEFAULT
Return the default value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@item LMI_@-CURRENT
Return the current value for the specified options (or all options).  Do not alter the current value
assumed by the LMS provider.

@end table

@end table

@subsubheading State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

@subsubheading Response

The link option management request service primitive requires the LMS provider to acknowledge receipt of
the primitive as follows:

@itemize @minus

@item @b{Successful}:
Upon success, the LMS provider acknowledges receipt of the service primitive and successful
completion of the link options management service with an @prim{SL_@-OPTMGMT_@-ACK} primitive containing the
link options management result.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors)}:
Upon failure, the LMS provider acknowledges receipt of the service primitive and failure to
complete the link options management service with an @prim{LMI_@-ERROR_@-ACK} primitive containing the error.
The state remains unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-BADADDRESS
Address was invalid.
@item LMI_@-BADADDRTYPE
Invalid address type.
@item LMI_@-BADDIAL
(Not used.)
@item LMI_@-BADDIALTYPE
(Not used.)
@item LMI_@-BADDISPOSAL
Invalid disposal parameter.
@item LMI_@-BADFRAME
Defective SDU received.
@item LMI_@-BADPPA
Invalid PPA identifier.
@item LMI_@-BADPRIM
Unrecognized primitive.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-INITFAILED
Link initialization failed.
@item LMI_@-NOTSUPP
Primitive not supported by this device.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-WRITEFAIL
Unitdata request failed.
@item LMI_@-CRCERR
CRC or FCS error.
@item LMI_@-DLE_@-EOT
DLE EOT detected.
@item LMI_@-FORMAT
Format error detected.
@item LMI_@-HDLC_@-ABORT
Aborted frame detected.
@item LMI_@-OVERRUN
Input overrun.
@item LMI_@-TOOSHORT
Frame too short.
@item LMI_@-INCOMPLETE
Partial frame received.
@item LMI_@-BUSY
Telephone was busy.
@item LMI_@-NOANSWER
Connection went unanswered.
@item LMI_@-CALLREJECT
Connection rejected.
@item LMI_@-HDLC_@-IDLE
HDLC line went idle.
@item LMI_@-HDLC_@-NOTIDLE
HDLC link no longer idle.
@item LMI_@-QUIESCENT
Line being reassigned.
@item LMI_@-RESUMED
Line has been reassigned.
@item LMI_@-DSRTIMEOUT
Did not see DSR in time.
@item LMI_@-LAN_@-COLLISIONS
LAN excessive collisions.
@item LMI_@-LAN_@-REFUSED
LAN message refused.
@item LMI_@-LAN_@-NOSTATION
LAN no such station.
@item LMI_@-LOSTCTS
Lost Clear to Send signal.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@page
@node SL_OPTMGMT_ACK
@subsubsection SL_OPTMGMT_ACK

@subsubheading Description

This LMS provider originated primitive is issued by the LMS provider upon successful completion of
the link options management service.  It indicates the outcome of the link options management operation
requested by the LMS user in a @prim{SL_@-OPTMGMT_@-REQ} primitive.

@subsubheading Format

The link option management acknowledgement service primitive consists of one @prim{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct {
    lmi_long lmi_primitive;
    lmi_ulong lmi_opt_length;
    lmi_ulong lmi_opt_offset;
    lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_ack_t;
@end verbatim
@tpindex lmi_optmgmt_ack_t
@end display

@subsubheading Parameters

The link option management acknowledgement service primitive contains the following parameters:

@table @parm

@item lmi_@-primitive
Indicates the service primitive type.  Always @prim{SL_@-OPTMGMT_@-ACK}.

@item lmi_@-opt_@-length
Indicates the length of the returned options.

@item lmi_@-opt_@-offset
Indicates the offset of the returned options from the start of the @prim{M_PCPROTO} message block.

@item lmi_@-mgmt_@-flags
Indicates the returned management flags.  These flags indicate the overall success of the link options
management service.  This field can assume one of the following values:

@table @pval

@item LMI_@-SUCCESS
The LMS provider succeeded in negotiating or returning all of the options specified by the LMS
user in the @prim{LMI_@-OPTMGMT_@-REQ} primitive.

@item LMI_@-FAILURE
The LMS provider failed to negotiate one or more of the options specified by the LMS user.

@item LMI_@-PARTSUCCESS
The LMS provider negotiated a value of lower quality for one or more of the options specified by
the LMS user.

@item LMI_@-READONLY
The LMS provider failed to negotiate one ore more of the options specified by the LMS user because
the option is treated as read-only by the LMS provider.

@item LMI_@-NOTSUPPORT
The LMS provider failed to recognize one or more of the options specified by the LMS user.

@end table

@end table

@subsubheading State

This primitive is issued by the LMS provider in direct response to an @prim{SL_@-OPTMGMT_@-REQ} primitive.

@subsubheading New State

The new state remains unchanged.

@subsubheading Rules

The LMS provider follows the following rules when processing link option management service requests:

@itemize ---

@item
When the @parm{lmi_@-mgmt_@-flags} field in the @prim{SL_@-OPTMGMT_@-REQ} primitive is set to @pval{LMI_@-NEGOTIATE},
the LMS provider will attempt to negotiate a value for each of the options specified in the
request.

@item
When the flags are @pval{LMI_@-DEFAULT}, the LMS provider will return the default values of the specified
options, or the default values of all options known to the LMS provider if no options were
specified.

@item
When the flags are @pval{LMI_@-CURRENT}, the LMS provider will return the current values of the specified
options, or all options.

@item
When the flags are @pval{LMI_@-CHECK}, the LMS provider will attempt to negotiate a value for each of the
options specified in the request and return the resulg of the negotiation, but will not affect the
current value of the option.

@end itemize



@page
@node Event Notification Service Primitives
@subsection Event Notification Service Primitives

The event notification service primitives provide another mechanism for event notification separate
from the local management interface (i.e. the @prim{LMI_@-EVENT_@-IND} primitive).  These service
primitives are not currently supported by any SLS provider and their use is @emph{deprecated}.

These service primitives implement the event notification service (@pxref{Event Notification Service}).

@menu
* SL_NOTIFY_REQ::
* SL_NOTIFY_IND::
@end menu

@node SL_NOTIFY_REQ
@subsubsection SL_NOTIFY_REQ

@subsubheading Description

This SLS user originated primitives requests that the SLS provider register the SLS user for various
events.

@subsubheading Format

Not documented.

@subsubheading Parameters

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-NOTIFY_@-REQ}.

@end table

@subsubheading State

Any state.

@subsubheading New State

Unchanged.

@subsubheading Response

This primitive does not require receipt acknolwedgement from the SLS provider.

@itemize @minus

@item @b{Successful:}
When successful, the events are registered and no acknowledgement is required.
The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors):}
When unsuccessful, the SLS provider generates a negative acknowledgement using a
@prim{LMI_@-ERROR_@-ACK} primitive containing the error and reason for failure.
The state remains unchanged.

@end itemize

@subsubheading Reason for Failure

@b{Non-Fatal Errors:} applicable non-fatal errors are as follows:

@table @perr

@item LMI_@-UNSPEC
Unknown or unspecified.
@item LMI_@-DISC
Disconnected.
@item LMI_@-EVENT
Protocol-specific event occurred.
@item LMI_@-FATALERR
Device has become unusable.
@item LMI_@-OUTSTATE
Primitive was issued from invalid state.
@item LMI_@-PROTOSHORT
@prim{M_PROTO} block too short.
@item LMI_@-SYSERR
UNIX system error.
@item LMI_@-DEVERR
Start of device-specific error codes.

@end table

@subsubheading Notes

This primitive is @emph{deprecated} and has been replaced by the local management inteface event
reporting service discussed in @ref{Event Reporting Service}.


@page
@node SL_NOTIFY_IND
@subsubsection SL_NOTIFY_IND

@subsubheading Description

This SLS provider originated primitive indicates that an event for which the SLS provider has
registered has occurred.

@subsubheading Format

Not documented.

@subsubheading Parameters

@table @parm

@item sl_@-primitive
Specifies the service primitive type.  Always @prim{SL_@-NOTIFY_@-IND}.

@end table

@subsubheading State

Any state.

@subsubheading New State

Unchanged.

@subsubheading Rules

The SLS provider observes the following rules when issuing the event notification indication service
primtiive:

@itemize ---

@item
This primitive is only issued by the SLS provider for event for which the SLS user has explicitly
registered with the @prim{SL_@-NOTIFY_@-REQ} primitive.

@item
Specific events are provider-specific.

@end itemize

@subsubheading Notes

This primitive is @emph{deprecated} and has been replaced by the local management inteface event
reporting service discussed in @ref{Event Reporting Service}.



@node Diagnostics Requirements
@chapter Diagnostics Requirements

Two error handling facilities should be provided to the SLS user: one to handle non-fatal errors,
and the other to handle fatal errors.

@section Non-Fatal Error Handling Facility

These are errors that do not change the state of the SLS interface as seen by the SLS user and
provide the user with the option of reissuing the SL primitive with the corrected options
specification.  The non-fatal error handling is provided only to those primitives that require
acknowledgements, and uses the @prim{LMI_@-ERROR_@-ACK} to report these errors.  These errors retain the
state of the SLS interface the same as it was before the SL provider received the primitive that
was in error.  Syntax errors and rule violations are reported via the non-fatal error handling
facility.

@section Fatal Error Handling Facility

These errors are issued by the SL provider when it detects errors that are not correctable by the
SL user, or if it is unable to report a correctible error to the SLS user.  Fatal errors are
indicated via the STREAMS message type @code{M_ERROR} with the UNIX system error @code{EPROTO}.  The
@code{M_ERROR} STREAMS message type will result in the failure of all the UNIX system calls on the
stream.  The SLS user can recover from a fatal error by having all the processes close the files
associated with the stream, and then reopening them for processing.

@ignore
@node Addendum for ITU-T Q.703 Conformance
@unnumbered Addendum for ITU-T Q.703 Conformance

@node Addendum for ANSI T1.111.3 Conformance
@unnumbered Addendum for ANSI T1.111.3 Conformance

@node Addendum for ETSI ETS 300 008-1 Conformance
@unnumbered Addendum for ETSI ETS 300 008-1 Conformance

@node Addendum for RFC 4165 Conformance
@unnumbered Addendum for RFC 4165 Conformance

@node Mapping of SLI Primitives to ITU-T Q.703
@appendix Mapping of SLI Primitives to ITU-T Q.703

@node Mapping of SLI Primitives to ANSI T1.111.3
@appendix Mapping of SLI Primitives to ANSI T1.111.3

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables
@end ignore

@node LMI Header File Listing
@appendix LMI Header File Listing

@smallformat
@verbatim
/*****************************************************************************

 @(#) lmi.h,v 0.9.2.8 2007/03/25 18:59:12 brian Exp

 -----------------------------------------------------------------------------

 Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 details.

 You should have received a copy of the GNU General Public License along with
 this program; if not, write to the Free Software Foundation, Inc., 675 Mass
 Ave, Cambridge, MA 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified 2007/03/25 18:59:12 by brian

 -----------------------------------------------------------------------------

 lmi.h,v
 Revision 0.9.2.8  2007/03/25 18:59:12  brian
 - changes to support 2.6.20-1.2307.fc5 kernel

 Revision 0.9.2.7  2007/01/28 01:09:50  brian
 - updated test programs and working up m2ua-as driver

 *****************************************************************************/

#ifndef __LMI_H__
#define __LMI_H__

#ident "@(#) lmi.h,v openss7-0_9_2_F(0.9.2.8) Copyright (c) 2001-2007 OpenSS7 Corporation."

/* This file can be processed by doxygen(1). */

#define LMI_PROTO_BASE            16L

#define LMI_DSTR_FIRST          ( 1L + LMI_PROTO_BASE )
#define LMI_INFO_REQ            ( 1L + LMI_PROTO_BASE )
#define LMI_ATTACH_REQ          ( 2L + LMI_PROTO_BASE )
#define LMI_DETACH_REQ          ( 3L + LMI_PROTO_BASE )
#define LMI_ENABLE_REQ          ( 4L + LMI_PROTO_BASE )
#define LMI_DISABLE_REQ         ( 5L + LMI_PROTO_BASE )
#define LMI_OPTMGMT_REQ         ( 6L + LMI_PROTO_BASE )
#define LMI_DSTR_LAST           ( 6L + LMI_PROTO_BASE )

#define LMI_USTR_LAST           (-1L - LMI_PROTO_BASE )
#define LMI_INFO_ACK            (-1L - LMI_PROTO_BASE )
#define LMI_OK_ACK              (-2L - LMI_PROTO_BASE )
#define LMI_ERROR_ACK           (-3L - LMI_PROTO_BASE )
#define LMI_ENABLE_CON          (-4L - LMI_PROTO_BASE )
#define LMI_DISABLE_CON         (-5L - LMI_PROTO_BASE )
#define LMI_OPTMGMT_ACK         (-6L - LMI_PROTO_BASE )
#define LMI_ERROR_IND           (-7L - LMI_PROTO_BASE )
#define LMI_STATS_IND           (-8L - LMI_PROTO_BASE )
#define LMI_EVENT_IND           (-9L - LMI_PROTO_BASE )
#define LMI_USTR_FIRST          (-9L - LMI_PROTO_BASE )

#define LMI_UNATTACHED          1L      /* No PPA attached, awaiting LMI_ATTACH_REQ */
#define LMI_ATTACH_PENDING      2L      /* Waiting for attach */
#define LMI_UNUSABLE            3L      /* Device cannot be used, STREAM in hung state */
#define LMI_DISABLED            4L      /* PPA attached, awaiting LMI_ENABLE_REQ */
#define LMI_ENABLE_PENDING      5L      /* Waiting to send LMI_ENABLE_CON */
#define LMI_ENABLED             6L      /* Ready for use, awaiting primitive exchange */
#define LMI_DISABLE_PENDING     7L      /* Waiting to send LMI_DISABLE_CON */
#define LMI_DETACH_PENDING      8L      /* Waiting for detach */

/*
 *  LMI_ERROR_ACK and LMI_ERROR_IND reason codes
 */
#define LMI_UNSPEC              0x00000000      /* Unknown or unspecified */
#define LMI_BADADDRESS          0x00010000      /* Address was invalid */
#define LMI_BADADDRTYPE         0x00020000      /* Invalid address type */
#define LMI_BADDIAL             0x00030000      /* (not used) */
#define LMI_BADDIALTYPE         0x00040000      /* (not used) */
#define LMI_BADDISPOSAL         0x00050000      /* Invalid disposal parameter */
#define LMI_BADFRAME            0x00060000      /* Defective SDU received */
#define LMI_BADPPA              0x00070000      /* Invalid PPA identifier */
#define LMI_BADPRIM             0x00080000      /* Unrecognized primitive */
#define LMI_DISC                0x00090000      /* Disconnected */
#define LMI_EVENT               0x000a0000      /* Protocol-specific event occurred */
#define LMI_FATALERR            0x000b0000      /* Device has become unusable */
#define LMI_INITFAILED          0x000c0000      /* Link initialization failed */
#define LMI_NOTSUPP             0x000d0000      /* Primitive not supported by this device */
#define LMI_OUTSTATE            0x000e0000      /* Primitive was issued from invalid state */
#define LMI_PROTOSHORT          0x000f0000      /* M_PROTO block too short */
#define LMI_SYSERR              0x00100000      /* UNIX system error */
#define LMI_WRITEFAIL           0x00110000      /* Unitdata request failed */
#define LMI_CRCERR              0x00120000      /* CRC or FCS error */
#define LMI_DLE_EOT             0x00130000      /* DLE EOT detected */
#define LMI_FORMAT              0x00140000      /* Format error detected */
#define LMI_HDLC_ABORT          0x00150000      /* Aborted frame detected */
#define LMI_OVERRUN             0x00160000      /* Input overrun */
#define LMI_TOOSHORT            0x00170000      /* Frame too short */
#define LMI_INCOMPLETE          0x00180000      /* Partial frame received */
#define LMI_BUSY                0x00190000      /* Telephone was busy */
#define LMI_NOANSWER            0x001a0000      /* Connection went unanswered */
#define LMI_CALLREJECT          0x001b0000      /* Connection rejected */
#define LMI_HDLC_IDLE           0x001c0000      /* HDLC line went idle */
#define LMI_HDLC_NOTIDLE        0x001d0000      /* HDLC link no longer idle */
#define LMI_QUIESCENT           0x001e0000      /* Line being reassigned */
#define LMI_RESUMED             0x001f0000      /* Line has been reassigned */
#define LMI_DSRTIMEOUT          0x00200000      /* Did not see DSR in time */
#define LMI_LAN_COLLISIONS      0x00210000      /* LAN excessive collisions */
#define LMI_LAN_REFUSED         0x00220000      /* LAN message refused */
#define LMI_LAN_NOSTATION       0x00230000      /* LAN no such station */
#define LMI_LOSTCTS             0x00240000      /* Lost Clear to Send signal */
#define LMI_DEVERR              0x00250000      /* Start of device-specific error codes */

typedef signed int lmi_long;
typedef unsigned int lmi_ulong;
typedef unsigned short lmi_ushort;
typedef unsigned char lmi_uchar;

/*
 *  LOCAL MANAGEMENT PRIMITIVES
 */

/*
   LMI_INFO_REQ, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_INFO_REQ */
} lmi_info_req_t;

/*
   LMI_INFO_ACK, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_INFO_ACK */
        lmi_ulong lmi_version;
        lmi_ulong lmi_state;
        lmi_ulong lmi_max_sdu;
        lmi_ulong lmi_min_sdu;
        lmi_ulong lmi_header_len;
        lmi_ulong lmi_ppa_style;
        lmi_uchar lmi_ppa_addr[0];
} lmi_info_ack_t;

/*
 *  LMI provider style.
 *
 *  The LMI provider style which determines whether a provider requires an
 *  LMI_ATTACH_REQ to inform the provider which PPA user messages should be
 *  sent/received on.
 */
#define LMI_STYLE1      0x00    /* PPA is implicitly bound by open(2) */
#define LMI_STYLE2      0x01    /* PPA must be explicitly bound via STD_ATTACH_REQ */

/*
   LMI_ATTACH_REQ, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_ATTACH_REQ */
        lmi_uchar lmi_ppa[0];
} lmi_attach_req_t;

/*
   LMI_DETACH_REQ, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_DETACH_REQ */
} lmi_detach_req_t;

/*
   LMI_ENABLE_REQ, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_ENABLE_REQ */
        lmi_uchar lmi_rem[0];
} lmi_enable_req_t;

/*
   LMI_DISABLE_REQ, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_DISABLE_REQ */
} lmi_disable_req_t;

/*
   LMI_OK_ACK, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_OK_ACK */
        lmi_long lmi_correct_primitive;
        lmi_ulong lmi_state;
} lmi_ok_ack_t;

/*
   LMI_ERROR_ACK, M_CTL 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_ERROR_ACK */
        lmi_ulong lmi_errno;
        lmi_ulong lmi_reason;
        lmi_long lmi_error_primitive;
        lmi_ulong lmi_state;
} lmi_error_ack_t;

/*
   LMI_ENABLE_CON, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_ENABLE_CON */
        lmi_ulong lmi_state;
} lmi_enable_con_t;

/*
   LMI_DISABLE_CON, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_DISABLE_CON */
        lmi_ulong lmi_state;
} lmi_disable_con_t;

/*
   LMI_OPTMGMT_REQ, M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_OPTMGMT_REQ */
        lmi_ulong lmi_opt_length;
        lmi_ulong lmi_opt_offset;
        lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_req_t;

/*
   LMI_OPTMGMT_ACK, M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_OPMGMT_ACK */
        lmi_ulong lmi_opt_length;
        lmi_ulong lmi_opt_offset;
        lmi_ulong lmi_mgmt_flags;
} lmi_optmgmt_ack_t;

#undef LMI_DEFAULT

#define LMI_NEGOTIATE           0x0004
#define LMI_CHECK               0x0008
#define LMI_DEFAULT             0x0010
#define LMI_SUCCESS             0x0020
#define LMI_FAILURE             0x0040
#define LMI_CURRENT             0x0080
#define LMI_PARTSUCCESS         0x0100
#define LMI_READONLY            0x0200
#define LMI_NOTSUPPORT          0x0400

/*
   LMI_ERROR_IND, M_PROTO or M_PCPROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_ERROR_IND */
        lmi_ulong lmi_errno;
        lmi_ulong lmi_reason;
        lmi_ulong lmi_state;
} lmi_error_ind_t;

/*
   LMI_STATS_IND, M_PROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_STATS_IND */
        lmi_ulong lmi_interval;
        lmi_ulong lmi_timestamp;
} lmi_stats_ind_t;

/*
   LMI_EVENT_IND, M_PROTO 
 */

typedef struct {
        lmi_long lmi_primitive;         /* LMI_EVENT_IND */
        lmi_ulong lmi_objectid;
        lmi_ulong lmi_timestamp;
        lmi_ulong lmi_severity;
} lmi_event_ind_t;

union LMI_primitive {
        lmi_long lmi_primitive;
        lmi_ok_ack_t ok_ack;
        lmi_error_ack_t error_ack;
        lmi_error_ind_t error_ind;
        lmi_stats_ind_t stats_ind;
        lmi_event_ind_t event_ind;
};

union LMI_primitives {
        lmi_long lmi_primitive;
        lmi_info_req_t info_req;
        lmi_info_ack_t info_ack;
        lmi_attach_req_t attach_req;
        lmi_detach_req_t detach_req;
        lmi_enable_req_t enable_req;
        lmi_disable_req_t disable_req;
        lmi_ok_ack_t ok_ack;
        lmi_error_ack_t error_ack;
        lmi_enable_con_t enable_con;
        lmi_disable_con_t disable_con;
        lmi_error_ind_t error_ind;
        lmi_stats_ind_t stats_ind;
        lmi_event_ind_t event_ind;
};

#define LMI_INFO_REQ_SIZE       sizeof(lmi_info_req_t)
#define LMI_INFO_ACK_SIZE       sizeof(lmi_info_ack_t)
#define LMI_ATTACH_REQ_SIZE     sizeof(lmi_attach_req_t)
#define LMI_DETACH_REQ_SIZE     sizeof(lmi_detach_req_t)
#define LMI_ENABLE_REQ_SIZE     sizeof(lmi_enable_req_t)
#define LMI_DISABLE_REQ_SIZE    sizeof(lmi_disable_req_t)
#define LMI_OK_ACK_SIZE         sizeof(lmi_ok_ack_t)
#define LMI_ERROR_ACK_SIZE      sizeof(lmi_error_ack_t)
#define LMI_ENABLE_CON_SIZE     sizeof(lmi_enable_con_t)
#define LMI_DISABLE_CON_SIZE    sizeof(lmi_disable_con_t)
#define LMI_ERROR_IND_SIZE      sizeof(lmi_error_ind_t)
#define LMI_STATS_IND_SIZE      sizeof(lmi_stats_ind_t)
#define LMI_EVENT_IND_SIZE      sizeof(lmi_event_ind_t)

typedef struct lmi_opthdr {
        lmi_ulong level;
        lmi_ulong name;
        lmi_ulong length;
        lmi_ulong status;
        lmi_uchar value[0];
        /*
           followed by option value 
         */
} lmi_opthdr_t;

#define LMI_LEVEL_COMMON        '\0'
#define LMI_LEVEL_SDL           'd'
#define LMI_LEVEL_SDT           't'
#define LMI_LEVEL_SL            'l'
#define LMI_LEVEL_SLS           's'
#define LMI_LEVEL_MTP           'M'
#define LMI_LEVEL_SCCP          'S'
#define LMI_LEVEL_ISUP          'I'
#define LMI_LEVEL_TCAP          'T'

#define LMI_OPT_PROTOCOL        1       /* use struct lmi_option */
#define LMI_OPT_STATISTICS      2       /* use struct lmi_sta */

#endif                          /* __LMI_H__ */
@end verbatim
@end smallformat

@node SLI Header File Listing
@appendix SLI Header File Listing

@smallformat
@verbatim
/*****************************************************************************

 @(#) sli.h,v 0.9.2.5 2007/06/17 01:56:02 brian Exp

 -----------------------------------------------------------------------------

 Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU General Public License as published by the Free Software
 Foundation; version 2 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 details.

 You should have received a copy of the GNU General Public License along with
 this program; if not, write to the Free Software Foundation, Inc., 675 Mass
 Ave, Cambridge, MA 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified 2007/06/17 01:56:02 by brian

 -----------------------------------------------------------------------------

 sli.h,v
 Revision 0.9.2.5  2007/06/17 01:56:02  brian
 - updates for release, remove any later language

 *****************************************************************************/

#ifndef __SS7_SLI_H__
#define __SS7_SLI_H__

#ident "@(#) sli.h,v openss7-0_9_2_F(0.9.2.5) Copyright (c) 2001-2007 OpenSS7 Corporation."

/* This file can be processed by doxygen(1). */

typedef lmi_long sl_long;
typedef lmi_ulong sl_ulong;
typedef lmi_ushort sl_ushort;
typedef lmi_uchar sl_uchar;

#define SL_PROTO_BASE				  64L

#define SL_DSTR_FIRST				(  1L + SL_PROTO_BASE)
#define SL_PDU_REQ				(  1L + SL_PROTO_BASE)
#define SL_EMERGENCY_REQ			(  2L + SL_PROTO_BASE)
#define SL_EMERGENCY_CEASES_REQ			(  3L + SL_PROTO_BASE)
#define SL_START_REQ				(  4L + SL_PROTO_BASE)
#define SL_STOP_REQ				(  5L + SL_PROTO_BASE)
#define SL_RETRIEVE_BSNT_REQ			(  6L + SL_PROTO_BASE)
#define SL_RETRIEVAL_REQUEST_AND_FSNC_REQ	(  7L + SL_PROTO_BASE)
#define SL_CLEAR_BUFFERS_REQ			(  8L + SL_PROTO_BASE)
#define SL_CLEAR_RTB_REQ			(  9L + SL_PROTO_BASE)
#define SL_CONTINUE_REQ				( 10L + SL_PROTO_BASE)
#define SL_LOCAL_PROCESSOR_OUTAGE_REQ		( 11L + SL_PROTO_BASE)
#define SL_RESUME_REQ				( 12L + SL_PROTO_BASE)
#define SL_CONGESTION_DISCARD_REQ		( 13L + SL_PROTO_BASE)
#define SL_CONGESTION_ACCEPT_REQ		( 14L + SL_PROTO_BASE)
#define SL_NO_CONGESTION_REQ			( 15L + SL_PROTO_BASE)
#define SL_POWER_ON_REQ				( 16L + SL_PROTO_BASE)
#define SL_OPTMGMT_REQ				( 17L + SL_PROTO_BASE)
#define SL_NOTIFY_REQ				( 18L + SL_PROTO_BASE)
#define SL_DSTR_LAST				( 18L + SL_PROTO_BASE)

#define SL_USTR_LAST				( -1L - SL_PROTO_BASE)
#define SL_PDU_IND				( -1L - SL_PROTO_BASE)
#define SL_LINK_CONGESTED_IND			( -2L - SL_PROTO_BASE)
#define SL_LINK_CONGESTION_CEASED_IND		( -3L - SL_PROTO_BASE)
#define SL_RETRIEVED_MESSAGE_IND		( -4L - SL_PROTO_BASE)
#define SL_RETRIEVAL_COMPLETE_IND		( -5L - SL_PROTO_BASE)
#define SL_RB_CLEARED_IND			( -6L - SL_PROTO_BASE)
#define SL_BSNT_IND				( -7L - SL_PROTO_BASE)
#define SL_IN_SERVICE_IND			( -8L - SL_PROTO_BASE)
#define SL_OUT_OF_SERVICE_IND			( -9L - SL_PROTO_BASE)
#define SL_REMOTE_PROCESSOR_OUTAGE_IND		(-10L - SL_PROTO_BASE)
#define SL_REMOTE_PROCESSOR_RECOVERED_IND	(-11L - SL_PROTO_BASE)
#define SL_RTB_CLEARED_IND			(-12L - SL_PROTO_BASE)
#define SL_RETRIEVAL_NOT_POSSIBLE_IND		(-13L - SL_PROTO_BASE)
#define SL_BSNT_NOT_RETRIEVABLE_IND		(-14L - SL_PROTO_BASE)
#define SL_OPTMGMT_ACK				(-15L - SL_PROTO_BASE)
#define SL_NOTIFY_IND				(-16L - SL_PROTO_BASE)
#define SL_LOCAL_PROCESSOR_OUTAGE_IND		(-17L - SL_PROTO_BASE)
#define SL_LOCAL_PROCESSOR_RECOVERED_IND	(-18L - SL_PROTO_BASE)
#define SL_USTR_FIRST				(-18L - SL_PROTO_BASE)

/*
 *  SLI PROTOCOL PRIMITIVES
 */

/*
 *  SL_PDU_REQ, optional M_PROTO type, with M_DATA block(s)
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_mp;
} sl_pdu_req_t;

/*
 *  SL_PDU_IND, optional M_PROTO type, with M_DATA block(s)
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_mp;
} sl_pdu_ind_t;

/*
 *  PROTOCOL CONTROL PRIMITIVES
 */

/*
 *  SL_EMERGENCY_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_emergency_req_t;

/*
 *  SL_EMERGENCY_CEASES_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_emergency_ceases_req_t;

/*
 *  SL_START_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_start_req_t;

/*
 *  SL_STOP_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_stop_req_t;

/*
 *  SL_RETRIEVE_BSNT_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_retrieve_bsnt_req_t;

/*
 *  SL_RETRIEVAL_REQUEST_AND_FSNC_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_fsnc;
} sl_retrieval_req_and_fsnc_t;

/*
 *  SL_CLEAR_BUFFERS_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_clear_buffers_req_t;

/*
 *  SL_CLEAR_RTB_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_clear_rtb_req_t;

/*
 *  SL_CONTINUE_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_continue_req_t;

/*
 *  SL_LOCAL_PROCESSOR_OUTAGE_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_local_proc_outage_req_t;

/*
 *  SL_RESUME_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_resume_req_t;

/*
 *  SL_CONGESTION_DISCARD_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_cong_discard_req_t;

/*
 *  SL_CONGESTION_ACCEPT_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_cong_accept_req_t;

/*
 *  SL_NO_CONGESTION_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_no_cong_req_t;

/*
 * SL_POWER_ON_REQ, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_power_on_req_t;

/*
 *  SL_LINK_CONGESTED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
	sl_ulong sl_cong_status;	/* congestion status */
	sl_ulong sl_disc_status;	/* discard status */
} sl_link_cong_ind_t;

/*
 *  SL_LINK_CONGESTION_CEASED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
	sl_ulong sl_cong_status;	/* congestion status */
	sl_ulong sl_disc_status;	/* discard status */
} sl_link_cong_ceased_ind_t;

/*
 *  SL_RETRIEVED_MESSAGE_IND, M_PROTO or M_PCPROTO type with M_DATA block(s)
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_mp;
} sl_retrieved_msg_ind_t;

/*
 *  SL_RETRIEVAL_COMPLETE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_mp;
} sl_retrieval_comp_ind_t;

/*
 *  SL_RETRIEVAL_NOT_POSSIBLE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_retrieval_not_poss_ind_t;

/*
 *  SL_RB_CLEARED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_rb_cleared_ind_t;

/*
 *  SL_BSNT_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_bsnt;
} sl_bsnt_ind_t;

/*
 *  SL_BSNT_NOT_RETRIEVABLE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_bsnt;
} sl_bsnt_not_retr_ind_t;

/*
 *  SL_IN_SERVICE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_in_service_ind_t;

/*
 *  SL_OUT_OF_SERVICE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
	sl_ulong sl_reason;
} sl_out_of_service_ind_t;

/*
 *  These reasons for failure as so that upstream module can
 *  collect statistics per link per ITU-T Q.752 Table 1
 *  requirements.
 */
#define SL_FAIL_UNSPECIFIED		0x0001
#define SL_FAIL_CONG_TIMEOUT		0x0002
#define SL_FAIL_ACK_TIMEOUT		0x0004
#define SL_FAIL_ABNORMAL_BSNR		0x0008
#define SL_FAIL_ABNORMAL_FIBR		0x0010
#define SL_FAIL_SUERM_EIM		0x0020
#define SL_FAIL_ALIGNMENT_NOT_POSSIBLE	0x0040
#define SL_FAIL_RECEIVED_SIO		0x0080
#define SL_FAIL_RECEIVED_SIN		0x0100
#define SL_FAIL_RECEIVED_SIE		0x0200
#define SL_FAIL_RECEIVED_SIOS		0x0400
#define SL_FAIL_T1_TIMEOUT		0x0800

/*
 *  SL_REMOTE_PROCESSOR_OUTAGE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
} sl_rem_proc_out_ind_t;

/*
 *  SL_REMOTE_PROCESSOR_RECOVERED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
} sl_rem_proc_recovered_ind_t;

/*
 *  SL_RTB_CLEARED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
} sl_rtb_cleared_ind_t;

/*
 *  SL_LOCAL_PROCESSOR_OUTAGE_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
} sl_loc_proc_out_ind_t;

/*
 *  SL_LOCAL_PROCESSOR_RECOVERED_IND, M_PROTO or M_PCPROTO type
 */
typedef struct {
	sl_long sl_primitive;
	sl_ulong sl_timestamp;
} sl_loc_proc_recovered_ind_t;

/*
 *  Generic single argument type
 */
typedef struct {
	sl_ulong sl_cmd;
	sl_ulong sl_arg;
} sl_cmd_arg_t;

/*
 *  Generic double argument type
 */
typedef struct {
	sl_ulong sl_cmd;
	sl_ulong sl_arg1;
	sl_ulong sl_arg2;
} sl_cmd_2arg_t;

/*
 *  Generic triple argument type
 */
typedef struct {
	sl_ulong sl_cmd;
	sl_ulong sl_arg1;
	sl_ulong sl_arg2;
	sl_ulong sl_arg3;
} sl_cmd_3arg_t;

union SL_primitives {
	sl_long sl_primitive;
	sl_cmd_arg_t cmd_arg;
	sl_cmd_2arg_t cmd_2arg;
	sl_cmd_3arg_t cmd_3arg;
	sl_pdu_req_t pdu_req;
	sl_pdu_ind_t pdu_ind;
	sl_emergency_req_t emergency_req;
	sl_emergency_ceases_req_t emergency_ceases_req;
	sl_start_req_t start_req;
	sl_stop_req_t stop_req;
	sl_retrieve_bsnt_req_t retrieve_bsnt_req;
	sl_retrieval_req_and_fsnc_t retrieval_req_and_fsnc;
	sl_resume_req_t resume_req;
	sl_continue_req_t continue_req;
	sl_clear_buffers_req_t clear_buffers_req;
	sl_clear_rtb_req_t clear_rtb_req;
	sl_local_proc_outage_req_t local_proc_outage_req;
	sl_cong_discard_req_t cong_discard_req;
	sl_cong_accept_req_t cong_accept_req;
	sl_no_cong_req_t no_cong_req;
	sl_power_on_req_t power_on_req;
	sl_link_cong_ind_t link_cong_ind;
	sl_link_cong_ceased_ind_t link_cong_ceased_ind;
	sl_retrieved_msg_ind_t retrieved_msg_ind;
	sl_retrieval_comp_ind_t retrieval_comp_ind;
	sl_retrieval_not_poss_ind_t retrieval_not_poss_ind;
	sl_rb_cleared_ind_t rb_cleared_ind;
	sl_bsnt_ind_t bsnt_ind;
	sl_bsnt_not_retr_ind_t bsnt_not_retr_ind;
	sl_in_service_ind_t in_service_ind;
	sl_out_of_service_ind_t out_of_service_ind;
	sl_rem_proc_out_ind_t rem_proc_out_ind;
	sl_rem_proc_recovered_ind_t rem_proc_recovered_ind;
	sl_rtb_cleared_ind_t rtb_cleared_ind;
	sl_loc_proc_out_ind_t loc_proc_out_ind;
	sl_loc_proc_recovered_ind_t loc_proc_recovered_ind;
};

typedef union SL_primitives sl_prim_t;

#define SL_CMD_ARG_SIZE			sizeof(sl_cmd_arg_t)
#define SL_CMD_2ARG_SIZE		sizeof(sl_cmd_2arg_t)
#define SL_CMD_3ARG_SIZE		sizeof(sl_cmd_3arg_t)
#define SL_PDU_REQ_SIZE			sizeof(sl_pdu_req_t)
#define SL_PDU_IND_SIZE			sizeof(sl_pdu_ind_t)
#define SL_EMERGENCY_REQ_SIZE		sizeof(sl_emergency_req_t)
#define SL_EMERGENCY_CEASES_REQ_SIZE	sizeof(sl_emergency_ceases_req_t)
#define SL_START_REQ_SIZE		sizeof(sl_start_req_t)
#define SL_STOP_REQ_SIZE		sizeof(sl_stop_req_t)
#define SL_RETRIEVE_BSNT_REQ_SIZE	sizeof(sl_retrieve_bsnt_req_t)
#define SL_RETRIEVAL_REQ_AND_FSNC_SIZE	sizeof(sl_retrieval_req_and_fsnc_t)
#define SL_RESUME_REQ_SIZE		sizeof(sl_resume_req_t)
#define SL_CONTINUE_REQ_SIZE		sizeof(sl_continue_req_t)
#define SL_CLEAR_BUFFERS_REQ_SIZE	sizeof(sl_clear_buffers_req_t)
#define SL_CLEAR_RTB_REQ_SIZE		sizeof(sl_clear_rtb_req_t)
#define SL_LOCAL_PROC_OUTAGE_REQ_SIZE	sizeof(sl_local_proc_outage_req_t)
#define SL_CONG_DISCARD_REQ_SIZE	sizeof(sl_cong_discard_req_t)
#define SL_CONG_ACCEPT_REQ_SIZE		sizeof(sl_cong_accept_req_t)
#define SL_NO_CONG_REQ_SIZE		sizeof(sl_no_cong_req_t)
#define SL_POWER_ON_REQ_SIZE		sizeof(sl_power_on_req_t)
#define SL_LINK_CONG_IND_SIZE		sizeof(sl_link_cong_ind_t)
#define SL_LINK_CONG_CEASED_IND_SIZE	sizeof(sl_link_cong_ceased_ind_t)
#define SL_RETRIEVED_MSG_IND_SIZE	sizeof(sl_retrieved_msg_ind_t)
#define SL_RETRIEVAL_COMP_IND_SIZE	sizeof(sl_retrieval_comp_ind_t)
#define SL_RETRIEVAL_NOT_POSS_IND_SIZE	sizeof(sl_retrieval_not_poss_ind_t)
#define SL_RB_CLEARED_IND_SIZE		sizeof(sl_rb_cleared_ind_t)
#define SL_BSNT_IND_SIZE		sizeof(sl_bsnt_ind_t)
#define SL_BSNT_NOT_RETR_IND_SIZE	sizeof(sl_bsnt_not_retr_ind_t)
#define SL_IN_SERVICE_IND_SIZE		sizeof(sl_in_service_ind_t)
#define SL_OUT_OF_SERVICE_SIZE		sizeof(sl_out_of_service_ind_t)
#define SL_REM_PROC_OUT_IND_SIZE	sizeof(sl_rem_proc_out_ind_t)
#define SL_REM_PROC_RECOVERED_IND_SIZE	sizeof(sl_rem_proc_recovered_ind_t)
#define SL_RTB_CLEARED_IND_SIZE		sizeof(sl_rtb_cleared_ind_t)
#define SL_LOC_PROC_OUT_IND_SIZE	sizeof(sl_loc_proc_out_ind_t)
#define SL_LOC_PROC_RECOVERED_IND_SIZE	sizeof(sl_loc_proc_recovered_ind_t)

#define	SL_OPT_PROTOCOL		LMI_OPT_PROTOCOL
#define SL_OPT_STATISTICS	LMI_OPT_STATISTICS
#define SL_OPT_CONFIG		3	/* use struct sl_config */
#define SL_OPT_STATEM		4	/* use struct sl_statem */
#define SL_OPT_STATS		5	/* use struct sl_stats */

#endif				/* __SS7_SLI_H__ */
@end verbatim
@end smallformat

@node License
@unnumbered License

@menu
* GNU Free Documentation License::
@end menu

@include texi/fdl.texi

@node Glossary
@unnumbered Glossary

@table @emph

@item Signalling Data Link Service Data Unit

A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link
connection to the other.

@item Data transfer

The phase in connection and connectionless modes that supports the transfer of data between to
signalling data link users.

@item SDL provider

The signalling data link layer protocol that provides the services of the signalling data link
interface.

@item SDL user

The user-level application or user-level or kernel-level protocol that accesses the services of the
signalling data link layer.

@item Local management

The phase in connection and connectionless modes in which a SDL user initializes a stream and
attaches a PPA address to the stream.  Primitives in this phase generate local operations only.

@item PPA

The point at which a system attaches itself to a physical communications medium.

@item PPA identifier

An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {LMS Provider}{International Telecommunication Union - Telecom Sector}
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item LM @tab Local Management
@item LMS @tab Local Management Service
@item LMS Provider @tab A provider of Local Management Services
@item LMS User @tab A user of Local Management Services
@item PPA @tab Physical Point of Attachment
@item SDL @tab Signalling Data Link
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item SDLI @tab Signalling Data Link Interface
@item SDLS @tab Signalling Data Link Service
@item SDT @tab Signalling Data Terminal
@item SDTI @tab Signalling Data Terminal Interface
@item SDTS @tab Signalling Data Terminal Service
@item SL @tab Signalling Link
@item SLI @tab Signalling Link Interface
@item SLS @tab Signalling Link Service
@item SS7 @tab Signalling System No. 7
@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}
@item [1] @tab ITU-T Recommendation Q.700
@item [2] @tab ITU-T Recommendation Q.701
@item [3] @tab ITU-T Recommendation Q.702
@item [4] @tab ITU-T Recommendation Q.703
@item [5] @tab ITU-T Recommendation Q.704
@item [6] @tab Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.
@item [7] @tab ITU-T Recommendation Q.771
@end multitable

@c @node Index
@c @unnumbered Index
@c @printindex cp

@node Indices
@unnumbered Indices

@menu
* Concept Index::
* Type Index::
@c * Function Index::
* Variable Index::
@c * File Index::
@c * Option Index::
@c * Author Index::
* Primitive Index::
* Primitive Value Index::
* Protocol State Index::
* Protocol Error Index::
* Manual Page Index::
@end menu

@node Concept Index
@section Concept Index

@printindex cp

@page
@node Type Index
@section Type Index

@printindex tp

@c @page
@c @node Function Index
@c @section Function Index

@c @printindex fn

@page
@node Variable Index
@section Variable Index

@printindex vr

@c @page
@c @node File Index
@c @section File Index

@printindex pg

@c @page
@c @node Option Index
@c @section Option Index

@c @printindex op

@c @page
@c @node Author Index
@c @section Author Index

@c @printindex au

@page
@node Primitive Index
@section Primitive Index

@printindex pr

@page
@node Primitive Value Index
@section Primitive Value Index

@printindex pv

@page
@node Protocol State Index
@section Protocol State Index

@printindex st

@page
@node Protocol Error Index
@section Protocol Error Index

@printindex pe

@page
@node Manual Page Index
@section Manual Page Index

@printindex mp


@page
@shortcontents
@page
@contents
@bye
