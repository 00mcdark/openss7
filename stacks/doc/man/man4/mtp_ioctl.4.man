'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) $Id: mtp_ioctl.4.man,v 0.9.2.7 2006/12/27 16:35:54 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2006/12/27 16:35:54 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: mtp_ioctl.4.man,v $
.\" Revision 0.9.2.7  2006/12/27 16:35:54  brian
.\" - added slpmod module and fixups for make check target
.\"
.\" Revision 0.9.2.6  2006/04/05 09:43:04  brian
.\" - moved .so line and updated headers
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strss7.macros
.\"
.\"
.TH MTP-IOCTL 4 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ Devices"
.\"
.\"
.SH NAME
.B mtp_ioctl
\- SS7 Message Transfer Part (MTP) Device \- IO Controls
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stropts.h>
.br
.B #include <ss7/mtpi.h>
.br
.B #include <ss7/mtpi_ioctl.h>
.\"
.\"
.HP
.BI "struct strioctl *" arg;
.\"
.\"
.HP
.BI "int " mtp_stream " = open(" \fR/dev/mtp\fI ", " flags );
.\"
.\"
.HP
.BI "int " retval " = ioctl(" mtp_stream ", " \fRI_STR\fI ", " arg );
.\"
.\"
.SH DESCRIPTION
.PP
.B MTP-IOCTL
is a definition of the managed object model for the
.BR mtp (4)
driver using the IO controls defined in
.BR lmi_ioctl (4).
The
.BR mtp (4)
driver is an implementation of the SS7 Message Transfer Part (MTP) protocol as
defined in ITU-T Recommendation Q.701-Q.707.
.B MTP-IOCTL
provides the definition of the managed objects for the
.BR mtp (4)
driver in accordance with the managed object model in
ITU-T Recommendation Q.751.1.
.\"
.\"
.PP
.B MTP
is an implementation of the Signalling System No. 7
.RB ( ss7 (8))
Message Transfer Part
.RB ( MTP )
defined in ITU-T Recommendation Q.704 and ANSI T1.111.4.
.B MTP
provides reliable sequenced or unsequenced delivery of packets over a
connectionless transport between two
.B MTP
endpoints.
.B MTP
provides strong assurances that the data arrives in order on a stream, if
requested, and maintains sequencing of packets in the face of most network
failures.  It generates and checks a per-packet checksum to catch transmission
errors.
.B MTP
routing routes around link and node failures in the
.BR ss7 (8)
network.
.\"
.\"
.SS "Protocol Service Interface"
.PP
.\"
.\"
.PP
.B MTP
provides the following stream types:
.\"
.\"
.TP
.I /dev/mtp
This device provides the
.B MTP
protocol serivce interface using the M-primitives of the Message Transfer Part
Interface described in
.BR mtpi (7).
.\"
.\"
.TP
.I /dev/mtp-npi
This device provides the
.B MTP
protocol service interface using the N-primitives of the Network Provider
Interface
.BR npi (7)
used for the Message Transfer Part as described in
.BR mtp_npi (7).
The
.BR npi (7)
interface provided on a stream opening this device is suitable for use with the
.BR sockets (3)
library and provides the MTP interface using sockets as described in
.BR mtp_socket (7).
.\"
.\"
.TP
.I /dev/mtp-tpi
This device provides the
.B MTP
protocol service interface using the T-primitives of the Transport Provider
Interface
.BR tpi (7)
used for the Message Transfer Part as described in
.BR mtp_tpi (7).
The
.BR tpi (7)
interface provided on a stream opening this device is suitable for use with
the
.BR xnet (3)
or
.BR xti (3)
library and provides the MTP interface using XTI as described in
.BR mtp_xti (7).
.\"
.\"
.SS "Object Model"
.PP
.B MTP
provides for management of a number of managed objects.  These objects are
of a number of types as follows:
.\"
.\"
.TP
.B MTP_OBJ_TYPE_DF
The default object.
This object refers to the collection of system-wide defaults.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_MT
An MTP user object.
This object refers to an MTP user object.  For example, an open
.B MTP
stream is an MTP user object.
MTP User objects are identified by their MTP-SAP.  The MTP-SAP is a
combination of the Network Appearance, Signalling Point Code, and MTP User
identifier.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_NA
A Network Appearance.
This object refers to a Network Appearance within a specific Point Code
numbering space and National or International Protocol Variant.  A Network
Appearance contains the Signalling Points that belong to that Network
Appearance.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_SP
A Signalling Point.
This object refers to a local or remote Signalling Point.  Signalling Points
are identified by their Network Appearance and their Signalling Point Code
(MTP Address) within the network appearance.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_RS
A Route Set.
This object refers to the collection of outgoing Routes Lists from a
Signalling Point that arrive at the same Destination Signalling Point.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_RL
A Route List.
This object refers to the collection of outgoing Routes from a Signalling
Point that arrive at the same Destination Signalling Point that have the same
priority.  Route Lists are identified by their Destination Signalling Point
and associated Combined Link Sets.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_RT
A Route.
This object refers to an outgoing route from a Signalling Point that arrives
at a Desitination Signalling Point.  Routes are identified by their
Destination Signalling Point and associated Links.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_LS
A Combined Link Set.
This object refers to a collection of Links of the same priority.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_LK
A Link Set.
This object refers to a collection of Signalling Links connected to the same
Adjacent Signalling Point.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_SL
A Signalling Link.
This object refers to a signalling link stream that is linked under the
.B MTP
multiplexing driver.  Signalling Links are
.BR sl (4)
devices supporting the
Signalling Link Interface
.RB ( sli (7)).
.\"
.\"
.TP
.B MTP_OBJ_TYPE_CB
A Changeover/Changeback Buffer.
This object refers to a changeover or changeback buffer that holds messages
while rerouting between Signalling Links or Links.
.\"
.\"
.TP
.B MTP_OBJ_TYPE_CR
A Controlled-Rerouting Buffer.
This object refers to a controlled rerouting buffer that holds messages wehn
rerouting between Routes.
.\"
.\"
.PP
Each object has associated with it information in the following categories:
.\"
.\"
.SH CONFIGURATION
.PP
All objects must be configured using
.I I_STR
.BR streamio (7)
.BR ioctl (2)
calls before they are usable.  The structures required to specify
configuration are as follows (in order of dependency).
.\"
.\"
.SS "Default"
.PP
Although a configuration structure is defined for the default object, there is
no need to configure the default object.  This object is configured at the
time that the module loads.
.\"
.\"
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_df {
} mtp_conf_df_t;
\fR\s+2
.fi
.\"
.\"
.SS "Network Appearance"
.PP
At least one Network Apperance object of type
.BR MTP_OBJ_TYPE_NA
must be created before any other objects (aside from the default object) can
be created or configured.
.PP
The Network Apperance object represents an SS7 network that has a protoocl
variant, protocol obtions, a point code format, and a range of SLS bits.  Each
network appearance object represent a separate point code numbering space.
.\"
.\"
.PP
The object-specific configuration structure for Network Appearances is
formatted as follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_na {
    lmi_option_t options;   /* protocol options */
    struct {
        ulong member;       /* PC member mask */
        ulong cluster;      /* PC cluster mask */
        ulong network;      /* PC network mask */
    } mask;
    ulong sls_bits;         /* bits in SLS */
} mtp_conf_na_t;
.\"
.\"/* additional MTP protocol options */
.\"#define SS7_POPT_TFR    0x00010000      /* old broadcast method - no responsive */
.\"#define SS7_POPT_TFRB   0x00020000      /* new broadcast method - no regulation */
.\"#define SS7_POPT_TFRR   0x00040000      /* new responsive method - regulated */
.\"#define SS7_POPT_MCSTA  0x00080000      /* multiple congestion
\fR\s+2
.fi
.\"
.\"
.TP
.I options
protocol options for the Network Appearance, including the protocol variant
and protocol options.
.RS
.\"
.\"
.TP
.I pvar
conveys the protocol variant.  The protocol variant can be one of the
following values:
.sp
.TS
tab(:);
lbl.
SS7_PVAR_ITUT_88:ITU-T 1988 (Blue Book)
SS7_PVAR_ITUT_93:ITU-T 1993 (White Book)
SS7_PVAR_ITUT_96:ITU-T 1996 (Grey Book)
SS7_PVAR_ITUT_00:ITU-T 2000 (Black Book)

SS7_PVAR_ETSI_88:ETSI 1988
SS7_PVAR_ETSI_93:ETSI 1993
SS7_PVAR_ETSI_96:ETSI 1996
SS7_PVAR_ETSI_00:ETSI 2000

SS7_PVAR_ANSI_88:ANSI 1988
SS7_PVAR_ANSI_92:ANSI 1992
SS7_PVAR_ANSI_96:ANSI 1996
SS7_PVAR_ANSI_00:ANSI 2000

SS7_PVAR_JTTC_94:JTTC 1994

SS7_PVAR_CHIN_00:CHIN 2000
.TE
.\"
.\"
.TP
.I popt
conveys the protocol options.  The protocol options can be a bitwise OR of any
of the following flags:
.sp
.TS
tab(:);
lbl.
SS7_POPT_MPLEV:T{
.ad l
.hy 0
Multiple priority/congestion levels.
T}
SS7_POPT_PCR:T{
.ad l
.hy 0
Preventative cyclic retransmission.
T}
SS7_POPT_HSL:T{
.ad l
.hy 0
High speed links.
T}
SS7_POPT_XSN:T{
.ad l
.hy 0
Extended sequence numbers and length indicator.
T}

SS7_POPT_TFR:T{
.ad l
.hy 0
Old broadcast method with no responsive TFR.
T}
SS7_POPT_TFRB:T{
.ad l
.hy 0
New (ANSI T1.111.4/2000) broadcast method\(emno regulation.
T}
SS7_POPT_TFRR:T{
.ad l
.hy 0
New (ANSI T1.111.4/2000) repsonsive method\(emregulated.
T}
SS7_POPT_MCSTA:T{
.ad l
.hy 0
Multiple congestion states w/o multiple priority levels.
T}
.TE
.RE
.\"
.\"
.TP
.I mask
conveys the bit masks for the three portions of the signalling point code.  A
make for the bits present in the entire signalling point code can be generated
by taking the bitwise OR of the
.IR member ", " cluster " and " network
fields.
.RS
.\"
.\"
.TP
.I member
conveys the bit mask of the bits that represent the member portion of the
signalling point code.  A `1' in a bit position indicates that the bit
position is part of the member portion of the signalling point code.
.\"
.\"
.TP
.I cluster
conveys the bit mask of the bits that represent the cluster portion of the
signalling point code.  A `1' in a bit position indicates that the bit
position is part of the cluster portion of the signalling point code.
.\"
.\"
.TP
.I network
conveys the bit mask of the bits that represent the network portion of the
signalling point code.  A `1' in a bit position indicates that the bit
position is part of the network portion of the signalling point code.
.RE
.\"
.\"
.TP
.I sls_bits
conveys the number of bits that are significant in the SLS field on the
routing label.  This is normally 4 (ITU-T/ETSI), 5 (ANSI) or 8 (ANSI/2000).
.\"
.\"
.SS "Signalling Point"
.PP
These objects of type
.B MTP_OBJ_TYPE_SP
represents a local signalling point within a Network Appearance.  Because the
Signalling Point owns a point code, the point code numbering space, as
represented by the Network Appearance, must be identified to place the point
code into context.
.PP
Therefore, the information required to configure a Signalling Point is a
reference (identifier) to the Network Appearance to which the Signalling Point
belongs, and the point code within that numbering space.
.\"
.\"
.PP
The object-specific configuration structure for Signalling Points is formatted
as follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_sp {
    ulong naid;     /* network appearance id */
    ulong pc;       /* point code */
    ulong users;    /* mask of equipped users */
    ulong flags;    /* options flags */
} mtp_conf_sp_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I naid
conveys the Network Appearance identifier that identifies an object of type
.BR MTP_OBJ_TYPE_NA
that conveys the Network Appearance to which the Signalling Point belongs.
.\"
.\"
.TP
.I pc
conveys the signalling point code of the Signalling Point.
.\"
.\"
.TP
.I users
conveys the mask of equipped users.  This is a bit field that includes one bit
for each equipped user.  For an MTP-User of SI value `n', bit position (1 << n)
in the mask indicates whether the user is equipped or not.  A `1' in the bit
position indicates that the user is equipped; `0', indicates unequipped.
.\"
.\"
.TP
.I flags
conveys the options flags associated with the Signalling Point.  The options
flags are a bitwise OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
.\"SPF_RESTART:T{
.\"Signalling Point restarting
.\"T}
SPF_CLUSTER:T{
.ad l
.hy 0
Signalling Point is cluster route
T}
SPF_XFER_FUNC:T{
.ad l
.hy 0
Signalling Point has transfer function
T}
SPF_SECURITY:T{
.ad l
.hy 0
Signalling Point has additional security procedures
T}
SPF_LOSC_PROC_A:T{
.ad l
.hy 0
Signalling Point uses link oscillation procedure A
T}
SPF_LOSC_PROC_B:T{
.ad l
.hy 0
Signalling Point uses link oscillation procedure B
T}
.\"SPF_RESTART_PHASE_1:T{
.\"Signalling Point restarting
.\"T}
.\"SPF_RESTART_PHASE_2:T{
.\"Signalling Point restarting
.\"T}
.TE
.\"
.\"
.SS "Route Set"
.PP
Route set objects of type
.B MTP_OBJ_TYPE_RS
belong to a specific local Signalling Point and represent a destination of
that signalling point.  The information required to configure a Route Set is
a reference (identifier) to the local Signalling Point and the signalling
point code of the destination.
.PP
In addition, the Route Set can be to an adjacent signalling point
.RB ( RSF_ADJACENT ),
and can be a signalling transfer point
.RB ( RSF_XFER_FUNC ).
Route Sets can also be cluster routes
.RB ( RSF_CLUSTER ).
.\"
.\"
.PP
The object-specific configuration structure for Route Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_rs {
    ulong spid;     /* signalling point id */
    ulong dest;     /* destination point code */
    ulong flags;    /* options flags */
} mtp_conf_rs_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I spid
conveys the Signalling Point identifier of an object of type
.BR MTP_OBJ_TYPE_SP
to which this Route Set belongs.
.\"
.\"
.TP
.I dest
conveys the destination point code for the Route Set.  This is the point code
of the distant signalling point to which the Route Set applies.
.\"
.\"
.TP
.I flags
conveys the options flags associated with the Route Set.  These can a bitwise
OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
.\"RSF_ALLOWED:Routeset is allowed
.\"RSF_DANGER:Routeset is in danger of congestion
.\"RSF_CONGESTED:Routeset is congested
.\"RSF_RESTRICTED:Routeset is restricted
.\"RSF_RESTART:Routeset is restarting
.\"RSF_PROHIBITED:Routeset is prohibited
.\"RSF_INHIBITED:Routeset is inhibited
.\"RSF_BLOCKED:Routeset is blocked
.\"RSF_INACTIVE:Routeset is inactive
.\"RSF_TFR_PENDING:Routeset has TFR pending
RSF_CLUSTER:T{
.ad l
Routeset is cluster route
T}
RSF_XFER_FUNC:T{
.ad l
Routeset has transfer function
T}
RSF_ADJACENT:T{
.ad l
Routeset is adjacent
T}
.TE
.\"
.\"
.SS "Combined Link Set"
.PP
Combined Link Sets are groups of Link Sets that have the same routing priority
(cost) due to network configuration.  Combined Link Sets can contain one or
more Link Sets.
Combined Link Sets typically represent single or pairs of Link Sets that
emminate from a Signalling Point, so the local Signalling Point to which the
Combined Link Set belongs is identified by the Combined Link Set
configuration.
.PP
For ITU-T operation, some SLS bits are used for Link Set selection within a
Combined Link Set.  Because Combined Link Sets normally have no more than two
Link Sets, usually only one SLS bit is used for Combined Link Set selection.
For ANSI operation, the SLS bit used to determine the Link Set within the
Combined Link Set is determined by bit rotation rules.
.\"
.\"
.PP
The object-specific configuration structure for a Combined Link Set is
formatted as follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_ls {
    ulong spid;     /* signalling point id */
    ulong sls_mask; /* mask of bits selecting link set */
} mtp_conf_ls_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I spid
conveys the signalling point identifier of the local
.BR MTP_OBJ_TYPE_SP
object to which the combined link set is associated.
.\"
.\"
.TP
.I sls_mask
conveys the Signalling Link Selection mask.  This mask is used to determine
which SLS bits to use for Link Set and Link selection and which bits to
ignore.  This is for ITU-T operation.
.\"
.\"
.SS "Route List"
.PP
Route Lists are objects of type
.B MTP_OBJ_TYPE_RL
that represent a collection of Routes that have the same priority (cost).  A
Route List belongs to a Route Set and has a unique priority (cost) associated
with it.
.PP
Route Lists have a relationship to Combined Link Sets.  The Routes that
traverse Link Sets in a Combined Link Set all have the sam priority (cost).
Therefore, the Routes that traverse Link Sets in a Combined Link Set represent
Routes in the same Route List.
.PP
To configure a Route List requires that the Route Set to which the list
belongs with the corresponding priority (cost) be identified and the Combined
Link Set that corresponds to the Routes in the Route list also be identified.
.\"
.\"
.PP
The object-specific configuration structure for Route Lists is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_rl {
    ulong rsid;     /* route set id */
    ulong lsid;     /* combined link set id */
    ulong cost;     /* cost in routeset */
} mtp_conf_rl_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I rsid
conveys the Route Set identifier of an object of type
.BR MTP_OBJ_TYPE_RS
to which this Route List belongs.
.\"
.\"
.TP
.I lsid
conveys the Combined Link Set identifier of an object of type
.BR MTP_OBJ_TYPE_LS
to which this Route List belongs.
.\"
.\"
.TP
.I cost
conveys the cost (inverse of priority) of this Route List within the conveyed
Route Set.  Only one Route List can have a given cost value.
.\"
.\"
.SS "Link Set"
.PP
A Link Set is one of several Link Sets in a Combined Link Set.  A Link Set
belongs to one Combined Link Set and is attached to one specific remove
signalling point that can be identified by a Route Set.
.\"
.\"
.PP
The object-specific configuration structure for Link Sets is formatted as follows:
.sp
.nf
\fC\s-2\
.\"/*
.\" *  Link set configuration
.\" */
typedef struct mtp_conf_lk {
    ulong lsid;     /* combined link set id */
    ulong rsid;     /* routeset of adjacent signalling point */
    ulong ni;       /* network indicator for link set */
    ulong slot;     /* slot of SLS for this link set */
} mtp_conf_lk_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I lsid
conveys the parten Combined Link Set
(object of type
.BR MTP_OBJ_TYPE_LS )
to which this Link Set belongs.
.\"
.\"
.TP
.I rsid
conveys the Route Set
(object of type
.BR MTP_OBJ_TYPE_RS )
to the signalling point adjacent to the Link Set.
.\"
.\"
.TP
.I ni
conveys the newtork indicator for the link set.  This is the value that will
be used in the MTP Routing Label for all messages outgoing on this link set.
.\"
.\"
.TP
.I slot
conveys the position with the Combined Link Set.  Normally links are only at
positions 0 and 1, but,
.I OpenSS7
.BR mtp (4)
also supports quad link sets where this slot position would be between 0 and 3
inclusive.
.\"
.\"
.SS Route
.PP
Routes are objects of type
.B MTP_OBJ_TYPE_RT
that represent a path to a destination of a given priority (cost) via an
adjacent signalling point over a Link Set.  Routes are grouped in Route Lists
with other Routes that share the same priority (cost).
.\"
.\"
.PP
The object-specific configuration structure for Routes is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_conf_rt {
    ulong rlid;     /* route list id */
    ulong lkid;     /* link id */
    ulong slot;     /* slot of SLS for this route */
} mtp_conf_rt_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I rlid
conveys the Route List identifier of an object of type
.BR MTP_OBJ_TYPE_RL ,
to which this Route belongs.
.\"
.\"
.TP
.I lkid
conveys the Link Set identifier of an object of type
.BR MTP_OBJ_TYPE_LK ,
to which the Route belongs.
.\"
.\"
.TP
.I slot
conveys the slot position of this Route within the Route List.  Normally this
would be 0 or 1, however,
.I OpenSS7
.BR mtp (4)
supports an quad Combined Links Sets, so Routes can have a Route List slot
value of 0 to 3 inclusive.
.\"
.\"
.SS "Signalling Link"
.PP
Signalling Links are objects of type
.BR MTP_OBJ_TYPE_SL
that are grouped together into Link Sets.  The Signalling Links in a Link Set
all terminate on the same adjacent signalling point (adjacent Route Set).
Each Signalling Link has a Signalling Link Code (SLC) that uniquely identifies
the Signalling Link within the Combined Link Set.
.PP
Signalling Link comprise separate streams that provide signalling link
services using the
.BR sli (7)
interface.  These streams are linked under the MTP multiplexing driver,
.BR mtp (4),
using the
.IR I_LINK " or " I_PLINK
commands of
.BR streamio (7).
When linked, Signalling Links are configured using the
.BR MTP_IOCSCONFIG
command.
.PP
A Signalling Link is determined by its lower multiplexing driver identifier
that was returned as a result of the
.IR I_LINK " or " I_PLINK
operation, the Link Set to which it belongs, and the SLC of the Signalling
Link within the Combined Link Set to which the owning Link Set belongs.
.\"
.\"
.PP
The object-specific configuration structure for Signallin Links is formatted
as follows:
.sp
.nf
\fC\s-2\
.\"/*
.\" *  Signalling link configuration
.\" */
typedef struct mtp_conf_sl {
    ulong muxid;    /* lower multiplexor id */
    ulong lkid;     /* link set id */
    ulong slc;      /* signalling link code in lk */
} mtp_conf_sl_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I muxid
Before a signalling link can be configured it must be linked under the
.B MTP
multipexing driver using the
.I I_LINK
or
.I I_PLINK
command of
.BR streamio (7).
Once the signalling link has been linked under the
.B MTP
multipexor, it can be configured.  The
.I muxid
field of the configuration command contains the identifier that was returned
from the
.I I_LINK
or
.I I_PLINK
.BR streamio (7).
.\"
.\"
.TP
.I lkid
Conveys the
.B MTP_OBJ_TYPE_LK
object (Link) to which the Signalling Link belongs.
.\"
.\"
.TP
.I slc
Conveys the Signalling Link Code of the signalling link within the link (set).
.\"
.\"
.SH TIMERS
.PP
The same object-specific timer structures are used for both the reference to a
running timer in the state structures as well as the timeout value in the
options structures.  The nature of each timer is described in this section.
.PP
Timers for MTP objects are determined by the relevant standards.  See Q.704
and ANSI T1.111.4.
.PP
The sections that follow describe the timer structure for each object type.
.\"
.\"
.SS "Default"
.PP
MTP has no global or general timers not directly associated with signalling
point or an element of a signalling point.  No timers are defined by Q.704 or
ANSI T1.111.4 for the system hosting the MTP.
.\"
.\"
.SS "Network Appearance"
.PP
Network apperances are merely groups of signalling points and no timers are
defined by Q.704 or ANSI T1.111.4 for network appearances.
.\"
.\"
.SS "Signalling Point"
.PP
Signalling points have the following timers defined by Q.704 and ANSI T1.111.4:
.sp
.nf
\fC\s-2\
typedef struct mtp_timers_sp {
    ulong t1r;      /* timer t1r */
    ulong t18;      /* timer t18 */
    ulong t19;      /* timer t19 */
    ulong t20;      /* timer t20 */
    ulong t21;      /* timer t21 */
    ulong t22a;     /* timer t22a */
    ulong t23a;     /* timer t23a */
    ulong t24a;     /* timer t24a */
    ulong t25a;     /* timer t25a */
    ulong t26a;     /* timer t26a */
    ulong t27a;     /* timer t27a */
    ulong t28a;     /* timer t28a */
    ulong t29a;     /* timer t29a */
    ulong t30a;     /* timer t30a */
} mtp_timers_sp_t;
\fR\s+2
.fi
.TS
tab(:);
licblsssss.
t1r:\(em:T{
T}
t18:ITUT:T{
timer within a signalling point whose MTP restarts for supervising link and
link set activation as well as the receipt of routing information
T}
t19:ITUT:T{
supervision timer during MTP restart to avoid possible ping-pong of
TFP, TFR and TRA messages
T}
t20:ITUT:T{
overall MTP restart timer at the signalling point whose MTP restarts
T}
t21:ITUT:T{
overall MTP restart timer at the signalling point adjacent to one whose
MTP restarts
T}
t22a:ANSI:T{
timer at restarting SP waiting for signalling links to become available
T}
t23a:ANSI:T{
timer at restarting SP, started after T22, waiting to receive all
traffic restart allowed messages
T}
t24a:ANSI:T{
timer at restarting SP with transfer function, started after T23,
waiting to broadcast all traffic restart allowed message
T}
t25a:ANSI:T{
timer at restarting SP and SP adjacent to restarting SP, waiting for
traffic restart allowed message
T}
t26a:ANSI:T{
timer at restarting SP waiting to repeat traffic restart waiting message
T}
t27a:ANSI:T{
minimum duration of unavailability for full restart
T}
t28a:ANSI:T{
timer at SP adjacent to restarting SP waiting for traffic restart waiting
message
T}
t29a:ANSI:T{
timer started when TRA sent in response to unexpected TRA or TRW
T}
t30a:ANSI:T{
timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW
T}
.TE
.\"
.\"
.SS "Route Set"
.PP
Route sets have the following timers defined by Q.704 and ANSI T1.111.4:
.sp
.nf
\fC\s-2\
typedef struct mtp_timers_rs {
    ulong t8;       /* timer t8 */
    ulong t11;      /* timer t11 */
    ulong t15;      /* timer t15 */
    ulong t16;      /* timer t16 */
    ulong t18a;     /* timer t18a */
} mtp_timers_rs_t;
\fR\s+2
.fi
.TS
tab(:);
licblsssss.
t8:\(em:T{
transfer-prohibited inhibited timer (transient solution)
T}
t11:\(em:T{
transfer-restricted timer
T}
t15:\(em:T{
waiting to repeat signalling route set congestion test
T}
t16:\(em:T{
waiting for route set congestion status update
T}
t18a:ANSI:T{
repeat TFR once by response method
T}
.TE
.\"
.\"
.SS "Combined Link Set"
.PP
Combined link sets are merely a grouping of Link Sets, and no timers are
defined by Q.704 or ANSI T1.111.4 that are associated with Combined Link Sets.
.\"
.\"
.SS "Route"
.PP
Routes have the following timers defined by Q.704 and ANSI T1.111.4:
.sp
.nf
\fC\s-2\
typedef struct mtp_timers_rt {
    ulong t6;       /* timer t6 */
    ulong t10;      /* timer t10 */
} mtp_timers_rt_t;
\fR\s+2
.fi
.TS
tab(:);
licblsssss.
t6:\(em:T{
delay to avoid message mis-sequencing on controlled rerouting
T}
t10:\(em:T{
waiting to repeat signalling-route-set-test message
T}
.TE
.\"
.\"
.SS "Route List"
.PP
Route lists are merely a groups of Routes, and no timers are defined by Q.704
or ANSI T1.111.4 that are associatedwith a Route List.
.\"
.\"
.SS "Link Set"
.PP
Link sets have the following timers defined by Q.704 and ANSI T1.111.4:
.sp
.nf
\fC\s-2\
typedef struct mtp_timers_lk {
    ulong t7;       /* timer t7 */
} mtp_timers_lk_t;
\fR\s+2
.fi
.TS
tab(:);
licblsssss.
t7:\(em:T{
waiting for signalling data link connection acknowledgment
T}
.TE
.\"
.\"
.SS "Signalling Link"
.PP
Signalling links have the following timers defined by Q.704 and ANSI T1.111.4:
.sp
.nf
\fC\s-2\
typedef struct mtp_timers_sl {
    ulong t1;       /* timer t1 */
    ulong t2;       /* timer t2 */
    ulong t3;       /* timer t3 */
    ulong t4;       /* timer t4 */
    ulong t5;       /* timer t5 */
    ulong t12;      /* timer t12 */
    ulong t13;      /* timer t13 */
    ulong t14;      /* timer t14 */
    ulong t17;      /* timer t17 */
    ulong t19a;     /* timer t19a */
    ulong t20a;     /* timer t20a */
    ulong t21a;     /* timer t21a */
    ulong t22;      /* timer t22 */
    ulong t23;      /* timer t23 */
    ulong t24;      /* timer t24 */
    ulong t31a;     /* timer t31a */
    ulong t32a;     /* timer t32a */
    ulong t33a;     /* timer t33a */
    ulong t34a;     /* timer t34a */
    ulong t1t;      /* timer t1t */
    ulong t2t;      /* timer t2t */
    ulong t1s;      /* timer t1s */
} mtp_timers_sl_t;
\fR\s+2
.fi
.TS
tab(:);
licblsssss.
t1:\(em:T{
delay to avoid message mis-sequencing on changeover
T}
t2:\(em:T{
waiting for changeover acknowledgement
T}
t3:\(em:T{
time-controlled diversion \(em delay to avoid mis-sequencing on changback
T}
t4:\(em:T{
waiting for changeback acknowledgment (first attempt)
T}
t5:\(em:T{
waiting for changeback acknowledgment (second attempt)
T}
t12:\(em:T{
waiting for uninhibit acknowledgment
T}
t13:\(em:T{
waiting for force uninhibit
T}
t14:\(em:T{
waiting for inhibition acknowledgment
T}
t17:\(em:T{
delay to avoid oscillation of initial alignment failure and link restart
T}
t19a:ANSI:T{
failed link craft referral time
T}
t20a:ANSI:T{
waiting to repeat local inhibit test
T}
t21a:ANSI:T{
waiting to repeat remote inhibit test
T}
t22:ITUT:T{
local inhibit test timer
T}
t23:ITUT:T{
remote inhibit test timer
T}
t24:ITUT:T{
stabilising timer after removal of local processor outage, used in LPO
latching to RPO (national option)
T}
t31a:ANSI:T{
false link congestion detection timer
T}
t32a:ANSI:T{
link oscillation timer \(em procedure A
T}
t33a:ANSI:T{
probation timer for link oscillation \(em procedure B
T}
t34a:ANSI:T{
suspension timer for link oscillation \(em procedure B
T}
t1t:\(em:T{
supervision timer for signalling link test acknowledgment message
T}
t2t:\(em:T{
interval timer for sending signalling link test messages
T}
t1s:ANSI:T{
supervision timer for special signalling link test acknowledgement
message
T}
.TE
.\"
.\"
.SH OPTIONS
.PP
.\"
.\"
.SS "Signalling Link"
.PP
The object-specific options structure for Signalling Links is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_sl {
    mtp_timers_sl_t sl_timeval; /* signalling link timers */
} mtp_opt_conf_sl_t;
\fR\s+2
.fi
.TP 12
.I sl_timeval
conveys the Signalling Link timeout values.
.\"
.\"
.SS "Link Set"
.PP
.PP
The object-specific options structure for Link Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_lk {
    mtp_timers_sl_t sl_timeval; /* signalling link timers */
    mtp_timers_lk_t lk_timeval; /* link timers */
} mtp_opt_conf_lk_t;
\fR\s+2
.fi
.TP 12
.I sl_timeval
conveys the default Signalling Link timeout values
when creating Signalling Links within the Link Set.
.TP
.I lk_timeval
conveys the Link Set timeout values.
.\"
.\"
.SS "Combined Link Set"
.PP
.PP
The object-specific options structure for Combined Link Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_ls {
    mtp_timers_sl_t sl_timeval; /* signalling link timers */
    mtp_timers_lk_t lk_timeval; /* link timers */
} mtp_opt_conf_ls_t;
\fR\s+2
.fi
.TP 12
.I sl_timeval
conveys the default Signalling Link timeout values
when creating Link Sets within the Combined Link Set.
.TP
.I lk_timeval
conveys the default Link Set timeout values
when creating Link Sets within the Combined Link Set.
.\"
.\"
.SS "Route"
.PP
.PP
The object-specific options structure for Routes is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_rt {
    mtp_timers_rt rt_timeval;   /* route timers */
} mtp_opt_conf_rt_t;
\fR\s+2
.fi
.TP 12
.I rt_timeval
conveys the Route timeout values.
.\"
.\"
.SS "Route List"
.PP
.PP
The object-specific options structure for Route Lists is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_rl {
    mtp_timers_rt rt_timeval;   /* route timers */
} mtp_opt_conf_rl_t;
\fR\s+2
.fi
.TP 12
.I rt_timeval
convesy the default Route timeout values
when creating Routes within the Route List.
.\"
.\"
.SS "Route Set"
.PP
.PP
The object-specific options structure for Route Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_rs {
    mtp_timers_rt rt_timeval;   /* route timers */
    mtp_timers_rs rs_timeval;   /* route set timers */
} mtp_opt_conf_rs_t;
\fR\s+2
.fi
.TP 12
.I rt_timeval
conveys the default Route timeout values
when creating Route Lists within the Route Set.
.TP
.I rs_timeval
conveys the timeout values for the Route Set.
.\"
.\"
.SS "Signalling Point"
.PP
.PP
The object-specific options structure for Signalling Points is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_sp {
    mtp_timers_sl_t sl_timeval; /* signalling link timers */
    mtp_timers_lk_t lk_timeval; /* link timers */
    mtp_timers_rt_t rt_timeval; /* route timers */
    mtp_timers_rs_t rs_timeval; /* route set timers */
    mtp_timers_sp_t sp_timeval; /* signalling point timers */
} mtp_opt_conf_sp_t;
\fR\s+2
.fi
.TP 12
.I sl_timeval
conveys the default Signalling Link timeout values
when creating Combined Link Sets for the Signalling Point.
.TP
.I lk_timeval
conveys the default Link Set timeout values
when creating Combined Link Sets for the Signalling Point.
.TP
.I rt_timeval
conveys the default Route timeout values
when creating Route Sets for the Signalling Point.
.TP
.I rs_timeval
conveys the default Route Set timeout values
when creating Route Sets for the Signalling Point.
.TP
.I sp_timeval
conveys the timeout values for the Signalling Point.
.\"
.\"
.SS "Network Appearance"
.PP
.PP
The object-specific options structure for Network Appearances is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_na {
    mtp_timers_sl_t sl_timeval; /* signalling link timers */
    mtp_timers_lk_t lk_timeval; /* link timers */
    mtp_timers_rt_t rt_timeval; /* route timers */
    mtp_timers_rs_t rs_timeval; /* route set timers */
    mtp_timers_sp_t sp_timeval; /* signalling point timers */
} mtp_opt_conf_na_t;
\fR\s+2
.fi
.TP 12
.I sl_timeval
conveys the default Signalling Link timeout values
when creating Signalling Points in the Network Appearance.
.TP
.I lk_timeval
conveys the default Link Set timeout values
when creating Signalling Points in the Network Appearance.
.TP
.I rt_timeval
conveys the default Route timeout values
when creating Signalling Points in the Network Appearance.
.TP
.I rs_timeval
conveys the default Route Set timeout values
when creating Signalling Points in the Network Appearance.
.TP
.I sp_timeval
conveys the default Signalling Point timeout values
when creating Signalling Points in the Network Appearance.
.\"
.\"
.SS "Default"
.PP
.PP
The object-specific options structure for the Default object is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_opt_conf_df {
} mtp_opt_conf_df_t;
\fR\s+2
.fi
.\"
.\"
.SH STATE
.PP
.\"
.\"
.SS "Signalling Link"
.PP
.PP
The object-specific state structure for Signalling Links is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_sl {
    struct mtp_timers_sl timers;
} mtp_statem_sl_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
SL_RESTORED:T{
.ad l
activated/restored/resumed
T}
SL_DANGER:T{
.ad l
danger of congestion (overloaded)
T}
SL_CONGESTED:T{
.ad l
congested (link congestion)
T}
SL_UNUSABLE:T{
.ad l
unusable (local processor outage)
T}
SL_RETRIEVAL:T{
.ad l
retrieving
T}
SL_FAILED:T{
.ad l
failed
T}
SL_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
SL_BLOCKED:T{
.ad l
blocked (processor outage)
T}
SL_INACTIVE:T{
.ad l
inactive (out of service)
T}
SL_NODANGER:T{
.ad l
out of danger (transient state)
T}
SL_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
SL_UPDATED:T{
.ad l
buffer update complete (transient state)
T}
SL_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
SL_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
SL_ACTIVE:T{
.ad l
active (link in service)
T}
.TE
.sp
interface state is as follows:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
SLS_OUT_OF_SERVICE:T{
.ad l
out of service
T}
SLS_PROC_OUTG:T{
.ad l
processor outage
T}
SLS_IN_SERVICE:T{
.ad l
in service
T}
SLS_WACK_COO:T{
.ad l
waiting COA/ECA in response to COO
T}
SLS_WACK_ECO:T{
.ad l
waiting COA/ECA in response to ECO
T}
SLS_WCON_RET:T{
.ad l
waiting for retrieval confrimation
T}
SLS_WIND_CLRB:T{
.ad l
waiting for clear buffers indication
T}
SLS_WIND_BSNT:T{
.ad l
waiting for BSNT indication
T}
SLS_WIND_INSI:T{
.ad l
waiting for in service indication
T}
SLS_WACK_SLTM:T{
.ad l
waiting SLTA in response to 1st SLTM
T}
.TE
.TP
.I flags
is an LMI header field conveying primary state and options flags that is a
bitwise OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
SLF_TRAFFIC:T{
.ad l
sent traffic
T}
SLF_COO_RECV:T{
.ad l
received a COO
T}
SLF_ECO_RECV:T{
.ad l
received a ECO
T}
SLF_WACK_SLTM:T{
.ad l
waiting for response to 1st SLTM
T}
SLF_WACK_SLTM2:T{
.ad l
waiting for response to 2nd SLTM
T}
SLF_WACK_SSLTM:T{
.ad l
waiting for response to 1st SSLTM
T}
SLF_WACK_SSLTM2:T{
.ad l
waiting for response to 2nd SSLTM
T}
SLF_RESTORED:T{
.ad l
activated/restored
T}
SLF_DANGER:T{
.ad l
danger of congestion (overloaded)
T}
SLF_CONGESTED:T{
.ad l
congested (link congestion)
T}
SLF_UNUSABLE:T{
.ad l
unusable (local processor outage)
T}
SLF_RETRIEVAL:T{
.ad l
retrieving
T}
SLF_FAILED:T{
.ad l
failed
T}
SLF_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
SLF_BLOCKED:T{
.ad l
blocked (processor outage)
T}
SLF_INACTIVE:T{
.ad l
inactive (out of service)
T}

SLF_LOSC_PROC_A:T{
.ad l
uses link oscillation procedure A
T}
SLF_LOSC_PROC_B:T{
.ad l
uses link oscillation procedure B
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Signalling Link
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Link Set"
.PP
.PP
The object-specific state structure for Link Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_lk {
    struct mtp_timers_lk timers;
} mtp_statem_lk_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
LK_ALLOWED:T{
.ad l
allowed
T}
LK_DANGER:T{
.ad l
danger of congestion (primary or secondary)
T}
LK_CONGESTED:T{
.ad l
congested (link set congestion, primary or secondary)
T}
LK_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
LK_RESTART:T{
.ad l
restarting
T}
LK_PROHIBITED:T{
.ad l
prohibited (received TFP)
T}
LK_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
LK_BLOCKED:T{
.ad l
blocked (local link set failure)
T}
LK_INACTIVE:T{
.ad l
inactive (link out of service)
T}
LK_NODANGER:T{
.ad l
out of danger (transient state)
T}
LK_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
LK_RESTARTED:T{
.ad l
restarted
T}
LK_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
LK_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
LK_ACTIVE:T{
.ad l
active (link in service)
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Link Set
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Combined Link Set"
.PP
.PP
The object-specific state structure for Combined Link Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_ls {
    struct mtp_timers_ls timers;
} mtp_statem_ls_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
LS_ALLOWED:T{
.ad l
allowed
T}
LS_DANGER:T{
.ad l
danger of congestion (primary or secondary)
T}
LS_CONGESTED:T{
.ad l
congested (link set congestion, primary or secondary)
T}
LS_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
LS_RESTART:T{
.ad l
restarting
T}
LS_PROHIBITED:T{
.ad l
prohibited (received TFP)
T}
LS_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
LS_BLOCKED:T{
.ad l
blocked (local link set failure)
T}
LS_INACTIVE:T{
.ad l
inactive (link out of service)
T}
LS_NODANGER:T{
.ad l
out of danger (transient state)
T}
LS_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
LS_RESTARTED:T{
.ad l
restarted
T}
LS_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
LS_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
LS_ACTIVE:T{
.ad l
active (link in service)
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Combined Link Set
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Route"
.PP
.PP
The object-specific state structure for Routes is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_rt {
    struct mtp_timers_rt timers;
} mtp_statem_rt_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
RT_ALLOWED:T{
.ad l
allowed
T}
RT_DANGER:T{
.ad l
danger of congestion (primary or secondary)
T}
RT_CONGESTED:T{
.ad l
congested (link set congestion, primary or secondary)
T}
RT_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
RT_RESTART:T{
.ad l
restarting
T}
RT_PROHIBITED:T{
.ad l
prohibited (received TFP)
T}
RT_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
RT_BLOCKED:T{
.ad l
blocked (local link set failure)
T}
RT_INACTIVE:T{
.ad l
inactive (link out of service)
T}
RT_NODANGER:T{
.ad l
out of danger (transient state)
T}
RT_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
RT_RESTARTED:T{
.ad l
restarted
T}
RT_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
RT_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
RT_ACTIVE:T{
.ad l
active (link in service)
T}
.TE
.TP
.I flags
is an LMI header field conveying primary state and options flags that is a
bitwise OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
RTF_ALLOWED:T{
.ad l
allowed
T}
RTF_DANGER:T{
.ad l
in danger of congestion
T}
RTF_CONGESTED:T{
.ad l
congested
T}
RTF_RESTRICTED:T{
.ad l
restricted
T}
RTF_RESTART:T{
.ad l
restarting
T}
RTF_PROHIBITED:T{
.ad l
prohibited
T}
RTF_INHIBITED:T{
.ad l
inhibited
T}
RTF_BLOCKED:T{
.ad l
blocked
T}
RTF_INACTIVE:T{
.ad l
inactive
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Route
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Route List"
.PP
.PP
The object-specific state structure for Route Lists is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_rl {
    struct mtp_timers_rl timers;
} mtp_statem_rl_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
RL_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
RL_RESTART:T{
.ad l
restarting
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Route List
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Route Set"
.PP
.PP
The object-specific state structure for Route Sets is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_rs {
    struct mtp_timers_rs timers;
} mtp_statem_rs_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
RS_ALLOWED:T{
.ad l
allowed
T}
RS_DANGER:T{
.ad l
danger of congestion (primary or secondary)
T}
RS_CONGESTED:T{
.ad l
congested (link set cong, primary or secondary)
T}
RS_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
RS_RESTART:T{
.ad l
restarting
T}
RS_PROHIBITED:T{
.ad l
prohibited (received TFP)
T}
RS_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
RS_BLOCKED:T{
.ad l
blocked (local link set failure)
T}
RS_INACTIVE:T{
.ad l
inactive (link out of service)
T}
RS_NODANGER:T{
.ad l
out of danger (transient state)
T}
RS_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
RS_RESTARTED:T{
.ad l
restarted
T}
RS_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
RS_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
RS_ACTIVE:T{
.ad l
active (link in service)
T}
RS_RESTART_PHASE_1:T{
.ad l
restarting phase 1
T}
RS_RESTART_PHASE_2:T{
.ad l
restarting phase 2
T}
.TE
.TP
.I flags
is an LMI header field conveying primary state and options flags that is a
bitwise OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
RSF_ALLOWED:T{
.ad l
allowed
T}
RSF_DANGER:T{
.ad l
in danger of congestion
T}
RSF_CONGESTED:T{
.ad l
congested
T}
RSF_RESTRICTED:T{
.ad l
restricted
T}
RSF_RESTART:T{
.ad l
restarting
T}
RSF_PROHIBITED:T{
.ad l
prohibited
T}
RSF_INHIBITED:T{
.ad l
inhibited
T}
RSF_BLOCKED:T{
.ad l
blocked
T}
RSF_INACTIVE:T{
.ad l
inactive
T}

RSF_TFR_PENDING:T{
.ad l
TFR pending
T}
RSF_CLUSTER:T{
.ad l
cluster route
T}
RSF_XFER_FUNC:T{
.ad l
transfer function
T}
RSF_ADJACENT:T{
.ad l
adjacent
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Routes Set
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Signalling Point"
.PP
.PP
The object-specific state structure for Signalling Points is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_sp {
    struct mtp_timers_sp timers;
} mtp_statem_sp_t;
\fR\s+2
.fi
.TP
.I state
is an LMI header field conveying primary state that can take on one of the
following values:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
SP_ALLOWED:T{
.ad l
allowed
T}
SP_DANGER:T{
.ad l
danger of congestion (primary or secondary)
T}
SP_CONGESTED:T{
.ad l
congested (link set cong, primary or secondary)
T}
SP_RESTRICTED:T{
.ad l
restricted (route failure or received TFR)
T}
SP_RESTART:T{
.ad l
restarting
T}
SP_PROHIBITED:T{
.ad l
prohibited (received TFP)
T}
SP_INHIBITED:T{
.ad l
inhibited (management inhibited)
T}
SP_BLOCKED:T{
.ad l
blocked (local link set failure)
T}
SP_INACTIVE:T{
.ad l
inactive (link out of service)
T}
SP_NODANGER:T{
.ad l
out of danger (transient state)
T}
SP_UNCONGESTED:T{
.ad l
uncongested (transient state)
T}
SP_RESTARTED:T{
.ad l
restarted
T}
SP_UNINHIBITED:T{
.ad l
uninhibited (transient state)
T}
SP_UNBLOCKED:T{
.ad l
unblocked (transient state)
T}
SP_ACTIVE:T{
.ad l
active (link in service)
T}
SP_RESTART_PHASE_1:T{
.ad l
restarting phase 1
T}
SP_RESTART_PHASE_2:T{
.ad l
restarting phase 2
T}
.TE
.TP
.I flags
is an LMI header field conveying primary state and options flags that is a
bitwise OR of any of the following flags:
.sp
.TS
tab(:);
lbw(1.8i)lssss.
SPF_RESTART:T{
.ad l
restarting
T}
SPF_CLUSTER:T{
.ad l
cluster route
T}
SPF_XFER_FUNC:T{
.ad l
transfer function
T}
SPF_SECURITY:T{
.ad l
additional security procedures
T}
SPF_LOSC_PROC_A:T{
.ad l
uses link oscillation procedure A
T}
SPF_LOSC_PROC_B:T{
.ad l
uses link oscillation procedure B
T}
SPF_RESTART_PHASE_1:T{
.ad l
restarting
T}
SPF_RESTART_PHASE_2:T{
.ad l
restarting
T}
.TE
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Signalling Point
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Network Appearance"
.PP
.PP
The object-specific state structure for Network Appearances is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_na {
    struct mtp_timers_na timers;
} mtp_statem_na_t;
\fR\s+2
.fi
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Network Appearance
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SS "Default"
.PP
.PP
The object-specific state structure for the Defauilt object is formatted as
follows:
.sp
.nf
\fC\s-2\
typedef struct mtp_statem_df {
    struct mtp_timers_df timers;
} mtp_statem_df_t;
\fR\s+2
.fi
.TP
.I timers
conveys the duration (in milliseconds) remaining on each of the
Default
timers.  When a timer is zero, it indicates that the timer is not running.
.\"
.\"
.SH STATISTICS
.PP
.\"
.\"
.PP
Statistics for
.BR mtp (4)
are defined consistent with the measurement and monitoring model of
ITU-T Recommendation Q.752 and ANSI T1.116.2.
.\"
.\"
.SS "Signalling Link"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_sl {
} mtp_stats_sl_t;
\fR\s+2
.fi
.TP
.I Table 2/Q.752/T1.116.2 2.1
.B (seconds/SL)
Duration of SL unavailability (for any reason)
.TP
.I Table 2/Q.752/T1.116.2 2.5
.B (seconds/SL)
Duration of SL inhibition due to local management actions
.TP
.I Table 2/Q.752/T1.116.2 2.6
.B (seconds/SL)
Duration of SL inhibition due to remote management actions
.TP
.I Table 2/Q.752/T1.116.2 2.7
.B (seconds/SL)
Duration of SL unavailability due to link failure
.TP
.I Table 2/Q.752/T1.116.2 2.9
.B (seconds/SL)
Duration of SL unavailability due to remote processor outage
.TP
.I Table 2/Q.752/T1.116.2 2.13
.B (events/SL)
Local management inhibit
.TP
.I Table 2/Q.752/T1.116.2 2.14
.B (events/SL)
Local management uninhibit
.TP
.I Table 2/Q.752/T1.116.2 2.15
.B (SIBs/SL)
Duration of local busy
.TP
.I Table 3/Q.752/T1.116.2 3.1
.B (octets/SL)
Number of SIF and SIO octets transmitted
.TP
.I Table 3/Q.752/T1.116.2 3.2
.B (octets/SL)
Octets retransmitted
.TP
.I Table 3/Q.752/T1.116.2 3.3
.B (MSUs/SL)
Number of message signal units transmitted
.TP
.I Table 3/Q.752/T1.116.2 3.4
.B (octets/SL)
Number of SIF and SIO octets received
.TP
.I Table 3/Q.752/T1.116.2 3.5
.B (MSUs/SL)
Number of message signal units received
.TP
.I Table 3/Q.752/T1.116.2 3.6
.B (events/SL)
.I (1+D)
SL congestion indications
.TP
.I Table 3/Q.752/T1.116.2 3.7
.B (seconds/SL)
Cummulative duration of SL congestion
.TP
.I Table 3/T1.116.2 3.9
.B (events/SL)
.I (1+D)
Stop of SL congestion
.TP
.I Table 3/Q.752/T1.116.2 3.10
.B (MSUs/SL)
Message signal units discarded due to SL congestion
.TP
.I Table 3/Q.752/T1.116.2 3.11
.B (events/SL)
.I (1+D)
Number of congestion events resulting in loss of message signal units

.\"
.\"
.SS "Link Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_lk {
} mtp_stats_lk_t;
\fR\s+2
.fi
.TP
.I Table 4/Q.752/T1.116.2 4.2
.B (seconds/LS)
Duration of unavailability of signalling link set
.\"
.\"
.SS "Combined Link Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_ls {
} mtp_stats_ls_t;
\fR\s+2
.fi
.\"
.\"
.SS "Route"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_rt {
} mtp_stats_rt_t;
\fR\s+2
.fi
.\"
.\"
.SS "Route List"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_rl {
} mtp_stats_rl_t;
\fR\s+2
.fi
.\"
.\"
.SS "Route Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_rs {
} mtp_stats_rs_t;
\fR\s+2
.fi
.TP
.I Table 4/Q.752/T1.116.2 4.9
.B (events/destination)
.I (30 min)
Unavailability of route set to a given destination or set of destinations
.TP
.I Table 4/Q.752/T1.116.2 4.10
.B (seconds/destination)
Duration of unavailability in 4.9
.TP
.I Table 5/Q.752/T1.116.2 5.1
.B (events/SP)
.I (on occurence, 5 min, 30 min)
Adjacent SP inaccessible
.TP
.I Table 5/Q.752/T1.116.2 5.2
.B (seconds/SP)
Duration of adjacent SP inacessible
.TP
.I Table 5/Q.752/T1.116.2 5.8
.B (events/SP/cong. level)
.I (1+D only)
TFC received
.TP
.I Table 6/Q.752/T1.116.2 6.1
.B (octets/OPC)
Number of SIF and SIO octets received with a given OPC
.TP
.I Table 6/Q.752/T1.116.2 6.2
.B (octets/DPC)
Number of SIF and SIO octets transmitted with a given DPC
.TP
.I Table 6/Q.752/T1.116.2 6.5
.B (octets/SI/DPC)
Number of SIF and SIO octets transmitted with a given DPC and SIO
.TP
.I Table 6/Q.752/T1.116.2 6.6
.B (octets/SI/OPC)
Number of SIF and SIO octets handled with a given OPC, DPC and SIO
.TP
.I Table 6/Q.752/T1.116.2 6.7
.B (MSUs/SI/OPC/DPC)
Number of MSUs handled with given OPC, DPC and SIO
.\"
.\"
.SS "Signalling Point"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_sp {
} mtp_stats_sp_t;
\fR\s+2
.fi
.TP
.I Table 5/Q.752/T1.116.2 5.5
.B (MSUs/SP)
.I (1+D, 30 min)
MSU discarded due to a routing data error
.TP
.I Table 5/Q.752/T1.116.2 5.6
.B (events/UP/SP)
.I (1+D only)
User Part Unavailable MSU transmitted
.TP
.I Table 5/Q.752/T1.116.2 5.7
.B (events/UP/SP)
.I (1+D only)
User Part Unavailable MSU received
.TP
.I Table 6/Q.752/T1.116.2 6.3
.B (octets/SI)
Number of SIF and SIO octets handled with a given SIO
.\"
.\"
.SS "Network Appearance"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_na {
} mtp_stats_na_t;
\fR\s+2
.fi
.\"
.\"
.SS "Default"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_stats_df {
} mtp_stats_df_t;
\fR\s+2
.fi

.\"
.\"
.SH EVENTS
.PP
Events are defined consistent with the on-occrence even triggers defined in
ITU-T Recommendation Q.752 and ANSI T1.116.2.
.\"
.\"
.SS "Signalling Link"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_sl {
        ulong events;
} mtp_notify_sl_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.TP
.B MTP_EVT_SL_RPO_START
.I Table 2/Q.752/T1.116.2 2.10
.B (events/SL)
.I (on occurence only)
.br
Start of remote processor outage
.TP
.B MTP_EVT_SL_RPO_STOP
.I Table 2/Q.752/T1.116.2 2.11
.B (events/SL)
.I (on occurence only)
.br
Stop of remote processor outage
.TP
.B MTP_EVT_SL_LOC_INHIB_START
.I Table 2/Q.752/T1.116.2 2.16
.B (events/SL)
.I (on occurence only)
.br
Start of local inhibition
.TP
.B MTP_EVT_SL_LOC_INHIB_STOP
.I Table 2/Q.752/T1.116.2 2.17
.B (events/SL)
.I (on occurence only)
.br
End of local inihibition
.TP
.B MTP_EVT_SL_REM_INHIB_START
.I Table 2/Q.752/T1.116.2 2.18
.B (events/SL)
.I (on occurence only)
.br
Start of remote inhibition
.TP
.B MTP_EVT_SL_REM_INHIB_STOP
.I Table 2/Q.752/T1.116.2 2.19
.B (events/SL)
.I (on occurence only)
.br
End of remote inhibition
.TP
.B MTP_EVT_SL_CONG_START
.I Table 3/Q.752/T1.116.2 3.6
.B (events/SL)
.I (1+D)
.br
SL congestion indications
.TP
.B MTP_EVT_SL_CONG_STOP
.I Table 3/Q.752/T1.116.2 3.9
.B (events/SL)
.I (1+D)
.br
Stop of SL congestion
.TP
.B MTP_EVT_SL_CONG_LOSS
.I Table 3/Q.752/T1.116.2 3.11
.B (events/SL)
.I (1+D)
.br
Number of congestion events resulting in loss of message signal units
.RE
.\"
.\"
.SS "Link Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_lk {
        ulong events;
} mtp_notify_lk_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.TP
.B MTP_EVT_LK_FAILURE_START
.I Table 4/Q.752/T1.116.2 4.3
.B (events/LS)
.I (on occurence only)
.br
Start of linkset failure
.TP
.B MTP_EVT_LK_FAILURE_STOP
.I Table 4/Q.752/T1.116.2 4.4
.B (events/LS)
.I (on occurence only)
.br
Stop of linkset failure
.TP
.B MTP_EVT_LK_SEND_TFP
.I Table 4/Q.752/T1.116.2 4.5
.B (events/LS)
.I (on occurence only)
.br
Initiation of broadcast TFP dues to failure of measured linkset
.TP
.B MTP_EVT_LK_SEND_TFA
.I Table 4/Q.752/T1.116.2 4.6
.B (events/LS)
.I (on occurence only)
.br
Initiation of broadcast TFA for recovery of measured linkset
.RE
.\"
.\"
.SS "Combined Link Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_ls {
        ulong events;
} mtp_notify_ls_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.RE
.\"
.\"
.SS "Route"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_rt {
        ulong events;
} mtp_notify_rt_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.RE
.\"
.\"
.SS "Route List"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_rl {
        ulong events;
} mtp_notify_rl_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.RE
.\"
.\"
.SS "Route Set"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_rs {
        ulong events;
} mtp_notify_rs_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.TP
.B MTP_EVT_RS_UNAVAIL_START
.I Table 4/Q.752/T1.116.2 4.11
.B (events/destination)
.I (on occurence only)
.br
Start of unavailability in 4.9
.TP
.B MTP_EVT_RS_UNAVAIL_STOP
.I Table 4/Q.752/T1.116.2 4.12
.B (events/destination)
.I (on occurence only)
.br
Stop of unavailability in 4.9
.TP
.B MTP_EVT_RS_REROUTE_ADJ
.I Table 4/Q.752/T1.116.2 4.13
.B (destination & LS)
.I (on occurence only)
.br
Change in linkset used to adjacent SP
.TP
.B MTP_EVT_RS_ADJ_SP_INACCESS_START
.I Table 5/Q.752/T1.116.2 5.1
.B (events/SP)
.I (on occurence, 5 min, 30 min)
.br
Adjacent SP inaccessible
.TP
.B MTP_EVT_RS_ADJ_SP_INACCESS_STOP
.I Table 5/Q.752/T1.116.2 5.4
.B (events/SP)
.I (on occurence only)
.br
Stop of adjacent SP inaccessible
.TP
.B MTP_EVT_RS_TFC_RECV
.I Table 5/Q.752/T1.116.2 5.8
.B (events/SP/cong. level)
.I (1+D only)
.br
TFC received
.RE
.\"
.\"
.SS "Signalling Point"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_sp {
        ulong events;
} mtp_notify_sp_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.TP
.B MTP_EVT_SP_MSU_DISCARDED
.I Table 5/Q.752/T1.116.2 5.5
.B (MSUs/SP)
.I (1+D, 30 min)
.br
MSU discarded due to a routing data error
.TP
.B MTP_EVT_SP_UPU_SENT
.I Table 5/Q.752/T1.116.2 5.6
.B (events/UP/SP)
.I (1+D only)
.br
User Part Unavailable MSU transmitted
.TP
.B MTP_EVT_SP_UPU_RECV
.I Table 5/Q.752/T1.116.2 5.7
.B (events/UP/SP)
.I (1+D only)
.br
User Part Unavailable MSU received
.RE
.\"
.\"
.SS "Network Appearance"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_na {
        ulong events;
} mtp_notify_na_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.RE
.\"
.\"
.SS "Default"
.PP
.PP
.sp
.nf
\fC\s-2\
typedef struct mtp_notify_df {
        ulong events;
} mtp_notify_df_t;
\fR\s+2
.fi
.TP
.I events
conveys the notification events.  This is bitwise OR of any of the following
event flags:
.RS
.RE
.\"
.\"
.SH CONTROLS
.PP
.sp
.nf
\fC\s-2\
#define MTP_MGMT_ALLOW                   0
#define MTP_MGMT_RESTRICT                1
#define MTP_MGMT_PROHIBIT                2
#define MTP_MGMT_ACTIVATE                3
#define MTP_MGMT_DEACTIVATE              4
#define MTP_MGMT_BLOCK                   5
#define MTP_MGMT_UNBLOCK                 6
#define MTP_MGMT_INHIBIT                 7
#define MTP_MGMT_UNINHIBIT               8
#define MTP_MGMT_CONGEST                 9
#define MTP_MGMT_UNCONGEST              10
#define MTP_MGMT_DANGER                 11
#define MTP_MGMT_NODANGER               12
#define MTP_MGMT_RESTART                13
#define MTP_MGMT_RESTARTED              14
\fR\s+2
.fi

.\"
.\"
.SH IOCTLS
.PP
All the streams provided by the
.B mtp
multiplexing driver support the set of management controls described here.
These controls require root priviledges and permit the management of the MTP
configuration, routing, link devices, statistics and events.  This set of
management controls are available on all streams and sockets provided by
the
.B mtp
driver.
.\"
.\"
.SS Options
.PP
.sp
.nf
\fC\s-2\
/*
 *  OPTIONS
 */
typedef struct mtp_option {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    /* followed by object-specific protocol options structure */
} mtp_option_t;
\fR\s+2
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I object-specific structure
.fi
.\"
.\"
.TP
.B MTP_IOCGOPTION
.\"
.\"
.TP
.B MTP_IOCSOPTION
.\"
.\"
.SS Configuration
.PP
.sp
.nf
\fC\s-2\
/*
 *  CONFIGURATION
 */
typedef struct mtp_config {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong cmd;                  /* configuration command */
    /* followed by object-specific configuration structure */
} mtp_config_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I cmd
.RS
.\"
.\"
.TP
.B MTP_GET
.\"
.\"
.TP
.B MTP_SET
.\"
.\"
.TP
.B MTP_ADD
.\"
.\"
.TP
.B MTP_DEL
.RE
.\"
.\"
.TP
.I object-specific structure
.\"
.\"
.TP
.B MTP_IOCGCONFIG
.\"
.\"
.TP
.B MTP_IOCSCONFIG
.\"
.\"
.TP
.B MTP_IOCTCONFIG
.\"
.\"
.TP
.B MTP_IOCCCONFIG
.\"
.\"
.SS State
.PP
.sp
.nf
\fC\s-2\
/*
 *  STATE
 */
typedef struct mtp_statem {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong flags;                /* object flags */
    ulong state;                /* object state */
    /* followed by object-specific state structure */
} mtp_statem_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I flags
.RS
.\"
.\"
.TP
.B MTPF_ALLOWED
.\"
.\"
.TP
.B MTPF_DANGER
.\"
.\"
.TP
.B MTPF_CONGESTED
.\"
.\"
.TP
.B MTPF_RESTRICTED
.\"
.\"
.TP
.B MTPF_RESTART
.\"
.\"
.TP
.B MTPF_PROHIBITED
.\"
.\"
.TP
.B MTPF_INHIBITED
.\"
.\"
.TP
.B MTPF_BLOCKED
.\"
.\"
.TP
.B MTPF_INACTIVE
.\"
.\"
.TP
.B MTPF_TRAFFIC
.\"
.\"
.TP
.B MTPF_COO_RECV
.\"
.\"
.TP
.B MTPF_ECO_RECV
.\"
.\"
.TP
.B MTPF_WACK_SLTM
.\"
.\"
.TP
.B MTPF_WACK_SLTM2
.\"
.\"
.TP
.B MTPF_WACK_SSLTM
.\"
.\"
.TP
.B MTPF_WACK_SSLTM2
.\"
.\"
.TP
.B MTPF_TFR_PENDING
.\"
.\"
.TP
.B MTPF_CLUSTER
.\"
.\"
.TP
.B MTPF_XFER_FUNC
.\"
.\"
.TP
.B MTPF_SECURITY
.\"
.\"
.TP
.B MTPF_ADJACENT
.\"
.\"
.TP
.B MTPF_LOSC_PROC_A
.\"
.\"
.TP
.B MTPF_LOSC_PROC_B
.\"
.\"
.TP
.B MTPF_RESTART_PHASE_1
.\"
.\"
.TP
.B MTPF_RESTART_PAHSE_2
.RE
.\"
.\"
.TP
.I state
.RS
.\"
.\"
.TP
.B MTP_ALLOWED
.\"
.\"
.TP
.B MTP_DANGER
.\"
.\"
.TP
.B MTP_CONGESTED
.\"
.\"
.TP
.B MTP_RESTRICTED
.\"
.\"
.TP
.B MTP_RESTART
.\"
.\"
.TP
.B MTP_PROHIBITED
.\"
.\"
.TP
.B MTP_INHIBITED
.\"
.\"
.TP
.B MTP_BLOCKED
.\"
.\"
.TP
.B MTP_INACTIVE
.\"
.\"
.TP
.B MTP_NODANGER
.\"
.\"
.TP
.B MTP_UNCONGESTED
.\"
.\"
.TP
.B MTP_RESTARTED
.\"
.\"
.TP
.B MTP_UNINHIBITED
.\"
.\"
.TP
.B MTP_UNBLOCKED
.\"
.\"
.TP
.B MTP_ACTIVE
.\"
.\"
.TP
.B MTP_RESTART_PHASE_1
.\"
.\"
.TP
.B MTP_RESTART_PHASE_2
.RE
.\"
.\"
.TP
.I object-specific structure
.\"
.\"
.TP
.B MTP_IOCGSTATEM
.\"
.\"
.TP
.B MTP_IOCCMRESET
.\"
.\"
.SS Statistics
.PP
.sp
.nf
\fC\s-2\
/*
 *  STATISTICS
 */
typedef struct mtp_stats {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong header;               /* object stats header */
    /* followed by object-specific statistics structure */
} mtp_stats_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I header
.\"
.\"
.TP
.I object-specific structure
.\"
.\"
.TP
.B MTP_IOCGSTATS
.\"
.\"
.TP
.B MTP_IOCSSTATS
.\"
.\"
.TP
.B MTP_IOCGSTATSP
.\"
.\"
.TP
.B MTP_IOCSSTATSP
.\"
.\"
.SS Events
.PP
.sp
.nf
\fC\s-2\
/*
 *  EVENTS
 */
typedef struct mtp_notify {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    /* followed by object-specific notification structure */
} mtp_notify_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I object-specific structure
.\"
.\"
.TP
.B MTP_IOCGNOTIFY
.\"
.\"
.TP
.B MTP_IOCSNOTIFY
.\"
.\"
.TP
.B MTP_IOCCNOTIFY
.\"
.\"
.SS Controls
.PP
.sp
.nf
\fC\s-2\
/*
 *  MANAGEMENT
 */
typedef struct mtp_mgmt {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong cmd;                  /* mgmt command */
} mtp_mgmt_t;
\fR\s+2
.fi
.\"
.\"
.TP
.I type
The object type, see
.IR \*(lqObject Model\*(rq .
.\"
.\"
.TP
.I id
The object identifier.
.\"
.\"
.TP
.I cmd
.RS
.\"
.\"
.TP
.B MTP_MGMT_ALLOW
.\"
.\"
.TP
.B MTP_MGMT_RESTRICT
.\"
.\"
.TP
.B MTP_MGMT_PROHIBIT
.\"
.\"
.TP
.B MTP_MGMT_ACTIVATE
.\"
.\"
.TP
.B MTP_MGMT_DEACTIVATE
.\"
.\"
.TP
.B MTP_MGMT_BLOCK
.\"
.\"
.TP
.B MTP_MGMT_UNBLOCK
.\"
.\"
.TP
.B MTP_MGMT_INHIBIT
.\"
.\"
.TP
.B MTP_MGMT_UNINHIBIT
.\"
.\"
.TP
.B MTP_MGMT_CONGEST
.\"
.\"
.TP
.B MTP_MGMT_UNCONGEST
.\"
.\"
.TP
.B MTP_MGMT_DANGER
.\"
.\"
.TP
.B MTP_MGMT_NODANGER
.\"
.\"
.TP
.B MTP_MGMT_RESTART
.\"
.\"
.TP
.B MTP_MGMT_RESTARTED
.RE
.\"
.\"
.TP
.I object-specific structure
.\"
.\"
.TP
.B MTP_IOCCMGMT
.\"
.\"
.TP
.B MTP_IOCCPASS

.\"
.\"
.SH "SEE ALSO"
.PP
.BR ss7 (8),
.BR mtpi (7),
.BR mtp_npi (7),
.BR mtp_tpi (7),
.BR mtp_xti (7),
.BR mtp_socket (7),
.BR sockets (3),
.BR xnet (3),
.\"
.\"
.\".SH FILES
.\".PP
.\"
.\"
.\".SH VERSIONS
.\".PP
.\"
.\"
.XX
.[
q751.1
.]
.[
q752
.]
.[
t1.116.1
.]
.[
t1.116.2
.]
.\"
.[
$LIST$
.]
.\"
.TI
