'\" rt
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: lmi_ioctl.4.man,v 0.9.2.2 2004/04/17 21:38:37 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2004  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/04/17 21:38:37 $ by $Author: brian $
.\"
.\" =========================================================================
.so openss7.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH LMI-IOCTL 4 "$Date: 2004/04/17 21:38:37 $" "$Name:  $" "OpenSS7 LMI IOCTLs"
.SH NAME
.B lmi_ioctl
\- Local Management Interface \- IO Controls
.SH SYNOPSIS
.PP
.B #include <ss7/lmi.h>
.br
.B #include <ss7/lmi_ioctl.h>
.HP
.BI "int " retval " = ioctl(" fd ", " cmd ", " arg );
.SH DESCRIPTION
.PP
.B LMI
is a common Local Management Interface used by
.BR OpenSS7 \(tm
.BR SS7 "(4), " ISDN "(4) and " SIGTRAN (4)
drivers and modules for common local protocol driver management fuctions.
These IO controls are used by performing an
.BR ioctl (2)
system call on the driver file descriptor,
.IR fd ,
with one of the IO control commands,
.IR cmd ,
detailed below, and a pointer to a local management interface structure in the
argument,
.IR arg .
.PP
.B LMI
IO controls fall into the following categories:
.TP 16
.B Configuration
Perform primary configuration, creation, update and destruction of managed
objects.
.TP
.B Options
Perform options management on managed objects.
.TP
.B State
Perform state interrogation and reset on managed objects.
.TP
.B Statistics
Perform statistic gathering and collection for managed objects.
.TP
.B Events
Perform event notification activation and deactivation on managed objects.
.TP
.B Controls
Perform controls on managed objects.
.PP
All LMI IO controls accept a pointer,
.IR arg ,
to an
.B LMI
header structure that identifies a managed object, followed by an
object-type-specific structure.
The
.B LMI
header structure always contains the following members:
.TP
.I type
specifies the type of the managed object upon which the IO control is acting.
Managed object types are defined by the specific driver that implements the
.B LMI
IO control interface.
.TP
.I id
specifies an identifier of the object within the managed object type class.
A non-zero value indentifies a specific object within the type class to the
driver.  A zero value can be used to specify an entire class of objects, or to
indicate that an indentifier should be assigned and returned by the driver.
.PP
Some IO controls have additional members in the
.B LMI
header specific to that IO control as detailed below.
.SH IOCTLS
.PP
.SS Configuration
.PP
Managed object configuration can be accomplished using the IO controls
described below.  For configuration IO controls,
.I arg
points to a
.B lmi_config
structtre followed by an object-type-specific configuration structure defined
for the specific driver.
.PP
.B Format:
.PP
The
.B lmi_config
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_config {
        ulong type;         /* object type */
        ulong id;           /* object id */
        ulong cmd;          /* object configuration command */
        /* followed by an object-type-specific configuration structure */
} lmi_config_t;
\fR\s+1
.fi
.TP
The
.B lmi_config
structure header contains the following members:
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier within the class;
.TP
.I cmd
conveys the configuration command.
.PP
.RS
.PP
The configuration command,
.IR cmd ,
may be one of the following values:
.TP 8
.B LMI_GET
get the object configuration into the structure pointed to by
.IR arg ,
and as many child object configuration structures as will fit into the
supplied buffer.
.TP
.B LMI_ADD
add a new object with the configuration specified in the structure pointed to
by
.I arg ,
using the identifier specified in
.IR id ,
or, if 
.I id
is zero (0), allocate and assign a new managed object identifier for the newly
created object.
.TP
.B LMI_CHA
Change the configuration of the specified object.
.TP
.B LMI_DEL
Delete the specified managed object.
.RE
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_config
structure followed by an object-type-specific configuration structure.
.TP 18
.B LMI_IOCGCONFIG
Get the configuration.
.TP
.B LMI_IOCSCONFIG
Set the configuration.
.TP
.B LMI_IOCTCONFIG
Test the configuration.
.TP
.B LMI_IOCCCONFIG
Commit the configuration.
.SS Options
.PP
Managed object options configuration can be accomplished using the IO controls
described below.  For options IO controls,
.I arg
points to a
.B lmi_option
structure followed by an object-type-specific options structure defined by the
specific driver.
.PP
.B Format:
.PP
The
.B lmi_option
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_option {
        ulong type;             /* object type */
        ulong id;               /* object id */
        /* followed by object-type-specific option structure */
} lmi_option_t;
\fR\s+1
.fi
.PP
The
.B lmi_option
structure header contains the following members:
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier with the class.
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_option
structure followed by an object-type-specific option structure.
.TP 18
.B LMI_IOCGOPTIONS
Gets the options.
.TP
.B LMI_IOCSOPTIONS
Sets the options.
.SS State
.PP
Managed object state retrieval and reset can be accomplished using the IO
controls described below.  For state IO controls,
.I arg
points to a
.B lmi_statem
structure followed by an object-type-specific state structure defined by the
specific driver.
.PP
.B Format:
.PP
The
.B lmi_statem
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_statem {
        ulong type;     /* object type */
        ulong id;       /* object id */
        ulong flags;    /* object primary state flags */
        ulong state;    /* object primary state */
} lmi_statem_t;
\fR\s+1
.fi
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier within the class;
.TP
.I flags
conveys the primary state flags for the managed object;
.TP
.I state
conveys the primary state variable for the managed object.
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_statem
structure followed by an object-type-specific state structure.
.TP 18
.B LMI_IOCGSTATEM
Gets the state variables.
.TP
.B LMI_IOCCMRESET
Resets and returns the reset state variables.
.SS Statistics
.PP
Managed object statistics can be retrieved and controlled using the IO
controls described below.  For statistics IO controls,
.I arg
points to a
.B lmi_stats
structure followed by an object-type-specific statistics structure defined by
the specific driver.
.PP
.B Format:
.PP
The
.B lmi_stats
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_stats {
        ulong type;     /* object type */
        ulong id;       /* object id */
        ulong header;   /* timestamp or interval header */
} lmi_stats_t;
\fR\s+1
.fi
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier within the class;
.TP
.I header
conveys the timestamp or period time header.
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_stats
structure followed by an object-type-specific statistics structure.
.TP 18
.B LMI_IOCGSTATSP
Gets the statistics periods.
.TP
.B LMI_IOCSSTATSP
Sets the statistics periods.
.TP
.B LMI_IOCGSTATS
Gets statistics counters.
.TP
.B LMI_IOCCSTATS
Clears statistics counters.
.SS Events
.PP
Managed object event notifications can be activated and deactivated using the
IO controls described below.  For event IO controls,
.I arg
points to a
.B lmi_notify
structure.
.PP
.B Format:
.PP
The
.B lmi_notify
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_notify {
        ulong type;     /* object type */
        ulong id;       /* object id */
        ulong notify;   /* object notifications mask */
} lmi_notify_t;
\fR\s+1
.fi
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier within the class;
.TP
.I notify
conveys the notifications bit mask.
.PP
Specific flags within the
.I notify
bit mask are defined by the specific driver.
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_notify
structure followed by an object-type-specific notifications structure.
.TP 18
.B LMI_IOCGNOTIFY
Gets notification bit mask.
.TP
.B LMI_IOCSNOTIFY
Sets bits in the notification mask.
.TP
.B LMI_IOCCNOTIFY
Clears bits in the notification mask.
.SS Controls
.PP
Managed objects can have actions performed or IO control transparently passed
using the IO controls defined below.  For management IO controls,
.I arg
points to a
.B lmi_mgmt
structure followed by an object-type- and command-specific structure defined
by the driver.
.PP
.B Format:
.PP
The
.B lmi_mgmt
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct lmi_mgmt {
        ulong type;     /* object type */
        ulong id;       /* object id */
        ulong cmd;      /* object command */
        /* followed by object-type- and command-specific structure */
} lmi_mgmt_t;
\fR\s+1
.fi
.TP
.I type
conveys the managed object class type;
.TP
.I id
conveys the managed object identifier within the class;
.TP
.I cmd
conveys the action or pass-along IO control.
.PP
The
.I cmd
can be an action defined by the driver for the managed object or a IO control
to pass to a lower MUX stream.
.PP
.B IO Control Commands:
.PP
The following IO control commands can be specified as the
.I cmd
argument to the
.BR ioctl (2)
system call.  For these IO controls,
.I arg
is a pointer to a
.B lmi_mgmt
structure followed by an object-type-specific management structure.
.TP 18
.B LMI_IOCCMGMT
Performs a management action.
.TP
.B LMI_IOCCPASS
Passes a IO control to a lower MUX stream.


.SH NOTICES
.PP
.SH FILES
.PP
.SH DEVICES
.PP
See
.BR SS7 (4) ,
.BR ISDN (4) ,
.BR SIGTRAN (4) ,
.BR INET (4).
.SH "SEE ALSO"
.PP
.SH VERSIONS
.PP
.\"
.[
$LIST$
.]
.\"
.TI
