/*****************************************************************************

 @(#) src/snmp/metricMIB.h

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 *****************************************************************************/

#ifndef __LOCAL_METRICMIB_H__
#define __LOCAL_METRICMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct metricMIB_data {
	struct metricMIB_data *metricMIB_old;
	uint metricMIB_rsvs;
	uint metricMIB_tsts;
	uint metricMIB_sets;
	uint metricMIB_request;
};
struct scannerTable_data {
	struct scannerTable_data *scannerTable_old;
	uint scannerTable_rsvs;
	uint scannerTable_tsts;
	uint scannerTable_sets;
	uint scannerTable_request;
	uint scannerTable_refs;
	uint scannerTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long scannerAdministrativeState;	/* Create */
	long granularityPeriod;		/* Create */
	long scannerOperationalState;	/* ReadOnly */
	uint8_t *scannerAvaiabilityStatus;	/* ReadOnly */
	size_t scannerAvaiabilityStatusLen;
	uint8_t *scannerStartTime;	/* Create */
	size_t scannerStartTimeLen;
	uint8_t *scannerStopTime;	/* Create */
	size_t scannerStopTimeLen;
	uint8_t *scannerIntervalsOfDay;	/* Create */
	size_t scannerIntervalsOfDayLen;
	uint8_t *scannerWeekMask;	/* Create */
	size_t scannerWeekMaskLen;
	oid *scannerSchedulerName;	/* Create */
	size_t scannerSchedulerNameLen;
	uint8_t *scannerPeriodSynchronizationTime;	/* Create */
	size_t scannerPeriodSynchronizationTimeLen;
	long scannerCreatDeleteNotifications;	/* Create */
	long scannerAttributeValueChangeNotifications;	/* Create */
	long scannerStateChangeNotifications;	/* Create */
	long scannerRowStatus;		/* Create */
};
struct monitorMetricTable_data {
	struct monitorMetricTable_data *monitorMetricTable_old;
	uint monitorMetricTable_rsvs;
	uint monitorMetricTable_tsts;
	uint monitorMetricTable_sets;
	uint monitorMetricTable_request;
	uint monitorMetricTable_refs;
	uint monitorMetricTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	oid *observedObjectInstance;	/* Create */
	size_t observedObjectInstanceLen;
	oid *observedAttributeId;	/* Create */
	size_t observedAttributeIdLen;
	long derivedGauge;		/* Create */
	long counterDifferencePackage;	/* Create */
	long previousScanCounterValue;	/* ReadOnly */
	uint8_t *counterDifferenceProceduralStatus;	/* Create */
	size_t counterDifferenceProceduralStatusLen;
	long counterOverflowPackage;	/* Create */
	long modulusValue;		/* ReadOnly */
	long gaugeDifferencePackage;	/* Create */
	long previousScanGaugeValue;	/* Create */
	uint8_t *gaugeDirferenceProceduralStatus;	/* Create */
	size_t gaugeDirferenceProceduralStatusLen;
	long metricLowThreshold;	/* Create */
	long metricLowNotify;		/* Create */
	long metricLowSeverityIndication;	/* Create */
	long metricHighThreshold;	/* Create */
	long metricHighNotify;		/* Create */
	long metricHighSeverityIndication;	/* Create */
	oid *metricSpecificProblemsIndicator;	/* Create */
	size_t metricSpecificProblemsIndicatorLen;
	uint8_t *derivedGaugeTimeStamp;	/* Create */
	size_t derivedGaugeTimeStampLen;
	long monitorMetricRowStatus;	/* Create */
};
struct meanMonitorTable_data {
	struct meanMonitorTable_data *meanMonitorTable_old;
	uint meanMonitorTable_rsvs;
	uint meanMonitorTable_tsts;
	uint meanMonitorTable_sets;
	uint meanMonitorTable_request;
	uint meanMonitorTable_refs;
	uint meanMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long estimateOfMean;		/* ReadOnly */
	long movingTimePeriod;		/* Create */
	long estimateOfMeanLowThreshold;	/* Create */
	long estimateOfMeanLowNotify;	/* Create */
	long estimateOfMeanLowSeverityIndication;	/* Create */
	long estimateOfMeanHighThreshold;	/* Create */
	long estimateOfMeanHighNotify;	/* Create */
	long estimateOfMeanHighSeverityIndication;	/* Create */
	oid *estimateOfMeanSpecificProblemsIndicator;	/* Create */
	size_t estimateOfMeanSpecificProblemsIndicatorLen;
	long meanMonitorRowStatus;	/* Create */
};
struct algorithmIndicatingMeanMonitorTable_data {
	struct algorithmIndicatingMeanMonitorTable_data *algorithmIndicatingMeanMonitorTable_old;
	uint algorithmIndicatingMeanMonitorTable_rsvs;
	uint algorithmIndicatingMeanMonitorTable_tsts;
	uint algorithmIndicatingMeanMonitorTable_sets;
	uint algorithmIndicatingMeanMonitorTable_request;
	uint algorithmIndicatingMeanMonitorTable_refs;
	uint algorithmIndicatingMeanMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	oid *algorithmIdentifier;	/* ReadOnly */
	size_t algorithmIdentifierLen;
};
struct movingAverageMeanMonitorTable_data {
	struct movingAverageMeanMonitorTable_data *movingAverageMeanMonitorTable_old;
	uint movingAverageMeanMonitorTable_rsvs;
	uint movingAverageMeanMonitorTable_tsts;
	uint movingAverageMeanMonitorTable_sets;
	uint movingAverageMeanMonitorTable_request;
	uint movingAverageMeanMonitorTable_refs;
	uint movingAverageMeanMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long movingAverageMeanMonitorRowStatus;	/* Create */
};
struct meanAndPercentileMonitorTable_data {
	struct meanAndPercentileMonitorTable_data *meanAndPercentileMonitorTable_old;
	uint meanAndPercentileMonitorTable_rsvs;
	uint meanAndPercentileMonitorTable_tsts;
	uint meanAndPercentileMonitorTable_sets;
	uint meanAndPercentileMonitorTable_request;
	uint meanAndPercentileMonitorTable_refs;
	uint meanAndPercentileMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long percentileSecondMovingTimePeriod;	/* Create */
	long estimateOfLargestInReplication;	/* ReadOnly */
	long estimateOfSmallestInReplication;	/* ReadOnly */
	long estimateOfMedian;		/* ReadOnly */
	long estimateOf100PCTPercentile;	/* ReadOnly */
	long estimateOfPCTPercentile;	/* ReadOnly */
	long numberOfReplications;	/* Create */
	long configurablePercentilePackage;	/* Create */
	long meanAndPercentileMonitorRowStatus;	/* Create */
};
struct meanAndVarianceMonitorTable_data {
	struct meanAndVarianceMonitorTable_data *meanAndVarianceMonitorTable_old;
	uint meanAndVarianceMonitorTable_rsvs;
	uint meanAndVarianceMonitorTable_tsts;
	uint meanAndVarianceMonitorTable_sets;
	uint meanAndVarianceMonitorTable_request;
	uint meanAndVarianceMonitorTable_refs;
	uint meanAndVarianceMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long varianceSecondMovingTimePeriod;	/* Create */
	long estimateOfVariance;	/* ReadOnly */
	long meanAndVarianceMonitorRowStatus;	/* Create */
};
struct meanAndMinMaxMonitorTable_data {
	struct meanAndMinMaxMonitorTable_data *meanAndMinMaxMonitorTable_old;
	uint meanAndMinMaxMonitorTable_rsvs;
	uint meanAndMinMaxMonitorTable_tsts;
	uint meanAndMinMaxMonitorTable_sets;
	uint meanAndMinMaxMonitorTable_request;
	uint meanAndMinMaxMonitorTable_refs;
	uint meanAndMinMaxMonitorTable_id;
	uint8_t *scannerId;		/* NoAccess */
	size_t scannerIdLen;
	long estimateOfLargest;		/* ReadOnly */
	long estimateOfSmallest;	/* ReadOnly */
	long meanAndMinMaxMonitorRowStatus;	/* Create */
};

/* storage declarations */
extern struct metricMIB_data *metricMIBStorage;
extern struct header_complex_index *scannerTableStorage;
extern struct header_complex_index *monitorMetricTableStorage;
extern struct header_complex_index *meanMonitorTableStorage;
extern struct header_complex_index *algorithmIndicatingMeanMonitorTableStorage;
extern struct header_complex_index *movingAverageMeanMonitorTableStorage;
extern struct header_complex_index *meanAndPercentileMonitorTableStorage;
extern struct header_complex_index *meanAndVarianceMonitorTableStorage;
extern struct header_complex_index *meanAndMinMaxMonitorTableStorage;

/* enum definitions from the covered mib sections */

#define SCANNERADMINISTRATIVESTATE_LOCKED        0
#define SCANNERADMINISTRATIVESTATE_UNLOCKED      1
#define SCANNERADMINISTRATIVESTATE_SHUTTINGDOWN  2

#define SCANNEROPERATIONALSTATE_DISABLED         0
#define SCANNEROPERATIONALSTATE_ENABLED          1

#define SCANNERAVAIABILITYSTATUS_INTEST          0
#define SCANNERAVAIABILITYSTATUS_FAILED          1
#define SCANNERAVAIABILITYSTATUS_POWEROFF        2
#define SCANNERAVAIABILITYSTATUS_OFFLINE         3
#define SCANNERAVAIABILITYSTATUS_OFFDUTY         4
#define SCANNERAVAIABILITYSTATUS_DEPENDENCY      5
#define SCANNERAVAIABILITYSTATUS_DEGRADED        6
#define SCANNERAVAIABILITYSTATUS_NOTINSTALLED    7
#define SCANNERAVAIABILITYSTATUS_LOGFULL         8

#define SCANNERCREATDELETENOTIFICATIONS_TRUE     1
#define SCANNERCREATDELETENOTIFICATIONS_FALSE    2

#define SCANNERATTRIBUTEVALUECHANGENOTIFICATIONS_TRUE 1
#define SCANNERATTRIBUTEVALUECHANGENOTIFICATIONS_FALSE 2

#define SCANNERSTATECHANGENOTIFICATIONS_TRUE     1
#define SCANNERSTATECHANGENOTIFICATIONS_FALSE    2

#define COUNTERDIFFERENCEPACKAGE_TRUE            1
#define COUNTERDIFFERENCEPACKAGE_FALSE           2

#define COUNTERDIFFERENCEPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define COUNTERDIFFERENCEPROCEDURALSTATUS_NOTINITIALIZED 1
#define COUNTERDIFFERENCEPROCEDURALSTATUS_INITIALIZING 2
#define COUNTERDIFFERENCEPROCEDURALSTATUS_REPORTING 3
#define COUNTERDIFFERENCEPROCEDURALSTATUS_TERMINATING 4

#define COUNTEROVERFLOWPACKAGE_TRUE              1
#define COUNTEROVERFLOWPACKAGE_FALSE             2

#define GAUGEDIFFERENCEPACKAGE_TRUE              1
#define GAUGEDIFFERENCEPACKAGE_FALSE             2

#define GAUGEDIRFERENCEPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define GAUGEDIRFERENCEPROCEDURALSTATUS_NOTINITIALIZED 1
#define GAUGEDIRFERENCEPROCEDURALSTATUS_INITIALIZING 2
#define GAUGEDIRFERENCEPROCEDURALSTATUS_REPORTING 3
#define GAUGEDIRFERENCEPROCEDURALSTATUS_TERMINATING 4

#define METRICLOWNOTIFY_TRUE                     1
#define METRICLOWNOTIFY_FALSE                    2

#define METRICLOWSEVERITYINDICATION_INDETERMINATE 0
#define METRICLOWSEVERITYINDICATION_CRITICAL     1
#define METRICLOWSEVERITYINDICATION_MAJOR        2
#define METRICLOWSEVERITYINDICATION_MINOR        3
#define METRICLOWSEVERITYINDICATION_WARNING      4
#define METRICLOWSEVERITYINDICATION_CLEARED      5

#define METRICHIGHNOTIFY_TRUE                    1
#define METRICHIGHNOTIFY_FALSE                   2

#define METRICHIGHSEVERITYINDICATION_INDETERMINATE 0
#define METRICHIGHSEVERITYINDICATION_CRITICAL    1
#define METRICHIGHSEVERITYINDICATION_MAJOR       2
#define METRICHIGHSEVERITYINDICATION_MINOR       3
#define METRICHIGHSEVERITYINDICATION_WARNING     4
#define METRICHIGHSEVERITYINDICATION_CLEARED     5

#define ESTIMATEOFMEANLOWNOTIFY_TRUE             1
#define ESTIMATEOFMEANLOWNOTIFY_FALSE            2

#define ESTIMATEOFMEANLOWSEVERITYINDICATION_INDETERMINATE 0
#define ESTIMATEOFMEANLOWSEVERITYINDICATION_CRITICAL 1
#define ESTIMATEOFMEANLOWSEVERITYINDICATION_MAJOR 2
#define ESTIMATEOFMEANLOWSEVERITYINDICATION_MINOR 3
#define ESTIMATEOFMEANLOWSEVERITYINDICATION_WARNING 4
#define ESTIMATEOFMEANLOWSEVERITYINDICATION_CLEARED 5

#define ESTIMATEOFMEANHIGHNOTIFY_TRUE            1
#define ESTIMATEOFMEANHIGHNOTIFY_FALSE           2

#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_INDETERMINATE 0
#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_CRITICAL 1
#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_MAJOR 2
#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_MINOR 3
#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_WARNING 4
#define ESTIMATEOFMEANHIGHSEVERITYINDICATION_CLEARED 5

#define CONFIGURABLEPERCENTILEPACKAGE_TRUE       1
#define CONFIGURABLEPERCENTILEPACKAGE_FALSE      2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid metricObjectGroup_oid[12];
extern oid metricGeneralCompliance_oid[12];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_metricMIB(void);
void deinit_metricMIB(void);
int term_metricMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_metricMIB;
struct metricMIB_data *metricMIB_create(void);
struct metricMIB_data *metricMIB_duplicate(struct metricMIB_data *);
int metricMIB_destroy(struct metricMIB_data **);
int metricMIB_add(struct metricMIB_data *);
void parse_metricMIB(const char *, char *);
SNMPCallback store_metricMIB;
void refresh_metricMIB(int);
FindVarMethod var_scannerTable;
struct scannerTable_data *scannerTable_create(void);
struct scannerTable_data *scannerTable_duplicate(struct scannerTable_data *);
int scannerTable_destroy(struct scannerTable_data **);
int scannerTable_add(struct scannerTable_data *);
int scannerTable_del(struct scannerTable_data *);
void parse_scannerTable(const char *, char *);
SNMPCallback store_scannerTable;
void refresh_scannerTable(int);
FindVarMethod var_monitorMetricTable;
struct monitorMetricTable_data *monitorMetricTable_create(void);
struct monitorMetricTable_data *monitorMetricTable_duplicate(struct monitorMetricTable_data *);
int monitorMetricTable_destroy(struct monitorMetricTable_data **);
int monitorMetricTable_add(struct monitorMetricTable_data *);
int monitorMetricTable_del(struct monitorMetricTable_data *);
void parse_monitorMetricTable(const char *, char *);
SNMPCallback store_monitorMetricTable;
void refresh_monitorMetricTable(int);
FindVarMethod var_meanMonitorTable;
struct meanMonitorTable_data *meanMonitorTable_create(void);
struct meanMonitorTable_data *meanMonitorTable_duplicate(struct meanMonitorTable_data *);
int meanMonitorTable_destroy(struct meanMonitorTable_data **);
int meanMonitorTable_add(struct meanMonitorTable_data *);
int meanMonitorTable_del(struct meanMonitorTable_data *);
void parse_meanMonitorTable(const char *, char *);
SNMPCallback store_meanMonitorTable;
void refresh_meanMonitorTable(int);
FindVarMethod var_algorithmIndicatingMeanMonitorTable;
struct algorithmIndicatingMeanMonitorTable_data *algorithmIndicatingMeanMonitorTable_create(void);
struct algorithmIndicatingMeanMonitorTable_data *algorithmIndicatingMeanMonitorTable_duplicate(struct algorithmIndicatingMeanMonitorTable_data *);
int algorithmIndicatingMeanMonitorTable_destroy(struct algorithmIndicatingMeanMonitorTable_data **);
int algorithmIndicatingMeanMonitorTable_add(struct algorithmIndicatingMeanMonitorTable_data *);
int algorithmIndicatingMeanMonitorTable_del(struct algorithmIndicatingMeanMonitorTable_data *);
void parse_algorithmIndicatingMeanMonitorTable(const char *, char *);
SNMPCallback store_algorithmIndicatingMeanMonitorTable;
void refresh_algorithmIndicatingMeanMonitorTable(int);
FindVarMethod var_movingAverageMeanMonitorTable;
struct movingAverageMeanMonitorTable_data *movingAverageMeanMonitorTable_create(void);
struct movingAverageMeanMonitorTable_data *movingAverageMeanMonitorTable_duplicate(struct movingAverageMeanMonitorTable_data *);
int movingAverageMeanMonitorTable_destroy(struct movingAverageMeanMonitorTable_data **);
int movingAverageMeanMonitorTable_add(struct movingAverageMeanMonitorTable_data *);
int movingAverageMeanMonitorTable_del(struct movingAverageMeanMonitorTable_data *);
void parse_movingAverageMeanMonitorTable(const char *, char *);
SNMPCallback store_movingAverageMeanMonitorTable;
void refresh_movingAverageMeanMonitorTable(int);
FindVarMethod var_meanAndPercentileMonitorTable;
struct meanAndPercentileMonitorTable_data *meanAndPercentileMonitorTable_create(void);
struct meanAndPercentileMonitorTable_data *meanAndPercentileMonitorTable_duplicate(struct meanAndPercentileMonitorTable_data *);
int meanAndPercentileMonitorTable_destroy(struct meanAndPercentileMonitorTable_data **);
int meanAndPercentileMonitorTable_add(struct meanAndPercentileMonitorTable_data *);
int meanAndPercentileMonitorTable_del(struct meanAndPercentileMonitorTable_data *);
void parse_meanAndPercentileMonitorTable(const char *, char *);
SNMPCallback store_meanAndPercentileMonitorTable;
void refresh_meanAndPercentileMonitorTable(int);
FindVarMethod var_meanAndVarianceMonitorTable;
struct meanAndVarianceMonitorTable_data *meanAndVarianceMonitorTable_create(void);
struct meanAndVarianceMonitorTable_data *meanAndVarianceMonitorTable_duplicate(struct meanAndVarianceMonitorTable_data *);
int meanAndVarianceMonitorTable_destroy(struct meanAndVarianceMonitorTable_data **);
int meanAndVarianceMonitorTable_add(struct meanAndVarianceMonitorTable_data *);
int meanAndVarianceMonitorTable_del(struct meanAndVarianceMonitorTable_data *);
void parse_meanAndVarianceMonitorTable(const char *, char *);
SNMPCallback store_meanAndVarianceMonitorTable;
void refresh_meanAndVarianceMonitorTable(int);
FindVarMethod var_meanAndMinMaxMonitorTable;
struct meanAndMinMaxMonitorTable_data *meanAndMinMaxMonitorTable_create(void);
struct meanAndMinMaxMonitorTable_data *meanAndMinMaxMonitorTable_duplicate(struct meanAndMinMaxMonitorTable_data *);
int meanAndMinMaxMonitorTable_destroy(struct meanAndMinMaxMonitorTable_data **);
int meanAndMinMaxMonitorTable_add(struct meanAndMinMaxMonitorTable_data *);
int meanAndMinMaxMonitorTable_del(struct meanAndMinMaxMonitorTable_data *);
void parse_meanAndMinMaxMonitorTable(const char *, char *);
SNMPCallback store_meanAndMinMaxMonitorTable;
void refresh_meanAndMinMaxMonitorTable(int);

WriteMethod write_scannerAdministrativeState;
WriteMethod write_granularityPeriod;
WriteMethod write_scannerStartTime;
WriteMethod write_scannerStopTime;
WriteMethod write_scannerIntervalsOfDay;
WriteMethod write_scannerWeekMask;
WriteMethod write_scannerSchedulerName;
WriteMethod write_scannerPeriodSynchronizationTime;
WriteMethod write_scannerCreatDeleteNotifications;
WriteMethod write_scannerAttributeValueChangeNotifications;
WriteMethod write_scannerStateChangeNotifications;
WriteMethod write_scannerRowStatus;
WriteMethod write_observedObjectInstance;
WriteMethod write_observedAttributeId;
WriteMethod write_derivedGauge;
WriteMethod write_counterDifferencePackage;
WriteMethod write_counterDifferenceProceduralStatus;
WriteMethod write_counterOverflowPackage;
WriteMethod write_gaugeDifferencePackage;
WriteMethod write_previousScanGaugeValue;
WriteMethod write_gaugeDirferenceProceduralStatus;
WriteMethod write_metricLowThreshold;
WriteMethod write_metricLowNotify;
WriteMethod write_metricLowSeverityIndication;
WriteMethod write_metricHighThreshold;
WriteMethod write_metricHighNotify;
WriteMethod write_metricHighSeverityIndication;
WriteMethod write_metricSpecificProblemsIndicator;
WriteMethod write_derivedGaugeTimeStamp;
WriteMethod write_monitorMetricRowStatus;
WriteMethod write_movingTimePeriod;
WriteMethod write_estimateOfMeanLowThreshold;
WriteMethod write_estimateOfMeanLowNotify;
WriteMethod write_estimateOfMeanLowSeverityIndication;
WriteMethod write_estimateOfMeanHighThreshold;
WriteMethod write_estimateOfMeanHighNotify;
WriteMethod write_estimateOfMeanHighSeverityIndication;
WriteMethod write_estimateOfMeanSpecificProblemsIndicator;
WriteMethod write_meanMonitorRowStatus;
WriteMethod write_movingAverageMeanMonitorRowStatus;
WriteMethod write_percentileSecondMovingTimePeriod;
WriteMethod write_numberOfReplications;
WriteMethod write_configurablePercentilePackage;
WriteMethod write_meanAndPercentileMonitorRowStatus;
WriteMethod write_varianceSecondMovingTimePeriod;
WriteMethod write_meanAndVarianceMonitorRowStatus;
WriteMethod write_meanAndMinMaxMonitorRowStatus;
#endif				/* __LOCAL_METRICMIB_H__ */
