/*****************************************************************************

 @(#) src/snmp/m2uaAspMIB.h

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2019  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 *****************************************************************************/

#ifndef __LOCAL_M2UAASPMIB_H__
#define __LOCAL_M2UAASPMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct m2uaAspMIB_data {
	struct m2uaAspMIB_data *m2uaAspMIB_old;
	uint m2uaAspMIB_rsvs;
	uint m2uaAspMIB_tsts;
	uint m2uaAspMIB_sets;
	uint m2uaAspMIB_request;
};
struct m2uaAspTable_data {
	struct m2uaAspTable_data *m2uaAspTable_old;
	uint m2uaAspTable_rsvs;
	uint m2uaAspTable_tsts;
	uint m2uaAspTable_sets;
	uint m2uaAspTable_request;
	uint m2uaAspTable_refs;
	uint m2uaAspTable_id;
	uint8_t *m2uaAspId;		/* NoAccess */
	size_t m2uaAspIdLen;
	long m2uaAspAdministrativeState;	/* Create */
	long m2uaAspOperationalState;	/* ReadOnly */
	uint8_t *m2uaAspProceduralStatus;	/* ReadOnly */
	size_t m2uaAspProceduralStatusLen;
	long m2uaAspUsageState;		/* ReadOnly */
	long m2uaAspAspState;		/* Create */
	uint8_t *m2uaAspCapablities;	/* Create */
	size_t m2uaAspCapablitiesLen;
	long m2uaAspRegistrationPolicy;	/* Create */
	uint8_t *m2uaAspName;		/* Create */
	size_t m2uaAspNameLen;
	long m2uaAspRowStatus;		/* Create */
};
struct m2uaSgTable_data {
	struct m2uaSgTable_data *m2uaSgTable_old;
	uint m2uaSgTable_rsvs;
	uint m2uaSgTable_tsts;
	uint m2uaSgTable_sets;
	uint m2uaSgTable_request;
	uint m2uaSgTable_refs;
	uint m2uaSgTable_id;
	uint8_t *m2uaSgId;		/* NoAccess */
	size_t m2uaSgIdLen;
	uint8_t *m2uaSgName;		/* Create */
	size_t m2uaSgNameLen;
	long m2uaSgAdministrativeState;	/* Create */
	long m2uaSgOperationalState;	/* ReadOnly */
	uint8_t *m2uaSgProceduralStatus;	/* ReadOnly */
	size_t m2uaSgProceduralStatusLen;
	long m2uaSgStandbyStatus;	/* ReadOnly */
	uint8_t *m2uaSgPrimarySg;	/* ReadOnly */
	size_t m2uaSgPrimarySgLen;
	long m2uaSgAspState;		/* Create */
	long m2uaSgUsageState;		/* ReadOnly */
	long m2uaSgVersion;		/* Create */
	uint8_t *m2uaSgOptions;		/* Create */
	size_t m2uaSgOptionsLen;
	long m2uaSgRegistrationPolicy;	/* Create */
	long m2uaSgProtocolPayloadId;	/* Create */
	long m2uaSgIpPort;		/* Create */
	uint8_t *m2uaSgPrimaryIpAddress;	/* Create */
	size_t m2uaSgPrimaryIpAddressLen;
	long m2uaSgMinOstreams;		/* Create */
	long m2uaSgMaxIstreams;		/* Create */
	long m2uaSgRowStatus;		/* Create */
};
struct m2uaAspSgTable_data {
	struct m2uaAspSgTable_data *m2uaAspSgTable_old;
	uint m2uaAspSgTable_rsvs;
	uint m2uaAspSgTable_tsts;
	uint m2uaAspSgTable_sets;
	uint m2uaAspSgTable_request;
	uint m2uaAspSgTable_refs;
	uint m2uaAspSgTable_id;
	uint8_t *m2uaAspId;		/* NoAccess */
	size_t m2uaAspIdLen;
	uint8_t *m2uaSgId;		/* NoAccess */
	size_t m2uaSgIdLen;
	long m2uaAspSgAdministrativeState;	/* Create */
	uint8_t *m2uaAspSgProceduralStatus;	/* ReadOnly */
	size_t m2uaAspSgProceduralStatusLen;
	long m2uaAspSgUsageState;	/* ReadOnly */
	long m2uaAspSgOperationalState;	/* ReadOnly */
	uint8_t *m2uaAspSgAvailabilityStatus;	/* ReadOnly */
	size_t m2uaAspSgAvailabilityStatusLen;
	long m2uaAspSgAspState;		/* Create */
	long m2uaAspSgAspIdPolicy;	/* Create */
	ulong m2uaAspSgAspId;		/* Create */
	long m2uaAspSgAssociationPolicy;	/* Create */
	long m2uaAspSgIpPort;		/* Create */
	uint8_t *m2uaAspSgPrimaryIpAddress;	/* Create */
	size_t m2uaAspSgPrimaryIpAddressLen;
	long m2uaAspSgRowStatus;	/* Create */
};
struct m2uaAsTable_data {
	struct m2uaAsTable_data *m2uaAsTable_old;
	uint m2uaAsTable_rsvs;
	uint m2uaAsTable_tsts;
	uint m2uaAsTable_sets;
	uint m2uaAsTable_request;
	uint m2uaAsTable_refs;
	uint m2uaAsTable_id;
	uint8_t *m2uaAsId;		/* NoAccess */
	size_t m2uaAsIdLen;
	uint8_t *m2uaAsName;		/* Create */
	size_t m2uaAsNameLen;
	oid *m2uaAsTrafficMode;		/* Create */
	size_t m2uaAsTrafficModeLen;
	long m2uaAsAdministrativeState;	/* Create */
	long m2uaAsOperationalState;	/* ReadOnly */
	uint8_t *m2uaAsProceduralStatus;	/* Create */
	size_t m2uaAsProceduralStatusLen;
	long m2uaAsUsageState;		/* Create */
	long m2uaAsAsState;		/* Create */
	long m2uaAsRowStatus;		/* Create */
};
struct m2uaIfTable_data {
	struct m2uaIfTable_data *m2uaIfTable_old;
	uint m2uaIfTable_rsvs;
	uint m2uaIfTable_tsts;
	uint m2uaIfTable_sets;
	uint m2uaIfTable_request;
	uint m2uaIfTable_refs;
	uint m2uaIfTable_id;
	uint8_t *m2uaIfId;		/* NoAccess */
	size_t m2uaIfIdLen;
	ulong m2uaIfAsIndex;		/* Create */
	uint8_t *m2uaIfIdentifier;	/* Create */
	size_t m2uaIfIdentifierLen;
	uint8_t *m2uaIfName;		/* Create */
	size_t m2uaIfNameLen;
	long m2uaIfRowStatus;		/* Create */
};
struct m2uaAsIfTable_data {
	struct m2uaAsIfTable_data *m2uaAsIfTable_old;
	uint m2uaAsIfTable_rsvs;
	uint m2uaAsIfTable_tsts;
	uint m2uaAsIfTable_sets;
	uint m2uaAsIfTable_request;
	uint m2uaAsIfTable_refs;
	uint m2uaAsIfTable_id;
	uint8_t *m2uaAsId;		/* NoAccess */
	size_t m2uaAsIdLen;
	uint8_t *m2uaIfId;		/* NoAccess */
	size_t m2uaIfIdLen;
	long m2uaAsIfEntryRowStatus;	/* Create */
};
struct m2uaSgAsTable_data {
	struct m2uaSgAsTable_data *m2uaSgAsTable_old;
	uint m2uaSgAsTable_rsvs;
	uint m2uaSgAsTable_tsts;
	uint m2uaSgAsTable_sets;
	uint m2uaSgAsTable_request;
	uint m2uaSgAsTable_refs;
	uint m2uaSgAsTable_id;
	uint8_t *m2uaSgId;		/* NoAccess */
	size_t m2uaSgIdLen;
	uint8_t *m2uaAsId;		/* NoAccess */
	size_t m2uaAsIdLen;
	ulong m2uaSgAsOrdering;		/* Create */
	long m2uaSgAsAdministrativeState;	/* Create */
	uint8_t *m2uaSgAsProceduralStatus;	/* ReadOnly */
	size_t m2uaSgAsProceduralStatusLen;
	long m2uaSgAsUsageState;	/* ReadOnly */
	long m2uaSgAsOperationalState;	/* ReadOnly */
	uint8_t *m2uaSgAsAvailabilityStatus;	/* ReadOnly */
	size_t m2uaSgAsAvailabilityStatusLen;
	long m2uaSgAsStandbyStatus;	/* ReadOnly */
	ulong m2uaSgAsPrimarySg;	/* ReadOnly */
	long m2uaSgAsAsState;		/* ReadOnly */
	long m2uaSgAsRowStatus;		/* Create */
};
struct m2uaAspAsTable_data {
	struct m2uaAspAsTable_data *m2uaAspAsTable_old;
	uint m2uaAspAsTable_rsvs;
	uint m2uaAspAsTable_tsts;
	uint m2uaAspAsTable_sets;
	uint m2uaAspAsTable_request;
	uint m2uaAspAsTable_refs;
	uint m2uaAspAsTable_id;
	uint8_t *m2uaAspId;		/* NoAccess */
	size_t m2uaAspIdLen;
	uint8_t *m2uaAsId;		/* NoAccess */
	size_t m2uaAsIdLen;
	long m2uaAspAsAdministrativeState;	/* Create */
	long m2uaAspAsOperationalState;	/* ReadOnly */
	uint8_t *m2uaAspAsProceduralStatus;	/* ReadOnly */
	size_t m2uaAspAsProceduralStatusLen;
	long m2uaAspAsUsageState;	/* ReadOnly */
	long m2uaAspAsAsState;		/* Create */
	long m2uaAspAsRowStatus;	/* Create */
};
struct m2uaAspSgAsTable_data {
	struct m2uaAspSgAsTable_data *m2uaAspSgAsTable_old;
	uint m2uaAspSgAsTable_rsvs;
	uint m2uaAspSgAsTable_tsts;
	uint m2uaAspSgAsTable_sets;
	uint m2uaAspSgAsTable_request;
	uint m2uaAspSgAsTable_refs;
	uint m2uaAspSgAsTable_id;
	uint8_t *m2uaAspId;		/* NoAccess */
	size_t m2uaAspIdLen;
	uint8_t *m2uaSgId;		/* NoAccess */
	size_t m2uaSgIdLen;
	uint8_t *m2uaAsId;		/* NoAccess */
	size_t m2uaAsIdLen;
	long m2uaAspSgAsAdministrativeState;	/* ReadWrite */
	long m2uaAspSgAsOperationalState;	/* ReadOnly */
	uint8_t *m2uaAspSgAsProceduralStatus;	/* ReadOnly */
	size_t m2uaAspSgAsProceduralStatusLen;
	long m2uaAspSgAsUsageState;	/* ReadOnly */
	long m2uaAspSgAsStandbyStatus;	/* ReadOnly */
	long m2uaAspSgAsRowStatus;	/* ReadWrite */
};

/* storage declarations */
extern struct m2uaAspMIB_data *m2uaAspMIBStorage;
extern struct header_complex_index *m2uaAspTableStorage;
extern struct header_complex_index *m2uaSgTableStorage;
extern struct header_complex_index *m2uaAspSgTableStorage;
extern struct header_complex_index *m2uaAsTableStorage;
extern struct header_complex_index *m2uaIfTableStorage;
extern struct header_complex_index *m2uaAsIfTableStorage;
extern struct header_complex_index *m2uaSgAsTableStorage;
extern struct header_complex_index *m2uaAspAsTableStorage;
extern struct header_complex_index *m2uaAspSgAsTableStorage;

/* enum definitions from the covered mib sections */

#define M2UAASPADMINISTRATIVESTATE_LOCKED        0
#define M2UAASPADMINISTRATIVESTATE_UNLOCKED      1
#define M2UAASPADMINISTRATIVESTATE_SHUTTINGDOWN  2

#define M2UAASPOPERATIONALSTATE_DISABLED         0
#define M2UAASPOPERATIONALSTATE_ENABLED          1

#define M2UAASPPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPPROCEDURALSTATUS_NOTINITIALIZED   1
#define M2UAASPPROCEDURALSTATUS_INITIALIZING     2
#define M2UAASPPROCEDURALSTATUS_REPORTING        3
#define M2UAASPPROCEDURALSTATUS_TERMINATING      4

#define M2UAASPUSAGESTATE_IDLE                   0
#define M2UAASPUSAGESTATE_ACTIVE                 1
#define M2UAASPUSAGESTATE_BUSY                   2

#define M2UAASPASPSTATE_DOWN                     1
#define M2UAASPASPSTATE_INITIALIZING             2
#define M2UAASPASPSTATE_TERMINATING              3
#define M2UAASPASPSTATE_UP                       4

#define M2UAASPCAPABLITIES_ASPEXT                0
#define M2UAASPCAPABLITIES_SGINFO                1
#define M2UAASPCAPABLITIES_LOADSEL               2
#define M2UAASPCAPABLITIES_LOADGRP               3
#define M2UAASPCAPABLITIES_CORID                 4
#define M2UAASPCAPABLITIES_REGEXT                5
#define M2UAASPCAPABLITIES_SESSID                6
#define M2UAASPCAPABLITIES_DYNAMIC               7
#define M2UAASPCAPABLITIES_ASPCONG               8
#define M2UAASPCAPABLITIES_TEXTIID               9

#define M2UAASPREGISTRATIONPOLICY_UNKNOWN        1
#define M2UAASPREGISTRATIONPOLICY_FORBIDDEN      2
#define M2UAASPREGISTRATIONPOLICY_PERMITTED      3
#define M2UAASPREGISTRATIONPOLICY_REQUIRED       4

#define M2UASGADMINISTRATIVESTATE_LOCKED         0
#define M2UASGADMINISTRATIVESTATE_UNLOCKED       1
#define M2UASGADMINISTRATIVESTATE_SHUTTINGDOWN   2

#define M2UASGOPERATIONALSTATE_DISABLED          0
#define M2UASGOPERATIONALSTATE_ENABLED           1

#define M2UASGPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UASGPROCEDURALSTATUS_NOTINITIALIZED    1
#define M2UASGPROCEDURALSTATUS_INITIALIZING      2
#define M2UASGPROCEDURALSTATUS_REPORTING         3
#define M2UASGPROCEDURALSTATUS_TERMINATING       4

#define M2UASGSTANDBYSTATUS_HOTSTANDBY           0
#define M2UASGSTANDBYSTATUS_COLDSTANDBY          1
#define M2UASGSTANDBYSTATUS_PROVIDINGSERVICE     2

#define M2UASGASPSTATE_DOWN                      1
#define M2UASGASPSTATE_INITIALIZING              2
#define M2UASGASPSTATE_TERMINATING               3
#define M2UASGASPSTATE_UP                        4

#define M2UASGUSAGESTATE_IDLE                    0
#define M2UASGUSAGESTATE_ACTIVE                  1
#define M2UASGUSAGESTATE_BUSY                    2

#define M2UASGVERSION_INTEROPERABLE              0
#define M2UASGVERSION_RFC3331                    1
#define M2UASGVERSION_TS102141                   2

#define M2UASGOPTIONS_ASPEXT                     0
#define M2UASGOPTIONS_SGINFO                     1
#define M2UASGOPTIONS_LOADSEL                    2
#define M2UASGOPTIONS_LOADGRP                    3
#define M2UASGOPTIONS_CORID                      4
#define M2UASGOPTIONS_REGEXT                     5
#define M2UASGOPTIONS_SESSID                     6
#define M2UASGOPTIONS_DYNAMIC                    7
#define M2UASGOPTIONS_ASPCONG                    8
#define M2UASGOPTIONS_TEXTIID                    9

#define M2UASGREGISTRATIONPOLICY_UNKNOWN         1
#define M2UASGREGISTRATIONPOLICY_FORBIDDEN       2
#define M2UASGREGISTRATIONPOLICY_PERMITTED       3
#define M2UASGREGISTRATIONPOLICY_REQUIRED        4

#define M2UAASPSGADMINISTRATIVESTATE_LOCKED      0
#define M2UAASPSGADMINISTRATIVESTATE_UNLOCKED    1
#define M2UAASPSGADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UAASPSGPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPSGPROCEDURALSTATUS_NOTINITIALIZED 1
#define M2UAASPSGPROCEDURALSTATUS_INITIALIZING   2
#define M2UAASPSGPROCEDURALSTATUS_REPORTING      3
#define M2UAASPSGPROCEDURALSTATUS_TERMINATING    4

#define M2UAASPSGUSAGESTATE_IDLE                 0
#define M2UAASPSGUSAGESTATE_ACTIVE               1
#define M2UAASPSGUSAGESTATE_BUSY                 2

#define M2UAASPSGOPERATIONALSTATE_DISABLED       0
#define M2UAASPSGOPERATIONALSTATE_ENABLED        1

#define M2UAASPSGAVAILABILITYSTATUS_INTEST       0
#define M2UAASPSGAVAILABILITYSTATUS_FAILED       1
#define M2UAASPSGAVAILABILITYSTATUS_POWEROFF     2
#define M2UAASPSGAVAILABILITYSTATUS_OFFLINE      3
#define M2UAASPSGAVAILABILITYSTATUS_OFFDUTY      4
#define M2UAASPSGAVAILABILITYSTATUS_DEPENDENCY   5
#define M2UAASPSGAVAILABILITYSTATUS_DEGRADED     6
#define M2UAASPSGAVAILABILITYSTATUS_NOTINSTALLED 7
#define M2UAASPSGAVAILABILITYSTATUS_LOGFULL      8

#define M2UAASPSGASPSTATE_DOWN                   1
#define M2UAASPSGASPSTATE_INITIALIZING           2
#define M2UAASPSGASPSTATE_TERMINATING            3
#define M2UAASPSGASPSTATE_UP                     4

#define M2UAASPSGASPIDPOLICY_UNKNOWN             1
#define M2UAASPSGASPIDPOLICY_PERMITTED           2
#define M2UAASPSGASPIDPOLICY_REQUIRED            3
#define M2UAASPSGASPIDPOLICY_FORBIDDEN           4

#define M2UAASPSGASSOCIATIONPOLICY_UNKNOWN       1
#define M2UAASPSGASSOCIATIONPOLICY_ALWAYS        2
#define M2UAASPSGASSOCIATIONPOLICY_ONDEMAND      3
#define M2UAASPSGASSOCIATIONPOLICY_OTHER         4

#define M2UAASADMINISTRATIVESTATE_LOCKED         0
#define M2UAASADMINISTRATIVESTATE_UNLOCKED       1
#define M2UAASADMINISTRATIVESTATE_SHUTTINGDOWN   2

#define M2UAASOPERATIONALSTATE_DISABLED          0
#define M2UAASOPERATIONALSTATE_ENABLED           1

#define M2UAASPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPROCEDURALSTATUS_NOTINITIALIZED    1
#define M2UAASPROCEDURALSTATUS_INITIALIZING      2
#define M2UAASPROCEDURALSTATUS_REPORTING         3
#define M2UAASPROCEDURALSTATUS_TERMINATING       4

#define M2UAASUSAGESTATE_IDLE                    0
#define M2UAASUSAGESTATE_ACTIVE                  1
#define M2UAASUSAGESTATE_BUSY                    2

#define M2UAASASSTATE_DOWN                       1
#define M2UAASASSTATE_INITIALIZING               2
#define M2UAASASSTATE_TERMINATING                3
#define M2UAASASSTATE_INACTIVE                   4
#define M2UAASASSTATE_ACTIVATING                 5
#define M2UAASASSTATE_DEACTIVATING               6
#define M2UAASASSTATE_ACTIVE                     7

#define M2UASGASADMINISTRATIVESTATE_LOCKED       0
#define M2UASGASADMINISTRATIVESTATE_UNLOCKED     1
#define M2UASGASADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UASGASPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UASGASPROCEDURALSTATUS_NOTINITIALIZED  1
#define M2UASGASPROCEDURALSTATUS_INITIALIZING    2
#define M2UASGASPROCEDURALSTATUS_REPORTING       3
#define M2UASGASPROCEDURALSTATUS_TERMINATING     4

#define M2UASGASUSAGESTATE_IDLE                  0
#define M2UASGASUSAGESTATE_ACTIVE                1
#define M2UASGASUSAGESTATE_BUSY                  2

#define M2UASGASOPERATIONALSTATE_DISABLED        0
#define M2UASGASOPERATIONALSTATE_ENABLED         1

#define M2UASGASAVAILABILITYSTATUS_INTEST        0
#define M2UASGASAVAILABILITYSTATUS_FAILED        1
#define M2UASGASAVAILABILITYSTATUS_POWEROFF      2
#define M2UASGASAVAILABILITYSTATUS_OFFLINE       3
#define M2UASGASAVAILABILITYSTATUS_OFFDUTY       4
#define M2UASGASAVAILABILITYSTATUS_DEPENDENCY    5
#define M2UASGASAVAILABILITYSTATUS_DEGRADED      6
#define M2UASGASAVAILABILITYSTATUS_NOTINSTALLED  7
#define M2UASGASAVAILABILITYSTATUS_LOGFULL       8

#define M2UASGASSTANDBYSTATUS_HOTSTANDBY         0
#define M2UASGASSTANDBYSTATUS_COLDSTANDBY        1
#define M2UASGASSTANDBYSTATUS_PROVIDINGSERVICE   2

#define M2UASGASASSTATE_DOWN                     1
#define M2UASGASASSTATE_INITIALIZING             2
#define M2UASGASASSTATE_TERMINATING              3
#define M2UASGASASSTATE_INACTIVE                 4
#define M2UASGASASSTATE_ACTIVATING               5
#define M2UASGASASSTATE_DEACTIVATING             6
#define M2UASGASASSTATE_ACTIVE                   7

#define M2UAASPASADMINISTRATIVESTATE_LOCKED      0
#define M2UAASPASADMINISTRATIVESTATE_UNLOCKED    1
#define M2UAASPASADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UAASPASOPERATIONALSTATE_DISABLED       0
#define M2UAASPASOPERATIONALSTATE_ENABLED        1

#define M2UAASPASPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPASPROCEDURALSTATUS_NOTINITIALIZED 1
#define M2UAASPASPROCEDURALSTATUS_INITIALIZING   2
#define M2UAASPASPROCEDURALSTATUS_REPORTING      3
#define M2UAASPASPROCEDURALSTATUS_TERMINATING    4

#define M2UAASPASUSAGESTATE_IDLE                 0
#define M2UAASPASUSAGESTATE_ACTIVE               1
#define M2UAASPASUSAGESTATE_BUSY                 2

#define M2UAASPASASSTATE_DOWN                    1
#define M2UAASPASASSTATE_INITIALIZING            2
#define M2UAASPASASSTATE_TERMINATING             3
#define M2UAASPASASSTATE_INACTIVE                4
#define M2UAASPASASSTATE_ACTIVATING              5
#define M2UAASPASASSTATE_DEACTIVATING            6
#define M2UAASPASASSTATE_ACTIVE                  7

#define M2UAASPSGASADMINISTRATIVESTATE_LOCKED    0
#define M2UAASPSGASADMINISTRATIVESTATE_UNLOCKED  1
#define M2UAASPSGASADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UAASPSGASOPERATIONALSTATE_DISABLED     0
#define M2UAASPSGASOPERATIONALSTATE_ENABLED      1

#define M2UAASPSGASPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPSGASPROCEDURALSTATUS_NOTINITIALIZED 1
#define M2UAASPSGASPROCEDURALSTATUS_INITIALIZING 2
#define M2UAASPSGASPROCEDURALSTATUS_REPORTING    3
#define M2UAASPSGASPROCEDURALSTATUS_TERMINATING  4

#define M2UAASPSGASUSAGESTATE_IDLE               0
#define M2UAASPSGASUSAGESTATE_ACTIVE             1
#define M2UAASPSGASUSAGESTATE_BUSY               2

#define M2UAASPSGASSTANDBYSTATUS_HOTSTANDBY      0
#define M2UAASPSGASSTANDBYSTATUS_COLDSTANDBY     1
#define M2UAASPSGASSTANDBYSTATUS_PROVIDINGSERVICE 2

#define M2UAASPSGASROWSTATUS_DOWN                1
#define M2UAASPSGASROWSTATUS_INITIALIZING        2
#define M2UAASPSGASROWSTATUS_TERMINATING         3
#define M2UAASPSGASROWSTATUS_INACTIVE            4
#define M2UAASPSGASROWSTATUS_ACTIVATING          5
#define M2UAASPSGASROWSTATUS_DEACTIVATING        6
#define M2UAASPSGASROWSTATUS_ACTIVE              7

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid m2uaAspFullCompliance_oid[12];
extern oid m2uaAspFullGroup_oid[12];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_m2uaAspMIB(void);
void deinit_m2uaAspMIB(void);
int term_m2uaAspMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_m2uaAspMIB;
struct m2uaAspMIB_data *m2uaAspMIB_create(void);
struct m2uaAspMIB_data *m2uaAspMIB_duplicate(struct m2uaAspMIB_data *);
int m2uaAspMIB_destroy(struct m2uaAspMIB_data **);
int m2uaAspMIB_add(struct m2uaAspMIB_data *);
void parse_m2uaAspMIB(const char *, char *);
SNMPCallback store_m2uaAspMIB;
void refresh_m2uaAspMIB(int);
FindVarMethod var_m2uaAspTable;
struct m2uaAspTable_data *m2uaAspTable_create(void);
struct m2uaAspTable_data *m2uaAspTable_duplicate(struct m2uaAspTable_data *);
int m2uaAspTable_destroy(struct m2uaAspTable_data **);
int m2uaAspTable_add(struct m2uaAspTable_data *);
int m2uaAspTable_del(struct m2uaAspTable_data *);
void parse_m2uaAspTable(const char *, char *);
SNMPCallback store_m2uaAspTable;
void refresh_m2uaAspTable(int);
FindVarMethod var_m2uaSgTable;
struct m2uaSgTable_data *m2uaSgTable_create(void);
struct m2uaSgTable_data *m2uaSgTable_duplicate(struct m2uaSgTable_data *);
int m2uaSgTable_destroy(struct m2uaSgTable_data **);
int m2uaSgTable_add(struct m2uaSgTable_data *);
int m2uaSgTable_del(struct m2uaSgTable_data *);
void parse_m2uaSgTable(const char *, char *);
SNMPCallback store_m2uaSgTable;
void refresh_m2uaSgTable(int);
FindVarMethod var_m2uaAspSgTable;
struct m2uaAspSgTable_data *m2uaAspSgTable_create(void);
struct m2uaAspSgTable_data *m2uaAspSgTable_duplicate(struct m2uaAspSgTable_data *);
int m2uaAspSgTable_destroy(struct m2uaAspSgTable_data **);
int m2uaAspSgTable_add(struct m2uaAspSgTable_data *);
int m2uaAspSgTable_del(struct m2uaAspSgTable_data *);
void parse_m2uaAspSgTable(const char *, char *);
SNMPCallback store_m2uaAspSgTable;
void refresh_m2uaAspSgTable(int);
FindVarMethod var_m2uaAsTable;
struct m2uaAsTable_data *m2uaAsTable_create(void);
struct m2uaAsTable_data *m2uaAsTable_duplicate(struct m2uaAsTable_data *);
int m2uaAsTable_destroy(struct m2uaAsTable_data **);
int m2uaAsTable_add(struct m2uaAsTable_data *);
int m2uaAsTable_del(struct m2uaAsTable_data *);
void parse_m2uaAsTable(const char *, char *);
SNMPCallback store_m2uaAsTable;
void refresh_m2uaAsTable(int);
FindVarMethod var_m2uaIfTable;
struct m2uaIfTable_data *m2uaIfTable_create(void);
struct m2uaIfTable_data *m2uaIfTable_duplicate(struct m2uaIfTable_data *);
int m2uaIfTable_destroy(struct m2uaIfTable_data **);
int m2uaIfTable_add(struct m2uaIfTable_data *);
int m2uaIfTable_del(struct m2uaIfTable_data *);
void parse_m2uaIfTable(const char *, char *);
SNMPCallback store_m2uaIfTable;
void refresh_m2uaIfTable(int);
FindVarMethod var_m2uaAsIfTable;
struct m2uaAsIfTable_data *m2uaAsIfTable_create(void);
struct m2uaAsIfTable_data *m2uaAsIfTable_duplicate(struct m2uaAsIfTable_data *);
int m2uaAsIfTable_destroy(struct m2uaAsIfTable_data **);
int m2uaAsIfTable_add(struct m2uaAsIfTable_data *);
int m2uaAsIfTable_del(struct m2uaAsIfTable_data *);
void parse_m2uaAsIfTable(const char *, char *);
SNMPCallback store_m2uaAsIfTable;
void refresh_m2uaAsIfTable(int);
FindVarMethod var_m2uaSgAsTable;
struct m2uaSgAsTable_data *m2uaSgAsTable_create(void);
struct m2uaSgAsTable_data *m2uaSgAsTable_duplicate(struct m2uaSgAsTable_data *);
int m2uaSgAsTable_destroy(struct m2uaSgAsTable_data **);
int m2uaSgAsTable_add(struct m2uaSgAsTable_data *);
int m2uaSgAsTable_del(struct m2uaSgAsTable_data *);
void parse_m2uaSgAsTable(const char *, char *);
SNMPCallback store_m2uaSgAsTable;
void refresh_m2uaSgAsTable(int);
FindVarMethod var_m2uaAspAsTable;
struct m2uaAspAsTable_data *m2uaAspAsTable_create(void);
struct m2uaAspAsTable_data *m2uaAspAsTable_duplicate(struct m2uaAspAsTable_data *);
int m2uaAspAsTable_destroy(struct m2uaAspAsTable_data **);
int m2uaAspAsTable_add(struct m2uaAspAsTable_data *);
int m2uaAspAsTable_del(struct m2uaAspAsTable_data *);
void parse_m2uaAspAsTable(const char *, char *);
SNMPCallback store_m2uaAspAsTable;
void refresh_m2uaAspAsTable(int);
FindVarMethod var_m2uaAspSgAsTable;
struct m2uaAspSgAsTable_data *m2uaAspSgAsTable_create(void);
struct m2uaAspSgAsTable_data *m2uaAspSgAsTable_duplicate(struct m2uaAspSgAsTable_data *);
int m2uaAspSgAsTable_destroy(struct m2uaAspSgAsTable_data **);
int m2uaAspSgAsTable_add(struct m2uaAspSgAsTable_data *);
int m2uaAspSgAsTable_del(struct m2uaAspSgAsTable_data *);
void parse_m2uaAspSgAsTable(const char *, char *);
SNMPCallback store_m2uaAspSgAsTable;
void refresh_m2uaAspSgAsTable(int);

WriteMethod write_m2uaAspAdministrativeState;
WriteMethod write_m2uaAspAspState;
WriteMethod write_m2uaAspCapablities;
WriteMethod write_m2uaAspRegistrationPolicy;
WriteMethod write_m2uaAspName;
WriteMethod write_m2uaAspRowStatus;
WriteMethod write_m2uaSgName;
WriteMethod write_m2uaSgAdministrativeState;
WriteMethod write_m2uaSgAspState;
WriteMethod write_m2uaSgVersion;
WriteMethod write_m2uaSgOptions;
WriteMethod write_m2uaSgRegistrationPolicy;
WriteMethod write_m2uaSgProtocolPayloadId;
WriteMethod write_m2uaSgIpPort;
WriteMethod write_m2uaSgPrimaryIpAddress;
WriteMethod write_m2uaSgMinOstreams;
WriteMethod write_m2uaSgMaxIstreams;
WriteMethod write_m2uaSgRowStatus;
WriteMethod write_m2uaAspSgAdministrativeState;
WriteMethod write_m2uaAspSgAspState;
WriteMethod write_m2uaAspSgAspIdPolicy;
WriteMethod write_m2uaAspSgAspId;
WriteMethod write_m2uaAspSgAssociationPolicy;
WriteMethod write_m2uaAspSgIpPort;
WriteMethod write_m2uaAspSgPrimaryIpAddress;
WriteMethod write_m2uaAspSgRowStatus;
WriteMethod write_m2uaAsName;
WriteMethod write_m2uaAsTrafficMode;
WriteMethod write_m2uaAsAdministrativeState;
WriteMethod write_m2uaAsProceduralStatus;
WriteMethod write_m2uaAsUsageState;
WriteMethod write_m2uaAsAsState;
WriteMethod write_m2uaAsRowStatus;
WriteMethod write_m2uaIfAsIndex;
WriteMethod write_m2uaIfIdentifier;
WriteMethod write_m2uaIfName;
WriteMethod write_m2uaIfRowStatus;
WriteMethod write_m2uaAsIfEntryRowStatus;
WriteMethod write_m2uaSgAsOrdering;
WriteMethod write_m2uaSgAsAdministrativeState;
WriteMethod write_m2uaSgAsRowStatus;
WriteMethod write_m2uaAspAsAdministrativeState;
WriteMethod write_m2uaAspAsAsState;
WriteMethod write_m2uaAspAsRowStatus;
WriteMethod write_m2uaAspSgAsAdministrativeState;
WriteMethod write_m2uaAspSgAsRowStatus;
#endif				/* __LOCAL_M2UAASPMIB_H__ */
