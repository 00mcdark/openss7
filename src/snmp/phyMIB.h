/*****************************************************************************

 @(#) $Id: phyMIB.h,v 1.1.2.2 2010-11-28 14:22:15 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2010-11-28 14:22:15 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: phyMIB.h,v $
 Revision 1.1.2.2  2010-11-28 14:22:15  brian
 - remove #ident, protect _XOPEN_SOURCE

 Revision 1.1.2.1  2009-06-21 11:42:34  brian
 - added files to new distro

 Revision 0.9.2.15  2009-02-18 20:18:59  brian
 - updated agents

 Revision 0.9.2.14  2009-01-19 13:31:56  brian
 - updating standalone agents

 Revision 0.9.2.13  2009-01-16 20:40:57  brian
 - working up mibs and agents

 Revision 0.9.2.12  2009-01-14 14:31:22  brian
 - working up agents

 Revision 0.9.2.11  2009-01-10 17:46:47  brian
 - updated agents and mibs

 Revision 0.9.2.10  2009-01-04 13:16:12  brian
 - updated agents

 Revision 0.9.2.9  2009-01-03 10:51:12  brian
 - updated agent

 Revision 0.9.2.8  2009-01-02 15:04:18  brian
 - updated agents

 Revision 0.9.2.7  2008-12-31 16:04:51  brian
 - updated mibs

 Revision 0.9.2.6  2008-12-24 13:40:57  brian
 - updated mibs

 Revision 0.9.2.5  2008-07-31 17:40:17  brian
 - SNMP updates

 Revision 0.9.2.4  2008-04-28 23:39:59  brian
 - updated headers for release

 Revision 0.9.2.3  2008/01/14 19:55:03  brian
 - updated stub files

 Revision 0.9.2.2  2008/01/03 12:46:00  brian
 - updates for new mib2c

 Revision 0.9.2.1  2008/01/01 13:59:38  brian
 - added new mibs

 *****************************************************************************/

#ifndef __LOCAL_PHYMIB_H__
#define __LOCAL_PHYMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct phyMIB_data {
	uint phyMIB_request;
};
struct physicalEntityTable_data {
	uint physicalEntityTable_request;
	uint physicalEntityTable_refs;
	uint8_t *physicalEntityId;	/* NoAccess */
	size_t physicalEntityIdLen;
	oid *physicalEntityLocalSapNames;	/* ReadOnly */
	size_t physicalEntityLocalSapNamesLen;
	long physicalEntityOperationalState;	/* ReadOnly */
	oid *physicalEntityTitles;	/* ReadOnly */
	size_t physicalEntityTitlesLen;
};
struct physicalSAPTable_data {
	uint physicalSAPTable_request;
	uint physicalSAPTable_refs;
	uint8_t *physicalEntityId;	/* NoAccess */
	size_t physicalEntityIdLen;
	uint8_t *physicalSAPsapId;	/* NoAccess */
	size_t physicalSAPsapIdLen;
	ulong physicalSAPsap1Address;	/* ReadOnly */
	oid *physicalSAPuserEntityNames;	/* ReadOnly */
	size_t physicalSAPuserEntityNamesLen;
	long physicalSAPRowStatus;	/* Create */
};
struct dataCircuitTable_data {
	uint dataCircuitTable_request;
	uint dataCircuitTable_refs;
	uint8_t *physicalEntityId;	/* NoAccess */
	size_t physicalEntityIdLen;
	uint8_t *dataCircuitCoProtocolMachineId;	/* NoAccess */
	size_t dataCircuitCoProtocolMachineIdLen;
	long dataCircuitOperationalState;	/* ReadOnly */
	struct counter64 dataCircuitBitErrorsReceived;	/* ReadOnly */
	struct counter64 dataCircuitBitErrorsTransmitted;	/* ReadOnly */
	uint8_t *dataCircuitBitErrorsThreshold;	/* Create */
	size_t dataCircuitBitErrorsThresholdLen;
	long dataCircuitType;		/* ReadOnly */
	uint8_t *dataCircuitPhysicalMediaNames;	/* ReadOnly */
	size_t dataCircuitPhysicalMediaNamesLen;
	uint8_t *dataCircuitPhysicalInterfaceType;	/* ReadOnly */
	size_t dataCircuitPhysicalInterfaceTypeLen;
	oid *dataCircuitPhysicalInterfaceStandard;	/* ReadOnly */
	size_t dataCircuitPhysicalInterfaceStandardLen;
	long dataCircuitSynchronizationMode;	/* ReadOnly */
	uint8_t *dataCircuitTransmissionCoding;	/* ReadOnly */
	size_t dataCircuitTransmissionCodingLen;
	long dataCircuitTransmissionMode;	/* ReadOnly */
	uint8_t *dataCircuitTransmissionRate;	/* ReadOnly */
	size_t dataCircuitTransmissionRateLen;
	long dataCircuitRowStatus;	/* Create */
};
struct physicalConnectionTable_data {
	uint physicalConnectionTable_request;
	uint physicalConnectionTable_refs;
	uint8_t *physicalEntityId;	/* NoAccess */
	size_t physicalEntityIdLen;
	uint8_t *dataCircuitCoProtocolMachineId;	/* NoAccess */
	size_t dataCircuitCoProtocolMachineIdLen;
	uint8_t *physicalConnectionId;	/* NoAccess */
	size_t physicalConnectionIdLen;
	oid *physicalConnectionUnderlyingConnectionNames;	/* ReadOnly */
	size_t physicalConnectionUnderlyingConnectionNamesLen;
	oid *physicalConnectionSupportedConnectionNames;	/* ReadOnly */
	size_t physicalConnectionSupportedConnectionNamesLen;
	uint8_t *physicalConnectionEndpointIdentifier;	/* Create */
	size_t physicalConnectionEndpointIdentifierLen;
	long physicalConnectionPortNumber;	/* ReadOnly */
	long physicalConnectionRowStatus;	/* Create */
};

/* storage declarations */
extern struct phyMIB_data *phyMIBStorage;
extern struct header_complex_index *physicalEntityTableStorage;
extern struct header_complex_index *physicalSAPTableStorage;
extern struct header_complex_index *dataCircuitTableStorage;
extern struct header_complex_index *physicalConnectionTableStorage;

/* enum definitions from the covered mib sections */

#define PHYSICALENTITYOPERATIONALSTATE_DISABLED  0
#define PHYSICALENTITYOPERATIONALSTATE_ENABLED   1

#define DATACIRCUITOPERATIONALSTATE_DISABLED     0
#define DATACIRCUITOPERATIONALSTATE_ENABLED      1

#define DATACIRCUITTYPE_ENDSYSTEM                0
#define DATACIRCUITTYPE_RELAYSYSTEM              1

#define DATACIRCUITSYNCHRONIZATIONMODE_SYNCRHONOUS 0
#define DATACIRCUITSYNCHRONIZATIONMODE_ASYNCRHONOUS 1

#define DATACIRCUITTRANSMISSIONMODE_SIMPLEX      0
#define DATACIRCUITTRANSMISSIONMODE_DUPLEX       1
#define DATACIRCUITTRANSMISSIONMODE_HALFDUPLEX   2

/* notifications */

/* scalars accessible only for notify */
extern oid physicalBitErrorThresholdReached_oid[12];
extern oid physicalConnectionError_oid[12];
extern oid phsyicalConnectionEstablished_oid[12];
extern oid physicalLossOfSignal_oid[12];
extern oid physicalLossOfSynchronization_oid[12];

/* object id definitions */
extern oid phyBasicCompliance_oid[12];
extern oid physicalGroup_oid[12];
extern oid dataCircuitGroup_oid[12];
extern oid physicalConnectionGroup_oid[12];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_phyMIB(void);
void deinit_phyMIB(void);
int term_phyMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_phyMIB;
void parse_phyMIB(const char *, char *);
SNMPCallback store_phyMIB;
void refresh_phyMIB(int);
FindVarMethod var_physicalEntityTable;
struct physicalEntityTable_data *physicalEntityTable_create(void);
struct physicalEntityTable_data *physicalEntityTable_duplicate(struct physicalEntityTable_data *);
int physicalEntityTable_destroy(struct physicalEntityTable_data **);
int physicalEntityTable_add(struct physicalEntityTable_data *);
int physicalEntityTable_del(struct physicalEntityTable_data *);
void parse_physicalEntityTable(const char *, char *);
SNMPCallback store_physicalEntityTable;
void refresh_physicalEntityTable(int);
FindVarMethod var_physicalSAPTable;
struct physicalSAPTable_data *physicalSAPTable_create(void);
struct physicalSAPTable_data *physicalSAPTable_duplicate(struct physicalSAPTable_data *);
int physicalSAPTable_destroy(struct physicalSAPTable_data **);
int physicalSAPTable_add(struct physicalSAPTable_data *);
int physicalSAPTable_del(struct physicalSAPTable_data *);
void parse_physicalSAPTable(const char *, char *);
SNMPCallback store_physicalSAPTable;
void refresh_physicalSAPTable(int);
FindVarMethod var_dataCircuitTable;
struct dataCircuitTable_data *dataCircuitTable_create(void);
struct dataCircuitTable_data *dataCircuitTable_duplicate(struct dataCircuitTable_data *);
int dataCircuitTable_destroy(struct dataCircuitTable_data **);
int dataCircuitTable_add(struct dataCircuitTable_data *);
int dataCircuitTable_del(struct dataCircuitTable_data *);
void parse_dataCircuitTable(const char *, char *);
SNMPCallback store_dataCircuitTable;
void refresh_dataCircuitTable(int);
FindVarMethod var_physicalConnectionTable;
struct physicalConnectionTable_data *physicalConnectionTable_create(void);
struct physicalConnectionTable_data *physicalConnectionTable_duplicate(struct physicalConnectionTable_data *);
int physicalConnectionTable_destroy(struct physicalConnectionTable_data **);
int physicalConnectionTable_add(struct physicalConnectionTable_data *);
int physicalConnectionTable_del(struct physicalConnectionTable_data *);
void parse_physicalConnectionTable(const char *, char *);
SNMPCallback store_physicalConnectionTable;
void refresh_physicalConnectionTable(int);

WriteMethod write_physicalSAPRowStatus;
WriteMethod write_dataCircuitBitErrorsThreshold;
WriteMethod write_dataCircuitRowStatus;
WriteMethod write_physicalConnectionEndpointIdentifier;
WriteMethod write_physicalConnectionRowStatus;
#endif				/* __LOCAL_PHYMIB_H__ */
