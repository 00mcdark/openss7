/*****************************************************************************

 @(#) $Id$

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date$ by $Author$

 -----------------------------------------------------------------------------

 $Log$
 *****************************************************************************/

#ifndef __LOCAL_RTPSWMIB_H__
#define __LOCAL_RTPSWMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct rtpswMIB_data {
	uint rtpswMIB_request;
};
struct rtpswInterfaceTable_data {
	uint rtpswInterfaceTable_request;
	uint rtpswInterfaceTable_refs;
	ulong rtpswInterfaceId;		/* NoAccess */
	ulong rtpswInterfaceIndex;	/* Create */
	uint8_t *rtpswInterfaceName;	/* Create */
	size_t rtpswInterfaceNameLen;
	long rptswInterfaceAdminState;	/* Create */
	long rtpswInterfaceOperState;	/* ReadOnly */
	uint8_t *rtpswInterfaceProcStatus;	/* ReadOnly */
	size_t rtpswInterfaceProcStatusLen;
	ulong rtpswInterfacePg;		/* ReadOnly */
	long rtpswInterfaceStandbyStatus;	/* ReadOnly */
	long rtpswInterfaceRowStatus;	/* Create */
};
struct rtpswIfAddrTable_data {
	uint rtpswIfAddrTable_request;
	uint rtpswIfAddrTable_refs;
	ulong rtpswIfAddrId;		/* NoAccess */
	ulong rtpswIfIndex;		/* ReadOnly */
	uint8_t *rtpswIfName;		/* ReadOnly */
	size_t rtpswIfNameLen;
	uint8_t *rtpswIfPortRange;	/* Create */
	size_t rtpswIfPortRangeLen;
	long rtpswIfAddrGuardTime;	/* Create */
	long rtpswIfAddrAdminState;	/* Create */
	long rtpswIfAddrOperState;	/* ReadOnly */
	uint8_t *rtpswIfAddrProcStatus;	/* ReadOnly */
	size_t rtpswIfAddrProcStatusLen;
	ulong rtpswIfAddrPg;		/* ReadOnly */
	long rtpswIfAddrStandbyStatus;	/* ReadOnly */
	long rtpswIfAddrRowStatus;	/* Create */
};
struct rtpswTermPointTable_data {
	uint rtpswTermPointTable_request;
	uint rtpswTermPointTable_refs;
	ulong rtpswTermPointId;		/* NoAccess */
	long rtpswTermPointState;	/* ReadOnly */
	long rtpswTermPointType;	/* ReadOnly */
	uint8_t *rtpswTermPointLocalAddress;	/* ReadOnly */
	size_t rtpswTermPointLocalAddressLen;
	uint8_t *rtpswTermPointRemoteAddress;	/* ReadOnly */
	size_t rtpswTermPointRemoteAddressLen;
	long rtpswTermPointOperState;	/* ReadOnly */
	long rtpswTermPointUsageState;	/* ReadOnly */
	uint8_t *rtpswTermPointProcStatus;	/* ReadOnly */
	size_t rtpswTermPointProcStatusLen;
};
struct rtpswTermPointRevTable_data {
	uint rtpswTermPointRevTable_request;
	uint rtpswTermPointRevTable_refs;
	long rtpswTermPointRevType;	/* NoAccess */
	uint8_t *rtpswTermPointRevAddr;	/* NoAccess */
	size_t rtpswTermPointRevAddrLen;
	ulong rtpswTermPointTableIndex;	/* ReadOnly */
};
struct rtpswForwTable_data {
	uint rtpswForwTable_request;
	uint rtpswForwTable_refs;
	ulong rtpswForwId;		/* NoAccess */
	long rtpswForwTpType;		/* ReadOnly */
	uint8_t *rtpswForwTpCalling;	/* ReadOnly */
	size_t rtpswForwTpCallingLen;
	uint8_t *rtpswForwTpCalled;	/* ReadOnly */
	size_t rtpswForwTpCalledLen;
	uint8_t *rtpswForwState;	/* ReadOnly */
	size_t rtpswForwStateLen;
};
struct rtpswForwRevTable_data {
	uint rtpswForwRevTable_request;
	uint rtpswForwRevTable_refs;
	ulong rtpswTermPointId;		/* NoAccess */
	ulong rtpswTermPointId;		/* NoAccess */
	ulong rtpswForwTableIndex;	/* ReadOnly */
};
struct rtpswCallTable_data {
	uint rtpswCallTable_request;
	uint rtpswCallTable_refs;
	ulong rtpswCallId;		/* NoAccess */
	long rtpswCallTpCallingType;	/* ReadOnly */
	uint8_t *rtpswCallTpRemoteCalling;	/* ReadOnly */
	size_t rtpswCallTpRemoteCallingLen;
	uint8_t *rtpswCallTpLocalCalling;	/* ReadOnly */
	size_t rtpswCallTpLocalCallingLen;
	long rtpswCallTpCalledType;	/* ReadOnly */
	uint8_t *rtpswCallTpLocalCalled;	/* ReadOnly */
	size_t rtpswCallTpLocalCalledLen;
	uint8_t *rtpswCallTpRemoteCalled;	/* ReadOnly */
	size_t rtpswCallTpRemoteCalledLen;
	uint8_t *rtpswCallState;	/* ReadOnly */
	size_t rtpswCallStateLen;
};

/* storage declarations */
extern struct rtpswMIB_data *rtpswMIBStorage;
extern struct header_complex_index *rtpswInterfaceTableStorage;
extern struct header_complex_index *rtpswIfAddrTableStorage;
extern struct header_complex_index *rtpswTermPointTableStorage;
extern struct header_complex_index *rtpswTermPointRevTableStorage;
extern struct header_complex_index *rtpswForwTableStorage;
extern struct header_complex_index *rtpswForwRevTableStorage;
extern struct header_complex_index *rtpswCallTableStorage;

/* enum definitions from the covered mib sections */

#define RPTSWINTERFACEADMINSTATE_LOCKED          0
#define RPTSWINTERFACEADMINSTATE_UNLOCKED        1
#define RPTSWINTERFACEADMINSTATE_SHUTTINGDOWN    2

#define RTPSWINTERFACEOPERSTATE_DISABLED         0
#define RTPSWINTERFACEOPERSTATE_ENABLED          1

#define RTPSWINTERFACEPROCSTATUS_INITIALIZATIONREQUIRED 0
#define RTPSWINTERFACEPROCSTATUS_NOTINITIALIZED  1
#define RTPSWINTERFACEPROCSTATUS_INITIALIZING    2
#define RTPSWINTERFACEPROCSTATUS_REPORTING       3
#define RTPSWINTERFACEPROCSTATUS_TERMINATING     4

#define RTPSWINTERFACESTANDBYSTATUS_HOTSTANDBY   0
#define RTPSWINTERFACESTANDBYSTATUS_COLDSTANDBY  1
#define RTPSWINTERFACESTANDBYSTATUS_PROVIDINGSERVICE 2

#define RTPSWIFADDRADMINSTATE_LOCKED             0
#define RTPSWIFADDRADMINSTATE_UNLOCKED           1
#define RTPSWIFADDRADMINSTATE_SHUTTINGDOWN       2

#define RTPSWIFADDROPERSTATE_DISABLED            0
#define RTPSWIFADDROPERSTATE_ENABLED             1

#define RTPSWIFADDRPROCSTATUS_INITIALIZATIONREQUIRED 0
#define RTPSWIFADDRPROCSTATUS_NOTINITIALIZED     1
#define RTPSWIFADDRPROCSTATUS_INITIALIZING       2
#define RTPSWIFADDRPROCSTATUS_REPORTING          3
#define RTPSWIFADDRPROCSTATUS_TERMINATING        4

#define RTPSWIFADDRSTANDBYSTATUS_HOTSTANDBY      0
#define RTPSWIFADDRSTANDBYSTATUS_COLDSTANDBY     1
#define RTPSWIFADDRSTANDBYSTATUS_PROVIDINGSERVICE 2

#define RTPSWTERMPOINTSTATE_IDLE                 0
#define RTPSWTERMPOINTSTATE_BOUND                1
#define RTPSWTERMPOINTSTATE_LISTENING            2
#define RTPSWTERMPOINTSTATE_CONNECTED            3
#define RTPSWTERMPOINTSTATE_WAIT                 4

#define RTPSWTERMPOINTTYPE_UNKNOWN               0
#define RTPSWTERMPOINTTYPE_UDPIPV4               1
#define RTPSWTERMPOINTTYPE_UDPIPV6               2
#define RTPSWTERMPOINTTYPE_UDPIPV4Z              3
#define RTPSWTERMPOINTTYPE_UDPIPV6Z              4
#define RTPSWTERMPOINTTYPE_TCPIPV4               5
#define RTPSWTERMPOINTTYPE_TCPIPV6               6
#define RTPSWTERMPOINTTYPE_TCPIPV4Z              7
#define RTPSWTERMPOINTTYPE_TCPIPV6Z              8
#define RTPSWTERMPOINTTYPE_SCTPIPV4              9
#define RTPSWTERMPOINTTYPE_SCTPIPV6              10
#define RTPSWTERMPOINTTYPE_SCTPIPV4Z             11
#define RTPSWTERMPOINTTYPE_SCTPIPV6Z             12
#define RTPSWTERMPOINTTYPE_LOCAL                 13
#define RTPSWTERMPOINTTYPE_UDPDNS                14
#define RTPSWTERMPOINTTYPE_TCPDNS                15
#define RTPSWTERMPOINTTYPE_SCTPDNS               16

#define RTPSWTERMPOINTOPERSTATE_DISABLED         0
#define RTPSWTERMPOINTOPERSTATE_ENABLED          1

#define RTPSWTERMPOINTUSAGESTATE_IDLE            0
#define RTPSWTERMPOINTUSAGESTATE_ACTIVE          1
#define RTPSWTERMPOINTUSAGESTATE_BUSY            2

#define RTPSWTERMPOINTPROCSTATUS_INITIALIZATIONREQUIRED 0
#define RTPSWTERMPOINTPROCSTATUS_NOTINITIALIZED  1
#define RTPSWTERMPOINTPROCSTATUS_INITIALIZING    2
#define RTPSWTERMPOINTPROCSTATUS_REPORTING       3
#define RTPSWTERMPOINTPROCSTATUS_TERMINATING     4

#define RTPSWTERMPOINTREVTYPE_UNKNOWN            0
#define RTPSWTERMPOINTREVTYPE_UDPIPV4            1
#define RTPSWTERMPOINTREVTYPE_UDPIPV6            2
#define RTPSWTERMPOINTREVTYPE_UDPIPV4Z           3
#define RTPSWTERMPOINTREVTYPE_UDPIPV6Z           4
#define RTPSWTERMPOINTREVTYPE_TCPIPV4            5
#define RTPSWTERMPOINTREVTYPE_TCPIPV6            6
#define RTPSWTERMPOINTREVTYPE_TCPIPV4Z           7
#define RTPSWTERMPOINTREVTYPE_TCPIPV6Z           8
#define RTPSWTERMPOINTREVTYPE_SCTPIPV4           9
#define RTPSWTERMPOINTREVTYPE_SCTPIPV6           10
#define RTPSWTERMPOINTREVTYPE_SCTPIPV4Z          11
#define RTPSWTERMPOINTREVTYPE_SCTPIPV6Z          12
#define RTPSWTERMPOINTREVTYPE_LOCAL              13
#define RTPSWTERMPOINTREVTYPE_UDPDNS             14
#define RTPSWTERMPOINTREVTYPE_TCPDNS             15
#define RTPSWTERMPOINTREVTYPE_SCTPDNS            16

#define RTPSWFORWTPTYPE_UNKNOWN                  0
#define RTPSWFORWTPTYPE_UDPIPV4                  1
#define RTPSWFORWTPTYPE_UDPIPV6                  2
#define RTPSWFORWTPTYPE_UDPIPV4Z                 3
#define RTPSWFORWTPTYPE_UDPIPV6Z                 4
#define RTPSWFORWTPTYPE_TCPIPV4                  5
#define RTPSWFORWTPTYPE_TCPIPV6                  6
#define RTPSWFORWTPTYPE_TCPIPV4Z                 7
#define RTPSWFORWTPTYPE_TCPIPV6Z                 8
#define RTPSWFORWTPTYPE_SCTPIPV4                 9
#define RTPSWFORWTPTYPE_SCTPIPV6                 10
#define RTPSWFORWTPTYPE_SCTPIPV4Z                11
#define RTPSWFORWTPTYPE_SCTPIPV6Z                12
#define RTPSWFORWTPTYPE_LOCAL                    13
#define RTPSWFORWTPTYPE_UDPDNS                   14
#define RTPSWFORWTPTYPE_TCPDNS                   15
#define RTPSWFORWTPTYPE_SCTPDNS                  16

#define RTPSWFORWSTATE_CTFORWARD                 0
#define RTPSWFORWSTATE_CTREVERSE                 1

#define RTPSWCALLTPCALLINGTYPE_UNKNOWN           0
#define RTPSWCALLTPCALLINGTYPE_UDPIPV4           1
#define RTPSWCALLTPCALLINGTYPE_UDPIPV6           2
#define RTPSWCALLTPCALLINGTYPE_UDPIPV4Z          3
#define RTPSWCALLTPCALLINGTYPE_UDPIPV6Z          4
#define RTPSWCALLTPCALLINGTYPE_TCPIPV4           5
#define RTPSWCALLTPCALLINGTYPE_TCPIPV6           6
#define RTPSWCALLTPCALLINGTYPE_TCPIPV4Z          7
#define RTPSWCALLTPCALLINGTYPE_TCPIPV6Z          8
#define RTPSWCALLTPCALLINGTYPE_SCTPIPV4          9
#define RTPSWCALLTPCALLINGTYPE_SCTPIPV6          10
#define RTPSWCALLTPCALLINGTYPE_SCTPIPV4Z         11
#define RTPSWCALLTPCALLINGTYPE_SCTPIPV6Z         12
#define RTPSWCALLTPCALLINGTYPE_LOCAL             13
#define RTPSWCALLTPCALLINGTYPE_UDPDNS            14
#define RTPSWCALLTPCALLINGTYPE_TCPDNS            15
#define RTPSWCALLTPCALLINGTYPE_SCTPDNS           16

#define RTPSWCALLTPCALLEDTYPE_UNKNOWN            0
#define RTPSWCALLTPCALLEDTYPE_UDPIPV4            1
#define RTPSWCALLTPCALLEDTYPE_UDPIPV6            2
#define RTPSWCALLTPCALLEDTYPE_UDPIPV4Z           3
#define RTPSWCALLTPCALLEDTYPE_UDPIPV6Z           4
#define RTPSWCALLTPCALLEDTYPE_TCPIPV4            5
#define RTPSWCALLTPCALLEDTYPE_TCPIPV6            6
#define RTPSWCALLTPCALLEDTYPE_TCPIPV4Z           7
#define RTPSWCALLTPCALLEDTYPE_TCPIPV6Z           8
#define RTPSWCALLTPCALLEDTYPE_SCTPIPV4           9
#define RTPSWCALLTPCALLEDTYPE_SCTPIPV6           10
#define RTPSWCALLTPCALLEDTYPE_SCTPIPV4Z          11
#define RTPSWCALLTPCALLEDTYPE_SCTPIPV6Z          12
#define RTPSWCALLTPCALLEDTYPE_LOCAL              13
#define RTPSWCALLTPCALLEDTYPE_UDPDNS             14
#define RTPSWCALLTPCALLEDTYPE_TCPDNS             15
#define RTPSWCALLTPCALLEDTYPE_SCTPDNS            16

#define RTPSWCALLSTATE_FORWARDCONNECT            0
#define RTPSWCALLSTATE_REVERSECONNECT            1

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid rtpswMandatoryGroup_oid[11];
extern oid rtpswOptionalGroup_oid[11];
extern oid rtpswFullCompliance_oid[11];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_rtpswMIB(void);
void deinit_rtpswMIB(void);
int term_rtpswMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_rtpswMIB;
void parse_rtpswMIB(const char *, char *);
SNMPCallback store_rtpswMIB;
void refresh_rtpswMIB(int);
FindVarMethod var_rtpswInterfaceTable;
struct rtpswInterfaceTable_data *rtpswInterfaceTable_create(void);
struct rtpswInterfaceTable_data *rtpswInterfaceTable_duplicate(struct rtpswInterfaceTable_data *);
int rtpswInterfaceTable_destroy(struct rtpswInterfaceTable_data **);
int rtpswInterfaceTable_add(struct rtpswInterfaceTable_data *);
int rtpswInterfaceTable_del(struct rtpswInterfaceTable_data *);
void parse_rtpswInterfaceTable(const char *, char *);
SNMPCallback store_rtpswInterfaceTable;
void refresh_rtpswInterfaceTable(int);
FindVarMethod var_rtpswIfAddrTable;
struct rtpswIfAddrTable_data *rtpswIfAddrTable_create(void);
struct rtpswIfAddrTable_data *rtpswIfAddrTable_duplicate(struct rtpswIfAddrTable_data *);
int rtpswIfAddrTable_destroy(struct rtpswIfAddrTable_data **);
int rtpswIfAddrTable_add(struct rtpswIfAddrTable_data *);
int rtpswIfAddrTable_del(struct rtpswIfAddrTable_data *);
void parse_rtpswIfAddrTable(const char *, char *);
SNMPCallback store_rtpswIfAddrTable;
void refresh_rtpswIfAddrTable(int);
FindVarMethod var_rtpswTermPointTable;
struct rtpswTermPointTable_data *rtpswTermPointTable_create(void);
struct rtpswTermPointTable_data *rtpswTermPointTable_duplicate(struct rtpswTermPointTable_data *);
int rtpswTermPointTable_destroy(struct rtpswTermPointTable_data **);
int rtpswTermPointTable_add(struct rtpswTermPointTable_data *);
int rtpswTermPointTable_del(struct rtpswTermPointTable_data *);
void parse_rtpswTermPointTable(const char *, char *);
SNMPCallback store_rtpswTermPointTable;
void refresh_rtpswTermPointTable(int);
FindVarMethod var_rtpswTermPointRevTable;
struct rtpswTermPointRevTable_data *rtpswTermPointRevTable_create(void);
struct rtpswTermPointRevTable_data *rtpswTermPointRevTable_duplicate(struct rtpswTermPointRevTable_data *);
int rtpswTermPointRevTable_destroy(struct rtpswTermPointRevTable_data **);
int rtpswTermPointRevTable_add(struct rtpswTermPointRevTable_data *);
int rtpswTermPointRevTable_del(struct rtpswTermPointRevTable_data *);
void parse_rtpswTermPointRevTable(const char *, char *);
SNMPCallback store_rtpswTermPointRevTable;
void refresh_rtpswTermPointRevTable(int);
FindVarMethod var_rtpswForwTable;
struct rtpswForwTable_data *rtpswForwTable_create(void);
struct rtpswForwTable_data *rtpswForwTable_duplicate(struct rtpswForwTable_data *);
int rtpswForwTable_destroy(struct rtpswForwTable_data **);
int rtpswForwTable_add(struct rtpswForwTable_data *);
int rtpswForwTable_del(struct rtpswForwTable_data *);
void parse_rtpswForwTable(const char *, char *);
SNMPCallback store_rtpswForwTable;
void refresh_rtpswForwTable(int);
FindVarMethod var_rtpswForwRevTable;
struct rtpswForwRevTable_data *rtpswForwRevTable_create(void);
struct rtpswForwRevTable_data *rtpswForwRevTable_duplicate(struct rtpswForwRevTable_data *);
int rtpswForwRevTable_destroy(struct rtpswForwRevTable_data **);
int rtpswForwRevTable_add(struct rtpswForwRevTable_data *);
int rtpswForwRevTable_del(struct rtpswForwRevTable_data *);
void parse_rtpswForwRevTable(const char *, char *);
SNMPCallback store_rtpswForwRevTable;
void refresh_rtpswForwRevTable(int);
FindVarMethod var_rtpswCallTable;
struct rtpswCallTable_data *rtpswCallTable_create(void);
struct rtpswCallTable_data *rtpswCallTable_duplicate(struct rtpswCallTable_data *);
int rtpswCallTable_destroy(struct rtpswCallTable_data **);
int rtpswCallTable_add(struct rtpswCallTable_data *);
int rtpswCallTable_del(struct rtpswCallTable_data *);
void parse_rtpswCallTable(const char *, char *);
SNMPCallback store_rtpswCallTable;
void refresh_rtpswCallTable(int);

WriteMethod write_rtpswInterfaceIndex;
WriteMethod write_rtpswInterfaceName;
WriteMethod write_rptswInterfaceAdminState;
WriteMethod write_rtpswInterfaceRowStatus;
WriteMethod write_rtpswIfPortRange;
WriteMethod write_rtpswIfAddrGuardTime;
WriteMethod write_rtpswIfAddrAdminState;
WriteMethod write_rtpswIfAddrRowStatus;
#endif				/* __LOCAL_RTPSWMIB_H__ */
