/*****************************************************************************

 @(#) $Id: lapbMIB.h,v 1.1.2.1 2009-06-21 11:42:32 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2010  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-06-21 11:42:32 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: lapbMIB.h,v $
 Revision 1.1.2.1  2009-06-21 11:42:32  brian
 - added files to new distro

 Revision 0.9.2.5  2009-01-19 13:32:02  brian
 - updating standalone agents

 Revision 0.9.2.4  2009-01-10 17:37:44  brian
 - updated agents and mibs

 Revision 0.9.2.3  2009-01-04 13:16:18  brian
 - updated agents

 Revision 0.9.2.2  2008-12-31 16:04:55  brian
 - updated mibs

 Revision 0.9.2.1  2008-12-27 15:42:07  brian
 - correct ignore file

 *****************************************************************************/

#ifndef __LOCAL_LAPBMIB_H__
#define __LOCAL_LAPBMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct lapbMIB_data {
	uint lapbMIB_request;
	long lapbDiscontinuityTime;	/* ReadOnly */
	long sLPConnectionDefaultInterfaceType;	/* ReadWrite */
	long sLPConnectionDefaultK;	/* ReadWrite */
	long sLPConnectionDefaultN1;	/* ReadWrite */
	long sLPConnectionDefaultN2;	/* ReadWrite */
	long sLPConnectionDefaultSequenceModulus;	/* ReadWrite */
	long sLPConnectionDefaultT1Timer;	/* ReadWrite */
	long sLPConnectionDefaultT2Timer;	/* ReadWrite */
	long sLPConnectionDefaultT3Timer;	/* ReadWrite */
	long sLPConnectionDefaultT4Timer;	/* ReadWrite */
};
struct lAPBDLETable_data {
	uint lAPBDLETable_request;
	uint lAPBDLETable_refs;
	uint8_t *lAPBDLEcommunicationsEntityId;	/* NoAccess */
	size_t lAPBDLEcommunicationsEntityIdLen;
	oid *lAPBDLElocalSapNames;	/* Create */
	size_t lAPBDLElocalSapNamesLen;
	long lAPBDLEoperationalState;	/* Create */
	oid *lAPBDLEproviderEntityNames;	/* Create */
	size_t lAPBDLEproviderEntityNamesLen;
	long lAPBDLEmT1Timer;		/* Create */
	long lAPBDLEmT3Timer;		/* Create */
	long lAPBDLEmW;			/* Create */
	long lAPBDLEmXSend;		/* Create */
	long lAPBDLEmXReceive;		/* Create */
	long lAPBDLEmT2Timer;		/* Create */
	long lAPBDLEreceivedMlpResets;	/* ReadOnly */
	long lAPBDLEtimesMT1Expired;	/* ReadOnly */
	long lAPBDLEIframesReassignments;	/* ReadOnly */
	long lAPBDLEmlpFramesReceived;	/* ReadOnly */
	long lAPBDLEmlpFramesSent;	/* ReadOnly */
	long lAPBDLEmlpFramesOutsideWindowGuard;	/* ReadOnly */
	long lAPBDLEreceivedMlpFramesInGuardRegion;	/* ReadOnly */
	long lAPBDLERowStatus;		/* Create */
};
struct dLSAPTable_data {
	uint dLSAPTable_request;
	uint dLSAPTable_refs;
	uint8_t *lAPBDLEcommunicationsEntityId;	/* NoAccess */
	size_t lAPBDLEcommunicationsEntityIdLen;
	uint8_t *dLSAPsapId;		/* NoAccess */
	size_t dLSAPsapIdLen;
	ulong dLSAPsap1Address;		/* ReadOnly */
	oid *dLSAPuserEntityNames;	/* ReadOnly */
	size_t dLSAPuserEntityNamesLen;
	long dLSAPRowStatus;		/* Create */
};
struct sLPPMTable_data {
	uint sLPPMTable_request;
	uint sLPPMTable_refs;
	uint8_t *lAPBDLEcommunicationsEntityId;	/* NoAccess */
	size_t lAPBDLEcommunicationsEntityIdLen;
	uint8_t *sLPPMcoProtocolMachineId;	/* NoAccess */
	size_t sLPPMcoProtocolMachineIdLen;
	long sLPPMoperationalState;	/* ReadOnly */
	long sLPPMadministrativeState;	/* Create */
	long sLPPMRowStatus;		/* Create */
};
struct sLPConnectionTable_data {
	uint sLPConnectionTable_request;
	uint sLPConnectionTable_refs;
	uint8_t *sLPConnectionConnectionId;	/* NoAccess */
	size_t sLPConnectionConnectionIdLen;
	oid *sLPConnectionUnderlyingConnectionNames;	/* Create */
	size_t sLPConnectionUnderlyingConnectionNamesLen;
	oid *sLPConnectionSupportedConnectionNames;	/* Create */
	size_t sLPConnectionSupportedConnectionNamesLen;
	long sLPConnectionInterfaceType;	/* Create */
	long sLPConnectionK;		/* Create */
	long sLPConnectionN1;		/* Create */
	long sLPConnectionN2;		/* Create */
	long sLPConnectionSequenceModulus;	/* Create */
	long sLPConnectionT1Timer;	/* Create */
	long sLPConnectionT2Timer;	/* Create */
	long sLPConnectionFCSErrorsReceived;	/* ReadOnly */
	long sLPConnectionFRMRsReceived;	/* ReadOnly */
	long sLPConnectionFRMRsSent;	/* ReadOnly */
	long sLPConnectionIFrameDataOctetsReceived;	/* ReadOnly */
	long sLPConnectionIFrameDataOctetsSent;	/* ReadOnly */
	long sLPConnectionIFramesReceived;	/* ReadOnly */
	long sLPConnectionIFramesSent;	/* ReadOnly */
	long sLPConnectionPollsReceived;	/* ReadOnly */
	long sLPConnectionREJsReceived;	/* ReadOnly */
	long sLPConnectionREJsSent;	/* ReadOnly */
	long sLPConnectionRNRsReceived;	/* ReadOnly */
	long sLPConnectionRNRsSent;	/* ReadOnly */
	long sLPConnectionSABMsReceived;	/* ReadOnly */
	long sLPConnectionSABMsSent;	/* ReadOnly */
	long sLPConnectionProtocolState;	/* ReadOnly */
	long sLPConnectionTimesT1Expired;	/* ReadOnly */
	long sLPConnectionT3Timer;	/* Create */
	long sLPConnectionTimesT3Expired;	/* ReadOnly */
	long sLPConnectionT4Timer;	/* Create */
	long sLPConnectionTimesT4Expired;	/* ReadOnly */
	long sLPConnectionAbnormalLinkDisconnectsReceived;	/* ReadOnly */
	long sLPConnectionAbnormalLinkDisconnectsSent;	/* ReadOnly */
	long sLPConnectionLinkResetsReceived;	/* ReadOnly */
	long sLPConnectionLinkResetsSent;	/* ReadOnly */
	long sLPConnectionTimesN2Reached;	/* ReadOnly */
	long sLPConnectionAdministrativeState;	/* Create */
	long sLPConnectionOperationalState;	/* ReadOnly */
	long sLPConnectionUsageState;	/* ReadOnly */
	uint8_t *sLPConnectionProceduralStatus;	/* ReadOnly */
	size_t sLPConnectionProceduralStatusLen;
	uint8_t *sLPConnectionAlarmStatus;	/* ReadOnly */
	size_t sLPConnectionAlarmStatusLen;
	long sLPConnectionRowStatus;	/* Create */
};
struct sLPConnectionIVMOTable_data {
	uint sLPConnectionIVMOTable_request;
	uint sLPConnectionIVMOTable_refs;
	uint8_t *sLPConnectionConnectionId;	/* NoAccess */
	size_t sLPConnectionConnectionIdLen;
	uint8_t *sLPConnectionIVMOid;	/* ReadOnly */
	size_t sLPConnectionIVMOidLen;
	long sLPConnectionIVMOinterfaceType;	/* Create */
	long sLPConnectionIVMOk;	/* Create */
	long sLPConnectionIVMOn1;	/* Create */
	long sLPConnectionIVMOn2;	/* Create */
	long sLPConnectionIVMOsequenceModulus;	/* Create */
	long sLPConnectionIVMOt1Timer;	/* Create */
	long sLPConnectionIVMOt2Timer;	/* Create */
	long sLPConnectionIVMOt3Timer;	/* Create */
	long sLPConnectionIVMOt4Timer;	/* Create */
	long sLPConnectionIVMORowStatus;	/* Create */
};

/* storage declarations */
extern struct lapbMIB_data *lapbMIBStorage;
extern struct header_complex_index *lAPBDLETableStorage;
extern struct header_complex_index *dLSAPTableStorage;
extern struct header_complex_index *sLPPMTableStorage;
extern struct header_complex_index *sLPConnectionTableStorage;
extern struct header_complex_index *sLPConnectionIVMOTableStorage;

/* enum definitions from the covered mib sections */

#define LAPBDLEOPERATIONALSTATE_DISABLED         0
#define LAPBDLEOPERATIONALSTATE_ENABLED          1

#define SLPPMOPERATIONALSTATE_DISABLED           0
#define SLPPMOPERATIONALSTATE_ENABLED            1

#define SLPPMADMINISTRATIVESTATE_LOCKED          0
#define SLPPMADMINISTRATIVESTATE_UNLOCKED        1
#define SLPPMADMINISTRATIVESTATE_SHUTTINGDOWN    2

#define SLPCONNECTIONINTERFACETYPE_DTE           0
#define SLPCONNECTIONINTERFACETYPE_DCE           1

#define SLPCONNECTIONPROTOCOLSTATE_DISCONNECTEDPHASE 0
#define SLPCONNECTIONPROTOCOLSTATE_LINKDISCONNECTION_PHASE 1
#define SLPCONNECTIONPROTOCOLSTATE_LINK_SET_UP_PHASE 2
#define SLPCONNECTIONPROTOCOLSTATE_INFORMATION_TRANSFER_PHASE 3
#define SLPCONNECTIONPROTOCOLSTATE_FRAME_REJECT_CONDITION 4
#define SLPCONNECTIONPROTOCOLSTATE_BUSY_CONDITION 5
#define SLPCONNECTIONPROTOCOLSTATE_SENT_REJECT_CONDITION 6
#define SLPCONNECTIONPROTOCOLSTATE_SYSTEM_PARAMETERS_AND_ERROR_RECOVERY 7

#define SLPCONNECTIONADMINISTRATIVESTATE_LOCKED  0
#define SLPCONNECTIONADMINISTRATIVESTATE_UNLOCKED 1
#define SLPCONNECTIONADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define SLPCONNECTIONOPERATIONALSTATE_DISABLED   0
#define SLPCONNECTIONOPERATIONALSTATE_ENABLED    1

#define SLPCONNECTIONUSAGESTATE_IDLE             0
#define SLPCONNECTIONUSAGESTATE_ACTIVE           1
#define SLPCONNECTIONUSAGESTATE_BUSY             2

#define SLPCONNECTIONPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define SLPCONNECTIONPROCEDURALSTATUS_NOTINITIALIZED 1
#define SLPCONNECTIONPROCEDURALSTATUS_INITIALIZING 2
#define SLPCONNECTIONPROCEDURALSTATUS_REPORTING  3
#define SLPCONNECTIONPROCEDURALSTATUS_TERMINATING 4

#define SLPCONNECTIONALARMSTATUS_UNDERREPAIR     0
#define SLPCONNECTIONALARMSTATUS_CRITICAL        1
#define SLPCONNECTIONALARMSTATUS_MAJOR           2
#define SLPCONNECTIONALARMSTATUS_MINOR           3
#define SLPCONNECTIONALARMSTATUS_ALARMOUTSTANDING 4

#define SLPCONNECTIONIVMOINTERFACETYPE_DTE       0
#define SLPCONNECTIONIVMOINTERFACETYPE_DCE       1

#define SLPCONNECTIONDEFAULTINTERFACETYPE_DTE    0
#define SLPCONNECTIONDEFAULTINTERFACETYPE_DCE    1

/* notifications */

/* scalars accessible only for notify */
extern oid fRMR_oid[12];

/* object id definitions */

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_lapbMIB(void);
void deinit_lapbMIB(void);
int term_lapbMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_lapbMIB;
void parse_lapbMIB(const char *, char *);
SNMPCallback store_lapbMIB;
void refresh_lapbMIB(int);
FindVarMethod var_lAPBDLETable;
struct lAPBDLETable_data *lAPBDLETable_create(void);
struct lAPBDLETable_data *lAPBDLETable_duplicate(struct lAPBDLETable_data *);
int lAPBDLETable_destroy(struct lAPBDLETable_data **);
int lAPBDLETable_add(struct lAPBDLETable_data *);
int lAPBDLETable_del(struct lAPBDLETable_data *);
void parse_lAPBDLETable(const char *, char *);
SNMPCallback store_lAPBDLETable;
void refresh_lAPBDLETable(int);
FindVarMethod var_dLSAPTable;
struct dLSAPTable_data *dLSAPTable_create(void);
struct dLSAPTable_data *dLSAPTable_duplicate(struct dLSAPTable_data *);
int dLSAPTable_destroy(struct dLSAPTable_data **);
int dLSAPTable_add(struct dLSAPTable_data *);
int dLSAPTable_del(struct dLSAPTable_data *);
void parse_dLSAPTable(const char *, char *);
SNMPCallback store_dLSAPTable;
void refresh_dLSAPTable(int);
FindVarMethod var_sLPPMTable;
struct sLPPMTable_data *sLPPMTable_create(void);
struct sLPPMTable_data *sLPPMTable_duplicate(struct sLPPMTable_data *);
int sLPPMTable_destroy(struct sLPPMTable_data **);
int sLPPMTable_add(struct sLPPMTable_data *);
int sLPPMTable_del(struct sLPPMTable_data *);
void parse_sLPPMTable(const char *, char *);
SNMPCallback store_sLPPMTable;
void refresh_sLPPMTable(int);
FindVarMethod var_sLPConnectionTable;
struct sLPConnectionTable_data *sLPConnectionTable_create(void);
struct sLPConnectionTable_data *sLPConnectionTable_duplicate(struct sLPConnectionTable_data *);
int sLPConnectionTable_destroy(struct sLPConnectionTable_data **);
int sLPConnectionTable_add(struct sLPConnectionTable_data *);
int sLPConnectionTable_del(struct sLPConnectionTable_data *);
void parse_sLPConnectionTable(const char *, char *);
SNMPCallback store_sLPConnectionTable;
void refresh_sLPConnectionTable(int);
FindVarMethod var_sLPConnectionIVMOTable;
struct sLPConnectionIVMOTable_data *sLPConnectionIVMOTable_create(void);
struct sLPConnectionIVMOTable_data *sLPConnectionIVMOTable_duplicate(struct sLPConnectionIVMOTable_data *);
int sLPConnectionIVMOTable_destroy(struct sLPConnectionIVMOTable_data **);
int sLPConnectionIVMOTable_add(struct sLPConnectionIVMOTable_data *);
int sLPConnectionIVMOTable_del(struct sLPConnectionIVMOTable_data *);
void parse_sLPConnectionIVMOTable(const char *, char *);
SNMPCallback store_sLPConnectionIVMOTable;
void refresh_sLPConnectionIVMOTable(int);

WriteMethod write_lAPBDLElocalSapNames;
WriteMethod write_lAPBDLEoperationalState;
WriteMethod write_lAPBDLEproviderEntityNames;
WriteMethod write_lAPBDLEmT1Timer;
WriteMethod write_lAPBDLEmT3Timer;
WriteMethod write_lAPBDLEmW;
WriteMethod write_lAPBDLEmXSend;
WriteMethod write_lAPBDLEmXReceive;
WriteMethod write_lAPBDLEmT2Timer;
WriteMethod write_lAPBDLERowStatus;
WriteMethod write_dLSAPRowStatus;
WriteMethod write_sLPPMadministrativeState;
WriteMethod write_sLPPMRowStatus;
WriteMethod write_sLPConnectionUnderlyingConnectionNames;
WriteMethod write_sLPConnectionSupportedConnectionNames;
WriteMethod write_sLPConnectionInterfaceType;
WriteMethod write_sLPConnectionK;
WriteMethod write_sLPConnectionN1;
WriteMethod write_sLPConnectionN2;
WriteMethod write_sLPConnectionSequenceModulus;
WriteMethod write_sLPConnectionT1Timer;
WriteMethod write_sLPConnectionT2Timer;
WriteMethod write_sLPConnectionT3Timer;
WriteMethod write_sLPConnectionT4Timer;
WriteMethod write_sLPConnectionAdministrativeState;
WriteMethod write_sLPConnectionRowStatus;
WriteMethod write_sLPConnectionIVMOinterfaceType;
WriteMethod write_sLPConnectionIVMOk;
WriteMethod write_sLPConnectionIVMOn1;
WriteMethod write_sLPConnectionIVMOn2;
WriteMethod write_sLPConnectionIVMOsequenceModulus;
WriteMethod write_sLPConnectionIVMOt1Timer;
WriteMethod write_sLPConnectionIVMOt2Timer;
WriteMethod write_sLPConnectionIVMOt3Timer;
WriteMethod write_sLPConnectionIVMOt4Timer;
WriteMethod write_sLPConnectionIVMORowStatus;
WriteMethod write_sLPConnectionDefaultInterfaceType;
WriteMethod write_sLPConnectionDefaultK;
WriteMethod write_sLPConnectionDefaultN1;
WriteMethod write_sLPConnectionDefaultN2;
WriteMethod write_sLPConnectionDefaultSequenceModulus;
WriteMethod write_sLPConnectionDefaultT1Timer;
WriteMethod write_sLPConnectionDefaultT2Timer;
WriteMethod write_sLPConnectionDefaultT3Timer;
WriteMethod write_sLPConnectionDefaultT4Timer;
#endif				/* __LOCAL_LAPBMIB_H__ */
