/*****************************************************************************

 @(#) $Id$

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date$ by $Author$

 -----------------------------------------------------------------------------

 $Log$
 *****************************************************************************/

#ifndef __LOCAL_RTPSWOMMIB_H__
#define __LOCAL_RTPSWOMMIB_H__

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct rtpswOmMIB_data {
	uint rtpswOmMIB_request;
	struct counter64 rtpswOmCurrOctetsSent;	/* ReadOnly */
	struct counter64 rtpswOmCurrOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswOmCurrPacketsSent;	/* ReadOnly */
	struct counter64 rtpswOmCurrPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswOmCurrStunPacketsSent;	/* ReadOnly */
	struct counter64 rtpswOmCurrStunPacketsRecv;	/* ReadOnly */
	long rtpswOm5minValidIntervals;	/* ReadOnly */
	long rtpswOm15minValidIntervals;	/* ReadOnly */
	struct counter64 rtpswForwOmOctetsFor;	/* ReadOnly */
	struct counter64 rtpswForwOmOctetsRev;	/* ReadOnly */
	struct counter64 rtpswForwOmPacketsFor;	/* ReadOnly */
	struct counter64 rtpswForwOmPacketsRev;	/* ReadOnly */
	long rtpswForwOm5minValidIntervals;	/* ReadOnly */
	long rtpswForwOm15minValidIntervals;	/* ReadOnly */
};
struct rtpswOm5MinHistoryTable_data {
	uint rtpswOm5MinHistoryTable_request;
	uint rtpswOm5MinHistoryTable_refs;
	long rtpswOm5MinInterval;	/* NoAccess */
	struct counter64 rtpswOm5MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswOm5MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswOm5MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswOm5MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswOm5MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswOm5MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswOm15MinHistoryTable_data {
	uint rtpswOm15MinHistoryTable_request;
	uint rtpswOm15MinHistoryTable_refs;
	long rtpswOm15MinInterval;	/* NoAccess */
	struct counter64 rtpswOm15MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswOm15MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswOm15MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswOm15MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswOm15MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswOm15MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswInterfaceCurrentTable_data {
	uint rtpswInterfaceCurrentTable_request;
	uint rtpswInterfaceCurrentTable_refs;
	ulong rtpswInterfaceId;		/* NoAccess */
	struct counter64 rtpswIfOmOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfOmOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOmPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfOmPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOmStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfOmStunPktsRecv;	/* ReadOnly */
	long rtpswIfOm5minValidIntervals;	/* ReadOnly */
	long rtpswIfOm15minValidIntervals;	/* ReadOnly */
};
struct rtpswInterface5MinHistoryTable_data {
	uint rtpswInterface5MinHistoryTable_request;
	uint rtpswInterface5MinHistoryTable_refs;
	ulong rtpswInterfaceId;		/* NoAccess */
	long rtpswOm5MinInterval;	/* NoAccess */
	struct counter64 rtpswIfOm5MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm5MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOm5MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm5MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOm5MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm5MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswInterface15MinHistoryTable_data {
	uint rtpswInterface15MinHistoryTable_request;
	uint rtpswInterface15MinHistoryTable_refs;
	ulong rtpswInterfaceId;		/* NoAccess */
	long rtpswOm15MinInterval;	/* NoAccess */
	struct counter64 rtpswIfOm15MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm15MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOm15MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm15MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfOm15MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfOm15MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswIfAddrCurrentTable_data {
	uint rtpswIfAddrCurrentTable_request;
	uint rtpswIfAddrCurrentTable_refs;
	ulong rtpswIfAddrId;		/* NoAccess */
	struct counter64 rtpswIfAddrOmOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOmOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOmPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOmPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOmStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOmStunPktsRecv;	/* ReadOnly */
	long rtpswIfAddrOm5minValidIntervals;	/* ReadOnly */
	long rtpswIfAddrOm15minValidIntervals;	/* ReadOnly */
};
struct rtpswIfAddr5MinHistoryTable_data {
	uint rtpswIfAddr5MinHistoryTable_request;
	uint rtpswIfAddr5MinHistoryTable_refs;
	ulong rtpswIfAddrId;		/* NoAccess */
	long rtpswOm5MinInterval;	/* NoAccess */
	struct counter64 rtpswIfAddrOm5MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm5MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm5MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm5MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm5MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm5MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswIfAddr15MinHistoryTable_data {
	uint rtpswIfAddr15MinHistoryTable_request;
	uint rtpswIfAddr15MinHistoryTable_refs;
	ulong rtpswIfAddrId;		/* NoAccess */
	long rtpswOm15MinInterval;	/* NoAccess */
	struct counter64 rtpswIfAddrOm15MinOctetsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm15MinOctetsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm15MinPacketsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm15MinPacketsRecv;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm15MinStunPktsSent;	/* ReadOnly */
	struct counter64 rtpswIfAddrOm15MinStunPktsRecv;	/* ReadOnly */
};
struct rtpswForw5MinHistoryTable_data {
	uint rtpswForw5MinHistoryTable_request;
	uint rtpswForw5MinHistoryTable_refs;
	long rtpswOm5MinInterval;	/* NoAccess */
	struct counter64 rtpswForwOm5MinOctetsFor;	/* ReadOnly */
	struct counter64 rtpswForwOm5MinOctetsRev;	/* ReadOnly */
	struct counter64 rtpswForwOm5MinPacketsFor;	/* ReadOnly */
	struct counter64 rtpswForwOm5MinPacketsRev;	/* ReadOnly */
};
struct rtpswForw15MinHistoryTable_data {
	uint rtpswForw15MinHistoryTable_request;
	uint rtpswForw15MinHistoryTable_refs;
	long rtpswOm15MinInterval;	/* NoAccess */
	struct counter64 rtpswForwOm15MinOctetsFor;	/* ReadOnly */
	struct counter64 rtpswForwOm15MinOctetsRev;	/* ReadOnly */
	struct counter64 rtpswForwOm15MinPacketsFor;	/* ReadOnly */
	struct counter64 rtpswForwOm15MinPacketsRev;	/* ReadOnly */
};
struct rtpswOmTermPointCurrentTable_data {
	uint rtpswOmTermPointCurrentTable_request;
	uint rtpswOmTermPointCurrentTable_refs;
	ulong rtpswTermPointId;		/* NoAccess */
	long rtpswOmTpMediaAware;	/* ReadOnly */
	long rtpswOmRtpPacketsSent;	/* ReadOnly */
	long rtpswOmRtpPacketsRecv;	/* ReadOnly */
	long rtpswOmRtcpPacketsSent;	/* ReadOnly */
	long rtpswOmRtcpPacketsRecv;	/* ReadOnly */
	long rtpswOmStunPacketsSent;	/* ReadOnly */
	long rtpswOmStunPacketsRecv;	/* ReadOnly */
	long rtpswOmRtpOctetsSent;	/* ReadOnly */
	long rtpswOmRtpOctetsRecv;	/* ReadOnly */
	long rtpswOmRtpPacketsLost;	/* ReadOnly */
	long rtpswOmRtpJitter;		/* ReadOnly */
	long rtpswOmRtpDelay;		/* ReadOnly */
};
struct rtpswOmCallCurrentTable_data {
	uint rtpswOmCallCurrentTable_request;
	uint rtpswOmCallCurrentTable_refs;
	ulong rtpswCallId;		/* NoAccess */
	uint8_t *rtpswOmCallStartTime;	/* ReadOnly */
	size_t rtpswOmCallStartTimeLen;
	long rtpswOmIpOctetsCallerSent;	/* ReadOnly */
	long rtpswOmIpOctetsCallerRecv;	/* ReadOnly */
	long rtpswOmIpOctetsCalleeSent;	/* ReadOnly */
	long rtpswOmIpOctetsCalleeRecv;	/* ReadOnly */
	long rtpswOmIpPacketsCallerSent;	/* ReadOnly */
	long rtpswOmIpPacketsCallerRecv;	/* ReadOnly */
	long rtpswOmIpPacketsCalleeSent;	/* ReadOnly */
	long rtpswOmIpPacketsCalleeRecv;	/* ReadOnly */
	long rtpswOmRtpOctetsCallerSent;	/* ReadOnly */
	long rtpswOmRtpOctetsCallerRecv;	/* ReadOnly */
	long rtpswOmRtpOctetsCalleeSent;	/* ReadOnly */
	long rtpswOmRtpOctetsCalleeRecv;	/* ReadOnly */
	long rtpswOmRtpPacketsCallerSent;	/* ReadOnly */
	long rtpswOmRtpPacketsCallerRecv;	/* ReadOnly */
	long rtpswOmRtpPacketsCalleeSent;	/* ReadOnly */
	long rtpswOmRtpPacketsCalleeRecv;	/* ReadOnly */
	long rtpswOmRtcpPacketsCallerSent;	/* ReadOnly */
	long rtpswOmRtcpPacketsCallerRecv;	/* ReadOnly */
	long rtpswOmRtcpPacketsCalleeSent;	/* ReadOnly */
	long rtpswOmRtcpPacketsCalleeRecv;	/* ReadOnly */
	long rtpswOmRtpStunPcktsCallerSent;	/* ReadOnly */
	long rtpswOmRtpStunPcktsCallerRecv;	/* ReadOnly */
	long rtpswOmRtpStunPcktsCalleeSent;	/* ReadOnly */
	long rtpswOmRtpStunPcktsCalleeRecv;	/* ReadOnly */
};

/* storage declarations */
extern struct rtpswOmMIB_data *rtpswOmMIBStorage;
extern struct header_complex_index *rtpswOm5MinHistoryTableStorage;
extern struct header_complex_index *rtpswOm15MinHistoryTableStorage;
extern struct header_complex_index *rtpswInterfaceCurrentTableStorage;
extern struct header_complex_index *rtpswInterface5MinHistoryTableStorage;
extern struct header_complex_index *rtpswInterface15MinHistoryTableStorage;
extern struct header_complex_index *rtpswIfAddrCurrentTableStorage;
extern struct header_complex_index *rtpswIfAddr5MinHistoryTableStorage;
extern struct header_complex_index *rtpswIfAddr15MinHistoryTableStorage;
extern struct header_complex_index *rtpswForw5MinHistoryTableStorage;
extern struct header_complex_index *rtpswForw15MinHistoryTableStorage;
extern struct header_complex_index *rtpswOmTermPointCurrentTableStorage;
extern struct header_complex_index *rtpswOmCallCurrentTableStorage;

/* enum definitions from the covered mib sections */

#define RTPSWOMTPMEDIAAWARE_TRUE                 1
#define RTPSWOMTPMEDIAAWARE_FALSE                2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid rtpswOmMandatoryGroup_oid[11];
extern oid rtpswOmOptionsGroup_oid[11];
extern oid rtpswOmFullCompliance_oid[11];

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_rtpswOmMIB(void);
void deinit_rtpswOmMIB(void);
int term_rtpswOmMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_rtpswOmMIB;
void parse_rtpswOmMIB(const char *, char *);
SNMPCallback store_rtpswOmMIB;
void refresh_rtpswOmMIB(int);
FindVarMethod var_rtpswOm5MinHistoryTable;
struct rtpswOm5MinHistoryTable_data *rtpswOm5MinHistoryTable_create(void);
struct rtpswOm5MinHistoryTable_data *rtpswOm5MinHistoryTable_duplicate(struct rtpswOm5MinHistoryTable_data *);
int rtpswOm5MinHistoryTable_destroy(struct rtpswOm5MinHistoryTable_data **);
int rtpswOm5MinHistoryTable_add(struct rtpswOm5MinHistoryTable_data *);
int rtpswOm5MinHistoryTable_del(struct rtpswOm5MinHistoryTable_data *);
void parse_rtpswOm5MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswOm5MinHistoryTable;
void refresh_rtpswOm5MinHistoryTable(int);
FindVarMethod var_rtpswOm15MinHistoryTable;
struct rtpswOm15MinHistoryTable_data *rtpswOm15MinHistoryTable_create(void);
struct rtpswOm15MinHistoryTable_data *rtpswOm15MinHistoryTable_duplicate(struct rtpswOm15MinHistoryTable_data *);
int rtpswOm15MinHistoryTable_destroy(struct rtpswOm15MinHistoryTable_data **);
int rtpswOm15MinHistoryTable_add(struct rtpswOm15MinHistoryTable_data *);
int rtpswOm15MinHistoryTable_del(struct rtpswOm15MinHistoryTable_data *);
void parse_rtpswOm15MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswOm15MinHistoryTable;
void refresh_rtpswOm15MinHistoryTable(int);
FindVarMethod var_rtpswInterfaceCurrentTable;
struct rtpswInterfaceCurrentTable_data *rtpswInterfaceCurrentTable_create(void);
struct rtpswInterfaceCurrentTable_data *rtpswInterfaceCurrentTable_duplicate(struct rtpswInterfaceCurrentTable_data *);
int rtpswInterfaceCurrentTable_destroy(struct rtpswInterfaceCurrentTable_data **);
int rtpswInterfaceCurrentTable_add(struct rtpswInterfaceCurrentTable_data *);
int rtpswInterfaceCurrentTable_del(struct rtpswInterfaceCurrentTable_data *);
void parse_rtpswInterfaceCurrentTable(const char *, char *);
SNMPCallback store_rtpswInterfaceCurrentTable;
void refresh_rtpswInterfaceCurrentTable(int);
FindVarMethod var_rtpswInterface5MinHistoryTable;
struct rtpswInterface5MinHistoryTable_data *rtpswInterface5MinHistoryTable_create(void);
struct rtpswInterface5MinHistoryTable_data *rtpswInterface5MinHistoryTable_duplicate(struct rtpswInterface5MinHistoryTable_data *);
int rtpswInterface5MinHistoryTable_destroy(struct rtpswInterface5MinHistoryTable_data **);
int rtpswInterface5MinHistoryTable_add(struct rtpswInterface5MinHistoryTable_data *);
int rtpswInterface5MinHistoryTable_del(struct rtpswInterface5MinHistoryTable_data *);
void parse_rtpswInterface5MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswInterface5MinHistoryTable;
void refresh_rtpswInterface5MinHistoryTable(int);
FindVarMethod var_rtpswInterface15MinHistoryTable;
struct rtpswInterface15MinHistoryTable_data *rtpswInterface15MinHistoryTable_create(void);
struct rtpswInterface15MinHistoryTable_data *rtpswInterface15MinHistoryTable_duplicate(struct rtpswInterface15MinHistoryTable_data *);
int rtpswInterface15MinHistoryTable_destroy(struct rtpswInterface15MinHistoryTable_data **);
int rtpswInterface15MinHistoryTable_add(struct rtpswInterface15MinHistoryTable_data *);
int rtpswInterface15MinHistoryTable_del(struct rtpswInterface15MinHistoryTable_data *);
void parse_rtpswInterface15MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswInterface15MinHistoryTable;
void refresh_rtpswInterface15MinHistoryTable(int);
FindVarMethod var_rtpswIfAddrCurrentTable;
struct rtpswIfAddrCurrentTable_data *rtpswIfAddrCurrentTable_create(void);
struct rtpswIfAddrCurrentTable_data *rtpswIfAddrCurrentTable_duplicate(struct rtpswIfAddrCurrentTable_data *);
int rtpswIfAddrCurrentTable_destroy(struct rtpswIfAddrCurrentTable_data **);
int rtpswIfAddrCurrentTable_add(struct rtpswIfAddrCurrentTable_data *);
int rtpswIfAddrCurrentTable_del(struct rtpswIfAddrCurrentTable_data *);
void parse_rtpswIfAddrCurrentTable(const char *, char *);
SNMPCallback store_rtpswIfAddrCurrentTable;
void refresh_rtpswIfAddrCurrentTable(int);
FindVarMethod var_rtpswIfAddr5MinHistoryTable;
struct rtpswIfAddr5MinHistoryTable_data *rtpswIfAddr5MinHistoryTable_create(void);
struct rtpswIfAddr5MinHistoryTable_data *rtpswIfAddr5MinHistoryTable_duplicate(struct rtpswIfAddr5MinHistoryTable_data *);
int rtpswIfAddr5MinHistoryTable_destroy(struct rtpswIfAddr5MinHistoryTable_data **);
int rtpswIfAddr5MinHistoryTable_add(struct rtpswIfAddr5MinHistoryTable_data *);
int rtpswIfAddr5MinHistoryTable_del(struct rtpswIfAddr5MinHistoryTable_data *);
void parse_rtpswIfAddr5MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswIfAddr5MinHistoryTable;
void refresh_rtpswIfAddr5MinHistoryTable(int);
FindVarMethod var_rtpswIfAddr15MinHistoryTable;
struct rtpswIfAddr15MinHistoryTable_data *rtpswIfAddr15MinHistoryTable_create(void);
struct rtpswIfAddr15MinHistoryTable_data *rtpswIfAddr15MinHistoryTable_duplicate(struct rtpswIfAddr15MinHistoryTable_data *);
int rtpswIfAddr15MinHistoryTable_destroy(struct rtpswIfAddr15MinHistoryTable_data **);
int rtpswIfAddr15MinHistoryTable_add(struct rtpswIfAddr15MinHistoryTable_data *);
int rtpswIfAddr15MinHistoryTable_del(struct rtpswIfAddr15MinHistoryTable_data *);
void parse_rtpswIfAddr15MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswIfAddr15MinHistoryTable;
void refresh_rtpswIfAddr15MinHistoryTable(int);
FindVarMethod var_rtpswForw5MinHistoryTable;
struct rtpswForw5MinHistoryTable_data *rtpswForw5MinHistoryTable_create(void);
struct rtpswForw5MinHistoryTable_data *rtpswForw5MinHistoryTable_duplicate(struct rtpswForw5MinHistoryTable_data *);
int rtpswForw5MinHistoryTable_destroy(struct rtpswForw5MinHistoryTable_data **);
int rtpswForw5MinHistoryTable_add(struct rtpswForw5MinHistoryTable_data *);
int rtpswForw5MinHistoryTable_del(struct rtpswForw5MinHistoryTable_data *);
void parse_rtpswForw5MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswForw5MinHistoryTable;
void refresh_rtpswForw5MinHistoryTable(int);
FindVarMethod var_rtpswForw15MinHistoryTable;
struct rtpswForw15MinHistoryTable_data *rtpswForw15MinHistoryTable_create(void);
struct rtpswForw15MinHistoryTable_data *rtpswForw15MinHistoryTable_duplicate(struct rtpswForw15MinHistoryTable_data *);
int rtpswForw15MinHistoryTable_destroy(struct rtpswForw15MinHistoryTable_data **);
int rtpswForw15MinHistoryTable_add(struct rtpswForw15MinHistoryTable_data *);
int rtpswForw15MinHistoryTable_del(struct rtpswForw15MinHistoryTable_data *);
void parse_rtpswForw15MinHistoryTable(const char *, char *);
SNMPCallback store_rtpswForw15MinHistoryTable;
void refresh_rtpswForw15MinHistoryTable(int);
FindVarMethod var_rtpswOmTermPointCurrentTable;
struct rtpswOmTermPointCurrentTable_data *rtpswOmTermPointCurrentTable_create(void);
struct rtpswOmTermPointCurrentTable_data *rtpswOmTermPointCurrentTable_duplicate(struct rtpswOmTermPointCurrentTable_data *);
int rtpswOmTermPointCurrentTable_destroy(struct rtpswOmTermPointCurrentTable_data **);
int rtpswOmTermPointCurrentTable_add(struct rtpswOmTermPointCurrentTable_data *);
int rtpswOmTermPointCurrentTable_del(struct rtpswOmTermPointCurrentTable_data *);
void parse_rtpswOmTermPointCurrentTable(const char *, char *);
SNMPCallback store_rtpswOmTermPointCurrentTable;
void refresh_rtpswOmTermPointCurrentTable(int);
FindVarMethod var_rtpswOmCallCurrentTable;
struct rtpswOmCallCurrentTable_data *rtpswOmCallCurrentTable_create(void);
struct rtpswOmCallCurrentTable_data *rtpswOmCallCurrentTable_duplicate(struct rtpswOmCallCurrentTable_data *);
int rtpswOmCallCurrentTable_destroy(struct rtpswOmCallCurrentTable_data **);
int rtpswOmCallCurrentTable_add(struct rtpswOmCallCurrentTable_data *);
int rtpswOmCallCurrentTable_del(struct rtpswOmCallCurrentTable_data *);
void parse_rtpswOmCallCurrentTable(const char *, char *);
SNMPCallback store_rtpswOmCallCurrentTable;
void refresh_rtpswOmCallCurrentTable(int);

#endif				/* __LOCAL_RTPSWOMMIB_H__ */
