/*
 @(#) $RCSfile$ $Name$($Revision$) $Date$ <p>
 
 Copyright &copy; 2008-2009  Monavacon Limited <a href="http://www.monavacon.com/">&lt;http://www.monavacon.com/&gt;</a>. <br>
 Copyright &copy; 2001-2008  OpenSS7 Corporation <a href="http://www.openss7.com/">&lt;http://www.openss7.com/&gt;</a>. <br>
 Copyright &copy; 1997-2001  Brian F. G. Bidulock <a href="mailto:bidulock@openss7.org">&lt;bidulock@openss7.org&gt;</a>. <p>
 
 All Rights Reserved. <p>
 
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation, version 3 of the license. <p>
 
 This program is distributed in the hope that it will be useful, but <b>WITHOUT
 ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b>
 or <b>FITNESS FOR A PARTICULAR PURPOSE</b>.  See the GNU Affero General Public
 License for more details. <p>
 
 You should have received a copy of the GNU Affero General Public License along
 with this program.  If not, see
 <a href="http://www.gnu.org/licenses/">&lt;http://www.gnu.org/licenses/&gt</a>,
 or write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA. <p>
 
 <em>U.S. GOVERNMENT RESTRICTED RIGHTS</em>.  If you are licensing this
 Software on behalf of the U.S. Government ("Government"), the following
 provisions apply to you.  If the Software is supplied by the Department of
 Defense ("DoD"), it is classified as "Commercial Computer Software" under
 paragraph 252.227-7014 of the DoD Supplement to the Federal Acquisition
 Regulations ("DFARS") (or any successor regulations) and the Government is
 acquiring only the license rights granted herein (the license rights
 customarily provided to non-Government users).  If the Software is supplied to
 any unit or agency of the Government other than DoD, it is classified as
 "Restricted Computer Software" and the Government's rights in the Software are
 defined in paragraph 52.227-19 of the Federal Acquisition Regulations ("FAR")
 (or any successor regulations) or, in the cases of NASA, in paragraph
 18.52.227-86 of the NASA Supplement to the FAR (or any successor regulations). <p>
 
 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See
 <a href="http://www.openss7.com/">http://www.openss7.com/</a> <p>
 
 Last Modified $Date$ by $Author$
 */

package javax.sip.header;

import javax.sip.*;

/**
    The From header field indicates the logical identity of the initiator of the request, possibly
    the user's address-of-record. This may be different from the initiator of the dialog. Requests
    sent by the callee to the caller use the callee's address in the From header field. <p> Like the
    To header field, it contains a URI and optionally a display name, encapsulated in a Address. It
    is used by SIP elements to determine which processing rules to apply to a request (for example,
    automatic call rejection). As such, it is very important that the From URI not contain IP
    addresses or the FQDN of the host on which the UA is running, since these are not logical names.
    <p> The From header field allows for a display name. A UAC SHOULD use the display name
    "Anonymous", along with a syntactically correct, but otherwise meaningless URI (like
    sip:thisis@anonymous.invalid), if the identity of the client is to remain hidden. <p> Usually,
    the value that populates the From header field in requests generated by a particular UA is
    pre-provisioned by the user or by the administrators of the user's local domain. If a particular
    UA is used by multiple users, it might have switchable profiles that include a URI corresponding
    to the identity of the profiled user. Recipients of requests can authenticate the originator of
    a request in order to ascertain that they are who their From header field claims they are. <p>
    Two From header fields are equivalent if their URIs match, and their parameters match. Extension
    parameters in one header field, not present in the other are ignored for the purposes of
    comparison. This means that the display name and presence or absence of angle brackets do not
    affect matching. <ul> <li>The "Tag" parameter - is used in the To and From header fields of SIP
    messages. It serves as a general mechanism to identify a dialog, which is the combination of the
    Call-ID along with two tags, one from each participant in the dialog. When a User Agent sends a
    request outside of a dialog, it contains a From tag only, providing "half" of the dialog ID. The
    dialog is completed from the response(s), each of which contributes the second half in the To
    header field. When a tag is generated by a User Agent for insertion into a request or response,
    it MUST be globally unique and cryptographically random with at least 32 bits of randomness.
    Besides the requirement for global uniqueness, the algorithm for generating a tag is
    implementation specific. Tags are helpful in fault tolerant systems, where a dialog is to be
    recovered on an alternate server after a failure. A UAS can select the tag in such a way that a
    backup can recognize a request as part of a dialog on the failed server, and therefore determine
    that it should attempt to recover the dialog and any other state associated with it. </ul> For
    Example:<br><code> From: "Bob" sips:bob@biloxi.com ;tag=a48s<br> From:
    sip:+12125551212@phone2net.com;tag=887s<br> From: Anonymous
    sip:c8oqz84zk7z@privacy.org;tag=hyh8</code>
    @version 1.2.2
    @author Monavacon Limited
  */
public interface FromHeader extends HeaderAddress, Parameters, Header {
    /**
        Name of FromHeader.
      */
    static final java.lang.String NAME = "From";
    /**
        Sets the tag parameter of the FromHeader. The tag in the From field of a request identifies
        the peer of the dialog. When a UA sends a request outside of a dialog, it contains a From
        tag only, providing "half" of the dialog Identifier. <p> The From Header MUST contain a new
        "tag" parameter, chosen by the UAC applicaton. Once the initial From "tag" is assigned it
        should not be manipulated by the application. That is on the client side for outbound
        requests the application is responsible for Tag assigmennment, after dialog establishment
        the stack will take care of Tag assignment.
        @param tag The new tag of the FromHeader.
        @exception java.text.ParseException Thrown when an error was found while parsing the Tag
        value.
      */
    void setTag(java.lang.String tag)
        throws java.text.ParseException;
    /**
        Gets the tag of FromHeader. The Tag parameter identified the Peer of the dialogue and must
        always be present.
        @return The tag parameter of the FromHeader.
      */
    java.lang.String getTag();
    /**
        Compare this FromHeader for equality with another. This method overrides the equals method
        in javax.sip.Header. This method specifies object equality as outlined by RFC3261. Two From
        header fields are equivalent if their URIs match, and their parameters match. Extension
        parameters in one header field, not present in the other are ignored for the purposes of
        comparison. This means that the display name and presence or absence of angle brackets do
        not affect matching. When comparing header fields, field names are always case-insensitive.
        Unless otherwise stated in the definition of a particular header field, field values,
        parameter names, and parameter values are case-insensitive. Tokens are always
        case-insensitive. Unless specified otherwise, values expressed as quoted strings are
        case-sensitive.
        @param obj The object to which to compare this FromHeader.
        @return True if obj is an instance of this class representing the same FromHeader as this,
        false otherwise.
        @since v1.2
      */
    boolean equals(java.lang.Object obj);
}

// vim: sw=4 et tw=72 com=srO\:/**,mb\:*,ex\:*/,srO\:/*,mb\:*,ex\:*/,b\:TRANS,\://,b\:#,\:%,\:XCOMM,n\:>,fb\:-
