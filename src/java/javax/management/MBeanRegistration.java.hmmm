/*
 @(#) $RCSfile$ $Name$($Revision$) $Date$ <p>
 
 Copyright &copy; 2008-2009  Monavacon Limited <a href="http://www.monavacon.com/">&lt;http://www.monavacon.com/&gt;</a>. <br>
 Copyright &copy; 2001-2008  OpenSS7 Corporation <a href="http://www.openss7.com/">&lt;http://www.openss7.com/&gt;</a>. <br>
 Copyright &copy; 1997-2001  Brian F. G. Bidulock <a href="mailto:bidulock@openss7.org">&lt;bidulock@openss7.org&gt;</a>. <p>
 
 All Rights Reserved. <p>
 
 This program is free software: you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation, version 3 of the license. <p>
 
 This program is distributed in the hope that it will be useful, but <b>WITHOUT
 ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b>
 or <b>FITNESS FOR A PARTICULAR PURPOSE</b>.  See the GNU Affero General Public
 License for more details. <p>
 
 You should have received a copy of the GNU Affero General Public License along
 with this program.  If not, see
 <a href="http://www.gnu.org/licenses/">&lt;http://www.gnu.org/licenses/&gt</a>,
 or write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA. <p>
 
 <em>U.S. GOVERNMENT RESTRICTED RIGHTS</em>.  If you are licensing this
 Software on behalf of the U.S. Government ("Government"), the following
 provisions apply to you.  If the Software is supplied by the Department of
 Defense ("DoD"), it is classified as "Commercial Computer Software" under
 paragraph 252.227-7014 of the DoD Supplement to the Federal Acquisition
 Regulations ("DFARS") (or any successor regulations) and the Government is
 acquiring only the license rights granted herein (the license rights
 customarily provided to non-Government users).  If the Software is supplied to
 any unit or agency of the Government other than DoD, it is classified as
 "Restricted Computer Software" and the Government's rights in the Software are
 defined in paragraph 52.227-19 of the Federal Acquisition Regulations ("FAR")
 (or any successor regulations) or, in the cases of NASA, in paragraph
 18.52.227-86 of the NASA Supplement to the FAR (or any successor regulations). <p>
 
 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See
 <a href="http://www.openss7.com/">http://www.openss7.com/</a> <p>
 
 Last Modified $Date$ by $Author$
 */

package javax.management;

/**
  * Can be implemented by an MBean in order to carry out operations
  * before and after being registered or unregistered from the MBean
  * Server. An MBean can also implement this interface in order to get a
  * reference to the MBean Server and/or its name within that MBean
  * Server.
  *
  * <h4>Resource injection</h4> <p>
  *
  * As an alternative to implementing MBeanRegistration, if all that is
  * needed is the MBean Server or ObjectName then an MBean can use
  * resource injection. <p>
  *
  * If a field in the MBean object has type ObjectName and has the
  * @Resource annotation, then the ObjectName under which the MBean is
  * registered is assigned to that field during registration. Likewise,
  * if a field has type MBeanServer and the @Resource annotation, then
  * it will be set to the MBeanServer in which the MBean is registered.
  * <p>
  *
  * For example: <p>
  *
  * <code>
  * public Configuration implements ConfigurationMBean { <br>
  *     @Resource <br>
  *     private volatile MBeanServer mbeanServer; <br>
  *     @Resource <br>
  *     private volatile ObjectName objectName; <br>
  *     ... <br>
  *     void unregisterSelf() throws Exception { <br>
  *         mbeanServer.unregisterMBean(objectName); <br>
  *     } <br>
  * }<br></code><p>
  *
  * Resource injection can also be used on fields of type
  * SendNotification to simplify notification sending. Such a field will
  * get a reference to an object of type SendNotification when the MBean
  * is registered, and it can use this reference to send notifications.
  * For example: <p>
  *
  * <code>
  * public Configuration implements ConfigurationMBean { <br>
  *     @Resource <br>
  *     private volatile SendNotification sender; <br>
  *     ... <br>
  *     private void updated() { <br>
  *         Notification n = new Notification(...); <br>
  *         sender.sendNotification(n); <br>
  *     } <br>
  * } <br></code><p>
  *
  * A field to be injected must not be static. It is recommended that
  * such fields be declared volatile. <p>
  *
  * It is also possible to use the @Resource annotation on methods. Such
  * a method must have a void return type and a single argument of the
  * appropriate type, for example ObjectName. <p>
  *
  * Any number of fields and methods may have the @Resource annotation.
  * All fields and methods with type ObjectName (for example) will
  * receive the same ObjectName value. <p>
  *
  * Resource injection is available for all types of MBeans, not just
  * Standard MBeans. <p>
  *
  * Resource injection happens after the preRegister method is called
  * (if any), and before the MBean is actually registered in the MBean
  * Server.  If a @Resource method throws an exception, the effect is
  * the same as if preRegister had thrown the exception. In particular
  * it will prevent the MBean from being registered. <p>
  *
  * Resource injection can be used on a field or method where the type
  * is a parent of the injected type, if the injected type is explicitly
  * specified in the @Resource annotation. For example: <p>
  *
  * <code>
  * @Resource(type = MBeanServer.class) <br>
  * private volatile MBeanServerConnection mbsc; <br></code><p>
  *
  * Formally, suppose R is the type in the @Resource annotation and T is
  * the type of the method parameter or field. Then one of R and T must
  * be a subtype of the other (or they must be the same type). Injection
  * happens if this subtype is MBeanServer, ObjectName, or
  * SendNotification. Otherwise the @Resource annotation is ignored.
  * <p>
  *
  * Resource injection in MBeans is new in version 2.0 of the JMX API.
  *
  * @since 1.5
  * @author Monavacon Limited
  * @version 1.2.2
  */
public interface MBeanRegistration { 
    /**
      * Allows the MBean to perform any operations it needs before being
      * registered in the MBean Server.
      * If the name of the MBean is not specified, the MBean can provide
      * a name for its registration. If any exception is raised, the
      * MBean will not be registered in the MBean Server.
      * @param server
      * The MBean Server in which the MBean will be registered.
      * @param name
      * The object name of the MBean. This name is null if the name
      * parameter to one of the createMBean or registerMBean methods in
      * the MBeanServer interface is null. In that case, this method
      * must return a non-null ObjectName for the new MBean.
      * @return
      * The name under which the MBean is to be registered. This value
      * must not be null. If the name parameter is not null, it will
      * usually but not necessarily be the returned value.
      * @exception Exception
      * This exception will be caught by the MBean Server and re-thrown
      * as an MBeanRegistrationException.
      */
    ObjectName preRegister(MBeanServer server, ObjectName name)
        throws Exception;
    /**
      * Allows the MBean to perform any operations needed after having
      * been registered in the MBean server or after the registration
      * has failed.
      * @param registrationDone
      * Indicates whether or not the MBean has been successfully
      * registered in the MBean server. The value false means that the
      * registration phase has failed.
      */
    void postRegister(Boolean registrationDone);
    /**
      * Allows the MBean to perform any operations it needs before being
      * unregistered by the MBean server.
      * @exception Exception
      * This exception will be caught by the MBean server and re-thrown
      * as an MBeanRegistrationException.
      */
    void preDeregister() throws Exception;
    /**
      * Allows the MBean to perform any operations needed after having
      * been unregistered in the MBean server.
      */
    void postDeregister();
}

// vim: sw=4 et tw=72 com=srO\:/**,mb\:*,ex\:*/,srO\:/*,mb\:*,ex\:*/,b\:TRANS,\://,b\:#,\:%,\:XCOMM,n\:>,fb\:-

