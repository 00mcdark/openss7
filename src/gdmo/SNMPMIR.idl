// File: SNMPMIR.idl
#ifndef _SNMPMIR_IDL_
#define _SNMPMIR_IDL_
#include <orb.idl>
#include <ASN1Types.idl>
#pragma prefix jidm.org
module SNMPMIR {
// Snmpv1GenericTrapId defines the identfiers for generic trap
// types in SNMPv1.
enum Snmpv1GenericTrapId {
TRAP_COLDSTART, TRAP_WARMSTART, TRAP_LINKDOWN, TRAP_LINKUP,
TRAP_AUTHFAIL, TRAP_EGPNEIGHBORLOSS, TRAP_ENTERPRISESPECIFIC
};
// GENERIC_TRAP_ENTERPRISE_OID defines the enterprise OID for
// generic traps.
const ASN1_ObjectIdentifier GENERIC_TRAP_ENTERPRISE_OID = 1.3.6.1.4.1.3.1.1;
// SmiAccessMode defines the enumerated values of the SMI based
// acces - mode defined for a specific variables.
enum SmiAccessMode {
read_only, read_write, read_create, write_only, inaccessible
};
// Basic and Application specific SMI types.
enum SmiValueType {
smi_null_value, smi_integer_value, smi_string_value, smi_objectID_value,
smi_bit_value, smi_ipAddress_value, smi_counter_value, smi_gauge_value,
smi_timeticks_value, smi_arbitary_value, smi_nsapAddress_value,
smi_big_counter_value, smi_unsigned_integer_value, smi_unknown_type
};
typedef CORBA::ScopedName ScopedName;
typedef sequence < ScopedName > ScopedNameList;
typedef sequence < string > VarNameList;
typedef sequence < string > ModuleNameList;
typedef sequence < ASN1_ObjectIdentifier > OIDList;
interface OidRepository {
ScopedName get_scoped_name ( in ASN1_ObjectIdentifier in_oid );
string get_name ( in ASN1_ObjectIdentifier in_oid );
ASN1_ObjectIdentifier get_oid ( in ScopedName in_scoped_name );
ASN1_ObjectIdentifier get_var_oid (
in ScopedName iface_scoped_name,
in string var_name
);
string get_textual_obj_id ( in ASN1_ObjectIdentifier obj_id );
void split_var_object_id (
in ASN1_ObjectIdentifier var_obj_id,
out ASN1_ObjectIdentifier var_oid,
out ASN1_ObjectIdentifier obj_index
);
ASN1_ObjectIdentifier get_next_oid ( in ASN1_ObjectIdentifier oid );
ScopedName get_next_scoped_name ( in ScopedName scoped_name );
ScopedName get_next_entry_type ( in ScopedName scoped_name );
};
interface VariableDef : CORBA::AttributeDef {
readonly attribute ASN1_ObjectIdentifier oid;
readonly attribute SmiValueType smi_type;
readonly attribute SmiAccessMode smi_access_mode;
readonly attribute any default_value;
};
typedef sequence < VariableDef > VariableDefList;
interface SmiEntryDef : CORBA::InterfaceDef {
readonly attribute ASN1_ObjectIdentifier oid;
readonly attribute unsigned long total_no_of_variables;
readonly attribute VariableDefList var_def_list;
readonly attribute VarNameList var_name_list;
readonly attribute ScopedNameList var_scoped_name_list;
readonly attribute OIDList var_oid_list;
readonly attribute VarNameList index_var_names;
readonly attribute ScopedName next_group_or_table;
VariableDef lookup_variable( in string var_name );
};
typedef sequence < SmiEntryDef > SmiEntryDefList;
interface GroupDef : SmiEntryDef {
readonly attribute SmiEntryDefList table_entry_list;
};
typedef sequence < GroupDef > GroupDefList;
interface ModuleDef : CORBA::ModuleDef {
readonly attribute GroupDefList smi_group_def_list;
readonly attribute SmiEntryDefList smi_entry_def_list;
readonly attribute CORBA::InterfaceDef push_notification_def;
readonly attribute CORBA::InterfaceDef pull_notification_def;
readonly attribute CORBA::InterfaceDef default_value_def;
SmiEntryDef lookup_smi_entry( in string smi_entry_name );
};
typedef sequence < ModuleDef > ModuleDefList;
interface Repository : CORBA::Repository, OidRepository {
readonly attribute ModuleNameList module_name_list;
readonly attribute ModuleDefList module_def_list;
boolean is_smi_module( in CORBA::Identifier module_name );
ModuleDef lookup_smi_module( in string a_module_name );
SmiEntryDef lookup_smi_entry( in ScopedName entry_scoped_name );
ScopedNameList get_entry_var_list( in ScopedName entry_scoped_name );
ScopedNameList get_entry_index_var_list( in ScopedName entry_scoped_name );
any get_var_default_value( in ScopedName var_scoped_name );
string get_generic_trap_desc( in ASN1_Integer trap_type );
};
};
#endif /* _SNMPMIR_IDL_ */
