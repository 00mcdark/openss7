#!/usr/bin/perl -w
# =============================================================================
#
# @(#) $RCSfile$ $Name$($Revision$) $Date$
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date$ by $Author$
#
# =============================================================================

use Tk;
use Tk::HList;
use Tk::Adjuster;
use Tk::NoteBook;
use Tk::ROText;
use Tk::NumEntry;
use Tk::Balloon;
use Tk::Xrm;
use Tk::Pane;
use Tk::Dialog;
use Tk::DialogBox;

use Data::Dumper;

use SNMP;

$\ = "\n";

my $program = $0; $program =~ s/^.*\///;
my $ident = '$RCSfile: streams-manager,v $ $Name:  $($Revision: 0.9.2.3 $) $Date: 2009/01/22 09:02:31 $';
my $version = '$Revision: 0.9.2.3 $';
my $date = '$Date: 2009/01/22 09:02:31 $';
my $title = 'STREAMS SNMP Manager';

my $Title = <<EOF;
Linux Fast-STREAMS
$title
$version, $date
EOF

$Title =~ s/\n*$//;
$Title =~ s/^\n*//;

my $Version = <<EOF;
Version $version
$ident
Copyright (c) 2001-2008  OpenSS7 Corporation.  All Rights Reserved.
Distributed under Affero GPL Version 3, included here by reference.
See `$program --copying' for copying permissions.
EOF

$Version =~ s/\n*$//;
$Version =~ s/^\n*//;

my $Copying = <<EOF;
________________________________________________________________________________

$ident
________________________________________________________________________________

Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock\@openss7.org>

All Rights Reserved.
________________________________________________________________________________

This program is free software; you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation; version 3 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License along with this program.   If not, see <http://www.gnu.org/licenses/>, or write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
________________________________________________________________________________

U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf of the U.S. Government ("Government"), the following provisions apply to you. If the Software is supplied by the Department of Defense ("DoD"), it is classified as "Commercial Computer Software" under paragraph 252.227-7014 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any successor regulations) and the Government is acquiring only the license rights granted herein (the license rights customarily provided to non-Government users). If the Software is supplied to any unit or agency of the Government other than DoD, it is classified as "Restricted Computer Software" and the Government's rights in the Software are defined in paragraph 52.227-19 of the Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR (or any successor regulations).
________________________________________________________________________________

Commercial licensing and support of this software is available from OpenSS7 Corporation at a fee.  See http://www.openss7.com/
________________________________________________________________________________
EOF

$Copying =~ s/\n*$//;
$Copying =~ s/^\n*//;

my $CopyingMono = <<EOF;
--------------------------------------------------------------------------------
$ident
--------------------------------------------------------------------------------
Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock\@openss7.org>

All Rights Reserved.
--------------------------------------------------------------------------------
This program is free software; you can  redistribute  it and/or modify  it under
the terms  of the  GNU Affero General Public License  as  published by the  Free
Software Foundation; version 3 of the License.

This program is distributed in the hope that it will  be useful, but WITHOUT ANY
WARRANTY; without even  the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.

You should have received a copy of the  GNU Affero General Public License  along
with this program.   If not,  see  <http://www.gnu.org/licenses/>,  or  write to
the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--------------------------------------------------------------------------------
U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf
of the U.S. Government ("Government"), the following provisions apply to you. If
the Software is supplied by the  Department of Defense ("DoD"), it is classified
as "Commercial  Computer  Software"  under  paragraph  252.227-7014  of the  DoD
Supplement  to the  Federal Acquisition Regulations  ("DFARS") (or any successor
regulations) and the  Government  is acquiring  only the  license rights granted
herein (the license rights customarily provided to non-Government users). If the
Software is supplied to any unit or agency of the Government  other than DoD, it
is  classified as  "Restricted Computer Software" and the Government's rights in
the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition
Regulations ("FAR")  (or any successor regulations) or, in the cases of NASA, in
paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor
regulations).
--------------------------------------------------------------------------------
Commercial  licensing  and  support of this  software is  available from OpenSS7
Corporation at a fee.  See http://www.openss7.com/
--------------------------------------------------------------------------------
EOF

$CopyingMono =~ s/\n*$//;
$CopyingMono =~ s/^\n*//;

package Mysession;
use strict;

my $options = {
    children=>[
	{
	    label=>'UseSprintValue',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.22',
	    type=>'TruthValue',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		false=>2,
		true=>1,
	    },
	    defaultValue=>'false',
	    textualConvention=>'TruthValue',
	    TCDescription=><<EOF,
Describes a boolean truth value.
EOF
	    description=><<EOF,
Defaults the the value of SNMP::use_sprint_value at time of 
session creation.  Set to true to have return values for 'get' 
and 'getnext' methods formatted with the library's snprintf_value 
function.  This will result in certain data types being returned 
in non-cannonical format.  Note: values returned with this 
optoin set may not be appropriate for 'set' operations (see 
discussion of value formats in <vars> description section of the 
SNMP(3pm) manual page).
EOF
	},
	{
	    label=>'UseLongNames',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.21',
	    type=>'TruthValue',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		false=>2,
		true=>1,
	    },
	    defaultValue=>'false',
	    textualConvention=>'TruthValue',
	    TCDescription=><<EOF,
Describes a boolean truth value.
EOF
	    description=><<EOF,
Defaults the the value of SNMP::use_long_names at time of 
session creation.  Set to true to have <tags> for 'getnext' 
methods generated preferring longer Mib name convention (e.g., 
system.sysDescr vs. just sysDescr).
EOF
	},
	{
	    label=>'privLocalizedKey',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.20',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Directly specified SNMPv3 USM privacy localized user key.  When
specified, this key value will be used instead of deriving the
key from the PrivPass field.  When null, the PrivPass field will
be used to generate a privacy localized user key.
EOF
	},
	{
	    label=>'authLocalizedKey',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.19',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Directly specified SNMPv3 USM authentication localized user key.
When specified, this key value will be used instead of deriving
the key from the AuthPass field.  When null, the AuthPass field
will be used to generate a privacy localized user key.
EOF
	},
	{
	    label=>'privMasterKey',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.18',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Directly specified SNMPv3 USM privacy master user key.  When
specified, this key value will be used instead of deriving the
key from the PrivPass field.  When null, the PrivPass field will
be used to generate a privacy localized user key.
EOF
	},
	{
	    label=>'authMasterKey',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.17',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Directly specified SNMPv3 USM authentication master user key.
When specified, this key value will be used instead of deriving
the key from the AuthPass field.  When null, the AuthPass field
will be used to generate a privacy localized user key.
EOF
	},
	{
	    label=>'PrivPass',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.16',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Specifies the SNMPv3 USM privacy passphrase.  When specified,
the passphrase will be used to generate localized and master
privacy keys.  When null, or when SNMPv3 is not set, this field
is ignored.
EOF
	},
	{
	    label=>'PrivProto',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.15',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		AES=>2,
		DES=>1,
	    },
	    defaultValue=>'DES',
	    description=><<EOF,
Specifies the encryption algorithm to use for privacy with the
SNMP agent for SNMPv3 operation.  Choices include DES and AES
encryption algorithms.  The default is DES.
EOF
	},
	{
	    label=>'AuthPass',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.14',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    description=><<EOF,
Specifies the SNMPv3 USM authentication passphrase.  When
specified, the passphrase will be used to generate localized and
master authentication keys.  When null, or when SNMPv3 is not
set, this field is ignored.
EOF
	},
	{
	    label=>'AuthProto',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.13',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		SHA1=>2,
		MD5=>1,
	    },
	    defaultValue=>'MD5',
	    description=><<EOF,
Specifies the HMAC algorithm to use for authentication to the
SNMP agent for SNMPv3 operation.  Choices include MD5 and SHA1
signing algorithms.  The default is MD5.  MD5 experiences better
performance in little-endian machines and SHA1 experiences
better performance on big-endian machines.
EOF
	},
	{
	    label=>'SecEngineId',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.10',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	},
	{
	    label=>'SecLevel',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.9',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		authPriv=>3,
		authNoPriv=>2,
		noAuthNoPriv=>1,
	    },
	    defaultValue=>'noAuthNoPriv',
	},
	{
	    label=>'SecName',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.8',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    defaultValue=>'inital',
	},
	{
	    label=>'ContextEngineId',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.11',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	},
	{
	    label=>'Context',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.12',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	},
	{
	    label=>'RetryNoSuch',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.7',
	    type=>'TruthValue',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		'false'=>0,
		'true'=>1,
	    },
	    defaultValue=>'false',
	    textualConvention=>'TruthValue',
	    TCDescription=><<EOF,
Decribes a boolean truth value.
EOF
	    description=><<EOF,
A truth value.  When true, NOSUCH errors in 'get' pdus will be
repaired, removing the varbind in error, and resent - undef will
be returned for all NOSUCH varbinds.  When false, this feature
is disabled and the entire get requires will fail on any NOSUCH
error (applies to v1 only).
EOF
	},
	{
	    label=>'Retries',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.6',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'retries',
	    ranges=>[],
	    defaultValue=>5,
	    description=><<EOF,
The maximum number of retries before failure is reported.  The
default value is 5.  Setting this value too low can result in
spurious failures not associated with SNMP agent failure.
Setting this value too high can cause additional and possibly
excessive delay on detecting SNMP agent failure.
EOF
	},
	{
	    label=>'Timeout',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.5',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'microseconds',
	    ranges=>[],
	    defaultValue=>'1000000',
	    description=><<EOF,
The period of time in microseconds before a retry will be
generated.  The default is 1,000,000 microseconds (1 second).
Setting this value too low can result in spurious failures not
associated with SNMP agent failure.  Setting this value too high
can cause additional and possibly excessive delay on detecting
SNMP agent failure.
EOF
	},
	{
	    label=>'RemotePort',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.4',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[{ low=>0, high=>16384 },],
	    defaultValue=>161,
	    description=><<EOF,
The remote UDP port number.  The default values is 161.  This is
the remote UDP port number upon which the SNMP agent is
listening.  Setting this value to a value other than 161 is only
necessary if the SNMP agent is listening on a non-standard port.
EOF
	},
	{
	    label=>'Version',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.3',
	    type=>'Unsigned32',
	    syntax=>'UNSIGNED32',
	    units=>'',
	    ranges=>[],
	    enums=>{
		version3=>4,
		version2c=>3,
		version2=>2,
		version1=>1,
	    },
	    defaultValue=>'version2c',
	    description=><<EOF,
The default SNMP version.  This can have values version1(1),
version2(2), version2c(3) and version3(4).  The default value is
version2c(3).
EOF
	},
	{
	    label=>'Community',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.2',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    defaultValue=>'public',
	    description=><<EOF,
The SNMP community string (used for both read and write).  The
default is 'public'.
EOF
	},
	{
	    label=>'DestHost',
	    moduleID=>'Session',
	    objectID=>'.1.3.6.1.4.1.29591.99.1',
	    type=>'OctetString',
	    syntax=>'OCTETSTRING',
	    units=>'',
	    ranges=>[],
	    defaultValue=>'localhost',
	    description=><<EOF,
The hostname or IP address of the SNMP agent.  The default is
'localhost'.
EOF
	},
    ],
};

sub Options {
    return $options;
}

#
# This is a host package.  We use this package to identify a host for which to
# obtain STREAMS management data.
#
package Host;
use strict;

sub new {
    my $type = shift;
    my $self = {};
    bless $self, $type;
    my $parent = shift;
    $self->{data} = {};
    foreach my $s ( qw/Session Tunables Autopush Modules Statistics/ ) {
	$self->{data}->{$s} = {};
	if ($parent and defined $parent->{data}->{$s}) {
	    foreach my $k ( keys %{$parent->{data}->{$s}} ) {
		$self->{data}->{$s}->{$k} = $parent->{data}->{$s}->{$k};
	    }
	}
    }
    return $self;
}

sub EditHost {
    my $self = shift;
    my $mapp = shift;
    my $tree = {};
    $self->{Host} = $tree;
    foreach my $s ( qw/Session Tunables Autopush Modules Statistics/ ) {
	$self->{Host}->{$s} = {};
	if (defined $mapp->{data}->{$s}) {
	    foreach my $k ( keys %{$mapp->{data}->{$s}} ) {
		$self->{Host}->{$s}->{$k} = $mapp->{data}->{$s}->{$k};
	    }
	}
    }
    my $dialog = $self->{Dialog};
    unless (defined $dialog) {
	my $pane;
	$dialog = $mapp->{MainWindow}->DialogBox(
	    -title=>'Host Dialog',
	    -buttons=>[qw/OK Cancel Revert Defaults/],
	    -default_button=>'OK',
	    -width=>480,
	    -height=>570,
	);
	$self->{Dialog} = $dialog;
	$dialog->OnDestroy([sub { my $self = shift; $self->{Host} = undef; return; },$self]);
	$dialog->geometry('480x570');
	my ($b,$h);
	$h = $dialog->Balloon();
	$b = $dialog->Subwidget('B_OK');
	$h->attach($b,
	    -balloonmsg=>"Commit all changes.",
	);
	$b = $dialog->Subwidget('B_Cancel');
	$h->attach($b,
	    -balloonmsg=>"Cancel all changes.",
	);
	$b = $dialog->Subwidget('B_Revert');
	$b->configure(
	    -command=>[sub {
		my $self = shift;
		return;
	    },$self],
	);
	$h->attach($b,
	    -balloonmsg=>"Revert all values to the values present \nwhen this dialog was opened.",
	);
	$b = $dialog->Subwidget('B_Defaults');
	$b->configure(
	    -command=>[sub {
		my $self = shift;
		my $mib = Mysession::Options;
		my $data = $self->{Host}->{Session};
		foreach my $t ( @{$mib->{children}} ) {
		    my $label = $t->{label};
		    if ($t->{defaultValue}) {
			if (defined $t->{enums} and scalar(%{$t->{enums}})) {
			    $data->{$label} = [$t->{enums}{$t->{defaultValue}},$t->{defaultValue}];
			} else {
			    $data->{$label} = $t->{defaultValue};
			}
		    } elsif ( $t->{syntax} =~ /INTEGER|UNSIGNED|SIGNED/i ) {
			if (scalar(%{$t->{enums}})) {
			    my @keys = keys %{$t->{enums}};
			    $data->{$label} = [$t->{enums}{$keys[-1]},$keys[-1]];
			} else {
			    $data->{$label} = 0;
			}
		    } else {
			$data->{$label} = '';
		    }
		}
		return;
	    },$self],
	);
	$h->attach($b,
	    -balloonmsg=>"Set all values, that have defaults, to \ntheir default values.",
	);
	$tree->{Session} = {} unless defined $tree->{Session};
	$pane = $dialog->Scrolled('Pane',
	    -scrollbars=>'osoe',
	    -relief=>'flat',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
	if (defined $pane) {
	    my $mib = Mysession::Options;
	    my @list = ( @{$mib->{children}} );
	    my $row = 0;
	    my ($l,$i,$u);
	    $tree->{Session} = {} unless defined $tree->{Session};
	    my $data = $tree->{Session};
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Parameter',
	    )->grid(
		-column=>0,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Value',
	    )->grid(
		-column=>1,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Units',
	    )->grid(
		-column=>2,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $row++;
	    while (my $t = pop @list) {
		my $label = $t->{label};
		my $help = $pane->Balloon();
		my $fmsg = '';
		my $hmsg = '';
		my $tmsg = '';
		$fmsg .= $t->{moduleID}."::".$label.":\n(".$t->{objectID}.")\n\n";
		$tmsg .= $t->{TCDescription} if $t->{TCDescription};
		chomp $tmsg;
		$fmsg .= "$tmsg\n\n" if $tmsg ne '';
		$tmsg .= $t->{units} if $tmsg eq '';
		$hmsg .= $t->{description} if $t->{description};
		chomp $hmsg;
		$fmsg .= $hmsg;
		$fmsg =~ s/ \n((\t)? )?/\n/g;
		$hmsg =~ s/ \n((\t)? )?/\n/g;
		$tmsg =~ s/ \n((\t)? )?/\n/g;
		$l = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$label.":",
		)->grid(
		    -column=>0,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($l,
		    -balloonmsg=>$fmsg,
		);
		my ($v,$k);
		if (my @keys = ( keys %{$t->{enums}} )) {
		    my $opts = [];
		    if ($t->{defaultValue}) {
			$k = $t->{defaultValue};
			$v = $t->{enums}{$k};
		    } else {
			$k = $keys[-1];
			$v = $t->{enums}{$k};
		    }
		    unless (defined $data->{$label}) {
			$data->{$label} = $k;
		    }
		    my $dv = $v;
		    while ($k = pop @keys) {
			$v = $t->{enums}{$k};
			push @{$opts}, [$k=>$v];
		    }
		    $i = $pane->Optionmenu(
			-anchor=>'w',
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-options=>$opts,
			-padx=>2,
			-pady=>0,
			#-text=>$data->{$label}[0],
			-textvariable=>\$data->{$label},
			-variable=>\$dv,
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} elsif ($t->{'type'} =~ /UNSIGNED|INTEGER|SIGNED|GAUGE/i) {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = 0;
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    my ($min,$max);
		    if ($t->{syntax} =~ /UNSIGNED32|GAUGE32/i) {
			$min = 0;
			$max = 4294967295;
		    } elsif ($t->{syntax} =~ /INTEGER32/i) {
			$min = -2147482647;
			$max =  2147482648;
		    } elsif ($t->{syntax} =~ /UNSIGNED64|GAUGE64/i) {
			$min = 0;
			$max = 18446744073709551615;
		    } elsif ($t->{syntax} =~ /INTEGER64/i) {
			$min = -9223372036854775807;
			$max =  9223372036854775808;
		    } else {
			$min = undef;
			$max = undef;
		    }
		    if (@{$t->{ranges}}) {
			$min = $t->{ranges}[0]->{low};
			$max = $t->{ranges}[-1]->{high};
		    }
		    if (defined $min and defined $max) {
			$tmsg = $t->{syntax}."($min..$max) ".$tmsg;
		    }
		    $i = $pane->NumEntry(
			-bg=>'white',
			-buttons=>1,
			-font=>'Helvetica 10',
			-justify=>'left',
			-maxvalue=>$max,
			-minvalue=>$min,
			-orient=>'horizontal',
			-readonly=>0,
			-relief=>'groove',
			-textvariable=>\$data->{$label},
			#-value=>$data->{$label},
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} else {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = '';
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    $i = $pane->Entry(
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-relief=>'groove',
			#-text=>$data->{$label},
			-textvariable=>\$data->{$label},
			#-validate=>'all',
			#-vcmd=>[sub { my $self = shift; my $label = shift; print $label.": ".$data->{$label}; return 1; },$self,$label],
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		}
		my $units;
		if ($t->{'textualConvention'}) {
		    $units = $t->{'textualConvention'};
		    #$units .= " in ".$t->{'units'} if $t->{'units'};
		} elsif ($t->{'units'}) {
		    $units = $t->{'units'};
		} else {
		    $units = '';
		}
		$u = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$units,
		)->grid(
		    -column=>2,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($u,
		    -balloonmsg=>$tmsg,
		);
		$row++;
	    }
	}
    }
    my $answer = $dialog->Show();
    if ($answer eq 'OK') {
	$self->{data}->{Session} = {};
	foreach my $k ( keys %{$tree->{Session}} ) {
	    $self->{data}->{Session}->{$k} = $tree->{Session}->{$k};
	}
    } elsif (defined $self->{data}->{Session}) {
	foreach my $k ( keys %{$self->{data}->{Session}} ) {
	    $tree->{Session}->{$k} = $self->{data}->{Session}->{$k};
	}
    } else {
	$self->{data}->{Session} = {};
    }
    return $answer;
}

sub ConnectHost {
    my $self = shift;
    my $mapp = shift;
    if (!defined($self->{data}->{sess})) {
	$self->{data}->{sess} = new SNMP::Session(
	    DestHost => 'porky',
	    Community => 'openss7'
	);
	if (!defined($self->{data}->{sess})) {
	    printf("Could not open session\n");
	}
    }
    return $self->{data}->{sess};
}

package myapp;
use strict;

my @myapps = ();

my $docImage = <<EOF;
/* XPM */
static char * mini_doc_xpm[] = {
"16 14 4 1",
" 	c None",
"a	c black",
"b	c white",
"c	c gray50",
"   aaaaaaa      ",
"   abbbbbaa     ",
"   abcccbaba    ",
"   abbbbbaaaa   ",
"   abccccbccac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   aaaaaaaaaac  ",
"    cccccccccc  "};
EOF

my $docRedImage = <<EOF;
/* XPM */
static char * mini_doc2_xpm[] = {
"16 14 4 1",
" 	c None",
"a	c black",
"b	c red",
"c	c red3",
"   aaaaaaa      ",
"   abbbbbaa     ",
"   abcccbaba    ",
"   abbbbbaaaa   ",
"   abccccbccac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   abccccccbac  ",
"   abbbbbbbbac  ",
"   aaaaaaaaaac  ",
"    cccccccccc  "};
EOF

my $obookImage = <<EOF;
/* XPM */
static char * mini-book2_xpm[] = {
"16 14 4 1",
" 	c None",
"a	c black",
"b	c gray50",
"c	c white",
"  aa            ",
" abca    aaa    ",
" abcca aacca    ",
" abcccabcccaaa  ",
" abcccaccccaba  ",
" abcccabcccaba  ",
" abcccaccccaba  ",
" abcccabcccaba  ",
" abcccaccccaba  ",
"  abccabccaaba  ",
"   abcacaaccba  ",
"    abaabbbbba  ",
"    aabaaaaaaa  ",
"     aa         "};
EOF

my $cbookImage = <<EOF;
/* XPM */
static char * mini_book2_xpm[] = {
"16 14 6 1",
" 	c None",
"a	c black",
"b	c white",
"c	c gray50",
"d	c white",
"e	c gray50",
"       aa       ",
"     aabba      ",
"   aabbbbba     ",
" aabbbbbbbba    ",
"accbbbbbbbbba   ",
"aaccbbbbbbbbba  ",
"abaccbbbbbbbbba ",
"abbaccbbbbbbaa  ",
" abbaccbbbaade  ",
"  abbaccaaddeea ",
"   abbaaddeeaa  ",
"    abadeeaa    ",
"     aaeaa      ",
"      aa        "};
EOF

my $cbookRedImage = <<EOF;
/* XPM */
static char * mini_book1_xpm[] = {
"16 14 6 1",
" 	c None",
"a	c black",
"b	c red",
"c	c red4",
"d	c white",
"e	c gray50",
"       aa       ",
"     aabba      ",
"   aabbbbba     ",
" aabbbbbbbba    ",
"accbbbbbbbbba   ",
"aaccbbbbbbbbba  ",
"abaccbbbbbbbbba ",
"abbaccbbbbbbaa  ",
" abbaccbbbaade  ",
"  abbaccaaddeea ",
"   abbaaddeeaa  ",
"    abadeeaa    ",
"     aaeaa      ",
"      aa        "};
EOF

my $cbookGrnImage = <<EOF;
/* XPM */
static char * mini_book3_xpm[] = {
"16 14 6 1",
" 	c None",
"a	c black",
"b	c green",
"c	c green4",
"d	c white",
"e	c gray50",
"       aa       ",
"     aabba      ",
"   aabbbbba     ",
" aabbbbbbbba    ",
"accbbbbbbbbba   ",
"aaccbbbbbbbbba  ",
"abaccbbbbbbbbba ",
"abbaccbbbbbbaa  ",
" abbaccbbbaade  ",
"  abbaccaaddeea ",
"   abbaaddeeaa  ",
"    abadeeaa    ",
"     aaeaa      ",
"      aa        "};
EOF

my $cbookBluImage = <<EOF;
/* XPM */
static char * mini_book4_xpm[] = {
"16 14 6 1",
" 	c None",
"a	c black",
"b	c blue",
"c	c blue4",
"d	c white",
"e	c gray50",
"       aa       ",
"     aabba      ",
"   aabbbbba     ",
" aabbbbbbbba    ",
"accbbbbbbbbba   ",
"aaccbbbbbbbbba  ",
"abaccbbbbbbbbba ",
"abbaccbbbbbbaa  ",
" abbaccbbbaade  ",
"  abbaccaaddeea ",
"   abbaaddeeaa  ",
"    abadeeaa    ",
"     aaeaa      ",
"      aa        "};
EOF

my $iconImage = <<EOF;
/* XPM */
static char * streams_icon_xpm[] = {
"48 48 484 2",
"  	c #575757",
". 	c #C4C4C4",
"+ 	c #FFFFFF",
"\@ 	c #FBFBFE",
"# 	c #DCDDF4",
"\$ 	c #969BDD",
"\% 	c #6B73D2",
"\& 	c #6F75D4",
"* 	c #8389D8",
"= 	c #C4C6ED",
"- 	c #ECEDF9",
"; 	c #FEFEFF",
"> 	c #F0F0F0",
", 	c #CECECE",
"' 	c #797979",
") 	c #3D3D3D",
"! 	c #313131",
"~ 	c #333333",
"{ 	c #6B6B6B",
"] 	c #CACACA",
"^ 	c #FCFCFC",
"/ 	c #FCFDFE",
"( 	c #C1C5EC",
"_ 	c #5057C8",
": 	c #434CC1",
"< 	c #8D91DB",
"[ 	c #A0A4E2",
"} 	c #8489D9",
"| 	c #4F58C8",
"1 	c #7178D4",
"2 	c #CCCFEF",
"3 	c #EFEFEF",
"4 	c #808080",
"5 	c #242424",
"6 	c #414141",
"7 	c #878787",
"8 	c #ACACAC",
"9 	c #8E8E8E",
"0 	c #3B3B3B",
"a 	c #323232",
"b 	c #C2C2C2",
"c 	c #E7E8F7",
"d 	c #4B53C7",
"e 	c #4750C7",
"f 	c #C5C8ED",
"g 	c #FAFAFD",
"h 	c #F7F7FD",
"i 	c #CCCEEF",
"j 	c #6D73D1",
"k 	c #4751C5",
"l 	c #5D5D68",
"m 	c #1A1A1A",
"n 	c #4A4A4A",
"o 	c #DADADA",
"p 	c #FBFBFB",
"q 	c #CBCBCB",
"r 	c #3E3E3E",
"s 	c #424242",
"t 	c #EAEAEA",
"u 	c #FDFDFE",
"v 	c #7E85D7",
"w 	c #3840C1",
"x 	c #B9BBEA",
"y 	c #FDFDFF",
"z 	c #E2E3EA",
"A 	c #40435F",
"B 	c #090B17",
"C 	c #72738A",
"D 	c #F0F0F4",
"E 	c #C5C5C5",
"F 	c #212121",
"G 	c #858585",
"H 	c #E2E2F6",
"I 	c #414AC4",
"J 	c #6E74D2",
"K 	c #F2F2FB",
"L 	c #F3F3F3",
"M 	c #151515",
"N 	c #525581",
"O 	c #4C53BE",
"P 	c #C6C9EE",
"Q 	c #585858",
"R 	c #454545",
"S 	c #E0E0E0",
"T 	c #AAAEE5",
"U 	c #353FBC",
"V 	c #A8ADE5",
"W 	c #FEFEFE",
"X 	c #B2B2B2",
"Y 	c #1C1C1C",
"Z 	c #636363",
"` 	c #DDDEEE",
" .	c #6D73D2",
"..	c #535BCB",
"+.	c #F0F1FB",
"\@.	c #B0B0B0",
"#.	c #B9B9B9",
"\$.	c #F9FAFE",
"\%.	c #777DD5",
"\&.	c #3940C1",
"*.	c #E5E7F8",
"=.	c #E2E2E2",
"-.	c #262626",
";.	c #DBDCF3",
">.	c #555ECA",
",.	c #7F84D6",
"'.	c #F6F7FD",
").	c #909090",
"!.	c #E8E9F8",
"~.	c #5F65CD",
"{.	c #5158C8",
"].	c #FCFCFF",
"^.	c #F8F8F8",
"/.	c #6E6E6E",
"(.	c #1F1F1F",
"_.	c #B3B3B3",
":.	c #FDFDFD",
"<.	c #B9BCE9",
"[.	c #3C45C0",
"}.	c #B5B9E9",
"|.	c #EDEDED",
"1.	c #4D4D4D",
"2.	c #686868",
"3.	c #D8D9F3",
"4.	c #4F55C9",
"5.	c #7176D4",
"6.	c #202020",
"7.	c #6F6F6F",
"8.	c #F5F5F5",
"9.	c #6E73D3",
"0.	c #6268CE",
"a.	c #E4E5F7",
"b.	c #4B4B4B",
"c.	c #ECECEC",
"d.	c #C9CCEF",
"e.	c #3E48C0",
"f.	c #8F94DC",
"g.	c #E6E6E6",
"h.	c #525252",
"i.	c #E9E9E9",
"j.	c #D3D7F3",
"k.	c #454EC6",
"l.	c #9CA1E1",
"m.	c #FCFCFE",
"n.	c #F9F9F9",
"o.	c #E7E7E7",
"p.	c #BFC2EC",
"q.	c #363FC1",
"r.	c #A2A5E2",
"s.	c #AAAAAA",
"t.	c #171717",
"u.	c #8C8C8C",
"v.	c #F6F7FC",
"w.	c #8F94DB",
"x.	c #4D56C9",
"y.	c #E9E9F9",
"z.	c #979797",
"A.	c #232323",
"B.	c #E3E3E3",
"C.	c #BBBEEA",
"D.	c #323ABF",
"E.	c #ABAEE6",
"F.	c #4F4F4F",
"G.	c #D7D7D7",
"H.	c #D1D4F1",
"I.	c #4F57C9",
"J.	c #A5AAE4",
"K.	c #9E9E9E",
"L.	c #B9BDE9",
"M.	c #2F3ABB",
"N.	c #AFB4E5",
"O.	c #C1C1C1",
"P.	c #111111",
"Q.	c #898989",
"R.	c #FBFBFD",
"S.	c #5D66CE",
"T.	c #EAECF9",
"U.	c #A4A4A4",
"V.	c #BDC1EB",
"W.	c #3C46C3",
"X.	c #B2B6E7",
"Y.	c #656565",
"Z.	c #363636",
"`.	c #CCCCCC",
" +	c #5A61CC",
".+	c #B5B7E8",
"++	c #353535",
"\@+	c #E4E4E4",
"#+	c #CBCCEE",
"\$+	c #5E64CD",
"\%+	c #B8BCEA",
"\&+	c #727272",
"*+	c #F7F7F7",
"=+	c #8C92DB",
"-+	c #989DDF",
";+	c #F3F4FB",
">+	c #DEE0F5",
",+	c #9499DD",
"'+	c #C7CAEE",
")+	c #B6B6B6",
"!+	c #676767",
"~+	c #D8DAF3",
"{+	c #9CA1E0",
"]+	c #E3E4F6",
"^+	c #BFBFBF",
"/+	c #888888",
"(+	c #EDEDF9",
"_+	c #BCBFEA",
":+	c #D3D5F1",
"<+	c #B1B1B1",
"[+	c #999999",
"}+	c #F5F5FC",
"|+	c #B9BDEA",
"1+	c #D6D8F3",
"2+	c #FAFAFB",
"3+	c #C9C9C9",
"4+	c #D0D3F0",
"5+	c #D9DBF3",
"6+	c #EEEEEE",
"7+	c #BBBBBB",
"8+	c #CBCDEF",
"9+	c #F6F6F9",
"0+	c #CDCDCD",
"a+	c #FAFAFA",
"b+	c #F1F1F1",
"c+	c #EFEFF7",
"d+	c #F4F4F4",
"e+	c #E1E1E1",
"f+	c #DEDEDE",
"g+	c #DCDCDD",
"h+	c #D2D3E3",
"i+	c #C6C7DD",
"j+	c #BFBFC1",
"k+	c #D9D9D9",
"l+	c #E8E8E8",
"m+	c #D6D8F2",
"n+	c #D4D5E5",
"o+	c #D5D5D5",
"p+	c #E5E5E5",
"q+	c #404040",
"r+	c #777777",
"s+	c #7C7C7C",
"t+	c #7D7E88",
"u+	c #6D6D79",
"v+	c #333334",
"w+	c #3C3C3C",
"x+	c #BEBEBE",
"y+	c #B5B5B5",
"z+	c #464646",
"A+	c #989898",
"B+	c #DEDFF5",
"C+	c #9495A8",
"D+	c #F6F6F6",
"E+	c #C0C0C0",
"F+	c #494949",
"G+	c #C6C6C6",
"H+	c #535353",
"I+	c #9D9D9D",
"J+	c #F2F2F2",
"K+	c #8B8B8B",
"L+	c #444444",
"M+	c #9B9B9B",
"N+	c #4E4E4E",
"O+	c #DFE0E9",
"P+	c #55555C",
"Q+	c #D3D3D3",
"R+	c #D8D8D8",
"S+	c #3A3A3A",
"T+	c #EBEBEB",
"U+	c #6D6D6D",
"V+	c #090909",
"W+	c #2E2E2E",
"X+	c #E9EAF8",
"Y+	c #7E7F8D",
"Z+	c #030303",
"`+	c #929292",
" \@	c #131313",
".\@	c #0D0D0D",
"+\@	c #474747",
"\@\@	c #6C6C6C",
"#\@	c #A2A2A2",
"\$\@	c #D1D1D1",
"\%\@	c #9C9C9C",
"\&\@	c #828282",
"*\@	c #DCDCDC",
"=\@	c #646464",
"-\@	c #57575B",
";\@	c #B8B8B8",
">\@	c #7E7E7E",
",\@	c #0F0F0F",
"'\@	c #9F9F9F",
")\@	c #666666",
"!\@	c #1D1D1D",
"~\@	c #F5F6FC",
"{\@	c #7F7F88",
"]\@	c #3F3F3F",
"^\@	c #959595",
"/\@	c #B4B4B4",
"(\@	c #343434",
"_\@	c #A3A3A3",
":\@	c #585859",
"<\@	c #252525",
"[\@	c #C3C3C3",
"}\@	c #0A0A0A",
"|\@	c #484848",
"1\@	c #6A6A6A",
"2\@	c #F6F7F8",
"3\@	c #7F8082",
"4\@	c #383838",
"5\@	c #A0A0A0",
"6\@	c #505050",
"7\@	c #5C5C5C",
"8\@	c #707070",
"9\@	c #303030",
"0\@	c #DDDDDD",
"a\@	c #696969",
"b\@	c #4B4B4E",
"c\@	c #E2E2E6",
"d\@	c #2A2A2A",
"e\@	c #161616",
"f\@	c #A5A5A5",
"g\@	c #4C4C4C",
"h\@	c #1B1B1B",
"i\@	c #D2D2D2",
"j\@	c #3F3F40",
"k\@	c #626263",
"l\@	c #8A8A8A",
"m\@	c #717171",
"n\@	c #565656",
"o\@	c #4D4E55",
"p\@	c #ABABAB",
"q\@	c #9A9A9A",
"r\@	c #7A7A7A",
"s\@	c #3C3C3F",
"t\@	c #8F8F93",
"u\@	c #969696",
"v\@	c #DFDFDF",
"w\@	c #838390",
"x\@	c #EBECF9",
"y\@	c #F7F7F8",
"z\@	c #7F7F7F",
"A\@	c #8F8F8F",
"B\@	c #97979A",
"C\@	c #787887",
"D\@	c #C4C4CA",
"E\@	c #D4D4D4",
"F\@	c #838383",
"G\@	c #CDCDCE",
"H\@	c #D1D2E4",
"I\@	c #E1E2F5",
"J\@	c #C8C8C8",
"K\@	c #CFCFD5",
"L\@	c #C4C7E6",
"M\@	c #EAEBF6",
"N\@	c #CBCBCC",
"O\@	c #E0E2F1",
"P\@	c #CDD0F0",
"Q\@	c #E4E4EA",
"R\@	c #BEC2EC",
"S\@	c #E4E6F7",
"T\@	c #B3B4B5",
"U\@	c #E7E8F6",
"V\@	c #B6B9E9",
"W\@	c #D3D5F2",
"X\@	c #A6A6A6",
"Y\@	c #ECEDF3",
"Z\@	c #AEB2E6",
"`\@	c #D5D7F2",
" #	c #8A8A8B",
".#	c #8990DB",
"+#	c #AEAEAE",
"\@#	c #F0F0F8",
"##	c #979DDF",
"\$#	c #BCBEEA",
"\%#	c #ADB2E6",
"\&#	c #525AC9",
"*#	c #C4C6EC",
"=#	c #8085D8",
"-#	c #9DA2E0",
";#	c #F8F9FD",
">#	c #DFE1F6",
",#	c #4C55C7",
"'#	c #7C83D7",
")#	c #F8F8FD",
"!#	c #626262",
"~#	c #767DD5",
"{#	c #8A90DB",
"]#	c #515151",
"^#	c #8084D6",
"/#	c #434EC2",
"(#	c #CCCFF0",
"_#	c #C7C7C7",
":#	c #A8A8A8",
"<#	c #7379D4",
"[#	c #8288D8",
"}#	c #DCDCF4",
"|#	c #333CBF",
"1#	c #858ADA",
"2#	c #F6F6FC",
"3#	c #F1F2FB",
"4#	c #6F76D3",
"5#	c #8289DA",
"6#	c #7980D6",
"7#	c #4149C4",
"8#	c #D6D7F2",
"9#	c #F0F0FA",
"0#	c #676ECF",
"a#	c #8B90DA",
"b#	c #C8CBEE",
"c#	c #4049C4",
"d#	c #8287D9",
"e#	c #686869",
"f#	c #484849",
"g#	c #5B62CC",
"h#	c #979DDE",
"i#	c #FAFBFE",
"j#	c #8C92DD",
"k#	c #323BC0",
"l#	c #ADADAD",
"m#	c #292929",
"n#	c #474FC7",
"o#	c #ABAEE5",
"p#	c #1E1E1E",
"q#	c #DEE0F4",
"r#	c #6971D0",
"s#	c #EBECF8",
"t#	c #DEDFF4",
"u#	c #BDC0EA",
"v#	c #B7B9E9",
"w#	c #333BBF",
"x#	c #9FA3E2",
"y#	c #FAFAFE",
"z#	c #373737",
"A#	c #4D54C7",
"B#	c #D2D4F1",
"C#	c #2D2D2D",
"D#	c #5F5F5F",
"E#	c #838ADA",
"F#	c #3D46C2",
"G#	c #BABDE9",
"H#	c #2B2B2B",
"I#	c #787DD5",
"J#	c #6C72D1",
"K#	c #E3E5F7",
"L#	c #676ECE",
"M#	c #4B53C6",
"N#	c #9C9EAF",
"O#	c #4B52C7",
"P#	c #9AA0E1",
"Q#	c #848484",
"R#	c #D6D9F3",
"S#	c #4A4FA5",
"T#	c #1D1D2A",
"U#	c #6F6F75",
"V#	c #9DA1E1",
"W#	c #454CC4",
"X#	c #E1E3F6",
"Y#	c #A1A1A1",
"Z#	c #E6E6E7",
"`#	c #979798",
" \$	c #3F4376",
".\$	c #4D56C4",
"+\$	c #B8BCE9",
"\@\$	c #B6B9E8",
"#\$	c #464FC2",
"\$\$	c #A6A9E3",
"\%\$	c #787878",
"\&\$	c #5A5A5A",
"*\$	c #DEDEEF",
"=\$	c #8288D7",
"-\$	c #4A52C7",
";\$	c #8388D8",
">\$	c #B8BBEA",
",\$	c #C6C8EE",
"'\$	c #979CDF",
")\$	c #F2F3FC",
"!\$	c #7B7B7B",
"~\$	c #CCCDEE",
"{\$	c #8289D7",
"]\$	c #6A72D0",
"^\$	c #6970D1",
"/\$	c #7077D4",
"(\$	c #B2B4E7",
"_\$	c #EFF0FA",
"                                                                                              . ",
"  + + + + + + + + + + + + + + \@ # \$ \% \& * = - ; + > , ' ) ! ~ { ] ^ + + + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + / ( _ : < [ } | 1 2 3 4 5 6 7 8 9 0 a b + + + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + c d e f g + h i j k l m n o p + ^ q r s t + + + + + + + + + + + + . ",
"  + + + + + + + + + + + + u v w x y + + + + z A B C D + + + + + E F G ^ + + + + + + + + + + + . ",
"  + + + + + + + + + + + + H I J K + + + + L G M N O P ; + + + + ^ Q R S + + + + + + + + + + + . ",
"  + + + + + + + + + + + + T U V + + + + W X Y Z `  ...+.+ + + + + \@.Y #.+ + + + + + + + + + + . ",
"  + + + + + + + + + + + \$.\%.\&.*.+ + + + =.-.n S + ;.>.,.'.+ + + + =.5 ).p + + + + + + + + + + . ",
"  + + + + + + + + + + + !.~.{.].+ + + ^./.(._.:.+ + <.[.}.; + + + |.1.2.L + + + + + + + + + + . ",
"  + + + + + + + + + + + 3.4.5.+ + + + #.6.7.8.+ + + g 9.0.a.+ + + L { b.c.+ + + + + + + + + + . ",
"  + + + + + + + + + + + d.e.f.+ + + g.h.(.i.+ + + + + j.k.l.m.+ + n.G a o.+ + + + + + + + + + . ",
"  + + + + + + + + + + + p.q.r.+ + :.s.t.u.+ + + + + + v.w.x.y.+ + :.z.A.B.+ + + + + + + + + + . ",
"  + + + + + + + + + + + C.D.E.+ + 8.F.~ G.+ + + + + + + H.I.J.+ + W K.6.=.+ + + + + + + + + + . ",
"  + + + + + + + + + + + L.M.N.+ + O.P.Q.n.+ + + + + + + R.f.S.T.+ W U.5 =.+ + + + + + + + + + . ",
"  + + + + + + + + + + + V.W.X.+ p Y.Z.`.+ + + + + + + + + #  +.+; W s.++\@++ + + + + + + + + + . ",
"  + + + + + + + + + + + #+\$+\%++ o s \&+*++ + + + + + + + + u =+-+;+:.X Q i.+ + + + + + + + + + . ",
"  + + + + + + + + + + + >+,+'+W )+!+`.+ + + + + + + + + + + ~+{+]+^ ^+/+> + + + + + + + + + + . ",
"  + + + + + + + + + + + (+_+:+8.<+[+n.+ + + + + + + + + + + }+|+1+2+3+X *++ + + + + + + + + + . ",
"  + + + + + + + + + + + }+4+5+6+7+, + + + + + + + + + + + + m.~+8+9+0+] a++ + + + + + + + + + . ",
"  + + + + + + + + + + + g >+;.o.3+b++ + + + + + + + + + + + + - i c+, o ^ + + + + + + + + + + . ",
"  + + d+e+=.n.+ i.f+f+f+g+h+i+j+7+k+l++ W f+f+f+f+l+^ + 8.e+d+h m+n+X o+:.*+=.S + |.f+o.+ + + . ",
"  + p+/.q+s r+B.s+) ) ) ) t+u+v+Z.w+1.x+^.) ) ) ) s+|.+ y+z+A+y B+C+! /+D+E+s F+G+H+) b.I+J++ . ",
"  + K+r . G+L+M+l+=.N+Q =.O+P+s Q+R+S+Y.o.M [+=.=.T+^ J+U+V+W+t X+Y+Z+F+l+`+ \@.\@+\@\@\@o #\@S+\$\@+ . ",
"  + \%\@(.\&\@X <+*\@W + Q =\@+ v.-\@0 )+;\@+\@>\@T+,\@\@\@'\@'\@0++ k+! )\@!\@s.~\@{\@Y a o+Y.]\@t.Q S+^\@;\@/\@> + . ",
"  + t K+L+(\@~ _\@p + Q =\@+ m.:\@Y H+s <\@[\@D+}\@|\@1\@1\@X + #\@! q ) 7.2\@3\@4\@4\@5\@6\@7\@(.0+8\@w+9\@n 0++ . ",
"  + ^+)+e+0\@a\@R d++ Q =\@+ p   b\@c\@o d\@^\@D+e\@f\@d+d+n.:.g\@M 9\@h\@0 i\@>\@j\@k\@{ q+' m f\@G+l+[\@S+l\@+ . ",
"  + ).<\@G A+R m\@^.+ Q =\@+ d+n\@o\@K L 0 7 d+,\@7._\@_\@O.`.h\@).3+p\@F q\@r\@s\@t\@M Y.M+e\@N+6 A+G 9\@\@.+ . ",
"  + c.u\@\@\@{ `+v\@W + M+_\@+ 3 Q.w\@x\@y\@l\@p\@d+!+!+!+!+A+;\@z\@B.+ b+A\@M+B\@C\@D\@' )+. ' E\@F\@!+m\@s.J++ . ",
"  + + p d+L a++ + + *+*++ i.G\@H\@I\@R.8.*+W J+J+J+J+*+^.d+:.+ W 3 J\@K\@L\@M\@d+a+a+d++ ^.J+8.:.+ + . ",
"  + + + + + + + + + + + + f+N\@O\@P\@;++ + + + + + + + + + + + + \@+y+Q\@R\@S\@+ + + + + + + + + + + . ",
"  + + + + + + + + + + + ^ J\@T\@U\@V\@W\@+ + + + + + + + + + + + a+O.X\@Y\@Z\@`\@; + + + + + + + + + + . ",
"  + + + + + + + + + + + 8.K. #K [ .#g + + + + + + + + + + + t r++#\@###\$#m.+ + + + + + + + + + . ",
"  + + + + + + + + + + + T+m\@2.; \%#\&#*#+ + + + + + + + + + + /\@s q K =#-#;#+ + + + + + + + + + . ",
"  + + + + + + + + + + + g.  Q + >#,#'#)#+ + + + + + + + + :.H+!#6+K ~#{#v.+ + + + + + + + + + . ",
"  + + + + + + + + + + + B.n ]#+ / ^#/#(#+ + + + + + + + + _#<\@:#W K <#[#~\@+ + + + + + + + + + . ",
"  + + + + + + + + + + + p+|\@|\@+ + }#|#1#2#+ + + + + + + d+Z z+J++ 3#4#5#2#+ + + + + + + + + + . ",
"  + + + + + + + + + + + T+N+]\@+ + ;#6#7#8#+ + + + + + + x+-.8 + + 9#0#a#)#+ + + + + + + + + + . ",
"  + + + + + + + + + + + d+Q W+W + ; b#c#d#; + + + + + 3 e#f#3 + + (+g#h#i#+ + + + + + + + + + . ",
"  + + + + + + + + + + + W U+Y |.+ + )#j#k#P\@+ + + + + l#m##.W + + !.n#o#; + + + + + + + + + + . ",
"  + + + + + + + + + + + + A\@p#0++ + + q#_ r#s#+ + + |.r 7.> + + + t#7#u#+ + + + + + + + + + + . ",
"  + + + + + + + + + + + + ;\@6.'\@+ + + W v#w#x#y#+ n.z\@z#R++ + + + _+A#B#+ + + + + + + + + + + . ",
"  + + + + + + + + + + + + 6+C#D#D++ + + m.E#F#G#^.\%\@H#E++ + + + + I#J#9#+ + + + + + + + + + + . ",
"  + + + + + + + + + + + + + m\@9\@0++ + + + K#L#M#N#S+K+^ + + + + X+O#P#; + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + 0+t.Q#*++ + + ; R#S#T#U#6++ + + + ; V#W#X#+ + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + n.Q.Y Y#D++ + Z#`#~  \$.\$+\$}++ + i#\@\$#\$\$\$+ + + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + + l+' d\@\%\$U.A+\&\$H+f\@*\$=\$-\$;\$>\$,\$'\$\&#;\$)\$+ + + + + + + + + + + + + . ",
"  + + + + + + + + + + + + + + + 3 ;\@!\$\%\$4 <+S p + K ~\${\$]\$^\$/\$(\$_\$+ + + + + + + + + + + + + + . ",
". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . "};
EOF

sub new {
    my $type = shift;
    my $self = {};
    bless $self, $type;
    $self->{data} = {};
    $self->{hosts} = ();
    $self->{data}->{hosts} = ();
    push @myapps, $self;
    $self->{saved} = 0;
    return $self;
}

sub CloseFile {
    my $self = shift;
    my @temp = ();
    foreach my $a ( @myapps ) {
	push @temp, $a unless $a eq $self;
    }
    @myapps = ( @temp );
    #print Data::Dumper->Dump([$self->{data}], [qw/data/]);
    $self->{MainWindow}->destroy;
    return;
}

sub ExitAll {
    my $self = shift;
    my @temp = ( @myapps );
    foreach my $a ( @temp ) {
	$a->CloseFile();
    }
    return;
}

sub DestroyApp {
    my $self = shift;
    if ($self->{MibHelp}) {
	$self->{MibHelp}->destroy;
	$self->{MibHelp} = undef;
    }
}

sub create {
    my $self = shift;
    my ($mib,$data);
    $mib = Mysession::Options;
    $self->{data}->{Session} = {};
    $data = $self->{data}->{Session};
    foreach my $t ( @{$mib->{children}} ) {
	my $label = $t->{label};
	if ($t->{defaultValue}) {
	    $data->{$label} = $t->{defaultValue};
	} elsif ( $t->{syntax} =~ /INTEGER|UNSIGNED|SIGNED/i ) {
	    if (scalar(%{$t->{enums}})) {
		my @keys = keys %{$t->{enums}};
		$data->{$label} = $keys[-1];
	    } else {
		$data->{$label} = 0;
	    }
	} else {
	    $data->{$label} = '';
	}
    }
    $mib = $SNMP::MIB{strTunables};
    $self->{data}->{Tunables} = {};
    $data = $self->{data}->{Tunables};
    foreach my $t ( @{$mib->{children}} ) {
	my $label = $t->{label};
	if ($t->{defaultValue}) {
	    $data->{$label} = $t->{defaultValue};
	} elsif ( $t->{syntax} =~ /INTEGER|UNSIGNED|SIGNED/i ) {
	    if (scalar(%{$t->{enums}})) {
		my @keys = keys %{$t->{enums}};
		$data->{$label} = $keys[-1];
	    } else {
		$data->{$label} = 0;
	    }
	} else {
	    $data->{$label} = '';
	}
    }
    my $mw;
    $mw = new Tk::MainWindow(
	-name=>'streams',
	-class=>'Streams',
    );
    $self->{MainWindow} = $mw;
    $mw->OnDestroy([\&DestroyApp, $self]);
    $mw->title($title);
    #$mw->bind('<Destroy>', [\&destroyed, $self]);
    $mw->geometry('800x600');
#    $mw->optionAdd('*font'=>'-*-helvetica-medium-r-*--*-100-*-*-*-*-*-*');
#    $mw->optionAdd('*.Button.*.font'=>'-*-helvetica-bold-r-*--*-100-*-*-*-*-*-*');
#    $mw->optionAdd('*.Label.*.font'=>'-*-helvetica-bold-r-*--*-100-*-*-*-*-*-*');
    $mw->optionAdd('*.Balloon.*.font'=>'Mono 8');
    $mw->optionAdd('*HighlightThickness'=>0);
    $mw->optionAdd('*Relief'=>'groove');
    $mw->optionAdd('*BorderThickness'=>1);
    $mw->optionAdd('*BorderWidth'=>1);
    $mw->optionAdd('*Border'=>1);
    $mw->optionAdd('*Scrollbar*Width'=>8);
    $mw->optionAdd('*Menu*Width'=>2);
    $mw->optionAdd('*Menu*Height'=>2);
    $mw->Pixmap('icon', -data=>$iconImage,);
    $mw->Pixmap('doc', -data=>$docImage,);
    $mw->Pixmap('doc-red', -data=>$docRedImage,);
    $mw->Pixmap('cbook', -data=>$cbookImage,);
    $mw->Pixmap('cbook-red', -data=>$cbookRedImage,);
    $mw->Pixmap('cbook-grn', -data=>$cbookGrnImage,);
    $mw->Pixmap('cbook-blu', -data=>$cbookBluImage,);
    $mw->Pixmap('obook', -data=>$obookImage,);
    $mw->iconimage('icon');
    $mw->iconname($title);
    my $mb = $mw->Menu(
	-relief=>'groove',
	-type=>'menubar',
    );
    $mw->configure(
	-menu=>$mb,
    );
    $self->{MenuBar} = $mb;
    my $mi;
    $mi = $mb->Menu(
	-tearoff=>1,
	-title=>'File Menu',
	-type=>'normal',
    );
    $mi->add('command',
	-accelerator=>'~N',
	-command=>[\&NewFile,$self],
	-label=>'New',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~O',
	-command=>[\&OpenFile,$self],
	-label=>'Open...',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~S',
	-command=>[\&SaveFile,$self],
	-label=>'Save',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~A',
	-command=>[\&SaveAsFile,$self],
	-label=>'Save As...',
	-underline=>5,
    );
    $mi->add('command',
	-accelerator=>'~C',
	-command=>[\&CloseFile,$self],
	-label=>'Close',
	-underline=>5,
    );
    $mi->add('separator');
    $mi->add('command',
	-accelerator=>'~P',
	-command=>[\&PropFile,$self],
	-label=>'Properties...',
	-underline=>0,
    );
    $mi->add('separator');
    $mi->add('command',
	-accelerator=>'~E',
	-command=>[\&ExitAll,$self],
	-label=>'Exit All',
	-underline=>0,
    );
    $self->{FileMenu} = $mi;
    $mb->add('cascade',
	-accelerator=>'~F',
	-label=>'File',
	-menu=>$mi,
	-underline=>0,
    );
    $mi = $mb->Menu(
	-tearoff=>1,
	-title=>'Edit Menu',
	-type=>'normal',
    );
    $self->{EditMenu} = $mi;
    $mi->add('command',
	-accelerator=>'~P',
	-command=>[\&Preferences, $self],
	-label=>'Preferences',
	-underline=>0,
    );
    $mb->add('cascade',
	-accelerator=>'~E',
	-label=>'Edit',
	-menu=>$mi,
	-underline=>0,
    );
    $mi = $mb->Menu(
	-tearoff=>1,
	-title=>'View Menu',
	-type=>'normal',
    );
    $mi->add('command',
	-accelerator=>'~S',
	-command=>[\&HlistViewSession,$self],
	-label=>'Session View...',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~T',
	-command=>[\&HlistViewTunables,$self],
	-label=>'Tunables View...',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~A',
	-command=>[\&HlistViewAutopush,$self],
	-label=>'Autopush View...',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~M',
	-command=>[\&HlistViewModules,$self],
	-label=>'Modules View...',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~T',
	-command=>[\&HlistViewStatistics,$self],
	-label=>'Statistics View...',
	-underline=>1,
	-state=>'disabled',
    );
    $self->{ViewMenu} = $mi;
    $mb->add('cascade',
	-accelerator=>'~V',
	-label=>'View',
	-menu=>$mi,
	-underline=>0,
    );
    $mi = $mb->Menu(
	-tearoff=>1,
	-title=>'MIBs Menu',
	-type=>'normal',
    );
    $self->{MibsMenu} = $mi;
    $mb->add('cascade',
	-accelerator=>'~M',
	-label=>'MIBs',
	-menu=>$mi,
	-underline=>0,
    );
    $mi = $mb->Menu(
	-tearoff=>1,
	-title=>'Host Menu',
	-type=>'normal',
    );
    $mi->add('command',
	-accelerator=>'~A',
	-command=>[\&HlistAddHost,$self],
	-label=>'Add Host',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~E',
	-command=>[\&HlistEditHost,$self],
	-label=>'Edit Host',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~D',
	-command=>[\&HlistDelHost,$self],
	-label=>'Delete Host',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('separator');
    $mi->add('command',
	-accelerator=>'~a',
	-command=>[\&HlistAddModule,$self],
	-label=>'Add Module',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~e',
	-command=>[\&HlistEditModule,$self],
	-label=>'Edit Module',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('command',
	-accelerator=>'~d',
	-command=>[\&HlistDelModule,$self],
	-label=>'Delete Module',
	-underline=>0,
	-state=>'disabled',
    );
    $mi->add('separator');
    $mi->add('command',
	-accelerator=>'~C',
	-command=>[\&HlistConnect,$self],
	-label=>'Connect',
	-underline=>0,
	-state=>'disabled',
    );
    $self->{HostMenu} = $mi;
    $mb->add('cascade',
	-accelerator=>'~H',
	-label=>'Host',
	-menu=>$mi,
	-underline=>0,
    );
    $mi = $mb->Menu(
	-tearoff=>0,
	-title=>'About Menu',
	-type=>'normal',
    );
    $self->{AboutMenu} = $mi;
    $mi->add('command',
	-accelerator=>'~V',
	-command=>[\&ShowVersion, $self],
	-label=>'Version',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~U',
	-command=>[\&ShowUsage, $self],
	-label=>'Usage',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~C',
	-command=>[\&ShowCopying, $self],
	-label=>'Copying',
	-underline=>0,
    );
    $mi->add('command',
	-accelerator=>'~H',
	-command=>[\&ShowHelp, $self],
	-label=>'Help',
	-underline=>0,
    );
    $mb->add('separator');
    $mb->add('cascade',
	-accelerator=>'~A',
	-label=>'About',
	-menu=>$mi,
	-underline=>0,
    );
    my $hl;
    $hl = $mw->Scrolled('HList',
	-bg=>'white',
	-browsecmd=>[\&Browse,$self],
	-columns=>2,
	-command=>[\&Select,$self],
	-drawbranch=>1,
	-header=>1,
	-indent=>20,
	-indicator=>1,
	-indicatorcmd=>[\&Indicator,$self],
	-scrollbars=>'osoe',
	-selectmode=>'single',
	-separator=>'.',
	-width=>36,
    );
    $hl->pack(
	-expand=>0,
	-fill=>'y',
	-side=>'left',
    );
    $self->{HList} = $hl;
    $hl->header('create', 0,
	-itemtype=>'text',
	-text=>'Host',
    );
    $hl->header('create', 1,
	-itemtype=>'text',
	-text=>'Modules',
    );
    $hl->Subwidget('scrolled')->bind('<Button-3>', [\&HlistButton,$self,Tk::Ev('y')]);
    my $ad;
    $ad = $mw->Adjuster(
	-side=>'left',
	-widget=>$self->{HList});
    $ad->pack(
	-expand=>0,
	-fill=>'y',
	-side=>'left',
    );
    $self->{Adjuster} = $ad;
    my $nb;
    $nb = $mw->Scrolled('NoteBook',
	-backpagecolor=>'white',
	-dynamicgeometry=>0,
	-ipadx=>5,
	-ipady=>5,
	-tabpadx=>2,
	-tabpady=>2,
    );
    $nb->pack(
	-expand=>1,
	-fill=>'both',
	-side=>'left',
    );
    foreach my $s (qw/Session Tunables Autopush Modules Statistics/) {
	$self->{$s} = $nb->add($s,
	    -anchor=>'center',
	    -justify=>'center',
	    -label=>$s,
	    -state=>'normal',
	    -underline=>0,
	);
	$nb->pageconfigure($s,
	    -createcmd=>[\&CreatePage, $s, $self, $nb, $self->{$s}],
	    -raisecmd=>[\&RefreshPage, $s, $self, $nb, $self->{$s}],
	);
    }
}

sub NewFile {
    my $self = shift;
    my $newapp = new myapp;
    $newapp->create();
    return;
}

sub Preferences {
    my $self = shift;
    my $tree = $self->{Preferences};
    my $dialog = $self->{Dialog};
    unless (defined $dialog) {
	my ($pane,$page);
	unless (defined $tree) {
	    $tree = {};
	    $self->{Preferences} = $tree;
	}
	$dialog = $self->{MainWindow}->DialogBox(
	    -buttons=>[qw/OK Cancel Revert Defaults/],
	    -default_button=>'OK',
	    -height=>570,
	    -title=>'Preferences Dialog',
	    -width=>480,
	);
	$self->{Dialog} = $dialog;
	$dialog->OnDestroy([sub { my $self = shift; $self->{Preferences} = undef; return; },$self]);
	$dialog->geometry('480x570');
	my ($b,$h);
	$h = $dialog->Balloon();
	$b = $dialog->Subwidget('B_OK');
	$h->attach($b,
	    -balloonmsg=>"Commit all changes.",
	);
	$b = $dialog->Subwidget('B_Cancel');
	$h->attach($b,
	    -balloonmsg=>"Cancel all changes.",
	);
	$b = $dialog->Subwidget('B_Revert');
	$b->configure(
	    -command=>[sub {
		my $self = shift;
		return;
	    },$self],
	);
	$h->attach($b,
	    -balloonmsg=>"Revert all values to the values present \nwhen this dialog was opened.",
	);
	$b = $dialog->Subwidget('B_Defaults');
	$b->configure(
	    -command=>[sub {
		my $self = shift;
		my ($mib,$data);
		$mib = Mysession::Options;
		$data = $tree->{Session};
		foreach my $t ( @{$mib->{children}} ) {
		    my $label = $t->{label};
		    if ($t->{defaultValue}) {
			$data->{$label} = $t->{defaultValue};
		    } elsif ( $t->{syntax} =~ /INTEGER|UNSIGNED|SIGNED/i ) {
			if (scalar(%{$t->{enums}})) {
			    my @keys = keys %{$t->{enums}};
			    $data->{$label} = $keys[-1];
			} else {
			    $data->{$label} = 0;
			}
		    } else {
			$data->{$label} = '';
		    }
		}
		$mib = $SNMP::MIB{'strTunables'};
		$data = $tree->{Tunables};
		foreach my $t ( @{$mib->{children}} ) {
		    my $label = $t->{label};
		    if ($t->{defaultValue}) {
			$data->{$label} = $t->{defaultValue};
		    } elsif ( $t->{syntax} =~ /INTEGER|UNSIGNED|SIGNED/i ) {
			if (scalar(%{$t->{enums}})) {
			    my @keys = keys %{$t->{enums}};
			    $data->{$label} = $keys[-1];
			} else {
			    $data->{$label} = 0;
			}
		    } else {
			$data->{$label} = '';
		    }
		}
		return;
	    },$self],
	);
	$h->attach($b,
	    -balloonmsg=>"Set all values, that have defaults, to \ntheir default values.",
	);
	my $nb = $dialog->NoteBook(
	    -backpagecolor=>'white',
	    -dynamicgeometry=>1,
	    -ipadx=>5,
	    -ipady=>5,
	    -tabpadx=>2,
	    -tabpady=>2,
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
	$tree->{Session} = {} unless defined $tree->{Session};
	$page = $nb->add('Session',
	    -anchor=>'center',
	    -justify=>'center',
	    -label=>'Session',
	    -state=>'normal',
	    -underline=>0,
	);
	$pane = $page->Scrolled('Pane',
	    -relief=>'flat',
	    -scrollbars=>'osoe',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
	if (defined $pane) {
	    my $mib = Mysession::Options;
	    my @list = ( @{$mib->{children}} );
	    my $row = 0;
	    my ($l,$i,$u);
	    $tree->{Session} = {} unless defined $tree->{Session};
	    my $data = $tree->{Session};
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Parameter',
	    )->grid(
		-column=>0,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Value',
	    )->grid(
		-column=>1,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Units',
	    )->grid(
		-column=>2,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $row++;
	    while (my $t = pop @list) {
		my $label = $t->{label};
		my $help = $pane->Balloon();
		my $fmsg = '';
		my $hmsg = '';
		my $tmsg = '';
		$fmsg .= $t->{moduleID}."::".$label.":\n(".$t->{objectID}.")\n\n";
		$tmsg .= $t->{TCDescription} if $t->{TCDescription};
		chomp $tmsg;
		$fmsg .= "$tmsg\n\n" if $tmsg ne '';
		$tmsg .= $t->{units} if $tmsg eq '';
		$hmsg .= $t->{description} if $t->{description};
		chomp $hmsg;
		$fmsg .= $hmsg;
		$fmsg =~ s/ \n((\t)? )?/\n/g;
		$hmsg =~ s/ \n((\t)? )?/\n/g;
		$tmsg =~ s/ \n((\t)? )?/\n/g;
		$l = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$label.":",
		)->grid(
		    -column=>0,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($l,
		    -balloonmsg=>$fmsg,
		);
		my ($v,$k);
		if (my @keys = ( keys %{$t->{enums}} )) {
		    my $opts = [];
		    if ($t->{defaultValue}) {
			$k = $t->{defaultValue};
			$v = $t->{enums}{$k};
		    } else {
			$k = $keys[-1];
			$v = $t->{enums}{$k};
		    }
		    unless (defined $data->{$label}) {
			$data->{$label} = $k;
		    }
		    my $dv = $v;
		    while ($k = pop @keys) {
			$v = $t->{enums}{$k};
			push @{$opts}, [$k=>$v];
		    }
		    $i = $pane->Optionmenu(
			-anchor=>'w',
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-options=>$opts,
			-padx=>2,
			-pady=>0,
			#-text=>$data->{$label}[0],
			-textvariable=>\$data->{$label},
			-variable=>\$dv,
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} elsif ($t->{'type'} =~ /UNSIGNED|INTEGER|SIGNED|GAUGE/i) {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = 0;
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    my ($min,$max);
		    if ($t->{syntax} =~ /UNSIGNED32|GAUGE32/i) {
			$min = 0;
			$max = 4294967295;
		    } elsif ($t->{syntax} =~ /INTEGER32/i) {
			$min = -2147482647;
			$max =  2147482648;
		    } elsif ($t->{syntax} =~ /UNSIGNED64|GAUGE64/i) {
			$min = 0;
			$max = 18446744073709551615;
		    } elsif ($t->{syntax} =~ /INTEGER64/i) {
			$min = -9223372036854775807;
			$max =  9223372036854775808;
		    } else {
			$min = undef;
			$max = undef;
		    }
		    if (@{$t->{ranges}}) {
			$min = $t->{ranges}[0]->{low};
			$max = $t->{ranges}[-1]->{high};
		    }
		    if (defined $min and defined $max) {
			$tmsg = $t->{syntax}."($min..$max) ".$tmsg;
		    }
		    $i = $pane->NumEntry(
			-bg=>'white',
			-buttons=>1,
			-font=>'Helvetica 10',
			-justify=>'left',
			-maxvalue=>$max,
			-minvalue=>$min,
			-orient=>'horizontal',
			-readonly=>0,
			-relief=>'groove',
			-textvariable=>\$data->{$label},
			#-value=>$data->{$label},
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} else {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = '';
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    $i = $pane->Entry(
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-relief=>'groove',
			#-text=>$data->{$label},
			-textvariable=>\$data->{$label},
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		}
		my $units;
		if ($t->{'textualConvention'}) {
		    $units = $t->{'textualConvention'};
		    #$units .= " in ".$t->{'units'} if $t->{'units'};
		} elsif ($t->{'units'}) {
		    $units = $t->{'units'};
		} else {
		    $units = '';
		}
		$u = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$units,
		)->grid(
		    -column=>2,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($u,
		    -balloonmsg=>$tmsg,
		);
		$row++;
	    }
	}
	$tree->{Tunables} = {} unless defined $tree->{Tunables};
	$page = $nb->add('Tunables',
	    -anchor=>'center',
	    -justify=>'center',
	    -label=>'Tunables',
	    -state=>'normal',
	    -underline=>0,
	);
	$pane = $page->Scrolled('Pane',
	    -relief=>'flat',
	    -scrollbars=>'osoe',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
	if (defined $pane) {
	    my $mib = $SNMP::MIB{strTunables};
	    my @list = ( @{$mib->{children}} );
	    my $row = 0;
	    my ($l,$i,$u);
	    $tree->{Tunables} = {} unless defined $tree->{Tunables};
	    my $data = $tree->{Tunables};
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Tunable',
	    )->grid(
		-column=>0,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Value',
	    )->grid(
		-column=>1,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $l = $pane->Label(
		-anchor=>'center',
		-height=>1,
		-justify=>'center',
		-padx=>5,
		-pady=>5,
		-relief=>'groove',
		-text=>'Units',
	    )->grid(
		-column=>2,
		-row=>$row,
		-sticky=>'ewns',
	    );
	    $row++;
	    while (my $t = pop @list) {
		my $label = $t->{label};
		my $help = $pane->Balloon();
		my $fmsg = '';
		my $hmsg = '';
		my $tmsg = '';
		$fmsg .= $t->{moduleID}."::".$label.":\n(".$t->{objectID}.")\n\n";
		$tmsg .= $t->{TCDescription} if $t->{TCDescription};
		chomp $tmsg;
		$fmsg .= "$tmsg\n\n" if $tmsg ne '';
		$tmsg .= $t->{units} if $tmsg eq '';
		$hmsg .= $t->{description} if $t->{description};
		chomp $hmsg;
		$fmsg .= $hmsg;
		$fmsg =~ s/ \n((\t)? )?/\n/g;
		$hmsg =~ s/ \n((\t)? )?/\n/g;
		$tmsg =~ s/ \n((\t)? )?/\n/g;
		$l = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$label.":",
		)->grid(
		    -column=>0,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($l,
		    -balloonmsg=>$fmsg,
		);
		my ($v,$k);
		if (my @keys = ( keys %{$t->{enums}} )) {
		    my $opts = [];
		    if ($t->{defaultValue}) {
			$k = $t->{defaultValue};
			$v = $t->{enums}{$k};
		    } else {
			$k = $keys[-1];
			$v = $t->{enums}{$k};
		    }
		    unless (defined $data->{$label}) {
			$data->{$label} = $k;
		    }
		    my $dv = $v;
		    while ($k = pop @keys) {
			$v = $t->{enums}{$k};
			push @{$opts}, [$k=>$v];
		    }
		    $i = $pane->Optionmenu(
			-anchor=>'w',
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-options=>$opts,
			-padx=>2,
			-pady=>0,
			#-text=>$data->{$label}[0],
			-textvariable=>\$data->{$label},
			-variable=>\$dv,
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} elsif ($t->{'type'} =~ /UNSIGNED|INTEGER|SIGNED|GAUGE/i) {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = 0;
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    my ($min,$max);
		    if ($t->{syntax} =~ /UNSIGNED32|GAUGE32/i) {
			$min = 0;
			$max = 4294967295;
		    } elsif ($t->{syntax} =~ /INTEGER32/i) {
			$min = -2147482647;
			$max =  2147482648;
		    } elsif ($t->{syntax} =~ /UNSIGNED64|GAUGE64/i) {
			$min = 0;
			$max = 18446744073709551615;
		    } elsif ($t->{syntax} =~ /INTEGER64/i) {
			$min = -9223372036854775807;
			$max =  9223372036854775808;
		    } else {
			$min = undef;
			$max = undef;
		    }
		    if (@{$t->{ranges}}) {
			$min = $t->{ranges}[0]->{low};
			$max = $t->{ranges}[-1]->{high};
		    }
		    if (defined $min and defined $max) {
			$tmsg = $t->{syntax}."($min..$max) ".$tmsg;
		    }
		    $i = $pane->NumEntry(
			-bg=>'white',
			-buttons=>1,
			-font=>'Helvetica 10',
			-justify=>'left',
			-maxvalue=>$max,
			-minvalue=>$min,
			-orient=>'horizontal',
			-readonly=>0,
			-relief=>'groove',
			-textvariable=>\$data->{$label},
			#-value=>$data->{$label},
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		} else {
		    if ($t->{defaultValue}) {
			$v = $t->{defaultValue};
		    } else {
			$v = '';
		    }
		    $data->{$label} = $v
			unless defined $data->{$label};
		    $i = $pane->Entry(
			-bg=>'white',
			-font=>'Helvetica 10',
			-justify=>'left',
			-relief=>'groove',
			#-text=>$data->{$label},
			-textvariable=>\$data->{$label},
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $help->attach($i,
			-balloonmsg=>$hmsg,
		    );
		}
		my $units;
		if ($t->{'textualConvention'}) {
		    $units = $t->{'textualConvention'};
		    #$units .= " in ".$t->{'units'} if $t->{'units'};
		} elsif ($t->{'units'}) {
		    $units = $t->{'units'};
		} else {
		    $units = '';
		}
		$u = $pane->Label(
		    -anchor=>'w',
		    -font=>'Helvetica 10',
		    -height=>1,
		    -justify=>'left',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$units,
		)->grid(
		    -column=>2,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$help->attach($u,
		    -balloonmsg=>$tmsg,
		);
		$row++;
	    }
	}

	$tree->{Autopush} = {};
	$page = $nb->add('Autopush',
	    -anchor=>'center',
	    -justify=>'center',
	    -label=>'Autopush',
	    -state=>'normal',
	    -underline=>0,
	);
	$pane = $page->Scrolled('Pane',
	    -relief=>'flat',
	    -scrollbars=>'osoe',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);

	$tree->{Modules} = {};
	$page = $nb->add('Modules',
	    -anchor=>'center',
	    -justify=>'center',
	    -label=>'Modules',
	    -state=>'normal',
	    -underline=>0,
	);
	$pane = $page->Scrolled('Pane',
	    -relief=>'flat',
	    -scrollbars=>'osoe',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
    }
    my $answer = $dialog->Show();
    if ($answer eq 'OK') {
	$self->{data}->{Session} = {} unless defined $self->{data}->{Session};
	foreach my $k ( keys %{$tree->{Session}} ) {
	    $self->{data}->{Session}->{$k} = $tree->{Session}->{$k};
	}
	$self->{data}->{Tunables} = {} unless defined $self->{data}->{Tunables};
	foreach my $k ( keys %{$tree->{Tunables}} ) {
	    $self->{data}->{Tunables}->{$k} = $tree->{Tunables}->{$k};
	}
	$self->{data}->{Autopush} = {} unless defined $self->{data}->{Autopush};
	foreach my $k ( keys %{$tree->{Autopush}} ) {
	    $self->{data}->{Autopush}->{$k} = $tree->{Autopush}->{$k};
	}
	$self->{data}->{Modules} = {} unless defined $self->{data}->{Modules};
	foreach my $k ( keys %{$tree->{Modules}} ) {
	    $self->{data}->{Modules}->{$k} = $tree->{Modules}->{$k};
	}
    } elsif (defined $self->{data}->{Session}) {
	foreach my $k ( keys %{$self->{data}->{Session}} ) {
	    $tree->{Session}->{$k} = $self->{data}->{Session}->{$k};
	}
	foreach my $k ( keys %{$self->{data}->{Tunables}} ) {
	    $tree->{Tunables}->{$k} = $self->{data}->{Tunables}->{$k};
	}
	foreach my $k ( keys %{$self->{data}->{Autopush}} ) {
	    $tree->{Autopush}->{$k} = $self->{data}->{Autopush}->{$k};
	}
	foreach my $k ( keys %{$self->{data}->{Modules}} ) {
	    $tree->{Modules}->{$k} = $self->{data}->{Modules}->{$k};
	}
    } else {
	$self->{data}->{Session} = {};
	$self->{data}->{Tunables} = {};
	$self->{data}->{Autopush} = {};
	$self->{data}->{Modules} = {};
    }
    return;
}

sub ShowVersion {
    my $self = shift;
    my $dialog = $self->{MainWindow}->DialogBox(
	-title=>'Program Version',
	-default_button=>'Dismiss',
	-buttons=>[qw/Dismiss/],
    );
    $dialog->resizable(0,0);
    $dialog->iconimage('icon');
    $dialog->iconname($title);
    $dialog->Label(
	-image=>'icon',
	-relief=>'flat',
	-text=>$Title,
	-compound=>'left',
	-justify=>'left',
	-padx=>10,
    )->pack(
	-side=>'top',
	-fill=>'x',
	-expand=>0,
    );
    my $lines = $Version;
    $lines =~ s/[^\n]//g;
    $lines = length($lines) + 1;
    my $text = $dialog->Scrolled('ROText',
	-scrollbars=>'osoe',
	-width=>80,
	-wrap=>'word',
	-font=>'Arial 8',
	-relief=>'groove',
	-height=>$lines,
	-bg=>'white smoke',
    )->pack(
	-side=>'top',
	-fill=>'both',
	-expand=>1,
    );
    $text->insert('0.0', $Version);
    $dialog->Show();
}

sub ShowUsage {
    my $self = shift;
}

sub ShowCopying {
    my $self = shift;
    my $dialog = $self->{MainWindow}->DialogBox(
	-title=>'Program Copying Conditions',
	-default_button=>'Accept',
	-buttons=>[qw/Accept Refuse/],
    );
    $dialog->resizable(0,0);
    $dialog->iconimage('icon');
    $dialog->iconname($title);
    $dialog->Label(
	-image=>'icon',
	-relief=>'flat',
	-text=>$Title,
	-compound=>'left',
	-justify=>'left',
	-padx=>10,
    )->pack(
	-side=>'top',
	-fill=>'x',
	-expand=>0,
    );
    my $lines = $Copying;
    $lines =~ s/[^\n]//g;
    $lines = length($lines) + 1 + 15;
    my $tx = $dialog->Scrolled('ROText',
	-scrollbars=>'osoe',
	-width=>80,
	-wrap=>'word',
	-font=>'Arial 8',
	-relief=>'groove',
	-height=>$lines,
	-bg=>'white smoke',
    )->pack(
	-side=>'top',
	-fill=>'both',
	-expand=>1,
    );
    $tx->insert('0.0', $Copying);
    exit 0 if ($dialog->Show() eq 'Refuse');
}

sub ShowHelp {
    my $self = shift;
    my $dialog = $self->{MainWindow}->DialogBox();
}

sub HlistAddHost {
    my $self = shift;
    my $host = new Host($self);
    my $answer = $host->EditHost($self);
    return unless $answer eq 'OK';
    push @{$self->{hosts}}, $host;
    push @{$self->{data}->{hosts}}, $host->{data};
    my $hl = $self->{HList};
    my $entry = $hl->addchild('',
	-data=>$host,
	-itemtype=>'text',
	-text=>$host->{data}->{Session}->{DestHost},
    );
    $host->{indicator} = 'cbook-red';
    $hl->indicator('create', $entry,
	-image=>'cbook-red',
	-itemtype=>'image',
    );
    $hl->itemCreate($entry, 1,
	-itemtype=>'text',
	-text=>'0',
    );
}

sub HlistEditHost {
    my $self = shift;
    my $item = shift;
    my $hl = $self->{HList};
    my $host = $hl->entrycget($item, '-data');
    my $answer = $host->EditHost($self);
}

sub HlistDelHost {
    my $self = shift;
    my $item = shift;
    my $hl = $self->{HList};
    my $host = $hl->entrycget($item, '-data');
    my $temp;
    $temp = [];
    while (my $h = pop @{$self->{hosts}}) {
	push @{$temp}, $h unless $h eq $host;
    }
    $self->{hosts} = $temp;
    $temp = [];
    while (my $h = pop @{$self->{data}->{hosts}}) {
	push @{$temp}, $h unless $h eq $host->{data};
    }
    $self->{data}->{hosts} = $temp;
    $hl->delete('entry', $item);
}

sub HlistConnect {
    my $self = shift;
    my $item = shift;
    my $hl = $self->{HList};
    my $host = $hl->entrycget($item, '-data');
    my $answer = $host->ConnectHost($self);
    if (defined($answer)) {
	$hl->indicator('configure', $item,
	    -image=>'cbook-grn',
	    -itemtype=>'image',
	);
	$host->{indicator} = 'cbook-grn';
    } else {
	$hl->indicator('configure', $item,
	    -image=>'cbook-red',
	    -itemtype=>'image',
	);
	$host->{indicator} = 'cbook-red';
    }
}

sub HlistAddModule {
    my $self = shift;
    my $item = shift;
}

sub HlistEditModule {
    my $self = shift;
    my $item = shift;
}

sub HlistDelModule {
    my $self = shift;
    my $item = shift;
}

sub Indicator {
    my $self = shift;
    my $item = shift;
    my $what = shift;
    my $hl = $self->{HList};
    my $host = $hl->entrycget($item, '-data');
    if ($what eq '<Arm>') {
	$hl->indicator('configure', $item,
	    -image=>'cbook-blu',
	    -itemtype=>'image',
	);
    } elsif ($what eq '<Activate>') {
	if ($host->{indicator} =~ /cbook-(red|grn)/) {
	    $hl->indicator('configure', $item,
		-image=>'obook',
		-itemtype=>'image',
	    );
	    $host->{indicator} = 'obook';
	} else {
	    $hl->indicator('configure', $item,
		-image=>'cbook-grn',
		-itemtype=>'image',
	    );
	    $host->{indicator} = 'cbook-grn';
	}
    }
}

sub Select {
    my $self = shift;
    my $item = shift;
    my $hl = $self->{HList};
    if (defined $item and $item ne '') {
	if (not defined $hl->info('parent', $item)) {
	    $self->HlistEditHost($item);
	} else {
	    $self->HlistEditModule($item);
	}
    }
}

sub Browse {
    my $self = shift;
    my $item = shift;
    my $hl = $self->{HList};
    my $mh = $self->{HostMenu};
    my $mv = $self->{ViewMenu};
    if (defined $item and $item ne '') {
	my $parent = $hl->info('parent', $item);
	if (defined $parent) {
	    $mh->entryconfigure('Edit Module', -state=>'normal', -command=>[\&HlistEditModule,$self,$item],);
	    $mh->entryconfigure('Delete Module', -state=>'normal', -command=>[\&HlistDelModule,$self,$item],);
	    $mh->entryconfigure('Edit Host', -state=>'normal', -command=>[\&HlistEditHost,$self,$parent],);
	    $mh->entryconfigure('Delete Host', -state=>'normal', -command=>[\&HlistDelHost,$self,$parent],);
	    $mh->entryconfigure('Connect', -state=>'normal', -command=>[\&HlistConnect,$self,$parent],);
	    $mh->entryconfigure('Add Module', -state=>'normal', -command=>[\&HlistAddModule,$self,$parent],);
	    $mv->entryconfigure('Session View...', -state=>'normal', -command=>[\&HlistViewSession,$self,$parent],);
	    $mv->entryconfigure('Tunables View...', -state=>'normal', -command=>[\&HlistViewTunables,$self,$parent],);
	    $mv->entryconfigure('Autopush View...', -state=>'normal', -command=>[\&HlistViewAutopush,$self,$parent],);
	    $mv->entryconfigure('Modules View...', -state=>'normal', -command=>[\&HlistViewModules,$self,$parent],);
	    $mv->entryconfigure('Statistics View...', -state=>'normal', -command=>[\&HlistViewStatistics,$self,$parent],);
	} else {
	    $mh->entryconfigure('Edit Host', -state=>'normal', -command=>[\&HlistEditHost,$self,$item],);
	    $mh->entryconfigure('Delete Host', -state=>'normal', -command=>[\&HlistDelHost,$self,$item],);
	    $mh->entryconfigure('Connect', -state=>'normal', -command=>[\&HlistConnect,$self,$item],);
	    $mh->entryconfigure('Add Module', -state=>'normal', -command=>[\&HlistAddModule,$self,$item],);
	    $mh->entryconfigure('Edit Module', -state=>'disabled', -command=>[\&HlistEditModule,$self,$item],);
	    $mh->entryconfigure('Delete Module', -state=>'disabled', -command=>[\&HlistDelModule,$self,$item],);
	    $mv->entryconfigure('Session View...', -state=>'normal', -command=>[\&HlistViewSession,$self,$item],);
	    $mv->entryconfigure('Tunables View...', -state=>'normal', -command=>[\&HlistViewTunables,$self,$item],);
	    $mv->entryconfigure('Autopush View...', -state=>'normal', -command=>[\&HlistViewAutopush,$self,$item],);
	    $mv->entryconfigure('Modules View...', -state=>'normal', -command=>[\&HlistViewModules,$self,$item],);
	    $mv->entryconfigure('Statistics View...', -state=>'normal', -command=>[\&HlistViewStatistics,$self,$item],);
	}
    } else {
	$mh->entryconfigure('Edit Host', -state=>'disabled', -command=>[\&HlistEditHost,$self,$item],);
	$mh->entryconfigure('Delete Host', -state=>'disabled', -command=>[\&HlistDelHost,$self,$item],);
	$mh->entryconfigure('Connect Host', -state=>'disabled', -command=>[\&HlistConnect,$self,$item],);
	$mh->entryconfigure('Add Module', -state=>'disabled', -command=>[\&HlistAddModule,$self,$item],);
	$mh->entryconfigure('Edit Module', -state=>'disabled', -command=>[\&HlistEditModule,$self,$item],);
	$mh->entryconfigure('Delete Module', -state=>'disabled', -command=>[\&HlistDelModule,$self,$item],);
	$mv->entryconfigure('Session View...', -state=>'disabled', -command=>[\&HlistViewSession,$self,$item],);
	$mv->entryconfigure('Tunables View...', -state=>'disabled', -command=>[\&HlistViewTunables,$self,$item],);
	$mv->entryconfigure('Autopush View...', -state=>'disabled', -command=>[\&HlistViewAutopush,$self,$item],);
	$mv->entryconfigure('Modules View...', -state=>'disabled', -command=>[\&HlistViewModules,$self,$item],);
	$mv->entryconfigure('Statistics View...', -state=>'disabled', -command=>[\&HlistViewStatistics,$self,$item],);
    }
}

sub HlistButton {
    my $hl = shift;
    my $self = shift;
    my $y = shift;
    #print "Y coordinate is $y";
    my $m = $self->{HlistPopup};
    my $item = $hl->nearest($y);
    #print "Nearest item is $item" if defined $item;
    unless ($m) {
	$m = $self->{MainWindow}->Menu(
	    -tearoff=>0,
	    -title=>'Hlist Popup',
	    -type=>'normal',
	);
	$self->{HlistPopup} = $m;
	$m->add('command', -accelerator=>'~A', -command=>[\&HlistAddHost,$self,$item], -label=>'Add Host', -underline=>0,);
	$m->add('command', -accelerator=>'~E', -command=>[\&HlistEditHost,$self,$item], -label=>'Edit Host', -underline=>0,);
	$m->add('command', -accelerator=>'~D', -command=>[\&HlistDelHost,$self,$item], -label=>'Delete Host', -underline=>0,);
	$m->add('separator');
	$m->add('command', -accelerator=>'~a', -command=>[\&HlistAddModule,$self,$item], -label=>'Add Module', -underline=>0,);
	$m->add('command', -accelerator=>'~e', -command=>[\&HlistEditModule,$self,$item], -label=>'Edit Module', -underline=>0,);
	$m->add('command', -accelerator=>'~d', -command=>[\&HlistDelModule,$self,$item], -label=>'Delete Module', -underline=>0,);
	$m->add('separator');
	$m->add('command', -accelerator=>'~C', -command=>[\&HlistConnect,$self,$item], -label=>'Connect', -underline=>0,);
	$m->add('separator');
	$m->add('command', -accelerator=>'~S', -command=>[\&HlistViewSession,$self,$item], -label=>'Session View...', -underline=>0,);
	$m->add('command', -accelerator=>'~T', -command=>[\&HlistViewTunables,$self,$item], -label=>'Tunables View...', -underline=>0,);
	$m->add('command', -accelerator=>'~A', -command=>[\&HlistViewAutopush,$self,$item], -label=>'Autopush View...', -underline=>0,);
	$m->add('command', -accelerator=>'~M', -command=>[\&HlistViewModules,$self,$item], -label=>'Modules View...', -underline=>0,);
	$m->add('command', -accelerator=>'~T', -command=>[\&HlistViewStatistics,$self,$item], -label=>'Statistics View...', -underline=>1,);
    }
    $m->Popup(
	-popanchor=>'nw',
	-popover=>'cursor',
    );
    if (defined $item and $item ne '') {
	$m->entryconfigure('Edit Host', -state=>'normal',);
	$m->entryconfigure('Delete Host', -state=>'normal',);
	$m->entryconfigure('Add Module', -state=>'normal',);
	if (not defined $hl->info('parent', $item)) {
	    $m->entryconfigure('Edit Module', -state=>'disabled',);
	    $m->entryconfigure('Delete Module', -state=>'disabled',);
	} else {
	    $m->entryconfigure('Edit Module', -state=>'normal',);
	    $m->entryconfigure('Delete Module', -state=>'normal',);
	}
	$m->entryconfigure('Connect', -state=>'normal',);
	$m->entryconfigure('Session View...', -state=>'normal',);
	$m->entryconfigure('Tunables View...', -state=>'normal',);
	$m->entryconfigure('Autopush View...', -state=>'normal',);
	$m->entryconfigure('Modules View...', -state=>'normal',);
	$m->entryconfigure('Statistics View...', -state=>'normal',);
    } else {
	$m->entryconfigure('Edit Host', -state=>'disabled',);
	$m->entryconfigure('Delete Host', -state=>'disabled',);
	$m->entryconfigure('Add Module', -state=>'disabled',);
	$m->entryconfigure('Edit Module', -state=>'disabled',);
	$m->entryconfigure('Delete Module', -state=>'disabled',);
	$m->entryconfigure('Connect', -state=>'disabled',);
	$m->entryconfigure('Session View...', -state=>'disabled',);
	$m->entryconfigure('Tunables View...', -state=>'disabled',);
	$m->entryconfigure('Autopush View...', -state=>'disabled',);
	$m->entryconfigure('Modules View...', -state=>'disabled',);
	$m->entryconfigure('Statistics View...', -state=>'disabled',);
    }
    return;
}

sub DismissHelp {
    my $self = shift;
    my $w = shift;
    $w->withdraw;
}

sub DestroyHelp {
    my $self = shift;
    $self->{MibHelp} = undef;
}

sub MibHelp {
    my $event = shift;
    my $self = shift;
    my $mib = shift;
    my $tl = $self->{MibHelp};
    my $tx = $self->{HelpText};
    unless ($tl) {
	my $bt;
	$tl = $self->{MainWindow}->Toplevel();
	$tl->OnDestroy([\&DestroyHelp, $self, $tl]);
	$tx = $tl->Scrolled('ROText',
	    -scrollbars=>'osoe',
	    -padx=>5,
	    -pady=>5,
	    -relief=>'flat',
	    -width=>80,
	    -wrap=>'none',
	)->pack(
	    -expand=>1,
	    -fill=>'both',
	    -side=>'top',
	);
	$bt = $tl->Button(
	    -command=>[\&DismissHelp,$self,$tl],
	    -default=>'active',
	    -text=>'Dismiss',
	)->pack(
	    -expand=>0,
	    -fill=>'none',
	    -side=>'bottom',
	);
	$self->{MibHelp} = $tl;
	$self->{HelpText} = $tx;
    }
    $tl->title($mib->{'label'});
    my $text = $tx->Subwidget('scrolled');
    $text->delete('0.0', 'end');
    #$text->insert('end', "Keys:    ".join(', ', (keys %{$mib})));
    $text->insert('end', "ID:      $mib->{'subID'}\n")
	if $mib->{'subID'};
    $text->insert('end', "Object:  $mib->{'objectID'}\n")
	if $mib->{'objectID'};
    $text->insert('end', "Label:   $mib->{'label'}\n")
	if $mib->{'label'};
    $text->insert('end', "Module:  $mib->{'moduleID'}\n")
	if $mib->{'moduleID'};
    $text->insert('end', "Type:    $mib->{'type'}\n")
	if $mib->{'type'};
    $text->insert('end', "Access:  $mib->{'access'}\n")
	if $mib->{'access'};
    $text->insert('end', "Status:  $mib->{'status'}\n")
	if $mib->{'status'};
    $text->insert('end', "Augments:$mib->{'augments'}\n")
	if $mib->{'augments'};
    $text->insert('end', "Syntax:  $mib->{'syntax'}\n")
	if $mib->{'syntax'};
    if (scalar( ( %{$mib->{'enums'}} ) )) {
	my $firstline = 'yes';
	$text->insert('end', "Enums:   ");
	my @keys = ( keys %{$mib->{'enums'}} );
	while (my $k = pop @keys) {
	    $text->insert('end', ",\n\t ") unless $firstline eq 'yes';
	    $text->insert('end', "$k($mib->{'enums'}{$k})");
	    $firstline = 'no';
	}
	$text->insert('end', "\n");
    }
    $text->insert('end', "Indexes: ".join(", ", @{$mib->{'indexes'}})."\n")
	if scalar( @{$mib->{'indexes'}} );
    if (scalar( @{$mib->{'ranges'}} )) {
	my $firstline = 'yes';
	$text->insert('end', "Ranges:  ");
	my @ranges = @{$mib->{'ranges'}};
	while (my $r = pop @ranges) {
	    $text->insert('end', ", ") unless $firstline eq 'yes';
	    $text->insert('end', "$r->{low}..$r->{high}");
	    $firstline = 'no';
	}
	$text->insert('end', "\n");
    }
    $text->insert('end', "Units:   $mib->{'units'}\n")
	if $mib->{'units'};
    $text->insert('end', "Hint:    $mib->{'hint'}\n")
	if $mib->{'hint'};
    $text->insert('end', "Refer:   $mib->{'reference'}\n")
	if $mib->{'reference'};
    $text->insert('end', "Default: $mib->{'defaultValue'}\n")
	if $mib->{'defaultValue'};
    $text->insert('end', "TC:      $mib->{'textualConvention'}\n")
	if $mib->{'textualConvention'};
    if ($mib->{'TCDescription'}) {
	$text->insert('end', "TC Description:\n");
	foreach my $line ( split("\n", " $mib->{'TCDescription'}") ) {
	    $line =~ s/^\t//;
	    $text->insert('end', "\t$line\n");
	}
    }
    if ($mib->{'description'}) {
	$text->insert('end', "Description:\n");
	foreach my $line ( split("\n", " $mib->{'description'}") ) {
	    $line =~ s/^\t//;
	    $text->insert('end', "\t$line\n");
	}
    }
    $tl->deiconify unless $tl->viewable;
}

sub CreatePage {
    my $item = shift;
    my $self = shift;
}

sub RefreshPage {
    my $item = shift;
    my $self = shift;
}

sub CreateTunables {
    my $self = shift;
}

sub CreateTunables_old {
    my $self = shift;
    my $nb = shift;
    my $page = shift;
    my $mib = $SNMP::MIB{'strTunables'};
    my @list = ( @{$mib->{'children'}} );
    my $row = 0;
    while (my $t = pop @list) {
	my ($l,$e,$u,$f,$m,$b,$h,$bh,$h2,$bh2,$bhdr);
	$h = $page->Balloon();
	$bhdr = $t->{'moduleID'}."::".$t->{'label'}.":\n(".$t->{'objectID'}.")\n\n";
	$bh = '';
	$bh = $t->{'description'} if $t->{'description'};
	$bh =~ s/ \n((\t)? )?/\n/g;
	$h2 = $page->Balloon();
	$bh2 = '';
	$bh2 = "$t->{'TCDescription'}\n\n" if $t->{'TCDescription'};
	$bh2 =~ s/ \n((\t)? )?/\n/g;
	$bh = $bhdr.$bh2.$bh;
	$l = $page->Label(
	    -height=>1,
	    -justify=>'right',
	    -padx=>2,
	    -pady=>2,
	    -relief=>'flat',
	    -text=>$t->{'label'}.":",
	)->grid(
	    -column=>0,
	    -row=>$row,
	    -sticky=>'ens',
	);
	$l->bind('<Button-1>', [\&MibHelp, $self, $t]);
	$h->attach($l,
	    -balloonmsg=>$bh,
	);
	if ($t->{'type'} =~ /UNSIGNED|INTEGER|SIGNED/i) {
	    if (scalar( ( %{$t->{'enums'}} ) )) {
		if (0) {
		    $f = $page->Frame(
			-relief=>'groove',
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    my @keys = ( keys %{$t->{'enums'}} );
		    my $value = $t->{'enums'}{$keys[$#keys]};
		    while (my $k = pop @keys) {
			$e = $f->Radiobutton(
			    -anchor=>'w',
			    -bg=>'white',
			    -command=>[sub { my $var = shift; my $val = shift; $$var = $val; },\$value,$t->{'enums'}{$k}],
			    -height=>1,
			    -indicatoron=>0,
			    -justify=>'left',
			    -relief=>'groove',
			    -text=>$k,
			    -value=>$t->{'enums'}{$k},
			    -variable=>\$value,
			);
			$e->pack(
			    -anchor=>'w',
			    -expand=>1,
			    -fill=>'x',
			);
		    }
		} elsif (1) {
		    my @keys = ( keys %{$t->{'enums'}} );
		    my $value = $t->{'enums'}{$keys[$#keys]};
		    my $textvalue = $keys[$#keys];
		    if ($t->{'defaultValue'}) {
			$textvalue = $t->{'defaultValue'};
			$value = $t->{'enums'}{$textvalue};
		    }
		    $b = $page->Menubutton(
			-anchor=>'nw',
			-bg=>'white',
			-height=>1,
			-justify=>'left',
			-padx=>0,
			-pady=>0,
			-relief=>'groove',
			#-text=>$keys[$#keys],
			-textvariable=>\$textvalue,
			-width=>20,
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ewns',
		    );
		    $h->attach($b,
			-balloonmsg=>$bh,
		    );
		    $m = $b->Menu(
			-tearoff=>0,
			-title=>"$t->{'label'} Selection",
			-type=>'normal',
		    );
		    $b->configure(
			-menu=>$m,
		    );
		    while (my $k = pop @keys) {
			$m->add('radiobutton',
			    -bg=>'white',
			    -command=>[sub {
				my $txt = shift;
				my $lab = shift;
				my $var = shift;
				my $val = shift;
				$$txt = $lab;
				$$var = $val;
			    },\$textvalue,$k,\$value,$t->{'enums'}{$k}],
			    -indicatoron=>0,
			    -label=>$k,
			    -value=>$t->{'enums'}{$k},
			    -variable=>\$value,
			);
		    }
		} else {
		    my @keys = ( keys %{$t->{'enums'}} );
		    my $value = $t->{'enums'}{$keys[$#keys]};
		    my @opts = ();
		    while (my $k = pop @keys) {
			push @opts, [$k=>$t->{'enums'}{$k}];
		    }
		    $e = $page->Optionmenu(
			-command=>[sub {
			    my $self = shift;
			    return;
			},$self,$e],
			-options=>[@opts],
			-variable=>\$value,
		    );
		    $e->pack(
			-anchor=>'w',
			-expand=>1,
			-fill=>'x',
		    );
		}
	    } else {
		$e = $page->NumEntry(
		    -bg=>'white',
		    -orient=>'horizontal',
		    -relief=>'groove',
		    -width=>21,
		)->grid(
		    -column=>1,
		    -row=>$row,
		    -sticky=>'wns',
		);
		$e->configure(
		    -text=>$t->{'defaultValue'},
		) if $t->{'defaultValue'};
		$h->attach($e,
		    -balloonmsg=>$bh,
		);
	    }
	} else {
	    $e = $page->Entry(
		-bg=>'white',
		-relief=>'groove',
		-text=>'',
		-width=>24,
	    )->grid(
		-column=>1,
		-row=>$row,
		-sticky=>'wns',
	    );
	    $e->configure(
		-text=>$t->{'defaultValue'},
	    ) if $t->{'defaultValue'};
	    $h->attach($e,
		-balloonmsg=>$bh,
	    );
	}
	my $units = '';
	if ($t->{'textualConvention'}) {
	    $units = $t->{'textualConvention'};
	    $units .= " in ".$t->{'units'} if $t->{'units'};
	} elsif ($t->{'units'}) {
	    $units = $t->{'units'};
	}
	$u = $page->Label(
	    -height=>1,
	    -justify=>'left',
	    -padx=>2,
	    -pady=>2,
	    -relief=>'flat',
	    -text=>$units,
	)->grid(
	    -column=>2,
	    -row=>$row,
	    -sticky=>'wns',
	);
	$h2->attach($u,
	    -balloonmsg=>$bh2,
	) if $t->{'textualConvention'};
	$row++;
    }
}

sub RefreshTunables {
    my $self = shift;
}

sub CreateStatistics {
    my $self = shift;
}

sub CreateStatistics_old {
    my $self = shift;
    my $nb = shift;
    my $page = shift;
    my $mib = $SNMP::MIB{'strStatsEntry'};
    my @list = ( @{$mib->{'children'}} );
    my $rows = {};
    my $row = 0;
    for my $c ( @list ) {
	if ($c->{'label'} eq $mib->{'indexes'}[0]) {
	    $rows = $c->{'enums'};
	    last;
	}
    }
    my @rows = (sort keys %{$rows});
    my @temp = ( @list );
    my $col = 0;
    while (my $h = pop @temp) {
	my $l;
	$l = $page->Label(
	    -height=>1,
	    -justify=>'right',
	    -padx=>2,
	    -pady=>2,
	    -relief=>'groove',
	    -text=>$h->{'label'},
	    -width=>24,
	)->grid(
	    -column=>$col,
	    -row=>$row,
	    -sticky=>'ens',
	);
	$col++;
    }
    while (my $r = shift @rows) {
	$row++; $col = 0;
	@temp = ( @list );
	while (my $t = pop @temp) {
	    if ($t->{'label'} eq 'strStatsStructure') {
		my $l = $page->Label(
		    -height=>1,
		    -justify=>'right',
		    -padx=>2,
		    -pady=>2,
		    -relief=>'groove',
		    -text=>$r,
		    -width=>24,
		)->grid(
		    -column=>$col,
		    -row=>$row,
		    -sticky=>'ens',
		);
	    } elsif ($t->{'type'} =~ /UNSIGNED|INTEGER|SIGNED/i) {
		if (scalar( ( %{$t->{'enums'}} ) )) {
		    my @keys = ( keys %{$t->{'enums'}} );
		    my $value = $t->{'enums'}{$keys[$#keys]};
		    my $textvalue = $keys[$#keys];
		    if ($t->{'defaultValue'}) {
			$textvalue = $t->{'defaultValue'};
			$value = $t->{'enums'}{$textvalue};
		    }
		    $b = $page->Menubutton(
			-anchor=>'nw',
			-bg=>'white',
			-height=>1,
			-justify=>'left',
			-padx=>0,
			-pady=>0,
			-relief=>'groove',
			#-text=>$keys[$#keys],
			-textvariable=>\$textvalue,
			-width=>20,
		    )->grid(
			-column=>1,
			-row=>$row,
			-sticky=>'ens',
		    );
		    my $m = $b->Menu(
			-tearoff=>0,
			-title=>"$t->{'label'} Selection",
			-type=>'normal',
		    );
		    $b->configure(
			-menu=>$m,
		    );
		    while (my $k = pop @keys) {
			$m->add('radiobutton',
			    -bg=>'white',
			    -command=>[sub {
				my $txt = shift;
				my $lab = shift;
				my $var = shift;
				my $val = shift;
				$$txt = $lab;
				$$var = $val;
			    },\$textvalue,$k,\$value,$t->{'enums'}{$k}],
			    -indicatoron=>0,
			    -label=>$k,
			    -value=>$t->{'enums'}{$k},
			    -variable=>\$value,
			);
		    }
		} else {
		    my $e = $page->NumEntry(
			-bg=>'white',
			-orient=>'horizontal',
			-relief=>'groove',
			-text=>'0',
			-width=>24,
		    )->grid(
			-column=>$col,
			-row=>$row,
			-sticky=>'wns',
		    );
		    $e->configure(
			-text=>$t->{'defaultValue'},
		    ) if $t->{'defaultValue'};
		}
	    } else {
		my $e = $page->Entry(
		    -bg=>'white',
		    -relief=>'groove',
		    -text=>'',
		    -width=>24,
		)->grid(
		    -column=>$col,
		    -row=>$row,
		    -sticky=>'ewns',
		);
		$e->configure(
		    -text=>$t->{'defaultValue'},
		) if $t->{'defaultValue'};
	    }
	    $col++;
	}
    }
}

sub RefreshStatistics {
    my $self = shift;
}

sub CreateAutopush {
    my $self = shift;
}

sub RefreshAutopush {
    my $self = shift;
}

sub CreateModules {
    my $self = shift;
}

sub RefreshModules {
    my $self = shift;
}

package main;
use strict;

$SNMP::save_descriptions = 1;
SNMP::initMib();
SNMP::addMibDirs(qw(/home/brian/os8/mibs /home/brian/os8/streams/src/mibs));
SNMP::loadModules('OPENSS7-STREAMS-MIB');

my $myapp = new myapp;
$myapp->create();
$myapp->ShowCopying();

Tk::MainLoop;

# =============================================================================
#
# $Log$
# =============================================================================
# vim: ft=perl sw=4 fo=tcqlorn
