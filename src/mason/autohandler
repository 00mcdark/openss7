% # vim: ft=mason sw=4 fo+=tcqlorn
<%init>
    use Fcntl qw(:DEFAULT :flock);
    use DB_File;
    use MIME::Base64;
    use Storable qw(nfreeze thaw);
    use Apache::Constants qw(:common);
    my $self = $m->base_comp;
    my $page = $self->name;
</%init>
<%args>
    $hn	    => undef
    $ip	    => undef
    $un	    => undef
    $pw	    => undef
</%args>
<%perl>
    $m->call_next unless (
	    $page eq 'OPENSS7credentials' or
	    $page eq 'netrc.openss7'	  or
	    $page eq 'openss7.repo'	  or
	    $page eq 'mirrorlist'	  or
	    $page eq 'openss7.list'	  or
	    $page eq 'repoindex.xml'	  or
	    $page eq 'media.cfg'	  or
	    $page eq 'OPENSS7.service' );

    my ($fd,$url,$distro,$relver,$osarch,$media,$branch,$subrep);
    my ($username,$userpass,$usergrps,$useraccs,$usercred,$userdata,$userinfo,$userauth,$userdflt,$date);
    my ($hostname,$hostpass,$hostgrps,$hostaccs,$hostcred,$hostdata,$hostinfo,$hostauth,$testpass);

    $date = `date -Iseconds`; chomp $date;

    unless ( exists $ENV{'HTTPS'} and $ENV{'HTTPS'} eq 'on' ) {
	$r->log_reason("https access required", $r->uri);
	$m->abort(403)
    }

    if ( $page eq 'openss7.repo'	or
	 $page eq 'mirrorlist'		or
	 $page eq 'OPENSS7credentials'	or
	 $page eq 'netrc.openss7'	or
	 $page eq 'openss7.list'	or
	 $page eq 'media.cfg'		)
    {
	$distro = $ARGS{'distro'};
	$relver = $ARGS{'relver'};
	$osarch = $ARGS{'osarch'};

	if ( ($page eq 'openss7.repo'	or
	      $page eq 'openss7.list'	or
	      $page eq 'media.cfg'	) and
	     (!$distro or !$relver or !$osarch) )
	{
	    if ( $page eq 'openss7.repo' )
	    {
		if ( $r->uri !~ m,/repo/rpms/(([^/].*)/)?repodata/(.*)$, ) {
		    $r->log_reason("file is out of place", $r->filename);
		    $m->abort(404);
		}
		$url = $2;
	    }
	    elsif ( $page eq 'openss7.list' )
	    {
		if ( $r->uri !~ m,/repo/debs/(([^/].*)/)?(.*)$, ) {
		    $r->log_reason("file is out of place", $r->filename);
		    $m->abort(404);
		}
		$url = $2;
	    }
	    elsif ( $page eq 'media.cfg' )
	    {
		if ( $r->uri !~ m,/repo/rpms/(([^/].*)/)?media/media_info/(.*)$, ) {
		    $r->log_reason("file is out of place", $r->filename);
		    $m->abort(404);
		}
		$url = $2;
	    }
	    if ($url) {
		my @fields = split(/\//,$url);

		if ($#fields < 2 or $#fields > 4) {
		    $r->log_reason("incorrect data in path", $r->uri);
		    $m->abort(404);
		}
		if ($#fields == 2) {
		    $fields[3] = 'base';
		    $fields[4] = 'full';
		}
		if ($#fields == 3) {
		    if ($fields[3] =~ m/^(main|debug|devel|source)$/) {
			$fields[4] = $fields[3];
			$fields[3] = 'base';
		    } else {
			$fields[4] = 'full';
		    }
		}
		$fields[3] = 'base' unless ($fields[5]);
		$fields[4] = 'full' unless ($fields[6]);

		($distro,$relver,$osarch,$branch,$subrep) = @fields;
	    }
	}
	if ( $page eq 'mirrorlist' )
	{
	    $branch = $ARGS{'branch'}; $branch = 'base' unless ($branch);
	    $subrep = $ARGS{'subrep'}; $subrep = 'full' unless ($subrep);
	}
    }

    if ( $page eq 'mirrorlist' ) {
	unless ($un) {
	    $r->log_reason("un argument required", $r->uri.'?'.scalar($r->args));
	    $m->abort(403);
	}
	$username = $un;
	$testpass = '';
    } else {
	$username = $ENV{'REMOTE_USER'};
	unless ( $username ) {
	    $r->note_basic_auth_failure;
	    $r->log_reason("require user name", $r->url);
	    $m->abort(401);
	}
	my $ret; ($ret, $testpass) = $r->get_basic_auth_pw;
    }

    open($fd, ">", '/var/www/mason/repousers.LOCK') or die $!;
    flock($fd, LOCK_EX);
    tie my %users, 'DB_File', '/var/www/mason/repousers', O_CREAT|O_RDWR, 0640 or die $!;

    unless ( exists $users{$username} ) {
	$r->note_basic_auth_failure;
	$r->log_reason("user $username not in database", $r->uri);
	$m->abort(401);
    }

    ($usercred,$usergrps,$userdata) = split(/:/,$users{$username},3);
    $useraccs = ",$usergrps,";

    if ($userdata) {
	$userinfo = thaw(decode_base64($userdata));
    } else {
	$userinfo = {};
    }
    $userpass = $userinfo->{'REMOTE_PASS'} if ( exists $userinfo->{'REMOTE_PASS'} );

    if ( $testpass ne $userpass or $testpass eq '' ) {
	if ( $page eq 'repoindex.xml' ) {
	    $r->note_basic_auth_failure;
	    $r->log_reason("user $username password mismatch", $r->uri);
	    $m->abort(401);
	}
	$userauth = 'invalid';
    } else {
	if ( $page eq 'mirrorlist' or $page eq 'repoindex.xml' or $page eq 'OPENSS7.service') {
	    if ( $useraccs !~ /,hosts,/ ) {
		$r->note_basic_auth_failure;
		$r->log_reason("user $username not in group 'hosts'", $r->uri);
		$m->abort(401);
	    }
	}
	$userauth = 'valid';
    }

    if ( $useraccs =~ /,hosts,/ ) {
	$hostauth = $userauth;
	$hostname = $username; $username = undef;
	$hostpass = $userpass; $userpass = undef;
	$hostcred = $usercred; $usercred = undef;
	$hostgrps = $usergrps; $usergrps = undef;
	$hostaccs = $useraccs; $useraccs = undef;
	$hostdata = $userdata; $userdata = undef;
	$hostinfo = $userinfo; $userinfo = undef;

	$username = $hostinfo->{'REMOTE_USER'} if ( exists $hostinfo->{'REMOTE_USER'} );
	unless ( $username and exists $users{$username} ) {
	    $r->log_reason("user $username for host $hostname not in database", $r->uri);
	    $m->abort(403);
	}

	$userauth = 'invalid';
	($usercred,$usergrps,$userdata) = split(/:/,$users{$username},3);
	$useraccs = ",$usergrps,";
	if ( $userdata ) {
	    $userinfo = thaw(decode_base64($userdata));
	} else {
	    $userinfo = {};
	}
	$userpass = $userinfo->{'REMOTE_PASS'} if ( exists $userinfo->{'REMOTE_PASS'} );
    }

    if ( $page eq 'OPENSS7credentials'	or
	 $page eq 'netrc.openss7'	or
	 $page eq 'openss7.repo'	or
	 $page eq 'openss7.list'	or
	 $page eq 'media.cfg'		)
    {
	unless ($hn) {
	    $r->log_reason("hn argument required", $r->uri.'?'.scalar($r->args));
	    $m->abort(403);
	}
	if ( $hostname ) {
	    $un = $hostname;
	    $pw = $hostpass;
	} else {
	    unless ($distro) {
		$r->log_reason("distro required", $r->uri.'?'.scalar($r->args));
		$m->abort(403);
	    }
	    unless ($relver) {
		$r->log_reason("relver required", $r->uri.'?'.scalar($r->args));
		$m->abort(403);
	    }
	    unless ($osarch) {
		$r->log_reason("osarch required", $r->uri.'?'.scalar($r->args));
		$m->abort(403);
	    }
	    if ( $un ) { $hostname = $un; } else {
		$hostname = `uuidgen`;
		chomp $hostname;
		$hostname =~ s/-//g;
	    }
	    $hostname = substr($hostname,0,24) if ( $page eq 'openss7.repo'	or
						    $page eq 'openss7.list'	or
						    $page eq 'netrc.openss7'	or
						    $page eq 'media.cfg'	);

	    $hostauth = $userauth;

	    if ( exists $users{$hostname} )
	    {
		($hostcred,$hostgrps,$hostdata) = split(/:/,$users{$hostname},3);
		$hostaccs = ",$hostgrps,";

		if ( $hostaccs !~ /,hosts,/           ) {
		    $r->log_reason("host $hostname not in group 'hosts'", $r->uri);
		    $m->abort(403);
		}
		if ( $hostaccs !~ /,$username-hosts,/ ) {
		    $r->log_reason("host $hostname not in group '$username-hosts'", $r->uri);
		    $m->abort(403);
		}

		if ( $hostdata ) { $hostinfo = thaw(decode_base64($hostdata)); } else { $hostinfo = {}; }
		$hostpass = $hostinfo->{'REMOTE_PASS'} if ( exists $hostinfo->{'REMOTE_PASS'} );
	    }
	    else
	    {
		if ( $pw ) { $hostpass = $pw; } else {
		    $hostpass = `uuidgen`;
		    chomp $hostpass;
		    $hostpass =~ s/-//g;
		}
		$hostpass = substr($hostpass,0,24) if ( $page eq 'openss7.repo'	 or
							$page eq 'openss7.list'	 or
							$page eq 'netrc.openss7' or
							$page eq 'media.cfg'	 );

		$hostcred = `htpasswd -nbm $hostname $hostpass`; chomp $hostcred;
		$hostcred =~ s/^[^:]*://;
		$hostinfo = {};
	    }
	}
    }

    if ( $distro and exists $hostinfo->{'REPO_DISTRO'} and $distro ne $hostinfo->{'REPO_DISTRO'} ) {
	$r->log_reason("distro cannot change to $distro from ".$hostinfo->{'REPO_DISTRO'}, $r->uri.'?'.scalar($r->args));
	$m->abort(403);
    } else {
	$distro = $hostinfo->{'REPO_DISTRO'} if ( exists $hostinfo->{'REPO_DISTRO'} );
	$hostinfo->{'REPO_DISTRO'} = $distro;
	    }
    if ( $relver and exists $hostinfo->{'REPO_RELVER'} and $relver ne $hostinfo->{'REPO_RELVER'} ) {
	$hostinfo->{'REPO_RELVER'} = $relver;
    } else {
	$relver = $hostinfo->{'REPO_RELVER'} if ( exists $hostinfo->{'REPO_RELVER'} );
	$hostinfo->{'REPO_RELVER'} = $relver;
	}
    if ( $osarch and exists $hostinfo->{'REPO_OSARCH'} and $osarch ne $hostinfo->{'REPO_OSARCH'} ) {
	$r->log_reason("osarch cannot change to $osarch from ".$hostinfo->{'REPO_OSARCH'}, $r->uri.'?'.scalar($r->args));
	$m->abort(403);
    } else {
	$osarch = $hostinfo->{'REPO_OSARCH'} if ( exists $hostinfo->{'REPO_OSARCH'} );
	$hostinfo->{'REPO_OSARCH'} = $osarch;
    }

    if ( $username )
    {
#	$userinfo->{'AUTH_TYPE'}	  = $ENV{'AUTH_TYPE'}	    unless ( exists $userinfo->{'AUTH_TYPE'} );
#	$userinfo->{'HTTPS'}		  = $ENV{'HTTPS'}	    unless ( exists $userinfo->{'HTTPS'} );
#	$userinfo->{'HTTP_DATE'}	  = $date		    unless ( exists $userinfo->{'HTTP_HOST'} );
#	$userinfo->{'HTTP_HOST'}	  = $ENV{'HTTP_HOST'}	    unless ( exists $userinfo->{'HTTP_HOST'} );
#	$userinfo->{'HTTP_USER_AGENT'}	  = $ENV{'HTTP_USER_AGENT'} unless ( exists $userinfo->{'HTTP_USER_AGENT'} );
#	$userinfo->{'QUERY_STRING'}	  = $ENV{'QUERY_STRING'}    unless ( exists $userinfo->{'QUERY_STRING'} );
#	$userinfo->{'REMOTE_ADDR'}	  = $ENV{'REMOTE_ADDR'}	    unless ( exists $userinfo->{'REMOTE_ADDR'} );
#	$userinfo->{'REMOTE_HOST'}	  = $ENV{'REMOTE_HOST'}	    unless ( exists $userinfo->{'REMOTE_HOST'} );
#	$userinfo->{'REMOTE_PASS'}	  = $userpass		    unless ( exists $userinfo->{'REMOTE_PASS'} );
#	$userinfo->{'REMOTE_USER'}	  = $ENV{'REMOTE_USER'}	    unless ( exists $userinfo->{'REMOTE_USER'} );
#	$userinfo->{'REPO_STATUS'}	  = 'unverified'	    unless ( exists $userinfo->{'REPO_STATUS'} );
#	$userinfo->{'REPO_ACCESS_STATUS'} = 'accessed'		    unless ( exists $userinfo->{'REPO_ACCESS_STATUS'} );
#	$userinfo->{'REPO_AUTH_STATUS'}	  = $userauth		    unless ( exists $userinfo->{'REPO_AUTH_STATUS'} );
#	$userinfo->{'REQUESTED_PASS'}	  = $pw;
#	$userinfo->{'REQUESTED_USER'}	  = $un;
#	$userinfo->{'REQUEST_URI'}	  = $ENV{'REQUEST_URI'}	    unless ( exists $userinfo->{'REQUEST_URI'} );
#	$userinfo->{'SCRIPT_URI'}	  = $ENV{'SCRIPT_URI'}	    unless ( exists $userinfo->{'SCRIPT_URI'} );
#	$userinfo->{'SCRIPT_URL'}	  = $ENV{'SCRIPT_URL'}	    unless ( exists $userinfo->{'SCRIPT_URL'} );
#	$userinfo->{'SERVER_ADDR'}	  = $ENV{'SERVER_ADDR'}	    unless ( exists $userinfo->{'SERVER_ADDR'} );
#	$userinfo->{'SERVER_NAME'}	  = $ENV{'SERVER_NAME'}	    unless ( exists $userinfo->{'SERVER_NAME'} );

	my $count = 0;
	$count = $userinfo->{'REPO_LAST_COUNT'} if ( exists $userinfo->{'REPO_LAST_COUNT'} );
	$count = $count + 1;
	$userinfo->{'REPO_LAST_COUNT'}		 = $count;
	$userinfo->{'REPO_LAST_ACCESS'}		 = $date;
	$userinfo->{'REPO_LAST_ACCFILE'}	 = $page;
	$userinfo->{'REPO_ACCESS_STATUS'}	 = 'accessed' if ( $page eq 'OPENSS7credentials' or 
								   $page eq 'netrc.openss7'	 or
								   $page eq 'repoindex.xml'	 );
	$userinfo->{'REPO_LAST_HTTP_HOST'}	 = $ENV{'HTTP_HOST'};
	$userinfo->{'REPO_LAST_HTTP_USER_AGENT'} = $ENV{'HTTP_USER_AGENT'};
	$userinfo->{'REPO_LAST_REMOTE_ADDR'}	 = $ENV{'REMOTE_ADDR'};
	$userinfo->{'REPO_LAST_REMOTE_HOST'}	 = $ENV{'REMOTE_HOST'};

	$userdata = encode_base64(nfreeze($userinfo));
	$users{$username} = "$usercred:$usergrps:$userdata";
	$useraccs = ",$usergrps,";
    }
    if ( $hostname )
    {
	$hostinfo->{'AUTH_TYPE'}	  = $ENV{'AUTH_TYPE'}	    unless ( exists $hostinfo->{'AUTH_TYPE'} );
	$hostinfo->{'HTTPS'}		  = $ENV{'HTTPS'}	    unless ( exists $hostinfo->{'HTTPS'} );
	$hostinfo->{'HTTP_DATE'}	  = $date		    unless ( exists $hostinfo->{'HTTP_HOST'} );
	$hostinfo->{'HTTP_HOST'}	  = $ENV{'HTTP_HOST'}	    unless ( exists $hostinfo->{'HTTP_HOST'} );
	$hostinfo->{'HTTP_USER_AGENT'}	  = $ENV{'HTTP_USER_AGENT'} unless ( exists $hostinfo->{'HTTP_USER_AGENT'} );
	$hostinfo->{'QUERY_STRING'}	  = $ENV{'QUERY_STRING'}    unless ( exists $hostinfo->{'QUERY_STRING'} );
	$hostinfo->{'REMOTE_ADDR'}	  = $ENV{'REMOTE_ADDR'}	    unless ( exists $hostinfo->{'REMOTE_ADDR'} );
	$hostinfo->{'REMOTE_HOST'}	  = $ENV{'REMOTE_HOST'}	    unless ( exists $hostinfo->{'REMOTE_HOST'} );
	$hostinfo->{'REMOTE_PASS'}	  = $hostpass		    unless ( exists $hostinfo->{'REMOTE_PASS'} );
	$hostinfo->{'REMOTE_USER'}	  = $ENV{'REMOTE_USER'}	    unless ( exists $hostinfo->{'REMOTE_USER'} );
	$hostinfo->{'REPO_STATUS'}	  = 'unverified'	    unless ( exists $hostinfo->{'REPO_STATUS'} );
	$hostinfo->{'REPO_ACCESS_STATUS'} = 'accessed'		    unless ( exists $hostinfo->{'REPO_ACCESS_STATUS'} );
	$hostinfo->{'REPO_AUTH_STATUS'}	  = $hostauth		    unless ( exists $hostinfo->{'REPO_AUTH_STATUS'} );
	$hostinfo->{'REQUESTED_PASS'}	  = $pw;
	$hostinfo->{'REQUESTED_USER'}	  = $un;
	$hostinfo->{'REQUEST_URI'}	  = $ENV{'REQUEST_URI'}	    unless ( exists $hostinfo->{'REQUEST_URI'} );
	$hostinfo->{'SCRIPT_URI'}	  = $ENV{'SCRIPT_URI'}	    unless ( exists $hostinfo->{'SCRIPT_URI'} );
	$hostinfo->{'SCRIPT_URL'}	  = $ENV{'SCRIPT_URL'}	    unless ( exists $hostinfo->{'SCRIPT_URL'} );
	$hostinfo->{'SERVER_ADDR'}	  = $ENV{'SERVER_ADDR'}	    unless ( exists $hostinfo->{'SERVER_ADDR'} );
	$hostinfo->{'SERVER_NAME'}	  = $ENV{'SERVER_NAME'}	    unless ( exists $hostinfo->{'SERVER_NAME'} );

	my $count = 0;
	$count = $hostinfo->{'REPO_LAST_COUNT'} if ( exists $hostinfo->{'REPO_LAST_COUNT'} );
	$count = $count + 1;
	$hostinfo->{'REPO_LAST_COUNT'}		 = $count;
	$hostinfo->{'REPO_LAST_ACCESS'}		 = $date;
	$hostinfo->{'REPO_LAST_ACCFILE'}	 = $page;
	$hostinfo->{'REPO_ACCESS_STATUS'}	 = 'accessed' if ( $page eq 'mirrorlist'    or
								   $page eq 'repoindex.xml' );
	$hostinfo->{'REPO_LAST_HTTP_HOST'}	 = $ENV{'HTTP_HOST'};
	$hostinfo->{'REPO_LAST_HTTP_USER_AGENT'} = $ENV{'HTTP_USER_AGENT'};
	$hostinfo->{'REPO_LAST_REMOTE_ADDR'}	 = $ENV{'REMOTE_ADDR'};
	$hostinfo->{'REPO_LAST_REMOTE_HOST'}	 = $ENV{'REMOTE_HOST'};

	unless ( $hostgrps ) 
	{
	    my @hostgrps = ( 'hosts' );
	    push @hostgrps, $username.'-hosts';
	    push @hostgrps, $distro.'-'.$osarch.'-host';  # note 'host' instead of 'hosts'
	    push @hostgrps, 'zypp-hosts' if ( $page eq 'OPENSS7credentials' );
	    push @hostgrps, 'yum-hosts'  if ( $page eq 'openss7.repo' );
	    push @hostgrps, 'apt-hosts'  if ( $page eq 'openss7.list' );
	    push @hostgrps, 'urpm-hosts' if ( $page eq 'netrc.openss7' );
	    foreach my $g ( split(/,/,$usergrps) ) {
		push @hostgrps, $g.'-hosts';
	    }
	    $hostgrps = join(',',@hostgrps);
	    $hostaccs = ",$hostgrps,";
	}

	$hostdata = encode_base64(nfreeze($hostinfo));
	$users{$hostname} = "$hostcred:$hostgrps:$hostdata";
	$hostaccs = ",$hostgrps,";
    }

    untie %users;
    flock($fd, LOCK_UN);
    close($fd);

    #
    #  Note that hostinfo and userinfo is pretty much read only from here...
    #

    if ( $page eq 'OPENSS7credentials' )
    {
	$r->content_type('text/plain');
</%perl>
username=<% $hostname %>
password=<% $hostpass %>
<%perl>
    }
    elsif ( $page eq 'netrc.openss7' )
    {
	$r->content_type('text/plain');
</%perl>
machine www.openss7.org login <% $hostname %> password <% $hostpass %>
<%perl>
    }
    elsif ( $page eq 'openss7.repo'	or
	    $page eq 'OPENSS7.service'	or
	    $page eq 'openss7.list'	or
	    $page eq 'media.cfg'	)
    {
	my @brarepos = ( 'base', 'extras', 'updates', 'testing' );
	my @subrepos = ( 'full', 'main', 'debug', 'devel', 'source' );

	@brarepos = ( $branch ) if ( $branch and $branch ne 'base' );
	@subrepos = ( $subrep ) if ( $subrep and $subrep ne 'full' );

	my $emptyrepo = 0;
	$emptyrepo = 1 if ( -e $ENV{'DOCUMENT_ROOT'}.'/repo/rpms/repodata/repomd.xml' );
	$emptyrepo = 0 if ( $page eq 'openss7.list' );
	$emptyrepo = 0 if ( $page eq 'media.cfg' );

	my $toenable;

	if ( $page eq 'media.cfg' ) {
<%/perl>
[media_info]
version=<% $relver %>
mediacfg_version=2
branch=OpenSS7
arch=<% $osarch %>
xml-info=1

<%perl>
	}

	for $branch ( @brarepos )
	{
	    for $subrep ( @subrepos )
	    {
		my $manage = ( $distro =~ m/^(sle|sles|sled|suse|opensuse)$/ ) ? 'zypp' : 'yum';
		   $manage = ( $distro =~ m/^(mageia|mandriva|mandrake|mes)$/ ) ? 'urpm' : $manage;
		my $enterp = ( $distro =~ m/^(sle|sles|sled|rhel|centos|mes)$/ ) ? 'enterprise' : 'community';
		# FIXME: need to handle ubuntu LTS
		my $server = ( $osarch !~ m/^i[3456]86$/ ) ? 'server' : 'desktop';

		my $reason = '';

		my $offerred = 1;
		if ($offerred) {
		    $offerred = 0 if ($hostaccs !~ /,(opt-)?$manage-hosts,/);
		    unless ($offerred) { $reason = "Host $hostname not in group '(opt-)?$manage-hosts'"; }
		}
		if ($offerred) {
		    $offerred = 0;
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$distro-$osarch-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$distro-hosts,/ and $hostaccs =~ /,(opt-)?$osarch-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$distro-$server-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$distro-hosts,/ and $hostaccs =~ /,(opt-)?$server-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$enterp-$osarch-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$enterp-hosts,/ and $hostaccs =~ /,(opt-)?$osarch-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$enterp-$server-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$enterp-hosts,/ and $hostaccs =~ /,(opt-)?$server-hosts,/);
		    unless ($offerred) { $reason = "Host $hostname not in groups '(opt-)?$enterp-hosts', '(opt-)?$server-hosts', '(opt-)?$distro-hosts' or '(opt-)?$osarch-hosts'"; }
		}
		if ($offerred) {
		    $offerred = 0;
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$branch-$subrep-hosts,/);
		    $offerred = 1 if ($hostaccs =~ /,(opt-)?$branch-hosts,/ and $hostaccs =~ /,(opt-)?$subrep-hosts,/);
		    unless ($offerred) { $reason = "Host $hostname not in groups '(opt-)?$branch-hosts', '(opt-)?$subrep-hosts'"; }
		}

		my $allowed = 1;
		if ($allowed) {
		    $allowed = 0 if ($hostaccs !~ /,$manage-hosts,/);
		    unless ($allowed) { $reason = "Host $hostname not in group '$manage-hosts'"; }
		}
		if ($allowed) {
		    $allowed = 0;
		    $allowed = 1 if ($hostaccs =~ /,$distro-$osarch-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$distro-$server-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$server-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$enterp-$osarch-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$enterp-$server-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$server-hosts,/);
		    unless ($allowed) { $reason = "Host $hostname not in groups '$enterp-hosts', '$server-hosts', '$distro-hosts' or '$osarch-hosts'"; }
		}
		if ($allowed) {
		    $allowed = 0;
		    $allowed = 1 if ($hostaccs =~ /,$branch-$subrep-hosts,/);
		    $allowed = 1 if ($hostaccs =~ /,$branch-hosts,/ and $hostaccs =~ /,$subrep-hosts,/);
		    unless ($allowed) { $reason = "Host $hostname not in groups '$branch-hosts', '$subrep-hosts'"; }
		}

		my $enabled = 1;
		$enabled = 0 if ( !$allowed and !$emptyrepo );
		$enabled = 0 if ( $subrep =~ /^(devel|source|full)$/ );
		$enabled = 0 if ( $branch =~ /^(extras|testing)$/ );

		my ($name,$desc,$bdesc,$sdesc);
		($bdesc = $branch) =~ s/^([a-z])(.*)$/\U$1\E$2/;
		($sdesc = $subrep) =~ s/^([a-z])(.*)$/\U$1\E$2/;
		my $target = $distro.'-'.$relver.'-'.$osarch;
		$name = 'openss7';
		$name .= '-'.$branch if ($branch ne 'base');
		$name .= '-'.$subrep if ($subrep ne 'full');
		if ( $page eq 'openss7.repo' )
		{
		    next if ( !$offerred );

		    # do not even advertize 'testing', 'extras' or 'source'-containing repos
		    next if ( !$allowed and $branch eq 'testing' );
		    next if ( !$allowed and $subrep eq 'full'    );
		    next if ( !$allowed and $subrep eq 'source'  );
			
		    $desc = 'OpenSS7';
		    $desc .= ' '.$bdesc if ($bdesc ne 'Base');
		    $desc .= ' '.$sdesc if ($sdesc ne 'Full');
		    $desc .= ' ('.$target.')';

		    my $rcreds = $hostname.':'.$hostpass.'@';

		    my $repostr = '?un='.$hostname;
		    $repostr .= '&distro='.$distro if ($distro);
		    $repostr .= '&relver='.'$releasever';
		    $repostr .= '&osarch='.'$basearch';
		    $repostr .= '&branch='.$branch if ($branch ne 'base');
		    $repostr .= '&subrep='.$subrep if ($subrep ne 'full');

		    $url = '/repo/rpms';
		    $url .= "/$distro" if ($distro);
		    $url .= "/$relver";
		    $url .= "/$osarch";
		    $url .= "/$branch" if ($branch ne 'base');
		    $url .= "/$subrep" if ($subrep ne 'full');

		    my $present = 0;
		    $present = 1 if ( -e $ENV{'DOCUMENT_ROOT'}.$url.'/repodata/repomd.xml' );
		    
		    my $pre = '';
		    $pre = '#' if ( !$present and !$emptyrepo );

		    $url = '/repo/rpms';
		    $url .= "/$distro" if ($distro);
		    $url .= '/$releasever';
		    $url .= '/$basearch';
		    $url .= "/$branch" if ($branch ne 'base');
		    $url .= "/$subrep" if ($subrep ne 'full');
		    
		    if ( !$allowed ) {
			$enabled = 0;
			$pre = '#' unless ( $emptyrepo );
			if ( $hostaccs =~ /,guests-hosts,/ ) {
</%perl>
<% $pre %># This repository is not authorized by default.
<% $pre %># To activate this repository, contact &lt;sales@openss7.com&gt;.
<%perl>
			} else {
</%perl>
<% $pre %># This repository is currently not authorized to host <% $hostname %>.
<% $pre %># <% $reason %>.
<% $pre %># To activate this repository, contact your software provider [<% $username %>].
<%perl>
			}
		    }
</%perl>
<% $pre %>[<% $name %>]
<% $pre %>enabled = <% $enabled %>
<% $pre %>name = <% $desc %>
<% $pre %>#baseurl = https://<% $rcreds %>www.openss7.org<% $url %>/
<% $pre %>mirrorlist = https://www.openss7.org/repo/mirrorlist<% $repostr %>
<% $pre %>gpgkey = https://www.openss7.org/pubkey.asc
<% $pre %>         https://www.openss7.org/repo/tarballs/OPENSS7-GPG-KEY
<% $pre %>gpgcheck = 1

<%perl>
		}
		elsif ( $page eq 'openss7.list' )
		{
		    next if ( !$offerred );

		    # do not even advertize 'testing', 'extras' or 'source'-containing repos
		    next if ( !$allowed and $branch eq 'testing' );
		    next if ( !$allowed and $subrep eq 'full'    );
		    next if ( !$allowed and $subrep eq 'source'  );

		    my $rcreds = $hostname.':'.$hostpass.'@';

		    $url = '/repo/debs';
		    $url .= "/$distro" if ($distro);
		    $url .= "/$relver";
		    $url .= "/$osarch";
		    $url .= "/$branch" if ($branch ne 'base');
		    $url .= "/$subrep" if ($subrep ne 'full');

		    my $present = 0;
		    $present = 1 if ( -e $ENV{'DOCUMENT_ROOT'}.$url.'/Release' );

		    my $pre = '';
		    $pre = '#' if ( !$present and !$emptyrepo );

		    if ( !$allowed ) {
			$pre = '#';
			if ( $hostaccs =~ /,guests-hosts,/ ) {
</%perl>
<% $pre %># This repository is not authorized by default.
<% $pre %># To active this repository, contact &lt;sales@openss7.com&gt;.
<%perl>
			} else {
</%perl>
<% $pre %># This repository is currently not authorized to host <% $hostname %>.
<% $pre %># <% $reason %>.
<% $pre %># To activate this repository, contact your software provider [<% $username %>].
<%perl>
			}
		    }
</%perl>
<% $pre %>deb https://<% $rcreds %>www.openss7.org<% $url %> /
<%perl>
		    if ( $subrep eq 'source' ) {
</%perl>
<% $pre %>deb-src https://<% $rcreds %>www.openss7.org<% $url %> /
<%perl>
		    }
</%perl>

<%perl>
		}
		elsif ( $page eq 'media.cfg' )
		{
		    next if ( !$offerred );

		    # do not even advertize 'testing', 'extras' or 'source'-containing repos
		    next if ( !$allowed and $branch eq 'testing' );
		    next if ( !$allowed and $subrep eq 'full'    );
		    next if ( !$allowed and $subrep eq 'source'  );

		    $url = 'repo/rpms';
		    $url .= "/$distro" if ($distro);
		    $url .= "/$relver";
		    $url .= "/$osarch";
		    $url .= "/media";
		    $url .= "/$branch" if ($branch ne 'base');
		    $url .= "/$subrep" if ($subrep ne 'full');

		    my $present = 0;
		    $present = 1 if ( -e $ENV{'DOCUMENT_ROOT'}.$url.'/media_info/hdlist.cz' );

		    my $pre = '';
		    $pre = '#' if ( !$present and !$emptyrepo );

		    my $s;
		    if ($subrep eq 'full')
		    { if ($branch eq 'base') { $s = ''; } else { $s = $branch; } } else
		    { if ($branch eq 'base') { $s = $subrep; } else { $s = $branch.'/'.$subrep; } }
		    my $r;
		    if    ($subrep eq 'full')	{ $r = 'Full';	 }
		    elsif ($subrep eq 'main')	{ $r = 'Main';	 }
		    elsif ($subrep eq 'debug')	{ $r = 'Debug';	 }
		    elsif ($subrep eq 'devel')	{ $r = 'Devel';	 }
		    elsif ($subrep eq 'source')	{ $r = 'Source'; }
		    else			{ $r = $subrep;	 }
		    my $b;
		    if	  ($branch eq 'base')	 { $b = 'Base';	   }
		    elsif ($branch eq 'updates') { $b = 'Updates'; }
		    elsif ($branch eq 'extras')	 { $b = 'Extras';  }
		    elsif ($branch eq 'testing') { $b = 'Testing'; }
		    else			 { $b = $branch;   }
		    my $n = $r.' '.$b;
		    my $t = 'release:'.$branch.':'.$subrep;

		    if ( !$allowed ) {
			$enabled = 0;
			$pre = '#' unless ( $emptyrepo );
			if ( $hostaccs =~ /,guests-hosts,/ ) {
</%perl>
<% $pre %># This repository is not authorized by default.
<% $pre %># To activate this repository, contact &lt;sales@openss7.com&gt;.
<%perl>
			} else {
</%perl>
<% $pre %># This repository is currently not authorized to host <% $hostname %>.
<% $pre %># <% $reason %>.
<% $pre %># To activate this repository, contact your software provider [<% $username %>].
<%perl>
			}
		    }
</%perl>
<% $pre %>[<% $s %>]
<% $pre %>name=<% $n %>
<% $pre %>media_type=<% $t %>
<%perl>
		if ( $subrep eq 'source' ) {
		    my $b = 'main';
		    $b = $branch.'/'.$b if ($branch ne 'full');
</%perl>
<% $pre %>rpms=<% $b %>
<%perl>
		} else {
		    my $b = 'source';
		    $b = $branch.'/'.$b if ($branch ne 'full');
</%perl>
<% $pre %>srpms=<% $b %>
<%perl>
		}
		    if ( !$enabled ) {
</%perl>
<% $pre %>noauto=1
<%perl>
		    }
</%perl>

<%perl>
		}
		elsif ( $page eq 'OPENSS7.service' )
		{
		    $toenable = "$toenable OPENSS7:$name" if ($enabled);
		}
	    }
	}
	if ( $page eq 'OPENSS7.service' ) {
</%perl>
[OPENSS7]
name=OpenSS7 Repository Service
enabled=1
autorefresh=1
url = https://www.openss7.org/?credentials=OPENSS7credentials
type = ris
repostoenable =<% $toenable %>
<%perl>
	}
    }
    elsif ( $page eq 'repoindex.xml' )
    {
	my $location = $ENV{'DOCUMENT_ROOT'}.$self->dir_path;
	$location =~ s,//+,/,g;
	my @files = `find $location -follow -name 'repomd.xml' 2>/dev/null | sort -u`;

</%perl>
<?xml version="1.0" encoding="UTF-8"?>

<repoindex>
<%perl>
	foreach my $file (@files) {
	    $url = $file; chomp $url;
	    next unless ( $url =~ m,.*/repo/rpms/((.*)/)?repodata/repomd.xml$, );
	    $url = $2;
	    next unless ( $url );
	    my @fields = split(/\//,$url);
	    next if ($#fields < 2 or $#fields > 4);
	    if ($#fields == 2) {
		$fields[3] = 'base';
		$fields[4] = 'full';
	    }
	    if ($#fields == 3) {
		if ($fields[3] =~ m/^(main|debug|devel|source)$/) {
		    $fields[4] = $fields[3];
		    $fields[3] = 'base';
		} else {
		    $fields[4] = 'full';
		}
	    }
	    $fields[3] = 'base' unless ($fields[3]);
	    $fields[4] = 'full' unless ($fields[4]);

	    next unless ($distro eq $fields[0]);
	    next unless ($osarch eq $fields[2]);

	    ($distro,$relver,$osarch,$branch,$subrep) = @fields;

	    my $manage = ( $distro =~ m/^(sle|sles|sled|suse|opensuse)$/ ) ? 'zypp' : 'yum';
	       $manage = ( $distro =~ m/^(mageia|mandriva|mandrake|mes)$/ ) ? 'urpm' : $manage;
	    my $enterp = ( $distro =~ m/^(sle|sles|sled|rhel|centos|mes)$/ ) ? 'enterprise' : 'community';
	    my $server = ( $osarch !~ m/^i[3456]86$/ ) ? 'server' : 'desktop';

	    my $reason = '';
	    my $allowed = 1;
	    if ($allowed) {
		$allowed = 0  if ($hostaccs !~ /,$manage-hosts,/);
		unless ($allowed) { $reason = "Host $hostname not in group '$manage-hosts'"; }
	    }
	    if ($allowed) {
		$allowed = 0;
		$allowed = 1 if ($hostaccs =~ /,$distro-$osarch-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$distro-$server-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$server-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$enterp-$osarch-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$enterp-$server-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$server-hosts,/);
		unless ($allowed) { $reason = "Host $hostname not in groups '$enterp-hosts', '$server-hosts', '$distro-hosts' or '$osarch-hosts'"; }
	    }
	    if ($allowed) {
		$allowed = 0;
		$allowed = 1 if ($hostaccs =~ /,$branch-$subrep-hosts,/);
		$allowed = 1 if ($hostaccs =~ /,$branch-hosts,/ and $hostaccs =~ /,$subrep-hosts,/);
		unless ($allowed) { $reason = "Host $hostname not in groups '$branch-hosts', '$subrep-hosts'"; }
	    }

	    next unless ( $allowed );

	    my $target = $distro . '-' . $relver . '-' . $osarch;
	    my $page = 'openss7';
	    $page .= '-' . $branch if ($branch ne 'base');
	    $page .= '-' . $subrep if ($subrep ne 'full');
	    my ($bdesc,$sdesc);
	    ($bdesc = $branch) =~ s/^([a-z])(.*)$/\U$1\E$2/;
	    ($sdesc = $subrep) =~ s/^([a-z])(.*)$/\U$1\E$2/;
	    my $desc = 'OpenSS7';
	    $desc .= ' ' . $bdesc if ($bdesc ne 'Base');
	    $desc .= ' ' . $sdesc if ($sdesc ne 'Full');
	    $desc .= ' (' . $target . ')';

	    my ($pre,$suf);
	    if ( $allowed ) {
		$pre = '';
		$suf = '';
	    } else {
		$pre = '<!-- ';
		$suf = ' -->';
</%perl>
<% $pre %>This repository is currently not authorized to host <% $hostname %>.<% $suf %>
<% $pre %><% $reason %>.<% $suf %>
<% $pre %>To activate this repository, contact &lt;sales&amp;openss7.com&gt;.<% $suf %>
<%perl>
	    }
</%perl>
<% $pre %><repo name="<% $page %>" alias="<% $page %>" description="<% $desc %>" distro_target="<% $target %>" priority="0" pub="0" path="rpms/<% $url %>" /><% $suf %>
<%perl>
	}
</%perl>
</repoindex>
<%perl>
    }
    elsif ( $page eq 'mirrorlist' )
    {
	$branch = 'base' if ($branch eq '');
	$subrep = 'full' if ($subrep eq '');

	my $manage = ( $distro =~ m/^(sle|sles|sled|suse|opensuse)$/ ) ? 'zypp' : 'yum';
	   $manage = ( $distro =~ m/^(mageia|mandriva|mandrake|mes)$/ ) ? 'urpm' : $manage;
	my $enterp = ( $distro =~ m/^(sle|sles|sled|rhel|centos|mes)$/ ) ? 'enterprise' : 'community';
	my $server = ( $osarch !~ m/^i[3456]86$/ ) ? 'server' : 'desktop';

	my $allowed = 1;
	if ($allowed) {
	    $allowed = 0  if ($hostaccs !~ /,$manage-hosts,/);
	}
	if ($allowed) {
	    $allowed = 0;
	    $allowed = 1 if ($hostaccs =~ /,$distro-$osarch-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$distro-$server-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$distro-hosts,/ and $hostaccs =~ /,$server-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$enterp-$osarch-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$osarch-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$enterp-$server-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$enterp-hosts,/ and $hostaccs =~ /,$server-hosts,/);
	}
	if ($allowed) {
	    $allowed = 0;
	    $allowed = 1 if ($hostaccs =~ /,$branch-$subrep-hosts,/);
	    $allowed = 1 if ($hostaccs =~ /,$branch-hosts,/ and $hostaccs =~ /,$subrep-hosts,/);
	}

	$url = 'repo/rpms';
	$url .= "/$distro" if ($distro);
	$url .= "/$relver";
	$url .= "/$osarch";
	$url .= "/$branch" if ($branch ne 'base');
	$url .= "/$subrep" if ($subrep ne 'full');
		
	$allowed = 0 unless ( -e $ENV{'DOCUMENT_ROOT'}.$url.'/repodata/repomd.xml' );

	my $rcreds = $hostname.':'.$hostpass.'@';

	$url = '/repo/rpms'; # the empty repository
	if ( $allowed) {
	    $url .= "/$distro" if ($distro);
	    $url .= '/$releasever';
	    $url .= '/$basearch';
	    $url .= "/$branch" if ($branch ne 'base');
	    $url .= "/$subrep" if ($subrep ne 'full');
	}
</%perl>
https://<% $rcreds %>www.openss7.org<% $url %>
<%perl>
    } else {
	$m->call_next;
    }
</%perl>
