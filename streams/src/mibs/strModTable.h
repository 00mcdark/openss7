/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.49 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef STRMODTABLE_H
#define STRMODTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(OPENSS7-STREAMS-MIB)
config_require(OPENSS7-STREAMS-MIB/strModTable/strModTable_interface)
config_require(OPENSS7-STREAMS-MIB/strModTable/strModTable_data_access)
config_require(OPENSS7-STREAMS-MIB/strModTable/strModTable_data_get)
config_require(OPENSS7-STREAMS-MIB/strModTable/strModTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for strModTable */
#include "strModTable_oids.h"

/* enum definions */
#include "strModTable_enums.h"

/* *********************************************************************
 * function declarations
 */
        void init_strModTable(void);
        void shutdown_strModTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table strModTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strModTable is subid 1 of strMod.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.1.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strModTable registration context.
         */
        typedef netsnmp_data_list strModTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strModTable data context structure.
 * This structure is used to represent the data for strModTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strModTable.
 */
        typedef struct strModTable_data_s {

                /*
                 * strModName(2)/StreamsModuleName/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
                 */
                char strModName[8];
                size_t strModName_len;  /* # of char elements, not bytes */

                /*
                 * strModType(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
                 */
                u_long strModType;

                /*
                 * strModMajor(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
                 */
                u_long strModMajor;

        } strModTable_data;

/*
 * TODO:120:r: |-> Review strModTable mib index.
 * This structure is used to represent the index for strModTable.
 */
        typedef struct strModTable_mib_index_s {

                /*
                 * strModIdnum(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModIdnum;

        } strModTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strModTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strModTable_IDX_LEN     1

/* *********************************************************************
 * TODO:130:o: |-> Review strModTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strModTable_rowreq_ctx pointer.
 */
        typedef struct strModTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strModTable_IDX_LEN];

                strModTable_mib_index tbl_idx;

                strModTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strModTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strModTable_data_list;

        } strModTable_rowreq_ctx;

        typedef struct strModTable_ref_rowreq_ctx_s {
                strModTable_rowreq_ctx *rowreq_ctx;
        } strModTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strModTable_pre_request(strModTable_registration * user_context);
        int strModTable_post_request(strModTable_registration * user_context, int rc);

        int strModTable_rowreq_ctx_init(strModTable_rowreq_ctx * rowreq_ctx, void *user_init_ctx);
        void strModTable_rowreq_ctx_cleanup(strModTable_rowreq_ctx * rowreq_ctx);

        strModTable_rowreq_ctx *strModTable_row_find_by_mib_index(strModTable_mib_index * mib_idx);

        extern oid strModTable_oid[];
        extern int strModTable_oid_size;

#include "strModTable_interface.h"
#include "strModTable_data_access.h"
#include "strModTable_data_get.h"
#include "strModTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif                                  /* STRMODTABLE_H */
