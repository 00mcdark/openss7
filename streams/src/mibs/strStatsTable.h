/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.49 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef STRSTATSTABLE_H
#define STRSTATSTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(OPENSS7-STREAMS-MIB)
config_require(OPENSS7-STREAMS-MIB/strStatsTable/strStatsTable_interface)
config_require(OPENSS7-STREAMS-MIB/strStatsTable/strStatsTable_data_access)
config_require(OPENSS7-STREAMS-MIB/strStatsTable/strStatsTable_data_get)
config_require(OPENSS7-STREAMS-MIB/strStatsTable/strStatsTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for strStatsTable */
#include "strStatsTable_oids.h"

/* enum definions */
#include "strStatsTable_enums.h"

/* *********************************************************************
 * function declarations
 */
        void init_strStatsTable(void);
        void shutdown_strStatsTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table strStatsTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strStatsTable is subid 1 of strStats.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.5.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strStatsTable registration context.
         */
        typedef netsnmp_data_list strStatsTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strStatsTable data context structure.
 * This structure is used to represent the data for strStatsTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strStatsTable.
 */
        typedef struct strStatsTable_data_s {

                /*
                 * strStatsCurrentAllocs(2)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strStatsCurrentAllocs;

                /*
                 * strStatsHighWaterMark(3)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strStatsHighWaterMark;

        } strStatsTable_data;

/*
 * TODO:120:r: |-> Review strStatsTable mib index.
 * This structure is used to represent the index for strStatsTable.
 */
        typedef struct strStatsTable_mib_index_s {

                /*
                 * strStatsStructure(1)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
                 */
                u_long strStatsStructure;

        } strStatsTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strStatsTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strStatsTable_IDX_LEN     1

/* *********************************************************************
 * TODO:130:o: |-> Review strStatsTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strStatsTable_rowreq_ctx pointer.
 */
        typedef struct strStatsTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strStatsTable_IDX_LEN];

                strStatsTable_mib_index tbl_idx;

                strStatsTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strStatsTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strStatsTable_data_list;

        } strStatsTable_rowreq_ctx;

        typedef struct strStatsTable_ref_rowreq_ctx_s {
                strStatsTable_rowreq_ctx *rowreq_ctx;
        } strStatsTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strStatsTable_pre_request(strStatsTable_registration * user_context);
        int strStatsTable_post_request(strStatsTable_registration * user_context, int rc);

        int strStatsTable_rowreq_ctx_init(strStatsTable_rowreq_ctx * rowreq_ctx,
                                          void *user_init_ctx);
        void strStatsTable_rowreq_ctx_cleanup(strStatsTable_rowreq_ctx * rowreq_ctx);

        strStatsTable_rowreq_ctx *strStatsTable_row_find_by_mib_index(strStatsTable_mib_index *
                                                                      mib_idx);

        extern oid strStatsTable_oid[];
        extern int strStatsTable_oid_size;

#include "strStatsTable_interface.h"
#include "strStatsTable_data_access.h"
#include "strStatsTable_data_get.h"
#include "strStatsTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif                                  /* STRSTATSTABLE_H */
