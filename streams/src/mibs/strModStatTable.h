/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.49 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef STRMODSTATTABLE_H
#define STRMODSTATTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(OPENSS7-STREAMS-MIB)
config_require(OPENSS7-STREAMS-MIB/strModStatTable/strModStatTable_interface)
config_require(OPENSS7-STREAMS-MIB/strModStatTable/strModStatTable_data_access)
config_require(OPENSS7-STREAMS-MIB/strModStatTable/strModStatTable_data_get)
config_require(OPENSS7-STREAMS-MIB/strModStatTable/strModStatTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for strModStatTable */
#include "strModStatTable_oids.h"

/* enum definions */
#include "strModStatTable_enums.h"

/* *********************************************************************
 * function declarations
 */
        void init_strModStatTable(void);
        void shutdown_strModStatTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table strModStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strModStatTable is subid 1 of strModStat.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.3.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strModStatTable registration context.
         */
        typedef netsnmp_data_list strModStatTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strModStatTable data context structure.
 * This structure is used to represent the data for strModStatTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strModStatTable.
 */
        typedef struct strModStatTable_data_s {

                /*
                 * strModStatQueues(2)/StreamsModuleQueues/ASN_OCTET_STR/char(u_long)//L/A/w/E/r/d/h
                 */
                u_long strModStatQueues;

                /*
                 * strModStatPCnt(3)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatPCnt;

                /*
                 * strModStatScnt(4)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatScnt;

                /*
                 * strModStatOcnt(5)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatOcnt;

                /*
                 * strModStatCcnt(6)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatCcnt;

                /*
                 * strModStatAcnt(7)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatAcnt;

                /*
                 * strModStatPrivate(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
                 */
                char strModStatPrivate[65535];
                size_t strModStatPrivate_len;   /* # of char elements, not bytes */

                /*
                 * strModStatFlags(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatFlags;

        } strModStatTable_data;

/*
 * TODO:120:r: |-> Review strModStatTable mib index.
 * This structure is used to represent the index for strModStatTable.
 */
        typedef struct strModStatTable_mib_index_s {

                /*
                 * strModIdnum(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModIdnum;

                /*
                 * strModStatIndex(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModStatIndex;

        } strModStatTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strModStatTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strModStatTable_IDX_LEN     2

/* *********************************************************************
 * TODO:130:o: |-> Review strModStatTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strModStatTable_rowreq_ctx pointer.
 */
        typedef struct strModStatTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strModStatTable_IDX_LEN];

                strModStatTable_mib_index tbl_idx;

                strModStatTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strModStatTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strModStatTable_data_list;

        } strModStatTable_rowreq_ctx;

        typedef struct strModStatTable_ref_rowreq_ctx_s {
                strModStatTable_rowreq_ctx *rowreq_ctx;
        } strModStatTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strModStatTable_pre_request(strModStatTable_registration * user_context);
        int strModStatTable_post_request(strModStatTable_registration * user_context, int rc);

        int strModStatTable_rowreq_ctx_init(strModStatTable_rowreq_ctx * rowreq_ctx,
                                            void *user_init_ctx);
        void strModStatTable_rowreq_ctx_cleanup(strModStatTable_rowreq_ctx * rowreq_ctx);

        strModStatTable_rowreq_ctx *strModStatTable_row_find_by_mib_index(strModStatTable_mib_index
                                                                          * mib_idx);

        extern oid strModStatTable_oid[];
        extern int strModStatTable_oid_size;

#include "strModStatTable_interface.h"
#include "strModStatTable_data_access.h"
#include "strModStatTable_data_get.h"
#include "strModStatTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif                                  /* STRMODSTATTABLE_H */
