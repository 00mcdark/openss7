/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.67.2.1 $ of : mfd-interface.m2c,v $
 *
 * $Id:$
 */
/** @defgroup interface: Routines to interface to Net-SNMP
 *
 * \warning This code should not be modified, called directly,
 *          or used to interpret functionality. It is subject to
 *          change at any time.
 * 
 * @{
 */
/*
 * *********************************************************************
 * *********************************************************************
 * *********************************************************************
 * ***                                                               ***
 * ***  NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE NOTE  ***
 * ***                                                               ***
 * ***                                                               ***
 * ***       THIS FILE DOES NOT CONTAIN ANY USER EDITABLE CODE.      ***
 * ***                                                               ***
 * ***                                                               ***
 * ***       THE GENERATED CODE IS INTERNAL IMPLEMENTATION, AND      ***
 * ***                                                               ***
 * ***                                                               ***
 * ***    IS SUBJECT TO CHANGE WITHOUT WARNING IN FUTURE RELEASES.   ***
 * ***                                                               ***
 * ***                                                               ***
 * *********************************************************************
 * *********************************************************************
 * *********************************************************************
 */
#ifndef STRMIB_INTERFACE_H
#define STRMIB_INTERFACE_H

#ifdef __cplusplus
extern "C" {
#endif

#include "strMIB.h"

/* ********************************************************************
 * Table declarations
 */

/* PUBLIC interface initialization routine */
        void _strModTable_initialize_interface(strModTable_registration * user_ctx, u_long flags);
        void _strModTable_shutdown_interface(strModTable_registration * user_ctx);

        strModTable_registration *strModTable_registration_get(void);

        strModTable_registration *strModTable_registration_set(strModTable_registration * newreg);

        netsnmp_container *strModTable_container_get(void);
        int strModTable_container_size(void);

        strModTable_rowreq_ctx *strModTable_allocate_rowreq_ctx(void *);
        void strModTable_release_rowreq_ctx(strModTable_rowreq_ctx * rowreq_ctx);

        int strModTable_index_to_oid(netsnmp_index * oid_idx, strModTable_mib_index * mib_idx);
        int strModTable_index_from_oid(netsnmp_index * oid_idx, strModTable_mib_index * mib_idx);

/*
 * access to certain internals. use with caution!
 */
        void strModTable_valid_columns_set(netsnmp_column_info *vc);

/* PUBLIC interface initialization routine */
        void _strModInfoTable_initialize_interface(strModInfoTable_registration * user_ctx,
                                                   u_long flags);
        void _strModInfoTable_shutdown_interface(strModInfoTable_registration * user_ctx);

        strModInfoTable_registration *strModInfoTable_registration_get(void);

        strModInfoTable_registration *strModInfoTable_registration_set(strModInfoTable_registration
                                                                       * newreg);

        netsnmp_container *strModInfoTable_container_get(void);
        int strModInfoTable_container_size(void);

        u_int strModInfoTable_dirty_get(void);
        void strModInfoTable_dirty_set(u_int status);

        strModInfoTable_rowreq_ctx *strModInfoTable_allocate_rowreq_ctx(void *);
        void strModInfoTable_release_rowreq_ctx(strModInfoTable_rowreq_ctx * rowreq_ctx);

        int strModInfoTable_index_to_oid(netsnmp_index * oid_idx,
                                         strModInfoTable_mib_index * mib_idx);
        int strModInfoTable_index_from_oid(netsnmp_index * oid_idx,
                                           strModInfoTable_mib_index * mib_idx);

/* *********************************************************************
 * Persistent declarations
 */
/*
 * persistence
 */
#define LINE_TERM_CHAR '$'

        void strModInfoTable_container_init_persistence(netsnmp_container * container);
        int strModInfoTable_container_should_save(strModInfoTable_rowreq_ctx * rowreq_ctx);

/*
 * access to certain internals. use with caution!
 */
        void strModInfoTable_valid_columns_set(netsnmp_column_info *vc);

/* PUBLIC interface initialization routine */
        void _strModStatTable_initialize_interface(strModStatTable_registration * user_ctx,
                                                   u_long flags);
        void _strModStatTable_shutdown_interface(strModStatTable_registration * user_ctx);

        strModStatTable_registration *strModStatTable_registration_get(void);

        strModStatTable_registration *strModStatTable_registration_set(strModStatTable_registration
                                                                       * newreg);

        netsnmp_container *strModStatTable_container_get(void);
        int strModStatTable_container_size(void);

        strModStatTable_rowreq_ctx *strModStatTable_allocate_rowreq_ctx(void *);
        void strModStatTable_release_rowreq_ctx(strModStatTable_rowreq_ctx * rowreq_ctx);

        int strModStatTable_index_to_oid(netsnmp_index * oid_idx,
                                         strModStatTable_mib_index * mib_idx);
        int strModStatTable_index_from_oid(netsnmp_index * oid_idx,
                                           strModStatTable_mib_index * mib_idx);

/*
 * access to certain internals. use with caution!
 */
        void strModStatTable_valid_columns_set(netsnmp_column_info *vc);

/* PUBLIC interface initialization routine */
        void _strApshTable_initialize_interface(strApshTable_registration * user_ctx, u_long flags);
        void _strApshTable_shutdown_interface(strApshTable_registration * user_ctx);

        strApshTable_registration *strApshTable_registration_get(void);

        strApshTable_registration *strApshTable_registration_set(strApshTable_registration *
                                                                 newreg);

        netsnmp_container *strApshTable_container_get(void);
        int strApshTable_container_size(void);

        u_int strApshTable_dirty_get(void);
        void strApshTable_dirty_set(u_int status);

        strApshTable_rowreq_ctx *strApshTable_allocate_rowreq_ctx(void *);
        void strApshTable_release_rowreq_ctx(strApshTable_rowreq_ctx * rowreq_ctx);

        int strApshTable_index_to_oid(netsnmp_index * oid_idx, strApshTable_mib_index * mib_idx);
        int strApshTable_index_from_oid(netsnmp_index * oid_idx, strApshTable_mib_index * mib_idx);

/* *********************************************************************
 * Persistent declarations
 */
/*
 * persistence
 */
#define LINE_TERM_CHAR '$'

        void strApshTable_container_init_persistence(netsnmp_container * container);
        int strApshTable_container_should_save(strApshTable_rowreq_ctx * rowreq_ctx);

/*
 * access to certain internals. use with caution!
 */
        void strApshTable_valid_columns_set(netsnmp_column_info *vc);

/* PUBLIC interface initialization routine */
        void _strStatsTable_initialize_interface(strStatsTable_registration * user_ctx,
                                                 u_long flags);
        void _strStatsTable_shutdown_interface(strStatsTable_registration * user_ctx);

        strStatsTable_registration *strStatsTable_registration_get(void);

        strStatsTable_registration *strStatsTable_registration_set(strStatsTable_registration *
                                                                   newreg);

        netsnmp_container *strStatsTable_container_get(void);
        int strStatsTable_container_size(void);

        strStatsTable_rowreq_ctx *strStatsTable_allocate_rowreq_ctx(void *);
        void strStatsTable_release_rowreq_ctx(strStatsTable_rowreq_ctx * rowreq_ctx);

        int strStatsTable_index_to_oid(netsnmp_index * oid_idx, strStatsTable_mib_index * mib_idx);
        int strStatsTable_index_from_oid(netsnmp_index * oid_idx,
                                         strStatsTable_mib_index * mib_idx);

/*
 * access to certain internals. use with caution!
 */
        void strStatsTable_valid_columns_set(netsnmp_column_info *vc);

#ifdef __cplusplus
}
#endif
#endif                                  /* STRMIB_INTERFACE_H */
