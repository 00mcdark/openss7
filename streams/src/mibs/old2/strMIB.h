/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.49 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef STRMIB_H
#define STRMIB_H

#ifdef __cplusplus
extern "C" {
#endif

/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(OPENSS7-STREAMS-MIB)
config_require(OPENSS7-STREAMS-MIB/strMIB/strMIB_interface)
config_require(OPENSS7-STREAMS-MIB/strMIB/strMIB_data_access)
config_require(OPENSS7-STREAMS-MIB/strMIB/strMIB_data_get)
config_require(OPENSS7-STREAMS-MIB/strMIB/strMIB_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for strStatsTable */
#include "strMIB_oids.h"

/* enum definions */
#include "strMIB_enums.h"

/* *********************************************************************
 * function declarations
 */
        void init_strMIB(void);
        void shutdown_strStatsTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table strModTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strModTable is subid 1 of strMod.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.1.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strModTable registration context.
         */
        typedef netsnmp_data_list strModTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strModTable data context structure.
 * This structure is used to represent the data for strModTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strModTable.
 */
        typedef struct strModTable_data_s {

                /*
                 * strModName(2)/StreamsModuleName/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
                 */
                char strModName[8];
                size_t strModName_len;  /* # of char elements, not bytes */

                /*
                 * strModType(3)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
                 */
                u_long strModType;

                /*
                 * strModMajor(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
                 */
                u_long strModMajor;

        } strModTable_data;

/*
 * TODO:120:r: |-> Review strModTable mib index.
 * This structure is used to represent the index for strModTable.
 */
        typedef struct strModTable_mib_index_s {

                /*
                 * strModIdnum(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModIdnum;

        } strModTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strModTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strModTable_IDX_LEN     1

/* *********************************************************************
 * TODO:130:o: |-> Review strModTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strModTable_rowreq_ctx pointer.
 */
        typedef struct strModTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strModTable_IDX_LEN];

                strModTable_mib_index tbl_idx;

                strModTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strModTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strModTable_data_list;

        } strModTable_rowreq_ctx;

        typedef struct strModTable_ref_rowreq_ctx_s {
                strModTable_rowreq_ctx *rowreq_ctx;
        } strModTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strModTable_pre_request(strModTable_registration * user_context);
        int strModTable_post_request(strModTable_registration * user_context, int rc);

        int strModTable_rowreq_ctx_init(strModTable_rowreq_ctx * rowreq_ctx, void *user_init_ctx);
        void strModTable_rowreq_ctx_cleanup(strModTable_rowreq_ctx * rowreq_ctx);

        strModTable_rowreq_ctx *strModTable_row_find_by_mib_index(strModTable_mib_index * mib_idx);

        extern oid strModTable_oid[];
        extern int strModTable_oid_size;

/**********************************************************************
 **********************************************************************
 ***
 *** Table strModInfoTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strModInfoTable is subid 1 of strModInfo.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.2.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strModInfoTable registration context.
         */
        typedef netsnmp_data_list strModInfoTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strModInfoTable data context structure.
 * This structure is used to represent the data for strModInfoTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strModInfoTable.
 */
        typedef struct strModInfoTable_data_s {

                /*
                 * strModInfoQueues(2)/StreamsModuleQueues/ASN_OCTET_STR/char(u_long)//L/A/w/E/r/d/h
                 */
                u_long strModInfoQueues;

                /*
                 * strModInfoMinpsz(3)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
                 */
                long strModInfoMinpsz;

                /*
                 * strModInfoMaxpsz(4)/INTEGER/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
                 */
                long strModInfoMaxpsz;

                /*
                 * strModInfoHiwat(5)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
                 */
                u_long strModInfoHiwat;

                /*
                 * strModInfoLowat(6)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/r/d/h
                 */
                u_long strModInfoLowat;

                /*
                 * strModInfoTraceLevel(7)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/W/e/R/d/h
                 */
                u_long strModInfoTraceLevel;

        } strModInfoTable_data;

/* *********************************************************************
 * TODO:115:o: |-> Review strModInfoTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
        typedef strModInfoTable_data strModInfoTable_undo_data;

/*
 * TODO:120:r: |-> Review strModInfoTable mib index.
 * This structure is used to represent the index for strModInfoTable.
 */
        typedef struct strModInfoTable_mib_index_s {

                /*
                 * strModIdnum(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModIdnum;

                /*
                 * strModInfoIndex(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModInfoIndex;

        } strModInfoTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strModInfoTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strModInfoTable_IDX_LEN     2

/* *********************************************************************
 * TODO:130:o: |-> Review strModInfoTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strModInfoTable_rowreq_ctx pointer.
 */
        typedef struct strModInfoTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strModInfoTable_IDX_LEN];

                strModInfoTable_mib_index tbl_idx;

                strModInfoTable_data data;
                strModInfoTable_undo_data *undo;
                unsigned int column_set_flags;  /* flags for set columns */

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strModInfoTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strModInfoTable_data_list;

        } strModInfoTable_rowreq_ctx;

        typedef struct strModInfoTable_ref_rowreq_ctx_s {
                strModInfoTable_rowreq_ctx *rowreq_ctx;
        } strModInfoTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strModInfoTable_pre_request(strModInfoTable_registration * user_context);
        int strModInfoTable_post_request(strModInfoTable_registration * user_context, int rc);

        int strModInfoTable_rowreq_ctx_init(strModInfoTable_rowreq_ctx * rowreq_ctx,
                                            void *user_init_ctx);
        void strModInfoTable_rowreq_ctx_cleanup(strModInfoTable_rowreq_ctx * rowreq_ctx);

        int strModInfoTable_check_dependencies(strModInfoTable_rowreq_ctx * rowreq_ctx);
        int strModInfoTable_commit(strModInfoTable_rowreq_ctx * rowreq_ctx);

        strModInfoTable_rowreq_ctx *strModInfoTable_row_find_by_mib_index(strModInfoTable_mib_index
                                                                          * mib_idx);

        extern oid strModInfoTable_oid[];
        extern int strModInfoTable_oid_size;

/**********************************************************************
 **********************************************************************
 ***
 *** Table strModStatTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strModStatTable is subid 1 of strModStat.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.3.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strModStatTable registration context.
         */
        typedef netsnmp_data_list strModStatTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strModStatTable data context structure.
 * This structure is used to represent the data for strModStatTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strModStatTable.
 */
        typedef struct strModStatTable_data_s {

                /*
                 * strModStatQueues(2)/StreamsModuleQueues/ASN_OCTET_STR/char(u_long)//L/A/w/E/r/d/h
                 */
                u_long strModStatQueues;

                /*
                 * strModStatPCnt(3)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatPCnt;

                /*
                 * strModStatScnt(4)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatScnt;

                /*
                 * strModStatOcnt(5)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatOcnt;

                /*
                 * strModStatCcnt(6)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatCcnt;

                /*
                 * strModStatAcnt(7)/COUNTER/ASN_COUNTER/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatAcnt;

                /*
                 * strModStatPrivate(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
                 */
                char strModStatPrivate[65535];
                size_t strModStatPrivate_len;   /* # of char elements, not bytes */

                /*
                 * strModStatFlags(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strModStatFlags;

        } strModStatTable_data;

/*
 * TODO:120:r: |-> Review strModStatTable mib index.
 * This structure is used to represent the index for strModStatTable.
 */
        typedef struct strModStatTable_mib_index_s {

                /*
                 * strModIdnum(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModIdnum;

                /*
                 * strModStatIndex(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strModStatIndex;

        } strModStatTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strModStatTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strModStatTable_IDX_LEN     2

/* *********************************************************************
 * TODO:130:o: |-> Review strModStatTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strModStatTable_rowreq_ctx pointer.
 */
        typedef struct strModStatTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strModStatTable_IDX_LEN];

                strModStatTable_mib_index tbl_idx;

                strModStatTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strModStatTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strModStatTable_data_list;

        } strModStatTable_rowreq_ctx;

        typedef struct strModStatTable_ref_rowreq_ctx_s {
                strModStatTable_rowreq_ctx *rowreq_ctx;
        } strModStatTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strModStatTable_pre_request(strModStatTable_registration * user_context);
        int strModStatTable_post_request(strModStatTable_registration * user_context, int rc);

        int strModStatTable_rowreq_ctx_init(strModStatTable_rowreq_ctx * rowreq_ctx,
                                            void *user_init_ctx);
        void strModStatTable_rowreq_ctx_cleanup(strModStatTable_rowreq_ctx * rowreq_ctx);

        strModStatTable_rowreq_ctx *strModStatTable_row_find_by_mib_index(strModStatTable_mib_index
                                                                          * mib_idx);

        extern oid strModStatTable_oid[];
        extern int strModStatTable_oid_size;

/**********************************************************************
 **********************************************************************
 ***
 *** Table strApshTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strApshTable is subid 1 of strApsh.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.4.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strApshTable registration context.
         */
        typedef netsnmp_data_list strApshTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strApshTable data context structure.
 * This structure is used to represent the data for strApshTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strApshTable.
 */
        typedef struct strApshTable_data_s {

                /*
                 * strApshMajor(2)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
                 */
                u_long strApshMajor;

                /*
                 * strApshLastMinor(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strApshLastMinor;

                /*
                 * strApshModules(5)/StreamsModuleList/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
                 */
                char strApshModules[255];
                size_t strApshModules_len;      /* # of char elements, not bytes */

                /*
                 * strApshStatus(6)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
                 */
                u_long strApshStatus;

        } strApshTable_data;

/* *********************************************************************
 * TODO:115:o: |-> Review strApshTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
        typedef strApshTable_data strApshTable_undo_data;

/*
 * TODO:120:r: |-> Review strApshTable mib index.
 * This structure is used to represent the index for strApshTable.
 */
        typedef struct strApshTable_mib_index_s {

                /*
                 * strApshName(1)/StreamsModuleName/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/H
                 */
                char strApshName[8];
                size_t strApshName_len;

                /*
                 * strApshMinor(3)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strApshMinor;

        } strApshTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strApshTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         *
         * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
         * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
         * Guessing 128 - col/entry(2)  - oid len(14)
         */
#define MAX_strApshTable_IDX_LEN     10

/* *********************************************************************
 * TODO:130:o: |-> Review strApshTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strApshTable_rowreq_ctx pointer.
 */
        typedef struct strApshTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strApshTable_IDX_LEN];

                strApshTable_mib_index tbl_idx;

                strApshTable_data data;
                strApshTable_undo_data *undo;
                unsigned int column_set_flags;  /* flags for set columns */

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strApshTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strApshTable_data_list;

        } strApshTable_rowreq_ctx;

        typedef struct strApshTable_ref_rowreq_ctx_s {
                strApshTable_rowreq_ctx *rowreq_ctx;
        } strApshTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strApshTable_pre_request(strApshTable_registration * user_context);
        int strApshTable_post_request(strApshTable_registration * user_context, int rc);

        int strApshTable_rowreq_ctx_init(strApshTable_rowreq_ctx * rowreq_ctx, void *user_init_ctx);
        void strApshTable_rowreq_ctx_cleanup(strApshTable_rowreq_ctx * rowreq_ctx);

        int strApshTable_check_dependencies(strApshTable_rowreq_ctx * rowreq_ctx);
        int strApshTable_commit(strApshTable_rowreq_ctx * rowreq_ctx);

        strApshTable_rowreq_ctx *strApshTable_row_find_by_mib_index(strApshTable_mib_index *
                                                                    mib_idx);

        extern oid strApshTable_oid[];
        extern int strApshTable_oid_size;

/**********************************************************************
 **********************************************************************
 ***
 *** Table strStatsTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strStatsTable is subid 1 of strStats.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.5.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strStatsTable registration context.
         */
        typedef netsnmp_data_list strStatsTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strStatsTable data context structure.
 * This structure is used to represent the data for strStatsTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strStatsTable.
 */
        typedef struct strStatsTable_data_s {

                /*
                 * strStatsCurrentAllocs(2)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strStatsCurrentAllocs;

                /*
                 * strStatsHighWaterMark(3)/GAUGE/ASN_GAUGE/u_long(u_long)//l/A/w/e/r/d/h
                 */
                u_long strStatsHighWaterMark;

        } strStatsTable_data;

/*
 * TODO:120:r: |-> Review strStatsTable mib index.
 * This structure is used to represent the index for strStatsTable.
 */
        typedef struct strStatsTable_mib_index_s {

                /*
                 * strStatsStructure(1)/INTEGER/ASN_INTEGER/long(u_long)//l/A/w/E/r/d/h
                 */
                u_long strStatsStructure;

        } strStatsTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strStatsTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         */
#define MAX_strStatsTable_IDX_LEN     1

/* *********************************************************************
 * TODO:130:o: |-> Review strStatsTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strStatsTable_rowreq_ctx pointer.
 */
        typedef struct strStatsTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strStatsTable_IDX_LEN];

                strStatsTable_mib_index tbl_idx;

                strStatsTable_data data;

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strStatsTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strStatsTable_data_list;

        } strStatsTable_rowreq_ctx;

        typedef struct strStatsTable_ref_rowreq_ctx_s {
                strStatsTable_rowreq_ctx *rowreq_ctx;
        } strStatsTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strStatsTable_pre_request(strStatsTable_registration * user_context);
        int strStatsTable_post_request(strStatsTable_registration * user_context, int rc);

        int strStatsTable_rowreq_ctx_init(strStatsTable_rowreq_ctx * rowreq_ctx,
                                          void *user_init_ctx);
        void strStatsTable_rowreq_ctx_cleanup(strStatsTable_rowreq_ctx * rowreq_ctx);

        strStatsTable_rowreq_ctx *strStatsTable_row_find_by_mib_index(strStatsTable_mib_index *
                                                                      mib_idx);

        extern oid strStatsTable_oid[];
        extern int strStatsTable_oid_size;

#include "strMIB_interface.h"
#include "strMIB_data_access.h"
#include "strMIB_data_get.h"
#include "strMIB_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif                                  /* STRMIB_H */
