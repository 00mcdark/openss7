/*
 * Note: this file originally auto-generated by mib2c using
 *       version : 1.49 $ of : mfd-top.m2c,v $
 *
 * $Id:$
 */
#ifndef STRAPSHTABLE_H
#define STRAPSHTABLE_H

#ifdef __cplusplus
extern "C" {
#endif

/** @defgroup misc misc: Miscelaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(OPENSS7-STREAMS-MIB)
config_require(OPENSS7-STREAMS-MIB/strApshTable/strApshTable_interface)
config_require(OPENSS7-STREAMS-MIB/strApshTable/strApshTable_data_access)
config_require(OPENSS7-STREAMS-MIB/strApshTable/strApshTable_data_get)
config_require(OPENSS7-STREAMS-MIB/strApshTable/strApshTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for strApshTable */
#include "strApshTable_oids.h"

/* enum definions */
#include "strApshTable_enums.h"

/* *********************************************************************
 * function declarations
 */
        void init_strApshTable(void);
        void shutdown_strApshTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table strApshTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * OPENSS7-STREAMS-MIB::strApshTable is subid 1 of strApsh.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.29591.1.1.1.1.1.4.1, length: 14
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
        /*
         * TODO:101:o: |-> Review strApshTable registration context.
         */
        typedef netsnmp_data_list strApshTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review strApshTable data context structure.
 * This structure is used to represent the data for strApshTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * strApshTable.
 */
        typedef struct strApshTable_data_s {

                /*
                 * strApshMajor(2)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/R/d/h
                 */
                u_long strApshMajor;

                /*
                 * strApshLastMinor(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strApshLastMinor;

                /*
                 * strApshModules(5)/StreamsModuleList/ASN_OCTET_STR/char(char)//L/A/W/e/R/d/H
                 */
                char strApshModules[255];
                size_t strApshModules_len;      /* # of char elements, not bytes */

                /*
                 * strApshStatus(6)/RowStatus/ASN_INTEGER/long(u_long)//l/A/W/E/r/d/h
                 */
                u_long strApshStatus;

        } strApshTable_data;

/* *********************************************************************
 * TODO:115:o: |-> Review strApshTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
        typedef strApshTable_data strApshTable_undo_data;

/*
 * TODO:120:r: |-> Review strApshTable mib index.
 * This structure is used to represent the index for strApshTable.
 */
        typedef struct strApshTable_mib_index_s {

                /*
                 * strApshName(1)/StreamsModuleName/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/H
                 */
                char strApshName[8];
                size_t strApshName_len;

                /*
                 * strApshMinor(3)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/R/d/h
                 */
                u_long strApshMinor;

        } strApshTable_mib_index;

        /*
         * TODO:121:r: |   |-> Review strApshTable max index length.
         * If you KNOW that your indexes will never exceed a certain
         * length, update this macro to that length.
         *
         * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
         * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
         * Guessing 128 - col/entry(2)  - oid len(14)
         */
#define MAX_strApshTable_IDX_LEN     10

/* *********************************************************************
 * TODO:130:o: |-> Review strApshTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * strApshTable_rowreq_ctx pointer.
 */
        typedef struct strApshTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
                netsnmp_index oid_idx;
                oid oid_tmp[MAX_strApshTable_IDX_LEN];

                strApshTable_mib_index tbl_idx;

                strApshTable_data data;
                strApshTable_undo_data *undo;
                unsigned int column_set_flags;  /* flags for set columns */

                /*
                 * flags per row. Currently, the first (lower) 8 bits are reserved
                 * for the user. See mfd.h for other flags.
                 */
                u_int rowreq_flags;

                /*
                 * TODO:131:o: |   |-> Add useful data to strApshTable rowreq context.
                 */

                /*
                 * storage for future expansion
                 */
                netsnmp_data_list *strApshTable_data_list;

        } strApshTable_rowreq_ctx;

        typedef struct strApshTable_ref_rowreq_ctx_s {
                strApshTable_rowreq_ctx *rowreq_ctx;
        } strApshTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
        int strApshTable_pre_request(strApshTable_registration * user_context);
        int strApshTable_post_request(strApshTable_registration * user_context, int rc);

        int strApshTable_rowreq_ctx_init(strApshTable_rowreq_ctx * rowreq_ctx, void *user_init_ctx);
        void strApshTable_rowreq_ctx_cleanup(strApshTable_rowreq_ctx * rowreq_ctx);

        int strApshTable_commit(strApshTable_rowreq_ctx * rowreq_ctx);

        strApshTable_rowreq_ctx *strApshTable_row_find_by_mib_index(strApshTable_mib_index *
                                                                    mib_idx);

        extern oid strApshTable_oid[];
        extern int strApshTable_oid_size;

#include "strApshTable_interface.h"
#include "strApshTable_data_access.h"
#include "strApshTable_data_get.h"
#include "strApshTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif
#endif                                  /* STRAPSHTABLE_H */
