'\" rtp
.\" -*- nroff -*- vim: ft=nroff
.\"
.\" @(#) $Id: bssap.4,v 0.9.2.1 2004/02/29 19:06:54 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/02/29 19:06:54 $ by $Author: brian $
.\"
.\" =========================================================================
.so openss7.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH BSSAP 4 "$Date: 2004/02/29 19:06:54 $" "$Name:  $" "BSS Application Part (BSSAP) Driver"
.SH NAME
.B BSSAP
\- Base Station System (BSS) Application Part (BSSAP) Driver
.SH SYNOPSIS
.PP
.B #include <ss7/cci.h>
.br
.B #include <ss7/bssapi.h>
.br
.B #include <ss7/bssapi_ioctl.h>
.HP
.BI "int " bssap_stream " = open(" \fR/dev/bssap\fI ", " flag );
.SH DESCRIPTION
.PP
.B BSSAP
is an implementation of the Base Station System (BSS) Application Part (BSSAP)
Layer 3 as defined in ETSI GSM 04.08.
.B BSSAP
provides a reliable sequenced delivery of call control messages over a
connection oriented data link between a GSM BSS and a GSM MSC.
.B BSSAP
provides strong assurances that the data arrives in order on a stream and
performs retransmission of lost packets.  It generates and checks a per-packet
checksum (at lower levels) to catch transmission errors.
.PP
.B MSSAP
is a implemented as a
.IR STREAMS (4)
multiplexing driver.
.BR sccp (4)
or
.BR sua (4)
streams are linked under the
.B BSSAP
multiplexing driver using the
.IR I_LINK " or " I_PLINK
comands of
.BR streamio (7),
to provide data link services to
.BR BSSAP .
Once linked, the streams are configured using
the IO controls listed below under
.IR \*(lqIOCTLS\*(rq .
.PP
.B BSSAP
provides the stream types listed below.  To select a stream,
.I device
can be selected from the following:
.TP
.I /dev/bssap
This device provides the
.B BSSAP
protocol service interface using the
Call Control Interface (CCI)
described in
.BR cci (7).
This interface is suitable for use with other SS7 modules and the
.B OpenSwitch
call control libraries.
.SH IOCTLS
.PP
.HP
.BI "int " retval " = ioctl(" fd ", " cmd ", " arg );
.SS Options
.PP
Options can be got and set using the
.B gsma_option
structure formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_option {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    /* followed by object-specific options structure */
} gsma_option_t;
\fR\s+1
.fi
.PP
For the following IO controls,
.I arg
is a pointer to a
.B gsma_option
structure.
.TP
.B GSMA_IOCGOPTIONS
Get the options for the object with the specified
.IR type " and " id .
.TP
.B GSMA_IOCSOPTIONS
Set the options for the object with the specified
.IR type " and " id .
.SS Configuration
.PP
Configuration can be managed using the IO control described below.  For
configuration IO controls,
.I arg
points to a
.B gsma_config
structure followed by an object type sepcific configuration structure
described under
.IR "\*(lqOBJECTS\*(rq" ,
below.
.PP
The
.B gsma_config
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_config {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong cmd;                  /* object command */
    /* followed by object-specific configuration structures */
} gsma_config_t;
\fR\s+1
.fi
.PP
The
.B gsma_config
structure has the following members:
.TP
.IR id ,
is an identifier for the object or zero (0) on
.BR GSMA_ADD
if the driver should assign a unique object identifier;
.TP
.IR type ,
specifies the object type to which the identifier applies; and
.TP
.IR cmd ,
is the action to perform on the object.
.PP
The configuration command,
.IR cmd ,
can be one of the following values:
.TP
.BR GSMA_GET ,
gets the object configuration and as many children of the object as will fit
in the supplied buffer;
.TP
.BR GSMA_ADD ,
adds an object with the given
.IR id ,
or, if the
.I id
is zero (0), assigns a new identifier for the newly created object;
.TP
.BR GSMA_CHA ,
changes the configuration of the specified object; and
.TP
.BR GSMA_DEL ,
deletes the specified object.
.PP
The following IO controls are defined for confiruation management:
.TP
.B GSMA_IOCGCONFIG
Gets the confiruation for the specified object and as many children as will
fit in the provided buffer.
This IO control implies the
.I GMSA_GET
configuration command.
.TP
.B GSMA_IOCSCONFIG
Sets the configuration for the specified object.
This IO control uses the
.IR GSMA_ADD ", " GSMA_CHA " or " GSMA_DEL
configuration command.
.TP
.B GSMA_IOCTCONFIG
Tests the configuration for the specified object.
This IO control uses the
.IR GSMA_ADD ", " GSMA_CHA " or " GSMA_DEL
configuration command.
.TP
.B GSMA_IOCCCONFIG
Commits the configuration for the specified object.
This IO control uses the
.IR GSMA_ADD ", " GSMA_CHA " or " GSMA_DEL
configuration command.
.SS State
.PP
State can be managed using the IO controls described below.  For state
management IO controls,
.I arg
points to a
.B gsma_statem
structure folled by an object type specific state structure described under
.IR "\*(lqOBJECTS\*(rq" ,
below.
.PP
The
.B gsma_statem
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_statem {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong flags;                /* object primary flags */
    ulong statem;               /* object primary state */
    /* followed by object-specific configuration structures */
} gsma_statem_t;
\fR\s+1
.fi
.PP
The
.B gsma_statem
structure has the following members:
.TP
.IR type ,
is the type of the object whose state is to be managed;
.TP
.IR id ,
is the identifier of the object of the
.IR type ;
.TP
.IR flags ,
are the primary state flags associated with the object ; and
.TP
.IR state ,
is the primary state of the object.
.PP
The following IO controls are defined for configuration management:
.TP
.B GSMA_IOCGSTATEM
Gets the state associated with the object.  The argument pointer,
.IR arg ,
points to the
.B gsma_statem
structure and object-type-specific structure that will hold the results of the
state retrieval.
.TP
.B GSMA_IOCCMRESET
Resets the state of the specified object.  The argument pointer,
.IR arg ,
points to
.B gsma_statem
structure and object-type-specific structure that will hold the results of the
state of the object after the reset.
.SS Statistics
.PP
Statistics can be collected and collection intervals managed using the IO
controls described below.  For statistics management IO controls,
.I arg
points to a
.B gsma_stats
structure, followed by an object-type-specific statistics structure described
under
.IR "\*(lqOBJECTS\*(rq" ,
below.
.PP
The
.B gsma_stats
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_stats {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong header;               /* object stats header */
    /* followed by object-specific configuration structures */
} gsma_stats_t;
\fR\s+1
.fi
.PP
The
.B gsma_stats
structure has the following members:
.TP
.IR type ,
is the type of the object whose state is to be managed;
.TP
.IR id ,
is the identifier of the object of the
.IR type ;
.TP
.IR header ,
is a system timestamp indicating the collection time for the statistics.
.PP
The following IO controls are defined for statistics collection and
management:
.TP
.B GSMA_IOCGSTATSP
Get the statistics periods for the specified object.
The argument,
.IR arg ,
is a pointer to the
.B gsma_stats
structure that will hold the collected statistics periods.
.TP
.B GSMA_IOCSSTATSP
Set the statistics periods for the specified object.
The argument
.IR arg ,
is a pointer to the
.B gsma_stats
structure that specifies the new collection periods.
.TP
.B GSMA_IOCGSTATS
Collect statistics for the specified object.
The argument,
.IR arg ,
is a pointer to the
.B gsma_stats
structure that will hold the collected statistics.
.TP
.B GSMA_IOCCSTATS
Clear statistics for the specified object.
The argument,
.IR arg ,
is ignored.
.SS Events
.PP
Events can be managed using the IO controls described below.  For event
management IO controls,
.I arg
points to a
.B gsma_notify
structure.
.PP
The
.B gsma_notify
structure is formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_notify {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    lmi_notify_t notify;        /* object notifications */
    /* followed by object-specific configuration structures */
} gsma_notify_t;
\fR\s+1
.fi
.PP
The
.B gsma_notify
structure has the following members:
.TP
.IR type ,
the type of the object;
.TP
.IR id ,
the identifier of the object of a type; and
.TP
.IR notify ,
a bitmask of the events for which management should receive notifications.
.PP
The following IO controls are defined for event management:
.TP
.B GSMA_IOCGNOTIFY
Gets the notifications for the specified object.  The argument,
.IR arg ,
points to a
.B gsma_notify
structure to hold the retrieved events.
Each event flag set in the
.I notify
field of the retrieved structure corresponds to an active notification; each
event flag clear, to an inactive notification.
.TP
.B GSMA_IOCSNOTIFY
Sets notifications for the specified object.  The argument,
.IR arg ,
points to a
.B gsma_notify
structure that specifies the bit mask of the notifications to activate.
Each notification flag that is set in the
.I notify
field of the structure will be activated.
.TP
.B GSMA_IOCCNOTIFY
Clears notifications for the specified object.  The argument,
.IR arg ,
points to a 
.B gsma_notify
structure that specifies the bit mask of the notifications to deactivate.
Each notification flag that is set in the
.I notify
field of the structure will be deactivated.
.PP
When an event occurs for an active notification, a
.BR CC_MAINT_IND (7)
indication will be generated by the CCS provider.
.SS Management
.PP
Objects can be managed using the IO controls described below.  For object
management IO controls,
.I arg
points to a
.B gsma_mgmt
structure formatted as follows:
.sp
.nf
\fC\s-1\
typedef struct gsma_mgmt {
    ulong type;                 /* object type */
    ulong id;                   /* object id */
    ulong cmd;                  /* object command */
} gsma_mgmt_t;
\fR\s+1
.fi
.PP
The
.B gsma_mgmt
structure has the following members:
.TP
.IR type ,
the type of the object;
.TP
.IR id ,
the identifier of the object of a type; and
.TP
.IR cmd ,
the management command.
.PP
The management command,
.IR cmd ,
may be one of the following values:
.TP
.B GSMA_MGMT_REGISTER
.TP
.B GSMA_MGMT_DEREGISTER
.TP
.B GSMA_MGMT_INHIBIT
.TP
.B GSMA_MGMT_UNINHIBIT
.PP
The following IO controls are defined for object management:
.TP
.B GSMA_IOCCMGMT
Invokes the specified management command on the specified object.
.SH OBJECTS
.PP
.B BSSAP
provides for management of a number of managed object.  These objects are of a
number of types as follows:
.TP
.B GSMA_OBJ_TYPE_DF
Default object.  The default object represents all global and BSSAP instance
information.

.TP
.B GSMA_OBJ_TYPE_CC
Call Control User.  A call control user object represents a BSSAP user.  For
example, an open BSSAP stream is a BSSAP user object.  BSSAP user objects are
identified by their "stream token".
Call control user objects are not directly manageable by BSSAP IO controls.
These objects are managed in the
.I STREAMS
context through the use of the
.BR open "(2), " close "(2), " putmsg "(2) and " getmsg (2)
ssytem calls.
Information about call control users, and call control user management is
performed using the protocol service interface.  See
.BR cci_bssap (7).

.TP
.B GSMA_OBJ_TYPE_CR
Call Reference.  A call reference is a reference to a call independent of the
GSM-A circuits to which the call corresponds.  This is to support network
suspend/resume where the call is detached from the GSM-A circuit and then
associated with a new GSM-A circuit when it is resumed.
Calls belong to a Mobile Station (MS).
A call is associated with a SCCP connection that is used for signalling for the call.
A call has a list of circuits that are being used for the call.

.TP
.B GSMA_OBJ_TYPE_CT
Circuit.  Each circuit object corresponds to a single timeslot in a GSM-A
interface between an MSC and a BSS that can be used to carry MS calls.  Each
circuit can be engaged in a call with a Call Control user and can be engaged
in management with a Management User.  Each circuit belongs to a Circuit
Group and can belong to a Call Reference when engaged in a call.

.TP
.B GSMA_OBJ_TYPE_CG
Circuit Group.  Each circuit group object corresponds to a logical and
physical group of circuits (i.e. circuits that are time-slots in the same
GSM-A E1/T1 interface).  Each circuit group constis of a set of circuits that
use the same transmission facility.  Each circuit group can be engaged in
circuit group management with a Management User.  Each circuit group belongs
to a BSS or MSC.

.TP
.B GSMA_OBJ_TYPE_SC
SCCP Connection.  An SCCP connection is a connection oriented association
between a base station system BSS and a mobile switching center MSC used for
call signalling for a mobile station MS.  An SCCP connection is associated
with a call reference.

.TP
.B GSMA_OBJ_TYPE_MS
Mobile Station.  A mobile statiion is associated with a call reference.

.TP
.B GSMA_OBJ_TYPE_BSS
Base Station System.  A BSS is a local or remote base station system that has
a connected GSM-A interface.  A BSS is a collection of circuit groups and
signalling connections.  A BSS can be identified by its local or remote SS7
signalling point code or a Common Language Equipment Identifier (CLEI).
An integer identifier is assigned to each BSS object for identifying the
object to the CCS provider.

.TP
.B GSMA_OBJ_TYPE_MSC
Mobile Switching Center. An MSC is a local or remote mobile switching center
that has a conneced GSM-A interface.  An MSC is a collection of circuit groups
an signalling connections.  An MSC can be identified by its local or remote
SS7 signalling point code or a Common Language Equipment Identifier (CLEI).
An integer identifier is assigned to each MSC object for identifying the
object to the CCS provider.

.TP
.B GSMA_OBJ_TYPE_SP

.SS GSMA_OBJ_TYPE_DF
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_df {
} gsma_conf_df_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_df {
} gsma_opt_conf_df_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_df {
} gsma_timers_df_t;
typedef struct gsma_statem_df {
    gsma_timers_df_t timers;
} gsma_statem_df_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_df {
} gsma_stats_df_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_CC
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_CR
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_cr {
} gsma_conf_cr_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_cr {
} gsma_opt_conf_cr_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_cr {
} gsma_timers_cr_t;
typedef struct gsma_statem_cr {
    gsma_timers_cr_t timers;
} gsma_statem_cr_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_cr {
} gsma_stats_cr_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_CT
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_ct {
} gsma_conf_ct_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_ct {
} gsma_opt_conf_ct_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_ct {
} gsma_timers_ct_t;
typedef struct gsma_statem_ct {
    gsma_timers_ct_t timers;
} gsma_statem_ct_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_ct {
} gsma_stats_ct_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_CG
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_cg {
} gsma_conf_cg_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_cg {
} gsma_opt_conf_cg_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_cg {
} gsma_timers_cg_t;
typedef struct gsma_statem_cg {
    gsma_timers_cg_t timers;
} gsma_statem_cg_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_cg {
} gsma_stats_cg_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_SC
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_sc {
} gsma_conf_sc_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_sc {
} gsma_opt_conf_sc_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_sc {
} gsma_timers_sc_t;
typedef struct gsma_statem_sc {
    gsma_timers_sc_t timers;
} gsma_statem_sc_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_sc {
} gsma_stats_sc_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_MS
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_ms {
} gsma_conf_ms_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_ms {
} gsma_opt_conf_ms_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_ms {
} gsma_timers_ms_t;
typedef struct gsma_statem_ms {
    gsma_timers_ms_t timers;
} gsma_statem_ms_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_ms {
} gsma_stats_ms_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_BSS
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_bss {
    ulong spid;                 /* local signalling point id */
    struct sccp_addr add;       /* remote signalling address */
    lmi_option_t proto;         /* protocol variant and options */
} gsma_conf_bss_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_bss {
    /* timer values */
} gsma_opt_conf_bss_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_bss {
} gsma_timers_bss_t;
typedef struct gsma_statem_bss {
    gsma_timers_bss_t timers;
} gsma_statem_bss_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_bss {
} gsma_stats_bss_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_MSC
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_msc {
    ulong spid;                 /* local signalling point id */
    struct sccp_addr add;       /* remote signalling address */
    lmi_option_t proto;         /* protocol variant and options */
} gsma_conf_msc_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_msc {
} gsma_opt_conf_msc_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_msc {
} gsma_timers_msc_t;
typedef struct gsma_statem_msc {
    gsma_timers_msc_t timers;
} gsma_statem_msc_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_msc {
} gsma_stats_msc_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.SS GSMA_OBJ_TYPE_SP
.PP
.PP
.B Configuration
.sp
.nf
\fC\s-1\
typedef struct gsma_conf_sp {
    ulong spid;                 /* local signalling point identifier */
    ulong srid;                 /* remote signalling point identifier */
    ulong muxid;                /* lower multiplexing driver id (SCCP connectionless) */
    lmi_option_t proto;         /* protocol variant and options */
} gsma_conf_sp_t;
\fR\s+1
.fi
.PP
.B Options
.sp
.nf
\fC\s-1\
typedef struct gsma_opt_conf_sp {
} gsma_opt_conf_sp_t;
\fR\s+1
.fi
.PP
.B State
.sp
.nf
\fC\s-1\
typedef struct gsma_timers_sp {
} gsma_timers_sp_t;

typedef struct gsma_statem_sp {
    gsma_timers_sp_t timers;
    ulong tst_bind;
    ulong mgm_bind;
    ulong mnt_bind;
    ulong icc_bind;
    ulong ogc_bind[0];
    /* followed by bound streams for outgoing calls */
} gsma_statem_sp_t;
\fR\s+1
.fi
.PP
.B Statistics
.sp
.nf
\fC\s-1\
typedef struct gsma_stats_sp {
} gsma_stats_sp_t;
\fR\s+1
.fi
.PP
.B Events
.PP
.B Management
.\"
.\"
.[
$LIST$
.]
.\"
.\"
.TI
