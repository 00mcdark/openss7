'\" rtp
.\" -*- nroff -*- vim: ft=nroff
.\"
.\" @(#) $Id: queue.9,v 0.9.2.1 2004/02/29 19:07:38 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/02/29 19:07:38 $ by $Author: brian $
.\"
.\" =========================================================================
.so openss7.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH QUEUE 9 "$Date: 2004/02/29 19:07:38 $" "$Name:  $" "Linux Fast-STREAMS DDI/DKI"
.\"
.\"
.SH NAME
.B queue, queue_t
\- \fISTREAMS\fR message queue structure
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.PP
.nf
\fC\s-2
typedef struct queue {
        struct qinit *q_qinfo;                  /* info structure for the queue */
        struct msgb *q_first;                   /* head of queued messages */
        struct msgb *q_last;                    /* tail of queued messages */
        struct queue *q_next;                   /* next queue in this stream */
        struct queue *q_link;                   /* next queue for scheduling */
        void *q_ptr;                            /* private data pointer */
        size_t q_count;                         /* number of bytes in queue */
        uint q_flag;                            /* queue state */
        ssize_t q_minpsz;                       /* min packet size accepted */
        ssize_t q_maxpsz;                       /* max packet size accepted */
        size_t q_hiwat;                         /* hi water mark for flow control */
        size_t q_lowat;                         /* lo water mark for flow control */
        struct qband *q_bandp;                  /* band's flow-control information */
        unsigned char q_nband;                  /* number of priority bands */
        /* Linux fast-STREAMS specific members */
        struct msgb *q_pctl;                    /* tail of queued QPCTL messages */
        ssize_t q_msgs;                         /* messages on queue */
        rwlock_t q_rwlock;                      /* lock for this queue structure */
        unsigned long q_iflags;                 /* interrupt flags for freeze */
} queue_t;
\s+2\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The following members correspond to
SVR 4.2 EFT members:
.TP
.I q_qinfo
the
.BR qinit (9)
structure for the queue.
.TP
.I q_first
the first
.BR mblk_t (9)
message on the queue.
.TP
.I q_last
the last
.BR mblk_t (9)
message on the queue.
.TP
.I q_next
the downstream queue in this stream.
.TP
.I q_link
the next queue to have its
.BR srv (9)
procedure scheduled.
.TP
.I q_ptr
a pointer to the modules private structure.
.TP
.I q_count
the count of the data bytes in messages on the queue.
.TP
.I q_flag
the queue flags.
.TP
.I q_minpsz
the minimum packet size accepted.
.TP
.I q_maxpsz
the maximum packet size accepted.
.TP
.I q_hiwat
the queue high water mark for flow control.
.TP
.I q_lowat
the queue low water mark for flow control.
.TP
.I q_bandp
a pointer to the
.BR qband (9)
structures representing the bands of the queue.
.TP
.I q_nband
the number of queue bands present.
.PP
The following members are
.B Linux Fast-STREAMS
specific members:
.TP
.I q_pctl
the tail of queued
.B QPCTL
messages for optimization of queue utilities.
.TP
.I q_msgs
the number of message on the queue for optimization of
.BR qsize (9).
.TP
.I q_rwlock
the queue read write lock.
.TP
.I q_iflags
location for the temporary storage of interrupt flags for implementation of
.BR freezestr (9).
.\"
.\"
.SH DESCRIPTION
.PP
.PP
The following queue utility functions are provided:
.PP
.TS
tab(,);
llsss.
\fBOTHERQ\fP(9), \- other queue in a queue pair
\fBRD\fP(9), \- read queue of a queue pair
\fBSAMESTR\fP(9), \- next queue in the same stream
\fBWR\fP(9), \- write queue of a queue pair
\fBallocq\fP(9), \- allocate a queue pair
\fBappq\fP(9), \- append a message behind another in a queue
\fBbackq\fP(9), \- feeding queue
\fBbcanput\fP(9), \- test band for flow control for a queue
\fBbcanputnext\fP(9), \- test band for flow control for next queue
\fBcanenable\fP(9), \- test if queue can be enabled
\fBcanput\fP(9), \- test for flow control for a queue
\fBcanputnext\fP(9), \- test for flow control for next queue
\fBenableok\fP(9), \- allow a queue to be enabled
\fBflushband\fP(9), \- flush messages from a band of a queue
\fBflushq\fP(9), \- flush messages from a queue
\fBfreeq\fP(9), \- free a queue pair
\fBfreezestr\fP(9), \- freeze the stream containing a queue
\fBgetq\fP(9), \- get a message from a queue
\fBinsq\fP(9), \- insert a message before another in a queue
\fBmi_bufcall\fP(9), \- enable a queue on bufcall
\fBnoenable\fP(9), \- prohibit enabling of a queue
\fBput\fP(9), \- put a message to a queue's put procedure
\fBputbq\fP(9), \- put a message back on a queue
\fBputctl\fP(9), \- put a control message on a queue
\fBputctl1\fP(9), \- put a one-byte control message on a queue
\fBputnext\fP(9), \- put a message on the next queue
\fBputnextctl\fP(9), \- put a control message on the next queue
\fBputnextctl1\fP(9), \- put a one-byte control message on the next queue
\fBputq\fP(9), \- put a message on a queue
\fBqattach\fP(9), \- attach a queue pair to a stream
\fBqbufcall\fP(9), \- perform a buffer callback for a queue
\fBqclose\fP(9), \- close a queue pair
\fBqcountstrm\fP(9), \- count the data bytes on all queues in a stream
\fBqdetach\fP(9), \- detach a queue pair from a stream
\fBqenable\fP(9), \- enable a service procedure for a queue
\fBqopen\fP(9), \- open a queue pair
\fBqprocsoff\fP(9), \- turn put and service procedures off for a queue pair
\fBqprocson\fP(9), \- turn put and service procedures on for a queue pair
\fBqreply\fP(9), \- reply with a message for a queue
\fBqsize\fP(9), \- count the messages on a queue
\fBqtimeout\fP(9), \- schedule a timeout for a queue
\fBqunbufcall\fP(9), \- cancel a buffer call for a queue
\fBquntimeout\fP(9), \- cancel a timeout for a queue
\fBqwait\fP(9), \- wait for a put to a queue
\fBqwait_sig\fP(9), \- wait for a signal or put to a queue
\fBqwriter\fP(9), \- call exclusive procedure for a queue
\fBrmvq\fP(9), \- remove a message from a queue
\fBsetq\fP(9), \- set the parameters of a queue pair
\fBstrqget\fP(9), \- get a parameter for a queue
\fBstrqset\fP(9), \- set a parameter for a queue
\fBunfreezestr\fP(9), \- thaw the stream containing a queue
.TE

.\"
.\"
.SH CONTEXT
.PP
Functions that operate on a queue or queue pair can be called from any
context.
.\"
.\"
.SH MP-STREAMS
.PP
.PP
The queue pointers and members, with the exception of the
.I q_next
pointer and the
.I q_flag
member, are protected by the queue read write lock,
.RI ( q_rwlock ).
The
.I q_next
pointer is protected with the stream head read write lock.
The
.I q_flag
member is protected using atomic bit operations.
.PP
Because the queue read write lock
.RI ( q_rwlock )
is not a nesting lock,
functions that take the queue write lock cannot be invoked again by the same
thread, or cause the invocaion of another function that takes the queue write
lock by the same thread or single-party deadlock will result.
.\"
.\"
.SH NOTICES
.PP
Members of the
.B queue
structure should not be accessed directly by
.I STREAMS
modules or drivers.  Portable
.I STREAMS
modules and drivers should use the facilities provided by
.BR strqget (9)
and
.BR strqset (9)
for implementation and architecture independency.
.PP
The
.B queue
structure is only a subset of the
.B queinfo
structure used by the
.I STREAMS
scheduler.  Additional hidden fields are present in the
.B queinfo
structure.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR OTHERQ (9),
.BR RD (9),
.BR SAMESTR (9),
.BR WR (9),
.BR allocb (9),
.BR allocq (9),
.BR appq (9),
.BR backq (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR canenable (9),
.BR canput (9),
.BR canputnext (9),
.BR enableok (9),
.BR flushband (9),
.BR flushq (9),
.BR freeq (9),
.BR freezestr (9),
.BR getq (9),
.BR insq (9),
.BR noenable (9),
.BR put (9),
.BR putbq (9),
.BR putctl (9),
.BR putctl1 (9),
.BR putnext (9),
.BR putnextctl (9),
.BR putnextctl1 (9),
.BR putq (9),
.BR qattach (9),
.BR qbufcall (9),
.BR qclose (9),
.BR qcountstrm (9),
.BR qdetach (9),
.BR qenable (9),
.BR qopen (9),
.BR qprocsoff (9),
.BR qprocson (9),
.BR qreply (9),
.BR qsize (9),
.BR qtimeout (9),
.BR qunbufcall (9),
.BR quntimeout (9),
.BR qwait (9),
.BR qwait_sig (9),
.BR qwriter (9),
.BR rmvq (9),
.BR setq (9),
.BR strqget (9),
.BR strqset (9),
.BR unfreezestr (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.BR queue
structure is compaitble with
.BR "SVR 4.2 MP DDI/DKI" ,
.IR Solaris \(rg
and LiS
.[
LiS
.]
with the following exceptions:
.IP \(bu
LiS uses a
.I q_other
member which is not present.  LiS modules or drivers that manipulate this queue
field directly will not be binary compatible.  LiS modules or drivers that use
only
.BR RD (9),
.BR WR (9),
.BR OTHERQ (9),
will be binary compatible because they call external symbols provided by the
.BR lisbcm (9).
.IP \(bu
Any direct manipulation of any of the implementation specific members of the
LiS structure by an LiS modle or driver will result in binary incompatibility.
.IP \(bu
LiS does not provide the SVR 4.2 EFT
.I q_nband
member.
.PP
Binary compatibility is provided of the other SVR 4.2 EFT members to LiS.
.PP
Binary compatibility to SVR 4.2 EFT MP and
.IR Solaris \(rg
is not guaranteed.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 EFT MP,
.[
svr42
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
The
.B queue
structure was introduced in SVR 3.
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
