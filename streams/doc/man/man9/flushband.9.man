'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: flushband.9.man,v 0.9.2.5 2004/03/16 08:01:17 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/03/16 08:01:17 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH FLUSHBAND 9 "$Date: 2004/03/16 08:01:17 $" "$Name:  $" "Linux Fast-STREAMS DDI/DKI"
.\"
.\"
.SH NAME
.B flushband
\- flushes band \fISTREAMS\fR messages from a message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "flushband(queue_t *" q ", unsigned char " band ", int " flag );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to flush.
.TP
.I band
the band to flush within the queue.
.TP
.I flag
how to flush the band within the queue.
.\"
.\"
.SH DESCRIPTION
.PP
.BR flushband ()
is used to flush messages from a message queue band.  It is typically called
in a
.B M_FLUSH
handling routine to flush the requested messsages from a queue band.
.PP
If
.I band
is zero (0),
.BR flushband ()
will flush normal and priority messages only.
.PP
.I flag
can be one of the following:
.TP \w'\ FLUSHDATA\ 'u
.B FLUSHDATA
Flush only data messages; do not flush the control messages from the queue
band.
.TP
.B FLUSHALL
Flush all the messages from queue band: both data messages and control
messages.
.PP
If
.I flag
is other than
.BR FLUSHDATA " or " FLUSHALL
.BR flushband ()
will perform
.BR FLUSHALL .
.\"
.\"
.SH RETURN
.BR flushband ()
flushes the specified band and then returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR flushband ()
always succeeds.
.\"
.\"
.SH CONTEXT
.PP
.BR flushband ()
can be called from any context.
.PP
Because
.BR flushband ()
can take some time to process if there are many messages on the queue or
.I flags
is
.BR FLUSHDATA ,
.BR flushband ()
should not be called from interrupt service routines or functions with
interrupts disabled or global locks held.
.\"
.\"
.SH MP-STREAMS
.PP
.BR flushband ()
is MP-safe.
.BR flushband ()
takes a write lock on the queue being flushed.  This means that calling
.BR flushband ()
on a stream that has been frozen with
.BR freezestr (9)
will result in single-party deadlock.
.\"
.\"
.SH NOTICES
.PP
.BR flushband ()
performs fast flushes by linking all band messages into the per-thread free
messages list.  These messages will then later be broken into individual
message blocks and freed to the per-thread free list and finally to the
.B mdbblock
memory cache at the end of any queue run.  A new queue service run will be
scheduled if one is not already running.
.PP
.BR flushband ()
is well optimized to handle the initial stage of
.B FLUSHALL
flushes in constant time.
.\"
.\"
.SH EXAMPLES
.PP
.BR flushband ()
is normally used within the
.B M_FLUSH
handling procedures for a
.I STREAMS
module or driver as follows:
.sp
.in +4
.nf
\fC\s-2\
int x_w_flush(queue_t *q, mblk_t *mp)
{
   if (*mp->b_rptr & FLUSHW) {
      if (*mp->b_rptr & FLUSHBAND)
         flushband(WR(q), mp->b_rptr[1], FLUSHALL);
      else
         flushq(WR(q), FLUSHALL);
      if (q->q_next) {
         putnext(q, mp);
         return (0);
      }
      *mp->b_rptr &= ~FLUSHW;
   }
   if (*mp->b_rptr & FLUSHR) {
      if (*mp->b_rptr & FLUSHBAND)
         flushband(RD(q), mp->b_rptr[1], FLUSHALL);
      else
         flushq(RD(q), FLUSHALL);
      if (!q->q_next) {
         qreply(q, mp);
         return (0);
      }
      *mp->b_rptr &= ~FLUSHR;
   }
   freemsg(mp);
   return (0);
}
int x_r_flush(queue_t *q, mblk_t *mp)
{
   if (*mp->b_rptr & FLUSHR) {
      if (*mp->b_rptr & FLUSHBAND)
         flushband(RD(q), mp->b_rptr[1], FLUSHALL);
      else
         flushq(RD(q), FLUSHALL);
      if (q->q_next) {
         putnext(q, mp);
         return (0);
      }
      *mp->b_rptr &= ~FLUSHR;
   }
   if (*mp->b_rptr & FLUSHW) {
      if (*mp->b_rptr & FLUSHBAND)
         flushband(WR(q), mp->b_rptr[1], FLUSHALL);
      else
         flushq(WR(q), FLUSHALL);
      if (!q->q_next) {
         qreply(q, mp);
         return (0);
      }
      *mp->b_rptr &= ~FLUSHW;
   }
   freemsg(mp);
   return (0);
}
\s+2\fR
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR flushq (9).
.\"
.\"
.SH BUGS
.BR flushband ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR flushband ()
is source-level compatible with LiS,
.[
LiS
.]
SVR 4.2 MP
.[
svr42
.]
and
.IR Solaris \(rg
with the following exceptions:
.IP \(em \w'\ \(em\ 'u
.BR flushband ()
moves messages from the queue to the per-CPU free chains list.  Freeing blocks
on the free chains list will be deferred to the next
.BR runqueues (9)
pass.  The next
.BR runqueues (9)
pass frees message blocks from the flush to the per-CPU free blocks list for
use by service procedures in the pass.
.BR runqueues (9)
runs a normal soft interrupt priority.
LiS removes all messages from the queue and then rebuilds the queue one
message at a time while freeing those to be flushed.  This is a rather
inefficient way to do things, and with LiS running at higher priority than
soft interrupts, bottom halves and timeouts, all these are locked out until
the flush is complete.
.B Linux Fast-STREAMS
.BR flushband ()
should have far less of an impact on system latency and performance as that of
LiS.
.IP \(em
.BR flushband ()
holds the queue write lock while removing selected messages or unlinking
entire bands.  Order is preserved across concurrent attempts to perform
.BR putq (9),
.BR insq (9),
.BR appq (9),
.BR rmvq (9)
or
.BR putbq (9)
functions.
LiS empties the queue and unlocks the queue and then goes about adding
messages back onto the queue that need to remain using normal utility
functions.  This means that order is not necessarily preserved (even for messages
that were on the queue) with concurrent calls to
.BR putq (9),
.BR insq (9),
.BR appq (9),
.BR rmvq (9)
or
.BR putbq (9)
functions.
Also, queue enabling and backenabling will not necessary be performed
correctly.
There doesn't seem to be any excuse for the LiS approach, removing messages
from the queue,
.BR rmvq (9),
is no more difficult than inserting them,
.BR insq (9).
.IP \(em
.BR flushband ()
flushes normal and priority messages when
.I band
is zero (0).
This is consistent with
SVR 4.2 and
.IR Solaris \(rg
documentation, but is not consistent with LiS behavior.
Under LiS,
.BR flushband ()
with
.I band
zero (0) will flush only normal messages and will leave priority messages on
the queue.
.IP \(em
.BR flushband ()
does not clear the
.B QWANTR
flag when flushing an empty queue.  This is an indication to the STREAMS
scheduler that
.BR getq (9)
read an empty queue and backenabling has already been performed for the queue.
LiS clears the
.B QWANTR
flag when flushing an empty queue.  This means that the next call to
.BR getq (9)
for the empty queue will perform an extra backenable.
.IP \(em
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR SUPER-UX \(rg
.[
suxspg
.]
do not permit
.BR flushband ()
to be called on a stream frozen with
.BR freezestr (9).
.PP
Symbol
.BR lis_flushband ()
is provided for binary compatibility with LiS.
.BR lis_flushband ()
calls
.BR flushband ()
directly.
See
.BR lisbcm (9).
LiS appears to be rather buggy with regard to flushing queues and the binary
compatible
.BR lis_flushband ()
may behave rather different from that of LiS.
Binary compatibility with SVR 4.2 MP and
.IR Solaris \(rg
is not guaranteed.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR flushband ()
first appeared in SVR 4.
.[
svr4
.]
.\"
.\"
.[
$LIST$
.]
.TI
