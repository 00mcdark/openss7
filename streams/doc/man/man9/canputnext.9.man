'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: canputnext.9.man,v 0.9.2.26 2005/12/03 06:51:21 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/12/03 06:51:21 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH CANPUTNEXT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B canputnext
\- test flow control on a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int canputnext(queue_t *" q );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to check for downstream flow control.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
It is the responsibility of a
.I STREAMS
module putting a band zero (0)
normal message to a subsequent message queue (e.g. with
.BR putnext (9))
to check for flow control using
.BR canputnext ()
before placing a message on the queue with
.BR putnext (9).
.PP
.BR canputnext ()
checks whether the
Stream
is flow controlled starting at the
queue next from the specified queue,
.IR q .
Starting at the queue next from the
.I q
specified,
.BR canputnext ()
looks for the next forward queue which has a
.IR qi_srvp (9)
service procedure or which has no next queue (i.e. the
.I q->q_next
pointer is
.BR NULL ).
.PP
If this forward queue has the
.B QFULL
flag clear indicating that it is not full,
then
.BR canputnext ()
will return
.I true
.RB ( 1 ).
.PP
If this foward queue has the
.B QFULL
flag set indicating that it is full,
then
.BR canputnext ()
will return
.I false
.RB ( 0 ).
.PP
When
.BR canputnext ()
returns
.I false
.RB ( 0 ),
it also sets the
.B QWANTW
flag for that queue upon which
.BR canputnext ()
stopped,
indicating that the
.I STREAMS
scheduler should back-enable
.IR qi_srvp (9)
service procedures feeding the flow controlled queue once the flow controlled
queue is no longer full (i.e. message have been read from the queue to reduce
the queue size to the low water mark for the queue, clearing the
.B QFULL
flag).
.\"
.\"
.SH USAGE
.PP
It is the responsibility of all
.I STREAMS
modules with a
.IR qi_srvp (9)
service procedure passing
a normal (zero band) data message
.RB ( M_PROTO "(9), " M_DATA (9))
to a message queue to check for flow control using
.BR canputnext ()
before passing a message to the queue with
.BR putnext (9).
Modules without a
.IR qi_srvp (9)
service procedure do not check flow control.
Each
module with a
.IR qi_srvp (9)
service procedure
is responsible for checking flow control before passing a message along a
Stream.
Flow control is checked using
.BR canputnext ()
or
.BR bcanputnext (9).
.\"
.\"
.SH RETURN
.PP
.BR canputnext ()
will return
.I false
.RB ( 0 )
when the specified
.I STREAMS
message queue is flow controlled
and returns
.I true
.RB ( 1 )
when the specified
.I STREAMS
message queue is not flow controlled.
.\"
.\"
.SH ERRORS
.PP
.BR canputnext ()
always succeeds for a valid
.IR q .
If
.I q
is invalid, the result is undefined.
.\"
.\"
.SH CONTEXT
.PP
.BR canputnext ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts (tasklets and bottom halves), and interrupt service routines.
.BR canputnext ()
must be called from a
.I STREAMS
syncrhonous context, that is from a queue procedure, callout, or syncrhonous callback.
If called from an
asyncrhonous
context, 
the caller must ensure the validity of
.IR q ,
and
.IR q_next .
.\"
.\"
.SH MP-STREAMS
.PP
.BR canputnext ()
is MP-safe when called from the correct context.
.PP
When wishing to test flow control on the queue beyond a driver's upper multiplex read queue from an interrupt service routine,
where there is no
.IR qi_srvp (9)
service procedure defined for the read queue, call
.BR put (9)
instead and test flow control from within the read queue's
.IR qi_putp (9)
put procedure.
Another, less portable, alternative is to bracket the call to
.BR canputnext ()
with
.BR freezestr (9)
and
.BR unfreezestr (9).
.PP
It is possible, due to race conditions in a
.I Symmetric Multi-Processor (SMP)
system, that
.BR canputnext ()
can be called for a queue and return
.I true
.RB ( 1 )
and yet the
Stream
becomes flow controlled before a
call to
.BR putnext (9).
The caller to
.BR putnext (9)
is then in violation of flow-control rules; however, the extent of this violation is bounded.
.PP
Although
.BI canput( q->q_next )
is functionally equivalent to
.BI canputnext( q ),
for the
.BR canput (9)
form, the dereference of the
.I q->q_next
pointer is not protected on MP architectures and may change as a result of a
concurrent reconfiguration of the
Stream
(e.g. an
.BR I_PUSH " or " I_POP
.BR streamio (7)
operation).
For MP operation,
.BI canput( q->q_next )
should not be called and
.BR canputnext ()
should always be called instead.
.\"
.\"
.SH NOTICES
.PP
.BR canputnext ()
and
.BR bcanputnext (9)
should always be used instead of
.BI canput( q->q_next )
or
.BI bcanput( q->q_next )
on multiprocessor (MP) systems.
.PP
.BR canput (9)
and
.BR canputnext ()
are the equivalent of
.BR bcanput (9)
and
.BR bcanputnext (9)
with a zero
.IR band :
and in fact can be implemented as such.
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR canputnext ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR canputnext ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.PP
.BR canput (9)
and
.BR canputnext ()
are the equivalent of
.BR bcanput (9)
and
.BR bcanputnext (9)
with a zero
.IR band :
and in fact can be implemented as such.
.\"
.\"
.SH EXAMPLES
.PP
See
.BR bcanputnext (9).

.SH "SEE ALSO"
.PP
.BR putnext (9),
.BR canput (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR freezestr (9),
.BR noenable "(9), and
.BR enableok (9).
.\"
.\"
.SH BUGS
.PP
.BR canputnext ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR canputnext ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4.2 MP" ,
.[
svr42
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
Because all
.I STREAMS
drivers and modules should be aware of queue priority bands when performing flow control,
use of
.BR canputnext ()
is not very useful and the band aware
.BR bcanputnext (9)
should be used in its stead.
.BR canputnext ()
is only provided for use by modules and drivers that either have no need to support queue bands
(e.g., on a driver read queue for a driver that never places non-zero priority messages on the
queue), or were written to the earlier
.I "SVR 3"
.[
svr3
.]
specification that did not include queue bands; however,
.I "SVR 3"
did not support the MP-supporting
.BR canputnext ()
either.
.IP ""
Portable
.I STREAMS
drivers and reusable modules will call
.BR bcanputnext (9)
instead of
.BR canputnext ()
in all cases where it cannot be guaranteed that the driver or module will not receive a non-zero
priority message to the queue.  (Some might even go to the extent of setting
.I b_band
to zero in all messages received by the
.IR qi_putp (9)
put procedure.
.IP \(em
.BR canputnext ()
called with a
.B NULL
or invalid
.I q
pointer will have undefined results and may crash or destabilize the kernel.
Under LiS, if
.BR canputnext ()
suffers an internal error,
.I q
is
.BR NULL ,
or points to a structure other than a
.B queue_t 
structure,
it will return
.I false
.RB ( 0 ).
Portable
.I STREAMS
drivers and modules will not pass
.B NULL
or invalid arguments to
.I STREAMS
functions.
.IP \(em
Although a call to
.BI bcanputnext( q ", " 0 )
is functionally equivalent to
.BI canputnext( q ),
.BR canputnext ()
is implemented separately from
.BR bcanputnext ()
for speed.
LiS implements
.BI canput( q ),
.BI canputnext( q )
and
.BI bcanputnext( q ", " band )
with macros that call
.BI bcanput( q ", " band ).
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR canputnext ()
explicitly protects dereferencing of the
.I q->q_next
pointer with the
Stream head
read lock that prevents reconfiguration of the
Stream
during the call.
LiS does not explicitly protect this dereference.
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
.BR canputnext ()
called with an invalid
.I q
pointer or a
.I q
pointer that has an invalid
.I q->q_next
pointer, will have undefined results and may crash or destabilize the kernel.
LiS will return false (0) under the same conditions.
.IR STREAMS (4)
modules and drivers that always obtain
.I q
from a pointer passed by the
.I STREAMS
scheduler via
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9),
(as is normal) will not encounter this problem.
.IP \(em
.BR canputnext ()
may be called on a
Stream
frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR canputnext ()
to be called on a
Stream
frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR canputnext ()
on a
Stream
frozen with
.BR freezestr (9).
.IP \(em
Under LiS, if
.BR canputnext ()
suffers an internal error, it will return false (0).
.IP \(em
LiS implements
\fB\)canput(\fI\)q\fB\))\fR\),
\fB\)canputnext(\fI\)q\fB\))\fR\) and
\fB\)bcanputnext(\fI\)q\fB\), \fI\)band\fB\))\fR\)
with a macros that call
\fB\)bcanput(\fI\)q\fB\), \fI\)band\fB\))\fR\).
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
instead of
.IR LiS .
.\".IP \(em
.\"Symbol
.\".BR lis_canputnext ()
.\"is provided for compatibility with LiS.  See
.\".BR liscompat (9).
.\".BR lis_canputnext ()
.\"calls
.\".BR canputnext ()
.\"directly.
.\"Portable
.\".I STREAMS
.\"drivers and modules will not access these symbols.
.\"Portable
.\".I STREAMS
.\"drivers and modules will use
.\".B "@PACKAGE_TITLE@"
.\"instead of
.\".IR LiS .
.IP \(em
.IR SUPER-UX \(rg
documentation
.[
suxspg
.]
states that if the
Stream end
has no
.IR qi_srvp (9)
service procedure that
.BR canputnext ()
will return
.I true
.RB ( 1 ).
This is incorrect behaviour to that described in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
.BR 
For example, the
Stream head
does not normally have a read
.IR qi_srvp (9)
procedure, but uses wakeups from the read side
.IR qi_putp (9)
procedure to schedule servicing of the queue.  It is still necessary for
.BR canputnext ()
to fail when the read queue passes its high water mark.
.IR SUPER-UX \(rg
will not fail in such a circumstance, making its behaviour inconsistent with other
.IR UNIX \(rg
impelemntations of
.IR STREAMS .
.IP ""
Portable
.I STREAMS
drivers and modules should not rely on the behaviour of
.BR canputnext ()
on drivers that have no write side
.IR qi_srvp (9)
procedure, but which enqueue messages on their write
queues (to be collected using
.BR getq (9)
outside the
.I STREAMS
framework).
Such drivers should provide a dummy
.IR qi_srvp (9)
service procedure.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, modules and drivers will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
Additional compatibility is available using the
.I STREAMS Compatibility Modules
provided in the
.BR strcompat (5)
package for
.I LiS
and
.BR "@PACKAGE_TITLE@" .
See
.BR svr3compat (9),
.BR liscompat (9),
and
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.[
uslspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR canputnext ()
first appeared in
.IR "SVR 4.0 MP" " and " "SVR 4.2 MP" .
.[
svr4dk
.]
.[
usldk
.]
.\"
.\"
.[
$LIST$
.]
.TI
