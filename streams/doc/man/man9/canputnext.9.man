'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: canputnext.9.man,v 0.9.2.4 2004/03/16 08:01:17 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/03/16 08:01:17 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH CANPUTNEXT 9 "$Date: 2004/03/16 08:01:17 $" "$Name:  $" "Linux Fast-STREAMS DDI/DKI"
.\"
.\"
.SH NAME
.B canputnext
\- test flow control on a message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int canputnext(queue_t *" q );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to check for downstream flow control.
.\"
.\"
.SH DESCRIPTION
.PP
It is the responsibility of a
.IR STREAMS (4)
module putting a band zero (0)
non-priority message to a subsequent message queue (e.g. with
.BR putnext (9))
to check for flow control using
.BR canputnext ()
before placing a message on the queue with
.BR putnext (9).
.PP
.BR canputnext ()
checks whether the stream is flow controlled starting at the
queue next from the specified queue,
.IR q .
Starting at the queue next from the
.I q
specified
.BR canputnext ()
looks for the next foward queue which has a service routine or which has no
further forward queue.
.PP
If this forward queue has the
.B QFULL
flag clear indicating that the queue is not full, then
.BR canputnext ()
will return true (1).
.PP
If this foward queue has the
.B QFULL
flag is set indicating that the queue if full, then
.BR canputnext ()
will return false (0).
.PP
When
.BR canputnext ()
returns false (0), it also sets the
.B QWANTW
flag for the queue indicating that the
.I STREAMS
scheduler should backenable the
service procedures feeding the flow controlled queue once the flow controlled
queue is no longer full (i.e. message have been read from the queue to reduce
the queue size below the low water mark for the queue).
.\"
.\"
.SH RETURN
.PP
.BR canputnext ()
will return false (0) when the specified message queue is flow controlled and
return true (1) when the specified message queue is not flow controlled.
.\"
.\"
.SH ERRORS
.PP
.BR canputnext ()
always succeed.
.\"
.\"
.SH CONTEXT
.PP
.BR canputnext ()
can be called from any context.
.\"
.\"
.SH MP-STREAMS
.PP
.BR canputnext ()
is MP-safe.
.PP
Although
.BI canput( q->q_next )
is functionally equivalent to
.BI bcanputnext( q ),
for the
.BR canput (9)
form, the dereference of the
.I q->q_next
pointer is not protected on MP architectures and may change as a result of a
concurrent reconfiguration of the stream (e.g. an
.BR I_PUSH " or " I_POP
.BR streamio (7)
operation).
For MP operation,
.BI canput( q->q_next )
should not be called and
.BR canputnext ()
should always be called instead.
.PP
.BR canputnext ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR canputnext ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.\"
.\"
.SH NOTICES
.PP
Under LiS, if
.BR canputnext ()
suffers an internal error, it will return false (0).
.PP
LiS implements
\fB\)canput(\fI\)q\fB\))\fR\),
\fB\)canputnext(\fI\)q\fB\))\fR\) and
\fB\)bcanputnext(\fI\)q\fB\), \fI\)band\fB\))\fR\)
with a macros that call
\fB\)bcanput(\fI\)q\fB\), \fI\)band\fB\))\fR\).
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putnext (9),
.BR canput (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR noenable "(9), and "
.BR enableok (9).
.\"
.\"
.SH BUGS
.PP
.BR canputnext ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR canputnext ()
is source-level compatible with
SVR 4.2 MP DDI/DKI,
.IR Solaris \(rg
and LiS
.[
LiS
.]
with the following exceptions:
.IP \(em \w'\ \(em\ 'u
.BR canputnext ()
explicitly protects dereferncing of the
.I q->q_next
pointer with the stream head read lock that prevents reconfiguration of the
stream during the call.
LiS does not explicitly protect this dereference.
.IP \(em
.BR canputnext ()
called with an invalid
.I q
pointer or a
.I q
pointer that has an invalid
.I q->q_next
pointer, will have undefined results and may crash or destablize the kernel.
LiS will return false (0) under the samd conditions.
.IR STREAMS (4)
modules and drivers that always obtain
.I q
from a pointer passed by the
.I STREAMS
scheduler via
.BR qopen (9),
.BR qclose (9),
.BR put (9),
.BR srv (9),
(as is normal) will not encounter this problem.
.IP \(em
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR SUPER-UX \(rg
.[
suxspg
.]
do not permit
.BR canput ()
to be called on a stream frozen with
.BR freezestr (9).
.PP
Symbol
.BR lis_bcanput ()
is provided for binary compatibility with LiS.  See
.BR lisbcm (9).
Note that dereferencing of the
.I q->q_next
pointer will not be protected under LiS binary compatibility because LiS calls
.BI lis_bcanput( q->q_next ", " 0 )
instead of
.BR canputnext ().
.PP
Binary compatibility with SVR 4.2 MP DDI/DKI and
.IR Solaris \(rg
is not guaranteed.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.]
.\"
.\"
.SH HISTORY
.PP
.BR canputnext ()
first appeared in SVR 4 MP.
.[
svr42
.]
.\"
.\"
.TI
