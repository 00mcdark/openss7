'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: mp-streams.9.man,v 0.9.2.19 2005/11/26 11:17:12 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/11/26 11:17:12 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH MP-STREAMS 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mp-streams
\- multi-processor \fISTREAMS\fR executive
.\"
.\"
.SH SYNOPSIS
.PP
.\"
.\"
.SH ARGUMENTS
.PP
.\"
.\"
.SH DESCRIPTION
.PP
.B @PACKAGE_TITLE@
.[
lfs
.]
when run on symmetrical multi-processor systems, and when compiled with kernel
configuration symbol
.B CONFIG_SMP
defined on symmetrical multi-processor (MP) or uniprocessor (UP), will execute
in
.B MP-STREAMS
mode.
.PP
This manual page provides additional information with regards to synchronization
and serialization of events within the
.I STREAMS
executive, for compatibility with
.IR "SVR 4.2 MP" ,
.[
svr42
.]
and systems based on
.IR "SVR 4 MP" .
.[
svr4
.]
.B @PACKAGE_TITLE@
also provide a synchronization framework based on perimeters for compatibility
with the
.IR Solaris \(rg
implementation of
.IR STREAMS .
.[
solspg
.]
.SS Configuration
.PP
Synchronization is specified by the module writer during configuration of a
.I STREAMS
module.
This is accomplished using flags and synchronization level definitions to the
module installation or registration function.  For compatibility with other
registration mechanisms based on
.I SVR 4 MP
.IR STREAMS ,
.B @PACKAGE_TITLE@
provides the following flags and synchronization levels:
.\"
.\"
.PP
.B Synchronization Flags
.TP
.B D_MP
Specifies that the module is MP-safe and observes a synchronization model
specified by the following flags.
The queue
.IR qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9)
and
.IR qi_srvp (9)
procedures, as well as asynchronous callbacks and callouts of all kinds
can run concurrent, particularly in a multiprocessor environment.
Modules that set this flag must normally perform their own mutual exclusion or
critical section protections, and all procedures must be fully MP-safe.
.IP ""
Modules that do not specify
.B D_MP
are not MP-safe and will be run by default with synchronization at the module
level (single threaded).
.TP
.B D_MTPERQ
Specifies that the module has an inner perimeter and that synchronization at the
inner perimeter is per queue.  This is the same as the synchronization level
.BR SQLVL_QUEUE ,
below.
Only one
.I STREAMS
executive thread per queue will be permitted.  Other threads will wait until
a thread currently within the perimeter exits.
.IP ""
Normally in
.BR "@PACKAGE_TITLE@" ,
only one thread will execute a queue's
.IR qi_srvp (9)
procedure at a given time.  However, normally queue
.IR qi_putp (9)
procedures, as well as all asynchronous callbacks, can run concurrent with the
.IR qi_srvp (9)
procedure.
This inner perimeter causes
.IR qi_srvp (9)
procedures to be run exclusive with
.IR qi_putp (9)
(unless
.B D_MTPUTSHARED
is also set), as well as exclusive with all synchronous callbacks.
.TP
.B D_MTQPAIR
Specifies that the module has an inner perimeter and that synchronization at
the inner perimeter is per queue pair.  This is the same as the
synchronization level
.BR SQLVL_QUEUEPAIR ,
below.
Only one
.I STREAMS
executive thread per queue pair will be permitted.  Other threads will wait
until a thread currently within the perimeter exits.
.TP
.B D_MTPERMOD
Specifies that the module has an inner perimeter and that synchronization at
the inner perimeter is per module.  This is the same as the synchronization
level
.BR SQLVL_MODULE ,
below.
Only one
.I STREAMS
executive thread per module will be permitted.  Other threads will wait until
a thread currently within the perimeter exits.
.TP
.B D_MTPUTSHARED
Specifies that the
.IR qi_putp (9)
procedure will be permitted to enter the inner perimeter shared.  This means
that module
.IR qi_putp (9)
procedures must run fully re-entrant and multi-threaded.  Also, that
calling sequence of
.IR qi_putp (9)
procedures is not guaranteed by the
.I STREAMS
executive.
.TP
.B D_MTOUTPERIM
Specifies that an outer perimeter exists enclosing the module.  Threads at the
outer perimeter will be allowed to enter the module shared.
.TP
.B D_MTOCEXCL
Specifies that the
.IR qi_qopen (9)
and
.IR qi_qclose (9)
procedures will be run exclusive at the outer perimeter.  That is,
.IR qi_qopen (9)
and
.IR qi_qclose (9)
procedures will run single-threaded.
This flag is useful where the
.IR qi_qopen (9)
or
.IR qi_qclose (9)
procedures of a module use data structures that are global to the module.
This is a
.IR Solaris \(rg
specific concept.
.[
solspg
.]
Other multi-processor
.I STREAMS
executives provide some utility functions that ensure that common data
structures are protected.  For example:
.BR mi_comm_open (9),
.BR mi_comm_close (9),
.BR streams_open (9),
.BR streams_close (9),
or even
.IR Solaris \(rg's
own
.BR ddi_get_soft_state (9)
mechanism.
.\"
.\"
.PP
.B Configuration Flags
.TP
.B STR_MPSAFE
Same as the
.B D_MP
flag, above.
.TP
.B STR_QSAFETY
Specifies that interrupt-safe callbacks are required.
.TP
.B STR_PERSTREAM
Specifies that the module agrees to per-Stream synchronization for non MP-safe
modules.
.TP
.B STR_Q_NOTTOSPEC
Specifies that the module is not to specification and runs under a process
context.  The module might sleep in its procedures.
.PP
Normally when modules are not MP-safe, the default is to use per-module synchronization for the
module (see
.B SQLVL_DEFAULT
below).  This means that only one thread is permitted into the entire module.  That is rather
restrictive and can cause difficulties when MP-safe modules are in the Stream.  (MP-safe modules
will run more agressive and are likely to out-pace per-module synchronized modules, impairing the
performance of all Streams in which the module is included.)
.PP
Another solution is to run each of the non-MP-safe module's Streams at per-Stream synchronization,
where only a single thread is permitted per Stream, but multiple threads are permitted per module.
Unfortunately, other MP-safe modules in the Stream must be prepared to accept this situation, as
they may be relying on a different synchronization model within their modules.  Setting the
.B STR_PERSTREAM
flag for a module or driver indicates that, regardless of whether the module or driver is MP-safe or
not, that it accepts being run in per-Stream synchronization when a non-MP-safe module or driver is
in the same Stream.  As a Stream is built up and includes a non-MP-safe module, if all of the
modules and driver on the Stream have the
.B STR_PERSTREAM
flag set, then the Stream will be run with per-Stream synchronization.  If any module or driver on
the Stream does not have the
.B STR_PERSTREAM
flag set, the all non-MP-safe modules on the Stream (and any of their instances in other Streams)
will be forced to run in per-module synchronization.
.\"
.\"
.PP
.B Synchronization Levels
.TP
.B SQLVL_NOP
Specifies that the module is run without synchronization.  All synchronous
module entry points, call-outs and callbacks become asynchronous.  It is the
module's responsibility to provide synchronization or serialization as
required.
.TP
.B SQLVL_QUEUE
Specifies that the module is run with synchronization at the queue.  Only one
thread will be permitted to enter a given queue's procedures, however, another
thread will be permitted to enter the procedures of the other queue in the
queue pair.
This is useful when the read and write side of a module are largely
independent and do not require synchronization between sides of the queue
pair.
This level is equivalent to the
.B D_MTPERQ
flag, above.
.TP
.B SQLVL_QUEUEPAIR
Specifies that the module is run with synchronization at the queue pair.
Only one thread will be permitted to enter a given queue's procedures within a
given queue pair.  Where the read and write side of the queue pair shared the
same private structure (q->q_ptr), this provides MP protection of the common
data structure to all synchronous entry points.
This level is equivalent to the
.B D_MTQPAIR
flag, above.
.TP
.B SQLVL_DEFAULT
Specifies that the module uses the default synchronization scheme.  This is
the same a specifying
.BR SQLVL_MODULE .
.TP
.B SQLVL_MODULE
Specifies that the module is run with synchronization at the module.  Only one
thread of execution will be permitted within the module.  Where the module
does not share data structures between modules, this has a similar effect to
running on a UP system.
This is the default and works best for non-MP-safe modules written in
accordances with
.I STREAMS
guidelines.
This level is equivalent to the
.B D_MTPERMOD
flag, above.
.TP
.B SQLVL_ELSEWHERE
Specifies that the module is run with synchronization within a group of
modules.  Only one thread of execution will be within the group of modules at
a time.  The group is separately specified as a character string name.  This
permits a group of modules to run single threaded as though they are running
on a single processor, without interfering with the concurrency of other
module outside the group.  This can be important for testing and for modules
that implicitly share unprotected data structures.
.TP
.B SQLVL_GLOBAL
Specifies that the module is run with global synchronization.  This means that
only one
.I STREAMS
executive thread will be permitted to enter any synchronous module.  This makes
the entire
.I STREAMS
executive single threaded and is useful primarily for debugging.  This is the
same as
.I "\*(lqUniprocessor Emulation\*(rq"
on some systems, and reduces the
.I STREAMS
executive to running on a single processor at a time.  On multiprocessor
systems, the
.I STREAMS
executive will still run on multiple processors, it is just that it will be
running on only one of those processors at a given point in time.
.\"
.\"
.\"
.\"
.\"
.\"
.\"
.\"
.SS "Asynchronous Callbacks"
.PP
The following D3DK utilities use asynchronous callback functions:
.PP
.TS
tab(:);
lbw(14n)0c0lssss.
timeout\fR(9):\ \(en\ :T{
the caller-supplied timeout callback function.
T}
dtimeout\fR(9):\ \(en\ :T{
the caller-supplied timeout callback function.
T}
itimeout\fR(9):\ \(en\ :T{
the caller-supplied timeout callback function.
T}
bufcall\fR(9):\ \(en\ :T{
the caller-supplied buffer callback function.
T}
esbbcall\fR(9):\ \(en\ :T{
the caller-supplied buffer callback function.
T}
esballoc\fR(9):\ \(en\ :T{
the caller-supplied free function.
T}
.TE
.PP
Asynchronous callback functions are not normally synchronized.
.PP
.B @PACKAGE_TITLE@
provides the following assurances with regard to asynchronous callbacks:
.IP \(bu \w'\(bu\(em'u
The callback function will be invoked on the processor that initiated the
callback.  This ensures that the callback function will not execute until
after the function that invoked the callback returns or encounters a
preemption point.
.IP \(bu
If the
.B STR_QSAFETY
flag is set during configuration, asynchronous callback function invoked from
within the
.I STREAMS
executive (within a
.I STREAMS
queue procedure, call-out or callback function),
will be synchronized with the queue for which the callback is associated.  In
addition, local interrupts will be suppressed on the servicing processor.
.IP \(bu
Asynchronous callbacks invoked from outside the
.I STREAMS
executive (at user context outside the
.IR qi_qopen (9)
and
.IR qi_qclose (9)
procedures, at soft interrupt other than STREAMS_SOFTIRQ and from within
interrupt service routines)
will never be synchronized with the
.I STREAMS
framework.
.IP \(bu
.IP \(bu
.IP \(bu
.IP \(bu
.PP
.SS "Asynchronous Callback Cancellation"
.PP
.TS
tab(:);
lbw(14n)0c0lssss.
untimeout\fR(9):\ \(en\ :T{
cancels a timeout callback function.
T}
unbufcall\fR(9):\ \(en\ :T{
cancels a buffer callback function.
T}
freemsg\fR(9):\ \(en\ :T{
calls a free routine callback function.
T}
.TE
.PP
Normally, the caller-supplied timeout callback function can execute at any time; however,
.BR timeout (9),
.BR itimeout (9),
.BR dtimeout (9)
uses CPU binding to ensure that the timeout callback will be executed on the
same processor that raised the timeout.  The callback function will not
execute until after
.BR timeout (9)
.BR itimeout (9),
.BR dtimeout (9),
returns and the calling thread encounters a preemption point.  Private locks
do not need to be held across the call to
.PP
The callback functions passed to
.BR timeout (9),
.BR dtimeout (9),
.BR itimeout (9),
.BR bufcall (9),
.BR esbbcall (9),
and
.BR esballoc (9)
are asynchronous callbacks.
The callback function can execute at any time, asynchronous with other
.I STREAMS
procedures.
When the callback function is executed, no synchronization is performed on any
module, Stream, queue pair or queue before calling the function.
.\"
.\"
.SS "Synchronous Entry Points"
.PP
.TS
tab(:);
lbw(14n)0c0ls.
qi_qopen\fR(9):\ \(en\ :the module or driver open routine
qi_qclose\fR(9):\ \(en\ :the module or driver close routine
qi_putp\fR(9):\ \(en\ :the module or driver put procedure
qi_srvp\fR(9):\ \(en\ :the module or driver service procedure
.TE
.PP
.B @PACKAGE_TITLE@
provides the following assurances with regard to synchronous entry points:
.IP \(bu \w'\(bu\(em'u
Per normal
.I STREAMS
semantics, only one
.IR qi_qopen (9)
or
.IR qi_qclose (9)
call will be permitted to execute at a time, per Stream.  However, for Streams that are
already open,
.IR qi_qopen (9)
and
.IR qi_qclose (9)
can run concurrent with
other synchronous entry points for the same Stream (once
.BR qprocson (9)
is called) and both synchronous and asynchronous callbacks.
.IP \(bu
.IR qi_qopen (9)
and
.IR qi_qclose (9),
can, however, run concurrent with any synchronous entry point
.RI ( qi_qopen (9),
.IR qi_qclose (9)
.IR qi_putp (9),
.IR qi_srvp (9)),
synchronous or asyncrhonous callback function, belonging to a separate Stream.

.IP \(bu
.IP \(bu
.IP \(bu
.\"
.\"
.SS "Synchronous Callbacks"
.PP
.TS
tab(:);
lbw(14n)0c0ls.
qtimeout\fR(9):\ \-\ :the timeout function
qbufcall\fR(9):\ \-\ :the buffer callback function
qwriter\fR(9):\ \-\ :the exclusive callback function
weldq\fR(9):\ \-\ :the weld complete callback function
unweldq\fR(9):\ \-\ :the unweld complete callback function
streams_put\fR(9):\ \-\ :the put function
.TE
.\"
.\"
.SS "Asynchronous Callback Cancellation"
.PP
.TS
tab(:);
lbw(14n)0c0ls.
untimeout\fR(9):\ \-\ :the \fBtoid_t\fP
unbufcall\fR(9):\ \-\ :the \fBbcid_t\fP
freeb\fR(9):\ \-\ :the message block
.TE
.\"
.\"
.SS "Syncrhonous Callback Cancellation"
.PP
.TS
tab(:);
lbw(14n)0c0ls.
quntimeout\fR(9):\ \-\ :the \fBtimeout_id_t\fR
qunbufcall\fR(9):\ \-\ :the \fBbufcall_id_t\fR
.TE
.\"
.\"
.SH RETURN
.PP
.\"
.\"
.SH ERRORS
.PP
.\"
.\"
.SH CONTEXT
.PP

.SS "Queue Handling Functions"
.PP
.TS
tab(:);
ltbctbltbsss
ltbctltsss.
_
Macros:State:Notes
_
RD\fR(9):either:T{
These macros can be called from any context.  It does not matter whether the
Stream
is frozen by the caller or not.  The caller is responsible for the validity of the passed in
queue pointer
.I q
across the call.
T}
WR\fR(9):\^:\^
OTHERQ\fR(9):\^:\^
SAMESTR\fR(9):\^:\^
_
.T&
ltbctbltbsss
ltbctltsss.
UP Functions:State:Notes
_
appq\fR(9):frozen:T{
The caller is responsible for the validity of the passed in
queue pointer
.I q
when called from a
.RI non- STREAMS
environment, or
.I q
does not belong to the same
Stream
as the
.I STREAMS
procedure from which it is called (e.g, when passing messages from an upper multiplexer
Stream
to a lower multiplexer
Stream),
and validity and exclusivity of the passed in
message pointer
.IR mp .
T}
insq\fR(9):\^:\^
rmvq\fR(9):\^:\^
.T&
ltbctltsss.
backq\fR(9):thawed:
bcanput\fR(9):thawed:
canenable\fR(9):thawed:
canput\fR(9):thawed:
enableok\fR(9):thawed:
flushband\fR(9):thawed:
flushq\fR(9):thawed:
getq\fR(9):thawed:
noenable\fR(9):thawed:
putbq\fR(9):thawed:
putctl\fR(9):thawed:
putctl1\fR(9):thawed:
putctl2\fR(9):thawed:
putq\fR(9):thawed:
qcountstrm\fR(9):thawed:
qenable\fR(9):thawed:
qreply\fR(9):thawed:
qsize\fR(9):either:
_
.T&
ltbctbltbsss
ltbctltsss.
MP Functions:State:Notes
_
bcanputnext\fR(9):thawed:
canputnext\fR(9):thawed:
freezestr\fR(9):thawed:
put\fR(9):thawed:
putnext\fR(9):thawed:
putnextctl\fR(9):thawed:
putnextctl1\fR(9):thawed:
putnextctl2\fR(9):thawed:
qprocsoff\fR(9):thawed:
qprocson\fR(9):thawed:
strqset\fR(9):frozen:
strqget\fR(9):frozen:
unfreezestr\fR(9):frozen:
.TE
.\"
.\"
.SH MP-STREAMS
.PP
.\"
.\"
.SS Freezing
.PP
In the Uni-Processor (UP) environment, it was sufficient to raise the system priority level
to ensure that no other queue procedures or thread were accessing the
Stream.
This was performed with
.BR splstr (9)
and
.BR splx (9).
.PP
In the Symmetric Multi-Processor (SMP) environment, it is also necessary to hold a lock to block
other processors from entering the critical section.
This is achieved by freezing the
Stream
with
.BR freezestr (9)
and thawing it with
.BR unfreezestr (9).
.RS
.PP
.B Note:
when
.BR freezestr (9)
is called in a Uni-Processor (UP) environment, it is equivalent to
.BR splstr (9);
when
.BR unfreezestr (9)
is called,
.BR splx (9).
.RE
.\"
.\"
.SS Queue Pointers
.PP
In the Uni-Processor (UP) environment, calling
.BR splstr (9)
is sufficient to ensure that a valid queue pointer
.I q
will not invalidate across a call to any function until
.BR splx (9)
was called.  This is not the case in the Symmetric Multi-Processor (SMP) environment.
.PP
In the SMP environment, another processor may be executing
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedures, or synchronous callbacks, concurrent with
.IR qi_qopen (9)
or
.IR qi_qclose (9)
procedures.
Utilities called from the
.RI non- STREAMS
context (process context, asynchronous callbacks, soft interrupts, and interrupt service routines)
can execute concurrent with any procedures within the
.I STREAMS
environment
.RI ( qi_qopen (9),
.IR qi_qclose (9),
.IR qi_putp (9),
.IR qi_srvp (9),
synchronous callbacks, buffer free routines).
.IR qi_qopen (9)
and
.IR qi_qclose (9)
procedures, in particular, can cause
.I q_next
pointers to change, and
.IR qi_qclose (9)
procedures can also result in the deallocation of queues.
The only
.I STREAMS
utilities that are provided that permit blocking of plumbing changes to the
Stream
are
.BR freezestr "(9), " unfreezestr (9)
and
.BR MPSTR_STPLOCK "(9), " MPSTR_STPRELE (9).

.\"
.\"
.SS Message Pointers
.PP
In both the UP and SMP environments, it is the responsibility of the caller to ensure exclusive
access to any message pointer
.I mp
passed to any message handling or queue handing function.  Exclusive access does not have to be
ensured to the data blocks associated with the messages, and in particular the
.I db_ref
member.
.\"
.\"
.SS Locking
.PP
Following is a discussion of the locking used in
.BR "@PACKAGE_TITLE@" :
.PP
.B @PACKAGE_TITLE@
performs reference counting on all
.I STREAMS
objects.  Reference counting ensures that objects are not destroyed until the last reference to them
is released.  This means that no reference will be invalidated while it is still being used.  There
are several primary
.I STREAMS
object upon which most other references depend:
the driver,
.BR cdevsw (9)
structure;
the module
.BR fmodsw (9)
structure;
the Stream head,
.BR stdata (9)
structure; the queue,
.BR queue (9)
structure;
the synchronization queue,
.BR syncq (9)
structure.
.PP
Of these, the most delicate and complicated references are the reference to the Stream head,
.BR stdata (9)
structure from the
.B inode
and
.B file
pointer.
.PP
To protect the reference to a Stream head,
.BR stdata (9)
structure, from the
.BR inode ,
the
.B inode
semaphore is acquired before referencing from, or invalidating the reference to, the Stream head.
This is also true for the
.B file
pointer
.IR private_data :
we hold the
.B inode
semaphore while acquiring a reference to the Stream head via the
.B file
pointer, and also hold the semaphore while clearing the
.I private_data
pointer.
(This means a fair amount of semaphore taking and releasing when performing system calls.  Perhaps
the inode spinlock might have been a better idea.)
.PP
The Stream head has associated with it a queue pair.  While the Stream head reference is valid,
there always exists a Stream head queue pair.
.\"
.\"
.SH NOTICES
.PP
.B MP-STREAMS
synchronization is a complex and difficult part of any
.I STREAMS
implementation.  Performance and implementation specifics can cause the behaviour of modules or
drivers invoking synchronization to differ from implementation to implementation.  Portable
.I STREAMS
drivers and modules will, and all new projects should, be written to be fully MP-safe and will set
the
.B D_MP
flag.
.\"
.\"
.SH "SEE ALSO"
.PP
.\"
.\"
.SH BUGS
.PP
The
.B MP-STREAMS
mechanism has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B MP-STREAMS
mechanism is compatible with
.I "SVR 4.2 MP"
.[
usldk
.]
and implementations based on
.I "SVR 4.1 MP"
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
Synchronization mechanisms for
.I STREAMS
first appeared in
.IR "SVR 4.1 MP" .
.\"
.\"
.TI
