'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: bcanputnext.9.man,v 0.9.2.30 2005/12/05 01:42:47 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/12/05 01:42:47 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH BCANPUTNEXT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B bcanputnext
\- test flow control on a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int bcanputnext(queue_t *" q ", int " band );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the queue after which to begin testing for flow control.
.PD 0
.TP
.I band
the priority band within which to test for flow control.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.\".PP
.\".BR bcanputnext ()
.\"provides modules and drivers with a way to test flow control in a given priority band for the queue
.\"pointed to by
.\".IR q->q_next .
.\"It returns
.\".B 1
.\"if the message of priority 
.\".I pri
.\"can be placed on the queue.  It returns
.\".B 0
.\"if the priority band is flow controlled and sets the
.\".B QWANTW
.\"flag for band zero
.\".RB ( QB_WANTW
.\"for non-zero band).
.\".PP
.\".BR bcanputnext ()
.\"searches through the
.\".I Stream
.\"(starting at
.\".IR q->q_next )
.\"until it finds a queue containing a
.\".IR qi_srvp (9)
.\"procedure, or until it reaches the end of the
.\".IR Stream .
.\"If found, the queue containing the
.\".IR qi_srvp (9)
.\"routine is tested to see if a message in priority band
.\".I pri
.\"can be enqueued.  If the band is full,
.\".BR bcanputnext ()
.\"marks the queue to automatically back-enable the caller's
.\".IR qi_srvp (9)
.\"procedure when the amount of data in
.\"messages on the queue has reached its low water mark.
.\".PP
.\"If the band does not yet exist on the queue in question,
.\".B 1
.\"is returned.
.PP
.BR bcanputnext ()
checks whether the
Stream
is flow controlled starting at the specified queue,
.IR q ,
and for the specified
.IR band .
Starting at the
.I q
specified and for the
.I band
specified,
.BR bcanputnext ()
looks for the next forward queue which has a
.IR qi_srvp (9)
procedure or which has no next queue (i.e. the
.I q->q_next
pointer is
.BR NULL ).
.PP
If this forward queue has the
.B QFULL
.RI ( band " == 0)
or
.B QB_FULL
.RI ( band " >= 1)
flag clear indicating that it is not full for the specified
.IR band ,
or a
.BR qband (9)
structure does not yet exist for the specified band
.RI ( band " >= 1),
then
.BR bcanputnext ()
will return true (1).
.PP
If this forward queue has the
.B QFULL
.RI ( band " == 0)
or
.B QB_FULL
.RI ( band " >= 1)
flag set indicating that it is full for the specified
.IR band ,
and a
.BR qband (9)
structure exists for the specified band
.RI ( band " >= 1),
then
.BR bcanputnext ()
will return false (0).
.PP
When
.BR bcanputnext ()
returns false (0), it also sets the
.B QWANTW
.RI ( band " == 0)
or
.B QB_WANTW
.RI ( band " >= 1)
flag for the specified
.IR band ,
indicating that the
.I STREAMS
scheduler should back-enable
.IR qi_srvp (9)
procedures backward up the queues when the flow controlled
.I band
is no longer flow controlled (falls to its low water mark).
.\"
.\"
.SH USAGE
.PP
It is the responsibility of a
.I STREAMS
module or driver passing a banded (normal priority) data message
.RB ( M_PROTO "(9), " M_DATA (9))
to a subsequent queue to check for flow control using
.BR bcanputnext ()
for the band associated with the message before passing the message to the queue with
.BR putnext (9).
A
.I STREAMS
module is only required to check for flow control if it has a
.IR qi_srvp (9)
procedure for the specified queue: otherwise, it was the responsibility of a previous
.I STREAMS
module,
Stream head
or
Stream end
to check flow control.
.\"
.\"
.SH RETURN
.PP
.BR bcanputnext ()
will return false (0) when the specified
.I STREAMS
message queue is flow
controlled for the specified band, and return true (1) when the specified
.I STREAMS
message queue is not flow controlled for the specified band, or the specified band has not yet been
written to.
.\"
.\"
.SH ERRORS
.PP
.BR bcanputnext ()
always succeeds.
.\"
.\"
.SH CONTEXT
.PP
.BR bcanputnext ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts (tasklets and bottom halves), and interrupt service routines.
.BR bcanputnext ()
must be called from a syncrhonous context [see
.BR mp-streams (9)].
.\"
.\"
.SH MP-STREAMS
.PP
.BR bcanputnext ()
is MP-safe when called from the correct context.
.PP
.BR canputnext ()
cannot be called from an asyncrhonous context, unless bracketed with
.BR freezestr (9)
and
.BR unfreezestr (9).
.PP
It is possible, due to race conditions in a multiprocessor (MP) system, that
.BR bcanputnext ()
can be called for a queue and return true (1) and yet the
Stream
becomes flow controlled before a
call to
.BR putnext (9).
The caller to
.BR putnext (9)
is then in violation of flow-control rules; however, the extent of this violation is bounded.
.\"
.\"
.SH NOTICES
.PP
It is the responsibility of a
.I STREAMS
module or driver passing a banded
.I normal priority
message to an adjacent queue to check for flow control using
.BR bcanputnext ()
before passing a message to the queue with
.BR putnext (9) .
.PP
.BR canputnext (9)
and
.BR bcanputnext ()
should always be used instead of
.BI canput( q->q_next )
and
.BI bcanput( q->q_next )
on multiprocessor (MP) implementations.
.PP
.BR canput (9)
and
.BR canputnext (9)
are the equivalent of
.BR bcanput ()
and
.BR bcanputnext (9)
with a zero
.IR band :
and in fact can be implemented as such.
.\"
.\"
.SH IMPLEMENTATION
.PP
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
provides the additional feature that
.I band
can be specified as
.BR ANYBAND .
When
.I band
is
.BR ANYBAND ,
.BR bcanputnext ()
checks whether any band (other than band zero), is not flow controlled.  If a
band exists that is not flow controlled,
.BR bcanputnext ()
with
.B ANYBAND
returns one (1).
If all existing bands are flow controlled,
.BR bacnputnext ()
returns zero (0).
.PP
.BR bcanputnext ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR bcanput ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.\"
.\"
.SH EXAMPLES
.PP
.\"
.SS Example #4
.PP
The following is an example of a transmit ISR that takes messages directly off of the write queue
using
.BR rmvq (9):
.PP
Following is the write queue put procedure for the driver:
.PP
.nf
\fC\s-2\
 1  int
 2  example_wput(queue_t *q, mblk_t *mp)
 3  {
 4      switch (mp->b_datap->db_type) {
 5      case M_FLUSH:
 6          /* ... */
 7          break;
 8      case M_IOCTL:
 9          /* ... */
10          break;
11      case M_DATA:
.B "12          putq(q, mp);
13          break;
14      default:
15          freemsg(mp);
16          break;
17      }
18      return (0);
19  }
\s+2\fP
.fi
.PP
Data messages are simply placed onto the message queue at
.BR "Line 12" .
.PP
Following is the transmit ISR:
.PP
.nf
\fC\s-2\
 1  void
 2  example_xmit_isr_handler(queue_t *q)
 3  {
 4      pl_t pl;
 5  
 6      /* q is a write queue of the driver */
 7      pl = freezestr(q);
 8      {
 9          mblk_t *mp, *bp;
10          int count = 0;
11  
12          while ((bp = mp = q->q_first)) {
.B "13              rmvq(q, mp);
14              do {
15                  while ((mp->b_rptr < mp->b_wptr)) {
.B "16                      outb(mp->b_rptr[0], OUTPUT_PORT);
17                      mp->b_rptr++;
18                      count++;
19                      if (count == XMIT_BUF_DEPTH) {
.B "20                          insq(q, q->q_first, mp);
21                          goto done;
22                      }
23                  }
24              } while ((bp = bp->b_cont));
.B "25              freemsg(mp);
26          }
27          if (count < XMIT_BUF_DEPTH) {
28              /* xmit buffer underrun */
29          }
30        done:
31      }
32      unfreezestr(q, pl);
33  }
\s+2\fP
.fi
.PP
The transmit ISR operates much like a service procedure, it removes
messages from the write queue at
.BR "Line 13" ,
writes data out to the device transmit FIFO at
.BR "Line 16" ,
and either places messages with more data back on the queue at
.BR "Line 20" ,
or frees empty messages at
.BR "Line 25" ,
.PP
For
.BR rmvq (9)
at
.BR "Line 13"
to properly back-enable the queue,
.BR canputnext (9)
or
.BR bcanputnext (9)
must set the
.BR QWANTW
flag on this queue when
.BR QFULL
is set, regardless of whether it has a service procedure or not.
Of course, it is possible to provide a dummy service procedure as follows:
.PP
.nf
\fC\s-2\
 1  int
 2  example_wsrv(queue_t *q)
 3  {
 4      return (0);
 5  }
\s+2\fP
.fi
.PP
But, that is rather pointless. (Nevertheless, see situations under which this is advised under
.RI \(lq COMPATIBILITY ,\(rq
below.)
.\"
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putnext (9),
.BR canput (9),
.BR canputnext (9),
.BR bcanput (9),
.BR freezestr (9),
.BR noenable "(9), and
.BR enableok (9).
.\"
.\"
.SH BUGS
.PP
.BR bcanputnext ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR bcanputnext ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR bcanputnext ()
as a function that can only be passed a queue in the queue pair currently
being synchronized within a module procedure.
.IR HP-UX \(rg
.[
hpuxspg
.]
also lists
.BR bcanputnext ()
as a utility that cannot be called from user functions or
.RI non- STREAMS
code; that is, contexts asynchronous to the Stream containing
.IR q .
.IP ""
.IR HP-UX \(rg
compatible modules and drivers will not call
.BR bcanputnext ()
from outside of a
.BR qinit (9)
routine for the queue pair of
.IR q .
.IP \(em
.BR bcanputnext ()
is MP-safe.
Under LiS,
.BR bcanputnext ()
does not protect dereferencing of queue pointers during the search for a queue
or band limited queue.
.IP \(em
.BR bcanputnext ()
always succeeds.  Under LiS,
.BR bcanput ()
will return zero (0 - flow controlled) if an internal error occurs, without
setting the
.BR QWANTW " or " QB_WANTW
flag for the queue or band.  This means that, although flow controlled, no
backenable procedure will be run.  This can lead to indefinite postponement of
a queue
.IR qi_srvp (9)
procedure under
.IR LiS .
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
.BR bcanputnext ()
does not have this problem.
.IP ""
Portable
.I STREAMS
modules and drivers will use
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
instead of
.IR LiS .
.IP \(em
The declaration for
.BR bcanputnext ()
provides that
.I band
is of type
.BR int .
Under
.IR "SVR 4.2 DDI/DKI" ,
.[
usldk
.]
and other systems based on
.IR "SVR 4",
.I band
is
.BR "unsigned char" .
.IP \(em
.BR bcanputnext ()
protects dereferences of the
.I q->q_next
pointer with a
Stream head
lock.
Under
.IR LiS ,
.BR bcanputnext ()
is simply a macro that calls
.BR bcanput (9)
without protection for the
.I q->q_next
pointer dereference.
.IP ""
Portable
.I STREAMS
modules and drivers will use
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
instead of
.IR LiS .
.\".IP \(em
.\"Symbol
.\".BR lis_bcanputnext ()
.\"is provided for compatibility with
.\".IR LiS .
.\"See
.\".BR liscompat (9).
.\".BR lis_bcanputnext ()
.\"simply calls
.\".BR bcanputnext ()
.\"directly.
.\".IP ""
.\"Portable
.\".I STREAMS
.\"modules and drivers will not access these symbols, but will call
.\".BR bcanputnext ()
.\"directly.
.IP \(em
.BR bcanputnext ()
may be called on a
Stream
frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR bcanputnext ()
to be called on a
Stream
frozen with
.BR freezestr (9).
.IP ""
Portable
.I STREAMS
drivers and modules will not call
.BR bcanputnext ()
on a
Stream
frozen with
.BR freezestr (9).
.IP \(em
.IR SUPER-UX \(rg
documentation
.[
suxspg
.]
states that if the
Stream end
has no
.IR qi_srvp (9)
procedure that
.BR bcanputnext ()
will return (1).
This is incorrect behaviour to that described in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
For example, the
Stream head
does not normally have a read
.IR qi_srvp (9)
procedure, but uses wakeups from the read side
.IR qi_putp (9)
procedure to schedule servicing of the queue.  It is still necessary for
.BR bcanputnext ()
to fail when the read queue passes its high water mark.
.IR SUPER-UX \(rg
will not fail in such a circumstance, making its behaviour inconsistent with other
.IR UNIX \(rg
implementations of
.IR STREAMS .
.IP ""
Portable
.I STREAMS
drivers and modules should not rely on the behaviour of
.BR bcanputnext ()
on drivers that have no write side
.IR qi_srvp (9)
procedure, but which enqueue messages on their write
queues (to be collected using
.BR getq (9)
outside the
.I STREAMS
framework).
Such drivers should provide a dummy
.IR qi_srvp (9)
procedure.
.IP \(em
All versions of
.I LiS
contain the bug that they keep track of message queue counts,
.IR q_count ,
.IR qb_count ,
in terms of the sum of the absolute sizes of the data buffers referenced by message blocks,
.RB ( "db_lim - db_base" ),
and not the sizes of the message blocks themselves,
.RB ( "b_wptr - b_rptr" ),
which does not conform to
.IR "SVR 4.2 STREAMS" .
.[
svr42spg
.]
See
.BR msgsize (9).
No other implementation has this bug.
.IP ""
Portable
.I STREAMS
applications programs, modules and drivers will use
.BR "@PACKAGE_TITLE@"
instead of
.IR LiS .
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.[
uslspg
.]
.\"
.\"
.SH HISTORY
.PP
.BR bcanputnext ()
first appeared in
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
Earlier versions of
.I STREAMS
.RI (e.g. " SVR 3" )
.[
svr3spg
.]
did not have priority bands.
.\"
.\"
.[
$LIST$
.]
.TI
