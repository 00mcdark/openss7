'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: SPG.9.man,v 0.9.2.7 2004/08/22 06:17:44 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/08/22 06:17:44 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH SPG 9 "$Date: 2004/08/22 06:17:44 $" "$Name:  $" "Linux Fast-STREAMS Programmers Guide"
.\"
.\"
.SH NAME
.B spg
\- Linux Fast-STREAMS Programmers Guide
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.br
.B #include <sys/stropts.h>
.br
.B #include <sys/dki.h>
.br
.B #include <sys/kmem.h>
.br
.B #include <sys/cmn_err.h>
.br
.B #include <sys/ddi.h>
.\"
.\"
.SH ARGUMENTS
.PP
.\"
.\"
.SH DESCRIPTION
.PP
.\"
.\"
.SS "Base Functions"
.PP
.B "Message Utility Functions"
.TP
.BR adjmsg (9)
.PD 0
.TP
.BR allocb (9)
.TP
.BR bufcall (9)
.TP
.BR copyb (9)
.TP
.BR copymsg (9)
.TP
.BR datamsg (9)
.TP
.BR dupb (9)
.TP
.BR dupmsg (9)
.TP
.BR esballoc (9)
.TP
.BR freeb (9)
.TP
.BR freemsg (9)
.TP
.BR linkb (9)
.TP
.BR msgdsize (9)
.TP
.BR msgpullup (9)
.TP
.BR pcmsg (9)
.TP
.BR pullupmsg (9)
.TP
.BR rmvb (9)
.TP
.BR testb (9)
.TP
.BR unbufcall (9)
.TP
.BR unlinkb (9)
.PD
.PP
.B "Queue Utility Functions"
.TP
.BR backq (9)
.PD 0
.TP
.BR bcanput (9)
.TP
.BR canenable (9)
.TP
.BR enableok (9)
.TP
.BR flushband (9)
.TP
.BR flushq (9)
.TP
.BR getq (9)
.TP
.BR insq (9)
.TP
.BR noenable (9)
.TP
.BR OTHERQ (9)
.TP
.BR putbq (9)
.TP
.BR putctl (9)
.TP
.BR putctl1 (9)
.TP
.BR putq (9)
.TP
.BR qenable (9)
.TP
.BR qreply (9)
.TP
.BR qsize (9)
.TP
.BR RD (9)
.TP
.BR rmvq (9)
.TP
.BR SAMESTR (9)
.TP
.BR WR (9)
.PD
.PP
.B "MP Queue Utility Functions"
.TP
.BR bcanputnext (9)
.PD 0
.TP
.BR canputnext (9)
.TP
.BR freezestr (9)
.TP
.BR put (9)
.TP
.BR putnext (9)
.TP
.BR putnextctl1 (9)
.TP
.BR putnextctl (9)
.TP
.BR qprocsoff (9)
.TP
.BR qprocson (9)
.TP
.BR strqget (9)
.TP
.BR strqset (9)
.TP
.BR unfreezestr (9)
.PD
.PP
.B "DDI/DKI Utility Functions"
.TP
.BR kmem_alloc (9)
.PD 0
.TP
.BR kmem_free (9)
.TP
.BR kmem_zalloc (9)
.TP
.BR cmn_err (9)
.TP
.BR bcopy (9)
.TP
.BR bzero (9)
.TP
.BR copyin (9)
.TP
.BR copyout (9)
.TP
.BR delay (9)
.TP
.BR drv_getparm (9)
.TP
.BR drv_hztomsec (9)
.TP
.BR drv_hztousec (9)
.TP
.BR drv_msectohz (9)
.TP
.BR drv_priv (9)
.TP
.BR drv_usectohz (9)
.TP
.BR drv_usecwait (9)
.TP
.BR min (9)
.TP
.BR max (9)
.TP
.BR getmajor (9)
.TP
.BR getminor (9)
.TP
.BR makedevice (9)
.TP
.BR mknod (9)
.TP
.BR mount (9)
.TP
.BR strlog (9)
.TP
.BR timeout (9)
.TP
.BR umount (9)
.TP
.BR unlink (9)
.TP
.BR untimeout (9)
.PD
.PP
.B "Enhanced Utility Functions"
.TP
.BR linkmsg (9)
.PD 0
.TP
.BR putctl2 (9)
.TP
.BR putnextctl2 (9)
.TP
.BR weldq (9)
.TP
.BR unweldq (9)
.PD
.PP
.B "Internal Functions"
.TP
.BR allocq (9)
.PD 0
.TP
.BR bcanget (9)
.TP
.BR canget (9)
.TP
.BR freeq (9)
.TP
.BR qattach (9)
.TP
.BR qclose (9)
.TP
.BR qdetach (9)
.TP
.BR qopen (9)
.TP
.BR setq (9)
.PD
.PP
.B "Miscellaneous"
.TP
.BR appq (9)
.PD 0
.TP
.BR esbbcall (9)
.TP
.BR isdatablk (9)
.TP
.BR isdatamsg (9)
.TP
.BR kmem_zalloc_node (9)
.TP
.BR msgsize (9)
.TP
.BR qcountstrm (9)
.TP
.BR xmsgsize (9)
.PD
.\"
.\"
.SS "Device Numbering"
.PP
.B Linux Fast-STREAMS
uses several device numbering schemes intended to be compatible with
.I SVR 4.2 MP DDI/DKI
.[
usldk
.]
and implementations based on
.I SVR 4.2
.[
svr42
.]
including
.IR AIX \(rg,
.[
aixspg
.]
.IR HP-UX \(rg,
.[
hpuxspg
.]
.IR LiS ,
.[
lis
.]
.IR OSF/1 \(rg,
.[
osfspg
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg,
.[
suxspg
.]
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR UXP/V \(rg.
.[
uxpspg
.]
.\"
.PP
.B External (Real) Device Numbering
.PP
.B LfS
provides real external device numbering using the functions
.BR getemajor (9),
.BR geteminor (9)
and
.BR makedevice (9).
When used on a
.I devp
argument passed to the
.BR qopen (9)
procedures of a
.I STREAMS
driver or module,
.BR getemajor (9)
and
.BR geteminor (9)
will return the real external major or minor device number.  The real external
major or minor device number is the major or minor device number that is seen
by user applications.
.PP
A number of adminstrative utilities are provided that assist with the
assignment of device names and numbers and are useful in boot scripts:
.\".TS
.\"expand tab(:);
.\"lclssss.
.\"\fBautopush\fR(8):\-:T{
.\"verify modules and establish autopush lists
.\"T}
.\"\fBinsf\fR(8):\-:T{
.\"install special device files
.\"T}
.\"\fBscls\fR(8):\-:T{
.\"list STREAMS drivers
.\"T}
.\"\fBstrinfo\fR(8):\-:T{
.\"provide information on STREAMS drivers and modules
.\"T}
.\"\fBstrload\fR(8):\-:T{
.\"load or unload STREAMS drivers and modules
.\"T}
.\"\fBstrsetup\fR(8):\- :T{
.\"create STREAMS devices
.\"T}
.\".TE
.TP \w'strsetup(8)\(em'u
.BR autopush (8)
\-\ verify modules and establish autopush lists
.PD 0
.TP
.BR insf (8)
\-\ install special device files
.TP
.BR scls (8)
\-\ list
.I STREAMS
drivers
.TP
.BR strinfo (8)
\-\ provide information on
.I STREAMS
drivers and modules
.TP
.BR strload (8)
\-\ load or unload STREAMS drivers and modules
.TP
.BR strsetup (8)
\-\ create
.I STREAMS
devices
.PD
.PP
Another approach to establishment of dynamically allocated major device
numbers is to use the
.I LiS
.[
lis
.]
approach of creating minor device nodes using the
.BR mknod (9)
and
.BR unlink (9)
facilities provide by the
.I LiS
compatibility module.
But this approach does not work well with demand loading of kernel modules
because it relies on the
.B Linux
character device demand loading approach, or requires informing
.I STREAMS
of all devices and drivers when
.I STREAMS
is being compiled.
.PP
.B LfS
supports the
.B Linux
character device module demand loading; however, the
.B Linux
mechanism requires prior knowledge of the character major device number.
Some of the adminstrative utilities above can load kernel modules and
establishe what major device number was assigned.  See the individual manual
pages for more information.
.\"
.PP
.B Internal (Extended) Device Numbering
.PP
Internal extended minor device number is a scheme whereby the
.I STREAMS
device driver does not have to be concerned with architectural limitations
on the number or minor device numbers available to user applications
(0 to 255 in
.BR "Linux 2.4" ).
Instead, the driver treats the major device number as a base internal device
number against which a wide range of minor devices can be assigned (currently
0 to 65535).
For extenal applications, device numbering consists of multiple (real)
external major device numbers that correspond to a single base internal major
device number.  Internal extended device numbering is provided by the
.BR getmajor (9),
.BR getminor (9)
and
.BR makedevice (9)
facilities.
Conversions between external (real) major device numbers and internal (base)
major device numbers can be performed with the
.BR etoimajor (9)
and
.BR itoemajor (9)
utilities provided by the
.IR UnixWare \(rg
compatibility module.
.PP
Extended device numbering further complicates the matter of dynamic assignment
of major device numbers and makes it harder for boot and configuration scripts
to properly create device nodes.
.\"
.PP
.B Cloning
.PP
The
.BR clone (4)
driver supports traditional clone devices.  Traditional clone devices work by
assigning the clone major device number and a unique minor device number to a
\(lqclone\(rq device.  When this device is opened, the minor device number of
the device is used as the new major device number and zero (0) is used as the
minor device number, and the
.BR qopen (9)
is chained to the
.BR qopen (9)
procedure of the new
.BR streamtab (9)
structure resulting from looking up this newly created device number.
.I sflag
is always set to
.B CLONEOPEN
when the traditional clone driver opens a device.
.PP
.BR getemajor (9),
.BR geteminor (9),
.BR getmajor (9)
and
.BR getminor (9)
still function as as normal on the resulting
.I devp
argument passed to the utlimate driver's
.BR qopen (9)
procedure.  This is true both for base and extended major device numbers.
The following table illustrates the situation
(assuming that the major device number assigned to the
.BR clone (4)
device is 72):
.PP
.TS
expand tab(;);
c|c|c|c.
_
clone;external;internal;sflag
_
72:32;32:0;32:000;CLONEOPEN
72:35;35:0;32:256;CLONEOPEN
72:37;37:0;32:512;CLONEOPEN
_
.TE
.PP
If a driver wishes to assign an extended minor device number in response to a
.BR CLONEOPEN ,
it should use
.BR makedevice (9)
with the major number obtained with
.BR getmajor (9)
and an extended minor device number assigned by the driver.  In this way,
extended minor device numbers are transparent to the operation of the
.BR clone (4)
driver and
.BR CLONEOPEN .
.\"
.PP
.B New Cloning
.PP
.B LfS
supports the new cloning approach whereby a driver is permitted to alter the
device number returned in the
.I devp
argument to
.BR qopen (9)
even though
.I sflag
is set to
.B DRVOPEN
instead of
.BR CLONEOPEN .
The driver, at its discretion, can treat any minor device number as a new
style clone device, although normally minor device number zero (0) is usually
used as the clone minor.
.PP
The driver may either use an external (real) major device number or the
internal (base) major device number.  That is, when calling
.BR makedevice (9)
to create the device to return to the
.I devp
argument to
.BR qopen (9),
the driver can use an external (real) major device number (returned by
.BR getemajor (9))
combined with an assigned external (real) minor device number (from 0 to 255);
or, it can use an internal (base) major device number (returned by
.BR getmajor (9))
combined with an assigned extended minor device number (from 0 to 65535).
The latter approach is often easier to use.
.\"
.PP
.B Named STREAMS Device
.PP
The
.BR nsdev (4)
driver provides for a Named STREAMS device.  This is a device numbering
approach unique to
.BR "Linux Fast-STREAMS" .
The
.BR nsdev (4)
driver operates similar to the
.BR clone (4)
driver, however, the major number is derived from the prefix name of the device
and the minor number is taken directy from the minor number of the
.BR nsdev (4)
device.
.PP
The following table summarizes the approach (assuming that the major device
numbers assigned to the
.BR nsdev (4)
device are 74, 75, 76 and 77 and the major device numbers assigned to the
.BR inet (4)
driver are 32, 35 and 37):
.PP
.TS
expand tab(;);
cs|c|c|c.
_
nsdev;external;internal;sflag
.T&
lc|c|c|c.
_
inet;74:000;32:000;32:000;DRVOPEN
inet.udp;74:017;32:017;32:017;DRVOPEN
inet.99;74:099;32:099;32:099;DRVOPEN
inet.512;76:000;37:000;32:512;DRVOPEN
_
.TE
.PP
The
.BR nsdev (4)
device also has the characteristic that if a device name with a major device
number of the
.BR nsdev (4)
device is opened and there is no device loaded that corresponds to the prefix
name of the device from which to obtain a major device number, the
.BR nsdev (4)
will attempt to load the
.BI streams- prefix
kernel module using
.BR request_module (9)
and try again: where,
.I prefix
is the prefix of the device name up to the first point character (corresponding to a
digit \(lq.\(rq).
So, in the example above, if the
.RI \(lq inet \(rq
driver was not loaded, but at attempt was made to open the
.BR /dev/inet.99
device,
.I STREAMS
would request the
.B streams-inet
kernel module be loaded.
This approach simplifies kernel module loading as well as device numbering and
makes it easier for boot scripts to intialize devices.
.\"
.PP
.B Mountable specfs Filesystem
.PP
Another approach to creation and assignment of device numbers is the mountable
.BR specfs (5)
filesystem.  The
.BR specfs (5)
filesystem can be mounted to provide an in-kernel
device directory similar to the
.B Linux
devfs filesystem and the
.IR Solaris \(rg
devices filesystem.
The
.BR specfs (5)
filesystem should normally be mounted on the
.B /dev/streams
subdirectory by system initialization scripts using a command such as:
.BR "mount -t specfs none /dev/streams" .
See
.BR mount (8)
for more information.
Once mounted over the
.B /dev/streams
subdirectory, subdirectories of
.B /dev/streams
corresponding to each loaded driver will appear.  So, for example, when the
.BR inet (4)
driver is loaded, the
.RI \(lq inet \(rq
subdirectory will appear at
.BR /dev/streams/inet .
Within each device subdirectory
.BI /dev/streams/ devicename /\fR,
each instance of the device will appear as a character device named with the
instance number of the device and having the external (real) major and
external (real) minor device number.
.PP
The mounted
.BR specfs (5)
filesystem also has the characteristic that if a device
subdirectory
.BI /dev/streams/ devname /
does not exist, but an attempt is made to read such a directory,
.B Linux Fast-STREAMS
will attempt to load kernel module
.BI streams- devname
into the kernel with
.BR request_module (9).
If the load is successful, the kernel module will register and the
subdirectory will be created and read.
.PP
Also, if an attempt is made to open a numbered file within a device
subdirectory of
.BI /dev/streams/ devname / nnnn
where,
.I nnnn
is an octal, hexadecimal or decimal ASCII number,
.I STREAMS
will open the driver (call
.BR qopen (9)
for driver
.IR devname )
with the instance number resulting from the conversion of the device name
.I nnnn
to an instance number.
.PP
These two characteristics permit symbolic links to be placed in the
.B /dev
directory that link to a device name and instance number in the
.B /dev/streams
directory.  An example is given in the table below:
.PP
.TS
expand tab(;);
l|c|c|c.
_
link;external;internal;sflag
_
/dev/tcp->streams/inet/36;30:36;30:36;DRVOPEN
/dev/udp->streams/inet/39;30:39;30:39;DRVOPEN
_
.TE
.PP
In fact, it does not matter what the character device major or minor device
number is of node in the
.BR specfs (5)
filesystem.  This is because the inode in the
filesystem is directy associated with the
.B streamtab (9)
structure and instance number without using the normal
.B Linux
character device mechanisms.
When a device instance exceeds the extended minor device numbering space
assigned to a device driver in the
.BR specfs (5)
filesystem, device number displayed by
.BR stat (2),
.BR lstat (2)
or
.BR fstat (2)
is chosen  by wrapping the instance number into the extended minor device
numbering space.
.PP
This approach makes it unnecessary to statically assign major device numbers,
or to dynamically assign major device numbers to devices in boot scripts, and
is by far the easiest approach.
All that is required by packages at installation is that they establish the
necessary symbolic links on device name and instance number without concern
for major device numbers.
.\"
.\"
.SH RETURN
.PP
.\"
.\"
.SH ERRORS
.PP
.\"
.\"
.SH CONTEXT
.PP
.\"
.\"
.SH MP-STREAMS
.PP
.\"
.\"
.SH NOTICES
.PP
.\"
.\"
.SH "SEE ALSO"
.PP
.\"
.\"
.SH BUGS
.PP
.\"
.\"
.SH COMPATIBILITY
.PP
.\"
.SS "Porting from SVR 4.2 MP"
.PP
.B "Compatibilty functions for SVR 4.2 MP"
.TP
.BR itimeout (9)
.PD 0
.TP
.BR LOCK (9)
.TP
.BR LOCK_ALLOC (9)
.TP
.BR LOCK_DEALLOC (9)
.TP
.BR major (9)
.TP
.BR makedev (9)
.TP
.BR minor (9)
.TP
.BR sleep (9)
.TP
.BR spl0 (9)
.TP
.BR spl1 (9)
.TP
.BR spl2 (9)
.TP
.BR spl3 (9)
.TP
.BR spl4 (9)
.TP
.BR spl5 (9)
.TP
.BR spl6 (9)
.TP
.BR spl7 (9)
.TP
.BR spl (9)
.TP
.BR splx (9)
.TP
.BR SV_ALLOC (9)
.TP
.BR SV_BROADCAST (9)
.TP
.BR SV_SIGNAL (9)
.TP
.BR SV_WAIT (9)
.TP
.BR SV_WAIT_SIG (9)
.TP
.BR TRYLOCK (9)
.TP
.BR UNLOCK (9)
.TP
.BR vtop (9)
.TP
.BR wakeup (9)
.PD
.\"
.SS "Porting from AIX 5L Version 5.1"
.PP
.B "Compatibility Functions for AIX 5L Version 5.1"
.TP
.BR mi_bufcall (9)
.PD 0
.TP
.BR mi_close_comm (9)
.TP
.BR mi_next_ptr (9)
.TP
.BR mi_open_comm (9)
.TP
.BR putctl2 (9)
.TP
.BR splstr (9)
.TP
.BR splx (9)
.TP
.BR str_install (9)
.TP
.BR unweldq (9)
.TP
.BR wantio (9)
.TP
.BR wantmsg (9)
.TP
.BR weldq (9)
.PD
.\"
.SS "Porting from HP-UX 11.0i v2"
.PP
.\"
.SS "Porting from OSF/1 1.2\(emDigital Unix"
.PP
.\"
.SS "Porting from UnixWare 7.1.3 (OpenUnix 8)"
.PP
.\"
.SS "Porting from Solaris 9/SunOS 5.9"
.PP
.\"
.SS "Porting from SUPER-UX/SUX 1"
.PP
.\"
.SS "Porting from UXP/V"
.PP
.\"
.SS "Porting from Linux STREAMS/LiS 2.16.18"
.PP
.\"
.\"
.SH CONFORMANCE
.PP
.\"
.\"
.SH HISTORY
.PP
.\"
.\"
.[
$LIST$
.]
.TI
