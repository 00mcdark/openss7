'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: qinit.9.man,v 0.9.2.11 2005/11/25 23:42:06 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/11/25 23:42:06 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH QINIT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B qinit
\- \fISTREAMS\fP queue initialization structure
.\"
.\"
.SH SYNOPSIS
.PP
.nf
\fC\s-2
typedef int (*qi_putp_t) (queue_t *, mblk_t *);
typedef int (*qi_srvp_t) (queue_t *);
typedef int (*qi_qopen_t) (queue_t *, dev_t *, int, int, cred_t *);
typedef int (*qi_qclose_t) (queue_t *, int, cred_t *);
typedef int (*qi_qadmin_t) (void);

struct qinit {
    qi_putp_t qi_putp;            /* put procedure */
    qi_srvp_t qi_srvp;            /* service procedure */
    qi_qopen_t qi_qopen;          /* each open (read q only) */
    qi_qclose_t qi_qclose;        /* last close (read q only) */
    qi_qadmin_t qi_qadmin;        /* admin procedure (not used) */
    struct module_info *qi_minfo; /* module info */
    struct module_stat *qi_mstat; /* module stats */
};
\s+2\fP
.fi
.\"
.\"
.SH MEMBERS
.PP
The following are
.IR "SVR 4.2 EFT"
.[
svr42spg
.]
members:
.TP \w'qi_qadmin\(em'u
.I qi_putp
contains a function pointer to the
.BR putp (9)
procedure for a
.I STREAMS
module or driver.
.TP
.I qi_srvp
contains a function pointer to the
.BR srvp (9)
procedure for a
.I STREAMS
module or driver.
.TP
.I qi_qopen
contains a function pointer to the
.BR qopen (9)
routine for a
.I STREAMS
module or driver.
.TP
.I qi_qclose
contains a function pointer to the
.BR qclose (9)
routine for a
.I STREAMS
module or driver.
.TP
.I qi_qadmin
contains a function pointer to the
.B admin
routine for a
.I STREAMS
module or driver.
.TP
.I qi_minfo
contains a pointer to a
.BR module_info (9)
structure describing additional particulars about the
.I STREAMS
module or driver.
.TP
.I qi_mstat
contains a pointer to a
.BR module_stat (9)
structure containing run-time statistics for the
.I STREAMS
module or driver.
.PP
There are no
.B Linux Fast-STREAMS
specific members associated with the
.B qinit
structure.
.\"
.\"
.SH DESCRIPTION
.PP
The
.B qinit
structure is a statically allocated structure that is used in the definition of a
.I STREAMS
module or driver.
When a
Stream
is created as a result of a call to
.BR open (2s)
or
.BR pipe (2s),
particulars about the
Stream head
and
driver queue pair are initialized to point to (usually two of) these structures.
.PP
Pointers to two or four
.B qinit
structures are used as the primary definition of a
.I STREAMS
module or driver in the
.BR streamtab (9)
structure.
Two
.B qinit
structures are referenced for the read and write side of a module, and two pairs of
.B qinit
structures are referenced for the read and write side of a driver, one pair for the upper
multiplexer and another for the lower multiplexer for a multiplexing driver.
.\"
.SS Module and Driver Entry Points
.PP
The
.IR qi_putp ,
.IR qi_srvp ,
.IR qi_qopen ,
.IR qi_qclose ,
and
.IR qi_qadmin
represent the primary functional entry points into the module or driver and are invoked at the
appropriate times by the
.I STREAMS
scheduler.
.PP
The
.I qi_putp
and
.I qi_srvp
fields are significant in each
.B qinit
structure associated with a
.BR queue (9).
The
.IR qi_qopen ,
.IR qi_qclose ,
and
.I qi_qadmin
members are only significant in the
.B qinit
structure associated with the read-side
.BR queue (9)
structure.
.I STREAMS
ignores the values of the
.IR qi_qopen ,
.IR qi_qclose ,
and
.IR qi_qadmin ,
function pointers in the
.B qinit
structure associated with the
write-side
.BR queue (9)
structure of a queue pair.
The
.I qi_qadmin
function pointer is for a module private adminstrative function that is not normally used.
.PP
For a description of the use and guidelines for the
.IR qi_qadmin ,
.IR qi_qopen ,
.IR qi_qclose ,
.IR qi_putp ,
and
.IR qi_srvp ,
functions provided by a module or driver, see
.BR qi_qadmin_t (9),
.BR qopen (9),
.BR qclose (9),
.BR putp (9),
and
.BR srvp (9).
.\"
.SS Initialization
.PP
The
.I qi_minfo
member points to a
.BR module_info (9)
structure that contains the name and identifier for the module or driver.  The
.I qi_minfo
.BR module_info (9)
structure also contains the initialization queue packet size and flow control limits used to
initialize
.BR queue (9)
structures when a queue pair is formed.
.PP
Four members of the
.BR queue (9)
structure,
.IR q_minpsz ,
.IR q_maxpsz ,
.IR q_hiwat ,
and
.IR q_lowat ,
are initialized from the
.BR module_info (9)
structure pointed to by this structure.
These members of the
.BR queue (9)
structure are initialized from the associated
.B qinit
structure's referenced
.BR module_info (9)
structure.
See
.BR queue (9)
and
.BR module_info (9)
for more information.
.\"
.SS Statistics
.PP
The
.I qi_mstat
member points to a
.BR module_stat (9)
structure that contains collected statistics for the module.  Statistics include the number of times
that each of the procedures were called as well a private statistics.  As the read and write side
queues can point to different
.B qinit
structures, a
.BR module_stat (9)
structure can be associated with each queue in the queue pair, or they can share one
.BR module_stat (9)
structure.
.PP
See
.BR module_stat (9)
for more information.
.\"
.\"
.SH USAGE
.PP
The
.B qinit
structure is statically allocated and associated with a statically allocated
.BR streamtab (9)
structure to define a
.I STREAMS
module or driver.
.PP
Once the associated
.BR streamtab (9)
structure has been registered with the
.I STREAMS
subsystem as a module or driver, all fields in the structure must be treated as read-only by a
module or driver.
The following guidelines pertain to the use of the fields in the
.B qinit
structure:
.IP \(bu \w'\(bu\(em'u
Function pointers
.IR qi_qadmin ,
.IR qi_qopen ,
.IR qi_qclose ,
.IR qi_putp ,
.IR qi_srvp ,
must not be altered after the
.B streamtab (9)
structure is registered.
.IP \(bu
Of theses, only
.I qi_qadmin
can be called directly by the a module or driver.
.I qi_qopen
must only be called indirectly using the
.BR open (2s)
or
.BR I_PUSH (7)
.BR ioctl (2s).
.I qi_qclose
must only be called indirectly using the
.BR close (2s)
or
.BR I_POP (7)
.BR ioctl (2s).
.I qi_putp
must only be called via the appropriate
.I STREAMS
utility functions:
.BR put (9)
and
.BR putnext (9),
and then only in the appropriate contexts.
.IP \(bu
.I qi_srvp
must only be called by the
.I STREAMS
scheduler; that is, invoked with the
.I STREAMS
utility functions:
.BR qenable (9),
.BR putq (9),
.BR putbq (9),
or any utility invoking back-enabling.
.IP \(bu
The
.I qi_minfo
pointer must not be modified after registeration.  The point can, however, be read directly to find
the location of the
.BR module_info (9)
structure that corresponds to a given queue, queue pair or module.
See
.BR module_info (9)
for restrictions on the use of its members.
.IP \(bu
The
.I qi_mstat
pointer must not be modified after registration.  The pointer can, however, be read directly to find
the location of the
.BR module_stat (9)
structure that corresponds to a given queue pair or module.
See
.BR module_stat (9)
for restrictions on the use of its members.
.IP \(bu
The pointers to
.B qinit
structure from the
.BR streamtab (9)
structure for a module or driver must not be altered after the
.BR streamtab (9)
structure has been registered.
.IP \(bu
The pointer to a
.B qinit
structure contained within the
.BR queue (9)
structure must only be altered by the
Stream head.
.\"
.\"
.\".SH NOTICES
.\".PP
.\"
.\"
.SH EXAMPLES
.PP
The following declarations provide an example of static declaration of
.B qinit
and associated structures to define a module:
.PP
.nf
\fC\s-1\
 1  int bufmod_wput(queue_t *, mblk_t *);
 2  int bufmod_wsrv(queue_t *);
 3  
 4  int bufmod_rput(queue_t *, mblk_t *);
 5  int bufmod_rsrv(queue_t *);
 6  
 7  int bufmod_open(queue_t *, dev_t *, int, cred_t *);
 8  int bufmod_close(queue_t *, dev_t *, cred_t *);
 9  
10  static struct module_info bufmod_minfo = {
11      .mi_idnum = 0,
12      .mi_idname = "bufmod",
13      .mi_minpsz = STRMINPSZ,
14      .mi_maxpsz = STRMAXPSZ,
15      .mi_hiwat = STRHIGH,
16      .mi_lowat = STRLOW,
17  };
18  
19  static struct qinit bufmod_rinit = {
20      .qi_putp = bufmod_rput,
21      .qi_srvp = bufmod_srv,
22      .qi_qopen = bufmod_open,
23      .qi_qclose = bufmod_close,
24      .qi_minfo = &bufmod_minfo,
25  };
26  
27  static struct qinit bufmod_winit = {
28      .qi_putp = bufmod_wput,
29      .qi_srvp = bufmod_srv,
30      .qi_minfo = &bufmod_minfo,
31  };
32  
33  static struct streamtab bufmod_info = {
34      .st_rdinit = &bufmod_rinit,
35      .st_wrinit = &bufmod_winit,
36  };
\s+1\fP
.fi
.PP
At lines
.B 19
through
.B 25
and lines
.B 27
through
.BR 31 ,
the
.B qinit
structures for the read and write queues are defined.  These
.B qinit
structures are referenced by the
.BR streamtab (9)
structure that defines the module, at lines
.B 33
through
.BR 36 .
.\"
.\"
.SH "SEE ALSO"
.PP
.BR queue (9),
.BR module_info (9),
.BR module_stat (9),
.BR open (2s),
.BR pipe (2s),
.BR streamtab (9),
.BR qi_qadmin_t (9),
.BR qopen (9),
.BR qclose (9),
.BR putp (9),
.BR srvp (9),
.BR I_PUSH (7),
.BR ioctl (2s),
.BR close (2s),
.BR I_POP (7),
.BR put (9),
.BR putnext (9),
.BR qenable (9),
.BR putq (9),
.BR putbq (9),
.BR STREAMS (9).
.\"
.\"
.SH COMPATIBILITY
.PP
The
.B qinit
structure is compatible with
.IR "SVR 4.2 EFT MP" .
.[
svr42spg
.]
and implementations based on
.IR "SVR 4 EFT" ,
.[
svr4spg
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR "SVR 4"
.[
svr4spg
.]
provided two different prototypes for the
.I qi_qopen
function pointer, depending on whether the
.IB xxx flag
symbol was defined or not.  If the
.IB xxx flag
symbol was not defined, the prototype defaulted to
.IR "SVR 3" -style
for
.BR qopen (9)
and
.BR qclose (9)
procedures.  If the
.IB xxx flag
was defined, the prototype became
.IR "SVR 4" -style
for
.BR qopen (9)
and
.BR qclose (9)
procedures.
.B @PACKAGE_TITLE@
only provides an
.IR "SVR 4" -style
prototype for
.I qi_qopen
and
.IR qi_qclose .
.IP ""
Portable
.I STREAMS
modules and drivers will be written to
.BR "SVR 4"
instead of
.BR "SVR 3" .
.IP \(em
Aside from the above, the
.B qinit
structure is very consistent across implementations.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 EFT MP" .
.[
svr42spg
.]
.\"
.\"
.SH HISTORY
.PP
The
.B qinit
structure first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
