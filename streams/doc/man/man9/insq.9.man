'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: insq.9.man,v 0.9.2.12 2005/04/09 09:31:48 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/04/09 09:31:48 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH INSQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B insq
\- inserts a message into a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int insq(queue_t *" q ", mblk_t *" emp ", mblk_t *" nmp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue into which to insert the message.
.TP
.I emp
the message before which to insert the message.
.TP
.I nmp
the message to insert.
.\"
.\"
.SH DESCRIPTION
.PP
.BR insq ()
inserts the message pointed to by
.I nmp
before the message pointed to by
.I emp
in the queue specified by
.IR q .
If the message pointer
.I emp
is
.B NULL
it indicates that the message pointed to by
.I nmp
is to be inserted at the end of the queue.
This means that
.BI insq( q ", NULL, " nmp )
is equivalent to
.BI putq( q ", " nmp ).
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR insq ()
returns true (1) and the message pointed to by
.I nmp
has been inserted into the queue.
.PP
Upon failure,
.BR insq ()
returns false (0) and the message pointed to by
.I nmp
remains unaltered.  (See
.BR \*(lqCOMPATIBILITY\*(rq " below.)"
.\"
.\"
.SH ERRORS
.PP
When
.BR insq ()
fails, it returns false (0).
.BR insq ()
can fail because the insertion creates a queue band and a queue band structure
could not be allocated.
.\"
.\"
.SH CONTEXT
.PP
.BR insq ()
can be called from any context.
.\"
.\"
.SH MP-STREAMS
.PP
.BR insq ()
is MP-safe.
.BR insq ()
takes a write lock on the queue, so calling
.BR insq ()
while the queue is frozen with
.BR freezestr (9)
will result in single-party deadlock.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR rmvq (9),
.BR putq (9),
.BR putbq (9).
.\"
.\"
.SH BUGS
.PP
.BR insq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR insq ()
is source-level compatible with SVR 4.2 MP DDI/DKI,
.IR Solaris \(rg
and LiS
.[
LiS
.]
with the following exceptions:
.IP \(em \w'\(em\(em'u
.BR insq ()
passed a
.B NULL
or invalid
.IR q " or " nmp
pointer will have undefined results.  Under LiS, a
.B NULL
.IR q " or " nmp
pointer will return failure (0).
.IP \(em
.BR insq ()
does not modify
.IR q " or " nmp
when it returns failure (0).  Under LiS, failure (0) modifies the
.I nmp
message, freeing it with
.BR freemsg (9)
under some circumstances.  This is an LiS bug.  No passed in structures should
be modified on failure.
.IP ""
LiS incorrectly frees the message pointed to by
.I nmp
when the call to
.BR insq ()
fails due to a
.B NULL
queue pointer
.IR q ,
or when the queue pointer
.I q
does not point to a valid queue structure, or when the queue pointer
.I q
points to a queue that is closing or has processing turned off.
On the other hand, LiS does not free the message pointer pointed to by
.I nmp
when
.BR insq ()
fails because the insertion would mis-sequence the queue.  Because of this
bug, when
.BR insq ()
returns failure (0), it is difficult to determine whether the message
pointed to by
.I nmp
has been freed or not.
.IP \(em
.BR insq ()
will insert messages into a queue that has had
.BR qprocsoff (9)
called or which is closing
.RB ( qclose (9)
has been called for the queue).  Under LiS,
.BR insq ()
will return failure (0) in these cases and free the message pointed to by
.IR nmp .
LiS behaviour is incorrect for these cases.
.BR qprocsoff (9)
only affects the running of queue procedures and should not affect
.BR insq ().
.BR qclose (9)
may need to exchange messages with lower level queue pairs and manipulate
queues: making
.BR insq ()
return
.B NULL
during close is an LiS bug.
.IP \(em
.BR insq ()
will insert a message before another in the queue in any order: it is the
caller's responsibility to ensure proper ordering of the queue.
Under LiS,
.BR insq ()
will fail and return (0), not freeing
.IR nmp ,
if the insertion would misorder the queue.
.IP \(em
.IR UnixWare \(rg
.[
uw7spg
.]
and
.IR SUPER-UX \(rg
.[
suxspg
.]
require that a stream be frozen with
.BR freezestr (9)
for the duration of the call to
.BR insq ().
.PP
Symbol
.BR lis_insq ()
is provided for binary compatibility with LiS.  See
.BR lisbcm (9).
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR insq ()
first appeared in SVR 3.
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
