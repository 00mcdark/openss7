'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: bcanput.9.man,v 0.9.2.24 2005/11/29 10:46:29 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/11/29 10:46:29 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH BCANPUT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B bcanput
\- test flow control on a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int bcanput(queue_t *" q ", int " band );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the queue from which to begin testing for flow control.
.TP
.I band
the priority band within which to test for flow control.
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.\".PP
.\".BR bcanput ()
.\"provides modules and drivers with a way to test flow control in the given priority band.  It
.\"returns
.\".B 1
.\"if a message of priority
.\".I pri
.\"can be placed on the queue.  It returns
.\".B 0
.\"if the priority band is flow controlled and sets the
.\".B QWANTW
.\"flag to zero band
.\".RB ( QB_WANTW
.\"to nonzero band).
.\".PP
.\"If the band does not yet exist on the queue in question,
.\".B 1
.\"is returned.
.\".PP
.\"The call
.\".B bcanput(q, 0)
.\"is equivalent to the call
.\".BR "canput(q)" .
.PP
.BR bcanput ()
checks whether the
Stream
is flow controlled starting at the specified queue,
.IR q ,
and for the specified 
.IR band .
Starting at
.IR q ,
and for
.IR band ,
.BR bcanput ()
looks for the next queue which has a
.IR qi_srvp (9)
procedure or which has no next queue (i.e. the
.I q->q_next
pointer is
.BR NULL ).
.PP
If this queue has the
.B QB_FULL
flag clear indicating that it is not full for the specified
.IR band ,
then
.BR bcanput ()
will return true (1).
.PP
If this queue has the
.B QB_FULL
flag set indicating that it is full for the specified
.IR band ,
then
.BR bcanput ()
will return false (0).
When
.BR bcanput ()
returns false (0), it also sets the
.B QB_WANTW
flag for that queue upon which
.BR bcanput ()
stopped, for the specified
.IR band ,
indicating that the
.I STREAMS
scheduler should back-enable
.IR qi_srvp (9)
procedures backward up the queues when the flow controlled
queue and
.I band
is no longer flow controlled (falls to its low water mark).
.\"
.\"
.SH USAGE
.PP
It is the responsibility of a
.I STREAMS
driver puting a banded (non-priority) data message
.RB ( M_PROTO "(9), " M_DATA (9))
to a message queue to check for flow control using
.BR bcanput ()
for the band associated with the message before placing a message on the queue
with
.IR qi_putp (9)
or
.BR putq (9).
.PP
.I STREAMS
modules have different responsibilities, see
.RI \(lq USAGE \(rq
under
.BR bcanputnext (9).
.\"
.\"
.SH RETURN
.PP
.BR bcanput ()
will return false (0) when the specified
.I STREAMS
message queue is flow
controlled for the specified band, and return true (1) when the specified
.I STREAMS
message queue is not flow controlled for the specified band.
.\"
.\"
.SH ERRORS
.PP
.BR bcanput ()
always succeeds.
.\"
.\"
.SH CONTEXT
.PP
.BR bcanput ()
can be called from any non-ISR context, including user context, module procedures, callouts,
callbacks, soft interrupts (tasklets and bottom halves), but excluding interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR bcanput ()
is MP-safe; unless the caller performs an unprotected pointer dereference.
That is,
.BR bcanputnext (9)
should always be called in preference to
.BI bcanput( q->q_next ).
.PP
It is possible, due to race conditions in a multiprocessor (MP) system, that
.BR bcanput ()
can be called for a queue and return true (1) and yet the
Stream
becomes flow controlled before a
call to
.BR put (9)
or
.BR putq (9).
The caller to
.BR put (9)
or
.BR putq (9)
is then in violation of flow-control rules; however, the extent of this violation is bounded.
.\"
.\"
.SH NOTICES
.PP
It is the responsibility of a
.I STREAMS
driver putting a banded
.I normal priority
message to a message queue to check for flow control using
.BR bcanput ()
before placing a message on the queue with
.BR put (9)
or
.BR putq (9).
.PP
.BR canputnext (9)
and
.BR bcanputnext (9)
should always be used instead of
.BI canput( q->q_next )
and
.BI bcanput( q->q_next )
on multiprocessor (MP) implementations.
.PP
.BR canput (9)
and
.BR canputnext (9)
are the equivalent of
.BR bcanput ()
and
.BR bcanputnext (9)
with a zero
.IR band :
and in fact can be implemented as such.
.\"
.\"
.SH IMPLEMENTATION
.PP
.B @PACKAGE_TITLE@
provides the additional feature that
.I band
can be specified as
.BR ANYBAND .
When
.I band
is
.BR ANYBAND ,
.BR bcanput ()
checks whether any band (other than band zero), is not flow controlled.  If a
band exists that is not flow controlled,
.BR bcanput ()
with
.B ANYBAND
returns one (1).
If all existing bands are flow controlled,
.BR bcanput ()
returns zero (0).
.PP
.BR bcanput ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR bcanput ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.\"
.\"
.SH EXAMPLES
.PP
.BR bcanput ()
is normally called before a call to
.BR putq (9)
as follows:
.sp
.nf
\fC\s-1\
     1  void
     2  example_putp(queue_t *q, mblk_t *mp)
     3  {
     4      priv_t p = (priv_t *) q->q_ptr;
     5      queue_t *uq = p->upper_queue;
     6  
     7      if (!q->q_count
     8          && (mp->b_datap->db_type >= QPCTL
     9              || bcanput(uq, mp->b_band))) {
    10          /* put to upper if we are empty and upper band is 
    11             not flow controlled */
    12          putq(uq, mp);
    13      } else {
    14          /* put to our own queue otherwise */
    15          putq(q, mp);
    16      }
    17  }
\s+1\fR
.fi
.PP
Above, the example uses
.BR bcanput ()
from the lower queue
.IR qi_putp (9)
procedure (in a multiplexing driver) to test the upper queue for flow
control.  If the upper queue is flow controlled, the message is placed on the lower queue.
Otherwise, if the lower queue is empty and the upper queue is not flow controlled, the example
places the message directly on the upper queue.
.PP
.BR bcanput ()
is typically called before a call to
.BR put (9)
in a driver interrupt service routine as follows:
.sp
.nf
\fC\s-1
     1  int
     2  example_putp(queue_t *q, mblk_t *mp)
     3  {
     4      if (bcanput(q, mp->b_band)) {
     5          putq(q, mp);
     6      } else {
     7          some_global_flag_dropping = 1;
     8          freemsg(mp);
     9      }
    10      return (0);
    11  }
    12  
    13  int
    14  example_isr_handler(queue_t *q, caddr_t buf, size_t len,
    15                      unsigned char band)
    16  {
    17      mblk_t *mp;
    18  
    19      if ((mp = allocb(len, BRPI_HI))) {
    20          mp->b_band = band;
    21          bcopy(buf, mp->b_wptr, len);
    22          mp->b_wptr += len;
    23          put(q, mp);
    24          return (1);
    25      }
    26      return (0);
    27  }
\s+1\fR
.fi
.PP
The above example is left as an exercise to the reader.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putq (9),
.BR canput (9),
.BR canputnext (9),
.BR bcanputnext (9),
.BR freezestr (9),
.BR noenable "(9), and
.BR enableok (9).
.\"
.\"
.SH COMPATIBILITY
.PP
.BR bcanput ()
is source-level compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and systems based on
.IR "SVR 4" ,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR AIX \(rg
.[
aixdoc
.]
indicates that if a
.BR qband (9)
structure does not exist for
.I band
that
.BR bcanput ()
returns true (1).
.IP \(em
.IR HP-UX \(rg
.[
hpuxspg
.]
lists
.BR bcanput ()
as a function that can only be passed a queue pointer in the queue pair within
a queue's procedure.
This may indicate subtle differences to the
.IR HP-UX \(rg
implementation.
.B @PACKAGE_TITLE@
currently has no such restriction; however, based on nuances in the implementation, it is wise not
to pass a queue pointer to
.BR bcanput ()
that does not belong to same
Stream
as the
Stream
from which the
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure is calling.
Also, although there is no current restriction, it is a bad idea to call
.BR bcanput ()
from a non-queue referenced callbacks or callouts, soft interrupt handlers (tasklets), or interrupt
service routines.
.IP \(em
.IR SUPER-UX \(rg
.[
suxdoc
.]
indicates that the
Stream
cannot be frozen when calling
.BR bcanput (9)
and that private locks cannot be held across the call.
.IP \(em
.BR bcanput ()
always succeeds.  Under
.IR LiS ,
.BR bcabput ()
will return zero (0 - flow controlled) if an internal error occurs, without
setting the
.BR QWANTW " or " QB_WANTW
flag for the queue or band.  This means that, although flow controlled, no
backenable procedure will be run.  This can lead to indefinite postponement of
a queue
.IR qi_srvp (9)
procedure under
.IR LiS .
.B @PACKAGE_TITLE@
.BR bcanput ()
does not have this problem.
.IP \(em
The declaration for
.BR bcanput ()
provides that
.I band
is of type
.BR int .
Under
.IR "SVR 4.2 DDI/DKI" ,
.[
usldk
.]
and other systems based on
.IR "SVR 4",
.I band
is
.BR "unsigned char" .
.IP \(em
Symbol
.BR lis_bcanput ()
and
.BR lis_bcanput_anyband ()
are provided for compatibility with
.IR LiS .
See
.BR liscompat (9).
.BR lis_bcanput ()
and
.BR lis_bcanput_anyband ()
simply call
.BR bcanput ()
directly.
.IP \(em
.BR bcanput ()
may be called on a
Stream
frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR bcanput ()
to be called on a
Stream
frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR bcanput ()
on a
Stream
frozen with
.BR freezestr (9).
.IP \(em
.IR SUPER-UX \(rg
documentation
.[
suxspg
.]
states that if the
Stream end
has no
.IR qi_srvp (9)
procedure that
.BR bcanput ()
will return (1).
This is incorrect behaviour to that described in the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
For example, the
Stream head
does not normally have a read
.IR qi_srvp (9)
procedure, but uses wakeups from the read side
.IR qi_putp (9)
procedure to schedule servicing of the queue.  It is still necessary for
.BR bcanput ()
to fail when the read queue passes its high water mark.
.IR SUPER-UX \(rg
will not fail in such a circumstance, making its behaviour inconsistent with other
.IR UNIX \(rg
impelemntations of
.IR STREAMS .
.IP ""
Portable
.I STREAMS
drivers and modules should not rely on the behaviour of
.BR bcanput ()
on drivers that have no write side
.IR qi_srvp (9)
procedure, but which enqueue messages on their write
queues (to be collected using
.BR getq (9)
outside the
.I STREAMS
framework).
Such drivers should provide a dummy
.IR qi_srvp (9)
procedure.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR bcanput ()
first appeared in
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
Earlier versions of
.I STREAMS
.RI (e.g. " SVR 3" )
.[
svr3spg
.]
did not have priority bands.
.\"
.\"
.[
$LIST$
.]
.TI
