'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: appq.9.man,v 0.9.2.23 2005/11/30 00:56:12 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/11/30 00:56:12 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH APPQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B appq
\- append one \fISTREAMS\fP message after another
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _LIS_SOURCE
.br
.B #include <sys/stream.h>
.HP
.BI "int appq(queue_t *" q ", mblk_t *" emp ", mblk_t *" nmp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
a pointer to a
.I STREAMS
message queue.
.PD 0
.TP
.I emp
a pointer to an existing message block on queue \fIq\fP.
.TP
.I nmp
a pointer to a new message block to append after \fIemp\fP on \fIq\fP.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS ,
implementation extension.
.\"
.\"
.SH DESCRIPTION
.PP
.BR appq ()
appends the
.I STREAMS
message
.I nmp
just after the message
.I emp
already on queue
.IR q .
If there is no message after
.I emp
in the queue
.IR q ,
or
.I emp
is
.BR NULL ,
this has the same effect as
calling
.BR putq (9)
with
.IR q " and " nmp .
.PP
.BR appq ()
performs all of the normal
.I STREAMS
scheduler functions associated with
.BR putq (9)
including enabling of the queue,
.IR q ,
when the first message or a priority message is placed on the queue.
If queue scheduling has been disabled with
.BR noenable (9),
only priority messages will result in the queue being scheduled.
.\"
.\"
.SS Message Queueing Priority
.PP
.I STREAMS
queues messages based on message queueing priority.  There are three priority classes for messages:
.PP
.TS
tab(:);
lllsss.
1.:\fIHigh Priority\fP:(\fBdb_type >= QPCTL\fP)
2.:\fIPriority Band\fP:(\fBdb_type < QPCTL && b_band > 0\fP)
3.:\fINormal\fP:(\fBdb_type < QPCTL && b_band == 0\fP)
.TE
.PP
.I STREAMS
only examines the message class and priority band of the first message block of a message.  If a
.I High Priority
message is passed to
.BR appq ()
with a non-zero
.I b_band
value,
.I b_band
is reset to zero
.RB ( 0 )
before placing the message on the queue.  If the message is passed to
.BR appq ()
with
.I b_band
value greater than the number of
.BR qband (9)
structures associated with the queue,
.BR appq ()
attempts to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.
(But, see
.RI \(lq COMPATIBILTY \(rq,
below.)
.PP
Messages must be placed in order in the queue.  If the message is a
.I High Priority
message, it must be placed on the queue with other
.I High Priority
messages and ahead of
.I Priority Band
and
.I Normal
messages.  If the message is a
.I Priority Band
message, it must be placed with other messages in the queue
band.
If the message is a
.I Normal
message, it must be placed with other
.I Normal
messages, after all other messages.
Attempts to insert a message out of order in the queue with
.BR appq ()
will cause
.BR appq ()
to fail.
.PP
Placing the first message for a queue band onto the queue can result in the allocation of a
.BR qband (9)
structure to provide accounting for the queue band.  Failure to allocate a
.BR qband (9)
structure can cause
.BR appq ()
to fail.  Failure can be avoided by ensuring that a
.BR qband (9)
structure exists for the band,
.IR mp->b_band ,
using
.BR strqget (9)
or
.BR strqset (9).
.\"
.\"
.SS "Flow Control"
.PP
If a
.I High Priority
message is placed onto the queue, the queue will always be enabled, as with
.BR qenable (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists.
This is true for
.BR appq (),
.BR insq (9),
.BR putq (9),
and
.BR putbq (9).
Because this is true, a
.I High Priority
message should never be placed back on a queue by the queue's
.IR qi_srvp (9)
procedure with
.BR putbq (9),
otherwise and indefinite loop could result.
.PP
.BR appq ()
is allowed to enable the queue
.RB ( QNOENB
is not set) if the message is a
.I Priority Band
message, or the
.B QWANTR
flag is set indicating that the
.IR qi_srvp (9)
procedure is ready to read the queue.
.PP
If a
.I Priority Band
message is placed onto an empty queue band, the queue will be enabled, as with
.BR enableq (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists and the
.B QNOENB
flag has not been set for the queue with
.BR noenable (9).
.PP
If a
.I Normal
message is placed onto an empty queue and the
.B QWANTR
flag is set for the queue, then the queue will be enabled, as with
.BR enableq (9);
that is, the queue's
.IR qi_srvp (9)
procedure will be scheduled if it exists and the
.B QNOENB
flag has not been set for the queue with
.BR noenable (9).
Another way of putting this is that
.BR appq ()
will enable the queue if the queue is not inhibited with
.BR noenable (9)
and one of the following conditions also holds true:
.IP \(bu \w'\(bu\(em'u
The module or driver has just been opened for the first time: that is, the queue is empty and has
always been empty.
.IP \(bu
.BR getq (9)
found no message queued on its last call and no message has been queued since.
.PP
When an ordinary message is enqueued by
.BR appq (),
it will cause the
.IR qi_srvp (9)
procedure to be scheduled only if the queue was previously empty, and a previous
.BR getq (9)
call returns
.B NULL
(that is, the
.B QWANTR
flag is set).  If there are messages on the queue,
.BR appq ()
presumes that the
.IR qi_srvp (9)
procedure is blocked by flow control and the procedure will be rescheduled by
.I STREAMS
when the block is removed.
.PP
As a general rule for
.BR appq (),
.BR insq (9),
.BR putq (9),
and
.BR putbq (9),
the queue is enabled whenever the message placed on the message queue becomes the
first message on the queue, unless the message is a normal priority message and the queue has been
disabled with
.BR noenable (9),
or the message was placed with
.BR putbq (9).
.PP
.BR appq ()
only looks at the priority band of the first message block.  If a high priority message is passed to
.BR appq ()
with a non-zero
.I b_band
value,
.I b_band
is reset to zero
.RB ( 0 )
before placing the messge on the queue.  If the message is passed to
.BR appq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue,
.BR appq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.
.PP
The above rules apply to
.BR appq (),
.BR insq (9),
.BR putq (9),
.BR putbq (9).
.PP
.BR appq ()
will not schedule a queue if
.BR noenable (9)
has been previously called for this queue.
.BR noenable ()
instructs
.BR appq ()
to enqueue the message when called by this queue, but not to schedule the
.IR qi_srvp (9)
procedure.
.BR noenable (9)
doesnot prevent the queue from being scheduled by a flow control back-enable.  The inverse of
.BR noenable (9)
is
.BR enableok (9).
.\"
.\"
.SH USAGE
.PP
.BR appq ()
is an
.IR LiS -specific
function that should not be called by portable
.I STREAMS
modules and drivers.
Instead, the module or drivers should use the DDI/DKI defined
.BR insq (9).
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR appq ()
returns true (1) and the message pointed to by
.I mp
has been appended into the queue.
.PP
Upon failure,
.BR appq ()
returns false (0) and the message pointed to by
.I mp
remains unaltered.
.\"
.\"
.SH ERRORS
.PP
.BR appq ()
fails silently if
.I nmp
is associated with a non-existent queue band and a queue band structure could not be
allocated.  This error can be avoided by assuring that a queue band structure
exists with
.BR strqset (9)
before the call to
.BR appq ()
is made with a banded
.IR nmp .
.\"
.\"
.SH CONTEXT
.PP
.BR appq ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts, and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR appq ()
is MP-safe; however, the caller must ensure exclusive access to the passed in
messages.
On uniprocessor systems it may be sufficient to block interrupts to ensure
exclusive access to
.IR q .
.PP
Ensuring exclusive access to the passed in message,
.IR emp ,
is difficult on SMP systems, because 
.BR putq "(9), " putbq (9) " and " insq (9)
can change
.I emp->b_next
and
.BR getq "(9), " flushq "(9), " flushband "(9) and " rmvq (9)
can change
.IR emp ,
(e.g. remove it from the queue).
.PP
Exclusive access to the passed in queue on both UP and SMP systems can be
ensured most easily by freezing the stream associated with
.I q
using
.BR freezestr (9).
However, it is also possible to ensure exclusive access with
.BR qwriter (9),
.BR streams_put (9),
or with appropriate synchronization boundaries
.RB ( STR_PERQUEUE " or " D_MTPERQ ).
.PP
This is similar to the synchronization necessary for use of
.BR insq (9)
and
.BR rmvq (9).
.PP
.BR appq ()
protects dereferencing of the
.I emp->b_next
pointer with the queue write lock, making it safe to be called concurrent with
.BR putq (9),
.BR putbq (9),
.BR insq (9),
.BR getq (9),
.BR flushq (9),
.BR flushband (9),
.BR rmvq (9)
or a concurrent call to
.BR appq ().
.\"
.\"
.SH NOTICES
.PP
.BR appq ()
is a
.IR LiS -specific
function:
.B _LIS_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.B Linux Fast-STREAMS
must also have been compiled with
.B CONFIG_STREAMS_COMPAT_LIS
or
.B CONFIG_STREAMS_COMPAT_LIS_MODULE
defined.
.PP
.BR appq ()
called with an existing message pointer,
.IR emp ,
argument that is not on the queue,
.IR q ,
will panic or destabilize the kernel.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR flushband (9),
.BR flushq (9),
.BR freezestr (9),
.BR getq (9), 
.BR insq (9),
.BR noenable (9),
.BR putbq (9),
.BR putq (9),
.BR putq (9), 
.BR qwriter (9),
.BR rmvq (9),
.BR streams_put (9),
.BR strqset (9).
.\"
.\"
.SH COMPATIBILITY
.PP
.BR appq ()
is compatible with
.I LiS
with the following portability considerations:
.IP \(em \w'\(em\(em'u
When a banded message (a priority message, with a non-zero
.IR b_band )
is placed on a queue with
.BR putq (9),
.BR putbq (9),
.BR insq (9),
or
.BR appq (),
and a
.BR qband (9)
structure does not exist for the band corresponding to
.IR b_band ,
.BR appq ()
tries to allocate
.BR qband (9)
structures for all non-existent bands up to and including the band of the message
and places the resulting
.BR qband (9)
structures into a reverse sorted
.I q_bandp
list on the
.BR queue (9).
.I q_nband
is adjusted accordingly and always reflects the highest allocated band.
.IP ""
This is consistent with the description in the
.IR "SVR 4 STREAMS Programmer's Guide" ,
which states:
\(lqIf a mesages is passed to
.BR appq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue [member
.I q_nband
in the
.BR queue (9)
structure],
.BR appq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.\(rq
.[
svr4spg
.]
.IP ""
.IR Solaris \(rg
allocates
.BR qband (9)
structures up to an including
.IR b_band ,
and maintains the
.I q_nband
member of the
.BR queue (9)
structure.
It is safe to assume that other
.IR UNIX \(rg
implementations based on
.I SVR 4
follow
.I SVR 4
as does
.IR Solaris \(rg.
.IP ""
.I LiS
allocates
.BR qband (9)
structures on demand, links them in a sparse array,
and will also reuse
.BR qband (9)
structures that were previously allocated for bands that are currently empty.  This is not a good
approach because user established band high- and low-water marks will be reset to those of the
.BR queue (9)
structure when a subsequent message is place on the reused band.
Also, it is difficult to predict when
.BR appq (),
.BR insq (9),
.BR putq (9),
.BR putbq (9),
will fail as a result of failure to allocate a
.BR qband (9)
structure.
This
.I LiS
bug is not perpetuated in
.BR "@PACKAGE_TITLE@" .
.IP ""
Portable
.I STREAMS
modules and drivers can rely on intermediate band strutures being allocated
when a priority message is placed on a queue using
.BR appq (),
and may examine the
.I q_nband
member of the
.BR queue (9)
structure to determine whether a
.BR qband (9)
exists for a given band number.
.IP ""
Portable
.I STREAMS
drivers and modules will use
.B "@PACKAGE_TITLE@"
.[
@PACKAGE_TITLE@
.]
instead of
.IR LiS .
.[
lis
.]
.IP \(em
.BR appq ()
orders the
.BR qband (9)
structures in the list pointed to by the
.I q_bandp
member of the
.BR queue (9)
structure from highest band number to lowest band number.  This ensures that
higher priority
.BR qband (9)
structures can be accessed faster than lower priority
.BR qband (9)
structures.
.IR Solaris \(rg
.[
soldoc
.]
lists
.BR qband (9)
structures from lowest to highest priority, without gaps (see consideration of allocation above).
.I LiS
.[
lis
.]
lists
.BR qband (9)
structures from most recently allocated/reused to least recently allocated/reused.
Neither the
.IR Solaris \(rg
nor the
.I LiS
approach is very efficient.
.IP ""
Portable
.I STREAMS
modules and drivers will not depend on the ordering of
.BR qband (9)
structures within the
.I q_bandp
list on the
.BR queue (9)
structure, and, will not access
.BR qband (9)
or
.BR queue (9)
members directly, but will use the portable
.BR strqget (9)
and
.BR strqset (9)
utilities instead.
.IP \(em
.BR appq ()
is an
.IR LiS -specific
function that is also provided by
.BR "Linux Fast-STREAMS" .
.IP ""
Portable
.I STREAMS
drivers and modules should not call this function.
.IP \(em
.BR appq ()
called with a
.B NULL
.IR q " or " nmp
argument will panic or destabilize the kernel.
.IP ""
.BR appq ()
called with a
.B NULL
.I emp
argument will have the same effect as
.BI putq( q ", " nmp )\fR.
Under
.IR LiS ,
.BR appq ()
called with a
.B NULL
.IR q ", " emp " or " nmp
argument, will fail silently (losing a reference to
.IR nmp ).
.IP ""
Portable
.I STREAMS
drivers and modules should not pass invalid arguments.
.IP \(em
.BR appq ()
called with a
.RB non- NULL
.I q
pointer that does not point to a valid queue structure will result in
destabilization of the kernel.
.IP ""
Under
.IR LiS ,
.BR appq ()
called with a
.RB non- NULL
.I q
pointer that does not point to a valid queue structure will result in the
silent freeing of the
.I emp
message block.
.IP ""
Portable
.I STREAMS
drivers and modules should not pass invalid arguments.
.IP \(em
.BR appq ()
called with the the
.B QNOENB
flag set (see
.BR noenable (9))
will schedule the queue
.IR qi_srvp (9)
procedure if a priority message is appended.
.IP ""
.I LiS
does not schedule the queue
.IR qi_srvp (9)
procedure when a priority message is
appended to the queue.
.IP ""
Portable
.I STREAMS
drivers and modules should not rely upon the queue
.IR qi_srvp (9)
procedure not being
scheduled with a priority message is appended.
.IP \(em
.BR appq ()
protects dereferencing of the
.I emp->b_next
pointer with the queue write lock, making it safe to be called concurrent
with
.BR putq (9).
.IP ""
Under
.IR LiS ,
.BR appq ()
does not protect dereferencing of the
.I emp->b_next
pointer with the queue spin lock making it unsafe to be called concurrent
with
.BR putq (9).
.IP \(em
.BR appq ()
cannot be called from an interrupt service routine.
.IP ""
.B @PACKAGE_TITLE@
does not permit
.BR appq ()
to be called from an interrupt service routine context to remove the need for suppressing
local interrupts throughout the
.I STREAMS
executive.  The only queue procedure that
.B @PACKAGE_TITLE@
permits to be called from an interrupt service routine context is
.BR put (9),
and that function defers until the next
.BR runqueues (9)
pass.
.IP ""
Portable
.I STREAMS
modules and drivers will not call
.BR appq ()
from any context outside a
.I STREAMS
queue procedure or callback function.  At the Stream end (Stream head or driver), from a context
other than a
.I STREAMS
coroutine, only
.BR put (9)
will be used by a portable
.I STREAMS
driver or module.
.IP \(em
Symbol
.BR lis_appq ()
is provided for compatibility with
.IR LiS .
.BR lis_appq ()
simply calls
.BR appq ()
directly.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for more compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.BR LfS
.[
LfS
.]
and
.IR LiS
.[
LiS
.]
source code.
.\"
.\"
.SH HISTORY
.PP
.BR appq ()
first appeared in
.IR LiS .
.PP
Before OpenSS7 release
.BR LIS-2.16.18-17 ,
.BR appq ()
returned
.BR void .
As of OpenSS7 release
.BR LIS-2.16.18-17 ,
.BR appq ()
returns
.BR int .
.\"
.\"
.[
$LIST$
.]
.TI
