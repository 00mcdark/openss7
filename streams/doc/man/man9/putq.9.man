'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: putq.9.man,v 0.9.2.17 2005/09/17 00:45:21 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/09/17 00:45:21 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH PUTQ 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B putq
\- put a message on a \fISTREAMS\fR message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int putq(queue_t *" q ", mblk_t *" mp );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue on which the place the message.
.PD 0
.TP
.I mp
the message to place on the queue.
.PD
.\"
.\"
.SH DESCRIPTION
.PP
.BR putq ()
places the message pointed to by
.I mp
on the queue
.I q
without invoking the queue's put procedure.
.PP
After placing the message on queue
.IR q ,
.BR putq ()
adjusts the queue's flags and byte counts appropriately and schedules the
queue service procedure when necessary.
.PP
.BR putq ()
queues messages based on message queueing priority.  There are three priority classes for messages:
.PP
.TS
tab(:);
lllsss.
1.:\fIHigh Priority\fP:(\fBdb_type >= QPCTL\fP)
2.:\fIPriority\fP:(\fBdb_type < QPCTL && b_band > 0\fP)
3.:\fINormal\fP:(\fBdb_type < QPCTL && b_band == 0\fP)
.TE
.PP
.BR putq ()
only examines the message class and priority band of the first message block of a message.  If a
.I High Priority
message is passed to
.BR putq ()
with a non-zero
.I b_band
value,
.I b_band
is reset to zero
.RB ( 0 )
before placing the message on the queue.  If the message is passed to
.BR putq ()
with
.I b_band
value greater than the number of
.BR qband (9)
structures associated with the queue,
.BR putq ()
attempts to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.
(But, see
.RI \(lq COMPATIBILTY \(rq,
below.)
.PP
The message will always be placed in order in the queue.  If the message is a
.I High Priority
message, it will be placed on the queue immediately following other
.I High Priority
messages and ahead of
.I Priority
and
.I Normal
messages.  If the message is a
.I Priority
message, it is placed after other messages in the queue
band.
If the message is a
.I Normal
message, it is place after all other messages.
.PP
Placing the first message for a queue band onto the queue can result in the allocation of a
.BR qband (9)
structure to provide accounting for the queue band.  Failure to allocate a
.BR qband (9)
structure can cause
.BR putq (9)
to fail.  Failure can be avoided by ensuring that a
.BR qband (9)
structure exists for the band,
.IR mp->b_band ,
using
.BR strqget (9)
or
.BR strqset (9).
.\"
.\"
.SS "Flow Control"
.PP
If a
.I High Priority
message is placed onto the queue, the queue will always be enabled, as with
.BR qenable (9);
that is, the queue's service procedure will be scheduled if it exists.
This is also true for
.BR insq (9)
and
.BR putbq (9).
Because this is true, a
.I High Priority
message should never be placed back on a queue by the queue's
.B service
procedure with
.BR putbq (9),
otherwise and infinite loop could result.
.PP
.BR putq ()
is allowed to enable the queue
.RB ( QNOENB
is not set) if the message is a
.I Priority
message, or the
.B QWANTR
flag is set indicating that the
.B service
procedure is reary to read the queue.
.PP
If a
.I Normal
message is placed onto an empty queue and the
.B QWANTR
flag is set for the queue, then the queue will be enabled, as with
.BR enableq (9);
that is, the queue's service procedure will be scheduled if it exists and the
.B QNOENB
flag has not been set for the queue with
.BR noenable (9).
Another way of putting this is that
.BR putq ()
will enable the queue if the queue is not inhibited with
.BR noenable (9)
and one of the following conditions also holds true:
.IP \(bu \w'\(bu\(em'u
The module or driver has just been opened for the first time: that is, the queue is empty and has
always been empty.
.IP \(bu
.BR getq (9)
found no message queued on its last call and no message has been queued since.
.PP
When an ordinary message is enqueued by
.BR putq (),
.BR putq ()
will cause the
.B service
procedure to be scheduled only if the queue was previously empty, and a previous
.BR getq (9)
call returns
.B NULL
(that is, the
.B QWANTR
flag is set).  If there are messages on the queue,
.BR putq ()
presumes that the
.B service
procedure is blocked by flow control and the procedure will be rescheduled by
.I STREAMS
when the block is removed.
.PP
.BR putq ()
only looks at the priority band of the first message block.  If a high priority message is passed to
.BR putq ()
with a non-zero
.I b_band
value,
.I b_band
is reset to zero
.RB ( 0 )
before placing the messge on the queue.  If the message is passed to
.BR putq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue,
.BR putq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.
.PP
The above rules also apply to
.BR putbq (9)
and
.BR insq (9).
.PP
.BR putq ()
will not schedule a queue if
.BR noenable (9)
has been previously called for this queue.
.BR noenable ()
instructs
.BR putq ()
to enqueue the message when called by this queue, but not to schedule the
.B service
procedure.
.BR noenable (9)
doesnot prevent the queue from being scheduled by a flow control back-enable.  The inverse of
.BR noenable (9)
is
.BR enableok (9).
.\"
.\"
.SH USAGE
.PP
.BR putq ()
is intended to be used from the
.B put
procedure in the same queue in which the message will be queued.  A module should not call
.BR putq ()
directly to pass messages to a neighboring module.
.BR put ()
may be used as the
.I qi_putp
.b put
procedure value in either or both of a module's
.BR qinit (9)
structures.  This effectively bypasses any
.B put
procedure processing and uses only the module's
.B service
procedure(s).
.PP
.BR putq ()
should not be called from outside the
.I STREAMS
framework.  Drivers that need to put messages to their own queues from outside the
.I STREAMS
framework (asyncrhonously) must use
.BR put (9)
instead.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR putq ()
returns true (1) and places the message pointed to by
.I mp
on the queue pointed to by
.IR q .
Upon failure,
.BR putq ()
returns false (0) and does not alter the passed in queue or message.
.\"
.\"
.SH ERRORS
.PP
When
.BR putq ()
fails, it returns false (0).
.BR putq ()
only fails when a
.BR qband (9)
structure could not be allocated for a banded message arriving at a first use
empty band.
.BR putq ()
always succeeds for high priority and normal band zero (0) messages.
.\"
.\"
.SH CONTEXT
.PP
.BR putq ()
can be called from any non-ISR context, including user context, module procedures, callouts,
callbacks, soft interrupts (tasklets, bottom halves), but excluding interrupt service routines.
.PP
Interrupt service routines are excluded to avoid suppressing local interrupts, and greatly
reduce suppressing local bottom halves, during
.I STREAMS
processing.
.\"
.\"
.SH MP-STREAMS
.PP
.BR putq ()
is MP-safe.
.PP
.BR putq ()
called on a queue frozen by
.BR freezestr (9)
will result in single-party deadlock.
.\"
.\"
.SH NOTICES
.PP
It can be guaranteed that
.BR putq ()
will always succeed, even for banded messages, by calling
.BR strqget (9)
or
.BR strqset (9)
to set the high and low water marks and packet sizes for all bands used by the
driver or module.
.PP
When
.BR putq ()
fails and returns zero (0), it is the callers responsibility to address the
disposition of the passed in message,
.IR mp .
A typical response would be to free the message using
.BR freemsg (9).
Because the caller is responsible for the message upon failure, the return value from
.BR putq ()
should alway be examined.
Portable
.I STREAMS
modules and drivers will always examine the return value from
.BR putq ()
and take responsibility for the passed in message if
.BR putq ()
returns failure.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR qenable (9),
.BR enableq (9),
.BR noenable (9),
.BR qband (9),
.BR strqget (9),
.BR strqset (9),
.BR freezestr (9),
.BR insq (9),
.BR putbq (9),
.BR getq (9),
.BR rmvq (9).
.\"
.\"
.SH BUGS
.PP
.BR putq ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR putq ()
is compatible with 
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4" ,
.[
svr4dk
.]
with the following porting considerations:
.IP \(em \w'\(em\(em'u
When a banded message (a priority message, with a non-zero
.IR b_band )
is placed on a queue with
.BR putq (),
and a
.BR qband (9)
structure does not exist for the band corresponding to
.IR b_band ,
.BR putq ()
allocates the required
.BR qband (9)
structure and performs a reverse sorted insert into the
.I q_qbandp
list on the
.BR queue (9).
.IP ""
This is not consistent with the description in the
.IR "SVR 4 STREAMS Programmer's Guide" ,
which states:
\(lqIf a mesages is passed to
.BR putq ()
with a
.I b_band
value that is greater than the number of
.BR qband (9)
structures associated with the queue [member
.I q_nband
in the
.BR queue (9)
structure],
.BR putq ()
tries to allocate a new
.BR qband (9)
structure for each band up to and including the band of the message.\(rq
.[
svr4spg
.]
.IP ""
.IR Solaris \(rg
allocates
.BR qband (9)
structures up to an including
.IR b_band ,
and maintains the
.I q_nband
member of the
.BR queue (9)
structure.
It is safe to assume that other
.IR UNIX \(rg
implementations based on
.I SVR 4
follow
.I SVR 4
as does
.IR Solaris \(rg.
.IP ""
.I LiS
allocates
.BR qband (9)
structures on demand in a fashion similar to
.BR "@PACKAGE_TITLE@" ,
but will also reuse
.BR qband (9)
structures that were previously allocated for bands that are currently empty.  This is not a good
approach because user established band high- and low-water marks will be reset to those of the
.BR queue (9)
structure when a subsequent message is place on the reused band.  This
.I LiS
bug is not perpetuated in
.BR "@PACKAGE_TITLE@" .
.IP ""
Portable
.I STREAMS
modules and drivers will not rely on the fact that intermediate band strutures will be allocated
when a priority message is placed on a queue using
.BR putq (),
and will not attempt to examine the
.I q_nband
member of the
.BR queue (9)
structure.
.IP \(em
.BR putq ()
orders the
.BR qband (9)
structures in the list pointed to by the
.I q_bandp
member of the
.BR queue (9)
structure from highest band number to lowest band number.  This ensures that, during non-exhaustive
linear searches, higher priority
.BR qband (9)
structures are located faster than lower priority
.BR qband (9)
structures.
.IR Solaris \(rg
.[
soldoc
.]
lists
.BR qband (9)
structures from lowest to highest priority, without gaps (see consideration of allocation above).
.I LiS
.[
lis
.]
lists
.BR qband (9)
structures from most recently allocated/reused to least recently allocated/reused.
Neither the
.IR Solaris \(rg
nor the
.I LiS
approach is very efficient.
.IP ""
Portable
.I STREAMS
modules and drivers will not depend on the ordering of
.BR qband (9)
structures within the
.I q_qbandp
list on the
.BR queue (9)
structure, and, will not access
.BR qband (9)
or
.BR queue (9)
members directly, but will use the more portable
.BR strqget (9)
and
.BR strqset (9)
utilities instead.
.IP \(em
.BR putq ()
is not bug for bug compatible with 
.IR LiS .
.IP ""
Versions of
.I LiS
previous to
.I OpenSS7 Release LiS-2.16.18-17
automatically freed the message on failure.
Versions of
.I LiS
subsequent to
.I OpenSS7 Release LiS-2.16.18-16
do not free the message on failure in accordance with
.I SVR 4.2
and other implementation documentation.
The
.I LiS
implementation of
.BR putq ()
stil has bugs related to
.BR qprocsoff (9)
handling in that it fails while
.BR qprocsoff (9)
is in effect or if the stream is closing.
.IP ""
Portable
.I STREAMS
modules and drivers will not use releases of
.I LiS
prior to
.IR "OpenSS7 Release LiS-2.16.18-17" .
.IP \(em
.BR putq ()
may be called on a stream frozen with
.BR freezestr (9).
.IP ""
.IR Solaris \(rg,
.IR SUPER-UX \(rg
and
.IR UnixWare \(rg
do not permit
.BR putq ()
to be called on a stream frozen with
.BR freezestr (9).
.[
solspg
.]
.[
suxspg
.]
.[
uw7spg
.]
(But strangely, code inspection reveals that
.IR OpenSolaris \(rg
permits
.BR putq ()
and
.BR getq (9)
to be called on a stream frozen with
.BR freezestr (9).)
.IP ""
Portable
.I STREAMS
drivers and modules should not call
.BR putq ()
on a stream frozen with
.BR freezestr (9).
.IP \(em
.BR putq ()
cannot be called from an interrupt service routine (hard irq).
.IP ""
.B @PACKAGE_TITLE@
does not permit
.BR putq ()
to be called from an interrupt service routine (hard irq) context to remove the need for suppressing
local interrupts, and greatly reducing the need to suppres local bottom halves, throughout the
.I STREAMS
executive.  The only queue utilities that
.B @PACKAGE_TITLE@
permits to be called from an interrupt service routine (hard irq) context are
.BR qwriter (9),
.BR streams_put (9),
.BR mp_become_writer (9)
and
.BR put (9),
and these functions defer until the next
.BR runqueues (9)
pass.
.IP ""
Portable
.I STREAMS
modules and drivers will not call
.BR putq ()
from any context outside a
.I STREAMS
queue procedure or callback function.  At the Stream end (Stream head or driver), from a context
other than a
.I STREAMS
coroutine, only
.BR put (9)
will be used by a portable
.I STREAMS
driver or module.
.IP \(em
Symbol
.BR lis_putq ()
is provided for compatibility with
.IR LiS .
See
.BR liscompat (9).
.BR lis_putq ()
simply calls
.BR putq ()
directly.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR putq ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR putq ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
