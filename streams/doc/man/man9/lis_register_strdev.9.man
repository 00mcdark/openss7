'\" rtp
.\" -*- nroff -*- vim: ft=nroff
.\"
.\" @(#) $Id: lis_register_strdev.9.man,v 0.9.2.1 2004/03/01 02:44:10 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/03/01 02:44:10 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH LIS_REGISTER_STRDEV 9 "$Date: 2004/03/01 02:44:10 $" "$Name:  $" "Linux Fast-STREAMS DDI/DKI"
.\"
.\"
.SH NAME
.B lis_register_strdev
\- register a \fISTREAMS\fR device ala \fBLiS\fP
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _LIS_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/strconf.h>
.HP
.BI "int lis_register_strdev(major_t " major ", struct streamtab *" strtab ", int " nminor ", const char *" name );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I major
major deivce number to register.
.TP
.I strtab
pointer to a
.BR "struct streamtab" (9)
structure to register.
.TP
.I nminor
the number of minor device numbers to register (ignored).
.TP
.I name
the name of the device.
.\"
.\"
.SH DESCRIPTION
.PP
.BR lis_register_strdev ()
allocates a major device number and
registers a new
.I STREAMS
device with the
.B Linux
kernel against that major device
number.
Once a
.I STREAMS
device is registered, opening a device with the registered major device number
will result in a call to the
.I STREAMS
driver's open routine.
.PP
.BR lis_register_strdev ()
is an LiS-specific function.
.[
LiS
.]
.I STREAMS
devices registered with
.BR lis_register_strdev ()
can be deregistered with
.BR lis_unregsiter_strdev (9).
.PP
.BR lis_register_strdev ()
registers the
.I STREAMS
device with the
.B streamtab
structure pointed to by
.I strtab
and the name pointed to by
.IR name .
.PP
When
.I major
is specified as zero (0),
.BR lis_register_strdev ()
will attempt to assign a major device number to the device.
.PP
When
.I major
is non-zero,
.BR lis_regsiter_strdev ()
will attempt to use the major device number specified by
.IR major .
.PP
.BR lis_register_strdev ()
uses the
.B Linux
kernel function
.BR register_chrdev (9)
to register the character special device.
.PP
.BR lis_register_strdev ()
ignores the
.I nminor
argument.  This argument used to allocate a range of minors in previous
versions, but is no longer used.
.SS "Linux Kernel Module Loading"
.PP
.B Linux
has the feature that if a character major device is unassigned and an attempt
is made to open a character device with the major device number, the
.B Linux
kernel will attempt to load the kernel module
\fB\)char-major-\fI\)XXX\fR\),
where
.I XXX
is the ascii major device number.
.PP
This is a feature of
.B Linux
and is not specific to
.B LiS\c
.
.[
LiS
.]
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR lis_register_strdev ()
returns a positive integer representing the major device number assigned to
the
.I STREAMS
device.
.PP
Upon failure,
.BR lis_register_strdev ()
returns a negative error number.
.\"
.\"
.SH ERRORS
.PP
When
.BR lis_regsister_strdev ()
fails it returns an appropriate negative error number as follows:
.TP
.RB [ EIO ]
The device major number specified by
.I major
could not be assigned; or, if
.I major
was zero, a new major device number could not be assigned.
.TP
.RB [ EINVAL ]
The
.B streamtab
pointer
.I strtab
is
.BR NULL .
.TP
.RB [ EBUSY ]
The specified major device number is already in use by another
.I STREAMS
character special device.
.\"
.\"
.SH CONTEXT
.PP
.BR lis_register_strdev ()
is intended to be called from a module's
.B __init
or
.BR module_init ()
procedures.  It is valid only in process context.
.\"
.\"
.SH MP-STREAMS
.PP
.BR lis_register_strdev ()
is MP-safe.  See
.BR register_strdev_major (9).
.\"
.\"
.SH NOTICES
.PP
.BR register_strdev_major (9)
is used to provide this
.BR LiS -specific
function.
See
.BR register_strdev_major (9).
.\"
.\"
.SH EXAMPLES
.PP
The following example demonstrates how 4 major device numbers could be
registered against a
.I STREAMS
driver:
.sp
.nf
\fC\s-2\
#define X_MAJOR 222
#define X_NMAJOR 4
#define X_NMINOR 255
#define X_DRV_NAME "example"

int x_initialized = 0;
ushort x_majors[X_NMAJOR] = { X_CMAJOR, };

void x_init(void)
{
    int err, mindex;
    for (mindex = 0; mindex < X_NMAJOR; mindex++) {
        if ((err =
             lis_register_strdev(x_majors[mindex], &x_info, X_NMINOR,
                                 X_DRV_NAME)) < 0) {
            if (!mindex) {
                cmn_err(CE_PANIC,
                        "%s: could not register 1'st major %d",
                        X_DRV_NAME, x_majors[mindex]);
                x_initialized = err;
                return;
            }
            cmn_err(CE_WARN, "%s: could not register %d'th major",
                    X_DRV_NAME, mindex + 1);
            x_majors[mindex] = 0;
        } else if (mindex)
            x_majors[mindex] = err;
    }
    x_initialized = 1;
    return;
}

void x_terminate(void)
{
    int err, mindex;
    for (mindex = 0; mindex < X_NMAJOR; mindex++) {
        if (x_majors[mindex]) {
            if ((err = lis_unregister_strdev(x_majors[mindex])))
                cmn_err(CE_PANIC, "%s: could not unregister major %d",
                        X_DRV_NAME, x_majors[mindex]);
            if (mindex)
                x_majors[mindex] = 0;
        }
    }
    return;
}
\s+2\fR
.fi
.PP
Where the example above is compiled into a
.B Linux
kernel module named
\fB\)streams-\fI\)x\fB\).o\fR\),
placing a line such as follows in the
.BR /etc/modules.conf " or " /etc/conf.modules
file will cause the
.B Linux
kernel to load the streams module on demand.
.sp
.nf
\fC\s-2\
alias char-major-222 streams-x  # demand load streams device x
\s+2\fR
.fi

.B 
.\"
.\"
.SH FILES
.PP
.B /etc/conf.modules
.br
.B /etc/modules.conf
.\"
.\"
.SH "SEE ALSO"
.PP
.BR lis_register_strmod (9),
.BR lis_unregister_strdev (9),
.BR lis_unregister_strmod (9),
.BR register_strdev_major (9),
.BR unregister_strdev_major (9),
.BR register_strmod (9),
.BR unregister_strmod (9).
.\"
.\"
.SH BUGS
.PP
.BR lis_register_strdev ()
has no known bugs.
.BR lis_register_strdev ()
is not bug-for-bug compatible with
.BR LiS .
.\"
.\"
.SH COMPATIBILITY
.PP
.BR lis_register_strdev ()
is an
.BR LiS -specific
function.
.BR lis_register_strdev ()
is compatible with
.BR LiS .
.[
lis
.]
.\"
.\"
.SH CONFORMANCE
.PP
.BR lis_register_strdev ()
is an
.BR LiS -specific
function.
.\"
.\"
.SH HISTORY
.PP
.BR lis_register_strdev ()
first appeared in
.BR LiS .
.\"
.\"
.[
$LIST$
.]
.TI
