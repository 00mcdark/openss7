'\" rtp
.\" -*- nroff -*- vim: ft=nroff noautoindent nocindent nosmartindent
.\"
.\" @(#) $Id: canput.9.man,v 0.9.2.18 2005/09/17 11:52:02 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2005/09/17 11:52:02 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH CANPUT 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B canput
\- test flow control on a \fISTREAMS\fP message queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int canput(queue_t *" q );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue to check for flow control.
.\"
.\"
.SH DESCRIPTION
.PP
.BR canput ()
checks whether the
.I Stream
is flow controlled starting at the specified queue,
.IR q .
Starting at
.IR q ,
.BR canput ()
looks for the next queue which has a service routine or which has no next queue (i.e. the
.I q->q_next
pointer is
.BR NULL ).
.PP
If this queue has the
.B QFULL
flag clear, indicating that the queue is not full, then
.BR canput ()
will return true (1).
.PP
If this queue has the
.B QFULL
flag set, indicating that the queue is full, then
.BR canput ()
will return false (0).
When
.BR canput ()
returns false (0), it also sets the
.B QWANTW
flag for that queue upon which
.BR canput ()
stopped, indicating that the
.I STREAMS
scheduler should back-enable service procedures backward up the queues when the flow controlled
queue is no longer flow controlled (falls to its low water mark).
.\"
.\"
.SH USAGE
.PP
It is the responsibility of all
.I STREAMS
drivers to properly check for flow control before passing a
normal (band 0) message (e.g.
.BR M_DATA (9)
or
.BR M_PROTO (9))
.I STREAMS
message on a
.IR Stream .
Each
.IR "Stream head" ,
.I Stream end
and multiplexing driver is responsible for checking flow control before
passing a message onto a
.I Stream
using
.BR put (9)
or
.BR putq (q).
Flow control is checked using one of
.BR canput (),
or
.BR bcanput (9).
.\"
.\"
.SH RETURN
.PP
.BR canput ()
returns false (0) when the specified
.I STREAMS
message queue is flow controlled
and returns true (1) when the specified
.I STREAMS
message queue is not flow
controlled.
.\"
.\"
.SH ERRORS
.PP
.BR canput ()
always succeeds for a valid
.IR q .
If
.I q
is invalid, the result is undefined.
.\"
.\"
.SH CONTEXT
.PP
.BR canput ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR canput ()
is MP-safe; unless the caller performs an unprotected pointer dereference.  That is,
.BR canputnext (9)
must always be called instead of
.BI canput( q->q_next )
on multiprocessor (MP) architecutres.
.PP
It is possible, due to race conditions on a multiprocessor (MP) system, that
.BR canput ()
can be called for a queue and return true (1) and yet the
.I Stream
becomes flow controlled before a
call to
.BR put (9)
or
.BR putq (9)
can execute.
The caller to
.BR put (9)
or
.BR putq (9)
is then in violation of flow-control rules; however, the extent of this violation is bounded.
.\"
.\"
.SH NOTICES
.PP
It is the responsibility of a
.I STREAMS
driver putting a band zero (0)
non-priority message to a message queue to check for flow control using
.BR canput ()
before placing a message on the queue with
.BR put (9)
or
.BR putq (9).
.PP
.BR canputnext (9)
and
.BR bcanputnext (9)
should always be used instead of
.BI canput( q->q_next )
and
.BI bcanput( q->q_next )
on multiprocessor (MP) implementations.
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR canput ()
uses atomic bit operations and does not require locking of the queue
structure.  Therefore,
.BR canput ()
can be called for a
.I q
that is frozen with
.BR freezestr (9).
.PP
.BR canput ()
and
.BR canputnext (9)
are the equivalent of
.BR bcanput (9)
and
.BR bcanputnext (9)
with a zero
.IR band :
and in fact can be implemented as such.
.\"
.\"
.SH EXAMPLES
.PP
.BR canput ()
is normally called before a call to
.BR putq (9)
as follows:
.sp
.nf
\fC\s-1\
void
example_putp(queue_t *q, mblk_t *mp)
{
	priv_t p = (priv_t *)q->q_ptr;
	queue_t *uq = p->upper_queue;
	if (!q->q_count && (mp->b_datap->db_type >= QPCTL
		            || canput(uq))) {
		/* put to upper if we are empty and
		   upper is not flow controlled */
		putq(uq, mp);
	} else {
		/* put to our own queue otherwise */
		putq(q, mp);
	}
}
\s+1\fR
.fi
.PP
Above, the example uses
.BR canput ()
from the lower queue put procedure (in a multiplexing driver) to test the upper queue for flow
control.  If the upper queue is flow controlled, the message is placed on the lower queue.
Otherwise, if the lower queue is empty and the upper queue is not flow controlled, the example
places the message directly on the upper queue.
.PP
.BR canput ()
is typically called before a call to
.BR put (9)
in a driver interrupt service routine as follows:
.sp
.nf
\fC\s-1
int
example_putp(queue_t *q, mblk_t *mp)
{
    if (canput(q)) {
        putq(q, mp);
    } else {
        some_global_flag_dropping = 1;
        freemsg(mp);
    }
    return (0);
}

int
example_isr_handler(queue_t *q, caddr_t buf, size_t len)
{
    mblk_t *mp;
    if ((mp = allocb(len, BRPI_HI))) {
        bcopy(buf, mp->b_wptr, len);
        mp->b_wptr += len;
        put(q, mp);
        return (1);
    }
    return (0);
}
\s+1\fR
.fi
.PP
The above example is left as an exercise to the reader.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR putq (9),
.BR canputnext (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR freezestr (9),
.BR noenable "(9) and
.BR enableok (9).
.\"
.\"
.SH BUGS
.PP
.BR canput ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR canput ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
and implementations based on
.IR "SVR 4.2" ,
.[
svr42
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR canput ()
called with a
.B NULL
or invalid
.I q
pointer will have undefined results and may crash or destabilize the kernel.
Under LiS, if
.BR canput ()
suffers an internal error,
.I q
is
.BR NULL ,
or points to a structure other than a
.B queue_t 
structure,
it will return false (0).
Portable
.I STREAMS
drivers and modules will not pass
.B NULL
or invalid arguments to
.I STREAMS
functions.
.IP \(em
Although a call to
.BI bcanput( q ", " 0 )
is functionally equivalent to
.BI canput( q ),
.BR canput ()
is implemented separately from
.BR bcanput ()
for speed.
LiS implements
.BI canput( q ),
.BI canputnext( q )
and
.BI bcanputnext( q ", " band )
with macros that call
.BI bcanput( q ", " band ).
.IP \(em
.BR canput ()
may be called on a
.I Stream
frozen with
.BR freezestr (9).
.IR "SVR 4.2 MP DDI/DKI" ,
.[
usldk
.]
.IR Solaris \(rg,
.[
solspg
.]
.IR SUPER-UX \(rg
.[
suxspg
.]
and
.IR UnixWare \(rg
.[
uw7spg
.]
do not permit
.BR canput ()
to be called on a
.I Stream
frozen with
.BR freezestr (9).
Portable
.I STREAMS
drivers and modules should not call
.BR canput ()
on a
.I Stream
frozen with
.BR freezestr (9).
.IP \(em
Symbol
.BR lis_canput ()
is provided for compatibility with LiS.  See
.BR liscompat (9).
.BR lis_canput ()
calls
.BR canput ()
directly.
.IP \(em
.IR SUPER-UX \(rg
documentation
.[
suxspg
.]
states that
.BR canput ()
will not search forward in the
.I Stream
and that
.I q
must have a
.B service
procedure.  This is inconsistent with the
.IR "SVR 4 SPG" .
.[
svr4spg
.]
Typically, however, only a driver
.RI ( "Stream end" )
will use
.BR canput (),
and then only to test its own queue.  If its own queue does not have a
.B service
procedure,
.BR canputnext (9)
is more appropriate.  Some efficiencies can be taken in using
.BR canput ()
from interrupt service routines if this stance is taken.
Strangely enough,
.IR SUPER-UX \(rg
does not document
.[
suxspg
.]
.BR bcanput (9)
in this fashion.
.IP ""
Portable
.I STREAMS
drivers and modules will only call
.BR canput ()
for testing a driver
.RI ( "Stream end" )
read queue that contains a
.B service
procedure.
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI,
.[
usldk
.]
.IR Solaris \(rg
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR canput ()
appeared as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR canput ()
first appeared in SVR 3.
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
