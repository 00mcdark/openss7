% -*- texinfo -*- vim: ft=texinfo noautoindent nocindent nosmartindent
% =========================================================================
%
% @(#) $Id: porting.texi,v 0.9.2.23 2007/06/22 00:18:46 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2007  OpenSS7 Corporation <www.openss7.com>
% Copyright (C) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2007/06/22 00:18:46 $ by $Author: brian $
%
% =========================================================================

\input texinfo
@setfilename porting.info
@include texi/args.texi
@set MANUAL_TITLE Linux Fast-STREAMS
@set MANUAL_TYPE Porting Guide
@settitle @value{MANUAL_TITLE}

@dircategory STREAMS
@direntry
* Porting: (porting).		STREAMS Porting Guide
@end direntry

@defindex op

@include texi/args.texi
@set MANUAL_TITLE Linux Fast-STREAMS
@set MANUAL_TYPE Porting Guide

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file provides the @value{MANUAL_TYPE} for @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, of the
@cite{@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
Release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2005  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Linux Fast-STREAMS
@set MANUAL_TYPE Porting Guide

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2005  OpenSS7 Corporation <@uref{http://www.openss7.com/}> @*
Copyright @copyright{} 1997-2000  Brian F. G. Bidulock <@email{bidulock@@openss7.org}> @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
This is texinfo edition @value{PACKAGE_RELEASE} of the @value{MANUAL_TITLE}
documentation, and is consistent with @value{PACKAGE_NAME} @value{PACKAGE_VERSION}.
This manual was developed under the @uref{http://www.openss7.org/, OpenSS7
Project} and was funded in part by
@uref{http://www.openss7.com/, OpenSS7 Corporation}.

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@noindent
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

@noindent
Permission is granted to copy and distribute translations of this manual into
another language, under the same conditions as for modified versions.

@vskip 0pt
@end titlepage
@page

@c Define an index of authors.
@defindex au

@defcodeindex mp
@include texi/macros.texi
@include texi/versions.texi

@ifnottex
@node Top
@top @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@unnumbered About This Manual
This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, of @cite{The
@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
release @value{PACKAGE_RELEASE} of the @value{PACKAGE_TITLE} package.
@end ifnottex

@menu
* Acknowledgements::
* Overview::
* Porting::
* Development::
* Copying::                     Copying information for this Software
* Documentation License::       Copying information for this Manual
* Indices::

 --- The Detailed Node Listing ---

Acknowledgements

* Sponsors::                    Sponsors of Linux Fast-STREAMS
* Contributors::                Contributors to Linux Fast-STREAMS

Overview

* Introduction::                An Introduction to Linux Fast-STREAMS
* Concepts::                    STREAMS Concepts

Porting

* Porting from SVR 3.2::
* Porting from SVR 4.2 MP::
* Porting from AIX 5L Version 5.1::
* Porting from HP-UX 11.0i v2::
* Porting from OSF/1 1.2/Digital UNIX::
* Porting from UnixWare 7.1.3 (OpenUnix 8)::
* Porting from Solaris 9/SunOS 5.9::
* Porting from SUPER-UX::
* Porting from UXP/V::
* Porting from Linux STREAMS (LiS) 2.18.4::
* Porting from Mac Open Transport::
* Porting from Mentat Portable STREAMS::

Development

* Portable STREAMS Drivers and Modules::
@end menu

@c --------------------------------------------------------------------------

@node Acknowledgements
@unnumbered Acknowledgements
@cindex credits

@include texi/funding.texi

@ignore
@menu
* Sponsors::                    Sponsors of Linux Fast-STREAMS
* Contributors::                Contributors to Linux Fast-STREAMS
@end menu

@node Sponsors
@unnumberedsec Sponsors of Linux Fast-STREAMS
@cindex sponsors

Funding for completion of Linux Fast-STREAMS was provided by:

OpenSS7 Corporation

Additional funding for The OpenSS7 Project was provided by:

@node Contributors
@unnumberedsec Contributors to Linux Fast-STREAMS
@cindex contributors

The primary contributor to Linux Fast-STREAMS is Brian F. G. Bidulock.

@node Overview
@chapter Overview of Linux Fast-STREAMS
@cindex overview
@menu
* Introduction::                An Introduction to Linux Fast-STREAMS
* Concepts::                    STREAMS Concepts
@end menu

This manual documents how to develop and port STREAMS drivers and modules for
Linux Fast-STREAMS.
@end ignore

@node Introduction
@section Introduction
@cpindex introduction

@node Concepts
@section Concepts
@cpindex concepts

@node Porting
@chapter Porting
@cindex porting

Although each of the manual pages of supported functions and structures
provides compatibility and porting information, this document attempts to
gather together pertinent information concerning porting from various UNIX
operating system supporting STREAMS.

The porting information is organized by the operating system from which
porting is being attempted.  Note that, aside from configuration details, any
system not listed here that is based on SVR 4.2 MP or on a another of the
implementations, should start with that implementation's portability
information.

Porting information is organized into sections as follows:

@menu
* Porting from SVR 3.2::
* Porting from SVR 4.2 MP::
* Porting from AIX 5L Version 5.1::
* Porting from HP-UX 11.0i v2::
* Porting from OSF/1 1.2/Digital UNIX::
* Porting from UnixWare 7.1.3 (OpenUnix 8)::
* Porting from Solaris 9/SunOS 5.9::
* Porting from SUPER-UX::
* Porting from UXP/V::
* Porting from Linux STREAMS (LiS) 2.18.4::
* Porting from Mac Open Transport::
* Porting from Mentat Portable STREAMS::
* Development::
@end menu

@section Base Functions
@cindex Base Functions

@cite{@value{PACKAGE_TITLE}} provides a complete set of base functions and utilities for
@dfn{STREAMS} as defined in the @cite{SVR 4 Programmer's Guide -- STREAMS}.  These are the base set
of functions with which the @dfn{STREAMS} module and driver writer is familiar.

@subsection Message Functions
@cindex message functions

@cite{@value{PACKAGE_TITLE}} performs stricter message block, data block and
buffer alignment than most @dfn{STREAMS} implementations to maintain maximum
compatibility with other implementations.  Message blocks, data blocks and data
buffers are always aligned at least to an SMP cache boundary, permitting DMA of
message blocks, data blocks and data buffers.  ISA DMA capability is not ensured
for message blocks or data blocks, however, external data buffers can be so
allocated with @cite{Linux} allocators and attached to a message and data buffer
with @manref{@b{esballoc}(9)}.

Data buffers of size less than the value @var{FASTBUF} are allocated of size
@var{FASTBUF} and are internal to the data block.  A @var{FASTBUF} is at least
64-bytes on 32-bit architectures and at least 128-bytes on 64-bit architectures.
Internal data buffers of size @var{FASTBUF} are aligned to a 64-byte boundary on
32-bit architecture and to a 128-byte boundary on 64-bit architectures.

Data buffers of larger than a @var{FASTBUF} are allocated using general purpose
@cite{Linux} allocators (i.e. @manref{@b{kmem_alloc}(9)}).  @cite{Linux} always
allocates a memory extent of a power of two in size that fits the requested
number of bytes and always aligns the memory extent to the memory boundary that
is the same power of two as the resulting size.  This is stricter in alignment
than the description of most @cite{UNIX} memory allocators.

@cite{@value{PACKAGE_TITLE}} also supports the @var{BPRI_WAITOK} priority to
@manpage{@b{allocb}(9)} that will allocate memory block, data block and data
buffer using @var{KM_SLEEP} and will block the calling process if either memory
block, data block or data buffer are not immediately available.

@subsubsection Compatibilty Functions

Following are the basic @dfn{STREAMS} message functions.  Most portability
issues concerning @dfn{STREAMS} message functions have to do with allocation,
alignment of the data buffer, priority of allocation, disposition of unused
message blocks, handling of @var{NULL} pointer arguments, buffer callback and
message free routine handling.

@ftable @manref

@item @b{adjmsg}(9)
Trim bytes from the front or back of a @cite{STREAMS} message.  Trimmed message blocks are not freed
but simply have their @var{b_wptr} set to their @var{b_rptr}.

@item @b{allocb}(9)
Allocate a @cite{STREAMS} message and data block.  This function also accepts the @var{BPRI_WAITOK}
flag which allocates all parts of the message 3-tuple using @var{KM_SLEEP} allocation.  Allocation
of less than @var{FASTBUF} bytes will allocate a data buffer of size @var{FASTBUF}.  @var{FASTBUF}
sized data buffers are internal to the data block, and message block, data block and data buffer
3-types are allocated as a unit for speed.  Data buffers are allocated on a memory boundary that is
the same as the next power of two sized buffer.

@item @b{bufcall}(9)
Install a buffer callback.  @cite{@value{PACKAGE_TITLE}} provides the additional assurance that the
callback routine will not be called until the caller returns from the calling function block.

@item @b{copyb}(9)
Copy a @cite{STREAMS} message block.  A @var{NULL} pointer passed as an argument will panic the
kernel.

@item @b{copymsg}(9)
Copy a @cite{STREAMS} message.  Performs a block-wise copy using @manpage{@b{copyb}(9)}.

@item @b{datamsg}(9)
Tests a @cite{STREAMS} message type for data.

@item @b{dupb}(9)
Duplicate a @cite{STREAMS} message block.  @cite{@value{PACKAGE_TITLE}} uses a global lock to
protect the @var{db_refs} member of the data block.

@item @b{dupmsg}(9)
Duplicate a @cite{STREAMS} message.  Performs a block-wise duplication using @manpage{@b{dupb}(9)}.

@item @b{esballoc}(9)
Allocate a @cite{STREAMS} message and data block with a caller supplied data buffer.  This is the
most portable method of allocating a data buffer that requires some particular alignment.  The
callback free routine is inherently unsafe when the function is provided by a module and modules are
permitted to unload.

@item @b{freeb}(9)
Frees a @cite{STREAMS} message block.

@item @b{freemsg}(9)
Frees a @cite{STREAMS} message.  Performs a block-wise free using @manpage{@b{freeb}(9)}.

@item @b{linkb}(9)
Link a message block to a @cite{STREAMS} message.  Panics if either argument is @var{NULL}.

@item @b{msgdsize}(9)
Calculate the size of the data in a @cite{STREAMS} message.  Accepts a @var{NULL} pointer, in which
case the function returns zero (@samp{0}).

@item @b{msgpullup}(9)
Pull up bytes in a @cite{STREAMS} message.  Might allocate a new message to satisfy the request.

@item @b{pcmsg}(9)
Test a data block message type for priority control.

@item @b{pullupmsg}(9)
Pull up the bytes in a @cite{STREAMS} message.  Does not allocate a new initial message block, but
may allocate a new initial data block and data buffer.  The pointers @samp{mp->b_wptr} and
@samp{mp->b_rptr} are potentially invalidated by the call.

@item @b{rmvb}(9)
Remove a message block from a @cite{STREAMS} message.  The message block must exist in the message.
Passing @var{NULL} pointers will panic the kernel.

@item @b{testb}(9)
Test if a @cite{STREAMS} message can be allocated.  Because the test is not atomic, when this
function returns true, a subsequent call to @manpage{@b{allocb}(9)} could still fail.

@item @b{unbufcall}(9)
Remove a @cite{STREAMS} buffer callback.  @cite{@value{PACKAGE_TITLE}} provides the @cite{SVR 4}
assurance that before the call returns the callback function will either have been cancelled or
execution of the callback will be complete.

@item @b{unlinkb}(9)
Unlink a message block from a @cite{STREAMS} message.

@end ftable

@subsection UP Queue Functions
@cindex UP queue functions

Single processor queue functions are those functions that existed in @cite{SVR
4} before multi-processor support was added in @cite{SVR 4.1 MP} and @cite{SVR
4.2}.  Most portability issues associated with these functions concern queue
@var{q_next} pointer dereferencing and freezing of Streams when directly
manipulating queues.  @cite{@value{PACKAGE_TITLE}} provides the added assurance
that @var{q_next} pointers can always be reliably dereferenced from within a
queue put, service, open, close or synchronized callback procedure.

@ftable @manref

@item @b{backq}(9)
Find the upstream or downstream queue.  @cite{@value{PACKAGE_TITLE}} protects
this pointer dereference when called from within a put, service, open, close or
callback procedure.

@item @b{bcanput}(9)
Test flow control on a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} follows @cite{SVR 4} semantics for queue enabling,
queue flags and back-enabling.

@item @b{canenable}(9)
Test whether a @cite{STREAMS} message queue can be scheduled.  This only effects
normal priority messages as per @cite{SVR 4} semantics.

@item @b{enableok}(9)
Allow a @cite{STREAMS} message queue to be scheduled.  This only effects normal
priority messages as per @cite{SVR 4} semantics.

@item @b{flushband}(9)
Flushes band @cite{STREAMS} messages from a message queue.
@cite{@value{PACKAGE_TITLE}} provides a mechanism that efficiently flushes large
numbers of messages from a queue: messages are unlinked from the queue and freed
later by the @dfn{STREAMS} scheduler.

@item @b{flushq}(9)
Flushes messages from a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} provides a mechanism that efficiently flushes large
numbers of messages from a queue: messages are unlinked from the queue and freed
later by the @dfn{STREAMS} scheduler.

@item @b{getq}(9)
Gets a message from a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} follows @cite{SVR 4} semantics for queue enabling,
queue flags and back-enabling.

@item @b{insq}(9)
Inserts a message into a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} recommends, but does not require, that the Stream
be first frozen by the caller with a call to
@manpage{@b{freezestr}(9)}.@footnote{It is possible that the @dfn{STREAMS}
module or driver writer can make such assurances with mechanisms other than
@manpage{@b{freezestr}(9)}.  See the @manref{@b{freezestr}(9)} manual page for
more information.}

@item @b{noenable}(9)
Disable a @cite{STREAMS} message queue from being scheduled.  This only effects
normal priority messages as per @cite{SVR 4} semantics.

@item @b{OTHERQ}(9)
Return the other queue of a @cite{STREAMS} queue pair.

@item @b{putbq}(9)
Put a message back on a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} follows @cite{SVR 4} semantics for queue enabling,
queue flags and back-enabling.

@item @b{putctl}(9)
Put a control message on a @cite{STREAMS} message queue.

@item @b{putctl1}(9)
Put a 1 byte control message on a @cite{STREAMS} message queue.

@item @b{putq}(9)
Put a message on a @cite{STREAMS} message queue.  @cite{@value{PACKAGE_TITLE}}
follows @cite{SVR 4} semantics for queue enabling, queue flags and back-enabling.

@item @b{qenable}(9)
Schedules a @cite{STREAMS} message queue service routine.

@item @b{qreply}(9)
Replies to a message from a @cite{STREAMS} message queue.

@item @b{qsize}(9)
Return the number of messages on a queue.

@item @b{RD}(9)
Return the read queue of a @cite{STREAMS} queue pair.  Although
@cite{@value{PACKAGE_TITLE}} accepts a read queue pointer as an argument, doing
so could panic some implementations.  The macro @manpage{@b{_RD}(9)} is also
provided that has this stricter behaviour.

@item @b{rmvq}(9)
Remove a message from a @cite{STREAMS} message queue.
@cite{@value{PACKAGE_TITLE}} recommends, but does not require, that the Stream
be first frozen by the caller with a call to
@manpage{@b{freezestr}(9)}.@footnote{It is possible that the @dfn{STREAMS}
module or driver writer can make such assurances with mechanisms other than
@manpage{@b{freezestr}(9)}.  See the @manref{@b{freezestr}(9)} manual page for
more information.}

@item @b{SAMESTR}(9)
Test for @cite{STREAMS} pipe or fifo.

@item @b{WR}(9)
Return the write queue of a @cite{STREAMS} queue pair.  Although
@cite{@value{PACKAGE_TITLE}} accepts a write queue pointer as an argument, doing
so could panic some implementations.  The macro @manpage{@b{_WR}(9)} is also
provided that has this stricter behaviour.

@end ftable

@subsection MP Queue Functions
@cindex MP queue functions

When multiprocessing support was added to @dfn{STREAMS} in @cite{SVR 4.1 MP} and
@cite{SVR 4.2}, it became necessary to enhance the @dfn{STREAMS} interface with
a number of additional functions intended on easing multiprocessor
implementation of @dfn{STREAMS}.  Most portability issues with functions in this
category involve queue pointer dereferencing, and queue manipulation.

@cite{@value{PACKAGE_TITLE}} provides stronger assurances for @var{q_next}
pointer dereferencing that are experienced on most other @dfn{STREAMS}
implementations, to maintain maximum compatibility.
@cite{@value{PACKAGE_TITLE}} acquires a Stream head plumbing read lock before
entering queue put, service, open, close and queue synchronous callback
procedures within the Stream.  This means that a function call such as
@samp{canput(q->q_next)} and @samp{canputnext(q)} have identical effect within
the synchronous procedure.

@ftable @manref

@item @b{bcanputnext}(9)
Test flow control on a message queue.
@cite{@value{PACKAGE_TITLE}} ensures the validity of @var{q_next} pointer
dereferencing for any queue in the queue pair for which a queue put, service,
open, close or synchronized callback procedure is the context of the
dereference.  For other @var{q_next} dereferences (e.g. at a Stream end or
across a multiplexing driver), the @manpage{@b{bcanputnext}(9)} utility should
be used instead of the @manpage{@b{bcanput}(9)} utility.  @samp{bcanputnext(q,
band)} should always be preferred over @samp{bcanput(q->q_next, band)}.

@item @b{canputnext}(9)
Test flow control on a message queue.
@cite{@value{PACKAGE_TITLE}} ensures the validity of @var{q_next} pointer
dereferencing for any queue in the queue pair for which a queue put, service,
open, close or synchronized callback procedure is the context of the
dereference.  For other @var{q_next} dereferences (e.g. at a Stream end or
across a multiplexing driver), the @manpage{@b{canputnext}(9)} utility should be
used instead of the @manpage{@b{canput}(9)} utility.  @samp{canputnext(q)}
should always be preferred over @samp{canput(q->q_next)}.

@item @b{freezestr}(9)
Freeze the state of a stream queue.
@manpage{@b{freezestr}(9)} was provided in the MP environment to behave in the
same fashion as @manpage{@b{spl}(9)} did in the UP environment.  In the UP
environment it was a simply matter to suppress interrupts before directly
manipulating queue structures and then re-enable interrupts after queue
manipulation was complete.

@item @b{put}(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.
In the UP environment, the queue at a Stream end could be called directly such
as @samp{(*q->q_qinfo->qi_putp)(q, mp)}.  In the MP environment, this would
circumvent the @cite{STREAMS} synchronization model and the @manpage{@b{put}(9)}
utility function should be used instead.

@item @b{putnext}(9)
Put a message on the downstream @cite{STREAMS} message queue.
In the UP environment, the adjacent queue put procedure could be called directly
such as @samp{(*q->q_next->q_qinfo->qi_putp)(q, mp)}.  In the MP environment,
this would circumvent the @cite{STREAMS} synchronization model and the
@manpage{@b{putnext}(9)} utility function should be used instead.
@samp{putnext(q, mp)} should always be used in preference to
@samp{put(q->q_next, mp)}.

@item @b{putnextctl1}(9)
Put a 1 byte control message on the downstream @cite{STREAMS} message queue.
A @var{q_next} pointer dereferencing version of @manpage{@b{putctl1}(9)}.
@samp{putnextctl1(q, type, param)} should always be used in preference to
@samp{putctl1(q->q_next, type, param)}.

@item @b{putnextctl}(9)
Put a control message on the downstream @cite{STREAMS} message queue.
A @var{q_next} pointer dereferencing version of @manpage{@b{putctl}(9)}.
@samp{putnextctl(q, type)} should always be used in preference to
@samp{putctl(q->q_next, type)}.

@item @b{qprocsoff}(9)
Disables @cite{STREAMS} message queue processing for multi-processing.

@item @b{qprocson}(9)
Enables @cite{STREAMS} message queue processing for multi-processing.
In the UP environment, it was possible to prepare the queue service and put
procedures for proper operation before returning and permitting the queue to run
put or service procedures.  In the MP environment, it became necessary to
indicate within the open procedure when queue procedures are to be permitted to
run before returning (or blocking).  @manpage{@b{qprocson}(9)} was added to
accomplish this.  @cite{SVR 4} says that this function must be cause before
returning from the queue open routine.  @cite{@value{PACKAGE_TITLE}} will invoke
the function implicitly if it is not called before the queue open routine
returns (but must still be called explicitly if the queue open routine blocks
awaiting an event on the queue).

@item @b{strqget}(9)
Gets information about a @cite{STREAMS} message queue.
In the UP environment, it was possible to directly manipulate streamtab or queue
structures after suppressing interrupts.  The @manpage{@b{strqget}(9)} utility
provides a mechanism for manipulating these structures in the MP environment.
Some implementations conflict on whether a Stream must first be frozen with
@manpage{@b{freezestr}(9)} or not.  @cite{@value{PACKAGE_TITLE}} recommends that
the Stream be frozen across a call to @manpage{@b{strqget}(9)}, but it is not
required.

@item @b{strqset}(9)
Sets attributes of a @cite{STREAMS} message queue.
In the UP environment, it was possible to directly manipulate streamtab or queue
structures after suppressing interrupts.  The @manpage{@b{strqset}(9)} utility
provides a mechanism for manipulating these structures in the MP environment.
Some implementations conflict on whether a Stream must first be frozen with
@manpage{@b{freezestr}(9)} or not.  @cite{@value{PACKAGE_TITLE}} recommends that
the Stream be frozen across a call to @manpage{@b{strqset}(9)}, but it is not
required.

@item @b{unfreezestr}(9)
Thaw the state of a stream queue.
@manpage{@b{unfreezestr}(9)} was provided in the MP environment to behave in the
same fashion as @manpage{@b{splx}(9)} did in the UP environment.

@end ftable

@subsection DDI/DKI Functions
@cindex DDI/DKI functions

Traditionally, @cite{SVR 4} provided some DDI/DKI (Device Driver Interface/Driver Kernel Interface)
functions for use by device drivers, including @dfn{STREAMS} device drivers.  Many of these function
have survived into kernel/driver interfaces today in one form or another.  Some implementations
(particularly @cite{Solaris@registeredsymbol{}}) provide a wide array of additional DDI/DKI functions.
Additional functions are supported by Compatibility Modules, and the base @cite{SVR 4} functions are
provided by the base @cite{@value{PACKAGE_TITLE}} package.

@ftable @manref

@item @b{kmem_alloc}(9)
Allocate kernel memory.

@item @b{kmem_free}(9)
Deallocates kernel memory.

@item @b{kmem_zalloc}(9)
Allocate and zero kernel memory.

@item @b{cmn_err}(9)
Print a kernel command error.

@item @b{bcopy}(9)
Copy byte strings.
This is the basic BSD-style function for copying bytes.  Traditionally @dfn{STREAMS} has used the
BSD-style function @manpage{@b{bcopy}(9)} instead of the SVR3-style
@manpage{@b{memcpy}(9)}.@footnote{Perhaps this has something to do with @dfn{STREAMS} first being
implemented on BSD 4.2.}

@item @b{bzero}(9)
Zero a byte string.
This is the basic BSD-style function for zeroing bytes.  Traditionally @dfn{STREAMS} has used the
BSD-style function @manpage{@b{bzero}(9)} instead of the SVR3-style
@manpage{@b{memset}(9)}.@footnote{Perhaps this has something to do with @dfn{STREAMS} first being
implemented on BSD 4.2.}

@item @b{copyin}(9)
Copy user data in from user space to kernel space.
In the UP environment, the top module put procedure was called in user context and it was possible
to copy bytes directly from the user and block in this context.  In the MP environment and with an
MP @dfn{STREAMS} synchronization model, the top module put procedure could be called outside of the
Stream head user context.  Therefore, this function has little use under @dfn{STREAMS}.

@item @b{copyout}(9)
Copy user data in from kernel space to user space.
In the UP environment, the top module put procedure was called in user context and it was possible
to copy bytes directly to the user and block in this context.  In the MP environment and with an
MP @dfn{STREAMS} synchronization model, the top module put procedure could be called outside of the
Stream head user context.  Therefore, this function has little use under @dfn{STREAMS}.

@item @b{delay}(9)
Postpone the calling process for a number of clock ticks.

@item @b{drv_getparm}(9)
Driver retrieve kernel parameter.

@item @b{drv_hztomsec}(9)
Convert kernel tick time between microseconds or milliseconds.

@item @b{drv_htztousec}(9)
Convert kernel tick time between microseconds or milliseconds.

@item @b{drv_msectohz}(9)
Convert kernel tick time between microseconds or milliseconds.

@item @b{drv_priv}(9)
Check if the current process is privileged.

@item @b{drv_usectohz}(9)
Convert kernel tick time between microseconds or milliseconds.

@item @b{drv_usecwait}(9)
Delay for a number of microseconds.

@item @b{min}(9)
Determine the minimum of two integers.

@item @b{max}(9)
Determine the maximum of two integers.

@item @b{getmajor}(9)
Get the internal major device number for a device.

@item @b{getminor}(9)
Get the extended minor device number for a device.

@item @b{makedevice}(9)
Create a device from a major and minor device numbers.

@item @b{strlog}(9)
Pass a message to the @cite{STREAMS} logger.

@item @b{timeout}(9)
Start a timer.
Although general purpose in nature, the @manpage{@b{timeout}(9)} and @manpage{@b{untimeout}(9)}
utilities were most often used for @dfn{STREAMS} modules and drivers.  Some implementations only
support these functions for @dfn{STREAMS}.

@item @b{untimeout}(9)
Stop a timer.
Although general purpose in nature, the @manpage{@b{timeout}(9)} and @manpage{@b{untimeout}(9)}
utilities were most often used for @dfn{STREAMS} modules and drivers.  Some implementations only
support these functions for @dfn{STREAMS}.

@end ftable

@ftable @manref

@item @b{mknod}(9)
Make block or character special files.

@item @b{mount}(9)
Mount and unmount file systems.

@item @b{umount}(9)
Mount and unmount file systems.

@item @b{unlink}(9)
Remove a file.

@end ftable

@subsection Some Common Extension Functions
@cindex some common extension functions

One of the most common extension functions is the ability to put a control
message with two bytes as parameters.  At some point the
@manpage{@b{M_ERROR}(9)} message was extended to include a separate error code
for the Stream head write and read side.  Also, at some point the
@manpage{@b{M_FLUSH}(9)} message was extended to include a band number as well
as a flag byte.  @manpage{@b{putctl2}(9)} and @manpage{@b{putnextctl2}(9)} were
provided to accept and generate two arguments instead of one as their
@manpage{@b{putctl1}(9)} and @manpage{@b{putnextctl1}(9)} counterparts provide.
@cite{@value{PACKAGE_TITLE}} supports these functions as part of the base
package.

Another common extension of @cite{OSF/1} or @cite{Mentat} derived @dfn{STREAMS}
implementations is the ability to weld two queues together in pipe- or FIFO-like
arrangements while maintaining queue synchronization.  The two utilities
@manpage{@b{weldq}(9)} and @manpage{@b{unweldq}(9)} were often included to
provide this facility.  @cite{@value{PACKAGE_TITLE}} supports these functions as
part of the base package.

@ftable @manref

@item @b{linkmsg}(9)
Link a message block to a @cite{STREAMS} message.

@item @b{putctl2}(9)
Put a two byte control message on a @cite{STREAMS} message queue.

@item @b{putnextctl2}(9)
Put a two byte control message on the downstream @cite{STREAMS} message queue.

@item @b{weldq}(9)
Weld two (or four) queues together.

@item @b{unweldq}(9)
Unweld two (or four) queues.

@end ftable

@subsection Some Internal Functions
@cindex some internal functions

@cite{@value{PACKAGE_TITLE}} exposes some internal @dfn{STREAMS} functions that
are exposed by many @dfn{STREAMS} implementations but which are not documented
as available to the @dfn{STREAMS} module and driver writer.  These functions are
exposed for the purpose of compatibility with other implementations as well as
providing some functions that are necessary to implement enhanced Stream heads,
specialized drivers or modules such as the @manref{@b{clone}(4)} driver or
@manref{@b{connld}(4)} module.

Following are some of the exposed functions that are typically exposed by other
@dfn{STREAMS} implementations as well:

@ftable @manref

@item @b{allocq}(9)
Allocate a @cite{STREAMS} queue pair.

@item @b{bcanget}(9)
Test for message arrival on a band on a stream.

@item @b{canget}(9)
Test for message arrival on a stream.

@item @b{freeq}(9)
Deallocate a @cite{STREAMS} queue pair.

@item @b{qattach}(9)
Attach a module onto a @cite{STREAMS} file.

@item @b{qclose}(9)
Close a @cite{STREAMS} module or driver.

@item @b{qdetach}(9)
Detach a module from a @cite{STREAMS} file.

@item @b{qopen}(9)
Call a @cite{STREAMS} module or driver open routine.

@item @b{setq}(9)
Set sizes and procedures associated with a @cite{STREAMS} message queue.

@end ftable

@subsection Some Oddball Functions
@cindex some oddball functions

@ftable @manref

@item @b{appq}(9)
Append one @cite{STREAMS} message after another.

@item @b{esbbcall}(9)
Install a buffer callback for an extended @cite{STREAMS} message block.

@item @b{isdatablk}(9)
Test a @cite{STREAMS} data block for data type.

@item @b{isdatamsg}(9)
Test a @cite{STREAMS} data block for data type.

@item @b{kmem_zalloc_node}(9)
Allocate and zero a NUMA memory extent.

@item @b{msgsize}(9)
Calculate the size of the message blocks in a @cite{STREAMS} message.

@item @b{qcountstrm}(9)
Add all counts on all @cite{STREAMS} message queues in a stream.

@item @b{xmsgsize}(9)
Calculate the size of message blocks in a @cite{STREAMS} message.

@end ftable

@page
@node Porting from SVR 3.2
@section Porting from SVR 3.2
@cindex Porting from SVR 3.2

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{SVR 3.2} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{svr3compat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{SVR 3.2} specific compatibility
functions.

@menu
* Differences from SVR 3.2::
* Commonalities with SVR 3.2::
* Compatibility functions for SVR 3.2::
* Configuration ala SVR 3.2::
@end menu

This section captures portability information for @cite{SVR 3.2} based systems.
If the operating system from which you are porting more closely fits one of the
other portability sections, please see that section.

For the most part, porting from @cite{SVR 3.2} to @cite{@value{PACKAGE_TITLE}}
is not much different than porting forward from @cite{SVR 3.2} to @cite{SVR 4.2
MP}.  If you wish to be able to access some backward compatible @cite{SVR 3.2}
functions, use the @cite{SVR 3} Compatibility Module from the @file{strcompat}
package.

Therefore, it is recommended that @dfn{STREAMS} modules and drivers for
@cite{SVR 3.2} be ported forward to @cite{SVR 4.2 MP} before being ported to
@cite{@value{PACKAGE_TITLE}}.


@node Differences from SVR 3.2
@subsection Differences from SVR 3.2
@cindex Differences from SVR 3.2

The most significant different in @cite{SVR 3.2} and @cite{SVR 4} was the
declaration of the queue open and close routine entry points.  Some
@dfn{STREAMS} implementations still support both @cite{SVR 3.2} entry point
declarations as well as @cite{SVR 4} entry point declarations.
@cite{@value{PACKAGE_TITLE}} only supports the @cite{SVR 4} style entry points.

@cite{SVR 3.2} was not MP-safe.  @cite{@value{PACKAGE_TITLE}} is MP-safe.

A significant number of utilities were implemented in @cite{SVR 3.2} as
architecture dependent macros.  In @cite{SVR 4} these became architecture
independent function calls.

In general, @cite{@value{PACKAGE_TITLE}} is different from @cite{SVR 3.2} in any
way that @cite{SVR 3.2} is different from @cite{SVR 4.2 MP}.

@node Commonalities with SVR 3.2
@subsection Commonalities with SVR 3.2
@cindex Commonalities with SVR 3.2

In general, most of the @dfn{STREAMS} utility functions that were present in
@cite{SVR 3.2} also made it into @cite{SVR 4} (with few exceptions).  @cite{SVR
3.2} did not yet have the concept of a DDI/DKI, but the @dfn{STREAMS} functions
present in @cite{SVR 3.2} appear in the @cite{SVR 4.2 MP} DDI/DKI.

@node Compatibility functions for SVR 3.2
@subsection Compatibility functions for SVR 3.2
@cindex Compatibility functions for SVR 3.2

@ftable @manref

@item @b{alloc_proto}(9)
Allocate control and data message blocks.

@item @b{emajor}(9)
Get the external (real) major device number from the device number.

@item @b{eminor}(9)
Get the external extended minor device number from the device number.

@end ftable

@node Configuration ala SVR 3.2
@subsection Configuration ala SVR 3.2
@cindex Configuration ala SVR 3.2

I have never seen a description of @cite{SVR 3.2} @dfn{STREAMS} configuration.
I can only assume that it involved relinking the kernel in some fashion.

@page
@node Porting from SVR 4.2 MP
@section Porting from SVR 4.2 MP
@cindex Porting from SVR 4.2 MP

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{SVR 4.2 MP} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{svr4compat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{SVR 4.2 MP} specific compatibility
functions.

This section captures portability information for SVR 4.2 MP based systems.  If
the operating system from which you are porting more closely fits one of the
other portability sections, please see that section.

@menu
* Differences from SVR 4.2 MP::
* Commonalities with SVR 4.2 MP::
* Compatibility functions for SVR 4.2 MP::
* Configuration ala SVR 4.2 MP::
@end menu

@node Differences from SVR 4.2 MP
@subsection Differences from SVR 4.2 MP
@cindex differences from svr 4.2 mp

@cite{@value{PACKAGE_TITLE}} has very few differences from @cite{SVR 4.2 MP}.
Not all @cite{SVR 4.2 MP} functions are implemented in the base
@cite{@value{PACKAGE_TITLE}} kernel modules.  Some functions are included in the
@cite{SVR 4.2 MP} Compatibility Module (@file{streams_svr4compat.ko}) from the
@file{strcompat} package.

@subsubsection Priority Levels
@cindex priority levels

@b{Linux} has a different concept of priority levels than @cite{SVR 4.2 MP}.
@b{Linux} has basically 4 priority levels as follows:

@enumerate
@item Preemptive

At this priority level, software and hardware interrupts are enabled and the
kernel is executing with preemption enabled.  This means that the currently
executing kernel thread could preempt and sleep in favour of another thread of
kernel execution.

This priority level only exists on preemptive (mostly 2.6) kernels.

@item Non-Preemptive

At this priority level, software and hardware interrupts are enabled and the
kernel is executing with preemption disabled.  This means that the currently
executing kernel thread will only be interrupted by software or hardware
interrupts.

This priority level exists in all kernels.

@item Software Interrupts Disabled

At this priority level, software interrupts are disabled and the kernel is
executing with preemption disabled.  This means that the currently executing
kernel thread will only be interrupted by hardware interrupts.

This is the case when the executing thread is processing a software interrupt,
or when the currently executing thread has disabled software interrupts.

This priority level exists in all kernels.

@item Interrupt Service Routines Disabled

At this priority level, hardware interrupts are disabled and the kernel is
executing with preemption disabled.  This means that the currently executing
kernel thread will not be interrupted.

This is the case when the executing thread is processing a hardware interrupt,
or when the currently executing thread has disabled hardware interrupts.

This priority level exists in all kernels.

@end enumerate

@node Commonalities with SVR 4.2 MP
@subsection Commonalities with SVR 4.2 MP
@cindex commonalities with svr 4.2 mp

@node Compatibility functions for SVR 4.2 MP
@subsection Compatibility functions for SVR 4.2 MP
@cindex compatibility functions for svr 4.2 mp

@subsubsection STREAMS Locks

@dfn{STREAMS} locks are those that are mentioned in the @cite{SVR 4 Programmer's Guide -- STREAMS}.
These locks lock a queue or Stream head for exclusive access.  @cite{@value{PACKAGE_TITLE}}
implements queue and Stream head locks as read-write locks, so these locks translate to taking a
write lock on the queue or Stream head.
These locks are not normally used by @dfn{STREAMS} modules and drivers and are therefore left in the
@cite{SVR 4.2 MP} Compatibility Module, @file{streams_svr4compat.ko}, from the @dfn{STREAMS}
Compatibility Modules package, @file{strcompat}.

@ftable @manref

@item @b{MPSTR_QLOCK}(9)
Release a queue from exclusive access.

@item @b{MPSTR_QRELE}(9)
Acquire a queue for exclusive access.

@item @b{MPSTR_STPLOCK}(9)
Acquire a stream head for exclusive access.

@item @b{MPSTR_STPRELE}(9)
Release a stream head from exclusive access.

@end ftable

@subsubsection Basic Locks

Basic locks are similar to @cite{Linux} spin locks and can be used as an ABI replacement for
@cite{Linux} spin locks.
It is rather typical for @cite{OpenSS7 Project} @dfn{STREAMS} modules and drivers to use
@cite{Linux} spin locks directly instead of via these functions.  Therefore these locks are left in
the @cite{SVR 4.2 MP} Compatibility Module, @file{streams_svr4compat.ko}, from the @dfn{STREAMS}
Compatibility Modules package, @file{strcompat}.

@ftable @manref

@item @b{LOCK}(9)
Lock a basic lock.

@item @b{LOCK_ALLOC}(9)
Allocate a basic lock.

@item @b{LOCK_DEALLOC}(9)
Deallocate a basic lock.

@item @b{LOCK_OWNED}(9)
Determine whether a basic lock is head by the caller.

@item @b{TRYLOCK}(9)
Try to lock a basic lock.

@item @b{UNLOCK}(9)
Unlock a basic lock.

@end ftable

@subsubsection Read-Write Locks

Read-write locks are similar to @cite{Linux} read-write locks and can be used as an ABI replacement
for @cite{Linux} read-write locks.

@ftable @manref

@item @b{RW_ALLOC}(9)
Allocate and initialize a read/write lock.

@item @b{RW_DEALLOC}(9)
Deallocate a read/write lock.

@item @b{RW_RDLOCK}(9)
Acquire a read/write lock in read mode.

@item @b{RW_TRYRDLOCK}(9)
Attempt to acquire a read/write lock in read mode.

@item @b{RW_TRYWRLOCK}(9)
Attempt to acquire a read/write lock in write mode.

@item @b{RW_UNLOCK}(9)
Release a read/write lock.

@item @b{RW_WRLOCK}(9)
Acquire a read/write lock in write mode.

@end ftable

@subsubsection Sleep Locks

Sleep locks are similar to @cite{Linux} semaphores or mutexes.

@ftable @manref

@item @b{SLEEP_ALLOC}(9)
Allocate a sleep lock.

@item @b{SLEEP_DEALLOC}(9)
Deallocate a sleep lock.

@item @b{SLEEP_LOCK}(9)
Acquire a sleep lock.

@item @b{SLEEP_LOCKAVAIL}(9)
Determine whether a sleep lock is available.

@item @b{SLEEP_LOCKOWNED}(9)
Determine whether a sleep lock is held by the caller.

@item @b{SLEEP_LOCK_SIG}(9)
Acquire a sleep lock.

@item @b{SLEEP_TRYLOCK}(9)
Attempt to acquire a sleep lock.

@item @b{SLEEP_UNLOCK}(9)
Release a sleep lock.

@end ftable

@subsubsection Synchronization Variables

Synchronization variables are similar to @cite{Linux} wait queues.

@ftable @manref

@item @b{SV_ALLOC}(9)
Allocate a basic condition variable.

@item @b{SV_BROADCAST}(9)
Broadcast a basic condition variable.

@item @b{SV_DEALLOC}(9)
Deallocate a basic condition variable.

@item @b{SV_SIGNAL}(9)
Signal a basic condition variable.

@item @b{SV_WAIT}(9)
Wait on a basic condition variable.

@item @b{SV_WAIT_SIG}(9)
Interruptible wait on a basic condition variable.

@end ftable

@subsubsection Atomic Integers

Atomic Integers are similar to @cite{Linux} atomic integers.

@ftable @manref

@item @b{ATOMIC_INT_ADD}(9)
Add an integer value to an atomic integer.

@item @b{ATOMIC_INT_ALLOC}(9)
Allocate and initalize an atomic integer.

@item @b{ATOMIC_INT_DEALLOC}(9)
Deallocate an atomic integer.

@item @b{ATOMIC_INT_DECR}(9)
Decrement and test an atomic integer.

@item @b{ATOMIC_INT_INCR}(9)
Increment an atomic integer.

@item @b{ATOMIC_INT_INIT}(9)
Initialize an atomic integer.

@item @b{ATOMIC_INT_READ}(9)
Read an atomic integer.

@item @b{ATOMIC_INT_SUB}(9)
Subtract and integer value from an atomic integer.

@item @b{ATOMIC_INT_WRITE}(9)
Write an integer value to an atomic integer.

@end ftable

@subsubsection Set Processor Level

Processor levels are similar to @cite{Linux} local irq or soft irq suppression.

@ftable @manref

@item @b{spl0}(9)
Set priority level 0.

@item @b{spl1}(9)
Set priority level 1.

@item @b{spl2}(9)
Set priority level 2.

@item @b{spl3}(9)
Set priority level 3.

@item @b{spl4}(9)
Set priority level 4.

@item @b{spl5}(9)
Set priority level 5.

@item @b{spl6}(9)
Set priority level 6.

@item @b{spl7}(9)
Set priority level 7.

@item @b{spl}(9)
Set priority level.

@item @b{splx}(9)
Set priority level x.

@end ftable

@subsubsection Additional Compatibility Functions

@ftable @manref

@item @b{itimeout}(9)
Perform a timeout at an interrupt level.

@item @b{lbolt}(9)
Time in ticks since reboot.

@item @b{major}(9)
Get the internal major number of a device.

@item @b{makedev}(9)
Make a device number from internal major and minor device numbers.

@item @b{minor}(9)
Get the internal minor number of a device.

@item @b{sleep}(9)
Put a process to sleep.

@item @b{vtop}(9)
Convert virtual to physical address.

@item @b{wakeup}(9)
Wake a process.

@end ftable

@node Configuration ala SVR 4.2 MP
@subsection Configuration ala SVR 4.2 MP
@cindex configuration ala svr 4.2 mp

@page
@node Porting from AIX 5L Version 5.1
@section Porting from AIX 5L Version 5.1
@cindex Porting from AIX 5L Version 5.1

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{AIX} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{aixcompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{AIX} specific compatibility
functions.

Most of the @dfn{STREAMS} functions and DDI/DKI functions provided by
@cite{AIX@registeredsymbol{}} are also provided by the
@cite{@value{PACKAGE_TITLE}} base package.  Some utilities, however, are
provided by the @cite{AIX} Compatibility Module (@file{streams_aixcompat.ko})
from the @dfn{STREAMS} Compatibility Module package (@file{strcompat}).

@menu
* Differences from AIX 5L Version 5.1::
* Commonalities with AIX 5L Version 5.1::
* Compatibility Functions for AIX 5L Version 5.1::
* Configuration ala AIX 5L Version 5.1::
@end menu

@node Differences from AIX 5L Version 5.1
@subsection Differences from AIX 5L Version 5.1
@cindex differences from aix 5l version 5.1

@node Commonalities with AIX 5L Version 5.1
@subsection Commonalities with AIX 5L Version 5.1
@cindex commonalities with aix 5l version 5.1

@node Compatibility Functions for AIX 5L Version 5.1
@subsection Compatibility Functions for AIX 5L Version 5.1
@cindex compatibility functions for aix 5l version 5.1

The compatibility functions described below are described in the @dfn{STREAMS}
module and driver documentation for @cite{AIX}.  Some of these functions are
provided also with other implementations (such as @cite{OSF/1} or
@cite{Mentat}).

The following functions are typically also provided by @emph{most} @dfn{STREAMS}
implementations:

@ftable @manref

@item @b{putctl2}(9)
Put a 2 byte control message on a @cite{STREAMS}.

@item @b{splstr}(9)
Set processor level for @dfn{STREAMS}.

@item @b{splx}(9)
Set or restore processor level.

@item @b{unweldq}(9)
Unweld two pairs of streams queues.

@item @b{weldq}(9)
Weld together two pairs of streams queues.

@end ftable

The following functions are really just @cite{Mentat Portable @dfn{STREAMS}}
functions that made their way into @cite{AIX}:  (Portability considerations for
@cite{Mentat Portable @dfn{STREAMS}} functions is described in.)

@ftable @manref

@item @b{mi_bufcall}(9)
Reliable alternative to @manpage{@b{buffcall}(9)}.
This is really just a @cite{Mentat Portable @dfn{STREAMS}} function that made
its way into @cite{AIX}.

@item @b{mi_close_comm}(9)
@cite{STREAMS} common minor device close utility.
This is really just a @cite{Mentat Portable @dfn{STREAMS}} function that made
its way into @cite{AIX}.

@item @b{mi_next_ptr}(9)
@cite{STREAMS} minor device list traversal.
This is really just a @cite{Mentat Portable @dfn{STREAMS}} function that made
its way into @cite{AIX}.

@item @b{mi_open_comm}(9)
@cite{STREAMS} common minor device open utility.
This is really just a @cite{Mentat Portable @dfn{STREAMS}} function that made
its way into @cite{AIX}.

@item @b{mi_prev_ptr}(9)
@cite{STREAMS} minor device list traversal.
This is really just a @cite{Mentat Portable @dfn{STREAMS}} function that made
its way into @cite{AIX}.

@end ftable

The following functions are unique to @cite{AIX}:

In particular, the @manpage{@b{wantio}(9)} and @manpage{@b{wantmsg}(9)}
facilities are incredibly convoluted and complex and only documented by
@cite{AIX}.  Although @cite{@value{PACKAGE_TITLE}} implements these functions
(in the @cite{AIX} Compatibility Module, @file{streams_aixcompat.ko}, from the
@dfn{STREAMS} Compatibility Module package, @file{strcompat}) as faithfully as
possible, their use should be completely avoided by portable programs.

@ftable @manref

@item @b{wantio}(9)
Perform direct I/O from a @cite{STREAMS} driver.

@item @b{wantmsg}(9)
Provide a filter of wanted messages from a @cite{STREAMS} module.

@end ftable

@node Configuration ala AIX 5L Version 5.1
@subsection Configuration ala AIX 5L Version 5.1
@cindex configuration ala aix 5l version 5.1

@ftable @manref

@item @b{str_install}(9)
Install a @cite{STREAMS} module or driver.
Each implementation has a different mechanism for registration and
deregistration of @dfn{STREAMS} modules and drivers.  This is the mechanism
used by @cite{AIX}.  It should be avoided by programs that are not being ported
from @cite{AIX}.  @cite{AIX}-style @dfn{STREAMS} registration and deregistration
is implemented in the @cite{AIX} Compatibility Module,
@file{streams_aixcompat.ko}, from the @dfn{STREAMS} Compatibility Module package,
@file{strcompat}.

@end ftable

@page
@node Porting from HP-UX 11.0i v2
@section Porting from HP-UX 11.0i v2
@cindex Porting from HP-UX 11.0i v2

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{HP-UX} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{hpuxcompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{HP-UX} specific compatibility
functions.

@menu
* Differences from HP-UX 11.0i v2::
* Commonalities with HP-UX 11.0i v2::
* Compatibility Functions for HP-UX 11.0i v2::
* Configuration ala HP-UX 11.0i v2::
@end menu

@node Differences from HP-UX 11.0i v2
@subsection Differences from HP-UX 11.0i v2
@cindex differences from hp-ux 11.0i v2

@cite{HP-UX} stubs out the @manpage{@b{qprocson}(9)},
@manpage{@b{qprocsoff}(9)}, @manpage{@b{freezestr}(9)} and
@manpage{@b{unfreezestr}(9)} utility functions.  @cite{HP-UX} expects that the
appropriate level of synchronization be used instead.@footnote{@i{STREAMS/UX for
the HP 9000 Reference Manual}, 1995, (Palo Alto, California), Hewlett-Package
Company, HP.  @url{http://docs.hp.com/}} Because of this, it is recommended that
@cite{HP-UX} drivers and modules port directly to the
@cite{@value{PACKAGE_TITLE}} environment, not be run at synchronization level
@var{SQLVL_NOP}.  See @manref{@b{str_install_HPUX}(9)}.

@node Commonalities with HP-UX 11.0i v2
@subsection Commonalities with HP-UX 11.0i v2
@cindex commonalities with hp-ux 11.0i v2

@node Compatibility Functions for HP-UX 11.0i v2
@subsection Compatibility Functions for HP-UX 11.0i v2
@cindex compatibility functions for hp-ux 11.0i v2

The following compatibility functions are typical extensions and are also
provided by the @cite{@value{PACKAGE_TITLE}} base package:

@ftable @manref

@item @b{putctl2}(9)
put a 2 byte control message on a @cite{STREAMS} message queue

@item @b{putnextctl2}(9)
put a 2 byte control message on the downstream @cite{STREAMS} message queue

@item @b{unweldq}(9)
unweld two pairs of streams queues

@item @b{weldq}(9)
weld together two pairs of streams queues

@end ftable

The following compatibility functions are peculiar to
@cite{HP-UX}@footnote{@i{STREAMS/UX for the HP 9000 Reference Manual}, 1995,
(Palo Alto, California), Hewlett-Package Company, HP.
@url{http://docs.hp.com/}} and are only part of the @cite{HP-UX} compatibility
module, @file{streams_hpuxcompat.ko}, from the @dfn{STREAMS} Compatibility
Modules, @file{strcompat}, package:

@ftable @manref

@item @b{get_sleep_lock}(9)
Provide access to the global sleep lock.

@item @b{streams_get_sleep_lock}(9)
Provide access to the global sleep lock.

@item @b{streams_mpsleep}(9)
Put a process to sleep.

@item @b{streams_put}(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@end ftable


@node Configuration ala HP-UX 11.0i v2
@subsection Configuration ala HP-UX 11.0i v2
@cindex configuration ala hp-ux 11.0i v2

Installation, registration and deregistration of @dfn{STREAMS} modules and
drivers is one of the least standardized mechanisms across the various
@dfn{STREAMS} implementations.  Each implementation has its own mechanism and
@cite{HP-UX} is no different.  The following compatibility functions provide the
@cite{HP-UX} specific @dfn{STREAMS} driver installation, registration and
deregistration style:

@ftable @manref

@item @b{str_install}(9)
Install a @cite{STREAMS} module or driver.

@item @b{str_uninstall}(9)
Uninstall a @cite{STREAMS} module or driver.

@end ftable

@page
@node Porting from OSF/1 1.2/Digital UNIX
@section Porting from OSF/1 1.2/Digital UNIX
@cindex Porting from OSF/1 1.2/Digital UNIX

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{OSF/1} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{osfcompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{OSF/1} specific compatibility
functions.

@menu
* Differences from OSF/1 1.2/Digial UNIX::
* Commonalities with OSF/1 1.2/Digial UNIX::
* Compatibility Functions for OSF/1 1.2/Digial UNIX::
* Configuration ala OSF/1 1.2/Digial UNIX::
@end menu

@node Differences from OSF/1 1.2/Digial UNIX
@subsection Differences from OSF/1 1.2/Digial UNIX
@cindex differences from osf/1 1.2/digial unix

@node Commonalities with OSF/1 1.2/Digial UNIX
@subsection Commonalities with OSF/1 1.2/Digial UNIX
@cindex commonalities with osf/1 1.2/digial unix

@node Compatibility Functions for OSF/1 1.2/Digial UNIX
@subsection Compatibility Functions for OSF/1 1.2/Digial UNIX
@cindex compatibility functions for osf/1 1.2/digial unix

@ftable @manref

@item @b{unweldq}(9)
Unweld two pairs of streams queues.

@item @b{weldq}(9)
Weld together two pairs of streams queues.

@end ftable

@ftable @manref

@item @b{lbolt}(9)
Time in ticks since reboot.

@item @b{puthere}(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@item @b{streams_close_comm}(9)
Common minor device close utility.

@item @b{streams_open_comm}(9)
Common minor device open utility.

@item @b{streams_open_ocomm}(9)
Common minor device open utility.

@item @b{time}(9)
(undoc)

@end ftable

@node Configuration ala OSF/1 1.2/Digial UNIX
@subsection Configuration ala OSF/1 1.2/Digial UNIX
@cindex configuration ala osf/1 1.2/digial unix

@ftable @manref

@item @b{strmod_add}(9)
Add a @cite{STREAMS} module.

@item @b{strmod_del}(9)
Delete a @cite{STREAMS} module or driver from the kernel.

@end ftable

@page
@node Porting from UnixWare 7.1.3 (OpenUnix 8)
@section Porting from UnixWare 7.1.3 (OpenUnix 8)
@cindex Porting from UnixWare 7.1.3 (OpenUnix 8)

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{UnixWare} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{uw7compat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{UnixWare} specific compatibility
functions.

@menu
* Differences from UnixWare 7.1.3 (OpenUnix 8)::
* Commonalities with UnixWare 7.1.3 (OpenUnix 8)::
* Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)::
* Configuration ala UnixWare 7.1.3 (OpenUnix 8)::
@end menu

@node Differences from UnixWare 7.1.3 (OpenUnix 8)
@subsection Differences from UnixWare 7.1.3 (OpenUnix 8)
@cindex differences from unixware 7.1.3 (openunix 8)

@node Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@subsection Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@cindex commonalities with unixware 7.1.3 (openunix 8)

@node Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@subsection Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@cindex compatibility functions for unixware 7.1.3 (openunix 8)

The following compatibility functions are in addition to all SVR 4.2
compatibility functions.

@ftable @manref

@end ftable

@ftable @manref

@item @b{allocb_physreq}(9)
Allocate a @cite{STREAMS} message and data block.

@item @b{emajor}(9)
Get the external (real) major device number from the device number.

@item @b{eminor}(9)
Get the external extended minor device number from the device number.

@item @b{etoimajor}(9)
Convert an external major device number to an internal major device number.

@item @b{getemajor}(9)
Get the external (real) major device number.

@item @b{geteminor}(9)
Get the external minor device number.

@item @b{itoemajor}(9)
Convert an internal major device number to an external major device number.

@item @b{msgphysreq}(9)
Cause a message block to meet physical requirements.

@item @b{msgpullup_physreq}(9)
Pull up bytes in a @cite{STREAMS} message.

@item @b{msgscgth}(9)
(undoc)

@item @b{strioccall}(9)
(undoc)

@end ftable

@node Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@subsection Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@cindex configuration ala unixware 7.1.3 (openunix 8)

@page
@node Porting from Solaris 9/SunOS 5.9
@section Porting from Solaris 9/SunOS 5.9
@cindex Porting from Solaris 9/SunOS 5.9

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{Solaris} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{suncompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{Solaris} specific compatibility
functions.

@menu
* Differences from Solaris 9/SunOS 5.9::
* Commonalities with Solaris 9/SunOS 5.9::
* Compatibility Functions for Solaris 9/SunOS 5.9::
* Configuration ala Solaris 9/SunOS 5.9::
@end menu

@node Differences from Solaris 9/SunOS 5.9
@subsection Differences from Solaris 9/SunOS 5.9
@cindex differences from solaris 9/sunos 5.9

@node Commonalities with Solaris 9/SunOS 5.9
@subsection Commonalities with Solaris 9/SunOS 5.9
@cindex commonalities with solaris 9/sunos 5.9

@node Compatibility Functions for Solaris 9/SunOS 5.9
@subsection Compatibility Functions for Solaris 9/SunOS 5.9
@cindex compatibility functions for solaris 9/sunos 5.9

@ftable @manref

@item @b{ddi_create_minor_node}(9)
Create a minor node for this device.

@item @b{ddi_driver_major}(9)
Find the major device number associated with a driver.

@item @b{ddi_driver_name}(9)
Return normalized driver name.

@item @b{ddi_get_cred}(9)
Get a reference to the credentials of the current user.

@item @b{ddi_getiminor}(9)

@item @b{ddi_get_instance}(9)
Get device instance number.

@item @b{ddi_get_lbolt}(9)
Get the current value of the system tick clock.

@item @b{ddi_get_pid}(9)

@item @b{ddi_get_soft_state}(9)

@item @b{ddi_get_time}(9)
Get the current time in seconds since the epoch.

@item @b{ddi_remove_minor_node}(9)
Remove a minor node for a device.

@item @b{ddi_removing_power}(9)

@item @b{ddi_soft_state}(9)

@item @b{ddi_soft_state_fini}(9)

@item @b{ddi_soft_state_free}(9)

@item @b{ddi_soft_state_init}(9)

@item @b{ddi_soft_state_zalloc}(9)

@item @b{ddi_umem_alloc}(9)
Allocate page aligned kernel memory.

@item @b{ddi_umem_free}(9)

@item @b{power}(9)
Power a device attached to the system.

@item @b{probe}(9)

@item @b{qbufcall}(9)
Install a buffer callback.

@item @b{qtimeout}(9)
Start a timer associated with a queue.

@item @b{queclass}(9)

@item @b{qunbufcall}(9)

@item @b{quntimeout}(9)

@item @b{qwait}(9)
Wait for a queue message.

@item @b{qwait_sig}(9)
Wait for a queue message or signal.

@item @b{qwriter}(9)

@end ftable

@node Configuration ala Solaris 9/SunOS 5.9
@subsection Configuration ala Solaris 9/SunOS 5.9
@cindex configuration ala solaris 9/sunos 5.9

@ftable @manref

@item @b{_fini}(9)

@item @b{_info}(9)

@item @b{_init}(9)

@item @b{attach}(9)
Attach a device to the system or resume a suspended device.

@item @b{detach}(9)
Detach a device from the system or suspend a device.

@item @b{getinfo}(9)

@item @b{identify}(9)
Determine if a driver is associated with a device.

@item @b{install_driver}(9)
Install a device driver.

@item @b{mod_info}(9)
Provides information on a loadable kernel module to the @cite{STREAMS} executive.

@item @b{mod_install}(9)
Installs a loadable kernel module in the @cite{STREAMS} executive.

@item @b{mod_remove}(9)
Removes a loadable module from the @cite{STREAMS} executive.

@end ftable

@page
@node Porting from SUPER-UX
@section Porting from SUPER-UX
@cindex Porting from SUPER-UX

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{SUPER-UX} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{suxcompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{SUPER-UX} specific compatibility
functions.

@menu
* Differences from SUPER-UX::
* Commonalities with SUPER-UX::
* Compatibility Functions for SUPER-UX::
* Configuration ala SUPER-UX::
@end menu

@node Differences from SUPER-UX
@subsection Differences from SUPER-UX
@cindex differences from super-ux

@node Commonalities with SUPER-UX
@subsection Commonalities with SUPER-UX
@cindex commonalities with super-ux

@node Compatibility Functions for SUPER-UX
@subsection Compatibility Functions for SUPER-UX
@cindex compatibility functions for super-ux

@ftable @manref

@item @b{lbolt}(9)
Time in ticks since reboot.

@end ftable

@node Configuration ala SUPER-UX
@subsection Configuration ala SUPER-UX
@cindex configuration ala super-ux

@page
@node Porting from UXP/V
@section Porting from UXP/V
@cindex Porting from UXP/V

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{UXP/V} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{uxpcompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{UXP/V} specific compatibility
functions.

@menu
* Differences from UXP/V::
* Commonalities with UXP/V::
* Compatibility Functions for UXP/V::
* Configuration ala UXP/V::
@end menu

@node Differences from UXP/V
@subsection Differences from UXP/V
@cindex differences from uxp/v

@node Commonalities with UXP/V
@subsection Commonalities with UXP/V
@cindex commonalities with uxp/v

@node Compatibility Functions for UXP/V
@subsection Compatibility Functions for UXP/V
@cindex compatibility functions for uxp/v

@node Configuration ala UXP/V
@subsection Configuration ala UXP/V
@cindex configuration ala uxp/v

@page
@node Porting from Linux STREAMS (LiS) 2.18.4
@section Porting from Linux STREAMS (LiS) 2.18.4
@cindex Porting from Linux STREAMS (LiS) 2.18.4

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{LiS} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{liscompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{LiS} specific compatibility
functions.

@menu
* Differences from LiS 2.18.4::
* Commonalities with LiS 2.18.4::
* Compatibility Functions for LiS 2.18.4::
* Configuration ala LiS 2.18.4::
@end menu

In general, @cite{LiS} @dfn{STREAMS} drivers and modules are easily portable to
@cite{@value{PACKAGE_TITLE}}.  @dfn{STREAMS} drivers and modules, up until
recently, were capable of running under both @cite{LiS} and
@cite{@value{PACKAGE_TITLE}}.  For the most part, @dfn{STREAMS} driver and
modules ported from @cite{LiS} to @cite{@value{PACKAGE_TITLE}} experience
performance, conformance and bug-free operation on @cite{@value{PACKAGE_TILTE}}.
Mechanisms used to circumvent @cite{LiS} deficiencies, bugs and race conditions,
are no longer necessary under @cite{@value{PACKAGE_TITLE}}.

@node Differences from LiS 2.18.4
@subsection Differences from LiS 2.18.4
@cindex differences from lis 2.18.4

The many manual pages included with the @command{streams} and
@command{strcompat} packages describe areas where @cite{LiS} and @cite{Linux
Fast-STREAMS} differ for specific DDI/DKI utilities and user interface
functions, and also provide considerations for portability.

The major difference between @cite{LiS} and @cite{Linux Fast-STREAMS} is bugs:
@cite{LiS} is full of them.  @cite{LiS 2.18.4} fails about one-third of a
thousand or so @cite{POSIX} conformance tests (and those test cases mostly test
the Stream head).  @cite{Linux Fast-STREAMS} is certainly not bug-for-bug
compatible with @cite{LiS}.

Some significant differences are summarized as follows:

@subsubsection 32-bit over 64-bit Compatibility

@cite{LiS} is largely incapable of 32-bit over 64-bit compatibility.  The
primary impediment is the inability of @cite{LiS} to properly register 32-bit
input-output controls with a 64-bit kernel.  @cite{Linux Fast-STREAMS}, on the
other hand, has tested 32-bit over 64-bit compatibility.  All test suites are
run in 32-bit over 64-bit mode as well as native mode.

@cite{@value{PACKAGE_TITLE}} passes the model of the calling process to the
queue open procedure (in the @var{oflags} argument).  It also passes the model
of the calling process to the @dfn{STREAMS} driver or module in the
@manpage{@b{M_IOCTL}(9)} message (in the @var{ioc_flag} member), permitting
modules and drivers with the ability to invoke 32-bit implicit or explicit
@manpage{@b{M_COPYIN}(9)} or @manpage{@b{M_COPYOUT}(9)} operations.
See section @cite{32-bit Compatibility Input-Output Controls} on the
@manref{@b{M_IOCTL}(9)} manual page for more information.

@subsubsection Proper Handling of M_IOCDATA

@cite{LiS} improperly waits for an @manpage{@b{M_IOCNAK}(9)} after a failed
@manpage{@b{M_COPYIN}(9)} or @manpage{@b{M_COPYOUT}(9)} operation.  All other
@dfn{STREAMS} implementations (including @cite{Linux Fast-STREAMS}) expect the
module or driver to abort the input-output control operation when the return
value in the @manpage{@b{M_IOCDATA}(9)} is non-zero.

@subsubsection Proper Stream Head Handling

@cite{LiS} has many bugs and races in the Stream head.  Also, @cite{LiS} takes a
very narrow view of Stream head functionality.  A significant area where
@cite{LiS} lacks functionality is in proper signal handling for controlling and
non-controlling terminals.  Also, the @cite{LiS} Stream head is largely unsafe
for use by threaded applications.  The @cite{Linux Fast-STREAMS} Stream head
properly supports FIFOs, pipes, terminals, and sockets, properly signals process
groups, handles process orphans, and normal @cite{UNIX} job control (including
signals).  @cite{LiS} does not handle polling correctly with regard to message
bands.  @cite{Linux Fast-STREAMS} properly handles polling with regard to
message bands, including extended @cite{POSIX} signals with regard to poll.

@cite{LiS} is constructed with an annoying write side Stream head behaviour:
messages written with @manpage{@b{write}(2s)} or @manpage{@b{putmsg}(2)} are
queued to the Stream head write side queue and then processed from the Stream
head write side queue service procedure.  This introduces one more level of
write side buffering than is necessary.  @cite{@value{PACKAGE_TITLE}} directly
calls the topmost module write side put procedure.  A Stream head write side
service procedure is provided, not to pass messages, but to perform write side
@manpage{@b{poll}(2s)} actions when back-enabled.

@subsubsection Buffer Callbacks

@cite{LiS} does not properly implement buffer callbacks.  @cite{LiS} sets a one
second timer and invokes buffer callbacks upon timeout.  @cite{Linux
Fast-STREAMS}, like @cite{SVR 4.2}, keeps track of buffers as they are allocated
and freed and invokes a callback shortly after a buffer is freed.  The result is
that the buffer callback under @cite{Linux Fast-STREAMS} is always invoked from
within the @dfn{STREAMS} scheduler context.  For @cite{LiS}, the buffer callback
is invoked under timeout (bottom half, soft irq) context.

@subsubsection Queue Procedure On and Off

@cite{LiS} does not have a workable mechanism for turning queue procedures on or
off.  @cite{Linux Fast-STREAMS} has a full MP-safe mechanism similar to
@cite{SVR 4.2 MP}.  @cite{SVR 4.2 MP} specifies that before the first call to
@manpage{@b{qprocson}(9)}, messages flow around the module as though it did not
exist in the Stream.  Also, that after the call to @manpage{@b{qprocsoff}(9)},
messages flow around the module also.  @cite{LiS} does not ensure that this will
happen and, in fact, will annoyingly discard messages that are put to the queue
during this period.  @cite{@value{PACKAGE_TITLE}} performs half-insertion and
half-deletion to permit message to flow around the module and properly protects
against @var{q_next} pointer dereferencing while performing half-insertions and
deletions.

@subsubsection Freezing and Unfreezing Streams

@cite{LiS} does not have a fully functional mechanism for freezing a Stream.
@cite{Linux Fast-STREAMS} has a full MP-safe mechanism similar to @cite{SVR
4.2}. When a Stream is frozen with @manpage{@b{freezestr}(9)} it is necessary
not only to suppress interrupts and take a write lock on the queue structure
passed as the argument to the call, but to also prohibit other queue procedures
from being invoked by threads other than the caller along the entire Stream.
Under @cite{LiS}, @manpage{@b{freezestr}(9)} only protects the state of the
queue named in the argument to the call.  Under @cite{@value{PACKAGE_TITLE}},
the state of the entire Stream including queue (along with the Stream head)
is protected by the call in accordance with @cite{SVR 4.2 MP} specifications.

@subsubsection Queue Pointer Dereferencing

@cite{LiS} has no mechanism for protecting dereferencing of the @samp{q->q_next}
pointer from race conditions.  Pushing or popping a module to or from a Stream
in the process or passing message blocks can cause kernel crashes.  @cite{Linux
Fast-STREAMS} has a full MP-safe mechanism for protecting @var{q_next} pointer
dereferencing (Stream head read locks) while within a queue put or service
procedure, timeouts and buffer callbacks.  The full
@manpage{@b{qprocson}(9)}/@manpage{@b{qprocsoff}(9)} mechanism under @cite{Linux
Fast-STREAMS} properly protects the queue open and close routines.

@subsubsection Enhancements

@cite{Linux Fast-STREAMS} provides a set of enhanced features not present in
@cite{LiS} but present in other @dfn{STREAMS} implementations.  One important
feature that @cite{LiS} lacks, that @cite{Linux Fast-STREAMS} provides, is a
fully functional @manref{strlog(9)} capability.

@node Commonalities with LiS 2.18.4
@subsection Commonalities with LiS 2.18.4
@cindex commonalities with lis 2.18.4

For the most part, where @cite{LiS} properly follows @cite{SVR 4} behaviour and
@cite{SVR 4} behaviour is consistent with @cite{SVR 4.2} behaviour, @cite{Linux
Fast-STREAMS} is compatible with @cite{LiS}.

@node Compatibility Functions for LiS 2.18.4
@subsection Compatibility Functions for LiS 2.18.4
@cindex compatibility functions for lis 2.18.4

@ftable @manref

@item @b{lis_appq}(9)
Append one @cite{STREAMS} message after another.

@item @b{lis_date}(9)
Return the date of LiS.

@item @b{lis_esbbcall}(9)
Install a buffer callback for an extended @cite{STREAMS} message block.

@item @b{lis_find_strdev}(9)

@item @b{lis_mknod}(9)
Make block or character special files.

@item @b{lis_mount}(9)
Mount a file system.

@item @b{lis_OTHER}(9)
Return the other queue of a @cite{STREAMS} queue pair.

@item @b{lis_umount2}(9)
Unmount a file system.

@item @b{lis_umount}(9)
Unmount a file system.

@item @b{lis_unlink}(9)
Remove a file.

@item @b{lis_version}(9)
Return the version of LiS.

@item @b{lis_xmsgsize}(9)
Calculate the size of message blocks in a @cite{STREAMS} message.

@end ftable

@node Configuration ala LiS 2.18.4
@subsection Configuration ala LiS 2.18.4
@cindex configuration ala lis 2.18.4

@ftable @manref

@item @b{lis_register_strdev}(9)
Register a @cite{STREAMS} device.

@item @b{lis_register_strmod}(9)
Register a @cite{STREAMS} module.

@item @b{lis_unregister_strdev}(9)
Unregister a @cite{STREAMS} device.

@item @b{lis_unregsiter_strmod}(9)
Unregister a @cite{STREAMS} module.

@end ftable

@page
@node Porting from Mac Open Transport
@section Porting from Mac Open Transport
@cindex Porting from Mac Open Transport

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{Mac Open Transport} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{maccompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{Mac Open Transport} specific compatibility
functions.

@menu
* Differences from Mac Open Transport::
* Commonalities with Mac Open Transport::
* Compatibility Functions for Mac Open Transport::
* Configuration ala Mac Open Transport::
@end menu

@node Differences from Mac Open Transport
@subsection Differences from Mac Open Transport
@cindex differences from mac open transport

@node Commonalities with Mac Open Transport
@subsection Commonalities with Mac Open Transport
@cindex commonalities with mac open transport

@node Compatibility Functions for Mac Open Transport
@subsection Compatibility Functions for Mac Open Transport
@cindex compatibility functions for mac open transport

@node Configuration ala Mac Open Transport
@subsection Configuration ala Mac Open Transport
@cindex configuration ala mac open transport

@page
@node Porting from Mentat Portable STREAMS
@section Porting from Mentat Portable STREAMS
@cindex Porting from Mentat Portable STREAMS

Detailed portability information for porting @dfn{STREAMS} modules and drivers
from @cite{Mentat Portable STREAMS} to @cite{@value{PACKAGE_TITLE}} is contained the the
@cite{@dfn{STREAMS} Compatibility Modules} package, @file{strcompat}, under the
@manref{@b{mpscompat}(9)} manual page.  The @cite{@dfn{STREAMS} Compatibility
Modules} package also provides some @cite{Mentat Portable STREAMS} specific compatibility
functions.

@menu
* Differences from Mentat Portable STREAMS::
* Commonalities with Mentat Portable STREAMS::
* Compatibility Functions for Mentat Portable STREAMS::
* Configuration ala Mentat Portable STREAMS::
@end menu

@node Differences from Mentat Portable STREAMS
@subsection Differences from Mentat Portable STREAMS
@cindex differences from mentat portable streams

@node Commonalities with Mentat Portable STREAMS
@subsection Commonalities with Mentat Portable STREAMS
@cindex commonalities with mentat portable streams

@node Compatibility Functions for Mentat Portable STREAMS
@subsection Compatibility Functions for Mentat Portable STREAMS
@cindex compatibility functions for mentat portable streams

@ftable @manref

@item @b{mi_alloc}(9)
Allocate and free kernel memory without later regard to size.

@item @b{mi_allocq}(9)
@manpage{@b{allocq}(9)} replacement.

@item @b{mi_alloc_sleep}(9)
@manpage{@b{kmem_alloc}(9)} replacement.

@item @b{mi_attach}(9)
Associate instance data with a @dfn{STREAMS} queue.

@item @b{mi_bcmp}(9)
@manpage{@b{bcmp}(9)} replacement.

@item @b{mi_bufcall}(9)
Reliable alternative to @manpage{@b{bufcall}(9)}.

@item @b{mi_close_comm}(9)
@dfn{STREAMS} common minor device close utility.

@item @b{mi_close_detached}(9)
Release instance data from the @dfn{STREAMS} queue and perform close cleanup.

@item @b{mi_close_free}(9)
Free a @dfn{STREAMS} driver or module instance on close.

@item @b{mi_copy_done}(9)
@manpage{@b{ioctl}(2s)} complete.

@item @b{mi_copyin}(9)
Copy data to a user buffer.

@item @b{mi_copyin_n}(9)
Copy data to a user buffer.

@item @b{mi_copyout}(9)
Copy data from a user buffer.

@item @b{mi_copyout_alloc}(9)
Allocate a buffer to be copied out using @manpage{@b{mi_copyout}(9)}.

@item @b{mi_copy_set_rval}(9)
Set return value for input-output control.

@item @b{mi_copy_state}(9)
Current state of the input-output control process.

@item @b{mi_detach}(9)
Disassociate instance data from the @dfn{STREAMS} queue.

@item @b{mi_first_dev_ptr}(9)
Obtain first device instance pointer.

@item @b{mi_first_ptr}(9)
Obtain first instance pointer.

@item @b{mi_free}(9)
@manpage{@b{kmem_free}(9)} replacement.

@item @b{mi_freeq}(9)
@manpage{@b{freeq}(9)} replacement.

@item @b{mi_mpprintf}(9)
Print a formatted string to a message buffer.

@item @b{mi_mpprintf_nr}(9)
Continue to print a formatted string to a message buffer.

@item @b{mi_next_dev_ptr}(9)
Obtain next device instance pointer.

@item @b{mi_next_ptr}(9)
@dfn{STREAMS} minor device list traversal.

@item @b{mi_offset_param}(9)
Obtain parameter location within @dfn{STREAMS} message block.

@item @b{mi_offset_paramc}(9)
Obtain parameter location within @dfn{STREAMS} message block chain.

@item @b{mi_open_alloc}(9)
Allocate a @dfn{STREAMS} module or driver instance.

@item @b{mi_open_alloc_sleep}(9)
Allocate a @dfn{STREAMS} module or driver instance (may sleep).

@item @b{mi_open_comm}(9)
@dfn{STREAMS} common minor device open utility.

@item @b{mi_open_detached}(9)
@dfn{STREAMS} create detached instance data.

@item @b{mi_open_link}(9)
Link a @dfn{STREAMS} driver or module instance on open.

@item @b{mi_prev_ptr}(9)
@dfn{STREAMS} minor list traversal.

@item @b{mi_timer_q_switch}(9)
Switch @dfn{STREAMS} queues for a timer message.

@item @b{mi_reallocb}(9)
Reallocated a @dfn{STREAMS} message block.

@item @b{mi_reuse_proto}(9)
Reuse a @dfn{STREAMS} protocol message block.

@item @b{mi_set_sth_copyopt}(9)
Set the @dfn{STREAMS} Stream head copy options.

@item @b{mi_set_sth_hiwat}(9)
Set the @dfn{STREAMS} Stream head high water mark.

@item @b{mi_set_sth_lowat}(9)
Set the @dfn{STREAMS} Stream head low water mark.

@item @b{mi_set_sth_maxblk}(9)
Set the @dfn{STREAMS} Stream head maximum block size.

@item @b{mi_set_sth_wroff}(9)
Set the @dfn{STREAMS} Stream head write offset.

@item @b{mi_sprintf}(9)
@manpage{@b{sprintf}(9)} replacement.

@item @b{mi_sprintf_putc}(9)
Put a character in a sprintf buffer.

@item @b{mi_strcmp}(9)
@manpage{@b{strcmp}(9)} replacement.

@item @b{mi_strlen}(9)
@manpage{@b{strlen}(9)} replacement.

@item @b{mi_strlog}(9)
@manpage{@b{strlog}(9)} replacement.

@item @b{mi_strtol}(9)
@manpage{@b{strtol}(9)} replacement.

@item @b{mi_timer}(9)
Process a @dfn{STREAMS} timer.

@item @b{mi_timer_alloc}(9)
Allocate a @dfn{STREAMS} timer.

@item @b{mi_timer_cancel}(9)
Cancel a @dfn{STREAMS} timer.

@item @b{mi_timer_free}(9)
Free a @dfn{STREAMS} timer.

@item @b{mi_timer_move}(9)
Move a @dfn{STREAMS} timer.

@item @b{mi_timer_q_switch}(9)
Switch queues for a @dfn{STREAMS} timer.

@item @b{mi_timer_stop}(9)
Stop a @dfn{STREAMS} timer.

@item @b{mi_timer_valid}(9)
Check a @dfn{STREAMS} timer.

@item @b{mi_zalloc}(9)
@manpage{@b{kmem_zalloc}(9)} replacement.

@item @b{mi_zalloc_sleep}(9)
@manpage{@b{kmem_zalloc}(9)} replacement.

@end ftable

@ftable @manref

@item @b{mi_tpi_ack_alloc}(9)
Allocate a @manpage{@b{T_OK_ACK}(7)} or @manpage{@b{T_ERROR_ACK}(7)} primitive.

@item @b{mi_tpi_conn_con}(9)
Generate a @manpage{@b{T_CONN_CON}(7)} primitive.

@item @b{mi_tpi_conn_ind}(9)
Generate a @manpage{@b{T_CONN_IND}(7)} primitive.

@item @b{mi_tpi_conn_req}(9)
Generate a @manpage{@b{T_CONN_REQ}(7)} primitive.

@item @b{mi_tpi_data_ind}(9)
Generate a @manpage{@b{T_DATA_IND}(7)} primitive.

@item @b{mi_tpi_data_req}(9)
Generate a @manpage{@b{T_DATA_REQ}(7)} primitive.

@item @b{mi_tpi_discon_ind}(9)
Generate a @manpage{@b{T_DISCON_IND}(7)} primitive.

@item @b{mi_tpi_discon_req}(9)
Generate a @manpage{@b{T_DISCON_REQ}(7)} primitive.

@item @b{mi_tpi_err_ack_alloc}(9)
Generate a @manpage{@b{T_ERROR_ACK}(7)} primitive.

@item @b{mi_tpi_exdata_ind}(9)
Generate a @manpage{@b{T_EXDATA_IND}(7)} primitive.

@item @b{mi_tpi_exdata_req}(9)
Generate a @manpage{@b{T_EXDATA_REQ}(7)} primitive.

@item @b{mi_tpi_info_req}(9)
Generate a @manpage{@b{T_INFO_REQ}(7)} primitive.

@item @b{mi_tpi_ok_ack_alloc}(9)
Generate a @manpage{@b{T_OK_ACK}(7)} primitive.

@item @b{mi_tpi_ordrel_ind}(9)
Generate a @manpage{@b{T_ORDREL_IND}(7)} primitive.

@item @b{mi_tpi_ordrel_req}(9)
Generate a @manpage{@b{T_ORDREL_REQ}(7)} primitive.

@item @b{mi_tpi_uderror_ind}(9)
Generate a @manpage{@b{T_UDERROR_IND}(7)} primitive.

@item @b{mi_tpi_unitdata_ind}(9)
Generate a @manpage{@b{T_UNITDATA_IND}(7)} primitive.

@item @b{mi_tpi_unitdata_req}(9)
Generate a @manpage{@b{T_UNITDATA_REQ}(7)} primitive.

@end ftable

@node Configuration ala Mentat Portable STREAMS
@subsection Configuration ala Mentat Portable STREAMS
@cindex configuration ala mentat portable streams

@node Development
@chapter Development
@cindex development

@menu
* Portable STREAMS Drivers and Modules::
@end menu

@node Portable STREAMS Drivers and Modules
@section Portable @cite{STREAMS} Drivers and Modules
@cindex portable @cite{STREAMS} drivers and modules

In the process of creating the @b{Linux Fast-STREAMS} subsystem in such a way so
as to facilitate portability of @cite{STREAMS} drivers and modules from a wide
range of @cite{UNIX} operating system variants, a number of guidelines for the
development of portable @cite{STREAMS} drivers and modules have been developed.
These guidelines, when adhered to, will allow the resulting driver or module to
be ported to another @cite{STREAMS} implementation with minimal effort.
These portability guidelines are collected here.

@menu
* Memory Allocation::
* Alignment of Message Buffers::
* Disabling and Enabling Queue Procedures::
* Freezing and Unfreezing Streams::
* Passing Messages from Interrupt Service Routines::
* Timeout Call Back and Link Identifiers::
* Synchronization with Timeouts and Callback Functions::
* Synchronization with Callout Functions::
* Synchronization of Drivers and Modules::
* Special STREAMS Message Types::
* Use of Message Allocation Priorities::
* Registration/Deregistration and Device Numbering::
@end menu

@node Memory Allocation
@subsection Memory Allocation

Portable @cite{STREAMS} modules and drivers will always allocate memory using
the SVR4 memory allocators/deallocators:
@iftex
@b{kmem_alloc}(9),
@end iftex
@ifnottex
@inforef{kmem_alloc(9), , *manpages*},
@end ifnottex
@iftex
@b{kmem_zalloc}(9)
@end iftex
@ifnottex
@inforef{kmem_zalloc(9), , *manpages*}
@end ifnottex
and
@iftex
@b{kmem_free}(9).
@end iftex
@ifnottex
@inforef{kmem_free(9), , *manpages*}.
@end ifnottex

Additional eligible allocators are:

@iftex
@b{rmallocmap}(9)
@end iftex
@ifnottex
@inforef{rmallocmap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfreemap}(9)
@end iftex
@ifnottex
@inforef{rmfreemap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc}(9)
@end iftex
@ifnottex
@inforef{rmalloc(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc_wait}(9)
@end iftex
@ifnottex
@inforef{rmalloc_wait(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfree}(9)
@end iftex
@ifnottex
@inforef{rmfree(9), , *manpages*}
@end ifnottex
@iftex
@b{rminit}(9)
@end iftex
@ifnottex
@inforef{rminit(9), , *manpages*}
@end ifnottex
@iftex
@b{rmsetwant}(9)
@end iftex
@ifnottex
@inforef{rmsetwant(9), , *manpages*}
@end ifnottex
@iftex
@b{rmwanted}(9)
@end iftex
@ifnottex
@inforef{rmwanted(9), , *manpages*}
@end ifnottex

Unfortunately, these resource map allocators are not available on
@cite{AIX} so, if portability to the @cite{AIX PSE} is important, then do not
use these allocators.

Additional eligible allocators are:

@iftex
@b{kmem_fast_alloc}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_alloc(9), , *manpages*}
@end ifnottex
@iftex
@b{kmem_fast_free}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_free(9), , *manpages*}
@end ifnottex

@node Alignment of Message Buffers
@subsection Alignment of Message Buffers

@node Disabling and Enabling Queue Procedures
@subsection Disabling and Enabling Queue Procedures

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocson}(9)
@end iftex
@ifnottex
@inforef{qprocson(9), , *manpages*},
@end ifnottex
before returning from its queue open procedure (see
@iftex
@b{qopen}(9)).
@end iftex
@ifnottex
@inforef{qopen(9), , *manpages*}.)
@end ifnottex

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocsoff}(9)
@end iftex
@ifnottex
@inforef{qprocsoff(9), , *manpages*},
@end ifnottex
upon entering its queue close procedure (see
@iftex
@b{qclose}(9)).
@end iftex
@ifnottex
@inforef{qclose(9), , *manpages*}.)
@end ifnottex

@node Freezing and Unfreezing Streams
@subsection Freezing and Unfreezing Streams

@node Passing Messages from Interrupt Service Routines
@subsection Passing Messages from Interrupt Service Routines

@node Timeout Call Back and Link Identifiers
@subsection Timeout Call Back and Link Identifiers

Although buffer callbacks identifiers (see
@iftex
@b{bufcall}(9)),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*}),
@end ifnottex
timeout identifiers (see
@iftex
@b{timeout}(9)),
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}),
@end ifnottex
and multiplexing driver link identifiers (see
@var{I_LINK} and @var{I_PLINK} under
@vindex I_LINK
@vindex I_PLINK
@iftex
@b{streamio}(2)),
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}),
@end ifnottex
are often illustrated as small integer numbers, with some @cite{STREAMS}
implementations, including @b{Linux Fast-STREAMS}, these identifiers are kernel
addresses (pointers) and are never small integer values like 1, 2, or 3.

Also, there is no guarantee that the identifier will be positive.  It is
guaranteed that the returned identifier will not be zero (0).  Zero is used by
these function as a return value to indicate an error.

Portable @cite{STREAMS} drivers and modules will not depend upon the returned
identifier from 
@iftex
@b{bufcall}(9),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*},
@end ifnottex
@iftex
@b{timeout}(9)
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}
@end ifnottex
or
@iftex
@b{streamio}(2)
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}
@end ifnottex
as being any specific range of value.  Portable drivers and modules will save
any returned identifiers in data types that will not loose the precision of the
identifier.

@node Synchronization with Timeouts and Callback Functions
@subsection Synchronization with Timeouts and Callback Functions

@node Synchronization with Callout Functions
@subsection Synchronization with Callout Functions

@node Synchronization of Drivers and Modules
@subsection Synchronization of Drivers and Modules

@node Special STREAMS Message Types
@subsection Special @cite{STREAMS} Message Types

@node Use of Message Allocation Priorities
@subsection Use of Message Allocation Priorities

@node Registration/Deregistration and Device Numbering
@subsection Registration/Deregistration and Device Numbering

@subsubheading UNIX Device Numbering

@quotation
In versions of @cite{UNIX System V} previous to @cite{Release 4}, the major and
minor device numbers were each 8 bit, and they were packed into a 16 bit word
(usually a C Language @var{short} variable).  Under @cite{UNIX System V Release
4}, the device numbers are held in a @samp{dev_t}
@tpindex dev_t
variable, which is often
implemented as a 32 bit integer.  The minor device number is held as 14 bits,
and a further 8 bits are used for the major device number.  @samp{dev_t}
@tpindex dev_t
is ofter
referred to as the "expanded device type", since it allows many more minor
devices than before.

Many drivers were written for earlier releases, an may eventually be ported to
@cite{UNIX System V Release 4}.  In earlier releases, some manufacturers got
around the 256 minor device number limit by using multiple major device numbers
for a device.  Devices were created with different major device numbers (the
external major device number) but they all mapped to the same device driver
entry in the device switch tables (the internal device number).  Even under this
scheme, each major device could only support 256 minor devices, but the driver
could support many more.  This has been recognized in @cite{UNIX System V
Release 4}, and functions are provided to do this mapping; for example, the
function @command{etoimajor}() and so on, give a machine independent interface
to the device number mapping.
@footnote{@cite{The Magic Garden Explained}}
@end quotation

@subsubheading Linux Device Numbering

Versions of the @b{Linux} kernel in the 2.4 kernel series and prior to 2.6 also
provided an 8 bit major device number and an 8 bit minor device number grouped
into a 16-bit combined device number.  Linux 2.6 kernels (and some patched 2.4
kernels) now have larger device numbers.  These extended device numbers are 12
bits for major device number and 20 bits for minor device number, with 32 bits
for the combined device number.

@subsubheading LiS Device Numbering

@cite{LiS} prior to the 2.18.0 release was incapable of providing an internal
representation of the device number and the number of minor device numbers for a
device driver was restricted to 256.  @footnote{Actually, 255 as the kernel
reserved minor device number 255 for expansion.}  Many
@url{http://www.openss7.org/, OpenSS7} device drivers written for @cite{LiS}
would allocate additional major device numbers if required.  Good examples of
devices that require more than 255 minor device numbers are INET clone devices,
SCTP streams, SS7 signalling link streams, MG media channels, etc.  These
streams are often @var{I_PLINK}ed
@vindex I_PLINK
under a multiplexing driver and do not even
consume a system file descriptor.

@subsubheading Linux Fast-STREAMS Device Numbering

@b{Linux Fast-STREAMS} began with extended device numbering.  The @file{specfs}
shadow special character device file system used by @b{Linux Fast-STREAMS} uses
the @samp{inode} number to hold the @samp{dev_t}
@tpindex dev_t
device number instead of the
@samp{inode->i_rdev}, which on older kernels is only a 16-bit @var{short}.

In earlier versions of @b{Linux Fast-STREAMS}, the internal device numbering is
16-bits for major device number and 16-bits for minor device number.  This will
soon be changed to 12-bits for major device number and 20-bits for minor device
number to accommodate the newer @b{Linux} scheme.

On 2.6 @b{Linux} kernels that support the newer extended device numbers,
external device numbers and internal device numbers will be the same.
On 2.4 @b{Linux} kernels with the older 16-bit device numbers, external device
number and internal device numbers will differ.  In some situations, an internal
device number can exists with no corresponding external device number (accessed
only via a clone device or direct access to the mounted @file{specfs} shadow
special character device file system).

@ftable @manref

@item @b{etoimajor}(9)
change external to internal major device number

@item @b{getemajor}(9)
get external major device number

@item @b{geteminor}(9)
get external minor device number

@item @b{itoemajor}(9)
change internal to external major device number

@end ftable

@node Copying
@appendix Copying
@include texi/gpl.texi

@node Documentation License
@appendix Documentation License
@include texi/fdl.texi

@page
@node Indices
@unnumbered Indices
@menu
* Concept Index::		Index of Concepts
* Type Index::			Index of Data Types
* Function Index::		Index of Functions and Macros
* Variable Index::		Index of Variables and Constants
* File Index::			Index of Files and Programs
@end menu

@page
@node Concept Index
@unnumberedsec Concept Index
@printindex cp

@page
@node Type Index
@unnumberedsec Type Index
@printindex tp

@page
@node Function Index
@unnumberedsec Function and Macro Index
@printindex fn

@page
@node Variable Index
@unnumberedsec Variable and Constant Macro Index
@printindex vr

@page
@node File Index
@unnumberedsec Program and File Index
@printindex pg

@page
@shortcontents
@page
@contents
@bye

