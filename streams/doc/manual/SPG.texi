% -*- texinfo -*- vim: ft=texinfo noautoindent nocindent nosmartindent
% =========================================================================
%
% @(#) $Id: SPG.texi,v 0.9.2.18 2005/04/15 21:39:34 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
% Copyright (C) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any success
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2005/04/15 21:39:34 $ by $Author: brian $
%
% =========================================================================

\input texinfo
@setfilename SPG.info
@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide
@settitle @value{MANUAL_TITLE}

@dircategory STREAMS
@direntry
* SPG: (SPG).                   STREAMS Programmer's Guide
@end direntry

@defindex op

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file provides the @value{MANUAL_TYPE} for @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_RELEASE}, last updated @value{PACKAGE_DATE}, of the
@cite{@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
Release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2005  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2005  OpenSS7 Corporation <@uref{http://www.openss7.com/}> @*
Copyright @copyright{} 1997-2000  Brian F. G. Bidulock <@email{bidulock@@openss7.org}> @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
This is texinfo edition @value{PACKAGE_RELEASE} of the @value{MANUAL_TITLE}
documentation, and is consistent with @value{PACKAGE_NAME} @value{PACKAGE_VERSION}.
This manual was developed under the @uref{http://www.openss7.org/, OpenSS7
Project} and was funded in part by
@uref{http://www.openss7.com/, OpenSS7 Corporation}.

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@noindent
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

@noindent
Permission is granted to copy and distribute translations of this manual into
another language, under the same conditions as for modified versions.

@vskip 0pt
@end titlepage
@page

@c Define an index of authors.
@defindex au

@ifnottex
@node Top
@top @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@unnumbered About This Manual
This is Edition @value{PACKAGE_RELEASE}, last updated @value{PACKAGE_DATE}, of @cite{The
@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
release @value{PACKAGE_RELEASE} of the @value{PACKAGE_TITLE} package.
@end ifnottex

@menu
* Acknowledgements::
* Overview::
* Reference::
* Examples::
* Device Numbers::
* Multi-Threading::
* Conformance::
* Portability::
* Copying::
* Documentation License::
* Indices::

 --- The Detailed Node Listing ---

Acknowledgements

* Sponsors::			Sponsors of Linux Fast-STREAMS
* Contributors::		Contributors to Linux Fast-STREAMS

Overview

* Introduction::		An Introduction to Linux Fast-STREAMS
* Concepts::			STREAMS Concepts
* Benefits of STREAMS::		STREAMS Benefits
* What is STREAMS?::		STREAMS Description
* STREAMS Definitions::		STREAMS Definitions
* When to Use STREAMS::		STREAMS Usage
* Application Interface::	STREAMS Application Interface
* Kernel Level::		STREAMS Kernel Facilities
* STREAMS in Operation::	STREAMS Operation

Reference

* Header Files::		STREAMS Header Files
* Drivers::			STREAMS Drivers
* Modules::			STREAMS Modules
* Terminal I/O::		STREAMS Terminal I/O
* Pipes::			STREAMS Pipes
* System Calls::		STREAMS System Calls
* Module Entry Points::		STREAMS Module Entry Points
* Structures::			STREAMS Structures
* Registration::		STREAMS Module and Driver Registration Functions
* Message Handling::		STREAMS Message Handling Functions
* Queue Handling::		STREAMS Queue Handling Functions
* Miscellaneous Functions::	STREAMS Miscellaneous Functions
* Extensions::			STREAMS Extension Functions
* System Controls::		STREAMS System Controls
* /proc Filesystem::		STREAMS /proc Filesystem

Examples

* Module Example::		STREAMS Module Example
* Driver Example::		STREAMS Driver Example

Device Numbers

* External Device Numbers::	External Device Numbering
* Internal Device Numbers::	Internal Device Numbering
* spec Filesystem::		Avoiding Device Numbering
* Clone Device::		Clone Device Numbering
* Named STREAMS Device::	Reusable Device Numbering

Multi-Threading

* Configuration::		MP STREAMS Configuration
* Asynchronous Entry Points::	MP STREAMS Asynchronous Entry Points
* Asynchronous Callbacks::	MP STREAMS Asynchronous Callbacks
* Synchronous Entry Points::	MP STREAMS Synchronous Entry Points
* Synchronous Callbacks::	MP STREAMS Synchronous Callbacks

Conformance

* SVR 4.2 Compatibility::	SVR 4.2 MP DDI/DKI Compatibility
* AIX Compatibility::		AIX 5L Version 5.1 Compatibility
* HP-UX Compatibility::		HP-UX 11.0i v2 Compatibility
* OSF/1 Compatibility::		OSF/1 1.2/Digital UNIX Compatibility
* UnixWare Compatibility::	UnixWare 7.1.3 Compatibility
* Solaris Compatibility::	Solaris 9/SunOS 5.9 Compatibility
* SUX Compatibility::		Super/UX Compatibility
* UXP Compatibility::		UXP/V Compatibility
* LiS Compatibility::		LiS 2.18.1 Compatibility

Portability

* Core Function Support::	Porting with Core Function Support
* SVR 4.2 Portability::		Porting from SVR 4.2 MP
* AIX Portability::		Porting from AIX 5L Version 5.1
* HP-UX Portability::		Porting from HP-UX 11.0i v2
* OSF/1 Portability::		Porting from OSF/1 1.2/Digital UNIX
* UnixWare Portability::	Porting from UnixWare 7.1.3
* Solaris Portability::		Porting from Solaris 9/SunOS 5.9
* SUX Portability::		Porting from Super/UX
* UXP Portability::		Porting from UXP/V
* LiS Portability::		Porting from LiS 2.18.1

Indices

* Concept Index::		Concept Index
* Type Index::			Type Index
* Function Index::		Function Index
* Variable Index::		Variable Index
* File Index::			File Index

@end menu

@c --------------------------------------------------------------------------

@node Acknowledgements
@unnumbered Acknowledgements
@cindex credits

@menu
* Sponsors::			Sponsors of Linux Fast-STREAMS
* Contributors::		Contributors to Linux Fast-STREAMS
@end menu

@node Sponsors
@unnumberedsec Sponsors of @value{PACKAGE_TITLE}
@cindex sponsors

Funding for completion of @value{PACKAGE_TITLE} was provided by:

OpenSS7 Corporation

Additional funding for The OpenSS7 Project was provided by:

@node Contributors
@unnumberedsec Contributors to @value{PACKAGE_TITLE}
@cindex contributors

The primary contributor to @value{PACKAGE_TITLE} is Brian F. G. Bidulock.


@node Overview
@chapter Overview of @value{PACKAGE_TITLE}
@cindex overview
@menu
* Introduction::		An Introduction to Linux Fast-STREAMS
* Concepts::			STREAMS Concepts
* Benefits of STREAMS::		STREAMS Benefits
* What is STREAMS?::		STREAMS Description
* STREAMS Definitions::		STREAMS Definitions
* When to Use STREAMS::		STREAMS Usage
* Application Interface::	STREAMS Application Interface
* Kernel Level::		STREAMS Kernel Facilities
* STREAMS in Operation::	STREAMS Operation
@end menu

This manual documents how to develop and port STREAMS drivers and modules for
@value{PACKAGE_TITLE}.

@node Introduction
@section Introduction
@cindex introduction

The @url{http://www.openss7.org/, OpensSS7 Project},
@cpindex OpenSS7 Project
@file{@value{PACKAGE}-@value{VERSION}} package
@pgindex @value{PACKAGE}-@value{VERSION}
provides an @cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
compatible @cite{STREAMS} implementation for @b{Linux}
@cpindex Linux
2.4 and 2.6 series kernels.

@subsection What is STREAMS?

@cite{STREAMS} is a facility first presented by Dennis M. Ritchie in 1984,@footnote{@cite{A Stream
Input-Output System, AT&T Bell Laboratories Technical Journal 63, No. 8 Part 2 (October, 1984), pp.
1897-1910.}} originally implemented on 4.1BSD and later part of @cite{Bell Laboratories Version
Eight UNIX}, incorporated into
@cite{UNIX System V Release 3.0}
@cpindex UNIX System V Release 3.0
and enhanced in
@cite{UNIX System V Release 4}
@cpindex UNIX System V Release 4
and
@cite{UNIX System V Release 4.2}.
@cpindex UNIX System V Release 4.2
@cite{STREAMS} was used in @cite{SVR4} for terminal input/ouput, pseudo-terminals, pipes, named
pipes (FIFOs), interprocess communication and networking.

@cite{STREAMS} is a facility that allows for a reconfigurable full duplex communications path
(stream) between a user process and a driver in the kernel.  Protocol modules can be pushed onto and
popped from the stream between the user process and driver.  The user process, neighbouring protocol
modules and the driver communicate with each other using a message passing scheme closely related to
MOM (Message Oriented Middleware).  This permits a loose coupling between protocol modules, drivers
and user processes, allowing a third-party and loadable kernel module approach to be taken towards
the provisioning of protocol modules on platforms supporting @cite{STREAMS}.

@subsection Doesn't Linux have STREAMS?

@subsubheading Linux STREAMS (LiS)
@cindex Linux STREAMS (LiS)

@subsubheading Linux Fast-STREAMS (LfS)
@cindex Linux Fast-STREAMS (LfS)

@subsubheading STREAMS for FreeBSD
@cindex FreeBSD

@subsubheading OpenSTREAMS?

@subsection Why STREAMS?

@subsubheading STREAMS versus Sockets

The basic question that is always asked is: "Why use @cite{STREAMS} when you can just use
@b{Linux}'s NET4 BSD Sockets instead?"

The answer to this question is that @cite{STREAMS} provides capabilities for specialized protocols
and streamed input/output requirements (such as media) that are not ammeniable to the sockets
interface or queue mechanisms.

Two examples are SS7 (Signalling System Number 7) which is a specialized Telecommunications protocol
used be switching equipment in the Public Switched Telephone Network; and transfering and
manipulating voice channels associated with telephone call or other telecommunications services.
These are the reasons why the @url{http://www.openss7.org/, OpenSS7 Project}
@cpindex OpenSS7 Project
originally embarked on using @cite{STREAMS}.  You will find that a large number of @cite{SS7} stack
vendors also delivery @cite{UNIX} and even @cite{RTOS} products on @cite{STREAMS}.

Although the BSD Sockets framework was established to permit arbitrary protocols to be implemented
within the framework, it is seldom that BSD Sockets is actually used in this fashion.  There are
several reasons for this.

@itemize

@item  Although BSD Sockets provides a framework for protocol development, it does not provide
many utility functions for working with arbitrary protocols.  Most of the utilities are DARPA
ARPANET specific.

@item Protocol to protocol module interfaces are poorly standardized for the BSD Sockets system,
whereas, protocol to protocol module service interfaces are well defined under OSI for
@cite{STREAMS}.

@item The BSD Sockets interface can easily be applied over @cite{STREAMS} transport protocol
modules; however, the reverse is not true: the @cite{STREAMS} interface cannot easily be provided
over the BSD Sockets protocol modules.@footnote{A case in point is the iBCS.  You will see in the
iBCS suite that, although a basic XTI over Sockets implementation can be provided, none of the
@cite{STREAMS} facilities can be supported.  In constrast the @cite{STREAMS} INET driver that
performs XTI over Sockets with in the @cite{STREAMS} framework is easily implemented as a single
device driver and provides both @cite{iBCS} and @cite{STREAMS} capabilities.}

@item Support in the BSD Sockets model for dynamically loaded protocol (kernel) modules and
administrative reconfiguration of protocols and interfaces for new protocols are poorly supported.

@item The BSD Sockets model has almost no support for banded or priority message queues within the
model and no systemic approach to flow control.

@item The @b{Linux} implementation of BSD Sockets discards much of the general purpose protocol
framework, presumably in the persuit of speed.

@end itemize

@subsubheading Benefits

@subsubheading Criticism

@subsubheading Realities

@subsection Why Fast?

@b{Linux Fast-STREAMS} includes the word @cite{fast} in the name because of the original roots of
the @b{Linux Fast-STREAMS} development effort.  @b{Linux Fast-STREAMS} was originally developed by
the @url{http://www.openss7.org/, OpenSS7 Project} as a production replacement for the
@cite{Linux STREAMS (LiS)}
@cindex Linux STREAMS (LiS)
package previously available from @url{http://www.gcom.com/, GCOM}.
@cindex GCOM
One of the reasons for contemplating a replacement for
@cite{Linux STREAMS (LiS)}
@cindex Linux STREAMS (LiS)
was the dismal performance provided by
@cite{Linux STREAMS (LiS)}.
@cindex Linux STREAMS (LiS)
Other reasons included:
@itemize
@item Mainline Adoption instead of Portability
@item Production Grade
@item SVR 4.2 MP Compatibility
@item Bug Circumvention
@item Major Redesign
@item Scalable
@item Soft Real Time Performance
@item Maintainability
@end itemize

@subsection Why Linux?

Well, @b{Linux} is the only @cite{SVR 4}
@cpindex SVR 4
based system that does not provide @cite{STREAMS}, although @cite{STREAMS} is an essential part of
@cite{SVR 4}.
@cpindex SVR 4
Without @cite{STREAMS}, @b{Linux} is just another @cite{BSD},
@cpindex BSD
and perhaps a bad one.

@subsection Why Compatibility?

@b{Linux Fast-STREAMS} is designed and implemented to be compatible with as many
@cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
based implementations of @cite{STREAMS} as possible.  This is done for several reasons:

@enumerate

@item @i{Porting legacy drivers to @b{Linux}:}

Many legacy @cite{STREAMS} drivers have been written and developed for @cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
or @cite{UNIX} systems based on @cite{SVR 4.2 MP}.
@cpindex SVR 4.2 MP
Remaining compatible with as many implementation as possible permits these legacy drivers to be
easily ported from their native @cite{UNIX} variant to the @b{Linux Fast-STREAMS}
@cpindex Linux Fast-STREAMS (LfS)
environment, thus quickly porting these legacy drivers to @b{Linux}.

@item @i{Leverage of knowledge base:}

Many developers are familiar one or another of the mainstream @cite{UNIX} implemetations of
@cite{SVR 4.2 MP STREAMS}.
@cpindex SVR 4.2 MP, @cite{STREAMS}
By remaining as compatibile as possible with all these implementations of @cite{STREAMS} permits
knowledge and expertise in the @cite{UNIX} variant of @cite{STREAMS} to be transferred and applied
to @b{Linux Fast-STREAMS}
@cpindex Linux Fast-STREAMS (LfS)
on @b{Linux}.

@item @i{Reverse portability:}

Because it is as compatible as possible with other @cite{STREAMS} implemetnations, @cite{STREAMS}
drivers and modules developed on @b{Linux Fast-STREAMS} can easily be ported to other
implementations if a set of compatibility and portability guidelines are followed.  This allows
@cite{STREAMS} drivers and modules developed on the @b{Linux} oeprating system to be used on branded
@cite{UNIX} systems with minimal porting and modification.

@item @i{Standardization:}

By being as compatible as possible with as many @cite{STREAMS} implementations as possible,
@b{Linux Fast-STREAMS}
@cpindex Linux Fast-STREAMS (LfS)
implements an @i{ipso facto} standard.  Unfortunately, the
@cite{OpenGroup}
@cpindex OpenGroup
and
@cite{POSIX}
@cpindex POSIX
have been very lacking in the standardization of internal kernel interfaces such as @cite{STREAMS}.
Maximum compatibility moves close to providing a standard for such interfaces.

@end enumerate

@node Concepts
@section Concepts
@cindex concepts

@subsection Structures
@cindex structures

@subsubsection Driver and Module Switch Tables
@subsubsection User Credentials
@subsubsection Data Blocks
@subsubsection Module Information
@subsubsection Module Statistics
@subsubsection Message Blocks
@subsubsection Queue Bands
@subsubsection Queue Initialization
@subsubsection Queue Information
@subsubsection Stream Table
@subsubsection Stream Administration

@cartouche
@image{SPG_fig01,4in} @center @b{Figure 2-1.  Simple Stream}
@end cartouche

@cartouche
@image{SPG_fig02,4in} @center @b{Figure 2-2.  @cite{STREAMS}-based Pipe}
@end cartouche

@cartouche
@image{SPG_fig03,4in} @center @b{Figure 2-3.  Stream to Communications Driver}
@end cartouche

@cartouche
@image{SPG_fig04,0.5in} @center @b{Figure 2-4.  Queue Pair Allocation}
@end cartouche

@cartouche
@image{SPG_fig05,5in} @center @b{Figure 2-5.  A Message}
@end cartouche

@cartouche
@image{SPG_fig06,5in} @center @b{Figure 2-6.  Messages on a Message Queue}
@end cartouche


@node Benefits of STREAMS
@section Benefits of @cite{STREAMS}
@cindex benefits of @cite{STREAMS}
@cindex @cite{STREAMS}, benefits

@cite{STREAMS} provides a flexible, portable and reusable set of tools for development of @b{Linux}
system communications services.  @cite{STREAMS} allows an easy creation of modules that offer
standard data communications services and the ability to manipulate those modules on a Stream.  From
user level, modules can be dynamically selected and interconnected; kernel programming, assembly,
and link editing are not required to create the interconnection.

@cite{STREAMS} also greatly simplifies the user interface for languages that have complex input and
output requirements.

@subsection Standardized Service Interfaces

@cite{STREAMS} simplifies the creation of modules that present a service interface to any
neighbouring application program, module, or device driver.  A service interface is defined at the
boundary between two neighbours.  In @cite{STREAMS}, a @i{service interface} is a set of messages
and the rules that allow passage of these messages across the boundary.  A module that implements a
service interface will receive a message from a neighbour and respond with an appropriate action
(for example, send back a requires to retransmit) based on the specific message received and the
preceding sequence of messages.

In general, any two modules can be connected anywhere in a Stream.  However, rational sequences are
generally constructed by connecting modules with compatible protocol service interfaces.  For
example, a module that implements an X.25 protocol layer, as shown in Figure 2-13, presents a
protocol service interface at its input and output sides.  In this case, other modules should only
be connected to the input and output side if they have the compatible X.25 service interface.

@subsection Manipulating Modules

@cite{STREAMS} provides the ability to manipulate modules from user level, to interchange modules
with common service interfaces, and to change the service interface to a @cite{STREAMS} user
process.  These capabilities yield further benefits when implementing networking services and
protocols, including:

@itemize
@item User level programs can be independent of underlying protocols and physical communications
media.
@item Network architectures and higher level protocols can be independent of underlying protocols,
drivers, and physical communications media.
@item Higher level services can be created by selecting and connecting lower level services and
protocols.
@end itemize

@subsubsection Protocol Portability

Figure 2-13 shows how the same X.25 protocol module can be used with different drivers on different
machines by implementing compatible service interfaces.  The X.25 protocol module interfaces are
Connection Oriented Network Service (CONS) and Link Access Protocol - Balanced (LAPB).

@subsubsection Protocol Substitution

Alternate protocol modules (and device drivers) can be exchanged on the same machine if they are
implemented to an equivalent service interface.

@subsubsection Protocol Migration

Figure 2-14 illustrates how @cite{STREAMS} can move functions between kernel software and front end
firmware.  A common downstream service interface allows the transport protocol module to be
independent of the number or type of modules below.  The same transport module will connect without
modification to either an X.25 module or X.25 driver that has the same service interface.

By shifting functions between software and firmware, you can produce cost-effective, functionally
equivalent systems over a wide range of configurations.  They can rapidly incorporate technological
advances.  The same transport protocol module can be used on a lower capacity machine, where
economics may preclude the use of front-end hardware, and also on a larger scale system where a
front-end is economically justified.

@subsubsection Module Reusability

Figure 2-15 shows the same canonical module (for example, one that provide delete and kill
processing on character strings) reused in two different Streams.  This module would typically be
implemented as a filter, with no downstream service interface.  In both cases, a tty interface is
presented to the Stream's user process since the module is nearest the Stream head.

@node What is STREAMS?
@section What is @cite{STREAMS}?
@cindex what is @cite{STREAMS}?
@cindex @cite{STREAMS}, what is it?

@node STREAMS Definitions
@section @cite{STREAMS} Definitions
@cindex @cite{STREAMS}, definitions
@cindex definitions, @cite{STREAMS}

@table @i
@item Stream
@item Stream Head
@item Module
@item Driver
@item Messages
@item Queues
@item Stream I/O
@item Multiplexing
@item Polling
@item Flow Control
@end table

@node When to Use STREAMS
@section When to Use @cite{STREAMS}
@cindex when to use @cite{STREAMS}
@cindex @cite{STREAMS}, when to use it?

@node Application Interface
@section How @cite{STREAMS} Works -- Application Interface
@cindex how @cite{STREAMS} works -- application interface
@cindex @cite{STREAMS}, application interface
@cindex application interface, @cite{STREAMS}

@subsection Opening a Stream

@subsection Closing a Stream

@subsection Controlling Data Flow

@node Kernel Level
@section How @cite{STREAMS} Works -- Kernel Level
@cindex how @cite{STREAMS} works -- kernel level
@cindex @cite{STREAMS}, kernel level
@cindex kernel level, @cite{STREAMS}

@subsection Stream Head

@subsection Modules

@subsection Drivers

@subsection Messages

@subsubsection Message Types

@subsection Message Queueing Priority

@subsection Queues

@subsection Multiplexing

@subsection Multithreading

The @b{Linux} 2.6 kernel is multi-threaded to make effective use of symmetric shared-memory
multiprocessor computers.  All parts of the kernel, including @cite{STREAMS} modules and drivers,
must ensure data integrity in a multiprocessing environment.  For the most part, developers must
ensure that concurrently running kernel threads do not attempt to manipulate the same data at the
same time.  The @cite{STREAMS} framework provides multi-threaded (MT) @cite{STREAMS} perimeters,
which allows the developer control over the level of concurrency allowed in a module.  The DDI/DKI
provides several advisory locks for protecting data.

@node STREAMS in Operation
@section @cite{STREAMS} in Operation
@cindex @cite{STREAMS}, operation
@cindex operation, @cite{STREAMS}

@subsection Service Interfaces
@subsection Manipulating Modules
@subsection Protocol Portability
@subsection Protocol Substitution
@subsection Protocol Migration
@subsection Module Reusability

@node Reference
@chapter Reference
@cindex reference
@menu
* Header Files::		STREAMS Header Files
* Drivers::			STREAMS Drivers
* Modules::			STREAMS Modules
* Terminal I/O::		STREAMS Terminal I/O
* Pipes::			STREAMS Pipes
* System Calls::		STREAMS System Calls
* Module Entry Points::		STREAMS Module Entry Points
* Structures::			STREAMS Structures
* Registration::		STREAMS Module and Driver Registration Functions
* Message Handling::		STREAMS Message Handling Functions
* Queue Handling::		STREAMS Queue Handling Functions
* Miscellaneous Functions::	STREAMS Miscellaneous Functions
* Extensions::			STREAMS Extension Functions
* System Controls::		STREAMS System Controls
* /proc Filesystem::		STREAMS /proc Filesystem
@end menu

@node Header Files
@section Header Files
@cindex header files

@node Drivers
@section Drivers
@cindex drivers

@node Modules
@section Modules
@cindex modules

@node Terminal I/O
@section Terminal I/O
@cindex terminal i/o

By default, terminal I/O in a @b{Linux} system does not use @cite{STREAMS}.  It, in fact, uses a
@cite{STREAMS} @samp{pty} emulation.  However, this is only an emulation and does not provide all
@cite{STREAMS} facilities.  It is not possible, for example, on a @b{Linux} @samp{pty} to push or
pop modules from a terminal.  The @b{Linux} @samp{pty} only provides emulation for read/write and
ioctl calls.

A separate auxiliary package for @b{Linux Fast-STREAMS} that provides true @cite{STREAMS}-based
@cite{UNIX'98} compliant pseudo terminals is available.  This is the @code{strtty-0.7a.1} package
available from @url{http://www.openss7.org/, The OpenSS7 Project}.

@node Pipes
@section Pipes
@cindex pipes

@b{Linux Fast-STREAMS} supports @cite{STREMS}-based pipes as an optional feature.
@cite{STREAMS}-based pipes operate as described in the @cite{UNIX SVR4.2 Operating System API
Reference} and the @cite{UNIX System V Release 4 Programmer's Guide: STREAMS}.

By default, pipes created on @b{Linux} by the
@iftex
@b{pipe}(2)
@end iftex
@ifnottex
@inforef{pipe(2), , *manpages*}
@end ifnottex
system call are not @cite{STREAMS}-based.  To get @cite{STREAMS}-based pipes, configure @b{Linux
Fast-STREAMS} with configuration parameter @code{--enable-streams-fifos}.

@b{Linux Fast-STREAMS} also provides a character device based pipe facility using the
@iftex
@b{spx}(4)
@end iftex
@ifnottex
@inforef{spx(4), , *manpages*}
@end ifnottex
driver.

@b{Linux Fast-STREAMS} supports @cite{STREAMS}-based FIFOs (named pipes) as an optional feature.
@cite{STREAMS}-based FIFOs operate as described in the @cite{UNIX SVR4.2 Operating System API
Reference} and the @cite{UNIX System V Release 4 Programmer's Guide: STREAMS}.

By default, FIFOs created on @b{Linux} with the
@iftex
@b{mknod}(8)
@end iftex
@ifnottex
@inforef{mknod(8), , *manpages*}
@end ifnottex
utility are not @cite{STREAMS}-based.  To get @cite{STREAMS}-based FIFOs, configure @b{Linux
Fast-STREAMS} with configuration parameter @code{--enable-streams-fifos}.

@node System Calls
@section System Calls
@cindex system calls

@subsection New System Calls

@subsubheading getmsg(2)
@fnindex getmsg(2)

@subsubheading getpmsg(2)
@fnindex getpmsg(2)

@subsubheading putmsg(2)
@fnindex putmsg(2)

@subsubheading putpmsg(2)
@fnindex putpmsg(2)

@subsubheading fattach(2)
@fnindex fattach(2)

@subsubheading fdetach(2)
@fnindex fdetach(2)
(Note: HP-UX mentions a fdetach system call: I do not know why.)

@subsubheading isastream(2)
@fnindex isastream(2)

@subsection Modifications to Old System Calls

@subsubheading fcntl(2)
@fnindex fcntl(2)

@subsubheading ioctl(2)
@fnindex ioctl(2)

@subsubheading signal(2)
@fnindex signal(2)

@subsubheading poll(2)
@fnindex poll(2)

@subsubheading select(2)
@fnindex select(2)

@subsubheading open(2)
@fnindex open(2)

@subsubheading close(2)
@fnindex close(2)

@subsubheading read(2)
@fnindex read(2)

@subsubheading readv(2)
@fnindex readv(2)

@subsubheading writev(2)
@fnindex writev(2)

@subsubheading pipe(2)
@fnindex pipe(2)

@node Module Entry Points
@section Module entry points
@cindex module entry points

@node Structures
@section Structures
@cindex structures

@subsection STREAMS Structures

@subsubheading cdevsw(9)
@tpindex cdevsw(9)

@subsubheading cred_t(9)
@tpindex cred_t(9)

@subsubheading datab(9)
@tpindex datab(9)

@subsubheading fmodsw(9)
@tpindex fmodsw(9)

@subsubheading module_info(9)
@tpindex module_info(9)

@subsubheading module_stat(9)
@tpindex module_stat(9)

@subsubheading msgb(9)
@tpindex msgb(9)

@subsubheading qband(9)
@tpindex qband(9)

@subsubheading qinit(9)
@tpindex qinit(9)

@subsubheading queinfo(9)
@tpindex queinfo(9)

@subsubheading queue(9)
@tpindex queue(9)

@subsubheading streamtab(9)
@tpindex streamtab(9)

@subsubheading streamadm(9)
@tpindex streamadm(9)

@node Registration
@section Registration
@cindex registration

@subsection @value{PACKAGE_TITLE} Registration

@subsubheading autopush_add(9)
@fnindex autopush_add(9)

@subsubheading autopush_del(9)
@fnindex autopush_del(9)

@subsubheading autopush_find(9)
@fnindex autopush_find(9)

@subsubheading autopush_vml(9)
@fnindex autopush_vml(9)

@subsubheading getadmin(9)
@fnindex getadmin(9)

@subsubheading getmid(9)
@fnindex getmid(9)

@subsubheading register_inode(9)
@fnindex register_inode(9)

@subsubheading register_inode_major(9)
@fnindex register_inode_major(9)

@subsubheading register_inode_minor(9)
@fnindex register_inode_minor(9)

@subsubheading register_strdev(9)
@fnindex register_strdev(9)

@subsubheading register_strdev_major(9)
@fnindex register_strdev_major(9)

@subsubheading register_strdev_minor(9)
@fnindex register_strdev_minor(9)

@subsubheading register_strmod(9)
@fnindex register_strmod(9)

@subsubheading unregister_inode(9)
@fnindex unregister_inode(9)

@subsubheading unregister_inode_major(9)
@fnindex unregister_inode_major(9)

@subsubheading unregister_inode_minor(9)
@fnindex unregister_inode_minor(9)

@subsubheading unregister_strdev(9)
@fnindex unregister_strdev(9)

@subsubheading unregister_strdev_major(9)
@fnindex unregister_strdev_major(9)

@subsubheading unregister_strdev_minor(9)
@fnindex unregister_strdev_minor(9)

@subsubheading unregister_strmod(9)
@fnindex unregister_strmod(9)

@node Message Handling
@section Message Handling
@cindex message handling

@subsection STREAMS Message Handling Utilities

@subsubheading adjmsg(9)
@fnindex adjmsg(9)

@subsubheading allocb(9)
@fnindex allocb(9)

@subsubheading bufcall(9)
@fnindex bufcall(9)

@subsubheading copyb(9)
@fnindex copyb(9)

@subsubheading copymsg(9)
@fnindex copymsg(9)

@subsubheading datamsg(9)
@fnindex datamsg(9)

@subsubheading dupb(9)
@fnindex dupb(9)

@subsubheading dupmsg(9)
@fnindex dupmsg(9)

@subsubheading esballoc(9)
@fnindex esballoc(9)

@subsubheading freeb(9)
@fnindex freeb(9)

@subsubheading freemsg(9)
@fnindex freemsg(9)

@subsubheading linkb(9)
@fnindex linkb(9)

@subsubheading msgdsize(9)
@fnindex msgdsize(9)

@subsubheading msgpullup(9)
@fnindex msgpullup(9)

@subsubheading pcmsg(9)
@fnindex pcmsg(9)

@subsubheading pullupmsg(9)
@fnindex pullupmsg(9)

@subsubheading rmvb(9)
@fnindex rmvb(9)

@subsubheading testb(9)
@fnindex testb(9)

@subsubheading unbufcall(9)
@fnindex unbufcall(9)

@subsubheading unlinkb(9)
@fnindex unlinkb(9)

@node Queue Handling
@section Queue Handling
@cindex queue handling

@subsection UP Queue Handling Functions

@subsubheading backq(9)
@fnindex backq(9)

@subsubheading bcanput(9)
@fnindex bcanput(9)

@subsubheading canenable(9)
@fnindex canenable(9)

@subsubheading canput(9)
@fnindex canput(9)

@subsubheading enableok(9)
@fnindex enableok(9)

@subsubheading flushband(9)
@fnindex flushband(9)

@subsubheading flushq(9)
@fnindex flushq(9)

@subsubheading getq(9)
@fnindex getq(9)

@subsubheading insq(9)
@fnindex insq(9)

@subsubheading noenable(9)
@fnindex noenable(9)

@subsubheading OTHERQ(9)
@fnindex OTHERQ(9)

@subsubheading putbq(9)
@fnindex putbq(9)

@subsubheading putctl(9)
@fnindex putctl(9)

@subsubheading putctl1(9)
@fnindex putctl1(9)

@subsubheading putq(9)
@fnindex putq(9)

@subsubheading qenable(9)
@fnindex qenable(9)

@subsubheading qreply(9)
@fnindex qreply(9)

@subsubheading qsize(9)
@fnindex qsize(9)

@subsubheading RD(9)
@fnindex RD(9)

@subsubheading rmvq(9)
@fnindex rmvq(9)

@subsubheading SAMESTR(9)
@fnindex SAMESTR(9)

@subsubheading WR(9)
@fnindex WR(9)

@subsection MP Queue Handling Functions

@subsubheading bcanputnext(9)
@fnindex bcanputnext(9)

@subsubheading canputnext(9)
@fnindex canputnext(9)

@subsubheading freezestr(9)
@fnindex freezestr(9)

@subsubheading put(9)
@fnindex put(9)

@subsubheading putnext(9)
@fnindex putnext(9)

@subsubheading putnextctl1(9)
@fnindex putnextctl1(9)

@subsubheading putnextctl(9)
@fnindex putnextctl(9)

@subsubheading qprocsoff(9)
@fnindex qprocsoff(9)

@subsubheading qprocson(9)
@fnindex qprocson(9)

@subsubheading strqget(9)
@fnindex strqget(9)

@subsubheading strqset(9)
@fnindex strqset(9)

@subsubheading unfreezestr(9)
@fnindex unfreezestr(9)

@node Miscellaneous Functions
@section Miscellaneous Functions
@cindex miscellaneous functions

@subsection Miscellaneous DDI/DKI Functions

@subsubheading kmem_alloc(9)
@fnindex kmem_alloc(9)

@subsubheading kmem_free(9)
@fnindex kmem_free(9)

@subsubheading kmem_zalloc(9)
@fnindex kmem_zalloc(9)

@subsubheading cmn_err(9)
@fnindex cmn_err(9)

@subsubheading bcopy(9)
@fnindex bcopy(9)

@subsubheading bzero(9)
@fnindex bzero(9)

@subsubheading copyin(9)
@fnindex copyin(9)

@subsubheading copyout(9)
@fnindex copyout(9)

@subsubheading delay(9)
@fnindex delay(9)

@subsubheading drv_getparm(9)
@fnindex drv_getparm(9)

@subsubheading drv_hztomsec(9)
@fnindex drv_hztomsec(9)

@subsubheading drv_hztousec(9)
@fnindex drv_hztousec(9)

@subsubheading drv_msectohz(9)
@fnindex drv_msectohz(9)

@subsubheading drv_priv(9)
@fnindex drv_priv(9)

@subsubheading drv_usectohz(9)
@fnindex drv_usectohz(9)

@subsubheading drv_usecwait(9)
@fnindex drv_usecwait(9)

@subsubheading max(9)
@fnindex max(9)

@subsubheading min(9)
@fnindex min(9)

@subsubheading getmajor(9)
@fnindex getmajor(9)

@subsubheading getminor(9)
@fnindex getminor(9)

@subsubheading makedevice(9)
@fnindex makedevice(9)

@subsubheading mknod(9)
@fnindex mknod(9)

@subsubheading mount(9)
@fnindex mount(9)

@subsubheading strlog(9)
@fnindex strlog(9)

@subsubheading timeout(9)
@fnindex timeout(9)

@subsubheading umount(9)
@fnindex umount(9)

@subsubheading unlink(9)
@fnindex unlink(9)

@subsubheading untimeout(9)
@fnindex untimeout(9)

@node Extensions
@section Extensions
@cindex extensions

@subsection Common Extensions

@subsubheading linkmsg(9)
@fnindex linkmsg(9)

@subsubheading putctl2(9)
@fnindex putctl2(9)

@subsubheading putnextctl2(9)
@fnindex putnextctl2(9)

@subsubheading weldq(9)
@fnindex weldq(9)

@subsubheading unweldq(9)
@fnindex unweldq(9)

@subsection @value{PACKAGE_TITLE} Extensions

@subsubheading allocq(9)
@fnindex allocq(9)

@subsubheading bcanget(9)
@fnindex bcanget(9)

@subsubheading canget(9)
@fnindex canget(9)

@subsubheading freeq(9)
@fnindex freeq(9)

@subsubheading qattach(9)
@fnindex qattach(9)

@subsubheading qclose(9)
@fnindex qclose(9)

@subsubheading qdetach(9)
@fnindex qdetach(9)

@subsubheading qopen(9)
@fnindex qopen(9)

@subsubheading setq(9)
@fnindex setq(9)

@subsection Extensions from LiS 2.18.1
@cindex extensions from LiS 2.18.1
@cindex LiS 2.18.1, extensions
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@subsubheading appq(9)
@fnindex appq(9)

@subsubheading esbbcall(9)
@fnindex esbbcall(9)

@subsubheading isdatablk(9)
@fnindex isdatablk(9)

@subsubheading isdatamsg(9)
@fnindex isdatamsg(9)

@subsubheading kmem_zalloc_node(9)
@fnindex kmem_zalloc_node(9)

@subsubheading msgsize(9)
@fnindex msgsize(9)

@subsubheading qcountstrm(9)
@fnindex qcountstrm(9)

@subsubheading xmsgsize(9)
@fnindex xmsgsize(9)

@subsection SVR 4.2 MP DDI/DKI Compatibility Functions
@cindex SVR 4.2 MP, compatibility functions
@cindex compatibility functions, SVR 4.2 MP
@cindex SVR 4.2 MP

@subsubheading @cite{SVR 4.2 MP} Core Functions
@cpindex core functions, SVR 4.2 MP
@cpindex SVR 4.2 MP, core functions
@cpindex SVR 4.2 MP

@ftable @command

@item lbolt(9)
Time in ticks since reboot.

@end ftable

@subsubheading @cite{SVR 4.2 MP} Compatibility Module
@cpindex compatibility module, SVR 4.2 MP
@cpindex SVR 4.2 MP, compatibility module
@cpindex SVR 4.2 MP

@ftable @command

@item itimeout(9)
Perform a timeout at an interrupt level.

@item major(9)
Get the internal major number of a device.

@item makedev(9)
Make a device number from internal major and minor device numbers.

@item minor(9)
Get the internal minor number of a device.

@item sleep(9)
Put a process to sleep.

@item vtop(9)
Convert virtual to physical address.

@item wakeup(9)
Wake a process.

@end ftable

@unnumberedsubsubsec Atomic Integers

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating atomic integers.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating atomic integers.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item ATOMIC_INT_ADD(9)
Add an integer value to an atomic integer.

@item ATOMIC_INT_ALLOC(9)
Allocate and initalize an atomic integer.

@item ATOMIC_INT_DEALLOC(9)
Deallocate an atomic integer.

@item ATOMIC_INT_DECR(9)
Decrement and test an atomic integer.

@item ATOMIC_INT_INCR(9)
Increment an atomic integer.

@item ATOMIC_INT_INIT(9)
Initialize an atomic integer.

@item ATOMIC_INT_READ(9)
Read an atomic integer.

@item ATOMIC_INT_SUB(9)
Subtract and integer value from an atomic integer.

@item ATOMIC_INT_WRITE(9)
Write an integer value to an atomic integer.

@end ftable

@unnumberedsubsubsec Basic Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating basic (spin) locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating spin locks.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item LOCK(9)
Lock a basic lock.

@item LOCK_ALLOC(9)
Allocate a basic lock.

@item LOCK_DEALLOC(9)
Deallocate a basic lock.

@item LOCK_OWNED(9)
Determine whether a basic lock is head by the caller.

@item TRYLOCK(9)
Try to lock a basic lock.

@item UNLOCK(9)
Unlock a basic lock.

@end ftable

@unnumberedsubsubsec STREAMS Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
defines a set of @cite{STREAMS}-specific locks.  The @b{Linux} kernel
@cindex Linux
does not provide these functions.  @b{Linux Fast-STREAMS} has some equivalent internal functions.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
tehse functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item MPSTR_QLOCK(9)
Release a queue from exclusive access.

@item MPSTR_QRELE(9)
Acquire a queue for exclusive access.

@item MPSTR_STPLOCK(9)
Acquire a stream head for exclusive access.

@item MPSTR_STPRELE(9)
Release a stream head from exclusive access.

@end ftable

@unnumberedsubsubsec Read/Write Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating read-write locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating spin locks.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item RW_ALLOC(9)
Allocate and initialize a read/write lock.

@item RW_DEALLOC(9)
Deallocate a read/write lock.

@item RW_RDLOCK(9)
Acquire a read/write lock in read mode.

@item RW_TRYRDLOCK(9)
Attempt to acquire a read/write lock in read mode.

@item RW_TRYWRLOCK(9)
Attempt to acquire a read/write lock in write mode.

@item RW_UNLOCK(9)
Release a read/write lock.

@item RW_WRLOCK(9)
Acquire a read/write lock in write mode.

@end ftable

@unnumberedsubsubsec Priority Levels

@ftable @command

@item spl0(9)
Set priority level 0.

@item spl1(9)
Set priority level 1.

@item spl2(9)
Set priority level 2.

@item spl3(9)
Set priority level 3.

@item spl4(9)
Set priority level 4.

@item spl5(9)
Set priority level 5.

@item spl6(9)
Set priority level 6.

@item spl7(9)
Set priority level 7.

@item spl(9)
Set priority level.

@item splx(9)
Set priority level x.

@end ftable

@unnumberedsubsubsec Sleep Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating sleep locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating semaphores.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item SLEEP_ALLOC(9)
Allocate a sleep lock.

@item SLEEP_DEALLOC(9)
Deallocate a sleep lock.

@item SLEEP_LOCK(9)
Acquire a sleep lock.

@item SLEEP_LOCKAVAIL(9)
Determine whether a sleep lock is available.

@item SLEEP_LOCKOWNED(9)
Determine whether a sleep lock is held by the caller.

@item SLEEP_LOCK_SIG(9)
Acquire a sleep lock.

@item SLEEP_TRYLOCK(9)
Attempt to acquire a sleep lock.

@item SLEEP_UNLOCK(9)
Release a sleep lock.

@end ftable

@unnumberedsubsubsec Synchronization Variables

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating synchronization variables.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating wait queues.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item SV_ALLOC(9)
Allocate a basic condition variable.

@item SV_BROADCAST(9)
Broadcast a basic condition variable.

@item SV_DEALLOC(9)
Deallocate a basic condition variable.

@item SV_SIGNAL(9)
Signal a basic condition variable.

@item SV_WAIT(9)
Wait on a basic condition variable.

@item SV_WAIT_SIG(9)
Interruptible wait on a basic condition variable.

@end ftable

@unnumberedsubsubsec Resource Allocation

@ftable @command

@item rmalloc(9)
Allocate a number of units from a resource map.

@item rmallocmap(9)
Allocated a resource map.

@item rmallocmap_wait(9)
Allocated a resource map.

@item rmalloc_wait(9)
Allocate a number of units from a resource map.

@item rmfree(9)
Free a number of units from a resource map.

@item rmfreemap(9)
Free a resource map.

@item rmget(9)
Allocated a number of units from a resource map.

@item rminit(9)
Initialize a resource map.

@item rmsetwant(9)
Wait for resources on a resource map.

@item rmwanted(9)
Waiters on a resource map.

@end ftable

@subsection AIX 5L Version 5.1 Compatibility Functions
@cindex AIX 5L Version 5.1, compatibility functions
@cindex compatibility functions, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1
@cindex AIX PSE
@cindex AIX

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with the @cite{AIX
5L Version 5.1 Portable STREAMS Environment (PSE)}:

@subsubheading @cite{AIX} Core Functions
@cpindex core functions, AIX
@cpindex AIX, core functions
@cpindex AIX

The functions in this section are provided as part of the core functions provided in the @b{Linux
Fast-STREASM} @cite{STREAMS} subsystem:

@ftable @asis

@item @b{putctl2}(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.

Many @cite{STREAMS} implementations provide this function.  When the errors that can be delivered to
the Stream Head in a @var{M_ERROR} message were broken from a single read/write error condition to a
separate read and write error condition, the
@b{putctl}(9)
@fnindex @b{putctl}(9)
function lost much of its utility.  Implementation of a
@b{putctl2}(9)
@fnindex @b{putctl2}(9)
function provides a similary capability for read/write error conditions as
@b{putctl}(9)
@fnindex @b{putctl}(9)
provided for combined error conditions previously.

@cite{AIX} implements this function.  @b{Linux Fast-STREAMS} provides this function for
compatibility with @cite{AIX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.

@b{putctl2}(9)
@fnindex @b{putctl2}(9)
is not very useful in an @i{MP} environment, where one really wants to place @var{M_ERROR} messages
on the @i{upstream} queue.  The function for that in the @i{MP} environment is
@b{putnextctl2}(9).
@fnindex @b{putnextctl2}(9)
@cite{AIX} does not implement the
@b{putnextctl2}(9)
@fnindex @b{putnextctl2}(9)
function, which is somewhat suprising, but then @cite{AIX} does not really handle @i{MP} enviroments
the same way that @cite{SVR 4.2 MP} does: the @cite{AIX Portable STREAMS Environment (PSE)} is
essentially single threaded, and @cite{AIX PSE} does not implement @var{QHLIST} meaning that the
synchronization for protecting dereferencing of @samp{q->q_next} pointers is not present.

@item @b{splstr}(9)
Set or restore priority levels.

Although @b{Linux Fast-STREAMS} does not interpret priority levels in the same fashion as @cite{SVR
4.2 MP}, the
@b{splstr}(9)
@fnindex @b{splstr}(9)
is provided in support of @cite{AIX} and other @cite{STREAMS} implementations.

@cite{AIX} also does not interpret priority levels in the same manner, but provides
@b{splstr}(9)
@fnindex @b{splstr}(9)
and
@b{splx}(9)
@fnindex @b{splx}(9)
functions in support of @cite{STREAMS}.

@item @b{splx}(9)
Set or restore priority levels.

Although @b{Linux Fast-STREAMS} does not interpret priority levels in the same fashion as @cite{SVR
4.2 MP}, the
@b{splx}(9)
@fnindex @b{splx}(9)
is provided in support of @cite{AIX} and other @cite{STREAMS} implementations.

@cite{AIX} also does not interpret priority levels in the same manner, but provides
@b{splstr}(9)
@fnindex @b{splstr}(9)
and
@b{splx}(9)
@fnindex @b{splx}(9)
functions in support of @cite{STREAMS}.

@item @b{unweldq}(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item @b{weldq}(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable


@subsubheading @cite{AIX} Compatibility Module
@cpindex compatibility module, AIX
@cpindex AIX, compatibility module
@cpindex AIX

The functions in this section are provided as part of the @cite{AIX Compatibility Module} contained
in the @file{streams-aixcompat.o} kernel module.

@ftable @asis

@item @b{mi_bufcall}(9)
Reliable alternative to @b{buffcall}(9).

@b{mi_bufcall}(9)
@fnindex @b{mi_bufcall}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{mi_close_comm}(9)
@cite{STREAMS} common minor device close utility.

@b{mi_close_comm}(9)
@fnindex @b{mi_close_comm}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{mi_next_ptr}(9)
@cite{STREAMS} minor device list traversal.

@b{mi_next_ptr}(9)
@fnindex @b{mi_next_ptr}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{mi_open_comm}(9)
@cite{STREAMS} common minor device open utility.

@b{mi_open_comm}(9)
@fnindex @b{mi_open_comm}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{mi_prev_ptr}(9)
@cite{STREAMS} minor device list traversal.

@b{mi_prev_ptr}(9)
@fnindex @b{mi_prev_ptr}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{str_install}(9)
Install a @cite{STREAMS} module or driver.

@b{str_install}(9)
@fnindex @b{str_install}(9)
is the @cite{AIX}-specific driver and module registration and deregistration facility.  This
facility is fashioned after the @cite{SVR 4.2 MP} facility.  @b{Linux Fast-STREAMS} provides an
@cite{AIX} version of this function in support of @cite{AIX}.
Only the @cite{SVR 4.2 MP} version of this function will be used by portable @cite{STREAMS} modules
and drivers intended to be portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{wantio}(9)
Perform direct I/O from a @cite{STREAMS} driver.

@b{wantio}(9)
@fnindex @b{wantio}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item @b{wantmsg}(9)
Provide a filter of wanted messages from a @cite{STREAMS} module.

@b{wantmsg}(9)
@fnindex @b{wantmsg}(9)
is an @cite{AIX}-specific function.  @b{Linux Fast-STREAMS} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@end ftable

@subsection HP-UX 11.0i v2 Compatibility Functions
@cindex HP-UX 11.0i v2, compatibility functions
@cindex compatibility functions, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2
@cindex HP-UX

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with
@cite{HP-UX 11.0i v2}:

@subsubheading @cite{HP-UX} Core Functions
@cpindex HP-UX, core functions
@cpindex core functions, HP-UX
@cpindex HP-UX

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with the
@cite{HP-UX 11.0i v2 STREAMS/UX}:

@ftable @asis

@item @b{putctl2}(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.

Many @cite{STREAMS} implementations provide this function.  When the errors that can be delivered to
the Stream Head in a @var{M_ERROR} message were broken from a single read/write error condition to a
separate read and write error condition, the
@b{putctl}(9)
@fnindex @b{putctl}(9)
function lost much of its utility.  Implementation of a
@b{putctl2}(9)
@fnindex @b{putctl2}(9)
function provides a similary capability for read/write error conditions as
@b{putctl}(9)
@fnindex @b{putctl}(9)
provided for combined error conditions previously.

@cite{HP-UX} implements this function.  @b{Linux Fast-STREAMS} provides this function for
compatibility with @cite{HP-UX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.

@item @b{putnextctl2}(9)
Put a 2 byte control message on the downstream @cite{STREAMS} message queue.

Many @cite{STREAMS} @i{MP} implementations provide this function.  When the errors that can be
delivered to the Stream Head in a @var{M_ERROR} message were broken from a single read/write error
condition to a separate read and write error condition, the
@b{putnextctl}(9)
@fnindex @b{putnextctl}(9)
function lost much of its utility.  Implementation of a
@b{putnextctl2}(9)
@fnindex @b{putnextctl2}(9)
function provides a similary capability for read/write error conditions as
@b{putnextctl}(9)
@fnindex @b{putnextctl}(9)
provided for combined error conditions previously.

@cite{HP-UX} implements this function.  @b{Linux Fast-STREAMS} provides this function for
compatibility with @cite{HP-UX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.


@item @b{unweldq}(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item @b{weldq}(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable

@subsubheading @cite{HP-UX} Compatibility Module
@cpindex HP-UX, compatibility module
@cpindex compatibility module, HP-UX
@cpindex HP-UX

The functions in this section are provided as part of the @cite{HP-UX Compatibility Module} contained
in the @file{streams-hpuxcompat.o} kernel module.

@ftable @asis

@item @b{str_install}(9)
Install a @cite{STREAMS} module or driver.

@b{str_install}(9)
@fnindex @b{str_install}(9)
is the @cite{HP-UX}-specific driver and module registration facility.  This facility is fashioned
after the @cite{SVR 4.2 MP} facility.  @b{Linux Fast-STREAMS} provides an @cite{HP-UX} version of
this function in support of @cite{HP-UX}.  Only the @cite{SVR 4.2 MP} version of this function will
be used by portable @cite{STREAMS} modules and drivers intended to be portable across @cite{STREAM}
implementations based on @cite{SVR 4.2 MP}.

@item @b{str_uninstall}(9)
Uninstall a @cite{STREAMS} module or driver.

@b{str_uninstall}(9)
@fnindex @b{str_uninstall}(9)
is the @cite{HP-UX}-specific driver and module deregistration facility.  This facility is fashioned
after the @cite{SVR 4.2 MP} facility.  @b{Linux Fast-STREAMS} provides an @cite{HP-UX} version of
this function in support of @cite{HP-UX}.  Only the @cite{SVR 4.2 MP} version of this function will
be used by portable @cite{STREAMS} modules and drivers intended to be portable across @cite{STREAM}
implementations based on @cite{SVR 4.2 MP}.

@item @b{streams_get_sleep_lock}(9)
Provide access to the global sleep lock.

@item @b{streams_put}(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@end ftable

@subsection OSF/1 1.2/Digital UNIX Compatibility Functions
@cindex OSF/1 1.2/Digital UNIX, compatibility functions
@cindex compatibility functions, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@subsubheading @cite{OSF/1} Core Functions
@cpindex core functions, OSF/1
@cpindex OSF/1, core functions
@cpindex OSF/1

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with the
@cite{OSF/1 1.2/Digital UNIX}:

@ftable @asis

@item @b{unweldq}(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item @b{weldq}(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable

@subsubheading @cite{OSF/1} Compatibility Module
@cpindex compatibility module, OSF/1
@cpindex OSF/1, compatibility module
@cpindex OSF/1

The functions in this section are provided as part of the @cite{OSF/1 Compatibility Module} contained
in the @file{streams-osfcompat.o} kernel module.

@ftable @asis

@item @b{lbolt}(9)
Time in ticks since reboot.

@item @b{puthere}(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@item @b{streams_close_comm}(9)
Common minor device close utility.

@item @b{streams_open_comm}(9)
Common minor device open utility.

@item @b{streams_open_ocomm}(9)
Common minor device open utility.

@item @b{strmod_add}(9)
Add a @cite{STREAMS} module.

@item @b{strmod_del}(9)
Delete a @cite{STREAMS} module or driver from the kernel.

@item @b{time}(9)
(undoc).

@end ftable

@subsection UnixWare 7.1.3 (OpenUnix 8) Compatibility Functions
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility functions
@cindex compatibility functions, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@subsubheading @cite{UnixWare} Core Functions
@cpindex core functions, UnixWare
@cpindex UnixWare, core functions
@cpindex UnixWare

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with the
@cite{UnixWare 7.1.3 (OpenUnix 8)}:

@ftable @asis
@end ftable

@subsubheading @cite{UnixWare} Compatibility Module
@cpindex compatibility module, UnixWare
@cpindex UnixWare, compatibility module
@cpindex UnixWare

The functions in this section are provided as part of the @cite{UnixWare Compatibility Module} contained
in the @file{streams-uw7compat.o} kernel module.

@ftable @asis

@item @b{allocb_physreq}(9)
Allocate a @cite{STREAMS} message and data block.

@item @b{emajor}(9)
Get the external (real) majore device number from the device number.

@item @b{eminor}(9)
Get the external extended minor device number from the device number.

@item @b{etoimajor}(9)
Convert an external major device number to an internal major device number.

@item @b{getemajor}(9)
Get the external (real) majore device number.

@item @b{geteminor}(9)
Get the external minor device number.

@item @b{itoemajor}(9)
Convert an internal major device number to an external major device number.

@item @b{msgphysreq}(9)
Cause a message block to meet physical requirements.

@item @b{msgpullup_physreq}(9)
Pull up bytes in a @cite{STREAMS} message.

@item @b{msgscgth}(9)
(undoc).

@item @b{printf}(9)
(undoc).

@item @b{strioccall}(9)
(undoc).

@end ftable

@subsection Solaris 9/SunOS 5.9 Compatibility Functions
@cindex Solaris 9/SunOS 5.9, compatibility functions
@cindex compatibility functions, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@subsubheading @cite{Solaris} Core Functions
@cpindex core functions, Solaris
@cpindex Solaris, core functions
@cpindex Solaris

The following functions are provided by @b{Linux Fast-STREAMS} for compatibility with the
@cite{Solaris 9/SunOS 5.9}:

@ftable @asis
@end ftable

@subsubheading @cite{Solaris} Compatibility Module
@cpindex compatibility module, Solaris
@cpindex Solaris, compatibility module
@cpindex Solaris

The functions in this section are provided as part of the @cite{Solaris Compatibility Module} contained
in the @file{streams-suncompat.o} kernel module.

@ftable @asis

@item @b{_fini}(9)

@item @b{_info}(9)

@item @b{_init}(9)

@item @b{attach}(9)
attach a device to the system or resume a suspended device

@item @b{ddi_create_minor_node}(9)
create a minor node for this device

@item @b{ddi_driver_major}(9)
find the major device number associated with a driver

@item @b{ddi_driver_name}(9)
return normalized driver name

@item @b{ddi_get_cred}(9)
get a reference to the credentials of the current user

@item @b{ddi_getiminor}(9)

@item @b{ddi_get_instance}(9)
get device instance number

@item @b{ddi_get_lbolt}(9)
get the current value of the system tick clock

@item @b{ddi_get_pid}(9)

@item @b{ddi_get_soft_state}(9)

@item @b{ddi_get_time}(9)
get the current time in seconds since the epoch

@item @b{ddi_remove_minor_node}(9)
remove a minor node for a device

@item @b{ddi_removing_power}(9)

@item @b{ddi_soft_state}(9)

@item @b{ddi_soft_state_fini}(9)

@item @b{ddi_soft_state_free}(9)

@item @b{ddi_soft_state_init}(9)

@item @b{ddi_soft_state_zalloc}(9)

@item @b{ddi_umem_alloc}(9)
allocate page aligned kernel memory

@item @b{ddi_umem_free}(9)

@item @b{detach}(9)
detach a device from the system or suspend a device

@item @b{getinfo}(9)

@item @b{identify}(9)
determine if a driver is associated with a device

@item @b{install_driver}(9)
install a device driver

@item @b{mod_info}(9)
provides information on a loadable kernel module to the @cite{STREAMS} executive

@item @b{mod_install}(9)
installs a loadable kernel module in the @cite{STREAMS} executive

@item @b{mod_remove}(9)
removes a loadable module from the @cite{STREAMS} executive

@item @b{power}(9)
power a device attached to the system

@item @b{probe}(9)

@item @b{qbufcall}(9)
install a buffer callback

@item @b{qtimeout}(9)
start a timer associated with a queue

@item @b{queclass}(9)

@item @b{qunbufcall}(9)

@item @b{quntimeout}(9)

@item @b{qwait}(9)
wait for a queue message

@item @b{qwait_sig}(9)
wait for a queue message or signal

@item @b{qwriter}(9)

@end ftable

@subsection LiS 2.18.1 Compatibility Functions
@cindex LiS 2.18.1, compatibility functions
@cindex compatibility functions, LiS 2.18.1
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@subsubheading lis_register_strdev(9)
@fnindex lis_register_strdev(9)

@subsubheading lis_register_strmod(9)
@fnindex lis_register_strmod(9)

@subsubheading lis_unregister_strdev(9)
@fnindex lis_unregister_strdev(9)

@subsubheading lis_unregister_strmod(9)
@fnindex lis_unregister_strmod(9)

@subsubheading lis_adjmsg(9)
@fnindex lis_adjmsg(9)

@subsubheading lis_allocb(9)
@fnindex lis_allocb(9)

@subsubheading lis_allocb_physreq(9)
@fnindex lis_allocb_physreq(9)

@subsubheading lis_allocq(9)
@fnindex lis_allocq(9)

@subsubheading lis_appq(9)
@fnindex lis_appq(9)

@subsubheading lis_backq(9)
@fnindex lis_backq(9)

@subsubheading lis_bcanput(9)
@fnindex lis_bcanput(9)

@subsubheading lis_bcanputnext(9)
@fnindex lis_bcanputnext(9)

@subsubheading lis_bcopy(9)
@fnindex lis_bcopy(9)

@subsubheading lis_bufcall(9)
@fnindex lis_bufcall(9)

@subsubheading lis_bzero(9)
@fnindex lis_bzero(9)

@subsubheading lis_canenable(9)
@fnindex lis_canenable(9)

@subsubheading lis_canput(9)
@fnindex lis_canput(9)

@subsubheading lis_canputnext(9)
@fnindex lis_canputnext(9)

@subsubheading lis_cmn_err(9)
@fnindex lis_cmn_err(9)

@subsubheading lis_copyb(9)
@fnindex lis_copyb(9)

@subsubheading lis_copymsg(9)
@fnindex lis_copymsg(9)

@subsubheading lis_datamsg(9)
@fnindex lis_datamsg(9)

@subsubheading lis_date(9)
@fnindex lis_date(9)

@subsubheading lis_dupb(9)
@fnindex lis_dupb(9)

@subsubheading lis_dupmsg(9)
@fnindex lis_dupmsg(9)

@subsubheading lis_enableok(9)
@fnindex lis_enableok(9)

@subsubheading lis_esballoc(9)
@fnindex lis_esballoc(9)

@subsubheading lis_esbbcall(9)
@fnindex lis_esbbcall(9)

@subsubheading lis_find_strdev(9)
@fnindex lis_find_strdev(9)

@subsubheading lis_flushband(9)
@fnindex lis_flushband(9)

@subsubheading lis_flushq(9)
@fnindex lis_flushq(9)

@subsubheading lis_freeb(9)
@fnindex lis_freeb(9)

@subsubheading lis_freemsg(9)
@fnindex lis_freemsg(9)

@subsubheading lis_freeq(9)
@fnindex lis_freeq(9)

@subsubheading lis_getq(9)
@fnindex lis_getq(9)

@subsubheading lis_insq(9)
@fnindex lis_insq(9)

@subsubheading lis_isdatablk(9)
@fnindex lis_isdatablk(9)

@subsubheading lis_isdatamsg(9)
@fnindex lis_isdatamsg(9)

@subsubheading lis_linkb(9)
@fnindex lis_linkb(9)

@subsubheading lis_mknod(9)
@fnindex lis_mknod(9)

@subsubheading lis_mount(9)
@fnindex lis_mount(9)

@subsubheading lis_msgdsize(9)
@fnindex lis_msgdsize(9)

@subsubheading lis_msgpullup(9)
@fnindex lis_msgpullup(9)

@subsubheading lis_msgsize(9)
@fnindex lis_msgsize(9)

@subsubheading lis_noenable(9)
@fnindex lis_noenable(9)

@subsubheading lis_OTHER(9)
@fnindex lis_OTHER(9)

@subsubheading lis_OTHERQ(9)
@fnindex lis_OTHERQ(9)

@subsubheading lis_pullupmsg(9)
@fnindex lis_pullupmsg(9)

@subsubheading lis_putbq(9)
@fnindex lis_putbq(9)

@subsubheading lis_putctl1(9)
@fnindex lis_putctl1(9)

@subsubheading lis_putctl(9)
@fnindex lis_putctl(9)

@subsubheading lis_putnext(9)
@fnindex lis_putnext(9)

@subsubheading lis_putnextctl1(9)
@fnindex lis_putnextctl1(9)

@subsubheading lis_putnextctl(9)
@fnindex lis_putnextctl(9)

@subsubheading lis_putq(9)
@fnindex lis_putq(9)

@subsubheading lis_qattach(9)
@fnindex lis_qattach(9)

@subsubheading lis_qclose(9)
@fnindex lis_qclose(9)

@subsubheading lis_qdetach(9)
@fnindex lis_qdetach(9)

@subsubheading lis_qenable(9)
@fnindex lis_qenable(9)

@subsubheading lis_qopen(9)
@fnindex lis_qopen(9)

@subsubheading lis_qprocsoff(9)
@fnindex lis_qprocsoff(9)

@subsubheading lis_qprocson(9)
@fnindex lis_qprocson(9)

@subsubheading lis_qreply(9)
@fnindex lis_qreply(9)

@subsubheading lis_qsize(9)
@fnindex lis_qsize(9)

@subsubheading lis_RD(9)
@fnindex lis_RD(9)

@subsubheading lis_register_strdev(9)
@fnindex lis_register_strdev(9)

@subsubheading lis_register_strmod(9)
@fnindex lis_register_strmod(9)

@subsubheading lis_rmvb(9)
@fnindex lis_rmvb(9)

@subsubheading lis_rmvq(9)
@fnindex lis_rmvq(9)

@subsubheading lis_safe_canenable(9)
@fnindex lis_safe_canenable(9)

@subsubheading lis_safe_enableok(9)
@fnindex lis_safe_enableok(9)

@subsubheading lis_safe_noenable(9)
@fnindex lis_safe_noenable(9)

@subsubheading lis_safe_OTHERQ(9)
@fnindex lis_safe_OTHERQ(9)

@subsubheading lis_safe_putnext(9)
@fnindex lis_safe_putnext(9)

@subsubheading lis_safe_qreply(9)
@fnindex lis_safe_qreply(9)

@subsubheading lis_safe_RD(9)
@fnindex lis_safe_RD(9)

@subsubheading lis_safe_SAMESTR(9)
@fnindex lis_safe_SAMESTR(9)

@subsubheading lis_safe_WR(9)
@fnindex lis_safe_WR(9)

@subsubheading lis_SAMESTR(9)
@fnindex lis_SAMESTR(9)

@subsubheading lis_stream_utils(9)
@fnindex lis_stream_utils(9)

@subsubheading lis_strqget(9)
@fnindex lis_strqget(9)

@subsubheading lis_strqset(9)
@fnindex lis_strqset(9)

@subsubheading lis_testb(9)
@fnindex lis_testb(9)

@subsubheading lis_timeout(9)
@fnindex lis_timeout(9)

@subsubheading lis_umount2(9)
@fnindex lis_umount2(9)

@subsubheading lis_umount(9)
@fnindex lis_umount(9)

@subsubheading lis_unbufcall(9)
@fnindex lis_unbufcall(9)

@subsubheading lis_unlink(9)
@fnindex lis_unlink(9)

@subsubheading lis_unlinkb(9)
@fnindex lis_unlinkb(9)

@subsubheading lis_unregister_strdev(9)
@fnindex lis_unregister_strdev(9)

@subsubheading lis_unregister_strmod(9)
@fnindex lis_unregister_strmod(9)

@subsubheading lis_untimeout(9)
@fnindex lis_untimeout(9)

@subsubheading lis_version(9)
@fnindex lis_version(9)

@subsubheading lis_WR(9)
@fnindex lis_WR(9)

@subsubheading lis_xmsgsize(9)
@fnindex lis_xmsgsize(9)

@node System Controls
@section System Controls
@cindex system controls

@subsection System Controls

@value{PACKAGE_TITLE} provides and supports a number of system controls that can be accessed using
the /proc/sys/streams/* files, with the
@iftex
@b{sysctl}(2)
@end iftex
@ifnottex
@inforef{sysctl(2), , *manpages*}
@end ifnottex
interface, or using
@iftex
@b{sysctl}(8).
@end iftex
@ifnottex
@inforef{sysctl(8), , *manpages*}.
@end ifnottex

The following STREAMS specific system controls are provided by @value{PACKAGE_TITLE}:

@subsubheading sys.streams.cltime
@vrindex sys.streams.cltime
Defines the default time interval (in milliseconds) that closing stream will linger for messages to
clear its queues before finally closing.  Valid values are zero (0) or greater (MAXINT).  The
default value is the traditional UNIX value of 15,000 milliseconds (15 seconds).  This system
control defines the default for all new streams.  The value for a given stream can be changed with
the
@iftex
@b{streamio}(7)
@end iftex
@ifnottex
@inforef{streamio(7), , *manpages*}
@end ifnottex
IO control
@b{I_CLTIME},
after the stream is opened and before the stream is closed.

@subsubheading sys.streams.max_apush
@vrindex sys.streams.max_apush
Defines the maximum number of modules that can be configured for autopush onto a STREAMS driver.
Valid values are zero (0) or greater (MAXINT).  The default value is the traditional UNIX value of 8
modules.  This system control defines the maximum for all new autopush configurations.  Existing
autopush configurations are unchanged.

@subsubheading sys.streams.max_mblk
@vrindex sys.streams.max_mblk
Defines the maximum number of combined message data blocks that will be held on the per-CPU free
list between runs of
@iftex
@b{runqueues}(9).
@end iftex
@ifnottex
@inforef{runqueues(9), , *manpages*}.
@end ifnottex
Valid values are zero (0) or greater (@b{MAXINT}).  The default value is the traditional @i{UNIX}
value of 10 blocks.  This system control defines the maximum for the next run of
@iftex
@b{runqueues}(9)
@end iftex
@ifnottex
@inforef{runqueues(9), , *manpages*}
@end ifnottex
for all CPUs.  Increasing or decreasing this number may have a positive or negative performance
impact.

@subsubheading sys.streams.max_stramod
@vrindex sys.streams.max_stramod
Defines the maximum number of autopush structures that can be defined for the entire system.  Valid
values are zero (0) or greater (@b{MAXINT}).  The default value is eight (8) ???????  This system
control defines the system-wide maximum.

@subsubheading sys.streams.max_strdev
@vrindex sys.streams.max_strdev
Defines the maximum number of streams devices.  This is normally the maximum number of character
devices (@b{MAX_CHRDEV}).  Valid values are zero (0) or greater (@b{MAXINT}).  The default value is
@b{MAX_CHRDEV} (256).  This is a read-only system control.

@subsubheading sys.streams.max_strmod
@vrindex sys.streams.max_strmod
Defines the maximum number of streams modules.  This is normally the maximum number of character
devices (@b{MAX_CHRDEV}).  Valid values are zero (0) or greater (@b{MAXINT}).  The default value is
@b{MAX_CHRDEV} (256).  This is a read-only system control.

@subsubheading sys.streams.msg_priority
@vrindex sys.streams.msg_priority
Defines whether allocation priority will honoured or whether all allocations will be treated the
same.  See
@iftex
@b{allocb}(9).
@end iftex
@ifnottex
@inforef{allocb(9), , *manpages*}.
@end ifnottex
When true (non-zero), allocation priority will be honoured when allocating message blocks.  When
false (zero), allocation priority will be ignored.  Valid values are zero (0) or non-zero.  The
default value is zero (0).  Changing this value may have a positive or negative impact on system
performance.

@subsubheading sys.streams.nband
@vrindex sys.streams.nband
Defines the number of queue bands available.  Valid values are zero (0) or greater (@b{MAXINT}).
The default value is the traditional UNIX value of 256.  This system control defines the system wide
value.  This system control is read-only.

@subsubheading sys.streams.nstrmsgs
@vrindex sys.streams.nstrmsgs
Defines the maximum number of combined message data blocks that will be allocated.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 2^12.  Changing this value may have a
positive or negative impact on system performance.  Setting this value to a small number may be
useful for debugging @i{STREAMS} drivers and modules.

@subsubheading sys.streams.nstrpush
@vrindex sys.streams.nstrpush
Defines the maximum number of modules that can be pushed on a stream.  This includes both autopushed
modules and modules pushed using the
@b{I_PUSH}
@vrindex I_PUSH
IO control of
@iftex
@b{streamio}(7).
@end iftex
@ifnottex
@inforef{streamio(7), , *manpages*}.
@end ifnottex
Valid values are zero (0) or greater (@b{MAXINT}).  The default value is the traditional @i{UNIX}
value of 64.  This is the default values for all new streams.  Existing streams are unaffected.

@subsubheading sys.streams.hiwat
@vrindex sys.streams.hiwat
Defines the default high water mark (in message bytes) for the stream head.  Valid values are zero
(0) or greater (@b{MAXINT}).  The default value is 5120.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.lowat
@vrindex sys.streams.lowat
Defines the default low water mark (in message bytes) for the stream head.  Valid values are zero
(0) or greater (@b{MAXINT}).  The default value is 1024.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.maxpsz
@vrindex sys.streams.maxpsz
Defines the maximum packet size accepted (in message bytes) for the stream head.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 2^12.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.minpsz
@vrindex sys.streams.minpsz
Defines the minimum packet size accepted (in message bytes) for the stream head.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 0.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.reuse_fmodsw
@vrindex sys.streams.reuse_fmodsw
Defines whether fmodsw table entries will be reused.  When false (zero), fmodsw table entries will
not be reused.  When true (non-zero), fmodsw table entries will be reused.  Valid values are zero
(0) and non-zero.  The default value is false (zero).

@subsubheading sys.streams.rtime
@vrindex sys.streams.rtime
Defines the time interval (in milliseconds) that the stream head will wait to forward held messages
when SNDHOLD is set for the stream head.  Valid values are zero (0) or greater (@b{MAXINT}).  The
default value is 10 milliseconds (one clock tick).  This is the system wide value for all streams.
Changing this value may have a positive or negative impact on system performance.

@subsubheading sys.streams.strhold
@vrindex sys.streams.strhold
Defines whether the @b{SNDHOLD} feature is active or not.  When false (0), the @b{SNDHOLD} feature
is deactivated.  When true (non-zero), the @b{SNDHOLD} feature is activated.  Valid values are zero
(0) or non-zero.  The default value is false (0).  This is the default value for all new streams.
Existing streams are unaffected.  This setting can be examined and altered on an open stream using
the
@b{I_GWROPT}
@vrindex I_GWROPT
and
@b{I_SWROPT}
@vrindex I_SWROPT
IO controls of
@iftex
@b{streamio}(7).
@end iftex
@ifnottex
@inforef{streamio (7), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strctlsz
@vrindex sys.streams.strctlsz
Defines the maximum @i{STREAMS} control part size.  Valid values are zero (0) or greater
(@b{MAXINT}).  The default value is 2^12.  This is the system wide maximum.  Existing allocations
are unaffected by lowering this value.  Changing this value can have an impact on users of
@iftex
@b{putpmsg}(2).
@end iftex
@ifnottex
@inforef{putpmsg (2), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strmsgsz
@vrindex sys.streams.strmsgsz
Defines the maximum @i{STREAMS} message size.  Valid values are zero (0) or greater (@b{MAXINT}).
The default value is 2^18.  This is the system wide maximum.  Existing allocations are unaffected by
lowering this value.  Changing this value can have an impact on users of
@iftex
@b{write}(2),
@end iftex
@ifnottex
@inforef{write (2), , *manpages*},
@end ifnottex
@iftex
@b{writev}(2),
@end iftex
@ifnottex
@inforef{writev (2), , *manpages*},
@end ifnottex
and
@iftex
@b{putpmsg}(2).
@end iftex
@ifnottex
@inforef{putpmsg (2), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strthresh
@vrindex sys.streams.strthresh
Defines the maximum amount of memory that will be allocated for use by the STREAMS subsystem via
@iftex
@b{kmem_alloc}(9)
@end iftex
@ifnottex
@inforef{kmem_alloc (9), , *manpages*}
@end ifnottex
or
@iftex
@b{kmem_zalloc}(9),
@end iftex
@ifnottex
@inforef{kmem_zalloc (9), , *manpages*},
@end ifnottex
or indirectly using
@iftex
@b{allocb}(9)
@end iftex
@ifnottex
@inforef{allocb (9), , *manpages*}
@end ifnottex
or allocating other @i{STREAMS} data structures.  Valid values are zero (0) or greater (@b{MAXINT}).
This is the system wide maximum.  Existing allocations are unaffected by lowering this value.
Changing this value to a low value may have some use in debugging @i{STREAMS} drivers and modules.

@node /proc Filesystem
@section /proc Filesystem
@cindex /proc filesystem

@node Examples
@chapter Examples
@cindex examples
@menu
* Module Example::		STREAMS Module Example
* Driver Example::		STREAMS Driver Example
@end menu

@node Module Example
@section Module Example
@cindex module example

@node Driver Example
@section Driver Example
@cindex driver example

@node Device Numbers
@chapter Device Numbers
@cindex device numbers
@menu
* External Device Numbers::	External Device Numbering
* Internal Device Numbers::	Internal Device Numbering
* Clone Device::		Clone Device Numbering
* Named STREAMS Device::	Reusable Device Numbering
* spec Filesystem::		Avoiding Device Numbering
@end menu

@value{PACKAGE_TITLE} supports the concept of internal and external device numbering with base
majors and extended minors.

@value{PACKAGE_TITLE} uses several device numbering schemes intended to be compatible with SVR 4.2
MP DDI/DKI and implementations based on SVR 4.2
including AIX,
@cindex AIX
HP-UX,
@cindex HP-UX
LiS,
@cindex Linux STREAMS (LiS)
OSF/1,
@cindex OSF/1
Solaris,
@cindex Solaris
Super/UX,
@cindex Super/UX
UnixWare,
@cindex UnixWare
and UXP/V.
@cindex UXP/V

@node External Device Numbers
@section External Device Numbers
@cindex external device numbers
@cindex device numbers, external

@value{PACKAGE_TITLE} provides real external device numbering using the functions
@iftex
@b{getemajor}(9), @b{geteminor}(9) and @b{makedevice}(9).
@end iftex
@ifnottex
@inforef{getemajor(9), , *manpages*},
@inforef{geteminor(9), , *manpages*}
and
@inforef{makedevice(9), ,  *manpages*}.
@end ifnottex
When used on a devp argument passed to the
@iftex
@b{qopen}(9)
@end iftex
@ifnottex
@inforef{qopen(9), , *manpages*}
@end ifnottex
procedures of a STREAMS driver or module,
@iftex
@b{getemajor}(9) and @b{geteminor}(9)
@end iftex
@ifnottex
@inforef{getemajor(9), , *manpages*}
and
@inforef{geteminor(9), , *manpages*}
@end ifnottex
will return the real external major or minor device number.  The real external major or minor device
number is the major or minor device number that is seen by user applications.

A number of administrative utilities are provided that assist with the assignment of device names
and number and are useful in boot scripts:

@multitable @columnfractions .15 .85
@item @dfn{@b{autopush}(8)}
@fnindex autopush(8)
@tab -- verify modules and establish autopush lists
@item @dfn{@b{insf}(8)}
@fnindex insf(8)
@tab -- install special device files
@item @dfn{@b{scls}(8)}
@fnindex scls(8)
@tab -- list @dfn{STREAMS} drivers
@item @dfn{@b{strinfo}(8)}
@fnindex strinfo(8)
@tab -- provide information on @dfn{STREAMS} drivers and modules
@item @dfn{@b{strload}(8)}
@fnindex strload(8)
@tab -- load or unload @dfn{STREAMS} drviers and modules
@item @dfn{@b{strsetup}(8)}
@fnindex strsetup(8)
@tab -- create @dfn{STREAMS} devices
@end multitable

Another approach to establishment of dynamically allocated major device numbers is to use the @cite{LiS}
@cindex Linux STREAMS (LiS)
approach of creating minor device nodes using the @b{mknod}(9) and @b{unlink}(9) facilities provided
by the @cite{LiS}
@cindex Linux STREAMS (LiS)
compatibility module.  But this approach does not work well with demand loading of kernel modules
because it relies upon the @b{Linux} character device demand loading approach, or requires informing
@dfn{STREAMS} of all devices and drivers when @dfn{STREAMS} is being compiled.

@dfn{@value{PACKAGE_TITLE}} supports the @b{Linux} character device module demand loading; however, the
@b{Linux} mechanism requires prior knowledge of the character major device number.  Some of the
administrative utilities above can load kernel modules and establish what major device number was
assigned.  See the individual manual pages for more information.

@node Internal Device Numbers
@section Internal Device Numbers
@cindex internal device numbers
@cindex device numbers, internal

Internal extended minor device number is a scheme whereby the @dfn{STREAMS} device driver does not
have to be concerned with architectural limitations on the number of minor device number available
to user applications (0 to 255 in @b{Linux 2.4}).  Instead, the driver treats the major device
number as a base internal device number against which a range of minor devices can be assigned
(currently 0 to 65535).  For external applications, device numbering consists of multiple (real)
external major device numbers that correspond to a single base internal major device number.
Internal extended device numbering is provided by the @b{getmajor}(9), @b{getminor}(9) and
@b{makedevice}(9) facilities.  Conversions between external (real) major device numbers and internal
(base) major device numbers can be performed with the @b{etoimajor}(9) and @b{itoemajor}(9)
utilities provided by the @dfn{UnixWare} compatibility modules.

Extended device numbering further complicates the matter of dynamic assignment of major device
numbers and makes it harder for boot and configuration scripts to properly create device nodes.

@node Clone Device
@section Clone Device
@cindex clone device

@subsection Traditional Cloning

The @b{clone}(4) driver supports traditional clone devices.  Traditional clone devices work by
assigning the clone major device number and a unique minor device number to a ``clone'' device.
When this device is opened, the minor device number of the device is used as the new major device
number and zero (0) is used as the minor device number, and the @b{qopen}(9) is chained to the
@b{qopen}(9) procedure of the new @b{streamtab}(9) structure resulting from looking up this newly
created device number.  @var{sflag} is always set to @samp{CLONEOPEN} when the traditional clone
driver opens a device.

@b{getemajor}(9), @b{geteminor}(9), @b{getmajor}(9) and @b{getminor}(9) still function as normal on
the resulting @var{devp} argument passed to the ultimate driver's @b{qopen}(9) procedure.  This is
true both for base and extended major device numbers.  The following table illustrates the situation
(assuming that the major device number assigned to the @b{clone}(4) device is 72):

@multitable @columnfractions .25 .25 .25 .25
@item @b{clone}		@tab @b{external}	@tab @b{internal}	@tab @var{sflag}
@item @t{72:32}		@tab @t{32:0}		@tab @t{32:000}		@tab @samp{CLONEOPEN}
@item @t{72:35}		@tab @t{35:0}		@tab @t{32:256}		@tab @samp{CLONEOPEN}
@item @t{72:37}		@tab @t{37:0}		@tab @t{32:512}		@tab @samp{CLONEOPEN}
@end multitable

If a driver wishes to assign an extended major device number in response to a @b{CLONEOPEN}, it
should use @b{makedevice}(9) with the major device number obtained with @b{getmajor}(9) and an
extended minor device number assigned by the driver.  In this way, extended minor device numbers are
transparent to the operation of the @b{clone}(4) driver and @samp{CLONEOPEN}.

@subsection New Cloning

@dfn{@value{PACKAGE_TITLE}} supports the new cloning approach whereby a driver is permitted to alter
the device number returned in the @var{devp} argument to @b{qopen}(9) even though @var{sflag} is set
to @samp{DRVOPEN} instead of @samp{CLONEOPEN}.  The driver, at its discretion, can treat any minor
device number as a new style clone device, although normally minor device number zero (0) is usually
used as the clone minor.

The driver may either use an external (real) major device number or the internal (base) major device
number.  That is, when calling @b{makedevice}(9) to create the device to return to the @var{devp}
argument to @b{qopen}(9), the driver can use an external (real) major device number (returned by
@b{getemajor}(9)) combined with an assigned external (real) minor device number (from 0 to 255); or,
it can use an internal (base) major device number (returned by @b{getmajor}(9)) combined with an
assigned extended minor device number (from 0 to 65535).  The latter approach is often easier to
use.

@node Named STREAMS Device
@section Named STREAMS Device
@cindex named streams device

The @b{nsdev}(4) driver provides for a @dfn{Named STREAMS Device}.  This is a device numbering
approach unique to @dfn{@value{PACKAGE_TITLE}}.  The @b{nsdev}(4) driver operates in a similar manner
to the @b{clone}(4) driver, however, the major number is derived from the prefix name of the device
and the minor number is taken directly from the minor number of the @b{nsdev}(4) device.

The following table summarizes the approach (assuming that the major device numbers assigned to the
@b{nsdev}(4) device are 74, 75, 76 and 77 and the major device numbers assigned to the @b{inet}(4)
driver are 32, 35 and 37):

@multitable @columnfractions .2 .2 .2 .2 .2
@item @b{nsdev}		@tab		@tab @b{external}	@tab @b{internal}	@tab @var{sflag}
@item inet		@tab @t{74:000}	@tab @t{32:000}		@tab @t{32:000}		@tab @samp{DRVOPEN}
@item inet.udp		@tab @t{74:017}	@tab @t{32:017}		@tab @t{32:017}		@tab @samp{DRVOPEN}
@item inet.99		@tab @t{74:099}	@tab @t{32:099}		@tab @t{32:099}		@tab @samp{DRVOPEN}
@item inet.512		@tab @t{76:000}	@tab @t{37:000}		@tab @t{32:512}		@tab @samp{DRVOPEN}
@end multitable

The @b{nsdev}(4) device also has the characteristic that if a device name with a major device number
of the @b{nsdev}(4) device is opened and there is no device loaded that corresponds to the prefix
name of the device from which to obtain a major device number, the @b{nsdev}(4) will attempt to load
the `@t{@b{streams-}@i{prefix}}' kernel module using @b{request_module}(9) and try again: where,
@samp{prefix} is the prefix of the device name up to the first point character (corresponding to a
digit @kbd{.}).  So, in the example above, if the @samp{inet} driver was not loaded, but an attempt
was made to open the @file{/dev/inet.99} device, @dfn{STREAMS} would request the @file{streams-inet}
kernel module be loaded.  This approach simplifies kernel module loading as well as device numbering
and makes it easier for boot scripts to initialize devices.

@node spec Filesystem
@section spec Filesystem
@cindex spec filesystem

Another approach to creation and assignment of device numbers is the mountable @b{specfs}(5) file
system.  The @b{specfs}(5) file system can be mounted to provide an in-kernel device directory
similar to the @b{Linux} @file{devfs} file system and the @dfn{Solaris} devices file system.  The
@b{spefs}(5) file system should normally be mounted on the @file{/dev/streams} subdirectory by
system initialization scripts using a command such as: @command{mount -t specfs none /dev/streams}.
See @b{mount}(8) for more information.  Once mounted over the @file{/dev/streams} subdirectory,
subdirectories of @file{/dev/streams} corresponding to each loaded driver will appear.  So, for
example, when the @b{inet}(4) driver is loaded, the ``inet'' subdirectory will appear at
@file{/dev/streams/inet}.  Within each device subdirectory @file{/dev/streams/@i{devicename}/}, each
instance of the device will appear as a character device named with the instance number of the
device and having the eternal (real) major and external (real) minor device number.

The mounted @b{specfs}(5) file system also has the characteristic that if a device subdirectory
@file{/dev/streams/@i{devname}/} does not exist, but an attempt is made to read such a directory,
@dfn{@value{PACKAGE_TITLE}} will attempt to load kernel module @file{streams-@i{devname}} into the
kernel with @b{request_module}(9).  If the load is successful, the kernel module will register and
the subdirectory will be created and read.

Also, if an attempt is make to open a numbered file within a device subdirectory of
@file{/dev/streams/@i{devname}/@i{nnnn}} where, @samp{nnnn} is an octal, hexadecimal or decimal
ASCII number, @dfn{STREAMS} will open the driver (call @b{qopen}(9) for driver @samp{devname}) with
the instance number resulting from the conversion of the device name @samp{nnnn} to an instance
number.

These two characteristics permit symbolic links to be placed in the @file{/dev} directory that link
to a device name and instance number in the @file{/dev/stream} directory.  An example is given in
the table below:

@multitable @columnfractions .55 .15 .15 .15
@item @b{link} @tab @b{external} @tab @b{internal} @tab @var{sflag}
@item @file{/dev/tcp}@ ->@ @file{/dev/streams/inet/36} @tab @t{30:36} @tab @t{30:36} @tab @samp{DRVOPEN}
@item @file{/dev/udp}@ ->@ @file{/dev/streams/inet/39} @tab @t{30:39} @tab @t{30:39} @tab @samp{DRVOPEN}
@end multitable

In fact, it does not matter what the character device major or minor device number is on the node in
the @b{specfs}(5) file system.  This is because the inode in the file system is directly associated
with the @b{streamtab}(9) structure and instance number without using the normal @b{Linux} character
device mechanisms.  When a device instance exceeds the extended minor device numbering space
assigned to a device driver in the @b{specfs}(5) file system, device number displayed by
@b{stat}(2), @b{lstat}(2) or @b{fstat}(2) is chosen by wrapping the instance number into the
extended minor device numbering space.

This approach makes it unnecessary to statically assign major device numbers, or to dynamically
assign major device numbers to devices in boot scripts, and is by far the easiest approach.  All that
is required by packages at installation is that they establish the necessary symbolic links on
device name and instance number without concern for major device numbers.

@node Multi-Threading
@chapter Multi-Threading
@cindex multi-threading
@menu
* Configuration::		MP STREAMS Configuration
* Asynchronous Entry Points::	MP STREAMS Asynchronous Entry Points
* Asynchronous Callbacks::	MP STREAMS Asynchronous Callbacks
* Synchronous Entry Points::	MP STREAMS Synchronous Entry Points
* Synchronous Callbacks::	MP STREAMS Synchronous Callbacks
@end menu

@node Configuration
@section Configuration
@cindex conformance

@node Asynchronous Entry Points
@section Asynchronous Entry Points
@cindex asynchronous entry points

@node Asynchronous Callbacks
@section Asynchronous Callbacks
@cindex asynchronous callbacks

@node Synchronous Entry Points
@section Synchronous Entry Points
@cindex synchronous entry points

@node Synchronous Callbacks
@section Synchronous Callbacks
@cindex synchronous callbacks

@node Conformance
@chapter Conformance
@cindex conformance
@menu
* SVR 4.2 Compatibility::	SVR 4.2 MP DDI/DKI Compatibility
* AIX Compatibility::		AIX 5L Version 5.1 Compatibility
* HP-UX Compatibility::		HP-UX 11.0i v2 Compatibility
* OSF/1 Compatibility::		OSF/1 1.2/Digital UNIX comptatibility
* UnixWare Compatibility::	UnixWare 7.1.3 Compatibility
* Solaris Compatibility::	Solaris 9/SunOS 5.9 Compatibility
* SUX Compatibility::		Super/UX Compatibility
* UXP Compatibility::		UXP/V Compatibility
* LiS Compatibility::		LiS 2.18.1 Compatibility
@end menu

@node SVR 4.2 Compatibility
@section SVR 4.2 MP DDI/DKI Compatibility
@cindex SVR 4.2 MP, compatibility
@cindex compatibility, SVR 4.2 MP
@cindex SVR 4.2 MP

@node AIX Compatibility
@section AIX 5L Version 5.1 Compatibility
@cindex AIX 5L Version 5.1, compatibility
@cindex compatibility, AIX 5L Version 5.1
@cindex AIX PSE

@node HP-UX Compatibility
@section HP-UX 11.0i v2 Compatibility
@cindex HP-UX 11.0i v2, compatibility
@cindex compatibility, HP-UX 11.0i v2
@cindex HP-UX

@node OSF/1 Compatibility
@section OSF/1 1.2/Digital UNIX Compatibility
@cindex OSF/1 1.2/Digital UNIX, compatibility
@cindex compatibility, OSF/1 1.2/Digital
@cindex OSF/1

@node UnixWare Compatibility
@section UnixWare 7.1.3 Compatibility
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility
@cindex compatibility, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@node Solaris Compatibility
@section Solaris 9/SunOS 5.9 Compatibility
@cindex Solaris 9/SunOS 5.9, compatibility
@cindex compatibility, Solaris 9/SunOS 5.9
@cindex Solaris

@node SUX Compatibility
@section Super/UX Compatibility
@cindex Super/UX, compatibility
@cindex compatibility, Super/UX
@cindex Super/UX

@node UXP Compatibility
@section UXP/V Compatibility
@cindex UXP/V, compatibility
@cindex compatibility, UXP/V
@cindex UXP/V

@node LiS Compatibility
@section LiS 2.18.1 Compatibility
@cindex LiS 2.18.1, compatibility
@cindex compatibility, LiS 2.18.1
@cindex Linux STREAMS (LiS)

@node Portability
@chapter Portability
@cindex portability

Although each of the manual pages of supported functions and structures provides compatiblity and
porting information, this document attempts to gather together pertinent information concerning
porting from various @cite{UNIX} operating system supporting @cite{STREAMS}.

The porting information is organized by the operating system from which porting is being attempted.
Note that, aside from configuration details, any system not listed here that is based on SVR 4.2 MP
or on a another of the implementations, should start with that implementation's portability
information.

Porting information is organized into sections as follows:

@menu
* Core Function Support::	Porting with Core Function Support
* SVR 4.2 Portability::		Porting from SVR 4.2 MP
* AIX Portability::		Porting from AIX 5L Version 5.1
* HP-UX Portability::		Porting from HP-UX 11.0i v2
* OSF/1 Portability::		Porting from OSF/1 1.2/Digital UNIX
* UnixWare Portability::	Porting from UnixWare 7.1.3 (OpenUnix 8)
* Solaris Portability::		Porting from Solaris 9/SunOS 5.9
* SUX Portability::		Porting from Super/UX
* UXP Portability::		Porting from UXP/V
* LiS Portability::		Porting from LiS 2.18.1
* Development::			Developing Portable STREAMS Modules
@end menu

@node Core Function Support
@section Porting with Core Function Support
@cindex porting, core function support

@menu
* Core Message Functions::
* Core UP Queue Functions::
* Core MP Queue Functions::
* Core DDI/DKI Functions::
* Some Common Extension Functions::
* Some Internal Functions::
* Some Oddball Functions::
@end menu

@node Core Message Functions
@subsection Core Message Functions
@cindex core message functions

@ftable @asis
@item @b{adjmsg}(9)
trim bytes from the front or back of a @cite{STREAMS} message
@item @b{allocb}(9)
allocate a @cite{STREAMS} message and data block
@item @b{bufcall}(9)
install a buffer callback
@item @b{copyb}(9)
copy a @cite{STREAMS} message block
@item @b{copymsg}(9)
copy a @cite{STREAMS} message
@item @b{datamsg}(9)
tests a @cite{STREAMS} message type for data
@item @b{dupb}(9)
duplicate a @cite{STREAMS} message block
@item @b{dupmsg}(9)
duplicate a @cite{STREAMS} message
@item @b{esballoc}(9)
allocate a @cite{STREAMS} message and data block with a caller supplied data buffer
@item @b{freeb}(9)
frees a @cite{STREAMS} message block
@item @b{freemsg}(9)
frees a @cite{STREAMS} message
@item @b{linkb}(9)
link a message block to a @cite{STREAMS} message
@item @b{msgdsize}(9)
calculate the size of the data in a @cite{STREAMS} message
@item @b{msgpullup}(9)
pull up bytes in a @cite{STREAMS} message
@item @b{pcmsg}(9)
test a data block message type for priority control
@item @b{pullupmsg}(9)
pull up the bytes in a @cite{STREAMS} message
@item @b{rmvb}(9)
remove a message block from a @cite{STREAMS} message
@item @b{testb}(9)
test if a @cite{STREAMS} message can be allocated
@item @b{unbufcall}(9)
remove a @cite{STREAMS} buffer callback
@item @b{unlinkb}(9)
unlink a message block from a @cite{STREAMS} message
@end ftable

@node Core UP Queue Functions
@subsection Core UP Queue Functions
@cindex core queue functions, UP

@ftable @asis
@item @b{backq}(9)
find the upstream or downstream queue
@item @b{bcanput}(9)
test flow control on a @cite{STREAMS} message queue
@item @b{canenable}(9)
test whether a @cite{STREAMS} message queue can be scheduled
@item @b{enableok}(9)
allow a @cite{STREAMS} message queue to be scheduled
@item @b{flushband}(9)
flushes band @cite{STREAMS} messages from a message queue
@item @b{flushq}(9)
flushes messages from a @cite{STREAMS} message queue
@item @b{getq}(9)
gets a message from a @cite{STREAMS} message queue
@item @b{insq}(9)
inserts a message into a @cite{STREAMS} message queue
@item @b{noenable}(9)
disable a @cite{STREAMS} message queue from being scheduled
@item @b{OTHERQ}(9)
return the other queue of a @cite{STREAMS} queue pair
@item @b{putbq}(9)
put a message back on a @cite{STREAMS} message queue
@item @b{putctl}(9)
put a control message on a @cite{STREAMS} message queue
@item @b{putctl1}(9)
put a 1 byte control message on a @cite{STREAMS} message queue
@item @b{putq}(9)
put a message on a @cite{STREAMS} message queue
@item @b{qenable}(9)
schedules a @cite{STREAMS} message queue service routine
@item @b{qreply}(9)
replys to a message from a @cite{STREAMS} message queue
@item @b{qsize}(9)
return the number of message on a queue
@item @b{RD}(9)
return the read queue of a @cite{STREAMS} queue pair
@item @b{rmvq}(9)
remove a message from a @cite{STREAMS} message queue
@item @b{SAMESTR}(9)
test for @cite{STREAMS} pipe or fifo
@item @b{WR}(9)
return the write queue of a @cite{STREAMS} queue pair
@end ftable

@node Core MP Queue Functions
@subsection Core MP Queue Functions
@cindex core queue functions, MP

@ftable @asis
@item @b{bcanputnext}(9)
test flow control on a message queue
@item @b{canputnext}(9)
test flow control on a message queue
@item @b{freezestr}(9)
freeze the state of a stream queue
@item @b{put}(9)
invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message
@item @b{putnext}(9)
put a message on the downstream @cite{STREAMS} message queue
@item @b{putnextctl1}(9)
put a 1 byte control message on the downstream @cite{STREAMS} message queue
@item @b{putnextctl}(9)
put a control message on the downstream @cite{STREAMS} message queue
@item @b{qprocsoff}(9)
disables @cite{STREAMS} message queue processing for multi-processing
@item @b{qprocson}(9)
enables @cite{STREAMS} message queue processing for multi-processing
@item @b{strqget}(9)
gets information about a @cite{STREAMS} message queue
@item @b{strqset}(9)
sets attributes of a @cite{STREAMS} message queue
@item @b{unfreezestr}(9)
thaw the state of a stream queue
@end ftable

@node Core DDI/DKI Functions
@subsection Core DDI/DKI Functions
@cindex core ddi/dki functions

@ftable @asis
@item @b{kmem_alloc}(9)
allocate kernel memory
@item @b{kmem_free}(9)
deallocates kernel memory
@item @b{kmem_zalloc}(9)
allocate and zero kernel memory
@item @b{cmn_err}(9)
print a kernel command error
@item @b{bcopy}(9)
copy byte strings
@item @b{bzero}(9)
zero a byte string
@item @b{copyin}(9)
copy user data in from user space to kernel space
@item @b{copyout}(9)
copy user data in from kernel space to user space
@item @b{delay}(9)
postpone the calling process for a number of clock ticks
@item @b{drv_getparm}(9)
driver retrieve kernel parameter
@item @b{drv_hztomsec}(9)
convert kernel tick time between microseconds or milliseconds
@item @b{drv_htztousec}(9)
convert kernel tick time between microseconds or milliseconds
@item @b{drv_msectohz}(9)
convert kernel tick time between microseconds or milliseconds
@item @b{drv_priv}(9)
check if the current process is priviledged
@item @b{drv_usectohz}(9)
convert kernel tick time between microseconds or milliseconds
@item @b{drv_usecwait}(9)
delay for a number of microseconds
@item @b{min}(9)
determine the minimum of two integers
@item @b{max}(9)
determine the maximum of two integers
@item @b{getmajor}(9)
get the internal major device number for a device
@item @b{getminor}(9)
get the extended minor device number for a device
@item @b{makedevice}(9)
create a device from a major and minor device numbers
@item @b{strlog}(9)
pass a message to the @cite{STREAMS} logger
@item @b{timeout}(9)
start a timer
@item @b{untimeout}(9)
stop a timer
@end ftable

@ftable @asis
@item @b{mknod}(9)
make block or character special files
@item @b{mount}(9)
mount and unmount filesystems
@item @b{umount}(9)
mount and unmount filesystems
@item @b{unlink}(9)
remove a file
@end ftable

@node Some Common Extension Functions
@subsection Some Common Extension Functions
@cindex common extension functions

@ftable @asis
@item @b{linkmsg}(9)
link a message block to a @cite{STREAMS} message
@item @b{putctl2}(9)
put a two byte control message on a @cite{STREAMS} message queue
@item @b{putnextctl2}(9)
put a two byte control message on the downstream @cite{STREAMS} message queue
@item @b{weldq}(9)
weld two (or four) queues together
@item @b{unweldq}(9)
unweld two (or four) queues
@end ftable

@node Some Internal Functions
@subsection Some Internal Functions
@cindex internal functions

@ftable @asis
@item @b{allocq}(9)
allocate a @cite{STREAMS} queue pair
@item @b{bcanget}(9)
test for message arrival on a band on a stream
@item @b{canget}(9)
test for message arrival on a stream
@item @b{freeq}(9)
deallocate a @cite{STREAMS} queue pair
@item @b{qattach}(9)
attach a module onto a @cite{STREAMS} file
@item @b{qclose}(9)
close a @cite{STREAMS} module or driver
@item @b{qdetach}(9)
detach a module from a @cite{STREAMS} file
@item @b{qopen}(9)
call a @cite{STREAMS} module or driver open routine
@item @b{setq}(9)
set sizes and procedures associated with a @cite{STREAMS} message queue
@end ftable

@node Some Oddball Functions
@subsection Some Oddball Functions
@cindex oddball functions

@ftable @asis
@item @b{appq}(9)
append one @cite{STREAMS} message after another
@item @b{esbbcall}(9)
install a buffer callback for an extended @cite{STREAMS} message block
@item @b{isdatablk}(9)
test a @cite{STREAMS} data block for data type
@item @b{isdatamsg}(9)
test a @cite{STREAMS} data block for data type
@item @b{kmem_zalloc_node}(9)
@item @b{msgsize}(9)
calculate the size of the message blocks in a @cite{STREAMS} message
@item @b{qcountstrm}(9)
add all counts on all @cite{STREAMS} message queues in a stream
@item @b{xmsgsize}(9)
calculate the size of message blocks in a @cite{STREAMS} message
@end ftable

@page
@node SVR 4.2 Portability
@section Porting from SVR 4.2 MP
@cindex porting, SVR 4.2 MP
@cindex SVR 4.2 MP, portability
@cindex SVR 4.2 MP

This section captures portability information for SVR 4.2 MP based systems.  If the operating system
from which you are porting more closely fits one of the other portability sections, please see that
section.

@menu
* Differences from SVR 4.2 MP::
* Commonalities with SVR 4.2 MP::
* Compatibility functions for SVR 4.2 MP::
* Configuration ala SVR 4.2 MP::
@end menu

@node Differences from SVR 4.2 MP
@subsection Differences from SVR 4.2 MP
@cindex differences, SVR 4.2 MP
@cindex SVR 4.2 MP, differences
@cindex SVR 4.2 MP

@b{Linux Fast-STREAMS} has very few differences from @cite{SVR 4.2 MP}.  Not all @cite{SVR 4.2 MP}
functions are implemented in the base @b{Linux Fast-STREAMS} kernel modules.  Some functions are
included in the @cite{SVR 4.2 MP} compatibility module, @file{streams-svr4compat.o}.

@menu
* Priority Levels::
* Basic Locks::
@end menu

@node Priority Levels
@subsubsection Priority Levels
@cindex priority levels

@b{Linux} has a different concept of priority levels than @cite{SVR 4.2 MP}.  @b{Linux} has
basically 4 priority levels as follows:

@enumerate
@item Preemptive

At this priority level, software and hardware interrupts are enabled and the kernel is executing
with premption enabled.  This means that the currently executing kernel thread could preempt and
sleep in favor of another thread of kernel execution.

This priority level only exists on preemptive (mostly 2.6) kernels.

@item Non-Preemptive

At this priority level, software and hardware interrupts are enabled and the kernel is executing
with preemption disabled.  This means that the currently executing kernel thread will only be
interrupted by sofware or hardware interrupts.

This priority level exists in all kernels.

@item Software Interrupts Disabled

At this priority level, software interrupts are disabled and the kernel is executing with preemption
disabled.  This means that the currently executing kernel thread will only be interrupted by
hardware interrupts.

This is the case when the executing thread is processing a software interrupt, or when the currently
executing thread has disabled software interrupts.

This priority level exists in all kernels.

@item Interrupt Service Routines Disabled

At this priority level, hardware interrupts are disabled and the kernel is executing with preemption
disabled.  This means that the currently executing kernel thread will not be interrupted.

This is the case when the executing thread is processing a hardware interrupt, or when the currently
executing thread has disabled hardware interrupts.

This priority level exists in all kernels.

@end enumerate

@node Basic Locks
@subsubsection Basic Locks
@cindex basic locks

@node Commonalities with SVR 4.2 MP
@subsection Commonalities with SVR 4.2 MP
@cindex commonalities, SVR 4.2 MP
@cindex SVR 4.2 MP, commonalities
@cindex SVR 4.2 MP

@node Compatibility functions for SVR 4.2 MP
@subsection Compatibility functions for SVR 4.2 MP
@cindex compatibility functions, SVR 4.2 MP
@cindex SVR 4.2 MP, compatibility functions
@cindex SVR 4.2 MP

@ftable @asis
@item @b{ATOMIC_INT_ADD}(9)
add an integer value to an atomic integer
@item @b{ATOMIC_INT_ALLOC}(9)
allocate and initalize an atomic integer
@item @b{ATOMIC_INT_DEALLOC}(9)
deallocate an atomic integer
@item @b{ATOMIC_INT_DECR}(9)
decrement and test an atomic integer
@item @b{ATOMIC_INT_INCR}(9)
increment an atomic integer
@item @b{ATOMIC_INT_INIT}(9)
initialize an atomic integer
@item @b{ATOMIC_INT_READ}(9)
read an atomic integer
@item @b{ATOMIC_INT_SUB}(9)
subtract and integer value from an atomic integer
@item @b{ATOMIC_INT_WRITE}(9)
write an integer value to an atomic integer
@item @b{itimeout}(9)
perform a timeout at an interrupt level
@item @b{lbolt}(9)
time in ticks since reboot
@item @b{LOCK}(9)
lock a basic lock
@item @b{LOCK_ALLOC}(9)
allocate a basic lock
@item @b{LOCK_DEALLOC}(9)
deallocate a basic lock
@item @b{LOCK_OWNED}(9)
determine whether a basic lock is head by the caller
@item @b{MPSTR_QLOCK}(9)
release a queue from exclusive access
@item @b{MPSTR_QRELE}(9)
acquire a queue for exclusive access
@item @b{MPSTR_STPLOCK}(9)
acquire a stream head for exclusive access
@item @b{MPSTR_STPRELE}(9)
release a stream head from exclusive access
@item @b{major}(9)
get the internal major number of a device
@item @b{makedev}(9)
make a device number from internal major and minor device numbers
@item @b{minor}(9)
get the internal minor number of a device
@item @b{RW_ALLOC}(9)
allocate and initialize a read/write lock
@item @b{RW_DEALLOC}(9)
deallocate a read/write lock
@item @b{RW_RDLOCK}(9)
acquire a read/write lock in read mode
@item @b{RW_TRYRDLOCK}(9)
attempt to acquire a read/write lock in read mode
@item @b{RW_TRYWRLOCK}(9)
attempt to acquire a read/write lock in write mode
@item @b{RW_UNLOCK}(9)
release a read/write lock
@item @b{RW_WRLOCK}(9)
acquire a read/write lock in write mode
@item @b{sleep}(9)
put a process to sleep
@item @b{SLEEP_ALLOC}(9)
allocate a sleep lock
@item @b{SLEEP_DEALLOC}(9)
deallocate a sleep lock
@item @b{SLEEP_LOCK}(9)
acquire a sleep lock
@item @b{SLEEP_LOCKAVAIL}(9)
determine whether a sleep lock is available
@item @b{SLEEP_LOCKOWNED}(9)
determine whether a sleep lock is held by the caller
@item @b{SLEEP_LOCK_SIG}(9)
acquire a sleep lock
@item @b{SLEEP_TRYLOCK}(9)
attempt to acquire a sleep lock
@item @b{SLEEP_UNLOCK}(9)
release a sleep lock
@item @b{spl0}(9)
set priority level 0
@item @b{spl1}(9)
set priority level 1
@item @b{spl2}(9)
set priority level 2
@item @b{spl3}(9)
set priority level 3
@item @b{spl4}(9)
set priority level 4
@item @b{spl5}(9)
set priority level 5
@item @b{spl6}(9)
set priority level 6
@item @b{spl7}(9)
set priority level 7
@item @b{spl}(9)
set priority level
@item @b{splx}(9)
set priority level x
@item @b{SV_ALLOC}(9)
allocate a basic condition variable
@item @b{SV_BROADCAST}(9)
broadcast a basic condition variable
@item @b{SV_DEALLOC}(9)
deallocate a basic condition variable
@item @b{SV_SIGNAL}(9)
signal a basic condition variable
@item @b{SV_WAIT}(9)
wait on a basic condition variable
@item @b{SV_WAIT_SIG}(9)
interruptible wait on a basic condition variable
@item @b{TRYLOCK}(9)
try to lock a basic lock
@item @b{UNLOCK}(9)
unlock a basic lock
@item @b{vtop}(9)
convert virtual to physical address
@item @b{wakeup}(9)
wake a process
@end ftable

@node Configuration ala SVR 4.2 MP
@subsection Configuration ala SVR 4.2 MP
@cindex configuration, SVR 4.2 MP
@cindex SVR 4.2 MP, configuration
@cindex SVR 4.2 MP


@page
@node AIX Portability
@section Porting from AIX 5L Version 5.1
@cindex porting, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, portability
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@menu
* Differences from AIX 5L Version 5.1::
* Commonalities with AIX 5L Version 5.1::
* Compatibility Functions for AIX 5L Version 5.1::
* Configuration ala AIX 5L Version 5.1::
@end menu

@node Differences from AIX 5L Version 5.1
@subsection Differences from AIX 5L Version 5.1
@cindex differences, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, differences
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@node Commonalities with AIX 5L Version 5.1
@subsection Commonalities with AIX 5L Version 5.1
@cindex commonalities, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, commonalities
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@node Compatibility Functions for AIX 5L Version 5.1
@subsection Compatibility Functions for AIX 5L Version 5.1
@cindex compatibility functions, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, compatibility functions
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@ftable @asis
@item @b{putctl2}(9)
put a 2 byte control message on a @cite{STREAMS} message queue
@item @b{splstr}(9)
set or restore priority levels
@item @b{splx}(9)
set or restore priority levels
@item @b{unweldq}(9)
unweld two pairs of @cite{STREAMS} message queues
@item @b{weldq}(9)
weld together two pairs of @cite{STREAMS} message queues
@end ftable

@ftable @asis
@item @b{mi_bufcall}(9)
reliable alternative to @b{buffcall}(9)
@item @b{mi_close_comm}(9)
@cite{STREAMS} common minor device close utility
@item @b{mi_next_ptr}(9)
@cite{STREAMS} minor device list traversal
@item @b{mi_open_comm}(9)
@cite{STREAMS} common minor device open utility
@item @b{mi_prev_ptr}(9)
@cite{STREAMS} minor device list traversal
@item @b{str_install}(9)
install a @cite{STREAMS} module or driver
@item @b{wantio}(9)
perform direct I/O from a @cite{STREAMS} driver
@item @b{wantmsg}(9)
provide a filter of wanted messages from a @cite{STREAMS} module
@end ftable

@node Configuration ala AIX 5L Version 5.1
@subsection Configuration ala AIX 5L Version 5.1
@cindex configuration, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, configuration
@cindex AIX PSE


@page
@node HP-UX Portability
@section Porting from HP-UX 11.0i v2
@cindex porting, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, portability
@cindex HP-UX 11.0i v2
@cindex HP-UX

@menu
* Differences from HP-UX 11.0i v2::
* Commonalities with HP-UX 11.0i v2::
* Compatibility Functions for HP-UX 11.0i v2::
* Configuration ala HP-UX 11.0i v2::
@end menu

@node Differences from HP-UX 11.0i v2
@subsection Differences from HP-UX 11.0i v2
@cindex differences, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, differences
@cindex HP-UX 11.0i v2
@cindex HP-UX

@node Commonalities with HP-UX 11.0i v2
@subsection Commonalities with HP-UX 11.0i v2
@cindex commonalities, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, commonalities
@cindex HP-UX 11.0i v2
@cindex HP-UX

@node Compatibility Functions for HP-UX 11.0i v2
@subsection Compatibility Functions for HP-UX 11.0i v2
@cindex compatibility functions, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, compatibility functions
@cindex HP-UX 11.0i v2
@cindex HP-UX

@ftable @asis
@item @b{putctl2}(9)
put a 2 byte control message on a @cite{STREAMS} message queue
@item @b{putnextctl2}(9)
put a 2 byte control message on the downstream @cite{STREAMS} message queue
@item @b{unweldq}(9)
unweld two pairs of streams queues
@item @b{weldq}(9)
weld together two pairs of streams queues
@end ftable

@ftable @asis
@item @b{str_install}(9)
install a @cite{STREAMS} module or driver
@item @b{str_uninstall}(9)
uninstall a @cite{STREAMS} module or driver
@item @b{streams_get_sleep_lock}(9)
provide access to the global sleep lock
@item @b{streams_put}(9)
invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message
@end ftable

@node Configuration ala HP-UX 11.0i v2
@subsection Configuration ala HP-UX 11.0i v2
@cindex configuration, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, configuration
@cindex HP-UX 11.0i v2
@cindex HP-UX


@page
@node OSF/1 Portability
@section Porting from OSF/1 1.2/Digital UNIX
@cindex porting, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, portability
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@menu
* Differences from OSF/1 1.2/Digital UNIX::
* Commonalities with OSF/1 1.2/Digital UNIX::
* Compatibility Functions for OSF/1 1.2/Digital UNIX::
* Configuration ala OSF/1 1.2/Digital UNIX::
@end menu

@node Differences from OSF/1 1.2/Digital UNIX
@subsection Differences from OSF/1 1.2/Digital UNIX
@cindex differences, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, differences
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@node Commonalities with OSF/1 1.2/Digital UNIX
@subsection Commonalities with OSF/1 1.2/Digital UNIX
@cindex commonalities, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, commonalities
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@node Compatibility Functions for OSF/1 1.2/Digital UNIX
@subsection Compatibility Functions for OSF/1 1.2/Digital UNIX
@cindex compatibility functions, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, compatibility functions
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@ftable @asis
@item @b{unweldq}(9)
unweld two pairs of streams queues
@item @b{weldq}(9)
weld together two pairs of streams queues
@end ftable

@ftable @asis
@item @b{lbolt}(9)
time in ticks since reboot
@item @b{puthere}(9)
invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message
@item @b{streams_close_comm}(9)
common minor device close utility
@item @b{streams_open_comm}(9)
common minor device open utility
@item @b{streams_open_ocomm}(9)
common minor device open utility
@item @b{strmod_add}(9)
add a @cite{STREAMS} module
@item @b{strmod_del}(9)
delete a @cite{STREAMS} module or driver from the kernel
@item @b{time}(9)
(undoc)
@end ftable

@node Configuration ala OSF/1 1.2/Digital UNIX
@subsection Configuration ala OSF/1 1.2/Digital UNIX
@cindex configuration, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, configuration
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1


@page
@node UnixWare Portability
@section Porting from UnixWare 7.1.3 (OpenUnix 8)
@cindex porting, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), portability
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@menu
* Differences from UnixWare 7.1.3 (OpenUnix 8)::
* Commonalities with UnixWare 7.1.3 (OpenUnix 8)::
* Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)::
* Configuration ala UnixWare 7.1.3 (OpenUnix 8)::
@end menu

@node Differences from UnixWare 7.1.3 (OpenUnix 8)
@subsection Differences from UnixWare 7.1.3 (OpenUnix 8)
@cindex differences, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), differences
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@node Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@subsection Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@cindex commonalities, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), commonalities
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@node Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@subsection Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@cindex compatibility functions, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility functions
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

The following compatibility functions are in addition to all SVR 4.2
compatibility functions.

@ftable @asis
@end ftable

@ftable @asis
@item @b{allocb_physreq}(9)
allocate a @cite{STREAMS} message and data block
@item @b{emajor}(9)
get the external (real) majore device number from the device number
@item @b{eminor}(9)
get the external extended minor device number from the device number
@item @b{etoimajor}(9)
convert an external major device number to an internal major device number
@item @b{getemajor}(9)
get the external (real) majore device number
@item @b{geteminor}(9)
get the external minor device number
@item @b{itoemajor}(9)
convert an internal major device number to an external major device number
@item @b{msgphysreq}(9)
cause a message block to meet physical requirements
@item @b{msgpullup_physreq}(9)
pull up bytes in a @cite{STREAMS} message
@item @b{msgscgth}(9)
(undoc)
@item @b{strioccall}(9)
(undoc)
@end ftable

@node Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@subsection Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@cindex configuration, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), configuration
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare


@page
@node Solaris Portability
@section Porting from Solaris 9/SunOS 5.9
@cindex porting, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, portability
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@menu
* Differences from Solaris 9/SunOS 5.9::
* Commonalities with Solaris 9/SunOS 5.9::
* Compatibility Functions for Solaris 9/SunOS 5.9::
* Configuration ala Solaris 9/SunOS 5.9::
@end menu

@node Differences from Solaris 9/SunOS 5.9
@subsection Differences from Solaris 9/SunOS 5.9
@cindex differences, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, differences
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@node Commonalities with Solaris 9/SunOS 5.9
@subsection Commonalities with Solaris 9/SunOS 5.9
@cindex commonalities, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, commonalities
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@node Compatibility Functions for Solaris 9/SunOS 5.9
@subsection Compatibility Functions for Solaris 9/SunOS 5.9
@cindex compatibility functions, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, compatibility functions
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@ftable @asis
@item @b{_fini}(9)
@item @b{_info}(9)
@item @b{_init}(9)
@item @b{attach}(9)
attach a device to the system or resume a suspended device
@item @b{ddi_create_minor_node}(9)
create a minor node for this device
@item @b{ddi_driver_major}(9)
find the major device number associated with a driver
@item @b{ddi_driver_name}(9)
return normalized driver name
@item @b{ddi_get_cred}(9)
get a reference to the credentials of the current user
@item @b{ddi_getiminor}(9)

@item @b{ddi_get_instance}(9)
get device instance number
@item @b{ddi_get_lbolt}(9)
get the current value of the system tick clock
@item @b{ddi_get_pid}(9)

@item @b{ddi_get_soft_state}(9)

@item @b{ddi_get_time}(9)
get the current time in seconds since the epoch
@item @b{ddi_remove_minor_node}(9)
remove a minor node for a device
@item @b{ddi_removing_power}(9)

@item @b{ddi_soft_state}(9)

@item @b{ddi_soft_state_fini}(9)

@item @b{ddi_soft_state_free}(9)

@item @b{ddi_soft_state_init}(9)

@item @b{ddi_soft_state_zalloc}(9)

@item @b{ddi_umem_alloc}(9)
allocate page aligned kernel memory
@item @b{ddi_umem_free}(9)

@item @b{detach}(9)
detach a device from the system or suspend a device
@item @b{getinfo}(9)

@item @b{identify}(9)
determine if a driver is associated with a device
@item @b{install_driver}(9)
install a device driver
@item @b{mod_info}(9)
provides information on a loadable kernel module to the @cite{STREAMS} executive
@item @b{mod_install}(9)
installs a loadable kernel module in the @cite{STREAMS} executive
@item @b{mod_remove}(9)
removes a loadable module from the @cite{STREAMS} executive
@item @b{power}(9)
power a device attached to the system
@item @b{probe}(9)

@item @b{qbufcall}(9)
install a buffer callback
@item @b{qtimeout}(9)
start a timer associated with a queue
@item @b{queclass}(9)

@item @b{qunbufcall}(9)

@item @b{quntimeout}(9)

@item @b{qwait}(9)
wait for a queue message
@item @b{qwait_sig}(9)
wait for a queue message or signal
@item @b{qwriter}(9)

@end ftable

@node Configuration ala Solaris 9/SunOS 5.9
@subsection Configuration ala Solaris 9/SunOS 5.9
@cindex configuration, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, configuration
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS


@page
@node SUX Portability
@section Porting from Super/UX
@cindex porting, Super/UX
@cindex Super/UX, portability
@cindex Super/UX

@menu
* Differences from Super/UX::
* Commonalities with Super/UX::
* Compatibility Functions for Super/UX::
* Configuration ala Super/UX::
@end menu

@node Differences from Super/UX
@subsection Differences from Super/UX
@cindex differences, Super/UX
@cindex Super/UX, differences
@cindex Super/UX

@node Commonalities with Super/UX
@subsection Commonalities with Super/UX
@cindex commonalities, Super/UX
@cindex Super/UX, commonalities
@cindex Super/UX

@node Compatibility Functions for Super/UX
@subsection Compatibility Functions for Super/UX
@cindex compatibility functions, Super/UX
@cindex Super/UX, compatibilty functions
@cindex Super/UX

@ftable @asis
@item @b{lbolt}(9)
time in ticks since reboot
@end ftable

@node Configuration ala Super/UX
@subsection Configuration ala Super/UX
@cindex configuration, Super/UX
@cindex Super/UX, configuration
@cindex Super/UX


@page
@node UXP Portability
@section Porting from UXP/V
@cindex porting, UXP/V
@cindex UXP/V, portability
@cindex UXP/V

@menu
* Differences from UXP/V::
* Commonalities with UXP/V::
* Compatibility Functions for UXP/V::
* Configuration ala UXP/V::
@end menu

@node Differences from UXP/V
@subsection Differences from UXP/V
@cindex differences, UXP/V
@cindex UXP/V, differences
@cindex UXP/V

@node Commonalities with UXP/V
@subsection Commonalities with UXP/V
@cindex commonalities, UXP/V
@cindex UXP/V, commonalities
@cindex UXP/V

@node Compatibility Functions for UXP/V
@subsection Compatibility Functions for UXP/V
@cindex compatibility functions, UXP/V
@cindex UXP/V, compatibility functions
@cindex UXP/V

@node Configuration ala UXP/V
@subsection Configuration ala UXP/V
@cindex configuration, UXP/V
@cindex UXP/V, configuration
@cindex UXP/V


@page
@node LiS Portability
@section Porting from LiS 2.18.1
@cindex porting, LiS 2.18.1
@cindex LiS 2.18.1, portability
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@menu
* Differences from LiS 2.18.1::
* Commonalities with LiS 2.18.1::
* Compatibility Functions for LiS 2.18.1::
* Configuration ala LiS 2.18.1::
@end menu

@node Differences from LiS 2.18.1
@subsection Differences from LiS 2.18.1
@cindex differences, LiS 2.18.1
@cindex LiS 2.18.1, differences
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@node Commonalities with LiS 2.18.1
@subsection Commonalities with LiS 2.18.1
@cindex commonalities, LiS 2.18.1
@cindex LiS 2.18.1, commonalities
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@node Compatibility Functions for LiS 2.18.1
@subsection Compatibility Functions for LiS 2.18.1
@cindex compatibility functions, LiS 2.18.1
@cindex LiS 2.18.1, compatibility functions
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@ftable @asis
@item @b{lis_appq}(9)
append one @cite{STREAMS} message after another
@item @b{lis_date}(9)
@item @b{lis_esbbcall}(9)
install a buffer callback for an extended @cite{STREAMS} message block
@item @b{lis_find_strdev}(9)
@item @b{lis_mknod}(9)
make block or character special files
@item @b{lis_mount}(9)
mount a file system
@item @b{lis_OTHER}(9)
return the other queue of a @cite{STREAMS} queue pair
@item @b{lis_register_strdev}(9)
register a @cite{STREAMS} device
@item @b{lis_register_strmod}(9)
register a @cite{STREAMS} module
@item @b{lis_umount2}(9)
unmount a file system
@item @b{lis_umount}(9)
unmount a file system
@item @b{lis_unlink}(9)
remove a file
@item @b{lis_unregister_strdev}(9)
unregister a @cite{STREAMS} device
@item @b{lis_unregsiter_strmod}(9)
unregister a @cite{STREAMS} module
@item @b{lis_version}(9)

@item @b{lis_xmsgsize}(9)
calculate the size of message blocks in a @cite{STREAMS} message
@end ftable

@node Configuration ala LiS 2.18.1
@subsection Configuration ala LiS 2.18.1
@cindex configuration, LiS 2.18.1
@cindex LiS 2.18.1, configuration
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@node Development
@section Developing Portable STREAMS Modules
@cindex developing portable streams modules

In the process of creating the @b{Linux Fast-STREAMS} subsystem in such a way so as to facilitate
portability of @cite{STREAMS} drivers and modules from a wide range of @cite{UNIX} operating system
variants, a number of guidelines for the development of portable @cite{STREAMS} drivers and moduels
have been developed.  These guidelines, when adhered to, will allow the resulting driver or module
to be ported to another @cite{STREAMS} implementation with minimal effort.  These portability
guidelines are collected here.

@menu
* Memory Allocation::
* Alignment of Message Buffers::
* Disabling and Enabling Queue Procedures::
* Freezing and Unfreezing Streams::
* Passing Messages from Interrupt Service Routines::
* Timeout Call Back and Link Identifiers::
* Synchronization with Timeouts and Callback Functions::
* Synchronization with Callout Functions::
* Synchronization of Drivers and Modules::
* Special STREAMS Message Types::
* Use of Message Allocation Priorities::
* Registration/Deregistration and Device Numbering::
@end menu

@node Memory Allocation
@subsection Memory Allocation

Portable @cite{STREAMS} modules and drivers will always allocate memory using the SVR4 memory
allocators/deallocators:
@iftex
@b{kmem_alloc}(9),
@end iftex
@ifnottex
@inforef{kmem_alloc(9), , *manpages*},
@end ifnottex
@iftex
@b{kmem_zalloc}(9)
@end iftex
@ifnottex
@inforef{kmem_zalloc(9), , *manpages*}
@end ifnottex
and
@iftex
@b{kmem_free}(9).
@end iftex
@ifnottex
@inforef{kmem_free(9), , *manpages*}.
@end ifnottex

Additional eligible allocators are:

@iftex
@b{rmallocmap}(9)
@end iftex
@ifnottex
@inforef{rmallocmap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfreemap}(9)
@end iftex
@ifnottex
@inforef{rmfreemap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc}(9)
@end iftex
@ifnottex
@inforef{rmalloc(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc_wait}(9)
@end iftex
@ifnottex
@inforef{rmalloc_wait(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfree}(9)
@end iftex
@ifnottex
@inforef{rmfree(9), , *manpages*}
@end ifnottex
@iftex
@b{rminit}(9)
@end iftex
@ifnottex
@inforef{rminit(9), , *manpages*}
@end ifnottex
@iftex
@b{rmsetwant}(9)
@end iftex
@ifnottex
@inforef{rmsetwant(9), , *manpages*}
@end ifnottex
@iftex
@b{rmwanted}(9)
@end iftex
@ifnottex
@inforef{rmwanted(9), , *manpages*}
@end ifnottex

Unfortunately, these resource map allocators are not available on @cite{AIX}
@cindex AIX PSE
so, if portability to the @cite{AIX}
@cindex AIX PSE
is important, then do not use these allocators.

Additional eligible allocators are:

@iftex
@b{kmem_fast_alloc}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_alloc(9), , *manpages*}
@end ifnottex
@iftex
@b{kmem_fast_free}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_free(9), , *manpages*}
@end ifnottex

@node Alignment of Message Buffers
@subsection Alignment of Message Buffers

@node Disabling and Enabling Queue Procedures
@subsection Disabling and Enabling Queue Procedures

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocson}(9)
@end iftex
@ifnottex
@inforef{qprocson(9), , *manpages*},
@end ifnottex
before returning from its queue open procedure (see
@iftex
@b{qopen}(9)).
@end iftex
@ifnottex
@inforef{qopen(9), , *manpages*}.)
@end ifnottex

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocsoff}(9)
@end iftex
@ifnottex
@inforef{qprocsoff(9), , *manpages*},
@end ifnottex
upon entering its queue close procedure (see
@iftex
@b{qclose}(9)).
@end iftex
@ifnottex
@inforef{qclose(9), , *manpages*}.)
@end ifnottex

@node Freezing and Unfreezing Streams
@subsection Freezing and Unfreezing Streams

@node Passing Messages from Interrupt Service Routines
@subsection Passing Messages from Interrupt Service Routines

@node Timeout Call Back and Link Identifiers
@subsection Timeout Call Back and Link Identifiers

Although buffer callbacks identifiers (see
@iftex
@b{bufcall}(9)),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*}),
@end ifnottex
timeout identifiers (see
@iftex
@b{timeout}(9)),
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}),
@end ifnottex
and multiplexing driver link identifiers (see
@var{I_LINK} and @var{I_PLINK} under
@vindex I_LINK
@vindex I_PLINK
@iftex
@b{streamio}(2)),
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}),
@end ifnottex
are often illustrated as small integer numbers, with some @cite{STREAMS} implementations, including
@b{Linux Fast-STREAMS}, these identifiers are kernel addresses (pointers) and are never small
integer values like 1, 2, or 3.

Also, there is no guarantee that the identifier will be positive.  It is guaranteed that the retuned
identifier will not be zero (0).  Zero is used by these function as a return value to indicate an
error.

Portable @cite{STREAMS} drivers and modules will not depend upon the returned identifier from 
@iftex
@b{bufcall}(9),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*},
@end ifnottex
@iftex
@b{timeout}(9)
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}
@end ifnottex
or
@iftex
@b{streamio}(2)
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}
@end ifnottex
as being any specific range of value.  Portable drivers and modules will save any returned
identifiers in data types that will not loose the precision of the identifier.

@node Synchronization with Timeouts and Callback Functions
@subsection Synchronization with Timeouts and Callback Functions

@node Synchronization with Callout Functions
@subsection Synchronization with Callout Functions

@node Synchronization of Drivers and Modules
@subsection Synchronization of Drivers and Modules

@node Special STREAMS Message Types
@subsection Special @cite{STREAMS} Message Types

@node Use of Message Allocation Priorities
@subsection Use of Message Allocation Priorities

@node Registration/Deregistration and Device Numbering
@subsection Registration/Deregistration and Device Numbering

@subsubheading UNIX Device Numbering

@quotation
In versions of @cite{UNIX System V} previous to @cite{Release 4}, the major and minor device numbers
were each 8 bit, and they were packed into a 16 bit word (usually a C Language @var{short}
variable).  Under @cite{UNIX System V Release 4}, the device numbers are held in a @samp{dev_t}
@tpindex dev_t
variable, which is often implemented as a 32 bit integer.  The minor device number is held as 14
bits, and a further 8 bits are used for the major device number.  @samp{dev_t}
@tpindex dev_t
is ofter referred to as the "expanded device type", since it allows many more minor devices than
before.

Many drivers were written for earlier releases, an may eventually be ported to @cite{UNIX System V
Release 4}.  In earlier releases, some manufacturers got around the 256 minor device number limit by
using multiple major device numbers for a device.  Devices were created with different major device
numbers (the external major device number) but they all mapped to the same deivce driver entry in
the device switch tables (the internal device number).  Even under this scheme, each major device
could only support 256 minor devices, but the driver could support many more.  This has been
recognized in @cite{UNIX System V Release 4}, and functions are provided to do this mapping; for
example, the function @command{etoimajor}() and so on, give a machine independent interface to the
device number mapping.@footnote{@cite{The Magic Garden Explained}}
@end quotation

@subsubheading Linux Device Numbering

Verions of the @b{Linux} kernel in the 2.4 kernel series and prior to 2.6 also provided an 8 bit
major device number and an 8 bit minor device number grouped into a 16-bit combined device number.
Linux 2.6 kernels (and some patched 2.4 kernels) now have larger device numbers.  These extended
device numbers are 12 bits for major device number and 20 bits for minor device number, with 32 bits
for the combined device number.

@subsubheading LiS Device Numbering
@cindex Linux STREAMS (LiS)

@cite{LiS}
@cindex Linux STREAMS (LiS)
prior to the 2.18.0 release was incapable of providing an internal representation of the device
number and the number of minor device numbers for a device driver was restricted to
256.@footnote{Actually, 255 as the kernel reserved minor device number 255 for expansion.}  Many
@url{http://www.openss7.org/, OpenSS7} device drivers written for @cite{LiS}
@cindex Linux STREAMS (LiS)
would allocate additional major device numbers if required.  Good examples of devices that require
more than 255 minor device numbers are INET clone devices, SCTP streams, SS7 singalling link
streams, MG media channels, etc.  These streams are often @var{I_PLINK}ed
@vindex I_PLINK
under a multiplexing driver and do not even consume a system file descriptor.

@subsubheading Linux Fast-STREAMS Device Numbering

@b{Linux Fast-STREAMS} began with extended device numbering.  The @file{specfs} shadow special
character device filesystem used by @b{Linux Fast-STREAMS} uses the @samp{inode} number to hold the
@samp{dev_t}
@tpindex dev_t
device number instead of the @samp{inode->i_rdev}, which on older kernels is only a 16-bit
@var{short}.

In earlier versions of @b{Linux Fast-STREAMS}, the internal device numbering is 16-bits for major
device number and 16-bits for minor device number.  This will soon be changed to 12-bits for major
device number and 20-bits for minor device number to accomodate the newer @b{Linux} scheme.

On 2.6 @b{Linux} kernels that support the newer extended device numbers, external device numbers and
internal device numbers will be the same.  On 2.4 @b{Linux} kernels with the older 16-bit device
numbers, external device number and internal device numbers will differ.  In some situations, an
internal device number can exists with no corresponding external device number (accessed only via a
clone device or direct access to the mounted @file{specfs} shadow special character device
filesystem).

@ftable @asis
@item @b{etoimajor}(9)
change external to internal major device number
@item @b{getemajor}(9)
get external major device number
@item @b{geteminor}(9)
get external minor device number
@item @b{itoemajor}(9)
change internal to external major device number
@end ftable



@node Copying
@appendix Copying
@include texi/gpl.texi

@node Documentation License
@appendix Documentation License
@include texi/fdl.texi

@page
@node Indices
@unnumbered Indices
@menu
* Concept Index::		Index of Concepts
* Type Index::			Index of Data Types
* Function Index::		Index of Functions and Macros
* Variable Index::		Index of Variables and Constants
* File Index::			Index of Files and Programs
@end menu

@page
@node Concept Index
@unnumberedsec Concept Index
@printindex cp

@page
@node Type Index
@unnumberedsec Type Index
@printindex tp

@page
@node Function Index
@unnumberedsec Function and Macro Index
@printindex fn

@page
@node Variable Index
@unnumberedsec Variable and Constant Macro Index
@printindex vr

@page
@node File Index
@unnumberedsec Program and File Index
@printindex pg

@page
@shortcontents
@page
@contents
@bye

