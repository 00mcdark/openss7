% -*- texinfo -*- vim: ft=texinfo noautoindent nocindent nosmartindent
% =========================================================================
%
% @(#) $Id: SPG.texi,v 0.9.2.22 2005/04/18 17:43:54 brian Exp $
%
% =========================================================================
%
% Copyright (C) 2001-2005  OpenSS7 Corporation <www.openss7.com>
% Copyright (C) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any success
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2005/04/18 17:43:54 $ by $Author: brian $
%
% =========================================================================

\input texinfo
@setfilename SPG.info
@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide
@settitle @value{MANUAL_TITLE}

@dircategory STREAMS
@direntry
* SPG: (SPG).                   STREAMS Programmer's Guide
@end direntry

@defindex op

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file provides the @value{MANUAL_TYPE} for @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_RELEASE}, last updated @value{PACKAGE_DATE}, of the
@cite{@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
Release @value{PACKAGE_RELEASE}.

Copyright @copyright{} 2001-2005  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE STREAMS Programmer's Guide

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2005  OpenSS7 Corporation <@uref{http://www.openss7.com/}> @*
Copyright @copyright{} 1997-2000  Brian F. G. Bidulock <@email{bidulock@@openss7.org}> @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
This is texinfo edition @value{PACKAGE_RELEASE} of the @value{MANUAL_TITLE}
documentation, and is consistent with @value{PACKAGE_NAME} @value{PACKAGE_VERSION}.
This manual was developed under the @uref{http://www.openss7.org/, OpenSS7
Project} and was funded in part by
@uref{http://www.openss7.com/, OpenSS7 Corporation}.

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@noindent
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical
to this one.

@noindent
Permission is granted to copy and distribute translations of this manual into
another language, under the same conditions as for modified versions.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Ed.  @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of authors.
@defindex au

@ifnottex
@node Top
@top @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@unnumbered About This Manual
This is Edition @value{PACKAGE_RELEASE}, last updated @value{PACKAGE_DATE}, of @cite{The
@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
release @value{PACKAGE_RELEASE} of the @value{PACKAGE_TITLE} package.
@end ifnottex

@macro tabfig {image, number, caption}
@iftex
@float Table,Table \number\
@image{\image\}
@caption{@emph{\caption\}}
@end float
@end iftex
@ifnottex
@image{\image\} @anchor{Table \number\} @center @emph{Table \number\.@:  \caption\}
@end ifnottex
@end macro

@macro tabref {number}
@iftex
@emph{@ref{Table \number\}}
@end iftex
@ifnottex
@emph{@ref{Table \number\}}
@end ifnottex
@end macro

@macro figure {image, number, caption}
@iftex
@cartouche
@float Figure,Figure \number\
@image{\image\}
@caption{@emph{\caption\}}
@end float
@end cartouche
@end iftex
@ifnottex
@image{\image\} @anchor{Figure \number\} @center @emph{Figure \number\.@:  \caption\}
@set fignum \number\
@end ifnottex
@end macro

@macro figuresized {image, number, caption, size}
@iftex
@cartouche
@float Figure,Figure \number\
@image{\image\,\size\}
@caption{@emph{\caption\}}
@end float
@end cartouche
@end iftex
@ifnottex
@image{\image\,\size\} @anchor{Figure \number\} @center @emph{Figure \number\.@:  \caption\}
@set fignum \number\
@end ifnottex
@end macro

@macro figref {number}
@iftex
@emph{@ref{Figure \number\}}
@end iftex
@ifnottex
@emph{@ref{Figure \number\}}
@end ifnottex
@end macro

@menu
* Acknowledgements::
* Introduction::
* Overview::
* Reference::
* Examples::
* Device Numbers::
* Multi-Threading::
* Conformance::
* Portability::
* Copying::
* Documentation License::
* Indices::

 --- The Detailed Node Listing ---

Acknowledgements

* Sponsors::			Sponsors of Linux Fast-STREAMS
* Contributors::		Contributors to Linux Fast-STREAMS

Introduction

* What is STREAMS?::		STREAMS Description
* Does Linux have STREAMS?::	STREAMS and Linux
* Why STREAMS?::		STREAMS Justification
* Why Fast?::			STREAMS Implementation
* Why Linux?::			STREAMS for Linux
* Why Compatibility?::		STREAMS Compatibility

Overview

* Definitions::			STREAMS Definitions
* Concepts::			STREAMS Concepts
* Application Interface::	STREAMS Application Interface
* Kernel Level Facilities::	STREAMS Kernel Facilities
* Subsystems::			STREAMS Subsystems

Reference

* Files::			STREAMS Files
* Modules::			STREAMS Modules
* Drivers::			STREAMS Drivers
* System Calls::		STREAMS System Calls
* Module Entry Points::		STREAMS Module Entry Points
* Structures::			STREAMS Structures
* Registration::		STREAMS Module and Driver Registration Functions
* Message Handling::		STREAMS Message Handling Functions
* Queue Handling::		STREAMS Queue Handling Functions
* Miscellaneous Functions::	STREAMS Miscellaneous Functions
* Extensions::			STREAMS Extension Functions
* Compatibility::		STREAMS Compatibility Functions
* System Controls::		STREAMS System Controls
* /proc File System::		STREAMS /proc File System

Examples

* Module Example::		STREAMS Module Example
* Driver Example::		STREAMS Driver Example

Device Numbers

* External Device Numbers::	External Device Numbering
* Internal Device Numbers::	Internal Device Numbering
* spec File System::		Avoiding Device Numbering
* Clone Device::		Clone Device Numbering
* Named STREAMS Device::	Reusable Device Numbering

Multi-Threading

* Configuration::		MP STREAMS Configuration
* Asynchronous Entry Points::	MP STREAMS Asynchronous Entry Points
* Asynchronous Callbacks::	MP STREAMS Asynchronous Callbacks
* Synchronous Entry Points::	MP STREAMS Synchronous Entry Points
* Synchronous Callbacks::	MP STREAMS Synchronous Callbacks

Conformance

* SVR 4.2 Compatibility::	SVR 4.2 MP DDI/DKI Compatibility
* AIX Compatibility::		AIX 5L Version 5.1 Compatibility
* HP-UX Compatibility::		HP-UX 11.0i v2 Compatibility
* OSF/1 Compatibility::		OSF/1 1.2/Digital UNIX Compatibility
* UnixWare Compatibility::	UnixWare 7.1.3 Compatibility
* Solaris Compatibility::	Solaris 9/SunOS 5.9 Compatibility
* SUX Compatibility::		Super/UX Compatibility
* UXP Compatibility::		UXP/V Compatibility
* LiS Compatibility::		LiS 2.18.1 Compatibility

Portability

* Core Function Support::	Porting with Core Function Support
* SVR 4.2 Portability::		Porting from SVR 4.2 MP
* AIX Portability::		Porting from AIX 5L Version 5.1
* HP-UX Portability::		Porting from HP-UX 11.0i v2
* OSF/1 Portability::		Porting from OSF/1 1.2/Digital UNIX
* UnixWare Portability::	Porting from UnixWare 7.1.3
* Solaris Portability::		Porting from Solaris 9/SunOS 5.9
* SUX Portability::		Porting from Super/UX
* UXP Portability::		Porting from UXP/V
* LiS Portability::		Porting from LiS 2.18.1

Indices

* Concept Index::		Concept Index
* Type Index::			Type Index
* Function Index::		Function Index
* Variable Index::		Variable Index
* File Index::			File Index

@end menu

@c --------------------------------------------------------------------------

@node Acknowledgements
@unnumbered Acknowledgements
@cindex credits

@menu
* Sponsors::			Sponsors of Linux Fast-STREAMS
* Contributors::		Contributors to Linux Fast-STREAMS
@end menu

@node Sponsors
@unnumberedsec Sponsors of @value{PACKAGE_TITLE}
@cindex sponsors

Funding for completion of @value{PACKAGE_TITLE} was provided by:

OpenSS7 Corporation

Additional funding for The OpenSS7 Project was provided by:

@node Contributors
@unnumberedsec Contributors to @value{PACKAGE_TITLE}
@cindex contributors

The primary contributor to @value{PACKAGE_TITLE} is Brian F. G. Bidulock.

@node Introduction
@chapter Introduction
@cindex introduction

The @url{http://www.openss7.org/, OpensSS7 Project},
@cpindex OpenSS7 Project
@file{@value{PACKAGE}-@value{VERSION}} package
@pgindex @value{PACKAGE}-@value{VERSION}
provides an @cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
compatible @cite{STREAMS} implementation for @b{Linux}
@cpindex Linux
2.4 and 2.6 series kernels.

@menu
* What is STREAMS?::		STRAEMS Overview
* Does Linux have STREAMS?::	STREAMS and Linux
* Why STREAMS?::		STREAMS Justification
* Why Fast?::			STREAMS Implementation
* Why Linux?::			STREAMS for Linux
* Why Compatibility?::		STREAMS Compatibility
@end menu

@node What is STREAMS?
@section What is @cite{STREAMS}?
@cindex what is @cite{STREAMS}?
@cindex @cite{STREAMS}, what is it?

@cite{STREAMS} is a facility first presented by Dennis M. Ritchie in 1984,@footnote{@cite{A Stream
Input-Output System, AT&T Bell Laboratories Technical Journal 63, No. 8 Part 2 (October, 1984), pp.
1897-1910.}} originally implemented on 4.1BSD and later part of @cite{Bell Laboratories Eighth
Edition UNIX}, incorporated into
@cite{UNIX System V Release 3.0}
@cpindex UNIX System V Release 3.0
and enhanced in
@cite{UNIX System V Release 4}
@cpindex UNIX System V Release 4
and
@cite{UNIX System V Release 4.2}.
@cpindex UNIX System V Release 4.2
@cite{STREAMS} was used in @cite{SVR4} for terminal input/output, pseudo-terminals, pipes, named
pipes (FIFOs), interprocess communication and networking.  Since its release in @cite{System V
Release 4}, @dfn{STREAMS} has been implemented across a wide range of @cite{UNIX}, @cite{UNIX}-like,
and @cite{UNIX}-based systems, making its implementation and use an @i{ipso facto} standard.

@cite{STREAMS} is a facility that allows for a reconfigurable full duplex communications path
(stream) between a user process and a driver in the kernel.  Kernel protocol modules can be pushed
onto and popped from the stream between the user process and driver.  The stream can be reconfigured
in this way by a user process. The user process, neighbouring protocol modules and the driver
communicate with each other using a message passing scheme closely related to MOM (Message Oriented
Middleware).  This permits a loose coupling between protocol modules, drivers and user processes,
allowing a third-party and loadable kernel module approach to be taken toward the provisioning of
protocol modules on platforms supporting @cite{STREAMS}.

On @cite{UNIX System V Relase 4.2}
@cpindex UNIX System V Release 4.2
@dfn{STREAMS} was used for terminal input-output, pipes, FIFOs (named pipes), and network
communications.  Modern @cite{UNIX}, @cite{UNIX}-like and @cite{UNIX}-based systems providing
@dfn{STREAMS} normally support some degree of network communications using @dfn{STREAMS}; however,
many do not support @dfn{STREAMS}-based pipe and FIFOs@footnote{For example, AIX.} or terminal
input-output.@footnote{For example, HP-UX}.

@node Does Linux have STREAMS?
@section Does Linux have STREAMS?
@cindex Does Linux have STREAMS?

No, not as part of the kernel.  That is rather peculiar, particularly since Linux normally follows
SVR4 first and 4BSD second.  (Otherwise, it would just be another BSD.)

A number of attempts were made to move the @cite{Linux STREAM (LiS)} project into the @b{Linux}
kernel, however, each attempt crashed and burned in a shower of flames from BSD advocates on LKML.
Arguments against appear to be based more on @dfn{Religious Denomination} rather than valid
technical argument.  This is discussed more in the next section (@pxref{Why STREAMS?}).

@subsection Linux STREAMS (LiS)
@cindex Linux STREAMS (LiS)

@subsection Linux Fast-STREAMS (LfS)
@cindex Linux Fast-STREAMS (LfS)

@subsection STREAMS for FreeBSD
@cindex FreeBSD

@subsection OpenSTREAMS?

@node Why STREAMS?
@section Why STREAMS?
@cindex Why STREAMS?

@menu
* STREAMS versus Sockets::	STREAMS and Sockets
* Benefits of STREAMS::		STREAMS Benefits
* Criticism of STREAMS::	STREAMS Criticism
* Realities of STREAMS::	STREAMS Realities
@end menu

@node STREAMS versus Sockets
@subsection STREAMS versus Sockets
@cindex STREAMS versus Sockets

The basic question that is always asked is: "Why use @cite{STREAMS} when you can just use
@b{Linux}'s NET4 BSD Sockets instead?"

The answer to this question is that @cite{STREAMS} provides capabilities for specialized protocols
and streamed input/output requirements (such as media) that are not ameniable to the sockets
interface or queue mechanisms.

Two examples are SS7 (Signalling System Number 7) which is a specialized Telecommunications protocol
used be switching equipment in the Public Switched Telephone Network; and transferring and
manipulating voice channels associated with telephone call or other telecommunications services.
These are the reasons why the @url{http://www.openss7.org/, OpenSS7 Project}
@cpindex OpenSS7 Project
originally embarked on using @cite{STREAMS}.  You will find that a large number of @cite{SS7} stack
vendors also delivery @cite{UNIX} and even @cite{RTOS} products on @cite{STREAMS}.

Although the BSD Sockets framework was established to permit arbitrary protocols to be implemented
within the framework, it is seldom that BSD Sockets is actually used in this fashion.

@quotation
The @cite{4.2BSD} version of @cite{UNIX} introduced @dfn{sockets}
@cindex sockets
[Leffler, McKusick, Karels,
Quaterman 1988].  The operating system provided an infrastructure in which network protocols could
be implemented.  It provided memory management facilities, a set of system calls for accessing
network software, an object-oriented framework for the network protocols themselves, and a
formalized device driver interface.  The @dfn{sockets}
@cindex sockets
mechanism was primarily used to implement the
TCP/IP
@cindex TCP/IP
protocols for the
ARPA
@cindex ARPANET
Internet.
The device driver interface made it possible for the operating system to support a wide range of
network controllers.  @dfn{sockets}
@cindex sockets
are widely used for the implementation of TCP/IP
@cindex TCP/IP
on @cite{UNIX} systems and have been ported to many implementations of @cite{UNIX System V}.
Although it is possible to implement other protocols within the @dfn{sockets} mechanism, it was not
often done.

An alternative infrastructure for providing network protocols is @dfn{STREAMS}, originally designed
by Dennis Ritchie [Ritchie 1984a] and first released in @cite{UNIX System V Release 3.0}.
@dfn{STREAMS} provides an environment in which communications protocols can be developed.  It
consists of a set of system calls, kernel functions and data structures.  With this environment it
is easier to write modular and reusable code.  The code is also simpler because many of the support
functions the programmer needs are provided by the @dfn{STREAMS} infrastructure.
@end quotation

Have you ever seen the RTP (Real-Time Transport Protocol, RFC 1889) implemented under a Socket?  Why
not?  Is not the sockets interface so flexible as to permit such protocols to be implemented?

There are several reasons that BSD Sockets have not been used for other protocol development:

@itemize

@item  Although BSD Sockets provides a framework for protocol development, it does not provide
many utility functions for working with arbitrary protocols.  Most of the utilities are DARPA
ARPANET specific.@footnote{This should not be suprising as the 4BSD releases were developed for
DARPA.}

@item Protocol to protocol module interfaces are poorly standardized for the BSD Sockets system,
whereas, protocol to protocol module service interfaces are well defined under OSI for
@cite{STREAMS}.  (@b{Linux} discards the protocol to protocol interface anyway.)

@item The BSD Sockets interface can easily be applied over @cite{STREAMS} transport protocol
modules; however, the reverse is not true: the @cite{STREAMS} interface cannot easily be provided
over the BSD Sockets protocol modules.@footnote{A case in point is the iBCS.
@cindex iBCS
@cindex Intel Binary Compatibility Suite
You will see in the iBCS
@cindex iBCS
@cindex Intel Binary Compatibility Suite
that, although a basic XTI over Sockets implementation can be provided, none of the @cite{STREAMS}
facilities can be supported.  In constrast the @cite{STREAMS} INET driver that performs XTI over
Sockets with in the @cite{STREAMS} framework is easily implemented as a single device driver and
provides both @cite{iBCS}
@cindex iBCS
@cindex Intel Binary Compatibility Suite
and @cite{STREAMS} capabilities.}

@item Support in the BSD Sockets model for dynamically loaded protocol (kernel) modules and
administrative reconfiguration of protocols and interfaces for new protocols are poorly supported.

@item The BSD Sockets model has almost no support for banded or priority message queues within the
model and no systemic approach to flow control.

@item The @b{Linux} implementation of BSD Sockets discards much of the general purpose protocol
framework, presumably in the pursuit of speed.

BSD sockets consists of a socket that interfaces with the user using file system and socket
semantics, a protocol control block that represents the upper-most protocol, a socket to protocol
interface, additional protocol control blocks representing lower protocol components, a protocol to
protocol interface, a device interface abstraction, and a protocol to device interface.

Linux discards the protocol control block, socket to protocol interface, protocol to protocol
interface, and protocol to device interface.

One of the major ramifications of @b{Linux} discarding the protocol to protocol interface is that it
is very difficult to implement layered or tunnelled protocols in the @b{Linux} kernel.
@footnote{That is, even more difficult than on a BSD system.}
Layered protocols that run, say, over UDP, such as econet, must internally use the socket interface
to a UDP datagram socket to layer the econet protocol over UDP.  Under @dfn{STREAMS} it is much
easier to either push econet as a module over the UDP transport provider stream, or to I_LINK
transport provider streams under an econet multiplexing driver.

@end itemize

In commenting on the relative performance of @cite{STREAMS} and Sockets, Mitchel Waite had this to
say:

@quotation
Sockets are like pipes with more power.  They are bidirectional and may cross network or other
machine boundaries.  In addition, sockets allow limited control information as well as data.

Streams are more general still, with extensive control information passing capabilities.

One most @cite{UNIX} systems, messages (if available) have the lowest overhead and highest
bandwidth, with pipes following close behind.  Because they support complex networking facilities,
sockets are probably less efficient than streams, but because they rarely appear on the same machine
as streams, the question is somewhat academic.  They certainly have much lower bandwidth than pipes
or messages.@footnote{@cite{UNIX Papers, for UNIX Developers and Power Users, (Waite, 1987) pp. 358-359}}
@end quotation

With @dfn{@value{PACKAGE_TITLE}} it will be very possible to compare the performance of @dfn{STREAMS}
in comparison to @dfn{Sockets}.  It will also be possible to compare the performance of traditional
@b{Linux} pipes and FIFOs with @dfn{STREAMS}-based pipes and FIFOs.

@node Benefits of STREAMS
@subsection Benefits of @cite{STREAMS}
@cindex benefits of @cite{STREAMS}
@cindex @cite{STREAMS}, benefits

@cite{STREAMS} provides a flexible, portable and reusable set of tools for development of @b{Linux}
system communications services.  @cite{STREAMS} allows an easy creation of modules that offer
standard data communications services and the ability to manipulate those modules on a Stream.  From
user level, modules can be dynamically selected and interconnected; kernel programming, assembly,
and link editing are not required to create the interconnection.

@cite{STREAMS} also greatly simplifies the user interface for languages that have complex input and
output requirements.

@subsubsection Standardized Service Interfaces
@cindex Standardized Service Interfaces

@cite{STREAMS} simplifies the creation of modules that present a service interface to any
neighbouring application program, module, or device driver.  A service interface is defined at the
boundary between two neighbours.  In @cite{STREAMS}, a @i{service interface} is a set of messages
and the rules that allow passage of these messages across the boundary.  A module that implements a
service interface will receive a message from a neighbour and respond with an appropriate action
(for example, send back a requires to retransmit) based on the specific message received and the
preceding sequence of messages.

In general, any two modules can be connected anywhere in a Stream.  However, rational sequences are
generally constructed by connecting modules with compatible protocol service interfaces.  For
example, a module that implements an X.25 protocol layer, as shown in
@c @figref{13},
Figure 13,
presents a protocol service interface at its input and output sides.  In this case, other modules
should only be connected to the input and output side if they have the compatible X.25 service
interface.

@subsubsection Manipulating Modules
@cindex Manipulating Modules

@cite{STREAMS} provides the ability to manipulate modules from user level, to interchange modules
with common service interfaces, and to change the service interface to a @cite{STREAMS} user
process.  These capabilities yield further benefits when implementing networking services and
protocols, including:

@itemize
@item User level programs can be independent of underlying protocols and physical communications
media.
@item Network architectures and higher level protocols can be independent of underlying protocols,
drivers, and physical communications media.
@item Higher level services can be created by selecting and connecting lower level services and
protocols.
@end itemize

@subsubsection Protocol Portability

@c @figref{13}
Figure 13,
shows how the same X.25 protocol module can be used with different drivers on different machines by
implementing compatible service interfaces.  The X.25 protocol module interfaces are Connection
Oriented Network Service (CONS) and Link Access Protocol - Balanced (LAPB).

@subsubsection Protocol Substitution

Alternate protocol modules (and device drivers) can be exchanged on the same machine if they are
implemented to an equivalent service interface.

@subsubsection Protocol Migration

@c @figref{14}
Figure 14
illustrates how @cite{STREAMS} can move functions between kernel software and front end firmware.  A
common downstream service interface allows the transport protocol module to be independent of the
number or type of modules below.  The same transport module will connect without modification to
either an X.25 module or X.25 driver that has the same service interface.

By shifting functions between software and firmware, you can produce cost-effective, functionally
equivalent systems over a wide range of configurations.  They can rapidly incorporate technological
advances.  The same transport protocol module can be used on a lower capacity machine, where
economics may preclude the use of front-end hardware, and also on a larger scale system where a
front-end is economically justified.

@subsubsection Module Reusability

@c @figref{15}
Figure 15
shows the same canonical module (for example, one that provide delete and kill processing on
character strings) reused in two different Streams.  This module would typically be implemented as a
filter, with no downstream service interface.  In both cases, a tty interface is presented to the
Stream's user process since the module is nearest the Stream head.

@node Criticism of STREAMS
@subsection Criticism of STREAMS
@cindex Criticism of STREAMS

Following are some excepts from Dennis M. Ritchie's original (1984) Bell Technical Journal paper on
the stream I/O system.  These excerpts are the limitations of the system as were perceived by Dennis
M. Ritchie at the time.  Strangely enough, although every limitation listed by Dennis was fixed even
as early as @cite{UNIX System V Release 3.0} and even in the @cite{UNIX Eighth Edition}, some BSD
advocates with use these limitations as a reason for not using @dfn{STREAMS} in BSD.  Also, note
that BSD'ers will also say that @dfn{STREAMS} was a @cite{UNIX Eighth Edition} (Bell Laboratories
Research version of UNIX) thing; however, Dennis' paper clearly states that the base system for the
initial @cite{Stream Input-Output System} was @cite{4.1BSD}.  Also note that @cite{4.1BSD} already
had @dfn{sockets} and that it is take that some of Ritchie's work was taken from @dfn{sockets}.  It
took until @cite{4.2BSD} for @cite{BBN} to add the @dfn{DARPANET} protocol stack to sockets.

Perhaps it is not so surprising why BSD'er hark back to Ritchie's original problem list for
@dfn{STREAMS}: because it was at that point that BSD decided to not follow the @cite{STREAMS} work
too closely, except as regards IPC, and UNIX domain mechanisms.  It is likely that BSD would have
used @dfn{STREAMS}, however, it was included in @cite{UNIX System V Release 3.0} and this was the
first release that @cite{AT&T} was allowed to aggressively market under the terms of the
@dfn{Modified Judgement}.

@quotation
Although the new organization performs well, it has several peculiarities and limitations.  Some of
them seem inherent, some are fixable, and some are the subject of current work.

I/O control calls turn into messages that require answers before a result can be returned to the
user.  Sometimes the message ultimately goes to another user-level process that may reply tardily or
never.  The stream is write-locked until the reply returns, in order to eliminate the need to
determine which process gets which reply.  A timeout breaks the lock, so there is an unjustified
error return if a reply is late, and a long lockup period if one is lost.  The problem can be
ameliorated by working harder on it, but it typifies the difficulties that turn up when direct calls
are replaced by message-passing schemes.
@end quotation

This problem was never really fixed I suppose because most @dfn{STREAMS} specifications say that
only one @command{ioctl} can be outstanding for a given stream.  Nevertheless, an @command{ioctl}
identifier was added to the @var{M_IOCTL}
@vindex M_IOCTL
message that uniquely identifies the @command{ioctl}.  Nevertheless, a timer is still used.  With
the @var{I_STR}
@vindex I_STR
@command{ioctl}, however, the caller has control over the duration of the timeout.
Strange, but this unfixed problem is the one that seldom gets raised as a reason for no using
@dfn{STREAMS}.

@quotation
Several oddities appear because time spent in server routines cannot be assigned to any particular
user or process.  It is impossible, for example, for devices to support privileged @command{ioctl}
calls, because the device has no idea who generated the message.  Accounting and scheduling becomes
less accurate; a short census of several systems showed that between 4 and 8 per cent of non-idle
CPU time was being spent in server routines.  Finally, the annonimity for server processing most
certainly makes it more difficult to measure the performance of the new I/O system.
@end quotation

This problem with privileged @command{ioctl} calls was easily fixed by adding the credentials of the
caller to the @var{M_IOCTL}
@vindex M_IOCTL
message.
This limitation is also not mentioned by @dfn{STREAMS} critics.

@quotation
In its current form the stream I/O system is purely data-driven.  That is, data is presented by a
user's @command{write} call, and passes through to the device; conversely, data appears unbidden from
a device an passes to the top level, where it is picked up by @command{read} calls.  Wherever
possible flow control throttles down fast generators of data, but nowhere except at the consumer end
of a stream is there knowledge for precisely how much data is desired.  Consider a command to execute
possibly interactive program on another machine connected to a stream.  The simplest such common
sets up the connection and invokes the remote program, and then copies characters from its own
standard input to the stream, and from the stream to its standard output.  The scheme is adequate in
practise, but breaks when the user types more than the remote program expects.  For example, if the
remote program reads no input at all, any typed-ahead characters are sent to the remote system and
lost.  This demonstrates a problem, but I know of no solution inside the stream I/O mechanism
itself; other ideas will have to be applied.
@end quotation

Back-enabling of queues and the use of the @var{M_READ}
@vindex M_READ
message makes it possible for the consumer end of the stream to signal its desire for data
downstream.
Also, in the example that Ritchie gives here, the network protocol (TCP) is of no help either.
This limitation is also not mentioned by @dfn{STREAMS} critics.

@quotation
Streams are linear connections; by themselves, they support no notion of multiplexing, fan-in or
fan-out.  Except at the ends of a stream, each invocation of a module has a unique "next" and
"previous" module.  Two locally-important applications of streams testify to the importance of
multiplexing: Blit terminal connections, where the multiplexing is done well, though at some
performance costs, but a user program, and remote execution of commands over a network, where it is
desired, but not now easy, to separate the standard output from error output.  It seems likely that
a general multiplexing mechanism could help in both cases, but again, I do not yet know how to
design it.
@end quotation

This was, of course, solved, even in @cite{UNIX System V Release 3.0} with the
@var{I_LINK},
@vindex I_LINK
@var{I_PLINK},
@vindex I_PLINK
@var{I_UNLINK}
@vindex I_UNLINK
and
@var{I_PUNLINK}
@vindex I_PUNLINK
@dfn{STREAMS} @command{ioctl} commands and the concept of a multiplexing pseudo-device driver.
This fixed limitation you will see mentioned below.

The following excerpt shows how BSD'ers like to misinterpret the situation:

@quotation
Original work on the flexible configuration of IPC processing modules was done at Bell Laboratories
in UNIX Eigth Edition [Presotto & Richie, 1985].  This @i{stream I/O system} was based on UNIX
character I/O system.  It allowed a user process to open a raw terminal port and then to insert
appropriate kernel-processing modules, such as one to do normal terminal line editing.  Modules to
process network protocols also could be inserted.  Stacking a terminal-processing module on top of a
network-processing module allowed flexible and efficient implementation of @i{network virtual
terminals} within the kernel.  A problem with streams modules, however, is that they are inherently
linear in nature, and thus they do not adequately handle the fan-in and fan-out associated with
multiplexing in datagram-based networks; such multiplexing is done in device drivers, below the
modules proper.  The Eighth Edition stream I/O system was adopted in System V, Release 3 as the
STREAMS system.
@footnote{@cite{The Design and Implementation of the 4.4BSD Operating System, McKusick, et. al.,
(Addison-Wesley, 1996) pp. 15-16}}
@end quotation

Well, the @cite{UNIX Eighth Edition} @dfn{Stream Input-Output System} may have been included in
@cite{UNIX System V Release 3.0} as stated, however, Ritchie's @dfn{Stream Input-Output System} was
implemented on @cite{4.1BSD} for the October 1984 paper.

@quotation
The design of the networking facilities for 4.2BSD took a different approach, based on the
@dfn{socket} interface and a flexible multilayer network architecture.  This design allows a single
system to support multiple sets of networking protocols with stream datagram, and other types of
access.  Protocol modules may deal with multiplexing of data from different connection onto a single
transport medium, as well as with demultiplexing of data for different protocols and connection
received from each network device.  The 4.4BSD release made small extensions to the socket interface
to allow the implementation of the ISO networking protocols.
@footnote{@cite{The Design and Implementation of the 4.4BSD Operating System, McKusick, et. al.,
(Addison-Wesley, 1996) pp. 15-16}}
@end quotation

@node Realities of STREAMS
@subsection Realities of STREAMS
@cindex Realities of STREAMS

The realities of @dfn{STREAMS} are as follows:

@itemize

@item @dfn{STREAMS} is implemented on every major ``Big Iron'' @cite{UNIX}.

Even Sun Microsystems chose to abandon BSD Sockets as an internal kernel networking implementation
and moved to the @cite{UNIX System V Release 4} @dfn{STREAMS} subsystem instead.@footnote{BSD'er
will tell you that Sun Microsystems just made a bad decision.} @dfn{STREAMS} is implemented (to list
a few) in 
@cite{AIX 5L Version 5.1 PSE},
@cindex AIX
@cite{HP-UX 11.0i v2 STREAMS/UX},
@cindex HP-UX
@cite{OSF/1 1.2/Digital UNIX},
@cindex OSF/1
@cindex Digital UNIX
@cite{UnixWare 7.1.3 (OpenUnix 8)},
@cindex UnixWare
@cindex OpenUnix
@cite{Solaris 9/SunOS 5.9},
@cindex Solaris
@cindex SunOS
@cite{Super-UX},
@cindex Super-UX
@cite{UXP/V}
@cindex UXP/V
and
@cite{MacOS OT}.
@cindex MacOS

@item @dfn{STREAMS} is implemented on many Real-Time Operating Systems (RTOS) based on @cite{UNIX}.

Examples include @cite{WindRiver}, @cite{PSOS}, @cite{VxWorks}, etc.

@item @dfn{STREAMS} implementations are widely standardized on the @cite{UNIX System V Release 4.2}
specifications.

@item @dfn{STREAMS} provides standardized (POSIX, OpenGroup, SVID) Transport Library Interface to
communications networking suites.

@item @dfn{STREAMS} has many portable implementations.

@end itemize

@node Why Fast?
@section Why Fast?
@cindex Why Fast?

@dfn{@value{PACKAGE_TITLE}} includes the word @cite{fast} in the name because of the original roots of
the @dfn{@value{PACKAGE_TITLE}} development effort.  @dfn{@value{PACKAGE_TITLE}} was originally developed by
the @url{http://www.openss7.org/, OpenSS7 Project} as a production replacement for the
@cite{Linux STREAMS (LiS)}
@cindex Linux STREAMS (LiS)
package previously available from @url{http://www.gcom.com/, GCOM}.
@cindex GCOM
One of the reasons for contemplating a replacement for
@cite{Linux STREAMS (LiS)}
@cindex Linux STREAMS (LiS)
was the dismal performance provided by
@cite{Linux STREAMS (LiS)}.
@cindex Linux STREAMS (LiS)
Other reasons included:
@itemize

@item Mainline Adoption instead of Portability

@cite{LiS} attempts to maintain portability across a number of operating systems.  The goals of
portability and mainline adoption are usually at cross-purposes.  @dfn{@value{PACKAGE_TITLE}} proposes
mainline adoption in contrast to portability.  Many @dfn{STREAMS} implementations are available for
other operating systems.

@item Production Grade

@cite{LiS} attempts to always provide debugging facilities@footnote{In fact, these debugging
facilities always point at the driver or module writer when a bug is encountered in LiS itself!} and
does not trust the driver or module writer.  This leads to poor performance and in many cases the
propagation of bugs to the field by failing to panic the kernel.  @dfn{@value{PACKAGE_TITLE}} aims at a
production grade environment that implicitly trusts the driver or module while providing optional
debugging facilities (both compile-time options as well as run-time options).

@item SVR 4.2 MP Compatibility

@cite{LiS} only provide @cite{SVR 4} uniprocessor capabilities.  @dfn{@value{PACKAGE_TITLE}} provides
@cite{SVR 4.2 MP} capabilities.

@item Portability

@cite{LiS} forces ported drivers and modules from other implementations to use the @cite{LiS} DDI
and configuration mechanisms.  @dfn{@value{PACKAGE_TITLE}} provides compatibility functions for all
major implementations of @dfn{STREAMS} as well as providing a rich DDI based on @cite{SVR 4.2 MP},
@cite{Solaris}, and other implementations.

@item Bug Circumvention

@item Major Redesign

@item Scalable

@item Soft Real Time Performance

@cite{LiS} avoids use of high-performance @b{Linux}-specific facilities because of its aims at
portability.  @dfn{@value{PACKAGE_TITLE}} being aimed at only @b{Linux} uses the highest-performance
techniques available in the @b{Linux} kernel form implementation.  This includes kernel memory
caches and other techniques.

@item Maintainability

@end itemize

@node Why Linux?
@section Why Linux?
@cindex Why Linux?

Well, @b{Linux} is the only @cite{SVR 4}
@cpindex SVR 4
based system that does not provide @cite{STREAMS}, although @cite{STREAMS} is an essential part of
@cite{SVR 4}.
@cpindex SVR 4
Without @cite{STREAMS}, @b{Linux} is just another @cite{BSD},
@cpindex BSD
and perhaps a bad one.

@node Why Compatibility?
@section Why Compatibility?
@cindex Why Compatibility?

@dfn{@value{PACKAGE_TITLE}} is designed and implemented to be compatible with as many
@cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
based implementations of @cite{STREAMS} as possible.  This is done for several reasons:

@enumerate

@item @i{Porting legacy drivers to @b{Linux}:}

Many legacy @cite{STREAMS} drivers have been written and developed for @cite{SVR 4.2 MP}
@cpindex SVR 4.2 MP
or @cite{UNIX} systems based on @cite{SVR 4.2 MP}.
@cpindex SVR 4.2 MP
Remaining compatible with as many implementation as possible permits these legacy drivers to be
easily ported from their native @cite{UNIX} variant to the @dfn{@value{PACKAGE_TITLE}}
@cpindex @value{PACKAGE_TITLE} (LfS)
environment, thus quickly porting these legacy drivers to @b{Linux}.

@item @i{Leverage of knowledge base:}

Many developers are familiar one or another of the mainstream @cite{UNIX} implementations of
@cite{SVR 4.2 MP STREAMS}.
@cpindex SVR 4.2 MP, @cite{STREAMS}
By remaining as compatible as possible with all these implementations of @cite{STREAMS} permits
knowledge and expertise in the @cite{UNIX} variant of @cite{STREAMS} to be transferred and applied
to @dfn{@value{PACKAGE_TITLE}}
@cpindex @value{PACKAGE_TITLE} (LfS)
on @b{Linux}.

@item @i{Reverse portability:}

Because it is as compatible as possible with other @cite{STREAMS} implementations, @cite{STREAMS}
drivers and modules developed on @dfn{@value{PACKAGE_TITLE}} can easily be ported to other
implementations if a set of compatibility and portability guidelines are followed.  This allows
@cite{STREAMS} drivers and modules developed on the @b{Linux} operating system to be used on branded
@cite{UNIX} systems with minimal porting and modification.

@item @i{Standardization:}

By being as compatible as possible with as many @cite{STREAMS} implementations as possible,
@dfn{@value{PACKAGE_TITLE}}
@cpindex @value{PACKAGE_TITLE} (LfS)
implements an @i{ipso facto} standard.  Unfortunately, the
@cite{OpenGroup}
@cpindex OpenGroup
and
@cite{POSIX}
@cpindex POSIX
have been very lacking in the standardization of internal kernel interfaces such as @cite{STREAMS}.
Maximum compatibility moves close to providing a standard for such interfaces.

@end enumerate

@subsection Intel Binary Compatibility Suite (iBCS)
@cindex Intel Binary Compatibility Suite (iBCS)

The @cite{Intel Binary Compatibility Suite} provides binary compatibility on the @cite{Intel}
architecture for systems conforming to @cite{SVR 4.2}.  @cite{RedHat} has released an @cite{iBCS}
module for their distributions of @b{Linux} and the @b{Linux Kernel} for some time.

@subsubsection OpenGroup Specifications
@cindex OpenGroup Specifications

OpenGroup and POSIX specifications have never directly addressed @dfn{STREAMS} implementation within
the operating system.  I suppose that this is primarily because 4BSD based system have seldom
included @dfn{STREAMS}.  Perhaps it was due to some religious upheaval from BSD advocates that did
not want to see @dfn{STREAMS} become part of a standard.

Nevertheless, the @dfn{STREAMS} subsystem has been an optional part of the
@url{http://www.opengroup.org/, OpenGroup} specifications for some time.  It is my opinion that the
@url{http://www.opengroup.org/, OpenGroup} has missed a rich opportunity for standardization of
kernel level interfaces.

@unnumberedsubsubsec UNIX 03 Compliance
@cindex UNIX 03 compliance
@cindex compliance, UNIX 03

@dfn{UNIX 03} compliance to @cite{Open Group Extensions} requires that XTI/TLI networking support be
provided.  (See @cite{XNS 5.2}).  As the @dfn{iBCS} has proven, this does not require full
@dfn{STREANS} support, however, it is an easier thing to accomplish with @dfn{STREAMS} support.
Even though the @cite{XNS 5.2} specification does not describe @dfn{STREAMS}, the @cite{SUSv3} does.
The @url{http://www.opengroup.org/, OpenGroup} has never defined the internals of the @dfn{STREAMS}
facility in their @dfn{CAE} specifications; however, they are described and the user-space
facilities and system calls are completely defined and described.

@unnumberedsubsubsec UNIX 98 Compliance
@cindex UNIX 98 compliance
@cindex compliance, UNIX 98

@dfn{UNIX 98} compliance to @cite{X/Open Extensions} requires that XTI/TLI networking support be
provided.  (See @cite{XNS 5}).  As the @dfn{iBCS} has proven, this does not require full
@dfn{STREANS} support, however, it is an easier thing to accomplish with @dfn{STREAMS} support.
Even though the @cite{XNS 5} specification does not describe @dfn{STREAMS}, the @cite{XSI 5} and
@cite{SUSv2} does.  The @url{http://www.opengroup.org/, OpenGroup} has never defined the internals
of the @dfn{STREAMS} facility in their @dfn{CAE} specifications; however, they are described and the
user-space facilities and system calls are completely defined and described.

@unnumberedsubsubsec UNIX 95 Compliance
@cindex UNIX 95 compliance
@cindex compliance, UNIX 95

@dfn{UNIX 95} compliance to @cite{X/Open Extensions} requires that XTI/TLI networking support be
provided.  (See @cite{XNS 4.2}).  As the @dfn{iBCS} has proven, this does not require full
@dfn{STREANS} support, however, it is an easier thing to accomplish with @dfn{STREAMS} support.
Even though the @cite{XNS 4.2} specification does not describe @dfn{STREAMS}, the @cite{XSI 4.2} and
@cite{SUS} does.  The @url{http://www.opengroup.org/, OpenGroup} has never defined the internals of
the @dfn{STREAMS} facility in their @dfn{CAE} specifications; however, they are described and the
user-space facilities and system calls are completely defined and described.

@subsection Device Driver Interface (DDI)
@cindex DDI

@node Overview
@chapter Overview of @value{PACKAGE_TITLE}
@cindex overview
@menu
* Definitions::			STREAMS Definitions
* Concepts::			STREAMS Concepts
* Application Interface::	STREAMS Application Interface
* Kernel Level Facilities::	STREAMS Kernel Facilities
* Subsystems::			STREAMS Subsystems
@end menu

This manual documents how to develop and port STREAMS drivers and modules for
@value{PACKAGE_TITLE}.

@node Definitions
@section @cite{STREAMS} Definitions
@cindex @cite{STREAMS}, definitions
@cindex definitions, @cite{STREAMS}

@table @dfn

@item Stream
A @dfn{Stream} is a full-duplex communications path between a User Process and a Kernel Level Device
or Pseudo-Device Driver.  A @dfn{Stream} is a group of @dfn{STTREAMS} message queue pairs in a chain
from a kernel driver at the @dfn{Stream End} to a @dfn{Stream Head} at the user.

@item Stream Head
A @dfn{Stream Head} is the component in a @dfn{Stream} that is closest to the User Process.  The
@dfn{Stream Head} sits in Kernel Space and provide interface to the User Process.

@item Stream End
A @dfn{Stream End} is the component in a @dfn{Stream} that is farthest from the User Process.  The
@dfn{Stream End} sits in Kernel Space and is normally a Device or Pseudo-Device Driver.

@item Module
A @dfn{Module} is a protocol module that resides between the @dfn{Stream Head} and @dfn{Stream End}
on a @dfn{Stream}.  Protocol @dfn{Modules} are optional and can be pushed or popped from a
@dfn{Stream} using @command{ioctl} commands to the @dfn{Stream Head}.  A @dfn{Module} can refer to a
linkable kernel component (kernel module), a @dfn{STREAMS} driver, module or mux (@dfn{STREAMS}
module), or a pushable @dfn{STREAMS} module.

@item Driver
A @dfn{Driver} is a device or pseudo-device driver that sits at the @dfn{Stream End}.  @dfn{Drivers}
are associated with device numbers and are opened by the User Process.  A @dfn{Driver} is a
@dfn{STREAMS} module which sets at a @dfn{Stream End}, farthest from the user on a @dfn{Stream}.

@item Messages
A @dfn{Message} is a chain of data buffers used for passing data by reference between neighbouring
@dfn{STREAMS} @dfn{Modules}, the @dfn{Stream Head} and the @dfn{Driver}. A @dfn{Message} is a
message containing data that is made up of a sequence of message blocks, data blocks and data.

@item Queues
Each @dfn{Stream Head}, @dfn{Stream End} and intervening @dfn{Module} consists of a pair of
@dfn{Queues}: one downstream @dfn{Queue} for messages first written by the User Process, and one
upstream @dfn{Queue} for messages ultimately read by the User Process.  A @dfn{Queue} is an ordered
list of messages awaiting processing.  @dfn{STREAMS} modules form a full duplex connection by
pairing queues as read and write queues.

@item Stream I/O

@item Multiplexing
@dfn{Multiplexing} is a situation where multiple @dfn{Streams} can fan-in or fan-out from a
@dfn{Module} or @dfn{Multiplexing Driver}.  A @dfn{Multiplexing} driver or @dfn{mux} is a
@dfn{STREAMS} module which has lower as well as upper queue pairs.

@item Polling

@item Flow Control
A @dfn{Stream} is flow-controlled when it is congested and temporarily cannot pass messages in the
band in which the stream is flow-controlled.

@end table

@node Concepts
@section Concepts
@cindex concepts

There are three types of @cite{STREAMS} entities: the stream head, modules and drivers.  Stream
heads are the kernel-space interface to the user process.  Modules are pushable streams protocol
modules that are optionally placed between the user process (stream head) and the driver (stream
end).  Drivers are device drivers or pseudo device drivers that can be opened using a character
device special file.

@figuresized{SPG_fig08,8,@dfn{STREAMS} Modules,4in}

@figref{8} illustrates the basic @dfn{STREAMS} modules:

@table @dfn

@item Stream Head
The @dfn{Stream Head} is allocated by the @dfn{STREAMS} subsystem when a @dfn{STREAMS} character
special device is opened.

A stream head is created whenever the first @command{open(2)}
@pgindex open(2)
is performed on a @dfn{STREAMS} device.  A stream head has a queue pair just like any other driver,
module or multiplexer, but it interfaces directly with user-space library calls.  A stream head is
opened whenever a driver is opened (whether for the first time or not), and each time that a module
is pushed onto the stream.  A stream head is closed when the last close is performed on the stream.

@item Driver
@dfn{Drivers} are opened by character major and minor device number.

Instances of a @dfn{STREAMS} driver are created by calling @command{open(2)}
@pgindex open(2)
on a character special device which has a device major number which has been registered against the
driver.  Opening the special character device results in the driver's open procedure being called.
The driver's open procedure is also called each time that the device is opened and each time that a
module is pushed onto a stream.  Closing the special character device for the last time results in
the driver's close procedure being called.

@item Module
@dfn{Modules} may be pushed under a @dfn{Stream Head} once a @dfn{Driver} or @dfn{Multiplexer} has
been opened.

@dfn{STREAMS} modules are not created by calling @command{open(2)}:
@pgindex open(2)
they are pushed onto an open stream with the @var{I_PUSH} @command{ioctl(2)}.
@vindex I_PUSH
@pgindex ioctl(2)
@cindex streamio(7)
Modules are pushed by name.  Modules can be popped from a stream using the @var{I_POP}
@command{ioctl(2)}.
@vindex I_POP
@pgindex ioctl(2)
@cindex streamio(7)
Several modules can be pushed on a stream.  A module's open procedure is called when it is pushed
and whenever the stream is reopened, and its close procedure is called whenever it is popped, or
when the stream is closed for the last time and is being dismantled.

@item Multiplexer
@dfn{Multiplexers} are opened on the upper interface like @dfn{Drivers}, but can also have other
streams @dfn{linked} underneath them.

@dfn{STREAMS} @dfn{Multiplexers} have both an upper queue pair and a lower queue pair.  Upper queue
pairs are opened when a character special device is opened as with a driver.  Lower queue pairs are
linked when another stream is linked under the @dfn{Multiplexer} by executing the @var{I_LINK} or
@var{I_PLINK}
@vindex I_LINK
@vindex I_PLINK
@command{ioctl(2)} command
@pgindex ioctl(2)
@cindex streamio(7)
on a control stream associated with the @dfn{Multiplexer}.

@var{I_LINK}'ed
@vindex I_LINK
streams can by unlinked with the @var{I_UNLINK}
@vindex I_UNLINK
@command{ioctl(2)}
@pgindex ioctl(2)
@cindex streamio(7)
command.
@var{I_PLINK}'ed
@vindex I_PLINK
streams can by unlinked with the @var{I_PUNLINK}
@vindex I_PUNLINK
@command{ioctl(2)}
@pgindex ioctl(2)
@cindex streamio(7)
command.
When the control stream is closed, all @var{I_LINK}'ed
@vindex I_LINK
streams are automatically unlinked.  @var{I_PLINK}'ed
@vindex I_PLINK
streams remain linked until the last upper stream of the @dfn{Multiplexer} is closed, at which time
the @dfn{Multiplexer} is dismantled and the @var{I_PLINK}'ed
@vindex I_PLINK
streams are @var{I_PUNLINK}'ed
@vindex I_PUNLINK
and closed.

@end table

A simple stream is illustrated in @figref{1}.

@figuresized{SPG_fig01,1,Simple Stream,4in}

In the simple stream, the @dfn{downstream} flow is the flow from the User Process to the Driver that
passes through any optional intervening Modules; the @dfn{upstream} flow is the flow from the Driver
to the User Process, again through any intervening Modules.

It is possible to have a stream that does not contain a module or driver.  There are two types of
streams that do not contain a module or driver: a pipe and a FIFO (named pipe).

A @dfn{STREAMS}-based pipe is illustrated in @figref{2}.

@figuresized{SPG_fig02,2,@cite{STREAMS}-based Pipe,4in}

A @dfn{STREAMS}-based FIFO is illustrated in @figref{7}.

@figuresized{SPG_fig07,7,@cite{STREAMS}-based FIFO (named pipe),4in}

Each @cite{STREAMS} driver or module has a number of constituent pieces.  Each @cite{STREAMS} driver
or module contains a stream table, stream administration, module information, module statistics and
queue initialization information.

Each instance of a @cite{STREAMS} driver or module has associated with it a stream head and a stream
end (the driver).  Each instance of a @cite{STREAMS} driver or module contains a queue pair with a
write (downstream) and read (upstream) queue.  Each queue possibly has queue band information
associated with the queue.

Each @cite{STREAMS} queue and queue band can contain @cite{STREAMS} messages.  @cite{STREAMS}
messages are composed of message blocks, data blocks and data buffers in a chain-buffer arrangement.

@figuresized{SPG_fig09,9,Message Overview,4in}

@figref{9} illustrates a @dfn{STREAMS} message.  Messages are strings of message blocks.  Each
message block refers to a data block.  Each data block has a data area associated with it.  The
data block has a message type (@samp{db_type}) associated with it.  Message types can be one of the
following:

@subheading Normal Messages

@multitable @columnfractions .20 .05 .05 .70
@item @var{M_DATA} @tab D @tab U @tab data to or from the user
@vindex M_DATA
@item @var{M_PROTO} @tab D @tab U @tab protocol primitive
@vindex M_PROTO
@item @var{M_BREAK} @tab D @tab - @tab request a driver to send a break in the medium
@vindex M_BREAK
@item @var{M_CTL} @tab D @tab U @tab used for inter-module and driver communication
@vindex M_CTL
@item @var{M_DELAY} @tab D @tab - @tab requests a real-time delay in output processing
@vindex M_DELAY
@item @var{M_IOCTL} @tab D @tab - @tab passes a streams ioctl call
@vindex M_IOCTL
@item @var{M_PASSFP} @tab D @tab U @tab user be stream heads to pass file pointers to each other (e.g. pipes)
@vindex M_PASSFP
@item @var{M_RSE} @tab D @tab U @tab reserved
@vindex M_RSE
@item @var{M_SETOPTS} @tab - @tab U @tab set options on the stream head
@vindex M_SETOPTS
@item @var{M_SIG} @tab - @tab U @tab sends a signal to the user
@vindex M_SIG
@end multitable

@subheading Priority Messages

@multitable @columnfractions .20 .05 .05 .70
@item @var{M_COPYIN} @tab - @tab U @tab copy data from user for transparent ioctl
@vindex M_COPYIN
@item @var{M_COPYOUT} @tab - @tab U @tab copy data to user for transparent ioctl
@vindex M_COPYOUT
@item @var{M_ERROR} @tab - @tab U @tab sends a fatal error to the stream head
@vindex M_ERROR
@item @var{M_FLUSH} @tab D @tab U @tab requests that driver and modules discard messages
@vindex M_FLUSH
@item @var{M_HANGUP} @tab - @tab U @tab indicates to the stream head that no more data can be read or written
@vindex M_HANGUP
@item @var{M_IOCACK} @tab - @tab U @tab acknowledges an ioctl request
@vindex M_IOCACK
@item @var{M_IOCNAK} @tab - @tab U @tab negatively acknowledges an ioctl request
@vindex M_IOCNAK
@item @var{M_IOCDATA} @tab D @tab - @tab provides data requested by a @var{M_COPYIN}
@vindex M_IOCDATA
@vindex M_COPYIN
@item @var{M_PCPROTO} @tab D @tab U @tab priority protocol primitive
@vindex M_PCPROTO
@item @var{M_PCRSE} @tab D @tab U @tab reserved
@vindex M_PCRSE
@item @var{M_PCSIG} @tab - @tab U @tab sends a priority signal to the user
@vindex M_PCSIG
@item @var{M_READ} @tab D @tab - @tab sent by the stream head when the user issues an unsatisfied @command{read(2)} call
@vindex M_READ
@pgindex read(2)
@item @var{M_STOP} @tab D @tab - @tab requests that a device stop its output
@vindex M_STOP
@item @var{M_START} @tab D @tab - @tab request that a device start its output
@vindex M_START
@item @var{M_STARTI} @tab D @tab - @tab requests that a device start its input
@vindex M_STARTI
@item @var{M_STOPI} @tab D @tab - @tab requests that a device stop its input
@vindex M_STOPI
@end multitable

Message functions consist of the following:

@multitable @columnfractions .20 .80
@item @command{adjmsg(9)} @tab trims bytes from the front or back of a message
@findex adjmsg(9)
@item @command{allocb(9)} @tab allocates a combined message and data block
@findex allocb(9)
@item @command{bufcall(9)} @tab calls a specified function when buffers become available
@findex bufcall(9)
@item @command{copyb(9)} @tab copies a message block including the data
@findex copyb(9)
@item @command{copymsg(9)} @tab copies all the message blocks and data making up a message
@findex copymsg(9)
@item @command{datamsg(9)} @tab tests if the message is a data message (@var{M_DATA}, @var{M_PROTO}, ...)
@findex datamsg(9)
@item @command{dupb(9)} @tab duplicates a message block but references the same data
@findex dupb(9)
@item @command{dupmsg(9)} @tab duplicates all message blocks making up a message but references the
@findex dupmsg(9)
same data in each message block
@item @command{esballoc(9)} @tab allocates a message block and data block but references a
@findex esballoc(9)
user-provided data and free function
@item @command{freeb(9)} @tab frees a message block
@findex freeb(9)
@item @command{freemsg(9)} @tab frees an entire message
@findex freemsg(9)
@item @command{linkb(9)} @tab links a message block onto the end of a message
@findex linkb(9)
@item @command{msgdsize(9)} @tab counts the bytes in @var{M_DATA} blocks in a message
@findex msgdsize(9)
@item @command{pullupmsg(9)} @tab places data from an entire message into a single message block
@findex pullupmsg(9)
@item @command{unbufcall(9)} @tab cancels an earlier buffer callback request
@findex unbufcall(9)
@item @command{unlinkb(9)} @tab remove the first message block in a message
@findex unlinkb(9)
@end multitable

Messages can be priority or normal messages.  Priority messages are delivered ahead of normal
messages.  Normal messages can be in one of 256 bands (0-255).  Band @samp{n} messages are delivered
ahead of band @samp{m} messages where @samp{n>m}.  Queues are scheduled whenever messages are placed
on the tail of the queue.  Queues are scheduled whenever priority messages exist in a queue,
regardless of whether they were placed on the tail or the head of the queue.  Care must be taken not
to return a priority message to the head of the queue in a service procedure or the service
procedure will simply be rescheduled.

Buffers can be allocated as @var{BPRI_HI},
@vindex BPRI_HI
@var{BPRI_MED},
@vindex BPRI_MED
@var{BPRI_LO}
@vindex BPRI_LO
and @var{BRPI_WAITOK}.
@vindex BPRI_WAITOK
In many @dfn{STREAMS} implementations, these priorities have no meaning.

A buffer that is smaller than a given size (@var{FASTBUF})
@vindex FASTBUF
will be allocated more quickly.  This is because the buffer is allocated coincident with the message
block and data block.

When the system runs out of buffer, it will return failure to @command{allocb(9)}
@findex allocb(9)
and @command{esballoc(9)}.
@findex esballoc(9)
@command{bufcall(9)}
@findex bufcall(9)
or @command{esbbcall(9)}
@findex esbbcall(9)
can be used to have the @dfn{STREAMS} subsystem call a client function when a buffer of the given
size is available.  Care must be taken with the use of @command{bufcall(9)}
@findex bufcall(9)
that deadlock situations do not arise.

@figuresized{SPG_fig03,3,Stream to Communications Driver,4in}

Each module in a stream consists of a pair of queues: one for read (upstream) and one for write
(downstream).  Each queue is one of a pair of queues, see @figref{4}.  Where @samp{q} is one of the
queues in the pair, the paired queue is identified by @samp{OTHERQ(q)}.  Where @samp{q} is the write
queue in the pair, the read queue is identified by @samp{RD(q)}.  The read queue is for messages
ultimately read by the user.  Where @samp{q} is the read queue in the pair, the write queue is
identified by @samp{WR(q)}.  The write queue is for messages first written by the user.

@figuresized{SPG_fig04,4,Queue Pair Allocation,0.5in}

Queue functions consist of the following:

@multitable @columnfractions .20 .80
@item @command{backq(9)} @tab obtains a pointer to the previous queue in a stream
@findex backq(9)
@item @command{bcanput(9)} @tab tests for flow-control in a particular priority band
@findex bcanput(9)
@item @command{canput(9)} @tab test flow-control
@findex canput(9)
@item @command{enableok(9)} @tab marks a queue as being ready to be enabled
@findex enableok(9)
@item @command{flushband(9)} @tab removes all queued messages in a specified priority band
@findex flushband(9)
@item @command{flushq(9)} @tab removes all messages from a queue
@findex flushq(9)
@item @command{getadmin(9)} @tab finds the pointer to the @code{qi_qadmin()} function for a module
@findex getadmin(9)
@item @command{getmid(9)} @tab looks up the module identifier
@findex getmid(9)
@item @command{getq(9)} @tab gets a message from a queue
@findex getq(9)
@item @command{insq(9)} @tab inserts a message at a given point in a queue
@findex insq(9)
@item @command{noenable(9)} @tab stops a queue from being scheduled
@findex noenable(9)
@item @command{OTHERQ(9)} @tab finds the sibling of a given queue
@findex OTHERQ(9)
@item @command{putbq(9)} @tab puts back a message on a queue
@findex putbq(9)
@item @command{putctl(9)} @tab puts a control (e.g., @var{M_CTL}) message on a queue
@findex putctl(9)
@vindex M_CTL
@item @command{putctl1(9)} @tab puts a 1-byte control message on a queue
@findex putctl1(9)
@item @command{putnext(9)} @tab passes a message to the next queue in a stream
@findex putnext(9)
@item @command{putq(9)} @tab puts a message on a queue
@findex putq(9)
@item @command{qenable(9)} @tab schedule a queue
@findex qenable(9)
@item @command{qreply(9)} @tab passes a reply along a stream in the opposite direction
@findex qreply(9)
@item @command{qsize(9)} @tab returns the number of message on a queue
@findex qsize(9)
@item @command{RD(9)} @tab finds the read queue
@findex RD(9)
@item @command{rmvq(9)} @tab removes a message from the middle of a queue
@findex rmvq(9)
@item @command{strqget(9)} @tab queries the information from a queue
@findex strqget(9)
@item @command{WR(9)} @tab finds the write queue
@findex WR(9)
@end multitable

The queue open procedure is called whenever a driver special character device is opened.  It is also
called when a module is pushed onto a stream.

The queue close procedure is called when a driver special character device is closed for the last
time.  It is also called when a module is popped from a stream.

The queue put procedure is called whenever a previous queue in the stream passes a message to the
queue, or a message is otherwise placed on the queue with the @command{put(9)}
@findex put(9)
function.

The queue service procedure is called when there are messages on the queue to be serviced and the
@dfn{STREAMS} subsystem has scheduled the queue for service.

Put and service procedures must handle
@var{M_DATA},
@vindex M_DATA
@var{M_PROTO},
@vindex M_PROTO
@var{M_PCPROTO},
@vindex M_PCPROTO
@var{M_FLUSH}
@vindex M_FLUSH
and
@var{M_IOCTL}
@vindex M_IOCTL
messages.  Other messages are more or less optional.

Module put and service procedures should pass any unrecognized message types along.  Module put and
service procedures should pass any unrecognized @var{M_IOCTL}
@vindex M_IOCTL
@command{ioctl(2)} commands along.
Modules must perform canonical flushing in response to
@var{M_FLUSH}
@vindex M_FLUSH
messages.  This includes passing @var{M_FLUSH}
@vindex M_FLUSH
messages along downstream or upstream.

Driver put and service procedures should discard any unrecognized message types.  Driver put and
service procedures should negatively acknowledge (@var{M_IOCNAK})
@vindex M_IOCNAK
any unrecognized @var{M_IOCTL}
@vindex M_IOCTL
commands.
Drivers must perform canonical flushing in response to
@var{M_FLUSH}
@vindex M_FLUSH
messages.  This includes sending @var{M_FLUSH}
@vindex M_FLUSH
message that arrive on their way downstream to the upstream queues (@command{qreply(9)}).
@findex qreply(9)

Queue scheduling pertains to when a queue's service procedure is schedule to run by the kernel.
When a queue's service procedure is scheduled to run, the queue is considered enabled.  When a
queue's service routine is prohibited from running, it is considered disabled.  Only queues that
have service procedures can become enabled.  Queues with only @command{put(9)}
@findex put(9)
procedures are never enabled.

Queues are enabled whenever a priority messages is placed on the queue.  Queues are enable whenever
@command{qenable(9)}
@findex qenable(9)
is called explicitly.
Queues are also enabled as a result of back-enabling.  A queue is back-enabled when it previously
tested the next queue for flow control and found the queue flow controlled (the queue had passed its
high water mark); the queue which was previously test is now no longer flow controlled (it has
fallen below its low water mark); the queue which previously tested can now put to the queue which
was flow controlled.

Queues are disabled whenever the queue service procedure has run.  Queues are disabled whenever
@command{noenable(9)}
@findex noenable(9)
has been called explicitly.  Queues are disabled whenever they are empty.

Flow control pertains to when a queue will accept messages put to it from above and below.  When the
number of bytes in a  queue passes the high water mark associated with the queue, the queue is
considered flow controlled.  Flow controlled queues will fail a @command{canput(9)} call.
@findex canput(9)
When the number of bytes in a flow controlled queue falls below the low water mark, the queue is
considered available to process messages again.  Only queues that have a service procedure can become
flow controlled.  Only queues that have service procedures need check for flow control downstream.

It is the responsibility of a module performing a @command{putq(9)},
@findex putq(9)
a @command{putnext(9)}
@findex putnext(9)
or a @command{qreply(9)}
@findex qreply(9)
to a queue to check for flow control with @command{canput(9)},
@findex canput(9)
@command{canputnext(9)},
@findex canputnext(9),
@command{bcanput(9)}
@findex bcanput(9)
or
@command{bcanputnext(9)}
@findex bcanputnext(9)
before placing the message on a queue.
Modules that receive messages when they are flow controlled might discard them.
Flow control kicks in when the number of byte queued passes the queue's high water mark.

Back-enabling occurs when a queue that was previously flow controlled, drops below its low water
mark, and was tested while it was flow controlled.  Flow control can be difficult to accomplish
correctly in drivers and across multiplexers.



@dfn{STREAMS} drivers, modules and multiplexing drivers are described with a series of statically
allocated structures beginning with the driver switch table or module switch table entries.

@menu
* Stream Administration::
* Driver Switch Table::
* Module Switch Table::
* Stream Table::
* Queue Initialization::
* Module Information::
* Module Statistics::
* Stream Head::
* Queue::
* Queue Band::
* Message Block::
* Data Block::
* Data Buffer::
* User Credentials::
@end menu

@node Stream Administration
@subsection Stream Administration
@cindex Stream Administration

Some @cite{STREAMS} implementation also provide some sort of @cite{STREAMS} administration structure
that contains more specific information about a @cite{STREAMS} driver or module, such as the name of
the driver or module, synchronization, administrative flags, version, etc.  These administrative
structures are normally passed to the registration procedure to register a driver or module.
Implementations that function this way are @cite{AIX},
@cindex AIX
@cite{OSF/1},
@cindex OSF/1
@cite{HP-UX}
@cindex HP-UX
and
@cite{UnixWare}.
@cindex UnixWare

@cite{AIX}
@cindex AIX
uses the @code{strconf_t}
@tindex strconf_t
structure and calls the @command{str_install_AIX(9)}
@findex str_install_AIX(9)
registration function.
@cite{OSF/1}
@cindex OSF/1
uses the @code{streamadm(9)}
@tindex streamadm(9)
structure and calls the @command{strmod_add(9)}
@findex strmod_add(9)
and @command{strmod_del(9)}
@findex strmod_del(9)
registration functions.
@cite{HP-UX}
@cindex HP-UX
uses the @code{stream_inst(9)}
@tindex stream_inst
structure and calls the @command{str_install_HPUX(9)}
@findex str_install_HPUX(9)
and @command{str_uninstall(9)}
@findex str_uninstall(9)
registration functions.

The @file{sys/strconf.h} header file contains definitions for both the @dfn{STREAMS} administrative
structures as well as declarations and function prototypes for the registration functions.

Other @dfn{STREAMS} implementations use the character device switch table or module switch table
entries themselves.  The partially completed entry might still be passed to the registration
function like a @dfn{STREAMS} administrative structure.
Implementations that function this way are @cite{Solaris}
@cindex Solaris
and
@dfn{@value{PACKAGE_TITLE}}.
@cindex @value{PACKAGE_TITLE}

@cite{Solaris}
@cindex Solaris
uses a plethora of statically allocated structures to describe @dfn{STREAMS} drivers and modules.
Several of these structures correspond to the character device (well, character and block device)
switch table entry as well as the module switch table entry.
@cite{@value{PACKAGE_TITLE}}
@cindex @value{PACKAGE_TITLE}
uses the actual character device switch table and module switch table structures and calls the
@command{register_strdrv(9)}
@findex register_strdrv(9)
and
@command{register_strmod(9)}
@findex register_strmod(9)
registration functions.

Some implementations use a registration function alone and do not pass a structure.
Implementations that function this way are @cite{LiS}.
@cindex LiS

@cite{LiS}
@cindex LiS
simply calls the
@command{lis_register_strdrv(9)}
@findex lis_register_strdrv(9)
and
@command{lis_register_strmod(9)}
@findex lis_register_strmod(9)
registration functions.

@node Driver Switch Table
@subsection Driver Switch Table
@cindex Driver Switch Table

Each @cite{STREAMS} device or pseudo-device driver or multiplexing driver registers itself with the
@cite{STREAMS} subsystem.  Nevertheless, to allow user processes to open the @cite{STREAMS} device
requires that the device by entered into the system device switch tables.  @cite{SVR 3} had a device
switch table and many other @cite{UNIX} implementations do as well.  @b{Linux} does not use a device
switch table.  Rather it uses character device lists hashed on device number, or a file system
mechanism such as the device file system (@samp{devfs}) or @samp{udev}.  @dfn{@value{PACKAGE_TITLE}}
registers devices with the necessary @b{Linux} mechanism and then implements an internal device
switch table as a list hashed on device number.

Normally, @dfn{STREAMS} implementations have some mechanism for registering a driver with the
character device switch table or other structures used for opening @dfn{STREAMS} devices.  Some
configuration procedure take structures (e.g. @cite{Solaris}), some do not (e.g. @cite{LiS}).  Each
configuration technique is unique to that implementation.  @dfn{@value{PACKAGE_TITLE}} supports its
own registration technique as well as several of the other more common implementation methods.
@dfn{@value{PACKAGE_TITLE}} has its own registration procedure that consists of first completing a
static @code{cdevsw(9)}
@tindex cdevsw(9)
structure for entry into the @code{cdevsw_list(9)},
@tindex cdevsw_list(9)
which is @dfn{@value{PACKAGE_TITLE}}'s equivalent of a character device switch table.

The character device switch table entry structure (@code{cdevsw(9)})
@tindex cdevsw(9)
structure takes the following information:

@multitable @columnfractions .15 .85
@item @code{d_list} @tab list of all cdevsw structures
@item @code{d_hash} @tab list of module hashes in slot
@item @code{d_name} @tab driver name
@item @code{d_str} @tab pointer to streamtab for driver
@item @code{d_flag} @tab driver flags
@item @code{d_modid} @tab driver module identifier
@item @code{d_count} @tab open count
@item @code{d_sqlvl} @tab synchronization level
@item @code{d_syncq} @tab synchronization queue
@item @code{d_kmod} @tab kernel module
@item @code{d_major} @tab base major device number
@item @code{d_inode} @tab specfs inode
@item @code{d_mode} @tab inode mode
@item @code{d_fop} @tab file operations
@item @code{d_majors} @tab major device nodes for this device
@item @code{d_minors} @tab minor device nodes for this device
@item @code{d_apush} @tab autopush list
@item @code{d_plinks} @tab permanent links for this driver
@item @code{d_stlist} @tab stream head list for this driver
@end multitable

Only the driver name, @code{streamtab}
@tindex streamtab(9)
pointer, flags and synchronization level need be completed by the module writer: the remaining
fields in the @code{cdevsw}
@tindex cdevsw(9)
structure will be populated by the registration procedure.
The procedure used by @dfn{@value{PACKAGE_TITLE}} for registering @dfn{STREAMS} drivers is the
@command{register_strdrv(9)}
@findex register_strdrv(9)
kernel function.

@node Module Switch Table
@subsection Module Switch Table
@cindex Module Switch Table

Each @cite{STREAMS} module registers itself with the @cite{STREAMS} subsystem and is assigned a
unique module identification number.  Even @cite{STREAMS} device or pseudo-device driver's are
assigned a unique module identification number.  In most @cite{STREAMS} implementations, modules are
entered by module identification number into a module switch table.  @dfn{@value{PACKAGE_TITLE}}
implements an internal module switch table as a list hashed on module identifier.

Normally, @dfn{STREAMS} implementations have some mechanism for registering a module with the module
switch table or other structures used for opening @dfn{STREAMS} modules.  Some configuration
procedures take structures (e.g. @cite{Solaris}), some do not (e.g. @cite{LiS}).  Each configuration
technique is unique to that implementation.  @dfn{@value{PACKAGE_TITLE}} supports its own
configuration technique as well as several of the other more common implementation methods.
@dfn{@value{PACKAGE_TITLE}} has its own registration procedure that consists of first completing a
static @code{fmodsw(9)}
@tindex fmodsw(9)
structure for entry into the @code{fmodsw_list(9)},
@tindex fmodsw_list(9)
which is @dfn{@value{PACKAGE_TITLE}}'s equivalent of a module switch table.

The module switch table entry structure (@code{fmodsw(9)})
@tindex fmodsw(9)
structure takes the following information:

@multitable @columnfractions .15 .85
@item @code{f_list} @tab list of all fmodsw structures
@item @code{f_hash} @tab list of module hashes in slot
@item @code{f_name} @tab module name
@item @code{f_str} @tab pointer to streamtab for module
@item @code{f_flag} @tab module flags
@item @code{f_modid} @tab module identifier
@item @code{f_count} @tab open count
@item @code{f_sqlvl} @tab synchronization level
@item @code{f_syncq} @tab synchronization queue
@item @code{f_kmod} @tab kernel module
@end multitable

Only the module name, @code{streamtab}
@tindex streamtab(9)
pointer, flags and synchronization level need be completed by the module writer: the remaining
fields in the @code{fmodsw}
@tindex fmodsw(9)
structure will be populated by the registration procedure.
The procedure used by @dfn{@value{PACKAGE_TITLE}} for registering @dfn{STREAMS} modules is the
@command{register_strmod(9)}
@findex register_strmod(9)
kernel function.
It is no coincidence that the @code{fmodsw} structure is identical to the first portion of the
@code{cdevsw} structure.

@node Stream Table
@subsection Stream Table
@cindex Stream Table

Each @cite{STREAMS} driver or module has an external entry point into a streams table.  The stream
table structure is the jumping off point for all driver or module specific data structures that
describe the @cite{STREAMS} driver or module.  Each @cite{STREAMS} driver or module that is unique
within the @cite{STREAMS} subsystem has a unique stream table, regardless of which device major
numbers, module identifiers, or other external registrations have been performed on behalf of the
driver of module.

The stream table structure (@code{streamtab})
@tindex streamtab
contains the following information:

@multitable @columnfractions .15 .85
@item @code{st_rdinit} @tab read queue init structure pointer
@item @code{st_wrinit} @tab write queue init structure pointer
@item @code{st_muxrinit} @tab multiplexer lower read queue init structure pointer
@item @code{st_muxwinit} @tab multiplexer lower write queue init structure pointer
@end multitable

Only the @code{st_rdinit} and @code{st_wrinit} members need be completed for a normal module or
driver.  For a multiplexing driver that accepts the @var{I_LINK}
@vindex I_LINK
or @var{I_PLINK}
@vindex I_PLINK
commands, the lower queue initialization information, @code{st_muxrinit} and @code{st_muxwinit} must
be completed as well.

@node Queue Initialization
@subsection Queue Initialization
@cindex Queue Initialization

Each stream table (driver or module) has associated with it queue initialization information for the
upstream and downstream queues.  If the driver is a multiplexing driver, it may also have associated
with the stream table upstream and downstream queue initialization information for the lower queue
pair.

The queue initialization structure provides function pointers to the put, service, open, close and
administrative procedures for the queue to which the initialization structure belongs.  Queue
initialization structures are bound to a specific upper or lower, upstream or downstream queue using
the stream table.  Up to four queue initialization structures can exist for a driver or module, or,
it is possible that all four queues could share a single queue initialization
structures.@footnote{Only the open and close procedures indicated in the queue initialization
structure associated with an upper upstream (read) queue will be used to open and close an instance
of the driver or module.  Open and close function pointers in the other queue initialization
structures will be ignored.}

The queue initialization structure (@code{qinit(9)})
@tindex qinit(9)
contains the following information:

@multitable @columnfractions .15 .85
@item @code{qi_putp} @tab put procedure
@item @code{qi_srvp} @tab service procedure
@item @code{qi_qopen} @tab each open (read queue only)
@item @code{qi_qclose} @tab last close (read queue only)
@item @code{qi_qadmin} @tab administrative procedure (not used)
@item @code{qi_minfo} @tab module information
@item @code{qi_mstat} @tab module statistics
@end multitable

@node Module Information
@subsection Module Information
@cindex Module Information

Each queue initialization structure points to a module information structure that provides some
queueing parameters for the stream.  Nevertheless, only one module information structure is necessary
for the stream.  The module information structure contains the module identifier, the module name,
the minimum and maximum packet sizes accepted on the queue from the stream head, and the high and
low water marks for flow control.  If any of this later information needs to differ on a queue basis
(upper or lower multiplex queues considered as well), then the module information structure must be
separate for each queue.

The module information structure (@code{module_info(9)})
@tindex module_info(9)
contains the following information:

@multitable @columnfractions .15 .85
@item @code{mi_idnum} @tab module identification number
@item @code{mi_idname} @tab module name
@item @code{mi_minpsz} @tab minimum packet size accepted
@item @code{mi_maxpsz} @tab maximum packet size accepted
@item @code{mi_hiwat} @tab high water mark
@item @code{mi_lowat} @tab low water mark
@end multitable

@node Module Statistics
@subsection Module Statistics
@cindex Module Statistics

Each queue initialization structure points to an optional module statistics structure that collects
statistics for the stream.

The module statistics structure (@code{module_stat(9)})
@tindex module_stat(9)
contains the following information:

@multitable @columnfractions .15 .85
@item @code{ms_pcnt} @tab calls to @code{qi_putp}
@item @code{ms_scnt} @tab calls to @code{qi_srvp}
@item @code{ms_ocnt} @tab calls to @code{qi_qopen}
@item @code{ms_ccnt} @tab calls to @code{qi_qclose}
@item @code{ms_acnt} @tab calls to @code{qi_qadmin}
@item @code{ms_xptr} @tab module private statistics pointer
@item @code{ms_xsize} @tab size of module private statistics area
@item @code{ms_flags} @tab boolean statistics, for future use
@end multitable

@node Stream Head
@subsection Stream Head
@cindex Stream Head

A stream head is a dynamic structure that is created whenever a @cite{STREAMS} driver (stream end)
is instantiated. 

The stream head accepts the following input-output controls:

@multitable @columnfractions .20 .80
@item I_PUSH @tab push a module
@vindex I_PUSH
@item I_POP @tab pop a module
@vindex I_POP
@item I_SETSIG @tab receive a @var{SIGPOLL} signal when an event occurs
@vindex I_SETSIG
@item I_FDINSERT @tab pass informationa about a stream
@vindex I_FDINSERT
@item I_STR @tab generate an @command{ioctl(2)} to a streams module
@vindex I_STR
@item I_SENDFD @tab send a file descriptor down a stream
@vindex I_SENDFD
@item I_LINK @tab link a stream under a multiplexer
@vindex I_LINK
@item I_PLINK @tab permanently link a stream under a multiplexer
@vindex I_PLINK
@item I_LOOK @tab get name of module below stream head
@vindex I_LOOK
@item I_FLUSH @tab flush a stream
@vindex I_FLUSH
@item I_FLUSHBAND @tab flush a stream in a given band
@vindex I_FLUSHBAND
@item I_GETSIG @tab return events that generate @var{SIGPOLL}
@vindex I_GETSIG
@item I_FIND @tab find a particular module in a stream
@vindex I_FIND
@item I_PEEK @tab read first message on a stream
@vindex I_PEEK
@item I_SRDOPT @tab set read options
@vindex I_SRDOPT
@item I_GRDOPT @tab get read options
@vindex I_GRDOPT
@item I_SWROPT @tab set write options
@vindex I_SWROPT
@item I_GWROPT @tab get write options
@vindex I_GWROPT
@item I_RECVFD @tab retrieve a passed file descriptor 
@vindex I_RECVFD
@item I_LIST @tab list all modules in a stream
@vindex I_LIST
@item I_ATMARK @tab see if stream head message has been marked
@vindex I_ATMARK
@item I_CKBAND @tab check if message of a particular band is writable
@vindex I_CKBAND
@item I_GETBAND @tab get priority band of first message at stream head
@vindex I_GETBAND
@item I_CANPUT @tab cehck if given band is writable
@vindex I_CANPUT
@item I_SETCLTIME @tab set the time that @dfn{STREAMS} will wait while closing
@vindex I_SETCLTIME
@item I_GETCLTIME @tab get the time that @dfn{STREAMS} will wait while closing
@vindex I_GETCLTIME
@item I_UNLINK @tab unlink a stream from beneath a multiplexer
@vindex I_UNLINK
@item I_PUNLINK @tab unlink a permanent stream from beneath a multiplexer
@vindex I_PUNLINK
@end multitable

@node Queue
@subsection Queue
@cindex Queue

A pair of queues are allocated, initialized, assigned and linked into a stream each time that a
@cite{STREAMS} driver or module is instantiated.  A pointer to the upstream (read) queue in the
queue pair is the common method for passing a handle to a driver or module instance.

@node Queue Band
@subsection Queue Band
@cindex Queue Band

Queue bands are allocated and initialized in association with queues on demand.  Many @cite{STREAMS}
drivers or modules never have queue bands allocated because they do not pass priority banded
messages, only normal messages.

@node Message Block
@subsection Message Block
@cindex Message Block

A message block is a structure that references a data block and data buffer.  Each message block is
a view into a data buffer and has a start (read pointer) and finish (write pointer) within the
buffer.  Message block can be chained together to form larger segmented messages.

@node Data Block
@subsection Data Block
@cindex Data Block

Data blocks are a description of a data buffer external to the buffer itself.  Each data block
describes the limits of the data buffer, its base, and size.  Each data block also hold a number of
flags and contains a data block type describing the type of data contained in the data buffer.  Data
blocks also contain any necessary information concerning the functions and arguments necessary to
free the data buffer.  Also, data blocks maintain reference counts of the number of message blocks
that reference the data buffer.

@subsubsection Data Block Types
@cindex Data Block Types

@node Data Buffer
@subsection Data Buffer
@cindex Data Buffer

Data buffers can be allocated within the @cite{STREAMS} buffer pools using the @b{allocb}(9)
function or can be allocated externally and associated with a data and message block using the
@b{esballoc}(9) function.

@node User Credentials
@subsection User Credentials
@cindex User Credentials

@node Application Interface
@section Application Interface
@cindex @cite{STREAMS}, application interface
@cindex application interface, @cite{STREAMS}

@subsection System Calls

@node Kernel Level Facilities
@section Kernel Level Facilities
@cindex kernel level facilities
@cindex @cite{STREAMS}, kernel level facilities
@cindex kernel level facilities, @cite{STREAMS}

@subsection Stream Head

@subsection Modules

@subsection Drivers

@subsection Messages

@figuresized{SPG_fig05,5,A Message,5in}

@figuresized{SPG_fig06,6,Messages on a Message Queue,5in}

@subsubsection Message Types

@subsubheading Normal Messages

@multitable @columnfractions .20 .05 .05 .70
@item M_DATA
@vindex M_DATA
@tab D @tab U @tab Normal data.
@item M_PROTO
@vindex M_PROTO
@tab D @tab U @tab Normal protocol information.
@item M_BREAK
@vindex M_BREAK
@tab D @tab -- @tab Break request.
@item M_PASSFP
@vindex M_PASSFP
@tab D @tab U @tab Passed file pointer.
@item M_EVENT
@vindex M_EVENT
@tab -- @tab U @tab Normal event. (@cite{Solaris} only)
@item M_SIG
@vindex M_SIG
@tab -- @tab U @tab Signal.
@item M_DELAY
@vindex M_DELAY
@tab D @tab -- @tab Delay request.
@item M_CTL
@vindex M_CTL
@tab D @tab U @tab Normal inter-module control message.
@item M_IOCTL
@vindex M_IOCTL
@tab D @tab -- @tab Input-Output control.
@item M_SETOPTS
@vindex M_SETOPTS
@tab -- @tab U @tab Normal set queue options.
@item M_RSE
@vindex M_RSE
@tab D @tab U @tab Normal reserved.
@item M_TRAIL
@vindex M_TRAIL
@tab -- @tab -- @tab (@cite{UnixWare} only)
@item M_BACKWASH
@vindex M_BACKWASH
@tab D @tab -- @tab (@cite{AIX} only)
@end multitable

@subsubheading Priority Messages

@multitable @columnfractions .20 .05 .05 .70
@item M_IOCACK
@vindex M_IOCACK
@tab -- @tab U @tab Input-Output control acknowledgement (result).
@item M_IOCNAK
@vindex M_IOCNAK
@tab -- @tab U @tab Input-Output control negative acknowledgement (error).
@item M_PCPROTO
@vindex M_PCPROTO
@tab D @tab U @tab Priority protocol information.
@item M_PCSIG
@vindex M_PCSIG
@tab -- @tab U @tab Priority signal.
@item M_READ
@vindex M_READ
@tab D @tab -- @tab Read request.
@item M_FLUSH
@vindex M_FLUSH
@tab D @tab U @tab Flush queue request.
@item M_STOP
@vindex M_STOP
@tab D @tab -- @tab Stop output request.
@item M_START
@vindex M_START
@tab D @tab -- @tab Start output request.
@item M_HANGUP
@vindex M_HANGUP
@tab -- @tab U @tab Hangup.
@item M_ERROR
@vindex M_ERROR
@tab -- @tab U @tab Fatal error.
@item M_COPYIN
@vindex M_COPYIN
@tab -- @tab U @tab Input-Output control copyin request.
@item M_COPYOUT
@vindex M_COPYOUT
@tab -- @tab U @tab Input-Output control copyout request.
@item M_IOCDATA
@vindex M_IOCDATA
@tab D @tab -- @tab Input-Output control copied in data.
@item M_PCRSE
@vindex M_PCRSE
@tab D @tab U @tab Priority reserved.
@item M_STOPI
@vindex M_STOPI
@tab D @tab -- @tab Stop input request.
@item M_STARTI
@vindex M_STARTI
@tab D @tab -- @tab Start input request.
@item M_PCCTL
@vindex M_PCCTL
@tab D @tab U @tab Priority inter-module control message. (@cite{UnixWare} only)
@item M_PCSETOPTS
@vindex M_PCSETOPTS
@tab -- @tab U @tab Priority set queue options. (@cite{UnixWare} only)
@item M_PCEVENT
@vindex M_PCEVENT
@tab -- @tab U @tab Priority event. (@cite{Solaris} only)
@item M_UNHANGUP
@vindex M_UNHANGUP
@tab -- @tab U @tab Hangup corrected. (@cite{Solaris} and @cite{OSF/1} only)
@item M_NOTIFY
@vindex M_NOTIFY
@tab -- @tab U @tab (@cite{OSF/1} and @cite{HP-UX} only)
@item M_HPDATA
@vindex M_HPDATA
@tab D @tab U @tab (@cite{HP-UX} and @cite{MacOT} only)
@item M_LETSPLAY
@vindex M_LETSPLAY
@tab -- @tab U @tab (@cite{AIX} only)
@item M_DONTPLAY
@vindex M_DONTPLAY
@tab D @tab -- @tab (@cite{AIX} only)
@item M_BACKDONE
@vindex M_BACKDONE
@tab D @tab -- @tab (@cite{AIX} only)
@end multitable

@subsection Message Queueing Priority

@subsection Queues

@subsection Multiplexing

@subsection Multithreading

@node Subsystems
@section Subsystems
@cindex subsystems, STREAMS
@cindex STREAMS, subsystems

@menu
* Logging::			STREAMS Logging
* Administration::		STREAMS Administration
* Terminal I/O::		STREAMS Terminal I/O
* Pipes::			STREAMS Pipes
* FIFOs::			STREAMS FIFOs
* Networking::			STREAMS Networking
@end menu

@node Logging
@subsection Logging
@cindex logging, STREAMS
@cindex STREAMS, logging

The kernel logger and system logger on a @b{Linux} system is the native logging implementation.
These are BSD-style loggers. @dfn{@value{PACKAGE_TITLE}} provides a @dfn{STREAMS}-based logger as
well.  The advantage of a @dfn{STREAMS}-based logger is for trace and error logging @dfn{STREAMS}
drivers and modules using the @command{strlog} facility.  This facility includes a device driver
(the @dfn{STREAMS} log device, @command{log}(4)), a kernel function (@command{strlog}(9)), and two
user space daemon processes (@command{strace}(8)
@pgindex strace(8)
and @command{strerr}(8)).
@pgindex strerr(8)
The @dfn{STREAMS} logger has the unique capability that it can filter trace messages and only incur
the cost of tracing and logging those messages that are filtered out (at the kernel level).  This
allows a large degree of trace logging to be available, yet, only a small proportion of the
available trace messages generated to logs.

The @dfn{STREAMS} logger @command{log}(4), @command{strlog}(9) command, and @command{strace}(8)
@pgindex strace(8)
and @command{strerr}(8)
@pgindex strerr(8)
loggers are all available in the base @code{@value{PACKAGE}-@value{VERSION}} package.@footnote{I
have been considering removing these facilities into a common @code{strutil-0.7a.1} package that
could work with @cite{LiS} as well, perhaps.}

@node Administration
@subsection Administration
@cindex administration, STREAMS
@cindex STREAMS, administration

@dfn{@value{PACKAGE_TITLE}} provides a @dfn{STREAMS} administration facility.  This facility
consists of a driver (the @dfn{STREAMS Administrative Driver}, @command{sad}(4)), several autopush
kernel functions (@command{autopush_add}(9), @command{autopush_del}(9), @command{autopush_find}(9),
@command{autopush_vml}(9)), and the @command{autopush}(8),
@pgindex autopush(8)
@command{insf}(8),
@pgindex insf(8)
@command{strload}(8),
@pgindex strload(8)
@command{strsetup}(8),
@pgindex strsetup(8)
@command{strinfo}(8),
@pgindex strinfo(8)
@command{scls}(8)
@pgindex scls(8)
and other administrative commands.

@node Terminal I/O
@subsection Terminal I/O
@cindex terminal i/o, STREAMS
@cindex STREAMS, terminal i/o

By default, terminal I/O in a @b{Linux} system does not use @cite{STREAMS}.  It, in fact, uses a
@cite{STREAMS} @samp{pty} emulation.  However, this is only an emulation and does not provide all
@cite{STREAMS} facilities.  It is not possible, for example, on a @b{Linux} @samp{pty} to push or
pop modules from a terminal.  The @b{Linux} @samp{pty} only provides emulation for read/write and
ioctl calls.

A separate auxiliary package for @dfn{@value{PACKAGE_TITLE}} that provides true @cite{STREAMS}-based
@cite{UNIX'98} compliant pseudo terminals is available.  This is the @code{strpty-0.7a.1} package
also available from @url{http://www.openss7.org/, The OpenSS7 Project}.@footnote{Actually, this
package is not yet avilable.  I will work on it someday when it is necessary.}

There are three user commands available in the @dfn{@value{PACKAGE_TITLE}} package that are useful
for terminal input-output: these are the
@command{strchg(1)}
@pgindex strchg(1)
@command{strconf(1)}
@pgindex strconf(1)
and
@command{strreset(1)}
@pgindex strreset(1)
user commands.

@node Pipes
@subsection Pipes
@cindex pipes, STREAMS
@cindex STREAMS, pipes

@dfn{@value{PACKAGE_TITLE}} supports @cite{STREMS}-based pipes as an optional feature.
@cite{STREAMS}-based pipes operate as described in the @cite{UNIX SVR4.2 Operating System API
Reference} and the @cite{UNIX System V Release 4 Programmer's Guide: STREAMS}.

By default, pipes created on @b{Linux} by the
@iftex
@b{pipe}(2)
@end iftex
@ifnottex
@inforef{pipe(2), , *manpages*}
@end ifnottex
system call are not @cite{STREAMS}-based.  To get @cite{STREAMS}-based pipes, configure @dfn{Linux
Fast-STREAMS} with configuration parameter @code{--enable-streams-fifos}.

@dfn{@value{PACKAGE_TITLE}} also provides a character device based pipe facility using the
@iftex
@b{spx}(4)
@end iftex
@ifnottex
@inforef{spx(4), , *manpages*}
@end ifnottex
driver.
@footnote{I am considering taking pipes and FIFOs out of the base
@code{@value{PACKAGE}-@value{VERSION}} package an placing them in their own @code{strpipe-0.7a.1}
package.}

@node FIFOs
@subsection FIFOs
@cindex FIFOs, STREAMS
@cindex STREAMS, FIFOs

@dfn{@value{PACKAGE_TITLE}} supports @cite{STREAMS}-based FIFOs (named pipes) as an optional feature.
@cite{STREAMS}-based FIFOs operate as described in the @cite{UNIX SVR4.2 Operating System API
Reference} and the @cite{UNIX System V Release 4 Programmer's Guide: STREAMS}.

By default, FIFOs created on @b{Linux} with the
@iftex
@b{mknod}(8)
@end iftex
@ifnottex
@inforef{mknod(8), , *manpages*}
@end ifnottex
@pgindex mknod(8)
utility are not @cite{STREAMS}-based.  To get @cite{STREAMS}-based FIFOs, configure @dfn{Linux
Fast-STREAMS} with configuration parameter @code{--enable-streams-fifos}.
@footnote{I am considering taking pipes and FIFOs out of the base
@code{@value{PACKAGE}-@value{VERSION}} package an placing them in their own @code{strpipe-0.7a.1}
package.}

@node Networking
@subsection Networking
@cindex networking, STREAMS
@cindex STREAMS, networking

By default, networking in a @b{Linux} system does not use @cite{STREAMS}.  It uses the native Linux
@dfn{BSD Sockets} approach.  Some @b{GNU/Linux} distributions do provide an @cite{iBCS (Intel Binary
Compatibility Suite)}
@cindex iBCS
@cindex Intel Binary Compatibility Suite
that provides XTI/TLI networking, however, this is only a @dfn{STREAMS} emulation and cannot push or
pop protocol modules from a stream.  Also, @b{Linux} @cite{iBCS} only provides emulation for
read/write and ioctl calls.

A separate auxiliary package for @dfn{@value{PACKAGE_TITLE}} that provides a true
@cite{STREAMS}-based @cite{UNIX'98} compliant XTI/TLI library is available.  This is the
@code{strxnet-0.9.2.5} package
also available from @url{http://www.openss7.org/, The OpenSS7 Project}.

To be able to open INET streams also requires the @code{strinet-0.9.2.1} package
also available from @url{http://www.openss7.org/, The OpenSS7 Project}.  This package provides
@dfn{STREAMS}-based networking by providing a specialized @dfn{STREAMS} driver that internally opens
a @b{Linux} native @dfn{BSD Socket} and translates @dfn{STREAMS} messages to and from the internal
@dfn{Socket}.

@node Reference
@chapter Reference
@cindex reference
@menu
* Files::			STREAMS Files
* Modules::			STREAMS Modules
* Drivers::			STREAMS Drivers
* System Calls::		STREAMS System Calls
* Module Entry Points::		STREAMS Module Entry Points
* Structures::			STREAMS Structures
* Registration::		STREAMS Module and Driver Registration Functions
* Message Handling::		STREAMS Message Handling Functions
* Queue Handling::		STREAMS Queue Handling Functions
* Miscellaneous Functions::	STREAMS Miscellaneous Functions
* Extensions::			STREAMS Extension Functions
* Compatibility::		STREAMS Compatibility Functions
* System Controls::		STREAMS System Controls
* /proc File System::		STREAMS /proc File System
@end menu

@node Files
@section Files
@cindex files

@subsection User Header Files

@unnumberedsubsubsec STREAMS

@table @file

@item stropts.h
@pgindex stropts.h
User include file for the @cite{STREAMS} options file.  This file includes ioctl definitions for the
@dfn{Stream Head}.  This file includes @file{<sys/stropts.h>}.
Files are organized this way for backward compatibility of header file locations.

@item sys/stropts.h
@pgindex sys/stropts.h
System include file for the @cite{STREAMS} options file.  This file includes ioctl definitions for
the @dfn{Stream Head}.  This file is included by @file{<stropts.h>}.
Files are organized this way for backward compatibility of header file locations.

@end table

@unnumberedsubsubsec STREAMS logger

@table @file

@item log.h
@pgindex log.h
User include file for the @dfn{STREAMS} logger.

@item sys/log.h
@pgindex sys/log.h

@item strlog.h
@pgindex strlog.h
User include file for the @dfn{STREAMS} logger.

@item sys/strlog.h
@pgindex sys/strlog.h

@end table

@unnumberedsubsubsec STREAMS Administrative Driver

@table @file

@item sad.h
@pgindex sad.h
User include file for the @cite{STREAMS Administrative Driver}.

@item sys/sc.h
@pgindex sys/sc.h

@item sys/sad.h
@pgindex sys/sad.h

@end table

@subsection System Header Files

@unnumberedsubsubsec STREAMS

@table @file

@item sys/stream.h
@pgindex sys/stream.h

@item sys/strsubr.h
@pgindex sys/strsubr.h

@item sys/strconf.h
@pgindex sys/strconf.h

@item sys/strdebug.h
@pgindex sys/strdebug.h

@end table

@unnumberedsubsubsec DDI/DKI

@table @file

@item sys/debug.h
@pgindex sys/debug.h

@item sys/kmem.h
@pgindex sys/kmem.h

@item sys/cmn_err.h
@pgindex sys/cmn_err.h

@item sys/dki.h
@pgindex sys/dki.h

@item sys/ddi.h
@pgindex sys/ddi.h
DDI/DKI function declarations and defines for @dfn{@value{PACKAGE_TITLE}}.  Extension definitions will
be included when one or more of
@var{_LFS_SOURCE},
@vindex _LFS_SOURCE
@var{_SVR4_SOURCE},
@vindex _SVR4_SOURCE
@var{_AIX_SOURCE},
@vindex _AIX_SOURCE
@var{_HPUX_SOURCE},
@vindex _HPUX_SOURCE
@var{_OSF_SOURCE},
@vindex _OSF_SOURCE
@var{_SUN_SOURCE},
@vindex _SUN_SOURCE
@var{_LIS_SOURCE} or
@vindex _LIS_SOURCE
@var{_UW7_SOURCE} are
@vindex _UW7_SOURCE
defined.

@item sys/svr4ddi.h
@pgindex sys/svr4ddi.h
SVR4 DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_SVR4_SOURCE}
@vindex _SVR4_SOURCE
is defined.

@item sys/aixddi.h
@pgindex sys/aixddi.h
AIX DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_AIX_SOURCE}
@vindex _AIX_SOURCE
is defined.

@item sys/hpuxddi.h
@pgindex sys/hpuxddi.h
HP-UX DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_HPUX_SOURCE}
@vindex _HPUX_SOURCE
is defined.

@item sys/osfddi.h
@pgindex sys/osfddi.h
OSF DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_OSF_SOURCE}
@vindex _OSF_SOURCE
is defined.

@item sys/sunddi.h
@pgindex sys/sunddi.h
Solaris DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_SUN_SOURCE}
@vindex _SUN_SOURCE
is defined.

@item sys/lisddi.h
@pgindex sys/lisddi.h
LiS DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_LIS_SOURCE}
@vindex _LIS_SOURCE
is defined.

@item sys/uw7ddi.h
@pgindex sys/uw7ddi.h
UnixWare DDI compatibility function declarations and defines.  This file should not be included
directly, but will be included from @file{<sys/ddi.h>} when
@var{_UW7_SOURCE}
@vindex _UW7_SOURCE
is defined.

@end table

@unnumberedsubsubsec Miscellaneous

@table @file

@item sys/spec_fs_i.h
@pgindex sys/spec_fs_i.h

@item sys/streams/config.h
@pgindex sys/streams/config.h

@end table

@node Modules
@section Modules
@cindex STREAMS, modules
@cindex modules, STREAMS

@menu
* Stream Head Module ("sth")::
* Connect Line Discipline Module ("connld")::
* Pipe Module ("pipe")::
* STREAMS Configuration Module ("sc")::
@end menu

@node Stream Head Module ("sth")
@subsection Stream Head Module ("sth")
@pgindex sth
@cindex sth, module
@cindex modules, sth
@cindex Stream Head, module
@cindex modules, Stream Head

@node Connect Line Discipline Module ("connld")
@subsection Connect Line Discipline Module ("connld")
@pgindex connld
@cindex connld, module
@cindex modules, connld

@node Pipe Module ("pipemod")
@subsection Pipe Module ("pipemod")
@pgindex pipemod
@cindex pipemod, module
@cindex modules, pipemod
@cindex Pipe Module, module
@cindex modules, Pipe Module

@node STREAMS Configuration Module ("sc")
@subsection STREAMS Configuration Module ("sc")
@pgindex sc
@cindex sc, module
@cindex modules, sc
@cindex STREAMS Configuration, module
@cindex modules, STREAMS Configuration


@node Drivers
@section Drivers
@cindex STREAMS, drivers
@cindex drivers, STREAMS

@menu
* Clone Driver ("clone")::
* Echo Driver ("echo")::
* FIFO Driver ("fifo")::
* Log Driver ("log")::
* Named STREAMS Device Driver ("nsdev")::
* Null STREAM Driver ("nuls")::
* Pipe Driver ("pipe")::
* STREAMS Administrative Driver ("sad")::
@end menu


@node Clone Driver ("clone")
@subsection Clone Driver ("clone")
@pgindex clone
@cindex clone, driver
@cindex drivers, clone
@cindex Clone, driver
@cindex drivers, Clone

@node Echo Driver ("echo")
@subsection Echo Driver ("echo")
@pgindex echo
@cindex echo, driver
@cindex drivers, echo
@cindex Echo, driver
@cindex drivers, Echo

@node FIFO Driver ("fifo")
@subsection FIFO Driver ("fifo")
@pgindex fifo
@cindex fifo, driver
@cindex drivers, fifo
@cindex FIFO, driver
@cindex drivers, FIFO

@node Log Driver ("log")
@subsection Log Driver ("log")
@pgindex log
@cindex log, driver
@cindex drivers, log
@cindex Log, driver
@cindex drivers, Log

@node Named STREAMS Device Driver ("nsdev")
@subsection Named STREAMS Device Driver ("nsdev")
@pgindex nsdev
@cindex nsdev, driver
@cindex drivers, nsdev
@cindex Named STREAMS Device, driver
@cindex drivers, Named STREAMS Device

@node Null STREAM Driver ("nuls")
@subsection Null STREAM Driver ("nuls")
@pgindex nuls
@cindex nuls, driver
@cindex drivers, nuls
@cindex Null STREAM, driver
@cindex drivers, Null STREAM

@node Pipe Driver ("pipe")
@subsection Pipe Driver ("pipe")
@pgindex pipe
@cindex pipe, driver
@cindex drivers, pipe
@cindex Pipe, driver
@cindex drivers, Pipe

@node STREAMS Administrative Driver ("sad")
@subsection STREAMS Administrative Driver ("sad")
@pgindex sad
@cindex sad, driver
@cindex drivers, sad
@cindex STREAMS Administrative Driver, driver
@cindex drivers, STREAMS Administrative Driver


@node System Calls
@section System Calls
@cindex system calls

@subsection New System Calls

Just as experienced by the @b{Linux STREAMS} project, @dfn{@value{PACKAGE_TITLE}} suffers from the
inability to hook system calls that have been, otherwise, reserved in the @b{Linux} kernel for use
by @cite{STREAMS}.  Therefore, these system calls are implemented as library calls in the
@file{libsttreams} library instead of as system calls in the @file{libc} library.

@ftable @command

@item getmsg(2)

@b{getmsg}(2) is not normally implemented as a system call: it is a library call that calls
@b{getpmsg}(2).

@item getpmsg(2)

@item putmsg(2)

@b{putmsg}(2) is not normally implemented as a system call: it is a library call that calls
@b{putpmsg}(2).

@item putpmsg(2)

@item fattach(2)

@item fdetach(2)
(Note: HP-UX mentions a fdetach system call: I do not know why.)

@item isastream(2)

@end ftable

@subsection Modifications to Old System Calls

@ftable @command

@item pipe(2)

@item open(2)

@item fcntl(2)

@item ioctl(2)

@item signal(2)

@item poll(2)

@item select(2)

@item read(2)

The @b{read}(2) system call is overloaded with an invalid length to implement the @b{getmsg}(2) and
@b{getpmsg}(2) system calls.

@item readv(2)

@item write(2)

The @b{write}(2) system call is overloaded with an invalid length to implement the @b{putmsg}(2) and
@b{putpmsg}(2) system calls.

@item writev(2)

@item close(2)

@end ftable

@node Module Entry Points
@section Module entry points
@cindex module entry points

@ftable @command

@item qopen(9)
Module queue open procedure.

@item put(9)
Module queue put procedure.

@item srv(9)
Module queue service procedure.

@item qadmin(9)
Module queue administrative procedure.

@item qclose(9)
Module queue close procedure.

@item timeout(9)
@itemx qtimeout(9)
Timeout callback.

@item bufcall(9)
@itemx qbufcall(9)
@itemx mi_bufcall(9)
Buffer callback.

@item freemsg(9)
Buffer free routine callout.

@end ftable

@node Structures
@section Structures
@cindex structures

@subsection STREAMS Structures

@unnumberedsubsubsec Driver Structures

@table @command

@item cdevsw(9)
@tpindex cdevsw(9)
Character device switch table.

@item devinfo(9)
@tpindex devinfo(9)
Device information structure.

@end table

@unnumberedsubsubsec Module Structures

@table @command

@item fmodsw(9)
@tpindex fmodsw(9)
Module switch table.

@item modinfo(9)
@tpindex modinfo(9)
Module information structure.

@item module_info(9)
@tpindex module_info(9)
Module information structure.

@item module_stat(9)
@tpindex module_stat(9)
Module statistics structure.

@end table

@unnumberedsubsubsec Stream Structures

@table @command

@item streamtab(9)
@tpindex streamtab(9)
Stream information table.

@item streamadm(9)
@tpindex streamadm(9)
Stream administration table.

@item stdata(9)
@tpindex stdata(9)
Stream head data structure.

@item shinfo(9)
@tpindex shinfo(9)
Stream head information structure.

@end table

@unnumberedsubsubsec Queue Structures

@table @command

@item queue(9)
@tpindex queue(9)
Message queue.

@item qband(9)
@tpindex qband(9)
Message queue band.

@item bandinfo(9)
@tpindex bandinfo(9)
Message queue band information structure.

@item qinit(9)
@tpindex qinit(9)
Message queue initialization.

@item queinfo(9)
@tpindex queinfo(9)
Message queue information structure.

@end table

@unnumberedsubsubsec Message Structures

@table @command

@item msgb(9)
@tpindex msgb(9)
Message block.

@item datab(9)
@tpindex datab(9)
Data block.

@item mbinfo(9)
@tpindex mbinfo(9)
Message block information structure.

@item dbinfo(9)
@tpindex dbinfo(9)
Data block information structure.

@end table

@unnumberedsubsubsec Ancilliary Structures

@table @command

@item strevent(9)
@tpindex strevent(9)
STREAMS event structure.

@item seinfo(9)
@tpindex seinfo(9)
STREAMS event information structure.

@item strapush(9)
@tpindex strapush(9)
STREAMS autopush structure.

@item apinfo(9)
@tpindex apinfo(9)
STREAMS autopush information structure.

@end table

@unnumberedsubsubsec Additional Structures

@table @command

@item cred_t(9)
@tpindex cred_t(9)
User credentials.

@end table

@node Registration
@section Registration
@cindex registration

@subsection @value{PACKAGE_TITLE} Registration

@unnumberedsubsubsec Registration

@ftable @command

@item register_clone(9)
@itemx unregister_clone(9)
Register or unregister a clone minor device number for a @cite{STREAMS} driver.

@item register_cmajor(9)
@itemx unregister_cmajor(9)
Register or unregister file operations against a major device number.

@item register_strdev(9)
@itemx unregister_strdev(9)
Register or unregister a @cite{STREAMS} device against a device major number.

@item register_strdrv(9)
@itemx unregister_strdrv(9)
Register or unregister a @cite{STREAMS} driver.

@item register_strmod(9)
@itemx unregister_strmod(9)
Register or unregister a @cite{STREAMS} module.

@item register_strnod(9)
@itemx unregister_strnod(9)
Register or unregister a @cite{STREAMS} minor device node.

@end ftable

@unnumberedsubsubsec Autopush

@ftable @command

@item autopush_add(9)
Add an autopush list entry for a given @cite{STREAMS} device number.

@item autopush_del(9)
Delete an autopush list entry for a given @cite{STREAMS} device number.

@item autopush_find(9)
Find an autopush list entry for a given @cite{STREAMS} device number.

@item autopush_vml(9)
Verify an autopush @cite{STREAMS} module list.

@end ftable

@unnumberedsubsubsec Administration

@ftable @command

@item getadmin(9)
Get the administration function pointer for a @cite{STREAMS} module.

@item getmid(9)
Get the @cite{STREAMS} module identifier by module name.

@end ftable

@node Message Handling
@section Message Handling
@cindex message handling

@subsection STREAMS Message Handling Utilities

@ftable @command

@item allocb(9)
Allocate a @cite{STREAMS} message and data block.

@item esballoc(9)
Allocate a @cite{STREAMS} message and data block with a caller supplied data buffer.

@item testb(9)
Test if a @cite{STREAMS} message can be allocated.

@item bufcall(9)
Install a @cite{STREAMS} buffer callback.

@item unbufcall(9)
Remove a @cite{STREAMS} buffer callback.

@item copyb(9)
Copy a @cite{STREAMS} message block.

@item copymsg(9)
Copy a @cite{STREAMS} message.

@item dupb(9)
Duplicate a @cite{STREAMS} message block.

@item dupmsg(9)
Duplicate a @cite{STREAMS} message.

@item linkb(9)
Link a message block into a @cite{STREAMS} message.

@item unlinkb(9)
Unlink a message block from a @cite{STREAMS} message.

@item rmvb(9)
Remove a message block from a @cite{STREAMS} message.

@item adjmsg(9)
Trim bytes from the front or back of a @cite{STREAMS} message.

@item msgpullup(9)
Pull up bytes in a @cite{STREAMS} message.

@item pullupmsg(9)
Pull up the bytes in a @cite{STREAMS} message.

@item freeb(9)
Frees a @cite{STREAMS} message block.

@item freemsg(9)
Frees a @cite{STREAMS} message.

@item datamsg(9)
Tests a @cite{STREAMS} message type for data.

@item msgdsize(9)
Calculates the size of the data in a @cite{STREAMS} message.

@item pcmsg(9)
Test a @cite{STREAMS} data block message type for priority control.

@end ftable

@node Queue Handling
@section Queue Handling
@cindex queue handling

@subsection UP Queue Handling Functions

@ftable @command

@item backq(9)
Find the upstream or downstream @cite{STREAMS} message queue.

@item RD(9)
Return the read queue of a @cite{STREAMS} queue pair.

@item WR(9)
Return the write queue of a @cite{STREAMS} queue pair.

@item OTHERQ(9)
Return the other queue of a @cite{STREAMS} queue pair.

@item SAMESTR(9)
Test for @cite{STREAMS} pipe or FIFO.

@item qsize(9)
Return the number of messages on a @cite{STREAMS} message queue.

@item bcanput(9)
Test banded flow control on a @cite{STREAMS} message queue.

@item canput(9)
Test flow control on a @cite{STREAMS} message queue.

@item qenable(9)
Schedule a @cite{STREAMS} message queue service routine.

@item canenable(9)
Test whether a @cite{STREAMS} message queue can be scheduled.

@item enableok(9)
Allow a @cite{STREAMS} message queue to be scheduled.

@item noenable(9)
Disable a @cite{STREAMS} message queue from being scheduled.

@item flushband(9)
Flushes band @cite{STREAMS} messages from a @cite{STREAMS} message queue.

@item flushq(9)
Flushes messages from a @cite{STREAMS} message queue.

@item getq(9)
Gets a message from a @cite{STREAMS} message queue.

@item insq(9)
Insert a message into a @cite{STREAMS} message queue.

@item rmvq(9)
Remove a message from a @cite{STREAMS} message queue.

@item qreply(9)
Reply to a message from a @cite{STREAMS} message queue.

@item putq(9)
Put a message onto a @cite{STREAMS} message queue.

@item putbq(9)
Put a message back on a @cite{STREAMS} message queue.

@item putctl(9)
Put a control message on a @cite{STREAMS} message queue.

@item putctl1(9)
Put a 1 byte control message on a @cite{STREAMS} message queue.

@end ftable

@subsection MP Queue Handling Functions

@ftable @command

@item bcanputnext(9)
Test for banded flow control beyond a @cite{STREAMS} message queue.

@item canputnext(9)
Test for flow control beyond a @cite{STREAMS} message queue.

@item put(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@item putnext(9)
Put a message beyond a @cite{STREAMS} message queue.

@item putnextctl1(9)
Put a one byte control message beyond a @cite{STREAMS} message queue.

@item putnextctl(9)
Put a control message beyond a @cite{STREAMS} message queue.

@item qprocsoff(9)
Disable a @cite{STREAMS} message queue for multi-processing.

@item qprocson(9)
Enable a @cite{STREAMS} message queue for multi-processing.

@item freezestr(9)
Freeze the state of a @cite{STREAMS} message queue.

@item unfreezestr(9)
Thaw the state of a @cite{STREAMS} message queue.

@item strqget(9)
Gets information about a @cite{STREAMS} message queue.

In the non-@i{MP} environment, it was typical to directly access the elements of the @var{queue}
structure.  In the @i{MP} environment, it is no longer safe to directly access elements of the
@var{queue} structure in this fashion.  The @b{strqget}(9)
@findex strqget(9)
function provides the ability to retrieve information about @cite{STREAMS} message queues in the
@i{MP} environment.

@item strqset(9)
Sets attributes of a @cite{STREAMS} message queue.

In the non-@i{MP} environment, it was typical to directly access the elements of the @var{queue}
structure.  In the @i{MP} environment, it is no longer safe to directly access elements of the
@var{queue} structure in this fashion.  The @b{strqset}(9)
@findex strqset(9)
function provides the ability to set attributes for @cite{STREAMS} message queues in the
@i{MP} environment.

@end ftable

@node Miscellaneous Functions
@section Miscellaneous Functions
@cindex miscellaneous functions

@subsection Miscellaneous DDI/DKI Functions

@unnumberedsubsubsec Memory Functions

@ftable @command

@item kmem_alloc(9)
Allocate kernel memory.

@item kmem_free(9)
Deallocate kernel memory.

@item kmem_zalloc(9)
Allocate and zero kernel memory.

@end ftable

@unnumberedsubsubsec Data Movement and Comparison

@ftable @command

@item bcopy(9)
Copy byte strings.

@item bzero(9)
Zero a byte string.

@item copyin(9)
Copy user data in from user space to kernel space.

@item copyout(9)
Copy user data out to user space from kernel space.

@item max(9)
Determine the maximum of two integers.

@item min(9)
Determine the minimum of two integers.

@end ftable

@unnumberedsubsubsec Device Numbers

@ftable @command

@item getmajor(9)
Get the internal major device number for a device.

@item getminor(9)
Get the internal minor device number for a device.

@item makedevice(9)
Create a device from major and minor device numbers.

@end ftable

@unnumberedsubsubsec Timers

@ftable @command

@item delay(9)
Postpone the calling process for a number of clock ticks.

@item timeout(9)
Start a timer.

@item untimeout(9)
Stop a timer.

@end ftable

@unnumberedsubsubsec Time, Process and Privilege

@ftable @command

@item drv_getparm(9)
Driver retrieval of kernel parameters.

@item drv_hztomsec(9)
Convert kernel tick time between microseconds or milliseconds.

@item drv_hztousec(9)
Convert kernel tick time between microseconds or milliseconds.

@item drv_msectohz(9)
Convert kernel tick time between microseconds or milliseconds.

@item drv_priv(9)
Check if the current process is privileged.

@item drv_usectohz(9)
Convert kernel tick time between microseconds or milliseconds.

@item drv_usecwait(9)
Delay for a number of microseconds.

@end ftable

@unnumberedsubsubsec Error Logging

@ftable @command

@item cmn_err(9)
Print a kernel command error.

@item strlog(9)
Pass a message to the @cite{STREAMS} logger.

@end ftable

@unnumberedsubsubsec File Manipulation

@ftable @command

@item mknod(9)
Create a device node.

@item mount(9)
Mount a file system.

@item umount(9)
Unmount a file system.

@item unlink(9)
Unlink a file.

@end ftable

@node Extensions
@section Extensions
@cindex extensions

There are a number of extensions to @cite{SVR 4.2 MP} @cite{STREAMS} that have been applied by
implementations over the years.  Some of these extensions are common enough across multiple
implementations to be considered part of the @i{ipso facto} standard for @cite{STREAMS}.  @b{Linux
Fast-STREAMS} implements these functions are part of the core set of @cite{STREAMS} functions.

@subsection Common Extensions

@ftable @command

@item linkmsg(9)
Link a message block to a @cite{STREAMS} message.

@item putctl2(9)
Put a two byte control message on a @cite{STREAMS} message queue.

@item putnextctl2(9)
Put a two byte control message on the next @cite{STREAMS} message queue.

@item weldq(9)
Weld two (or four) @cite{STREAMS} message queues together.

@item unweldq(9)
Unweld two (or four) @cite{STREAMS} message queues.

@end ftable 

@subsection @value{PACKAGE_TITLE} Extensions

@unnumberedsubsubsec Internal Queue Functions

@ftable @command

@item allocq(9)
Allocate a @cite{STREAMS} queue pair.

@item setq(9)
Set sizes and procedures associated with a @cite{STREAMS} message queue.

@item qattach(9)
Attach a module onto a @cite{STREAMS} file.

@item qopen(9)
Call a @cite{STREAMS} module or driver open routine.

@item qclose(9)
Closes a @cite{STREAMS} module or driver.

@item qdetach(9)
Detach a module from a @cite{STREAMS} file.

@item freeq(9)
Deallocate a @cite{STREAMS} queue pair.

@end ftable

@unnumberedsubsubsec Flow Control

@ftable @command

@item bcanget(9)
Test for message arrival on a band on a stream.

@item canget(9)
Test for message arrival on a stream.

@end ftable

@subsection Extensions from LiS 2.18.1
@cindex extensions from LiS 2.18.1
@cindex LiS 2.18.1, extensions
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@ftable @command

@item appq(9)
Append on @cite{STREAMS} message after another.

@item esbbcall(9)
Install a buffer callback for an extended @cite{STREAMS} message block.

@item isdatablk(9)
Test a @cite{STREAMS} data block for data type.

@item isdatamsg(9)
Test a @cite{STREAMS} data block for data type.

@item kmem_zalloc_node(9)
(undoc).

@item msgsize(9)
Calculate the size of the message blocks in a @cite{STREAMS} message.

@item qcountstrm(9)
Add all counts on all @cite{STREAMS} message queues in a stream.

@item xmsgsize(9)
Calculate the size of message blocks in a @cite{STREAMS} message.

@end ftable

@node Compatibility
@section Compatibility
@cindex compatibility

@subsection SVR 4.2 MP DDI/DKI Compatibility Functions
@cindex SVR 4.2 MP, compatibility functions
@cindex compatibility functions, SVR 4.2 MP
@cindex SVR 4.2 MP

@subsubheading @cite{SVR 4.2 MP} Core Functions
@cpindex core functions, SVR 4.2 MP
@cpindex SVR 4.2 MP, core functions
@cpindex SVR 4.2 MP

@ftable @command

@item lbolt(9)
Time in ticks since reboot.

@end ftable

@subsubheading @cite{SVR 4.2 MP} Compatibility Module
@cpindex compatibility module, SVR 4.2 MP
@cpindex SVR 4.2 MP, compatibility module
@cpindex SVR 4.2 MP

@ftable @command

@item itimeout(9)
Perform a timeout at an interrupt level.

@item major(9)
Get the internal major number of a device.

@item makedev(9)
Make a device number from internal major and minor device numbers.

@item minor(9)
Get the internal minor number of a device.

@item sleep(9)
Put a process to sleep.

@item vtop(9)
Convert virtual to physical address.

@item wakeup(9)
Wake a process.

@end ftable

@unnumberedsubsubsec Atomic Integers

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating atomic integers.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating atomic integers.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item ATOMIC_INT_ADD(9)
Add an integer value to an atomic integer.

@item ATOMIC_INT_ALLOC(9)
Allocate and initialize an atomic integer.

@item ATOMIC_INT_DEALLOC(9)
Deallocate an atomic integer.

@item ATOMIC_INT_DECR(9)
Decrement and test an atomic integer.

@item ATOMIC_INT_INCR(9)
Increment an atomic integer.

@item ATOMIC_INT_INIT(9)
Initialize an atomic integer.

@item ATOMIC_INT_READ(9)
Read an atomic integer.

@item ATOMIC_INT_SUB(9)
Subtract and integer value from an atomic integer.

@item ATOMIC_INT_WRITE(9)
Write an integer value to an atomic integer.

@end ftable

@unnumberedsubsubsec Basic Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating basic (spin) locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating spin locks.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item LOCK(9)
Lock a basic lock.

@item LOCK_ALLOC(9)
Allocate a basic lock.

@item LOCK_DEALLOC(9)
Deallocate a basic lock.

@item LOCK_OWNED(9)
Determine whether a basic lock is head by the caller.

@item TRYLOCK(9)
Try to lock a basic lock.

@item UNLOCK(9)
Unlock a basic lock.

@end ftable

@unnumberedsubsubsec STREAMS Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
defines a set of @cite{STREAMS}-specific locks.  The @b{Linux} kernel
@cindex Linux
does not provide these functions.  @dfn{@value{PACKAGE_TITLE}} has some equivalent internal functions.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item MPSTR_QLOCK(9)
Release a queue from exclusive access.

@item MPSTR_QRELE(9)
Acquire a queue for exclusive access.

@item MPSTR_STPLOCK(9)
Acquire a stream head for exclusive access.

@item MPSTR_STPRELE(9)
Release a stream head from exclusive access.

@end ftable

@unnumberedsubsubsec Read/Write Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating read-write locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating spin locks.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item RW_ALLOC(9)
Allocate and initialize a read/write lock.

@item RW_DEALLOC(9)
Deallocate a read/write lock.

@item RW_RDLOCK(9)
Acquire a read/write lock in read mode.

@item RW_TRYRDLOCK(9)
Attempt to acquire a read/write lock in read mode.

@item RW_TRYWRLOCK(9)
Attempt to acquire a read/write lock in write mode.

@item RW_UNLOCK(9)
Release a read/write lock.

@item RW_WRLOCK(9)
Acquire a read/write lock in write mode.

@end ftable

@unnumberedsubsubsec Priority Levels

@ftable @command

@item spl0(9)
Set priority level 0.

@item spl1(9)
Set priority level 1.

@item spl2(9)
Set priority level 2.

@item spl3(9)
Set priority level 3.

@item spl4(9)
Set priority level 4.

@item spl5(9)
Set priority level 5.

@item spl6(9)
Set priority level 6.

@item spl7(9)
Set priority level 7.

@item spl(9)
Set priority level.

@item splx(9)
Set priority level x.

@end ftable

@unnumberedsubsubsec Sleep Locks

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating sleep locks.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating semaphores.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item SLEEP_ALLOC(9)
Allocate a sleep lock.

@item SLEEP_DEALLOC(9)
Deallocate a sleep lock.

@item SLEEP_LOCK(9)
Acquire a sleep lock.

@item SLEEP_LOCKAVAIL(9)
Determine whether a sleep lock is available.

@item SLEEP_LOCKOWNED(9)
Determine whether a sleep lock is held by the caller.

@item SLEEP_LOCK_SIG(9)
Acquire a sleep lock.

@item SLEEP_TRYLOCK(9)
Attempt to acquire a sleep lock.

@item SLEEP_UNLOCK(9)
Release a sleep lock.

@end ftable

@unnumberedsubsubsec Synchronization Variables

@cite{SVR 4.2 MP}
@cindex SVR 4.2 MP
provides a set of functions for manipulating synchronization variables.  The @b{Linux} kernel
@cindex Linux
also has a set of equivalent functions for manipulating wait queues.
These functions are general purpose and not @cite{STREAMS}-specific.
For portability of @cite{STREAMS} drivers and modules that utilize the @cite{SVR 4.2 MP} functions,
these functions have been added to the @cite{SVR 4.2 MP} Compatibility Module.

@ftable @command

@item SV_ALLOC(9)
Allocate a basic condition variable.

@item SV_BROADCAST(9)
Broadcast a basic condition variable.

@item SV_DEALLOC(9)
Deallocate a basic condition variable.

@item SV_SIGNAL(9)
Signal a basic condition variable.

@item SV_WAIT(9)
Wait on a basic condition variable.

@item SV_WAIT_SIG(9)
Interruptible wait on a basic condition variable.

@end ftable

@unnumberedsubsubsec Resource Allocation

@ftable @command

@item rmalloc(9)
Allocate a number of units from a resource map.

@item rmallocmap(9)
Allocated a resource map.

@item rmallocmap_wait(9)
Allocated a resource map.

@item rmalloc_wait(9)
Allocate a number of units from a resource map.

@item rmfree(9)
Free a number of units from a resource map.

@item rmfreemap(9)
Free a resource map.

@item rmget(9)
Allocated a number of units from a resource map.

@item rminit(9)
Initialize a resource map.

@item rmsetwant(9)
Wait for resources on a resource map.

@item rmwanted(9)
Waiters on a resource map.

@end ftable

@subsection AIX 5L Version 5.1 Compatibility Functions
@cindex AIX 5L Version 5.1, compatibility functions
@cindex compatibility functions, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1
@cindex AIX PSE
@cindex AIX

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with the @cite{AIX
5L Version 5.1 Portable STREAMS Environment (PSE)}:

@subsubheading @cite{AIX} Core Functions
@cpindex core functions, AIX
@cpindex AIX, core functions
@cpindex AIX

The functions in this section are provided as part of the core functions provided in the @b{Linux
Fast-STREASM} @cite{STREAMS} subsystem:

@ftable @command

@item putctl2(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.

Many @cite{STREAMS} implementations provide this function.  When the errors that can be delivered to
the Stream Head in a @var{M_ERROR} message were broken from a single read/write error condition to a
separate read and write error condition, the
@b{putctl}(9)
@findex putctl(9)
function lost much of its utility.  Implementation of a
@b{putctl2}(9)
@findex putctl2(9)
function provides a similar capability for read/write error conditions as
@b{putctl}(9)
@findex putctl(9)
provided for combined error conditions previously.

@cite{AIX} implements this function.  @dfn{@value{PACKAGE_TITLE}} provides this function for
compatibility with @cite{AIX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.

@b{putctl2}(9)
@findex putctl2(9)
is not very useful in an @i{MP} environment, where one really wants to place @var{M_ERROR} messages
on the @i{upstream} queue.  The function for that in the @i{MP} environment is
@b{putnextctl2}(9).
@findex putnextctl2(9)
@cite{AIX} does not implement the
@b{putnextctl2}(9)
@findex putnextctl2(9)
function, which is somewhat surprising, but then @cite{AIX} does not really handle @i{MP} environments
the same way that @cite{SVR 4.2 MP} does: the @cite{AIX Portable STREAMS Environment (PSE)} is
essentially single threaded, and @cite{AIX PSE} does not implement @var{QHLIST} meaning that the
synchronization for protecting dereferencing of @samp{q->q_next} pointers is not present.

@item splstr(9)
Set or restore priority levels.

Although @dfn{@value{PACKAGE_TITLE}} does not interpret priority levels in the same fashion as @cite{SVR
4.2 MP}, the
@b{splstr}(9)
@findex splstr(9)
is provided in support of @cite{AIX} and other @cite{STREAMS} implementations.

@cite{AIX} also does not interpret priority levels in the same manner, but provides
@b{splstr}(9)
@findex splstr(9)
and
@b{splx}(9)
@findex splx(9)
functions in support of @cite{STREAMS}.

@item splx(9)
Set or restore priority levels.

Although @dfn{@value{PACKAGE_TITLE}} does not interpret priority levels in the same fashion as @cite{SVR
4.2 MP}, the
@b{splx}(9)
@findex splx(9)
is provided in support of @cite{AIX} and other @cite{STREAMS} implementations.

@cite{AIX} also does not interpret priority levels in the same manner, but provides
@b{splstr}(9)
@findex splstr(9)
and
@b{splx}(9)
@findex splx(9)
functions in support of @cite{STREAMS}.

@item unweldq(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item weldq(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable


@subsubheading @cite{AIX} Compatibility Module
@cpindex compatibility module, AIX
@cpindex AIX, compatibility module
@cpindex AIX

The functions in this section are provided as part of the @cite{AIX Compatibility Module} contained
in the @file{streams-aixcompat.o} kernel module.

@ftable @command

@item mi_bufcall(9)
Reliable alternative to @b{buffcall}(9).

@b{mi_bufcall}(9)
@findex mi_bufcall(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item mi_close_comm(9)
@cite{STREAMS} common minor device close utility.

@b{mi_close_comm}(9)
@findex mi_close_comm(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item mi_next_ptr(9)
@cite{STREAMS} minor device list traversal.

@b{mi_next_ptr}(9)
@findex mi_next_ptr(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item mi_open_comm(9)
@cite{STREAMS} common minor device open utility.

@b{mi_open_comm}(9)
@findex mi_open_comm(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item mi_prev_ptr(9)
@cite{STREAMS} minor device list traversal.

@b{mi_prev_ptr}(9)
@findex mi_prev_ptr(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item str_install(9)
Install a @cite{STREAMS} module or driver.

@b{str_install}(9)
@findex str_install(9)
is the @cite{AIX}-specific driver and module registration and deregistration facility.  This
facility is fashioned after the @cite{SVR 4.2 MP} facility.  @dfn{@value{PACKAGE_TITLE}} provides an
@cite{AIX} version of this function in support of @cite{AIX}.
Only the @cite{SVR 4.2 MP} version of this function will be used by portable @cite{STREAMS} modules
and drivers intended to be portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item wantio(9)
Perform direct I/O from a @cite{STREAMS} driver.

@b{wantio}(9)
@findex wantio(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@item wantmsg(9)
Provide a filter of wanted messages from a @cite{STREAMS} module.

@b{wantmsg}(9)
@findex wantmsg(9)
is an @cite{AIX}-specific function.  @dfn{@value{PACKAGE_TITLE}} provides this function in support of
@cite{AIX} drivers and modules.
This function will not be used by portable @cite{STREAMS} modules and drivers intended to be
portable across @cite{STREAM} implementations based on @cite{SVR 4.2 MP}.

@end ftable

@subsection HP-UX 11.0i v2 Compatibility Functions
@cindex HP-UX 11.0i v2, compatibility functions
@cindex compatibility functions, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2
@cindex HP-UX

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with
@cite{HP-UX 11.0i v2}:

@subsubheading @cite{HP-UX} Core Functions
@cpindex HP-UX, core functions
@cpindex core functions, HP-UX
@cpindex HP-UX

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with the
@cite{HP-UX 11.0i v2 STREAMS/UX}:

@ftable @command

@item putctl2(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.

Many @cite{STREAMS} implementations provide this function.  When the errors that can be delivered to
the Stream Head in a @var{M_ERROR} message were broken from a single read/write error condition to a
separate read and write error condition, the
@b{putctl}(9)
@findex putctl(9)
function lost much of its utility.  Implementation of a
@b{putctl2}(9)
@findex putctl2(9)
function provides a similar capability for read/write error conditions as
@b{putctl}(9)
@findex putctl(9)
provided for combined error conditions previously.

@cite{HP-UX} implements this function.  @dfn{@value{PACKAGE_TITLE}} provides this function for
compatibility with @cite{HP-UX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.

@item putnextctl2(9)
Put a 2 byte control message on the downstream @cite{STREAMS} message queue.

Many @cite{STREAMS} @i{MP} implementations provide this function.  When the errors that can be
delivered to the Stream Head in a @var{M_ERROR} message were broken from a single read/write error
condition to a separate read and write error condition, the
@b{putnextctl}(9)
@findex putnextctl(9)
function lost much of its utility.  Implementation of a
@b{putnextctl2}(9)
@findex putnextctl2(9)
function provides a similar capability for read/write error conditions as
@b{putnextctl}(9)
@findex putnextctl(9)
provided for combined error conditions previously.

@cite{HP-UX} implements this function.  @dfn{@value{PACKAGE_TITLE}} provides this function for
compatibility with @cite{HP-UX} and other @cite{SVR 4.2 MP} based @cite{STREAMS} implementations.


@item unweldq(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item weldq(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable

@subsubheading @cite{HP-UX} Compatibility Module
@cpindex HP-UX, compatibility module
@cpindex compatibility module, HP-UX
@cpindex HP-UX

The functions in this section are provided as part of the @cite{HP-UX Compatibility Module} contained
in the @file{streams-hpuxcompat.o} kernel module.

@ftable @command

@item str_install(9)
Install a @cite{STREAMS} module or driver.

@b{str_install}(9)
@findex str_install(9)
is the @cite{HP-UX}-specific driver and module registration facility.  This facility is fashioned
after the @cite{SVR 4.2 MP} facility.  @dfn{@value{PACKAGE_TITLE}} provides an @cite{HP-UX} version of
this function in support of @cite{HP-UX}.  Only the @cite{SVR 4.2 MP} version of this function will
be used by portable @cite{STREAMS} modules and drivers intended to be portable across @cite{STREAM}
implementations based on @cite{SVR 4.2 MP}.

@item str_uninstall(9)
Uninstall a @cite{STREAMS} module or driver.

@b{str_uninstall}(9)
@findex str_uninstall(9)
is the @cite{HP-UX}-specific driver and module deregistration facility.  This facility is fashioned
after the @cite{SVR 4.2 MP} facility.  @dfn{@value{PACKAGE_TITLE}} provides an @cite{HP-UX} version of
this function in support of @cite{HP-UX}.  Only the @cite{SVR 4.2 MP} version of this function will
be used by portable @cite{STREAMS} modules and drivers intended to be portable across @cite{STREAM}
implementations based on @cite{SVR 4.2 MP}.

@item streams_get_sleep_lock(9)
Provide access to the global sleep lock.

@item streams_put(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@end ftable

@subsection OSF/1 1.2/Digital UNIX Compatibility Functions
@cindex OSF/1 1.2/Digital UNIX, compatibility functions
@cindex compatibility functions, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@subsubheading @cite{OSF/1} Core Functions
@cpindex core functions, OSF/1
@cpindex OSF/1, core functions
@cpindex OSF/1

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with the
@cite{OSF/1 1.2/Digital UNIX}:

@ftable @command

@item unweldq(9)
Unweld two pairs of @cite{STREAMS} message queues.

@item weldq(9)
Weld together two pairs of @cite{STREAMS} message queues.

@end ftable

@subsubheading @cite{OSF/1} Compatibility Module
@cpindex compatibility module, OSF/1
@cpindex OSF/1, compatibility module
@cpindex OSF/1

The functions in this section are provided as part of the @cite{OSF/1 Compatibility Module} contained
in the @file{streams-osfcompat.o} kernel module.

@ftable @command

@item lbolt(9)
Time in ticks since reboot.

@item puthere(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@item streams_close_comm(9)
Common minor device close utility.

@item streams_open_comm(9)
Common minor device open utility.

@item streams_open_ocomm(9)
Common minor device open utility.

@item strmod_add(9)
Add a @cite{STREAMS} module.

@item strmod_del(9)
Delete a @cite{STREAMS} module or driver from the kernel.

@item time(9)
(undoc).

@end ftable

@subsection UnixWare 7.1.3 (OpenUnix 8) Compatibility Functions
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility functions
@cindex compatibility functions, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@subsubheading @cite{UnixWare} Core Functions
@cpindex core functions, UnixWare
@cpindex UnixWare, core functions
@cpindex UnixWare

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with the
@cite{UnixWare 7.1.3 (OpenUnix 8)}:

@ftable @command

@end ftable

@subsubheading @cite{UnixWare} Compatibility Module
@cpindex compatibility module, UnixWare
@cpindex UnixWare, compatibility module
@cpindex UnixWare

The functions in this section are provided as part of the @cite{UnixWare Compatibility Module} contained
in the @file{streams-uw7compat.o} kernel module.

@ftable @command

@item allocb_physreq(9)
Allocate a @cite{STREAMS} message and data block.

@item emajor(9)
Get the external (real) major device number from the device number.

@item eminor(9)
Get the external extended minor device number from the device number.

@item etoimajor(9)
Convert an external major device number to an internal major device number.

@item getemajor(9)
Get the external (real) major device number.

@item geteminor(9)
Get the external minor device number.

@item itoemajor(9)
Convert an internal major device number to an external major device number.

@item msgphysreq(9)
Cause a message block to meet physical requirements.

@item msgpullup_physreq(9)
Pull up bytes in a @cite{STREAMS} message.

@item msgscgth(9)
(undoc).

@item printf(9)
(undoc).

@item strioccall(9)
(undoc).

@end ftable

@subsection Solaris 9/SunOS 5.9 Compatibility Functions
@cindex Solaris 9/SunOS 5.9, compatibility functions
@cindex compatibility functions, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@subsubheading @cite{Solaris} Core Functions
@cpindex core functions, Solaris
@cpindex Solaris, core functions
@cpindex Solaris

The following functions are provided by @dfn{@value{PACKAGE_TITLE}} for compatibility with the
@cite{Solaris 9/SunOS 5.9}:

@ftable @command

@end ftable

@subsubheading @cite{Solaris} Compatibility Module
@cpindex compatibility module, Solaris
@cpindex Solaris, compatibility module
@cpindex Solaris

The functions in this section are provided as part of the @cite{Solaris Compatibility Module} contained
in the @file{streams-suncompat.o} kernel module.

@ftable @command

@item _fini(9)

@item _info(9)

@item _init(9)

@item attach(9)
attach a device to the system or resume a suspended device

@item ddi_create_minor_node(9)
create a minor node for this device

@item ddi_driver_major(9)
find the major device number associated with a driver

@item ddi_driver_name(9)
return normalized driver name

@item ddi_get_cred(9)
get a reference to the credentials of the current user

@item ddi_getiminor(9)

@item ddi_get_instance(9)
get device instance number

@item ddi_get_lbolt(9)
get the current value of the system tick clock

@item ddi_get_pid(9)

@item ddi_get_soft_state(9)

@item ddi_get_time(9)
get the current time in seconds since the epoch

@item ddi_remove_minor_node(9)
remove a minor node for a device

@item ddi_removing_power(9)

@item ddi_soft_state(9)

@item ddi_soft_state_fini(9)

@item ddi_soft_state_free(9)

@item ddi_soft_state_init(9)

@item ddi_soft_state_zalloc(9)

@item ddi_umem_alloc(9)
allocate page aligned kernel memory

@item ddi_umem_free(9)

@item detach(9)
detach a device from the system or suspend a device

@item getinfo(9)

@item identify(9)
determine if a driver is associated with a device

@item install_driver(9)
install a device driver

@item mod_info(9)
provides information on a loadable kernel module to the @cite{STREAMS} executive

@item mod_install(9)
installs a loadable kernel module in the @cite{STREAMS} executive

@item mod_remove(9)
removes a loadable module from the @cite{STREAMS} executive

@item power(9)
power a device attached to the system

@item probe(9)

@item qbufcall(9)
install a buffer callback

@item qtimeout(9)
start a timer associated with a queue

@item queclass(9)

@item qunbufcall(9)
Cancel a @cite{STREAMS} buffer callback.

@item quntimeout(9)

@item qwait(9)
wait for a queue message

@item qwait_sig(9)
wait for a queue message or signal

@item qwriter(9)

@end ftable

@subsection LiS 2.18.1 Compatibility Functions
@cindex LiS 2.18.1, compatibility functions
@cindex compatibility functions, LiS 2.18.1
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@ftable @command

@item lis_register_strdev(9)

@item lis_register_strmod(9)

@item lis_unregister_strdev(9)

@item lis_unregister_strmod(9)

@end ftable

@ftable @command

@item lis_adjmsg(9)

@item lis_allocb(9)

@item lis_allocb_physreq(9)

@item lis_allocq(9)

@item lis_appq(9)

@item lis_backq(9)

@item lis_bcanput(9)

@item lis_bcanputnext(9)

@item lis_bcopy(9)

@item lis_bufcall(9)

@item lis_bzero(9)

@item lis_canenable(9)

@item lis_canput(9)

@item lis_canputnext(9)

@item lis_cmn_err(9)

@item lis_copyb(9)

@item lis_copymsg(9)

@item lis_datamsg(9)

@item lis_date(9)

@item lis_dupb(9)

@item lis_dupmsg(9)

@item lis_enableok(9)

@item lis_esballoc(9)

@item lis_esbbcall(9)

@item lis_find_strdev(9)

@item lis_flushband(9)

@item lis_flushq(9)

@item lis_freeb(9)

@item lis_freemsg(9)

@item lis_freeq(9)

@item lis_getq(9)

@item lis_insq(9)

@item lis_isdatablk(9)

@item lis_isdatamsg(9)

@item lis_linkb(9)

@item lis_mknod(9)

@item lis_mount(9)

@item lis_msgdsize(9)

@item lis_msgpullup(9)

@item lis_msgsize(9)

@item lis_noenable(9)

@item lis_OTHER(9)

@item lis_OTHERQ(9)

@item lis_pullupmsg(9)

@item lis_putbq(9)

@item lis_putctl1(9)

@item lis_putctl(9)

@item lis_putnext(9)

@item lis_putnextctl1(9)

@item lis_putnextctl(9)

@item lis_putq(9)

@item lis_qattach(9)

@item lis_qclose(9)

@item lis_qdetach(9)

@item lis_qenable(9)

@item lis_qopen(9)

@item lis_qprocsoff(9)

@item lis_qprocson(9)

@item lis_qreply(9)

@item lis_qsize(9)

@item lis_RD(9)

@item lis_register_strdev(9)

@item lis_register_strmod(9)

@item lis_rmvb(9)

@item lis_rmvq(9)

@item lis_safe_canenable(9)

@item lis_safe_enableok(9)

@item lis_safe_noenable(9)

@item lis_safe_OTHERQ(9)

@item lis_safe_putnext(9)

@item lis_safe_qreply(9)

@item lis_safe_RD(9)

@item lis_safe_SAMESTR(9)

@item lis_safe_WR(9)

@item lis_SAMESTR(9)

@item lis_stream_utils(9)

@item lis_strqget(9)

@item lis_strqset(9)

@item lis_testb(9)

@item lis_timeout(9)

@item lis_umount2(9)

@item lis_umount(9)

@item lis_unbufcall(9)

@item lis_unlink(9)

@item lis_unlinkb(9)

@item lis_unregister_strdev(9)

@item lis_unregister_strmod(9)

@item lis_untimeout(9)

@item lis_version(9)

@item lis_WR(9)

@item lis_xmsgsize(9)

@end ftable

@node System Controls
@section System Controls
@cindex system controls

@subsection System Controls

@dfn{@value{PACKAGE_TITLE}} provides and supports a number of system controls that can be accessed
using the /proc/sys/streams/* files, with the
@iftex
@b{sysctl}(2)
@end iftex
@ifnottex
@inforef{sysctl(2), , *manpages*}
@end ifnottex
interface, or using
@iftex
@b{sysctl}(8).
@end iftex
@ifnottex
@inforef{sysctl(8), , *manpages*}.
@end ifnottex
@pgindex sysctl(8)

The following STREAMS specific system controls are provided by @dfn{@value{PACKAGE_TITLE}}:

@subsubheading sys.streams.cltime
@vrindex sys.streams.cltime
Defines the default time interval (in milliseconds) that closing stream will linger for messages to
clear its queues before finally closing.  Valid values are zero (0) or greater (MAXINT).  The
default value is the traditional UNIX value of 15,000 milliseconds (15 seconds).  This system
control defines the default for all new streams.  The value for a given stream can be changed with
the
@iftex
@b{streamio}(7)
@end iftex
@ifnottex
@inforef{streamio(7), , *manpages*}
@end ifnottex
IO control
@b{I_CLTIME},
after the stream is opened and before the stream is closed.

@subsubheading sys.streams.max_apush
@vrindex sys.streams.max_apush
Defines the maximum number of modules that can be configured for autopush onto a STREAMS driver.
Valid values are zero (0) or greater (MAXINT).  The default value is the traditional UNIX value of 8
modules.  This system control defines the maximum for all new autopush configurations.  Existing
autopush configurations are unchanged.

@subsubheading sys.streams.max_mblk
@vrindex sys.streams.max_mblk
Defines the maximum number of combined message data blocks that will be held on the per-CPU free
list between runs of
@iftex
@b{runqueues}(9).
@end iftex
@ifnottex
@inforef{runqueues(9), , *manpages*}.
@end ifnottex
Valid values are zero (0) or greater (@b{MAXINT}).  The default value is the traditional @i{UNIX}
value of 10 blocks.  This system control defines the maximum for the next run of
@iftex
@b{runqueues}(9)
@end iftex
@ifnottex
@inforef{runqueues(9), , *manpages*}
@end ifnottex
for all CPUs.  Increasing or decreasing this number may have a positive or negative performance
impact.

@subsubheading sys.streams.max_stramod
@vrindex sys.streams.max_stramod
Defines the maximum number of autopush structures that can be defined for the entire system.  Valid
values are zero (0) or greater (@b{MAXINT}).  The default value is eight (8) ???????  This system
control defines the system-wide maximum.

@subsubheading sys.streams.max_strdev
@vrindex sys.streams.max_strdev
Defines the maximum number of streams devices.  This is normally the maximum number of character
devices (@b{MAX_CHRDEV}).  Valid values are zero (0) or greater (@b{MAXINT}).  The default value is
@b{MAX_CHRDEV} (256).  This is a read-only system control.

@subsubheading sys.streams.max_strmod
@vrindex sys.streams.max_strmod
Defines the maximum number of streams modules.  This is normally the maximum number of character
devices (@b{MAX_CHRDEV}).  Valid values are zero (0) or greater (@b{MAXINT}).  The default value is
@b{MAX_CHRDEV} (256).  This is a read-only system control.

@subsubheading sys.streams.msg_priority
@vrindex sys.streams.msg_priority
Defines whether allocation priority will honoured or whether all allocations will be treated the
same.  See
@iftex
@b{allocb}(9).
@end iftex
@ifnottex
@inforef{allocb(9), , *manpages*}.
@end ifnottex
When true (non-zero), allocation priority will be honoured when allocating message blocks.  When
false (zero), allocation priority will be ignored.  Valid values are zero (0) or non-zero.  The
default value is zero (0).  Changing this value may have a positive or negative impact on system
performance.

@subsubheading sys.streams.nband
@vrindex sys.streams.nband
Defines the number of queue bands available.  Valid values are zero (0) or greater (@b{MAXINT}).
The default value is the traditional UNIX value of 256.  This system control defines the system wide
value.  This system control is read-only.

@subsubheading sys.streams.nstrmsgs
@vrindex sys.streams.nstrmsgs
Defines the maximum number of combined message data blocks that will be allocated.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 2^12.  Changing this value may have a
positive or negative impact on system performance.  Setting this value to a small number may be
useful for debugging @i{STREAMS} drivers and modules.

@subsubheading sys.streams.nstrpush
@vrindex sys.streams.nstrpush
Defines the maximum number of modules that can be pushed on a stream.  This includes both autopushed
modules and modules pushed using the
@b{I_PUSH}
@vrindex I_PUSH
IO control of
@iftex
@b{streamio}(7).
@end iftex
@ifnottex
@inforef{streamio(7), , *manpages*}.
@end ifnottex
Valid values are zero (0) or greater (@b{MAXINT}).  The default value is the traditional @i{UNIX}
value of 64.  This is the default values for all new streams.  Existing streams are unaffected.

@subsubheading sys.streams.hiwat
@vrindex sys.streams.hiwat
Defines the default high water mark (in message bytes) for the stream head.  Valid values are zero
(0) or greater (@b{MAXINT}).  The default value is 5120.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.lowat
@vrindex sys.streams.lowat
Defines the default low water mark (in message bytes) for the stream head.  Valid values are zero
(0) or greater (@b{MAXINT}).  The default value is 1024.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.maxpsz
@vrindex sys.streams.maxpsz
Defines the maximum packet size accepted (in message bytes) for the stream head.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 2^12.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.minpsz
@vrindex sys.streams.minpsz
Defines the minimum packet size accepted (in message bytes) for the stream head.  Valid values are
zero (0) or greater (@b{MAXINT}).  The default value is 0.  This is the default value for all new
stream heads.  Existing stream heads are unaffected.  The value on existing stream heads can be
changed by a driver or module by sending an
@b{M_SETOPTS}
@vrindex M_SETOPTS
message to the stream head.

@subsubheading sys.streams.reuse_fmodsw
@vrindex sys.streams.reuse_fmodsw
Defines whether fmodsw table entries will be reused.  When false (zero), fmodsw table entries will
not be reused.  When true (non-zero), fmodsw table entries will be reused.  Valid values are zero
(0) and non-zero.  The default value is false (zero).

@subsubheading sys.streams.rtime
@vrindex sys.streams.rtime
Defines the time interval (in milliseconds) that the stream head will wait to forward held messages
when SNDHOLD is set for the stream head.  Valid values are zero (0) or greater (@b{MAXINT}).  The
default value is 10 milliseconds (one clock tick).  This is the system wide value for all streams.
Changing this value may have a positive or negative impact on system performance.

@subsubheading sys.streams.strhold
@vrindex sys.streams.strhold
Defines whether the @b{SNDHOLD} feature is active or not.  When false (0), the @b{SNDHOLD} feature
is deactivated.  When true (non-zero), the @b{SNDHOLD} feature is activated.  Valid values are zero
(0) or non-zero.  The default value is false (0).  This is the default value for all new streams.
Existing streams are unaffected.  This setting can be examined and altered on an open stream using
the
@b{I_GWROPT}
@vrindex I_GWROPT
and
@b{I_SWROPT}
@vrindex I_SWROPT
IO controls of
@iftex
@b{streamio}(7).
@end iftex
@ifnottex
@inforef{streamio(7), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strctlsz
@vrindex sys.streams.strctlsz
Defines the maximum @i{STREAMS} control part size.  Valid values are zero (0) or greater
(@b{MAXINT}).  The default value is 2^12.  This is the system wide maximum.  Existing allocations
are unaffected by lowering this value.  Changing this value can have an impact on users of
@iftex
@b{putpmsg}(2).
@end iftex
@ifnottex
@inforef{putpmsg(2), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strmsgsz
@vrindex sys.streams.strmsgsz
Defines the maximum @i{STREAMS} message size.  Valid values are zero (0) or greater (@b{MAXINT}).
The default value is 2^18.  This is the system wide maximum.  Existing allocations are unaffected by
lowering this value.  Changing this value can have an impact on users of
@iftex
@b{write}(2),
@end iftex
@ifnottex
@inforef{write(2), , *manpages*},
@end ifnottex
@iftex
@b{writev}(2),
@end iftex
@ifnottex
@inforef{writev(2), , *manpages*},
@end ifnottex
and
@iftex
@b{putpmsg}(2).
@end iftex
@ifnottex
@inforef{putpmsg(2), , *manpages*}.
@end ifnottex

@subsubheading sys.streams.strthresh
@vrindex sys.streams.strthresh
Defines the maximum amount of memory that will be allocated for use by the STREAMS subsystem via
@iftex
@b{kmem_alloc}(9)
@end iftex
@ifnottex
@inforef{kmem_alloc(9), , *manpages*}
@end ifnottex
or
@iftex
@b{kmem_zalloc}(9),
@end iftex
@ifnottex
@inforef{kmem_zalloc(9), , *manpages*},
@end ifnottex
or indirectly using
@iftex
@b{allocb}(9)
@end iftex
@ifnottex
@inforef{allocb(9), , *manpages*}
@end ifnottex
or allocating other @i{STREAMS} data structures.  Valid values are zero (0) or greater (@b{MAXINT}).
This is the system wide maximum.  Existing allocations are unaffected by lowering this value.
Changing this value to a low value may have some use in debugging @i{STREAMS} drivers and modules.

@node /proc File System
@section /proc File System
@cindex /proc file system

@node Examples
@chapter Examples
@cindex examples
@menu
* Module Example::		STREAMS Module Example
* Driver Example::		STREAMS Driver Example
@end menu

@node Module Example
@section Module Example
@cindex module example

@node Driver Example
@section Driver Example
@cindex driver example

@node Device Numbers
@chapter Device Numbers
@cindex device numbers
@menu
* External Device Numbers::	External Device Numbering
* Internal Device Numbers::	Internal Device Numbering
* Clone Device::		Clone Device Numbering
* Named STREAMS Device::	Reusable Device Numbering
* spec File System::		Avoiding Device Numbering
@end menu

@dfn{@value{PACKAGE_TITLE}} supports the concept of internal and external device numbering with base
majors and extended minors.

@dfn{@value{PACKAGE_TITLE}} uses several device numbering schemes intended to be compatible with SVR
4.2 MP DDI/DKI and implementations based on SVR 4.2
including AIX,
@cindex AIX
HP-UX,
@cindex HP-UX
LiS,
@cindex Linux STREAMS (LiS)
OSF/1,
@cindex OSF/1
Solaris,
@cindex Solaris
Super/UX,
@cindex Super/UX
UnixWare,
@cindex UnixWare
and UXP/V.
@cindex UXP/V

@node External Device Numbers
@section External Device Numbers
@cindex external device numbers
@cindex device numbers, external

@dfn{@value{PACKAGE_TITLE}} provides real external device numbering using the functions
@iftex
@b{getemajor}(9), @b{geteminor}(9) and @b{makedevice}(9).
@end iftex
@ifnottex
@inforef{getemajor(9), , *manpages*},
@inforef{geteminor(9), , *manpages*}
and
@inforef{makedevice(9), ,  *manpages*}.
@end ifnottex
When used on a devp argument passed to the
@iftex
@b{qopen}(9)
@end iftex
@ifnottex
@inforef{qopen(9), , *manpages*}
@end ifnottex
procedures of a STREAMS driver or module,
@iftex
@b{getemajor}(9) and @b{geteminor}(9)
@end iftex
@ifnottex
@inforef{getemajor(9), , *manpages*}
and
@inforef{geteminor(9), , *manpages*}
@end ifnottex
will return the real external major or minor device number.  The real external major or minor device
number is the major or minor device number that is seen by user applications.

A number of administrative utilities are provided that assist with the assignment of device names
and number and are useful in boot scripts:

@multitable @columnfractions .15 .85
@item @dfn{@b{autopush}(8)}
@pgindex autopush(8)
@tab -- verify modules and establish autopush lists
@item @dfn{@b{insf}(8)}
@pgindex insf(8)
@tab -- install special device files
@item @dfn{@b{scls}(8)}
@pgindex scls(8)
@tab -- list @dfn{STREAMS} drivers
@item @dfn{@b{strinfo}(8)}
@pgindex strinfo(8)
@tab -- provide information on @dfn{STREAMS} drivers and modules
@item @dfn{@b{strload}(8)}
@pgindex strload(8)
@tab -- load or unload @dfn{STREAMS} drviers and modules
@item @dfn{@b{strsetup}(8)}
@pgindex strsetup(8)
@tab -- create @dfn{STREAMS} devices
@end multitable

Another approach to establishment of dynamically allocated major device numbers is to use the @cite{LiS}
@cindex Linux STREAMS (LiS)
approach of creating minor device nodes using the @b{mknod}(9) and @b{unlink}(9) facilities provided
by the @cite{LiS}
@cindex Linux STREAMS (LiS)
compatibility module.  But this approach does not work well with demand loading of kernel modules
because it relies upon the @b{Linux} character device demand loading approach, or requires informing
@dfn{STREAMS} of all devices and drivers when @dfn{STREAMS} is being compiled.

@dfn{@value{PACKAGE_TITLE}} supports the @b{Linux} character device module demand loading; however, the
@b{Linux} mechanism requires prior knowledge of the character major device number.  Some of the
administrative utilities above can load kernel modules and establish what major device number was
assigned.  See the individual manual pages for more information.

@node Internal Device Numbers
@section Internal Device Numbers
@cindex internal device numbers
@cindex device numbers, internal

Internal extended minor device number is a scheme whereby the @dfn{STREAMS} device driver does not
have to be concerned with architectural limitations on the number of minor device number available
to user applications (0 to 255 in @b{Linux 2.4}).  Instead, the driver treats the major device
number as a base internal device number against which a range of minor devices can be assigned
(currently 0 to 65535).  For external applications, device numbering consists of multiple (real)
external major device numbers that correspond to a single base internal major device number.
Internal extended device numbering is provided by the @b{getmajor}(9), @b{getminor}(9) and
@b{makedevice}(9) facilities.  Conversions between external (real) major device numbers and internal
(base) major device numbers can be performed with the @b{etoimajor}(9) and @b{itoemajor}(9)
utilities provided by the @dfn{UnixWare} compatibility modules.

Extended device numbering further complicates the matter of dynamic assignment of major device
numbers and makes it harder for boot and configuration scripts to properly create device nodes.

@node Clone Device
@section Clone Device
@cindex clone device

@subsection Traditional Cloning

The @b{clone}(4) driver supports traditional clone devices.  Traditional clone devices work by
assigning the clone major device number and a unique minor device number to a ``clone'' device.
When this device is opened, the minor device number of the device is used as the new major device
number and zero (0) is used as the minor device number, and the @b{qopen}(9) is chained to the
@b{qopen}(9) procedure of the new @b{streamtab}(9) structure resulting from looking up this newly
created device number.  @var{sflag} is always set to @samp{CLONEOPEN} when the traditional clone
driver opens a device.

@b{getemajor}(9), @b{geteminor}(9), @b{getmajor}(9) and @b{getminor}(9) still function as normal on
the resulting @var{devp} argument passed to the ultimate driver's @b{qopen}(9) procedure.  This is
true both for base and extended major device numbers.  The following table illustrates the situation
(assuming that the major device number assigned to the @b{clone}(4) device is 72):

@multitable @columnfractions .25 .25 .25 .25
@item @b{clone}		@tab @b{external}	@tab @b{internal}	@tab @var{sflag}
@item @t{72:32}		@tab @t{32:0}		@tab @t{32:000}		@tab @samp{CLONEOPEN}
@item @t{72:35}		@tab @t{35:0}		@tab @t{32:256}		@tab @samp{CLONEOPEN}
@item @t{72:37}		@tab @t{37:0}		@tab @t{32:512}		@tab @samp{CLONEOPEN}
@end multitable

If a driver wishes to assign an extended major device number in response to a @b{CLONEOPEN}, it
should use @b{makedevice}(9) with the major device number obtained with @b{getmajor}(9) and an
extended minor device number assigned by the driver.  In this way, extended minor device numbers are
transparent to the operation of the @b{clone}(4) driver and @samp{CLONEOPEN}.

@subsection New Cloning

@dfn{@value{PACKAGE_TITLE}} supports the new cloning approach whereby a driver is permitted to alter
the device number returned in the @var{devp} argument to @b{qopen}(9) even though @var{sflag} is set
to @samp{DRVOPEN} instead of @samp{CLONEOPEN}.  The driver, at its discretion, can treat any minor
device number as a new style clone device, although normally minor device number zero (0) is usually
used as the clone minor.

The driver may either use an external (real) major device number or the internal (base) major device
number.  That is, when calling @b{makedevice}(9) to create the device to return to the @var{devp}
argument to @b{qopen}(9), the driver can use an external (real) major device number (returned by
@b{getemajor}(9)) combined with an assigned external (real) minor device number (from 0 to 255); or,
it can use an internal (base) major device number (returned by @b{getmajor}(9)) combined with an
assigned extended minor device number (from 0 to 65535).  The latter approach is often easier to
use.

@node Named STREAMS Device
@section Named STREAMS Device
@cindex named streams device

The @b{nsdev}(4) driver provides for a @dfn{Named STREAMS Device}.  This is a device numbering
approach unique to @dfn{@value{PACKAGE_TITLE}}.  The @b{nsdev}(4) driver operates in a similar manner
to the @b{clone}(4) driver, however, the major number is derived from the prefix name of the device
and the minor number is taken directly from the minor number of the @b{nsdev}(4) device.

The following table summarizes the approach (assuming that the major device numbers assigned to the
@b{nsdev}(4) device are 74, 75, 76 and 77 and the major device numbers assigned to the @b{inet}(4)
driver are 32, 35 and 37):

@multitable @columnfractions .2 .2 .2 .2 .2
@item @b{nsdev}		@tab		@tab @b{external}	@tab @b{internal}	@tab @var{sflag}
@item inet		@tab @t{74:000}	@tab @t{32:000}		@tab @t{32:000}		@tab @samp{DRVOPEN}
@item inet.udp		@tab @t{74:017}	@tab @t{32:017}		@tab @t{32:017}		@tab @samp{DRVOPEN}
@item inet.99		@tab @t{74:099}	@tab @t{32:099}		@tab @t{32:099}		@tab @samp{DRVOPEN}
@item inet.512		@tab @t{76:000}	@tab @t{37:000}		@tab @t{32:512}		@tab @samp{DRVOPEN}
@end multitable

The @b{nsdev}(4) device also has the characteristic that if a device name with a major device number
of the @b{nsdev}(4) device is opened and there is no device loaded that corresponds to the prefix
name of the device from which to obtain a major device number, the @b{nsdev}(4) will attempt to load
the `@t{@b{streams-}@i{prefix}}' kernel module using @b{request_module}(9) and try again: where,
@samp{prefix} is the prefix of the device name up to the first point character (corresponding to a
digit @kbd{.}).  So, in the example above, if the @samp{inet} driver was not loaded, but an attempt
was made to open the @file{/dev/inet.99} device, @dfn{STREAMS} would request the @file{streams-inet}
kernel module be loaded.  This approach simplifies kernel module loading as well as device numbering
and makes it easier for boot scripts to initialize devices.

@node spec File System
@section spec File System
@cindex spec file system

Another approach to creation and assignment of device numbers is the mountable @b{specfs}(5) file
system.  The @b{specfs}(5) file system can be mounted to provide an in-kernel device directory
similar to the @b{Linux} @file{devfs} file system and the @dfn{Solaris} devices file system.  The
@b{spefs}(5) file system should normally be mounted on the @file{/dev/streams} subdirectory by
system initialization scripts using a command such as: @command{mount -t specfs none /dev/streams}.
See @b{mount}(8)
@pgindex mount(8)
for more information.  Once mounted over the @file{/dev/streams} subdirectory, subdirectories of
@file{/dev/streams} corresponding to each loaded driver will appear.  So, for example, when the
@b{inet}(4) driver is loaded, the ``inet'' subdirectory will appear at @file{/dev/streams/inet}.
Within each device subdirectory @file{/dev/streams/@i{devicename}/}, each instance of the device
will appear as a character device named with the instance number of the device and having the
eternal (real) major and external (real) minor device number.

The mounted @b{specfs}(5) file system also has the characteristic that if a device subdirectory
@file{/dev/streams/@i{devname}/} does not exist, but an attempt is made to read such a directory,
@dfn{@value{PACKAGE_TITLE}} will attempt to load kernel module @file{streams-@i{devname}} into the
kernel with @b{request_module}(9).  If the load is successful, the kernel module will register and
the subdirectory will be created and read.

Also, if an attempt is make to open a numbered file within a device subdirectory of
@file{/dev/streams/@i{devname}/@i{nnnn}} where, @samp{nnnn} is an octal, hexadecimal or decimal
ASCII number, @dfn{STREAMS} will open the driver (call @b{qopen}(9) for driver @samp{devname}) with
the instance number resulting from the conversion of the device name @samp{nnnn} to an instance
number.

These two characteristics permit symbolic links to be placed in the @file{/dev} directory that link
to a device name and instance number in the @file{/dev/stream} directory.  An example is given in
the table below:

@multitable @columnfractions .55 .15 .15 .15
@item @b{link} @tab @b{external} @tab @b{internal} @tab @var{sflag}
@item @file{/dev/tcp}@ ->@ @file{/dev/streams/inet/36} @tab @t{30:36} @tab @t{30:36} @tab @samp{DRVOPEN}
@item @file{/dev/udp}@ ->@ @file{/dev/streams/inet/39} @tab @t{30:39} @tab @t{30:39} @tab @samp{DRVOPEN}
@end multitable

In fact, it does not matter what the character device major or minor device number is on the node in
the @b{specfs}(5) file system.  This is because the inode in the file system is directly associated
with the @b{streamtab}(9) structure and instance number without using the normal @b{Linux} character
device mechanisms.  When a device instance exceeds the extended minor device numbering space
assigned to a device driver in the @b{specfs}(5) file system, device number displayed by
@b{stat}(2), @b{lstat}(2) or @b{fstat}(2) is chosen by wrapping the instance number into the
extended minor device numbering space.

This approach makes it unnecessary to statically assign major device numbers, or to dynamically
assign major device numbers to devices in boot scripts, and is by far the easiest approach.  All that
is required by packages at installation is that they establish the necessary symbolic links on
device name and instance number without concern for major device numbers.

@node Multi-Threading
@chapter Multi-Threading
@cindex multi-threading
@menu
* Configuration::		MP STREAMS Configuration
* Synchronous Entry Points::	MP STREAMS Synchronous Entry Points
* Synchronous Callbacks::	MP STREAMS Synchronous Callbacks
* Synchronous Callouts::	MP STREAMS Synchronous Callouts
* Asynchronous Entry Points::	MP STREAMS Asynchronous Entry Points
* Asynchronous Callbacks::	MP STREAMS Asynchronous Callbacks
* Asynchronous Callouts::	MP STREAMS Asynchronous Callouts
@end menu

The @b{Linux} 2.6 kernel is multi-threaded to make effective use of symmetric shared-memory
multiprocessor computers.  All parts of the kernel, including @cite{STREAMS} modules and drivers,
must ensure data integrity in a multiprocessing environment.  For the most part, developers must
ensure that concurrently running kernel threads do not attempt to manipulate the same data at the
same time.  The @cite{STREAMS} framework provides multiprocessing @dfn{Syncrhonization Levels},
which allows the developer control over the level of concurrency allowed in a module.  The @cite{SVR
4.2 MP DDI/DKI} also provides locking mechanisms for protecting data.

There are two types of entry points, callbacks and callouts in the @dfn{@value{PACKAGE_TITLE}}
subsystem:

@enumerate

@item @emph{Synchronous.}
These entry points, callbacks and callouts are referenced against a @dfn{STREAMS} queue structure.
That is, they were invoked using a @dfn{STREAMS} queue structure as an argument.  These procedures
are as follows:

@multitable @columnfractions .20 .80
@item put(9)
@tab --
@item srv(9)
@tab --
@item qopen(9)
@tab --
@item qclose(9)
@tab --
@item qbufcall(9)
@tab --
@item qtimeout(9)
@tab --
@item mi_bufcall(9)
@tab --
@item putq(9)
@tab --
@item putbq(9)
@tab --
@item putnext(9)
@tab --
@item qreply(9)
@tab --
@end multitable

@item @emph{Asynchronous.}
These entry points, callbacks and callouts are @emph{not} referenced against a @dfn{STREAMS} queue
structure.  That is, they were invoked without a specific @dfn{STREAMS} queue structure as an
argument.  These procedures are as follows:

@multitable @columnfractions .20 .80
@item bufcall(9)
@tab --
@item esbbufcall(9)
@tab --
@item timeout(9)
@tab --
@item esballoc(9)
@tab -- (free routine)
@end multitable

@end enumerate

@node Configuration
@section Configuration
@cindex configuration

@cite{SVR 4.2 MP} specifies a synchronization mechanism that can be used during configuration of a
@dfn{STREAMS} driver or module to specify the level of synchronization required by a module.  The
@cite{SVR 4} synchronization levels are as follows:

@multitable @columnfractions .30 .70
@item @var{SQLVL_DEFAULT}
@vindex SQLVL_DEFAULT
@cindex synchronization, default
@tab @emph{Default level synchronization.}
Specifies that the module uses the default synchronization scheme.  This is the same as specifying
@var{SQLVL_MODULE}.
@vindex SQLVL_MODULE
@item @var{SQLVL_GLOBAL}
@vindex SQLVL_GLOBAL
@cindex synchronization, global
@tab @emph{Global (@dfn{STREAMS} scheduler) level synchronization.}
Specifies that all of @dfn{STREAMS} can be access by only one thread at the same time.  The module
is run with global synchronization.  This means that only one @dfn{STREAMS} executive thread will be
permitted to enter any module.  This makes the entire @dfn{STREAMS} executive single threaded and is
useful primarily for debugging.  This is the same as "Uniprocessor Emulation" on some systems, and
reduces the @dfn{STREAMS} executive to running on a single processor at a time.  This option should
normally be used only for debugging.
@item @var{SQLVL_ELSEWHERE}
@vindex SQLVL_ELSEWHERE
@cindex synchronization, elsewhere
@tab @emph{Module group level synchronization.}
Specifies that the module is run with synchronization within a group of modules.  Only one thread of
execution will be within the group of modules at a time.  The group is separately specified as a
character string name.  This permits a group of modules to run single threaded as though they are
running on a single processor, without interfering with the concurrency of other modules outside the
group.  This can be important for testing and for modules that implicitly share unprotected data
structures.
@item @var{SQLVL_MODULE}
@vindex SQLVL_MODULE
@cindex synchronization, module
@tab @emph{Module level synchronization.}
Specifies that all instances of a module can be accessed by only one thread at the same time.  This
is the default value.
The module is run with synchronization at the module.  Only one thread of execution will be
permitted within the module.  Where the module does not share data structures between modules, this
has a similar effect on running on a uniprocessor system.  This is the default and works best for
non-multiprocessor-safe modules written in accordance with @dfn{STREAMS} guidelines.
This level is roughly equivalent to @cite{Solaris} @var{D_MTPERMOD}
@vindex D_MTPERMOD
perimeters.
@item @var{SQLVL_QUEUEPAIR}
@vindex SQLVL_QUEUEPAIR
@cindex synchronization, queue pair
@tab @emph{Queue pair level synchronization.}
Specifies that each queue pair can be accessed by only one thread at the same time.  Only one thread
will be permitted to enter a given queue's procedures within a given queue pair.  Where the read and
write side of the queue pair share the same private structure (@samp{q->q_ptr}), this provides
multiprocessor protection of the common data structure to all synchronous entry points without an
external lock.
This level is roughly equivalent to @cite{Solaris} @var{D_MTAPAIR}
@vindex D_MTAPAIR
perimeters.
@item @var{SQLVL_QUEUE}
@vindex SQLVL_QUEUE
@cindex synchronization, queue
@tab @emph{Queue level synchronization.}
Specifies that each queue can be accessed by only one thread at the same time.  The module is run
with synchronization at the queue.  Only one thread of execution will be permitted to enter a given
queue's procedures, however, another thread will be permitted to enter procedures of the other queue
in the queue pair.  This is useful when the read and write side of a module are largely independent
and do not require synchronization between sides of the queue pair.
This level is roughly equivalent to @cite{Solaris} @var{D_MTPERQ}
@vindex D_MTPERQ
perimeters.
@item @var{SQLVL_NOP}
@vindex SQLVL_NOP
@cindex synchronization, none
@tab @emph{No synchronization.}
Specifies that each queue can be accessed by more than one thread at a the same time.  The
protection of internal data and of @b{put}(9) and @b{srv}(9) procedures against @b{timeout}(9) or
@b{bufcall}(9) is done by the module or driver itself.  This synchronization level should be used
essentially for multiprocessor-efficient modules.
This level is roughly equivalent to @cite{Solaris} @var{D_MP}
@vindex D_MP
flag.
@end multitable

@node Synchronous Entry Points
@section Synchronous Entry Points
@cindex synchronous entry points

@dfn{Synchronous Entry Points} are those entry points into the @dfn{STREAMS} driver or module that
will be synchronized according to the specified synchronization level.

@ftable @command
@item put(9)
@emph{Queue put procedure.}
If the module has any synchronization level other than @var{SQLVL_NOP},
@vindex SQLVL_NOP
the put procedure will be exclusive.  Attempts to enter the put procedure while another thread is
running within the synchronization level will result in the call being postponed until the thread
currently in the synchronization level exits.
@item srv(9)
If the module has any synchronization level other than @var{SQLVL_NOP},
@emph{Queue service procedure.}
the service procedure will be exclusive.  Attempts to enter the service procedure while another
thread is running within the synchronization level will result in the service procedure being
postponed until the thread currently in the synchronization level exits.
@item qopen(9)
@emph{Queue open procedure.}
The queue open procedure is synchronous and exclusive before the call to @command{qprocson}(9), or
in any event, until return from the procedure.  If the module has synchronization level of global,
elsewhere or per-module; the call to the qopen procedure is exclusive.
@item qclose(9)
@emph{Queue close procedure.}
The queue close procedure is synchronous and exclusive after the call to @command{qprocsoff}(9), or
in any event, after return from the procedure.  If the module has synchronization level of global,
elsewhere or per-module; the call to the qclose procedure is exclusive.
@item qprocson(9)
@emph{Queue procedures on.}
@item qprocsoff(9)
@emph{Queue procedures off.}
@item freezestr(9)
@emph{Freeze stream.}
@item unfreezestr(9)
@emph{Thaw stream.}
@item qwriter(9)
@emph{Queue writer.}
@end ftable

@node Synchronous Callbacks
@section Synchronous Callbacks
@cindex synchronous callbacks

@dfn{Synchronous Callbacks} are those callbacks into the @dfn{STREAMS} driver or module that
will be synchronized according to the specified synchronization level.  Synchronous callbacks are an
extension to the @cite{UNIX System V Release 4.2} specifications of @dfn{STREAMS}.  Synchronous
callback extensions include @cite{Solaris} extensions and @cite{AIX} extensions.

These include:

@multitable @columnfractions .20 .80
@item @command{qbufcall(9)}
@findex qbufcall(9)
@tab -- queue referenced buffer call
@item @command{qtimeout(9)}
@findex qtimeout(9)
@tab -- queue referenced timeout
@item @command{qunbufcall(9)}
@findex qunbufcall(9)
@tab -- queue referenced buffer call cancel
@item @command{quntimeout(9)}
@findex quntimeout(9)
@tab -- queue referenced timeout cancel
@item @command{mi_bufcall(9)}
@findex mi_bufcall(9)
@tab -- queue reference buffer call
@end multitable

@node Synchronous Callouts
@section Synchronous Callouts
@cindex synchronous callouts

@multitable @columnfractions .20 .80
@item @command{putnext(9)}
@findex putnext(9)
@tab --
@item @command{qreply(9)}
@findex qreply(9)
@tab --
@end multitable

@node Asynchronous Entry Points
@section Asynchronous Entry Points
@cindex asynchronous entry points

@node Asynchronous Callbacks
@section Asynchronous Callbacks
@cindex asynchronous callbacks

@dfn{Asynchronous Callbacks} are those callbacks into the @dfn{STREAMS} driver or module that will
@emph{not} be synchronized according to the specified synchronization level.  Asynchronous callbacks
are the basic @cite{UNIX System V Release 4.2} callbacks.

@node Asynchronous Callouts
@section Asynchronous Callouts
@cindex asynchronous callouts

@node Conformance
@chapter Conformance
@cindex conformance
@menu
* SVR 4.2 Compatibility::	SVR 4.2 MP DDI/DKI Compatibility
* AIX Compatibility::		AIX 5L Version 5.1 Compatibility
* HP-UX Compatibility::		HP-UX 11.0i v2 Compatibility
* OSF/1 Compatibility::		OSF/1 1.2/Digital UNIX comptatibility
* UnixWare Compatibility::	UnixWare 7.1.3 Compatibility
* Solaris Compatibility::	Solaris 9/SunOS 5.9 Compatibility
* SUX Compatibility::		Super/UX Compatibility
* UXP Compatibility::		UXP/V Compatibility
* LiS Compatibility::		LiS 2.18.1 Compatibility
@end menu

@node SVR 4.2 Compatibility
@section SVR 4.2 MP DDI/DKI Compatibility
@cindex SVR 4.2 MP, compatibility
@cindex compatibility, SVR 4.2 MP
@cindex SVR 4.2 MP

@node AIX Compatibility
@section AIX 5L Version 5.1 Compatibility
@cindex AIX 5L Version 5.1, compatibility
@cindex compatibility, AIX 5L Version 5.1
@cindex AIX PSE

@node HP-UX Compatibility
@section HP-UX 11.0i v2 Compatibility
@cindex HP-UX 11.0i v2, compatibility
@cindex compatibility, HP-UX 11.0i v2
@cindex HP-UX

@node OSF/1 Compatibility
@section OSF/1 1.2/Digital UNIX Compatibility
@cindex OSF/1 1.2/Digital UNIX, compatibility
@cindex compatibility, OSF/1 1.2/Digital
@cindex OSF/1

@node UnixWare Compatibility
@section UnixWare 7.1.3 Compatibility
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility
@cindex compatibility, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@node Solaris Compatibility
@section Solaris 9/SunOS 5.9 Compatibility
@cindex Solaris 9/SunOS 5.9, compatibility
@cindex compatibility, Solaris 9/SunOS 5.9
@cindex Solaris

@node SUX Compatibility
@section Super/UX Compatibility
@cindex Super/UX, compatibility
@cindex compatibility, Super/UX
@cindex Super/UX

@node UXP Compatibility
@section UXP/V Compatibility
@cindex UXP/V, compatibility
@cindex compatibility, UXP/V
@cindex UXP/V

@node LiS Compatibility
@section LiS 2.18.1 Compatibility
@cindex LiS 2.18.1, compatibility
@cindex compatibility, LiS 2.18.1
@cindex Linux STREAMS (LiS)

@node Portability
@chapter Portability
@cindex portability

Although each of the manual pages of supported functions and structures provides compatibility and
porting information, this document attempts to gather together pertinent information concerning
porting from various @cite{UNIX} operating system supporting @cite{STREAMS}.

The porting information is organized by the operating system from which porting is being attempted.
Note that, aside from configuration details, any system not listed here that is based on SVR 4.2 MP
or on a another of the implementations, should start with that implementation's portability
information.

Porting information is organized into sections as follows:

@menu
* Core Function Support::	Porting with Core Function Support
* SVR 4.2 Portability::		Porting from SVR 4.2 MP
* AIX Portability::		Porting from AIX 5L Version 5.1
* HP-UX Portability::		Porting from HP-UX 11.0i v2
* OSF/1 Portability::		Porting from OSF/1 1.2/Digital UNIX
* UnixWare Portability::	Porting from UnixWare 7.1.3 (OpenUnix 8)
* Solaris Portability::		Porting from Solaris 9/SunOS 5.9
* SUX Portability::		Porting from Super/UX
* UXP Portability::		Porting from UXP/V
* LiS Portability::		Porting from LiS 2.18.1
* Development::			Developing Portable STREAMS Modules
@end menu

@node Core Function Support
@section Porting with Core Function Support
@cindex porting, core function support

@menu
* Core Message Functions::
* Core UP Queue Functions::
* Core MP Queue Functions::
* Core DDI/DKI Functions::
* Some Common Extension Functions::
* Some Internal Functions::
* Some Oddball Functions::
@end menu

@node Core Message Functions
@subsection Core Message Functions
@cindex core message functions

@ftable @command

@item adjmsg(9)
trim bytes from the front or back of a @cite{STREAMS} message

@item allocb(9)
allocate a @cite{STREAMS} message and data block

@item bufcall(9)
install a buffer callback

@item copyb(9)
copy a @cite{STREAMS} message block

@item copymsg(9)
copy a @cite{STREAMS} message

@item datamsg(9)
tests a @cite{STREAMS} message type for data

@item dupb(9)
duplicate a @cite{STREAMS} message block

@item dupmsg(9)
duplicate a @cite{STREAMS} message

@item esballoc(9)
allocate a @cite{STREAMS} message and data block with a caller supplied data buffer

@item freeb(9)
frees a @cite{STREAMS} message block

@item freemsg(9)
frees a @cite{STREAMS} message

@item linkb(9)
link a message block to a @cite{STREAMS} message

@item msgdsize(9)
calculate the size of the data in a @cite{STREAMS} message

@item msgpullup(9)
pull up bytes in a @cite{STREAMS} message

@item pcmsg(9)
test a data block message type for priority control

@item pullupmsg(9)
pull up the bytes in a @cite{STREAMS} message

@item rmvb(9)
remove a message block from a @cite{STREAMS} message

@item testb(9)
test if a @cite{STREAMS} message can be allocated

@item unbufcall(9)
remove a @cite{STREAMS} buffer callback

@item unlinkb(9)
unlink a message block from a @cite{STREAMS} message

@end ftable

@node Core UP Queue Functions
@subsection Core UP Queue Functions
@cindex core queue functions, UP

@ftable @command

@item backq(9)
find the upstream or downstream queue

@item bcanput(9)
test flow control on a @cite{STREAMS} message queue

@item canenable(9)
test whether a @cite{STREAMS} message queue can be scheduled

@item enableok(9)
allow a @cite{STREAMS} message queue to be scheduled

@item flushband(9)
flushes band @cite{STREAMS} messages from a message queue

@item flushq(9)
flushes messages from a @cite{STREAMS} message queue

@item getq(9)
gets a message from a @cite{STREAMS} message queue

@item insq(9)
inserts a message into a @cite{STREAMS} message queue

@item noenable(9)
disable a @cite{STREAMS} message queue from being scheduled

@item OTHERQ(9)
return the other queue of a @cite{STREAMS} queue pair

@item putbq(9)
put a message back on a @cite{STREAMS} message queue

@item putctl(9)
put a control message on a @cite{STREAMS} message queue

@item putctl1(9)
put a 1 byte control message on a @cite{STREAMS} message queue

@item putq(9)
put a message on a @cite{STREAMS} message queue

@item qenable(9)
schedules a @cite{STREAMS} message queue service routine

@item qreply(9)
replies to a message from a @cite{STREAMS} message queue

@item qsize(9)
return the number of message on a queue

@item RD(9)
return the read queue of a @cite{STREAMS} queue pair

@item rmvq(9)
remove a message from a @cite{STREAMS} message queue

@item SAMESTR(9)
test for @cite{STREAMS} pipe or FIFO

@item WR(9)
return the write queue of a @cite{STREAMS} queue pair

@end ftable

@node Core MP Queue Functions
@subsection Core MP Queue Functions
@cindex core queue functions, MP

@ftable @command

@item bcanputnext(9)
test flow control on a message queue

@item canputnext(9)
test flow control on a message queue

@item freezestr(9)
freeze the state of a stream queue

@item put(9)
invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message

@item putnext(9)
put a message on the downstream @cite{STREAMS} message queue

@item putnextctl1(9)
put a 1 byte control message on the downstream @cite{STREAMS} message queue

@item putnextctl(9)
put a control message on the downstream @cite{STREAMS} message queue

@item qprocsoff(9)
disables @cite{STREAMS} message queue processing for multi-processing

@item qprocson(9)
enables @cite{STREAMS} message queue processing for multi-processing

@item strqget(9)
gets information about a @cite{STREAMS} message queue

@item strqset(9)
sets attributes of a @cite{STREAMS} message queue

@item unfreezestr(9)
thaw the state of a stream queue

@end ftable

@node Core DDI/DKI Functions
@subsection Core DDI/DKI Functions
@cindex core ddi/dki functions

@ftable @command

@item kmem_alloc(9)
allocate kernel memory

@item kmem_free(9)
deallocates kernel memory

@item kmem_zalloc(9)
allocate and zero kernel memory

@item cmn_err(9)
print a kernel command error

@item bcopy(9)
copy byte strings

@item bzero(9)
zero a byte string

@item copyin(9)
copy user data in from user space to kernel space

@item copyout(9)
copy user data in from kernel space to user space

@item delay(9)
postpone the calling process for a number of clock ticks

@item drv_getparm(9)
driver retrieve kernel parameter

@item drv_hztomsec(9)
convert kernel tick time between microseconds or milliseconds

@item drv_htztousec(9)
convert kernel tick time between microseconds or milliseconds

@item drv_msectohz(9)
convert kernel tick time between microseconds or milliseconds

@item drv_priv(9)
check if the current process is privileged

@item drv_usectohz(9)
convert kernel tick time between microseconds or milliseconds

@item drv_usecwait(9)
delay for a number of microseconds

@item min(9)
determine the minimum of two integers

@item max(9)
determine the maximum of two integers

@item getmajor(9)
get the internal major device number for a device

@item getminor(9)
get the extended minor device number for a device

@item makedevice(9)
create a device from a major and minor device numbers

@item strlog(9)
pass a message to the @cite{STREAMS} logger

@item timeout(9)
start a timer

@item untimeout(9)
stop a timer

@end ftable

@ftable @command

@item mknod(9)
make block or character special files

@item mount(9)
mount and unmount file systems

@item umount(9)
mount and unmount file systems

@item unlink(9)
remove a file

@end ftable

@node Some Common Extension Functions
@subsection Some Common Extension Functions
@cindex common extension functions

@ftable @command

@item linkmsg(9)
link a message block to a @cite{STREAMS} message

@item putctl2(9)
put a two byte control message on a @cite{STREAMS} message queue

@item putnextctl2(9)
put a two byte control message on the downstream @cite{STREAMS} message queue

@item weldq(9)
weld two (or four) queues together

@item unweldq(9)
unweld two (or four) queues

@end ftable

@node Some Internal Functions
@subsection Some Internal Functions
@cindex internal functions

@ftable @command

@item allocq(9)
allocate a @cite{STREAMS} queue pair

@item bcanget(9)
test for message arrival on a band on a stream

@item canget(9)
test for message arrival on a stream

@item freeq(9)
deallocate a @cite{STREAMS} queue pair

@item qattach(9)
attach a module onto a @cite{STREAMS} file

@item qclose(9)
close a @cite{STREAMS} module or driver

@item qdetach(9)
detach a module from a @cite{STREAMS} file

@item qopen(9)
call a @cite{STREAMS} module or driver open routine

@item setq(9)
set sizes and procedures associated with a @cite{STREAMS} message queue

@end ftable

@node Some Oddball Functions
@subsection Some Oddball Functions
@cindex oddball functions

@ftable @command

@item appq(9)
append one @cite{STREAMS} message after another

@item esbbcall(9)
install a buffer callback for an extended @cite{STREAMS} message block

@item isdatablk(9)
test a @cite{STREAMS} data block for data type

@item isdatamsg(9)
test a @cite{STREAMS} data block for data type

@item kmem_zalloc_node(9)

@item msgsize(9)
calculate the size of the message blocks in a @cite{STREAMS} message

@item qcountstrm(9)
add all counts on all @cite{STREAMS} message queues in a stream

@item xmsgsize(9)
calculate the size of message blocks in a @cite{STREAMS} message

@end ftable

@page
@node SVR 4.2 Portability
@section Porting from SVR 4.2 MP
@cindex porting, SVR 4.2 MP
@cindex SVR 4.2 MP, portability
@cindex SVR 4.2 MP

This section captures portability information for SVR 4.2 MP based systems.  If the operating system
from which you are porting more closely fits one of the other portability sections, please see that
section.

@menu
* Differences from SVR 4.2 MP::
* Commonalities with SVR 4.2 MP::
* Compatibility functions for SVR 4.2 MP::
* Configuration ala SVR 4.2 MP::
@end menu

@node Differences from SVR 4.2 MP
@subsection Differences from SVR 4.2 MP
@cindex differences, SVR 4.2 MP
@cindex SVR 4.2 MP, differences
@cindex SVR 4.2 MP

@dfn{@value{PACKAGE_TITLE}} has very few differences from @cite{SVR 4.2 MP}.  Not all @cite{SVR 4.2 MP}
functions are implemented in the base @dfn{@value{PACKAGE_TITLE}} kernel modules.  Some functions are
included in the @cite{SVR 4.2 MP} compatibility module, @file{streams-svr4compat.o}.

@node Commonalities with SVR 4.2 MP
@subsection Commonalities with SVR 4.2 MP
@cindex commonalities, SVR 4.2 MP
@cindex SVR 4.2 MP, commonalities
@cindex SVR 4.2 MP

@node Compatibility functions for SVR 4.2 MP
@subsection Compatibility functions for SVR 4.2 MP
@cindex compatibility functions, SVR 4.2 MP
@cindex SVR 4.2 MP, compatibility functions
@cindex SVR 4.2 MP

@ftable @command

@item itimeout(9)
Perform a timeout at an interrupt level.

@item lbolt(9)
Time in ticks since reboot.

@item sleep(9)
Put a process to sleep.

@item wakeup(9)
Wake a process.

@item vtop(9)
Convert virtual to physical address.

@end ftable

@subsubsection Priority Levels

@b{Linux} has a different concept of priority levels than @cite{SVR 4.2 MP}.  @b{Linux} has
basically 4 priority levels as follows:

@enumerate

@item Preemptive

At this priority level, software and hardware interrupts are enabled and the kernel is executing
with preemption enabled.  This means that the currently executing kernel thread could preempt and
sleep in favour of another thread of kernel execution.

This priority level only exists on preemptive (mostly 2.6) kernels.

@item Non-Preemptive

At this priority level, software and hardware interrupts are enabled and the kernel is executing
with preemption disabled.  This means that the currently executing kernel thread will only be
interrupted by software or hardware interrupts.

This priority level exists in all kernels.

@item Software Interrupts Disabled

At this priority level, software interrupts are disabled and the kernel is executing with preemption
disabled.  This means that the currently executing kernel thread will only be interrupted by
hardware interrupts.

This is the case when the executing thread is processing a software interrupt, or when the currently
executing thread has disabled software interrupts.

This priority level exists in all kernels.

@item Interrupt Service Routines Disabled

At this priority level, hardware interrupts are disabled and the kernel is executing with preemption
disabled.  This means that the currently executing kernel thread will not be interrupted.

This is the case when the executing thread is processing a hardware interrupt, or when the currently
executing thread has disabled hardware interrupts.

This priority level exists in all kernels.

@end enumerate

@ftable @command

@item spl0(9)
Set priority level 0.

@item spl1(9)
Set priority level 1.

@item spl2(9)
Set priority level 2.

@item spl3(9)
Set priority level 3.

@item spl4(9)
Set priority level 4.

@item spl5(9)
Set priority level 5.

@item spl6(9)
Set priority level 6.

@item spl7(9)
Set priority level 7.

@item spl(9)
Set priority level.

@item splx(9)
Set priority level x.

@end ftable

@subsubsection Atomic Integers

@ftable @command

@item ATOMIC_INT_ADD(9)
Add an integer value to an atomic integer.

@item ATOMIC_INT_ALLOC(9)
Allocate and initialize an atomic integer.

@item ATOMIC_INT_DEALLOC(9)
Deallocate an atomic integer.

@item ATOMIC_INT_DECR(9)
Decrement and test an atomic integer.

@item ATOMIC_INT_INCR(9)
Increment an atomic integer.

@item ATOMIC_INT_INIT(9)
Initialize an atomic integer.

@item ATOMIC_INT_READ(9)
Read an atomic integer.

@item ATOMIC_INT_SUB(9)
Subtract and integer value from an atomic integer.

@item ATOMIC_INT_WRITE(9)
Write an integer value to an atomic integer.

@end ftable

@subsubsection Basic Locks

@ftable @command

@item LOCK(9)
Lock a basic lock.

@item LOCK_ALLOC(9)
Allocate a basic lock.

@item LOCK_DEALLOC(9)
Deallocate a basic lock.

@item LOCK_OWNED(9)
Determine whether a basic lock is head by the caller.

@item TRYLOCK(9)
Try to lock a basic lock.

@item UNLOCK(9)
Unlock a basic lock.

@end ftable

@subsubsection STREAMS Locks

@ftable @command

@item MPSTR_QLOCK(9)
Release a queue from exclusive access.

@item MPSTR_QRELE(9)
Acquire a queue for exclusive access.

@item MPSTR_STPLOCK(9)
Acquire a stream head for exclusive access.

@item MPSTR_STPRELE(9)
Release a stream head from exclusive access.

@end ftable

@subsubsection Read/Write Locks

@ftable @command

@item RW_ALLOC(9)
Allocate and initialize a read/write lock.

@item RW_DEALLOC(9)
Deallocate a read/write lock.

@item RW_RDLOCK(9)
Acquire a read/write lock in read mode.

@item RW_TRYRDLOCK(9)
Attempt to acquire a read/write lock in read mode.

@item RW_TRYWRLOCK(9)
Attempt to acquire a read/write lock in write mode.

@item RW_UNLOCK(9)
Release a read/write lock.

@item RW_WRLOCK(9)
Acquire a read/write lock in write mode.

@end ftable

@subsubsection Sleep Locks

@ftable @command

@item SLEEP_ALLOC(9)
Allocate a sleep lock.

@item SLEEP_DEALLOC(9)
Deallocate a sleep lock.

@item SLEEP_LOCK(9)
Acquire a sleep lock.

@item SLEEP_LOCKAVAIL(9)
Determine whether a sleep lock is available.

@item SLEEP_LOCKOWNED(9)
Determine whether a sleep lock is held by the caller.

@item SLEEP_LOCK_SIG(9)
Acquire a sleep lock.

@item SLEEP_TRYLOCK(9)
Attempt to acquire a sleep lock.

@item SLEEP_UNLOCK(9)
Release a sleep lock.

@end ftable

@subsubsection Synchronization Variables

@ftable @command

@item SV_ALLOC(9)
Allocate a basic condition variable.

@item SV_BROADCAST(9)
Broadcast a basic condition variable.

@item SV_DEALLOC(9)
Deallocate a basic condition variable.

@item SV_SIGNAL(9)
Signal a basic condition variable.

@item SV_WAIT(9)
Wait on a basic condition variable.

@item SV_WAIT_SIG(9)
Interruptible wait on a basic condition variable.

@end ftable

@subsubsection Resource Allocation

@ftable @command

@end ftable

@subsubsection Device Numbering

@ftable @command

@item major(9)
Get the internal major number of a device.

@item makedev(9)
Make a device number from internal major and minor device numbers.

@item minor(9)
Get the internal minor number of a device.

@end ftable

@node Configuration ala SVR 4.2 MP
@subsection Configuration ala SVR 4.2 MP
@cindex configuration, SVR 4.2 MP
@cindex SVR 4.2 MP, configuration
@cindex SVR 4.2 MP


@page
@node AIX Portability
@section Porting from AIX 5L Version 5.1
@cindex porting, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, portability
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@menu
* Differences from AIX 5L Version 5.1::
* Commonalities with AIX 5L Version 5.1::
* Compatibility Functions for AIX 5L Version 5.1::
* Configuration ala AIX 5L Version 5.1::
@end menu

@node Differences from AIX 5L Version 5.1
@subsection Differences from AIX 5L Version 5.1
@cindex differences, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, differences
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@node Commonalities with AIX 5L Version 5.1
@subsection Commonalities with AIX 5L Version 5.1
@cindex commonalities, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, commonalities
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@node Compatibility Functions for AIX 5L Version 5.1
@subsection Compatibility Functions for AIX 5L Version 5.1
@cindex compatibility functions, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, compatibility functions
@cindex AIX 5L Version 5.1
@cindex AIX PSE

@subsubsection Core Extensions

@ftable @command

@item putctl2(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.
@b{putctl2}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item splstr(9)
Set or restore priority levels.
@b{splstr}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item splx(9)
Set or restore priority levels.
@b{splx}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item weldq(9)
Weld together two pairs of @cite{STREAMS} message queues.
@b{weldq}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item unweldq(9)
Unweld two pairs of @cite{STREAMS} message queues.
@b{unweldq}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@end ftable

@subsubsection Common Module Utilities

@ftable @command

@item mi_bufcall(9)
Reliable alternative to @b{buffcall}(9).

@item mi_close_comm(9)
@cite{STREAMS} common minor device close utility.

@item mi_next_ptr(9)
@cite{STREAMS} minor device list traversal.

@item mi_open_comm(9)
@cite{STREAMS} common minor device open utility.

@item mi_prev_ptr(9)
@cite{STREAMS} minor device list traversal.

@end ftable

@subsubsection Registration

@ftable @command

@item str_install(9)
Install a @cite{STREAMS} module or driver.

@end ftable

@subsubsection Message Filtering

@ftable @command

@item wantio(9)
Perform direct I/O from a @cite{STREAMS} driver.

@item wantmsg(9)
Provide a filter of wanted messages from a @cite{STREAMS} module.

@end ftable

@node Configuration ala AIX 5L Version 5.1
@subsection Configuration ala AIX 5L Version 5.1
@cindex configuration, AIX 5L Version 5.1
@cindex AIX 5L Version 5.1, configuration
@cindex AIX PSE


@page
@node HP-UX Portability
@section Porting from HP-UX 11.0i v2
@cindex porting, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, portability
@cindex HP-UX 11.0i v2
@cindex HP-UX

@menu
* Differences from HP-UX 11.0i v2::
* Commonalities with HP-UX 11.0i v2::
* Compatibility Functions for HP-UX 11.0i v2::
* Configuration ala HP-UX 11.0i v2::
@end menu

@node Differences from HP-UX 11.0i v2
@subsection Differences from HP-UX 11.0i v2
@cindex differences, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, differences
@cindex HP-UX 11.0i v2
@cindex HP-UX

@node Commonalities with HP-UX 11.0i v2
@subsection Commonalities with HP-UX 11.0i v2
@cindex commonalities, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, commonalities
@cindex HP-UX 11.0i v2
@cindex HP-UX

@node Compatibility Functions for HP-UX 11.0i v2
@subsection Compatibility Functions for HP-UX 11.0i v2
@cindex compatibility functions, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, compatibility functions
@cindex HP-UX 11.0i v2
@cindex HP-UX

@subsubsection Core Extensions

@ftable @command

@item streams_put(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@b{streams_put}(9) is implemented using @b{put}(9).
@b{put}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item putctl2(9)
Put a 2 byte control message on a @cite{STREAMS} message queue.

@b{putctl2}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item putnextctl2(9)
Put a 2 byte control message on the downstream @cite{STREAMS} message queue.

@b{putnextctl2}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item unweldq(9)
Unweld two pairs of streams queues.

@b{unweldq}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@item weldq(9)
Weld together two pairs of streams queues.

@b{weldq}(9) is a @dfn{@value{PACKAGE_TITLE}} core function.

@end ftable

@subsubsection Registration

@ftable @command

@item str_install(9)
Install a @cite{STREAMS} module or driver.

@item str_uninstall(9)
Uninstall a @cite{STREAMS} module or driver.

@end ftable

@subsubsection Sleeping

@ftable @command

@item streams_get_sleep_lock(9)
Provide access to the global sleep lock.

@end ftable

@node Configuration ala HP-UX 11.0i v2
@subsection Configuration ala HP-UX 11.0i v2
@cindex configuration, HP-UX 11.0i v2
@cindex HP-UX 11.0i v2, configuration
@cindex HP-UX 11.0i v2
@cindex HP-UX


@page
@node OSF/1 Portability
@section Porting from OSF/1 1.2/Digital UNIX
@cindex porting, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, portability
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@menu
* Differences from OSF/1 1.2/Digital UNIX::
* Commonalities with OSF/1 1.2/Digital UNIX::
* Compatibility Functions for OSF/1 1.2/Digital UNIX::
* Configuration ala OSF/1 1.2/Digital UNIX::
@end menu

@node Differences from OSF/1 1.2/Digital UNIX
@subsection Differences from OSF/1 1.2/Digital UNIX
@cindex differences, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, differences
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@node Commonalities with OSF/1 1.2/Digital UNIX
@subsection Commonalities with OSF/1 1.2/Digital UNIX
@cindex commonalities, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, commonalities
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@node Compatibility Functions for OSF/1 1.2/Digital UNIX
@subsection Compatibility Functions for OSF/1 1.2/Digital UNIX
@cindex compatibility functions, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, compatibility functions
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1

@subsubsection Core Extensions

@ftable @command

@item lbolt(9)
Time in ticks since reboot

@b{lbolt}(9) is a  @dfn{@value{PACKAGE_TITLE}} core function.

@item puthere(9)
Invoke the put procedure for a @cite{STREAMS} module or driver with a @cite{STREAMS} message.

@b{puthere}(9) is implemented using @b{put}(9).
@b{put}(9) is a  @dfn{@value{PACKAGE_TITLE}} core function.

@item weldq(9)
Weld together two pairs of streams queues.

@b{weldq}(9) is a  @dfn{@value{PACKAGE_TITLE}} core function.

@item unweldq(9)
Unweld two pairs of streams queues.

@b{unweldq}(9) is a  @dfn{@value{PACKAGE_TITLE}} core function.

@end ftable

@subsubsection Common Module Utilities

@ftable @command

@item streams_close_comm(9)
Common minor device close utility.

@item streams_open_comm(9)
Common minor device open utility.

@item streams_open_ocomm(9)
Common minor device open utility.

@end ftable

@subsubsection Registration

@ftable @command

@item strmod_add(9)
Add a @cite{STREAMS} module.

@item strmod_del(9)
Delete a @cite{STREAMS} module or driver from the kernel.

@end ftable

@subsubsection Others

@ftable @command

@item time(9)
(undoc).

@end ftable

@node Configuration ala OSF/1 1.2/Digital UNIX
@subsection Configuration ala OSF/1 1.2/Digital UNIX
@cindex configuration, OSF/1 1.2/Digital UNIX
@cindex OSF/1 1.2/Digital UNIX, configuration
@cindex OSF/1 1.2/Digital UNIX
@cindex OSF/1


@page
@node UnixWare Portability
@section Porting from UnixWare 7.1.3 (OpenUnix 8)
@cindex porting, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), portability
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@menu
* Differences from UnixWare 7.1.3 (OpenUnix 8)::
* Commonalities with UnixWare 7.1.3 (OpenUnix 8)::
* Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)::
* Configuration ala UnixWare 7.1.3 (OpenUnix 8)::
@end menu

@node Differences from UnixWare 7.1.3 (OpenUnix 8)
@subsection Differences from UnixWare 7.1.3 (OpenUnix 8)
@cindex differences, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), differences
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@node Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@subsection Commonalities with UnixWare 7.1.3 (OpenUnix 8)
@cindex commonalities, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), commonalities
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

@cite{UnixWare} provides most of the core functions provide by @cite{@value{PACKAGE_TITLE}} along with
all of the compatibility functions provided by the @cite{SVR 4.2 MP} compatibility module.  In
addition the functions provided here in the @cite{UnixWare} compatibility module are provided.

@node Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@subsection Compatibility Functions for UnixWare 7.1.3 (OpenUnix 8)
@cindex compatibility functions, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), compatibility functions
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare

The following compatibility functions are in addition to all SVR 4.2
compatibility functions.

@subsubsection Device Numbering

Device numbering has evolved since @cite{UNIX Sytem V Release 3.0} and provides internal, external
and extended device numbering.  These functions are provided for backward compatibility with some
drivers that were written for the older system.  These are core functions in the @b{Linux
Fast-STREAMS} implementation.

@ftable @command

@item emajor(9)
Get the external (real) major device number from the device number.

@item eminor(9)
Get the external extended minor device number from the device number.

@item etoimajor(9)
Convert an external major device number to an internal major device number.

@item getemajor(9)
Get the external (real) major device number.

@item geteminor(9)
Get the external minor device number.

@item itoemajor(9)
Convert an internal major device number to an external major device number.

@end ftable

@subsubsection Memory Alignment

In attempting to unify several desparaging @cite{UNIX}-based systems (in particular @cite{XENIX} and
@cite{UnixWare}, it became necessary to sometimes address the alignment of data buffers.  Certainly
a better way to accomplish this would be to allocate data buffers using other allocators that
provide the required alignment and other buffer characteristics and then allocating a message and
data block with a call to @b{esballoc}(9).  Nevertheless, these functions were provided for making
message blocks, data blocks and data buffers meet specific physical requirements.

@dfn{@value{PACKAGE_TITLE}} provides these functions for compatibility, however, most of the physical
requirements provided are ignored.

@ftable @command

@item allocb_physreq(9)
Allocate a @cite{STREAMS} message and data block.

@item msgphysreq(9)
Cause a message block to meet physical requirements.

@item msgpullup_physreq(9)
Pull up bytes in a @cite{STREAMS} message.

@item msgscgth(9)
(undoc).

@end ftable

@subsubsection Direct @cite{STREAMS} Input-Output Controls

@ftable @command

@item strioccall(9)
(undoc).

@end ftable

@node Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@subsection Configuration ala UnixWare 7.1.3 (OpenUnix 8)
@cindex configuration, UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare 7.1.3 (OpenUnix 8), configuration
@cindex UnixWare 7.1.3 (OpenUnix 8)
@cindex UnixWare


@page
@node Solaris Portability
@section Porting from Solaris 9/SunOS 5.9
@cindex porting, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, portability
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@menu
* Differences from Solaris 9/SunOS 5.9::
* Commonalities with Solaris 9/SunOS 5.9::
* Compatibility Functions for Solaris 9/SunOS 5.9::
* Configuration ala Solaris 9/SunOS 5.9::
@end menu

@node Differences from Solaris 9/SunOS 5.9
@subsection Differences from Solaris 9/SunOS 5.9
@cindex differences, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, differences
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@node Commonalities with Solaris 9/SunOS 5.9
@subsection Commonalities with Solaris 9/SunOS 5.9
@cindex commonalities, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, commonalities
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@node Compatibility Functions for Solaris 9/SunOS 5.9
@subsection Compatibility Functions for Solaris 9/SunOS 5.9
@cindex compatibility functions, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, compatibility functions
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS

@subsubsection STREAMS Queue Referenced Callbacks

@ftable @command

@item qbufcall(9)
Install a @cite{STREAMS} buffer callback.

@item qunbufcall(9)
Cancel a @cite{STREAMS} buffer callback.

@item qtimeout(9)
Start a timer associated with a queue.

@item quntimeout(9)
Stop a timer associated with a queue.

@item qwait(9)
Wait for a queue message.

@item qwait_sig(9)
Wait for a queue message or signal.

@item queclass(9)
Return the class of a @cite{STREAMS} message.

@item qwriter(9)
@cite{STREAMS} mutex upgrade.

@end ftable

@subsubsection STREAMS Registration

@ftable @command

@item install_driver(9)
Install a device driver.

@item mod_info(9)
Provides information on a loadable kernel module to the @cite{STREAMS} executive.

@item mod_install(9)
Installs a loadable kernel module in the @cite{STREAMS} executive.

@item mod_remove(9)
Removes a loadable module from the @cite{STREAMS} executive.

@end ftable

@subsubsection DDI

@cite{Solaris} provides a wide array of Device Driver Interface functions available for use by device
drivers.  Many of these functions are useful for @cite{STREAMS} device and pseudo-device drivers and
modules.  Almost all of these functions, however, are @cite{Solaris}-specific and are completely
non-portable to other @cite{UNIX}-based operating systems.  To make matters worse for portability,
many of these functions have no @cite{SVR 4.2 MP} equivalents.

@ftable @command

@item ddi_create_minor_node(9)
Create a minor node for this device.

@item ddi_remove_minor_node(9)
Remove a minor node for a device.

@item ddi_driver_major(9)
Find the major device number associated with a driver.

@item ddi_getiminor(9)
Get the internal minor device number.

@item ddi_driver_name(9)
Return normalized driver name.

@item ddi_get_cred(9)
Get a reference to the credentials of the current user.

@item ddi_get_instance(9)
Get device instance number.

@item ddi_get_lbolt(9)
Get the current value of the system tick clock.

@item ddi_get_pid(9)
Get the process id of the current process.

@item ddi_get_time(9)
Get the current time in seconds since the epoch.

@item ddi_removing_power(9)

@item ddi_get_soft_state(9)

@item ddi_soft_state(9)

@item ddi_soft_state_fini(9)

@item ddi_soft_state_free(9)

@item ddi_soft_state_init(9)

@item ddi_soft_state_zalloc(9)

@item ddi_umem_alloc(9)
Allocate page aligned kernel memory.

@item ddi_umem_free(9)
Free page aligned kernel memory.

@end ftable

@subsubsection Loadable Module Interface

@ftable @command

@item _fini(9)

@item _info(9)

@item _init(9)

@item attach(9)
Attach a device to the system or resume a suspended device.

@item getinfo(9)

@item identify(9)
Determine if a driver is associated with a device.

@item detach(9)
Detach a device from the system or suspend a device.

@item power(9)
Power a device attached to the system.

@item probe(9)

@end ftable

@node Configuration ala Solaris 9/SunOS 5.9
@subsection Configuration ala Solaris 9/SunOS 5.9
@cindex configuration, Solaris 9/SunOS 5.9
@cindex Solaris 9/SunOS 5.9, configuration
@cindex Solaris 9/SunOS 5.9
@cindex Solaris
@cindex SunOS


@page
@node SUX Portability
@section Porting from Super/UX
@cindex porting, Super/UX
@cindex Super/UX, portability
@cindex Super/UX

@menu
* Differences from Super/UX::
* Commonalities with Super/UX::
* Compatibility Functions for Super/UX::
* Configuration ala Super/UX::
@end menu

@node Differences from Super/UX
@subsection Differences from Super/UX
@cindex differences, Super/UX
@cindex Super/UX, differences
@cindex Super/UX

@node Commonalities with Super/UX
@subsection Commonalities with Super/UX
@cindex commonalities, Super/UX
@cindex Super/UX, commonalities
@cindex Super/UX

@node Compatibility Functions for Super/UX
@subsection Compatibility Functions for Super/UX
@cindex compatibility functions, Super/UX
@cindex Super/UX, compatibilty functions
@cindex Super/UX

@ftable @command

@item lbolt(9)
time in ticks since reboot

@end ftable

@node Configuration ala Super/UX
@subsection Configuration ala Super/UX
@cindex configuration, Super/UX
@cindex Super/UX, configuration
@cindex Super/UX


@page
@node UXP Portability
@section Porting from UXP/V
@cindex porting, UXP/V
@cindex UXP/V, portability
@cindex UXP/V

@menu
* Differences from UXP/V::
* Commonalities with UXP/V::
* Compatibility Functions for UXP/V::
* Configuration ala UXP/V::
@end menu

@node Differences from UXP/V
@subsection Differences from UXP/V
@cindex differences, UXP/V
@cindex UXP/V, differences
@cindex UXP/V

@node Commonalities with UXP/V
@subsection Commonalities with UXP/V
@cindex commonalities, UXP/V
@cindex UXP/V, commonalities
@cindex UXP/V

@node Compatibility Functions for UXP/V
@subsection Compatibility Functions for UXP/V
@cindex compatibility functions, UXP/V
@cindex UXP/V, compatibility functions
@cindex UXP/V

@node Configuration ala UXP/V
@subsection Configuration ala UXP/V
@cindex configuration, UXP/V
@cindex UXP/V, configuration
@cindex UXP/V


@page
@node LiS Portability
@section Porting from LiS 2.18.1
@cindex porting, LiS 2.18.1
@cindex LiS 2.18.1, portability
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@menu
* Differences from LiS 2.18.1::
* Commonalities with LiS 2.18.1::
* Compatibility Functions for LiS 2.18.1::
* Configuration ala LiS 2.18.1::
@end menu

@node Differences from LiS 2.18.1
@subsection Differences from LiS 2.18.1
@cindex differences, LiS 2.18.1
@cindex LiS 2.18.1, differences
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@node Commonalities with LiS 2.18.1
@subsection Commonalities with LiS 2.18.1
@cindex commonalities, LiS 2.18.1
@cindex LiS 2.18.1, commonalities
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@node Compatibility Functions for LiS 2.18.1
@subsection Compatibility Functions for LiS 2.18.1
@cindex compatibility functions, LiS 2.18.1
@cindex LiS 2.18.1, compatibility functions
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@subsubsection Extensions

@ftable @command

@item lis_appq(9)
Append one @cite{STREAMS} message after another.

@item lis_date(9)

@item lis_esbbcall(9)
Install a buffer callback for an extended @cite{STREAMS} message block.

@item lis_find_strdev(9)

@item lis_OTHER(9)
Return the other queue of a @cite{STREAMS} queue pair..

This function is intended to accommodate a common miss-spelling of
@b{OTHERQ}(9).
@findex OTHERQ(9)

@item lis_version(9)

@item lis_xmsgsize(9)
Calculate the size of message blocks in a @cite{STREAMS} message.

@end ftable

@subsubsection Device Creation and Deletion

@ftable @command

@item lis_mknod(9)
Make block or character special files.

@item lis_unlink(9)
Remove a file.

@item lis_mount(9)
Mount a file system.

@item lis_umount2(9)
Unmount a file system.

@item lis_umount(9)
Unmount a file system.

@end ftable

@subsubsection Registration

@ftable @command

@item lis_register_strdev(9)
Register a @cite{STREAMS} device.

@item lis_register_strmod(9)
Register a @cite{STREAMS} module.

@item lis_unregister_strdev(9)
Unregister a @cite{STREAMS} device.

@item lis_unregsiter_strmod(9)
Unregister a @cite{STREAMS} module.

@end ftable

@node Configuration ala LiS 2.18.1
@subsection Configuration ala LiS 2.18.1
@cindex configuration, LiS 2.18.1
@cindex LiS 2.18.1, configuration
@cindex LiS 2.18.1
@cindex LiS
@cindex Linux STREAMS (LiS)

@ftable @command

@end ftable

@node Development
@section Developing Portable STREAMS Modules
@cindex developing portable streams modules

In the process of creating the @dfn{@value{PACKAGE_TITLE}} subsystem in such a way so as to facilitate
portability of @cite{STREAMS} drivers and modules from a wide range of @cite{UNIX} operating system
variants, a number of guidelines for the development of portable @cite{STREAMS} drivers and modules
have been developed.  These guidelines, when adhered to, will allow the resulting driver or module
to be ported to another @cite{STREAMS} implementation with minimal effort.  These portability
guidelines are collected here.

@menu
* Memory Allocation::
* Alignment of Message Buffers::
* Disabling and Enabling Queue Procedures::
* Freezing and Unfreezing Streams::
* Passing Messages from Interrupt Service Routines::
* Timeout Call Back and Link Identifiers::
* Synchronization with Timeouts and Callback Functions::
* Synchronization with Callout Functions::
* Synchronization of Drivers and Modules::
* Special STREAMS Message Types::
* Use of Message Allocation Priorities::
* Device Numbering::
* Registration and Deregistration::
@end menu

@node Memory Allocation
@subsection Memory Allocation

Portable @cite{STREAMS} modules and drivers will always allocate memory using the SVR4 memory
allocators/deallocators:
@iftex
@b{kmem_alloc}(9),
@end iftex
@ifnottex
@inforef{kmem_alloc(9), , *manpages*},
@end ifnottex
@iftex
@b{kmem_zalloc}(9)
@end iftex
@ifnottex
@inforef{kmem_zalloc(9), , *manpages*}
@end ifnottex
and
@iftex
@b{kmem_free}(9).
@end iftex
@ifnottex
@inforef{kmem_free(9), , *manpages*}.
@end ifnottex

Additional eligible allocators are:

@iftex
@b{rmallocmap}(9)
@end iftex
@ifnottex
@inforef{rmallocmap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfreemap}(9)
@end iftex
@ifnottex
@inforef{rmfreemap(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc}(9)
@end iftex
@ifnottex
@inforef{rmalloc(9), , *manpages*}
@end ifnottex
@iftex
@b{rmalloc_wait}(9)
@end iftex
@ifnottex
@inforef{rmalloc_wait(9), , *manpages*}
@end ifnottex
@iftex
@b{rmfree}(9)
@end iftex
@ifnottex
@inforef{rmfree(9), , *manpages*}
@end ifnottex
@iftex
@b{rminit}(9)
@end iftex
@ifnottex
@inforef{rminit(9), , *manpages*}
@end ifnottex
@iftex
@b{rmsetwant}(9)
@end iftex
@ifnottex
@inforef{rmsetwant(9), , *manpages*}
@end ifnottex
@iftex
@b{rmwanted}(9)
@end iftex
@ifnottex
@inforef{rmwanted(9), , *manpages*}
@end ifnottex

Unfortunately, these resource map allocators are not available on @cite{AIX}
@cindex AIX PSE
so, if portability to the @cite{AIX}
@cindex AIX PSE
is important, then do not use these allocators.

Additional eligible allocators are:

@iftex
@b{kmem_fast_alloc}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_alloc(9), , *manpages*}
@end ifnottex
@iftex
@b{kmem_fast_free}(9)
@end iftex
@ifnottex
@inforef{kmem_fast_free(9), , *manpages*}
@end ifnottex

@node Alignment of Message Buffers
@subsection Alignment of Message Buffers

@node Disabling and Enabling Queue Procedures
@subsection Disabling and Enabling Queue Procedures

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocson}(9)
@end iftex
@ifnottex
@inforef{qprocson(9), , *manpages*},
@end ifnottex
before returning from its queue open procedure (see
@iftex
@b{qopen}(9)).
@end iftex
@ifnottex
@inforef{qopen(9), , *manpages*}.)
@end ifnottex

Portable @cite{STREAMS} modules and drivers will always call
@iftex
@b{qprocsoff}(9)
@end iftex
@ifnottex
@inforef{qprocsoff(9), , *manpages*},
@end ifnottex
upon entering its queue close procedure (see
@iftex
@b{qclose}(9)).
@end iftex
@ifnottex
@inforef{qclose(9), , *manpages*}.)
@end ifnottex

@node Freezing and Unfreezing Streams
@subsection Freezing and Unfreezing Streams

@node Passing Messages from Interrupt Service Routines
@subsection Passing Messages from Interrupt Service Routines

@node Timeout Call Back and Link Identifiers
@subsection Timeout Call Back and Link Identifiers

Although buffer callbacks identifiers (see
@iftex
@b{bufcall}(9)),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*}),
@end ifnottex
timeout identifiers (see
@iftex
@b{timeout}(9)),
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}),
@end ifnottex
and multiplexing driver link identifiers (see
@var{I_LINK} and @var{I_PLINK} under
@vindex I_LINK
@vindex I_PLINK
@iftex
@b{streamio}(2)),
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}),
@end ifnottex
are often illustrated as small integer numbers, with some @cite{STREAMS} implementations, including
@dfn{@value{PACKAGE_TITLE}}, these identifiers are kernel addresses (pointers) and are never small
integer values like 1, 2, or 3.

Also, there is no guarantee that the identifier will be positive.  It is guaranteed that the
returned identifier will not be zero (0).  Zero is used by these function as a return value to
indicate an error.

Portable @cite{STREAMS} drivers and modules will not depend upon the returned identifier from 
@iftex
@b{bufcall}(9),
@end iftex
@ifnottex
@inforef{bufcall(9), , *manpages*},
@end ifnottex
@iftex
@b{timeout}(9)
@end iftex
@ifnottex
@inforef{timeout(9), , *manpages*}
@end ifnottex
or
@iftex
@b{streamio}(2)
@end iftex
@ifnottex
@inforef{streamio(2), , *manpages*}
@end ifnottex
as being any specific range of value.  Portable drivers and modules will save any returned
identifiers in data types that will not loose the precision of the identifier.

@node Synchronization with Timeouts and Callback Functions
@subsection Synchronization with Timeouts and Callback Functions

@node Synchronization with Callout Functions
@subsection Synchronization with Callout Functions

@node Synchronization of Drivers and Modules
@subsection Synchronization of Drivers and Modules

@node Special STREAMS Message Types
@subsection Special @cite{STREAMS} Message Types

@node Use of Message Allocation Priorities
@subsection Use of Message Allocation Priorities

@node Registration and Deregistration
@subsection Registration and Deregistration

@node Device Numbering
@subsection Device Numbering

@subsubheading UNIX Device Numbering

@quotation
In versions of @cite{UNIX System V} previous to @cite{Release 4}, the major and minor device numbers
were each 8 bit, and they were packed into a 16 bit word (usually a C Language @var{short}
variable).  Under @cite{UNIX System V Release 4}, the device numbers are held in a @samp{dev_t}
@tpindex dev_t
variable, which is often implemented as a 32 bit integer.  The minor device number is held as 14
bits, and a further 8 bits are used for the major device number.  @samp{dev_t}
@tpindex dev_t
is ofter referred to as the "expanded device type", since it allows many more minor devices than
before.

Many drivers were written for earlier releases, an may eventually be ported to @cite{UNIX System V
Release 4}.  In earlier releases, some manufacturers got around the 256 minor device number limit by
using multiple major device numbers for a device.  Devices were created with different major device
numbers (the external major device number) but they all mapped to the same device driver entry in
the device switch tables (the internal device number).  Even under this scheme, each major device
could only support 256 minor devices, but the driver could support many more.  This has been
recognized in @cite{UNIX System V Release 4}, and functions are provided to do this mapping; for
example, the function @command{etoimajor}() and so on, give a machine independent interface to the
device number mapping.@footnote{@cite{The Magic Garden Explained}}
@end quotation

@subsubheading Linux Device Numbering

Versions of the @b{Linux} kernel in the 2.4 kernel series and prior to 2.6 also provided an 8 bit
major device number and an 8 bit minor device number grouped into a 16-bit combined device number.
Linux 2.6 kernels (and some patched 2.4 kernels) now have larger device numbers.  These extended
device numbers are 12 bits for major device number and 20 bits for minor device number, with 32 bits
for the combined device number.

@subsubheading LiS Device Numbering
@cindex Linux STREAMS (LiS)

@cite{LiS}
@cindex Linux STREAMS (LiS)
prior to the 2.18.0 release was incapable of providing an internal representation of the device
number and the number of minor device numbers for a device driver was restricted to
256.@footnote{Actually, 255 as the kernel reserved minor device number 255 for expansion.}  Many
@url{http://www.openss7.org/, OpenSS7} device drivers written for @cite{LiS}
@cindex Linux STREAMS (LiS)
would allocate additional major device numbers if required.  Good examples of devices that require
more than 255 minor device numbers are INET clone devices, SCTP streams, SS7 signalling link
streams, MG media channels, etc.  These streams are often @var{I_PLINK}ed
@vindex I_PLINK
under a multiplexing driver and do not even consume a system file descriptor.

@subsubheading @value{PACKAGE_TITLE} Device Numbering

@dfn{@value{PACKAGE_TITLE}} began with extended device numbering.  The @file{specfs} shadow special
character device file system used by @dfn{@value{PACKAGE_TITLE}} uses the @samp{inode} number to hold the
@samp{dev_t}
@tpindex dev_t
device number instead of the @samp{inode->i_rdev}, which on older kernels is only a 16-bit
@var{short}.

In earlier versions of @dfn{@value{PACKAGE_TITLE}}, the internal device numbering is 16-bits for major
device number and 16-bits for minor device number.  This will soon be changed to 12-bits for major
device number and 20-bits for minor device number to accommodate the newer @b{Linux} scheme.

On 2.6 @b{Linux} kernels that support the newer extended device numbers, external device numbers and
internal device numbers will be the same.  On 2.4 @b{Linux} kernels with the older 16-bit device
numbers, external device number and internal device numbers will differ.  In some situations, an
internal device number can exists with no corresponding external device number (accessed only via a
clone device or direct access to the mounted @file{specfs} shadow special character device
file system).

@ftable @command

@item etoimajor(9)
change external to internal major device number

@item getemajor(9)
get external major device number

@item geteminor(9)
get external minor device number

@item itoemajor(9)
change internal to external major device number

@end ftable



@node Copying
@appendix Copying
@include texi/gpl.texi

@node Documentation License
@appendix Documentation License
@include texi/fdl.texi

@page
@node Indices
@unnumbered Indices
@menu
* Concept Index::		Index of Concepts
* Type Index::			Index of Data Types
* Function Index::		Index of Functions and Macros
* Variable Index::		Index of Variables and Constants
* File Index::			Index of Files and Programs
@end menu

@page
@node Concept Index
@unnumberedsec Concept Index
@printindex cp

@page
@node Type Index
@unnumberedsec Type Index
@printindex tp

@page
@node Function Index
@unnumberedsec Function and Macro Index
@printindex fn

@page
@node Variable Index
@unnumberedsec Variable and Constant Macro Index
@printindex vr

@page
@node File Index
@unnumberedsec Program and File Index
@printindex pg

@page
@shortcontents
@page
@contents
@bye

