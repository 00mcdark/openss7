% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
% =========================================================================
%
% @(#) $Id$
%
% =========================================================================
%
% Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
% Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
% Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date$ by $Author$
%
% =========================================================================

\input texinfo
@setfilename npi.info
@include texi/args.texi
@set MANUAL_TITLE Network Link Provider Interface
@set MANUAL_TYPE Specification
@settitle @value{MANUAL_TITLE}

@dircategory OpenGroup
@direntry
* NPI: (npi).                   Network Provider Interface Specification
@end direntry

@include texi/args.texi
@set MANUAL_TITLE Network Link Provider Interface
@set MANUAL_TYPE Specification

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file documents the X/Open Network Provider Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
published by @uref{http://www.openss7.com/,OpenSS7 Corporation}.
This specification was originally published by UNIX International OSI Work Group
in Revision: 2.0.0 (1992/08/17).

Copyright @copyright{} 2008-2009  @uref{http://www.monavacon.com/, Monavacon Limited} @*
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2001  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
Copyright @copyright{} 1992       UNIX International, Inc.

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual provided the copyright
notice and this permission notice are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the results, provided the printed
document carries copying permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
Permission to use, copy, modify, and distribute this documentation for any purpose and without fee
is hereby granted, provided that the above copyright notice appears in all copies and that both that
copyright notice and this permission notice appear in supporting documentation, and that the name
UNIX International not be used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission. UNIX International makes no representations
about the suitability of this documentation for any purpose. It is provided ``as is'' without
express or implied warranty.

Permission is granted to copy and distribute modified versions of this manual under the conditions
for verbatim copying, provided the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual into another language,
under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Network Provider Interface
@set MANUAL_TYPE Specification

@set PART Network
@set LONG Network Provider
@set SHORT NS
@set INTERFACE NPI

@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle UNIX International
@subtitle OSI Work Group
@subtitle Revision: 2.0.0
@subtitle August 17, 1992
@sp 0.2
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2008-2009  Monavacon Limited
@subtitle Copyright @copyright{} 2001-2008  OpenSS7 Corporation
@subtitle Copyright @copyright{} 1992 UNIX International, Inc.
@subtitle All Rights Reserved.
@sp 4
@quotation
@subheading Abstract
This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7. It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the
network interface to these components as well as providing a basis for network control for other
network protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll

@subsubheading Published by:

@center UNIX International
@center Waterview Corporate Center
@center 20 Waterview Boulevard
@center Parsippany, NJ 07054
@sp 1
@center for further information, contact:
@center Vice President of Marketing
@sp 1
@center Phone: +1 201-263-8400
@center Fax: +1 201-263-8401
@sp 1

@ignore
@subsubheading International Offices:

@multitable @columnfractions .33 .33 .34
@item

@noindent
UNIX International @*
Asian/Pacific Office @*
Shinei Bldg. 1F @*
Kameido @*
Koto-ku, Tokyo 136 @*
Japan

@noindent
Phone: (81) 3-3636-1122 @*
Fax: (81) 3-3636-1121

@tab

@noindent
UNIX International @*
Australian Office @*
22/74 - 76 Monarch St. @*
Cremorne, NSW 2090 @*
Australia

@noindent
Phone: (61) 2-953-7838 @*
Fax: (61) 2 953-3542

@tab

@noindent
UNIX International @*
Pacific Basin Office @*
Cintech II @*
75 Science Park Drive @*
Singapore Science Park @*
Singapore 0511 @*
Singapore

@noindent
Phone: (32) 2-672-3700 @*
Fax: (32) 2-672-4415

@end multitable

@multitable @columnfractions .5 .5
@item

@noindent
UNIX International @*
European Office @*
25, Avenue de Beaulieu @*
1160 Brussels @*
Belgium

@noindent
Phone: (65) 776-0313 @*
Fax: (65) 776-0421

@tab

@noindent
@ 

@end multitable
@end ignore

@noindent
Copyright @copyright{} 2008-2009  @uref{http://www.monavacon.com/, Monavacon Limited} @*
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2001  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
Copyright @copyright{} 1992       UNIX International, Inc. @*

@noindent
All Rights Reserved.

@noindent
Permission is granted to make and distribute verbatim copies of this manual provided the copyright
notice and this permission notice are preserved on all copies.

@noindent
Permission to use, copy, modify, and distribute this documentation for any purpose and without fee
is hereby granted, provided that the above copyright notice appears in all copies and that both that
copyright notice and this permission notice appear in supporting documentation, and that the name
UNIX International not be used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission. UNIX International makes no representations
about the suitability of this documentation for any purpose. It is provided ``as is'' without
express or implied warranty.

@noindent
@b{UNIX INTERNATIONAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS DOCUMENTATION, INCLUDING ALL
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL UNIX INTERNATIONAL BE LIABLE
FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS DOCUMENTATION.}

@subsubheading Notice:

@noindent
This document is based on the UNIX System Laboratories Network Provider Interface (NPI)
specification which was used with permission by the UNIX International OSI Work Group (UI OSIWG).
Participation in the UI OSIWG is open to UNIX International members and other interested parties.
For further information contact UNIX International at the addresses above.

@noindent
UNIX International is making this documentation available as a reference point for the industry.
While UNIX International believes that these interfaces are well defined in this release of the
document, minor changes may be made prior to products conforming to the interfaces being made
available from UNIX System Laboratories or UNIX International members.

@subsubheading Trademarks:

@noindent
UNIX@registeredsymbol{} is a registered trademark of UNIX System Laboratories in
the United States and other countries.
X/Open(TM) is a trademark of the X/Open Company Ltd. in the UK and other
countries.
OpenSS7(TM) is a trademark of OpenSS7 Corporation in the United States and other
countries.

@page
@vskip 0pt plus 1filll

@subsubheading Published by:

@sp 1

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Copyright @copyright{} 2008-2009  @uref{http://www.monavacon.com/, Monavacon Limited} @*
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*
All Rights Reserved.

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@ignore
@noindent
This software and related documentation is protected by copyright and distributed under licenses
restricting its use, copying, distribution and decompilation.  No part of this software or related
documentation may be reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect
this information and keep it confidential, and will not disclose the information contained in this
document without the written permission of its owner.

@noindent
Monavacon Limited and OpenSS7 Corporation reserve the right to revise this software and
documentation for any reason, including but not limited to, conformity with standards promulgated by
various agencies, utilization of advances in the state of the technical arts, or the reflection of
changes in the design of any techniques, or procedures embodied, described, or referred to herein.
Monavacon Limited and OpenSS7 Corporation are under no obligation to provide any feature listed
herein.
@end ignore

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of Monavacon Limited and OpenSS7
Corporation not be used in advertising or publicity pertaining to distribution of this documentation
or its contents without specific, written prior permission.  Monavacon Limited and OpenSS7
Corporation make no representation about the suitability of this documentation for any purpose.  It
is provided ``as is'' without express or implied warranty.

@subsubheading Notice:

@noindent
@b{Monavacon Limited and OpenSS7 Corporation disclaim all warranties with regard to this
documentation including all implied warranties of merchantability, fitness for a particular purpose,
non-infringement, or title; that the contents of the document are suitable for any purpose, or that
the implementation of such contents will not infringe on any third party patents, copyrights,
trademarks or other rights.  In no event shall Monavacon Limited or OpenSS7 Corporation be liable
for any direct, indirect, special or consequential damages or any damages whatsoever resulting from
loss of use, data or profits, whether in an action of contract, negligence or other tortious action,
arising out of or in connection with any use of this document or the performance or implementation
of the contents thereof.}

@sp 1

@noindent
Monavacon Limited and OpenSS7 Corporation reserve the right to revise this software and
documentation for any reason, including but not limited to, conformity with standards promulgated by
various agencies, utilization of advances in the state of the technical arts, or the reflection of
changes in the design of any techniques, or procedures embodied, described, or referred to herein.
Monavacon Limited and OpenSS7 Corporation are under no obligation to provide any feature listed
herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of primitive error values
@defcodeindex pe
@c Define an index of protocol states
@defcodeindex st
@c Define an index of input-output controls
@defcodeindex ct
@c Define an index of manual pages.
@defcodeindex mp
@c Define an index of MIB objects.
@defcodeindex mo

@c frags out automake
@c @ifnottex
@c @c concatenate indices for text, html and info
@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex pe cp
@syncodeindex st cp
@syncodeindex mp cp
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex ct cp
@syncodeindex mo cp
@c @end ifnottex

@include texi/macros.texi
@include texi/versions.texi

@iftex

@macro prim{name}
@code{\name\}@prindex \name\
@end macro

@macro pval{name}
@code{\name\}@pvindex \name\
@end macro

@macro perr{name}
@code{[\name\]}@peindex \name\
@end macro

@macro psta{name}
@code{\name\}@stindex \name\
@end macro

@macro parm{name}
@var{\name\}@vrindex \name\
@end macro

@macro pioc{name}
@code{\name\}@ctindex \name\
@end macro

@macro mobj{name}
@code{\name\}@moindex \name\
@end macro

@end iftex

@ifnottex
@c skip deep indexing for plain text, html and info
@c it messes up column with maximums (texinfo bug)

@macro prim{name}
@code{\name\}
@end macro

@macro pval{name}
@code{\name\}
@end macro

@macro perr{name}
@code{[\name\]}
@end macro

@macro psta{name}
@code{\name\}
@end macro

@macro parm{name}
@var{\name\}
@end macro

@macro pioc{name}
@code{\name\}
@end macro

@macro mobj{name}
@code{\name\}
@end macro

@end ifnottex

@ifnottex
@node Top
@top Network Provider Interface
@end ifnottex

@menu
* Introduction::
* The Network Layer::
* @value{INTERFACE} Services Definition::
* @value{INTERFACE} Primitives::
* Diagnostics Requirements::
* Addendum for OSI Conformance::
* Mapping @value{INTERFACE} to ISO 8348 and CCITT X.213::
* State/Event Tables::
* Primitive Precedence Tables::
* @value{INTERFACE} Header File Listing::
* Glossary::
* Acronyms::
* References::
* Index::
@end menu

@iftex
@c insert list of figures and tables for printed manuals
@page
@heading List of Figures
@listoffloats Figure
@page
@heading List of Tables
@listoffloats Table
@end iftex

@node Introduction
@chapter Introduction

This document specifies a @cite{STREAMS}-based kernel-level instantiation of the ISO/CCITT network
service definition.  The Network Provider Interface (NPI) enables the user of a network layer
service to access and use any of a variety of conforming network layer service providers without
specific knowledge of the provider's protocol.  The service interface is designed to support any
connection-mode network protocol and connectionless network protocol.  This interface only specifies
access to network layer service providers, and does not address issues concerning network layer
management,protocol performance, and performance analysis tools.

The specification assumes that the reader is familiar with the OSI reference model terminology,
ISO/CCITT Network Layer Service, and @cite{STREAMS}.

@section Related Documentation

@itemize ---

@item 1986 CCITT X.213 Recommendation (@pxref{X.213,,X.213})

@item ISO 8348 (@pxref{ISO8348,,ISO8348})

@item ISO 8348/AD1 (@pxref{ISO8348/AD1,,ISO8348/AD1})

@item ISO 8473 (@pxref{ISO8473,,ISO8473})

@item ISO 8208 (@pxref{ISO8208,,ISO8208})

@item ISO 8878 (@pxref{ISO8878,,ISO8878})

@item System V Interface Definition, Issue 2 - Volume 3 (@pxref{SVID,,SVID})

@end itemize

@subsection Role

This document specifies an interface that supports the service provided by the Network Services
Definition for Open Systems Interconnection for CCITT Applications as described in CCITT
Recommendation X.213 (@pxref{X.213,,X.213}) and ISO 8348 (for CONS) (@pxref{ISO8348,,ISO8348}) and
ISO8348/Addendum 1 (for CLNS) (@pxref{ISO8348/AD1,,ISO8348/AD1}).  These specifications are targeted
for use by) and ISO 8348 (for CONS) (@pxref{ISO8348,,ISO8348}) and ISO8348/Addendum 1 (for CLNS)
(@pxref{ISO8348/AD1,,ISO8348/AD1}).  These specifications are targeted for use by developers and
testers of protocol modules that require network layer service.

@page
@section Definitions, Acronyms, and Abbreviations

@table @dfn

@item Calling NS user
@cpindex Calling NS user
An NS user that initiates a Network Connection (NC).

@item Called NS User
@cpindex Called NS User
An NS user with whom a calling NS user wishes to establish a network connection
(NC).

@item CLNP
@cpindex CLNP
Connection-less Network Protocol

@item CLNS
@cpindex CLNS
Connection-less Network Service

@item CONP
@cpindex CONP
Connection Oriented Network Protocol

@item CONS
@cpindex CONS
Connection Oriented Network Service

@item DLSAP
@cpindex DLSAP
Data Link Service Access Point

@item ISO
@cpindex ISO
International Organization for Standardization

@item NC
@cpindex NC
Network Connection

@item Network User
@cpindex Network User
Kernel level protocol or user level application that is accessing the services
of the network layer.

@item Network Provider
@cpindex Network Provider
Network layer entity/entities that provide/s the services of the network
interface.

@item NPI
@cpindex NPI
Network Provider Interface

@item NS
@cpindex NS
Network Service

@item NIDU
@cpindex NIDU
Network Interface Data Unit

@item NSAP
@cpindex NSAP
Network Service Access Point

@item NSDU
@cpindex NSDU
Network Service Data Unit

@item OSI
@cpindex OSI
Open Systems Interconnection

@item QOS
@cpindex QOS
Quality of Service

@item STREAMS
@cpindex STREAMS
A communication services development facility first available with
@cite{UNIX@registeredsymbol{} System V Release 3}

@end table

@node The Network Layer
@chapter The Network Layer

@ifnotinfo
@menu
* Model of the @value{INTERFACE}::
* @value{INTERFACE} Services::
@end menu
@end ifnotinfo

The Network Layer provides the means to manage the operation of the network.  It is responsible for
the routing and management of data exchange between network-user entities.

@node Model of the @value{INTERFACE}
@section Model of the @value{INTERFACE}

The @value{INTERFACE} defines the services provided by the network layer to the network-user at the boundary
between the network layer and the network layer user entity.  The interface consists of a set of
primitives defined as @cite{STREAMS} messages that provide access to the network layer services, and
are transferred between the NS user entity and the NS provider.  These primitives are of two types;
ones that originate from the NS user, and others that originate from the NS provider.  The
primitives that originate from the NS user make requests to the NS provider, or respond to an event
of the NS provider.  The primitives that originate from the NS provider are either confirmations of
a request or are indications to the NS user that the event has occurred.  @figref{1} shows the model
of the @value{INTERFACE}.

@figuresized{npi_fig1,1,Model of the @value{INTERFACE},4in}

The @value{INTERFACE} allows the @value{SHORT} provider to be configured with any @value{SHORT} user
(such as the OSI Transport Layer) that also conforms to the @value{INTERFACE}.  A network layer user
can also be a user program that conforms to the @value{INTERFACE} and accesses the @value{SHORT}
provider via @manref{putmsg(2s)} and @manref{getmsg(2s)} system calls.

@node @value{INTERFACE} Services
@section @value{INTERFACE} Services

@ifnotinfo
@menu
* CONS::
* CLNS::
* Local Management::
@end menu
@end ifnotinfo

The features of the @value{INTERFACE} are defined in terms of the services provided by the NS
provider, and the individual primitives that may flow between the NS user and the NS provider.

The services supported by the @value{INTERFACE} are based on two distinct modes of communication,
connection (CONS) and connectionless (CLNS).  In addition, the @value{INTERFACE} supports services
for local management.

@node CONS
@subsection CONS

The main features of the connection mode communication are:

@enumerate a

@item It is virtual circuit oriented;

@item It provides transfer of data via a pre-established path;

@item It provides reliable data transfer.

@end enumerate

There are three phases to each instance of communication: Connection Establishment, Data Transfer;
and Connection Termination.  Units of data arrive at their destination in the same order as they
departed their source and the data is protected against duplication or loss of data units within
some specified quality of service.

@node CLNS
@subsection CLNS

The main features of the connectionless mode communication are:

@enumerate a

@item It is datagram oriented;

@item It provides transfer of data in self contained units;

@item There is no logical relationship between these units of data;

@item It is unreliable.

@end enumerate

Connectionless mode communication has no separate phases.  Each unit of data is transmitted from
source to destination independently, appropriate addressing information is included with each unit
of data.  As the units of data are transmitted independently from source to destination, there are,
in general, no guarantees of proper sequence and completeness of the data Stream.

@node Local Management
@subsection Local Management

The @value{INTERFACE} specifications also define a set of local management functions that apply to both CONS and
CLNS modes of communication.  These services have local significance only.

@tabref{1} and @tabref{2} summarizes the @value{INTERFACE} service primitives by their state and service.

@tabfig{npi_tab1,1,Service Primitives for Connection Mode Data Transfer}

@tabfig{npi_tab2,2,Service Primitives for Connectionless Mode Data Transfer}

@node @value{INTERFACE} Services Definition
@chapter @value{INTERFACE} Services Definition

@menu
* Local Management Services Definition::
* Connection-Mode Network Services Definition::
* Connectionless Network Services Definition::
@end menu

This section describes the services of the @value{INTERFACE} primitives.  Time-sequence diagrams
that illustrate the sequence of primitives are included.@footnote{Conventions for the time-sequence
diagrams are defined in CCITT X.210 (@pxref{X.210,,X.210}).) The format of the primitives will be defined later in
this document.}

@node Local Management Services Definition
@section Local Management Services Definition

@menu
* Network Information Reporting Service::
* NS User Bind Service::
* NS User Unbind Service::
* Receipt Acknowledgement Service::
* Options Management Service::
* Error Acknowledgement Service::
@end menu

The services defined in this section are outside the scope of the international standards.  These
services apply to both connection-mode as well as the connection-less modes of communication.  They
are invoked for the initialization/de-initialization of a Stream connected to the NS provider.  They
are also used to manage options supported by the NS provider and to report information on the
supported parameter values.

@node Network Information Reporting Service
@subsection Network Information Reporting Service

This service provides information on the options supported by the NS provider.

@itemize @bullet

@item @prim{N_INFO_REQ}: This primitive requests that the NS provider return the values of all the
supported protocol parameters.  This request may be invoked during any phase.

@item @prim{N_INFO_ACK}: This primitive is in response to the @prim{N_INFO_REQ} primitive and
returns the values of the supported protocol parameters to the NS user.

@end itemize

The sequence of primitives for network information management is shown in
@figref{2}.

@figuresized{npi_fig2,2,Sequence of Primitives; Network Information Reporting Service,4in}

@node NS User Bind Service
@subsection NS User Bind Service

This service allows a network address to be associated with a Stream.  It allows the NS user to
negotiate the number of connect indications that can remain unacknowledged for that NS user (a
connect indication is considered unacknowledged while it is awaiting a corresponding connect
response or disconnect request from the NS user).  This service also defines a mechanism that allows
a Stream (bound to a network address of the NS user) to be reserved to handle incoming calls only.
This Stream is referred to as the listener Stream.

@itemize @bullet

@item @prim{N_BIND_REQ}: This primitive requests that the NS user be bound to a particular network
address, and negotiate the number of allowable outstanding connect indications for that address.

@item @prim{N_BIND_ACK}: This primitive is in response to the @prim{N_BIND_REQ} primitive and
indicates to the user that the specified NS user has been bound to a network address.

@end itemize

The sequence of primitives for NS user bind service is shown in @figref{3}.

@figuresized{npi_fig3,3,Sequence of Primitives; NS User Bind Service,4in}

@node NS User Unbind Service
@subsection NS User Unbind Service

This service allows the NS user to be unbound from a network address.

@itemize @bullet

@item @prim{N_UNBIND_REQ}: This primitive requests that the NS user be unbound
from the network address that it had previously been bound to.

@end itemize

The sequence of primitives for NS user unbind service is shown in @figref{4}.

@figuresized{npi_fig4,4,Sequence of Primitives; NS User Unbind & Receipt Acknowledgement,4in}

@node Receipt Acknowledgement Service
@subsection Receipt Acknowledgement Service

@itemize @bullet

@item @prim{N_OK_ACK}: This primitive indicates to the NS user that the previous
NS user originated primitive was received successfully by the NS provider.

@end itemize

An example showing the sequence of primitives for successful receipt
acknowledgement is depicted in @figref{4}.

@node Options Management Service
@subsection Options Management Service

This service allows the NS user to manage the QOS parameter values associated
with the NS provider.

@itemize @bullet

@item @prim{N_OPTMGMT_REQ}: This primitive allows the NS user to select default
values for QOS parameters within the range supported by the NS provider, and to
indicate the default selection of receipt confirmation.

@end itemize

@figref{5} shows the sequence of primitives for network options management.

@figuresized{npi_fig5,5,Sequence of Primitives; Options Management Service,4in}

@node Error Acknowledgement Service
@subsection Error Acknowledgement Service

@itemize @bullet

@item @prim{N_ERROR_ACK}: This primitive indicates to the NS user that a
non-fatal error has occurred in the last NS user originated request or response
primitive (listed in @figref{6}), on the Stream.

@end itemize

@figref{6} shows the sequence of primitives for the error management primitive.

@figuresized{npi_fig6,6,Sequence of Primitives; Error Acknowledgement Service,4in}

@page
@node Connection-Mode Network Services Definition
@section Connection-Mode Network Services Definition

@menu
* Connection Establishment Phase::
* Data Transfer Phase::
* Reset Operation Primitives::
* Connection Termination Phase::
@end menu

This section describes the required network service primitives that define the
CONS interface.

The queue model for CONS is discussed in more detail in CCITT X.213 (@pxref{X.213,,X.213}) section
9.2.  The queue model represents the operation of a network connection in the abstract by a pair of
queues linking the two network addresses.  There is one queue for each direction of information
flow.  Each queue represents a flow control function in one direction of transfer.  The ability of a
user to add objects to a queue will be determined by the behaviour of the user removing objects from
that queue, and the state of the queue.  The pair of queues is considered to be available for each
potential NC.  Objects that are entered or removed from the queue are either as a result of
interactions at the two network addresses, or as the result of NS provider initiatives.

@itemize @bullet

@item A queue is empty until a connect object has been entered and can be returned to this state,
with loss of its contents, by the NS provider.

@item Objects may be entered into a queue as a result of the actions of the source NS user, subject
to control by the NS provider;

@item Objects may also be entered into a queue by the NS provider.

@item Objects are removed from the queue under the control of the receiving NS
user.

@item Objects are normally removed under the control of the NS user in the same order as they were
entered except:

@itemize ---

@item if the object is of a type defined to be able to advance ahead of the preceding object
(however, no object is defined to be able to advance ahead of another object of the same type), or

@item if the following object is defined to be destructive with respect to the preceding object on
the queue.  If necessary, the last object on the queue will be deleted to allow a destructive object
to be entered - they will therefore always be added to the queue.  For example, ``disconnect''
objects are defined to be destructive with respect to all other objects.  ``Reset'' objects are
defined to be destructive with respect to all other objects except ``connect'', ``disconnect'', and
other ``reset'' objects.

@end itemize

@end itemize

@tabref{3} shows the ordering relationships among the queue model objects.

@tabfig{npi_tab3,3,Ordering Relationships Between Queue Model Objects}

@node Connection Establishment Phase
@subsection Connection Establishment Phase

A pair of queues is associated with an NC between two network addresses when the NS provider
receives an @prim{N_CONN_REQ} primitive at one of the network addresses resulting in a connect
object being entered into the queue.  The queues will remain associated with the NC until a
@prim{N_DISCON_REQ} primitive (resulting in a disconnect object) is either entered or removed from a
queue.  Similarly, in the queue from the called NS user, objects can be entered into the queue only
after the connect object associated with the @prim{N_CONN_RES} has been entered into the queue.
Alternatively, the called NS user can enter a disconnect object into the queue instead of the
connect object to terminate the NC.  The NC establishment procedure will fail if the NS provider is
unable to establish an NC,or if the destination NS user is unable to accept the @prim{N_CONN_IND}
(see NC Release primitive definition).

@subsubsection User Primitives for Successful Network Connection Establishment

@ 

@itemize @bullet

@item @prim{N_CONN_REQ}: This primitive requests that the NS provider make a connection to the
specified destination.

@item @prim{N_CONN_RES}: This primitive requests that the NS provider accept a previous connection
indication.

@end itemize

@subsubsection Provider Primitives for Successful Network Connection Establishment

@ 

@itemize @bullet

@item @prim{N_CONN_IND}: This primitive indicates to the NS user that a connect request has been
made by a user at the specified source address.

@item @prim{N_CONN_CON}: This primitive indicates to the NS user that a connect request has been
confirmed on the specified responding address.

@end itemize

The sequence of primitives in a successful NC establishment is defined by the time sequence diagram
as shown in @figref{7}.  The sequence of primitives for the NC response token value determination is
shown in @figref{8} (procedures for NC response token value determination are discussed in sections
4.1.3 and 4.1.4.).

@figuresized{npi_fig7,7,Sequence of Primitives; Successful NC Establishment,4in}

@figuresized{npi_fig8,8,Sequence of Primitives; NC Response Token Value Determination,4in}

@node Data Transfer Phase
@subsection Data Transfer Phase

Flow control on the NC is done by management of the queue capacity, and by allowing objects of
certain types to be inserted to the queues, as shown in @tabref{4}.

@tabfig{npi_tab4,4,Flow Control Relationships Between Queue Model Objects}

@subsubsection User Primitives for Data Transfer

@ 

@itemize @bullet

@item @prim{N_DATA_REQ}: This primitive requests that the NS provider transfer the specified data.

@item @prim{N_DATACK_REQ}: This primitive requests that the NS provider acknowledge the data that
had previously been received with receipt confirmation requested.

@item @prim{N_EXDATA_REQ}: This primitive requests that the NS provider transfer the specified
expedited network service data unit.

@end itemize

@subsubsection Provider Primitives for Data Transfer

@ 

@itemize @bullet

@item @prim{N_DATA_IND}: This primitive indicates to the NS user that this message contains data.

@item @prim{N_DATACK_IND}: This primitive indicates to the NS user that the remote NS user has
acknowledged the data that had previously been sent with receipt confirmation requested.

@item @prim{N_EXDATA_IND}: This primitive indicates to the NS user that this message unit contains
expedited data.

@end itemize

@figref{9} shows the sequence of primitives for successful normal data transfer.  The sequence of
primitives may remain incomplete if a @prim{N_RESET} or @prim{N_DISCON} primitive occurs.

@figuresized{npi_fig9,9,Sequence of Primitives; Data Transfer,4in}

The sequence of primitives in a successful confirmation of receipt is defined in the time sequence
diagram as shown in @figref{10}.

@figuresized{npi_fi10,10,Sequence of Primitives; Successful Confirmation of Receipt,4in}

The sequence of primitives as shown above may remain incomplete if an @prim{N_RESET} or an
@prim{N_DISCON} primitive occurs (see @tabref{3}).  A NS user
must not issue an @prim{N_DATACK_REQ} primitive if no @prim{N_DATA_IND} with confirmation request
set has been received, or if all such @prim{N_DATA_IND}
have been previously acknowledged.  Following a reset procedure (@prim{N_RESET_REQ} or
@prim{N_RESET_IND}), a NS user may not issue
aN_DATACK_REQ to acknowledge an outstanding @prim{N_DATA_IND} received before the reset procedure
was signalled.

Note---The withholding of confirmation of receipt by a NS user can have an effect on the attainable
throughput on the NC.

The sequence of primitives for expedited data transfer is shown in the time
sequence diagram in @figref{11}.  This sequence of primitives may remain
incomplete if a @prim{N_RESET} or @prim{N_DISCON} primitive is issued.

@figuresized{npi_fi11,11,Sequence of Primitives; Expedited Data Transfer,4in}

@node Reset Operation Primitives
@subsection Reset Operation Primitives

The reset service is used by the NS user to resynchronize the use of the NC, or
by the NS provider to report detected loss of unrecoverable data.

The reset procedure involves the following interactions:

@enumerate A

@item a @prim{N_RESET_REQ} from the NS user, followed by a @prim{N_RESET_CON}
from the NS provider; or

@item a @prim{N_RESET_IND} from the NS provider, followed by a
@prim{N_RESET_RES} from the NS user.

@end enumerate

The complete sequence of primitives depends upon the origin/s of the reset
action.  The reset service may be:

@enumerate 1

@item invoked by one NS user, leading to interaction (A) with that NS user
and interaction (B) with the peer NS user;

@item invoked by both NS users, leading to interaction (A) with both NS users;

@item invoked by the NS provider, leading to interaction (B) with both NS users;

@item invoked by one NS user and the NS provider, leading to interaction (A)
with the originating NS user and (B) with the peer NS user.

@end enumerate

The @prim{N_RESET_REQ} acts as a synchronization mark in the flow of @prim{N_DATA}, @prim{N_EXDATA},
and @prim{N_DATACK} primitives transmitted by the issuing NS user; the @prim{N_RESET_IND} acts as a
synchronization mark in the flow of @prim{N_DATA}, @prim{N_EXDATA}, and @prim{N_DATACK} primitives
received by the receiving NS user.  Similarly, @prim{N_RESET_RES} acts as a synchronization mark in
the flow of @prim{N_DATA}, @prim{N_EXDATA}, and @prim{N_DATACK} primitives transmitted by the
responding NS user, while the @prim{N_RESET_CON} acts as a synchronization mark in the flow of
@prim{N_DATA}, @prim{N_EXDATA}, and @prim{N_DATACK} primitives received by the NS user that
originally issued the reset.  The resynchronizing properties of the reset service are the following:

@enumerate a

@item All @prim{N_DATA}, @prim{N_EXDATA}, and @prim{N_DATACK} primitives issued before issuing the
@prim{N_RESET_REQ}/@prim{N_RESET_RES} that have not been delivered to the other NS user before the
@prim{N_RESET_IND}/@prim{N_RESET_CON} are issued by the NS provider,should be discarded by the NS
provider.

@item Any @prim{N_DATA}, @prim{N_EXDATA}, and @prim{N_DATACK} primitives issued after the
synchronization mark will not be delivered to the other NS user before the synchronization mark is
received.

@end enumerate

@subsubsection User Primitives for Reset Operations

@ 

@itemize @bullet

@item @prim{N_RESET_REQ}: This primitive requests that the NS provider reset the
network connection.

@item @prim{N_RESET_RES}: This primitive indicates to the NS provider that the
NS user has accepted a reset indication.

@end itemize

@subsubsection Provider Primitives for Reset Operations

@ 

@itemize @bullet

@item @prim{N_RESET_IND}: This primitive indicates to the NS user that the
network connection has been reset.

@item @prim{N_RESET_CON}: This primitive indicates to the NS user that the reset
request has been confirmed.

@end itemize

The sequence of primitives as shown in
@figref{12}, @figref{13}, @figref{14} and @figref{15}
may remain in complete if a @prim{N_DISCON} primitive occurs.

@figuresized{npi_fi12,12,Sequence of Primitives; NS User Invoked Reset,4in}

@figuresized{npi_fi13,13,Sequence of Primitives; Simultaneous NS User Invoked Reset,4in}

@figuresized{npi_fi14,14,Sequence of Primitives; NS Provider Invoked Reset,4in}

@figuresized{npi_fi15,15,Sequence of Primitives; Simultaneous NS User & NS Provider,4in}

@node Connection Termination Phase
@subsection Connection Termination Phase

The NC release procedure is initialized by the insertion of a disconnect object
(associated with a @prim{N_DISCON_REQ}) into the queue.  As shown in @tabref{3},
the disconnect procedure is destructive with respect to other objects in the
queue, and eventually results in the emptying of queues and termination of the
NC connection.

The sequence of primitives depends on the origin of the release action.  The
sequence may be:

@enumerate 1

@item invoked by one NS user, with a request from that NS user leading to an
indication to the other;

@item invoked by both NS users, with a request from each of the NS users;

@item invoked by the NS provider, with an indication to each of the NS users;

@item invoked independently by one NS user and the NS provider, with a request
from the originating NS user and an indication to the other.

@end enumerate

@subsubsection User Primitives for Connection Termination

@ 

@itemize @bullet

@item @prim{N_DISCON_REQ}: This primitive requests that the NS provider deny an
outstanding request for a connection or disconnect an existing connection.

@end itemize

@subsubsection Provider Primitives for Connection Termination

@ 

@itemize @bullet

@item @prim{N_DISCON_IND}: This primitive indicates to the NS user that either a
request for connection has been denied or an existing connection has been
terminated.

@end itemize

The sequence of primitives are shown in the time sequence diagrams in
@figref{16}, @figref{17}, @figref{18} and @figref{19}.

@figuresized{npi_fi16,16,Sequence of Primitives; NS User Invoked Release,4in}

@figuresized{npi_fi17,17,Sequence of Primitives; Simultaneous NS User Invoked Release,4in}

@figuresized{npi_fi18,18,Sequence of Primitives; NS Provider Invoked Release,4in}

@figuresized{npi_fi19,19,Sequence of Primitives; Simultaneous NS User & NS Provider,4in}

A NS user may reject an NC establishment attempt by issuing a
@prim{N_DISCON_REQ}.  The originator parameter in the @prim{N_DISCON} primitives
will indicate NS user invoked release.  The sequence of events is shown in
@figref{20}.

@figuresized{npi_fi20,20,Sequence of Primitives; NS User Rejection of an NC,4in}

If the NS provider is unable to establish an NC, it indicates this to the
requester by an @prim{N_DISCON_IND}.  The originator in this primitive indicates
an NS provider invoked release.  This is shown in @figref{21}.

@figuresized{npi_fi21,21,Sequence of Primitives; NS Provider Rejection of an NC,4in}

@node Connectionless Network Services Definition
@section Connectionless Network Services Definition

The CLNS allows for the transfer of the NS user data in one or both directions
simultaneously without establishing a network connection.  A set of primitives
are defined that carry user data and control information between the NS user and
NS provider entities.  The primitives are modelled as requests initiated by the
NS user and indications initiated by the NS provider.  Indications may be
initiated by the NS provider independently from requests by the NS user.

The connectionless network service consists of one phase.

@subsection User Request Primitives

@ 

@itemize @bullet

@item @prim{N_UNITDATA_REQ}: This primitive requests that the NS provider send
the data unit to the specified destination.

@end itemize

@subsection Provider Response Primitives

@ 

@itemize @bullet

@item @prim{N_UNITDATA_IND}: This primitive indicates to the NS user that a data
unit has been received from the specified source address.

@end itemize

@figref{22} shows the sequence of primitives for the connectionless mode of data
transfer.

@figuresized{npi_fi22,22,Sequence of Primitives; Connectionless Data Transfer,4in}

@itemize @bullet

@item @prim{N_UDERROR_IND}: This primitive indicates to the NS user that the
data unit with the specified destination address and QOS parameters produced an
error.  This primitive is specific to CLNS.

@end itemize

@figref{23} shows the sequence of primitives for the CLNS error management
primitive.

@figuresized{npi_fi23,23,Sequence of Primitives; CLNS Error Indication Service,4in}

@node @value{INTERFACE} Primitives
@chapter @value{INTERFACE} Primitives

@menu
* Management Primitives::
* CONS Primitive Format and Rules::
* CLNS Primitive Format and Rules::
@end menu

This section describes the format and parameters of the @value{INTERFACE} primitives
(@ref{Mapping NPI to ISO 8348 and CCITT X.213}, shows the mapping of the
@value{INTERFACE}
primitives to the primitives defined in ISO 8348 (@pxref{ISO8348,,ISO8348}) and
CCITT X.213 (@pxref{X.213,,X.213})).  In addition, it discusses the states the
primitive is valid in, the resulting state, and the acknowledgement that the
primitive expects.  (The state/event tables for these primitives are shown in
@ref{State/Event Tables}.  The precedence tables for the @value{INTERFACE} primitives are
shown in @ref{Primitive Precedence Tables}.) Rules for OSI conformance are
described in @ref{Addendum for OSI Conformance}, to this document.

@tabref{5}, @tabref{6} and @tabref{7} provide a summary of the NS primitives and
their parameters.

@tabfig{npi_tab5,5,NC Establishment Network Service Primitives}

@tabfig{npi_tab6,6,Data Transfer Network Service Primitives}

@tabfig{npi_tab7,7,NC Release Network Service Primitives}

@page
@node Management Primitives
@section Management Primitives

@menu
* N_INFO_REQ::
* N_INFO_ACK::
* N_BIND_REQ::
* N_BIND_ACK::
* N_UNBIND_REQ::
* N_OPTMGMT_REQ::
* N_ERROR_ACK::
* N_OK_ACK::
@end menu

These primitives apply both to CONS as well as CLNS.

@node N_INFO_REQ
@subsection Network Information Request

@subsubheading N_INFO_REQ
@prindex N_INFO_REQ

This primitive requests the NS provider to return the values of all supported
protocol parameters (@pxref{N_INFO_ACK}), and also the current state of the NS
provider (as defined in @ref{State/Event Tables}).  This primitive does not
affect the state of the network provider and does not appear in the state
tables.

@subsubheading Format

The format of the message is one @msg{M_PCPROTO} message block and its structure is
as follows:

@smallexample
@verbatim
typedef struct {
    np_ulong PRIM_type;        /* always N_INFO_REQ */
} N_info_req_t;
@end verbatim
@tpindex N_info_req_t
@end smallexample

@subsubheading Parameters

@table @parm

@item PRIM_type
Indicates the primitive type.

@end table

@subsubheading Valid States

This primitive is valid in any state where a local acknowledgement is not
pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Acknowledgements

This primitive requires the NS provider to generate one of the following acknowledgements upon
receipt of the primitive:

@itemize ---
@item @emph{Successful:}
Acknowledgement of the primitive via the @prim{N_INFO_ACK} primitive.
@item @emph{Unsuccessful (Non-fatal errors):}
There are no errors associated with the issuance of this primitive.
@end itemize

@page
@node N_INFO_ACK
@subsection Network Information Acknowledgement

@subsubheading N_INFO_ACK
@prindex N_INFO_ACK
This primitive indicates to the NS user any relevant protocol-dependent parameters.@footnote{In the
future, this primitive will be modified such that it will allow the @value{INTERFACE} to accept
either sub-network point of attachment addresses or network addresses.}  It should be initiated in
response to the @prim{N_INFO_REQ} primitive described above.

@subsubheading Format
@tpindex N_info_ack_t
This primitive consists of one @msg{M_PCPROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_INFO_ACK */
        np_ulong NSDU_size;             /* maximum NSDU size */
        np_ulong ENSDU_size;            /* maximum ENSDU size */
        np_ulong CDATA_size;            /* connect data size */
        np_ulong DDATA_size;            /* discon data size */
        np_ulong ADDR_size;             /* address size */
        np_ulong ADDR_length;           /* address length */
        np_ulong ADDR_offset;           /* address offset */
        np_ulong QOS_length;            /* QOS values length */
        np_ulong QOS_offset;            /* QOS values offset */
        np_ulong QOS_range_length;      /* length of QOS values' range */
        np_ulong QOS_range_offset;      /* offset of QOS values' range */
        np_ulong OPTIONS_flags;         /* bit masking for options supported */
        np_ulong NIDU_size;             /* network i/f data unit size */
        np_long SERV_type;              /* service type */
        np_ulong CURRENT_state;         /* current state */
        np_ulong PROVIDER_type;         /* type of NS provider */
        np_ulong NODU_size;             /* optimal NSDU size */
        np_ulong PROTOID_length;        /* length of bound protocol ids */
        np_ulong PROTOID_offset;        /* offset of bound protocol ids */
        np_ulong NPI_version;           /* version # of npi that is supported */
} N_info_ack_t;

/* Flags to indicate support of NS provider options */
#define REC_CONF_OPT    0x00000001L
#define EX_DATA_OPT     0x00000002L
#define DEFAULT_RC_SEL  0x00000004L

/* Service types supported by the NS provider */
#define N_CONS 1
#define N_CLNS 2

/* Valid provider types */
#define N_SNICFP 1
#define N_SUBNET 2
@end verbatim
@tpindex N_info_ack_t
@end smallexample

@subsubheading Parameters

The above fields have the following meaning:

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_INFO_ACK}.
@item @parm{NSDU_size} @tab
Specifies the maximum size (in octets) of a @dfn{Network Service Data Unit (NSDU)} supported by the
NS provider.
@item @parm{ENSDU_size} @tab
Specifies the maximum size (in octets) of an @dfn{Expedited Network Service Data Unit (ENSDU)}
supported by the NS provider.
@item @parm{CDATA_size} @tab
Specifies the maximum number of octets of data that may be associated with connection establishment
primitives.
@item @parm{DDATA_size} @tab
Specifies the maximum number of octets of data that may be associated with the disconnect
primitives.
@item @parm{ADDR_size} @tab
Specifies the maximum size (in decimal digits) of a network address.
@item @parm{ADDR_length} @tab
Specifies the length in bytes of the network address bound on the Stream on which the
@prim{N_INFO_REQ} primitive was issued (a network address is bound to a Stream with the
@prim{N_BIND_REQ} primitive).
@item @parm{ADDR_offset} @tab
Specifies the offset of the bound network address from the beginning of the @msg{M_PCPROTO} message
block (this field should be ignored if the @parm{ADDR_length} field is zero).
@item @parm{QOS_length} @tab
In the connection-mode environment, when this primitive is invoked before the NC is established on
the Stream, the values returned specify the default values supported by the NS provider.  When this
primitive is invoked after a NC has been established on the Stream, the values returned indicate the
negotiated values for the QOS parameters.  In the connection-less environment, these values
represent the default or the selected QOS parameter values.  In case a QOS parameter is not
supported by NS Provider, a value of @pval{QOS_UNKNOWN} will be returned.  In the case where no QOS
parameters are supported by the NS provider, this field will be zero.
@item @parm{QOS_offset} @tab
Indicates the offset of the QOS parameters from the beginning of the @msg{M_PCPROTO} message block.
@item @parm{QOS_range_length} @tab
Indicates the length in bytes, of the available range of QOS parameters values supported by the NS
provider.  These ranges are used by the NS user to select QOS parameter values that are valid with
the NS provider.  QOS parameter values are selected, or the default values altered via the
@prim{N_OPTMGMT_REQ} primitive.  In the connection-mode environment, the values for end-to-end QOS
parameters may be specified with the @prim{N_CONN_REQ} or @prim{N_CONN_RES} primitives for
negotiation.  If the NS provider does not support a certain QOS parameter, its value will be set to
@pval{QOS_UNKNOWN}.  In the case where no QOS parameters are supported by the NS provider, the
length of this field will be zero.
@item @parm{QOS_range_offset} @tab
Indicates the offset of the range of QOS parameter values from the beginning of the @msg{M_PCPROTO}
message block.
@item @parm{OPTIONS_flags} @tab
Defines flags that indicate whether the options described below are supported by the NS provider.
The possible options are receipt confirmation, expedited data and default selection for use of
receipt confirmation.
@item @parm{NIDU_size} @tab
This indicates the amount of user data that may be present in an @prim{N_DATA_REQ} or
@prim{N_DATA_IND} primitive.  The @parm{NIDU_size} should not be larger than the @parm{NSDU_size}
specification.
@item @parm{SERV_type} @tab
Indicates the service type supported by the NS provider.  The possible values can be @pval{N_CONS},
@pval{N_CLNS}, (or both as indicated by using @pval{N_CONS}|@pval{N_CLNS}).
@item @parm{CURRENT_state} @tab
Indicates the current state of the NS provider.
@item @parm{PROVIDER_type} @tab
Indicates the type of NS provider.  The possible values can be @pval{N_SNICFP} or @pval{N_SUBNET}.
The value @pval{N_SNICFP} indicates that the provider is the @dfn{Subnetwork Independent Convergence
Function/Protocol} sub-layer of the network layer.  The value @pval{N_SUBNET} indicates that the
provider is a subnetwork.
@item @parm{NODU_size} @tab
Indicates the optimal NSDU size (in octets) of an NSDU given the current routing information.
@item @parm{PROTOID_length} @tab
Indicates the length of the protocol identifiers that were bound using the @prim{N_BIND_REQ}.
@item @parm{PROTOID_offset} @tab
Indicates the offset of the protocol identifiers that were bound using the @prim{N_BIND_REQ}, from
the beginning of the @msg{M_PCPROTO} message block.
@item @parm{NPI_version} @tab
Indicates the current version of @value{INTERFACE} that is supported.
Always @pval{N_VERSION_2} for this specificaiton.
@end multitable

@subsubheading Flags

@table @pval
@item REC_CONF_OPT
When set, it indicates that the NS provider supports receipt confirmation.

@emph{This flag is used only in the connection-mode environment.}
@item EX_DATA_OPT
When set, it indicates that the NS provider supports expedited data transfer.

@emph{This flag is used only in the connection-mode environment.}
@item DEFAULT_RC_SEL
When set, indicates that the default selection is for the use of receipt confirmation for every
@prim{N_DATA_REQ} primitive.  This flag is only applicable when use of receipt confirmation is
successfully negotiated via the @prim{N_CONN_REQ} or @prim{N_CONN_RES} primitives.
@emph{This flag is only used in the connection-mode environment.}
@end table

@subsubheading Service Types

@table @pval
@item N_CONS
When set, indicates that the NS provider supports connection-mode network services.
@item N_CLNS
When set, indicates that the NS provider supports connection-less network services.
@end table

@subsubheading Valid States

This primitive is valid in any state in response to an @prim{N_INFO_REQ} primitive.

@subsubheading New State

The state remains unchanged.

@page
@node N_BIND_REQ
@subsection Bind Protocol Address Request
@subsubheading N_BIND_REQ
@prindex N_BIND_REQ
This primitive requests that the NS provider bind an NS user entity to a network address and
negotiate the number of connect indications allowed to be outstanding by the NS provider for the
specified NS user entity being bound.
@subsubheading Format
This primitive consists of one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_BIND_REQ */
        np_ulong ADDR_length;           /* length of address */
        np_ulong ADDR_offset;           /* offset of address */
        np_ulong CONIND_number;         /* req # of conn-indications to be queued */
        np_ulong BIND_flags;            /* flags associated with N_BIND_REQ */
        np_ulong PROTOID_length;        /* length of the protocol id */
        np_ulong PROTOID_offset;        /* offset of protocol id */
} N_bind_req_t;

/* Flags associated with N_BIND_REQ */
#define DEFAULT_LISTENER    0x00000001L
#define TOKEN_REQUEST       0x00000002L
#define DEFAULT_DEST        0x00000004L
@end verbatim
@tpindex N_bind_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_BIND_REQ}.
@item @parm{ADDR_length} @tab
Specifies the length of the protocol address to bind.
@item @parm{ADDR_offset} @tab
Specifies the offset of the protocol address to bind from the beginning of the @msg{M_PROTO} message
block.
@item @parm{CONIND_number} @tab
Specifies the requested maximum number of outstanding connection indications to be issued.

This is the requested number of connection indications allowed to be outstanding by the NS provider
for the specified protocol address.  (If the number of outstanding connect indications equals
@parm{CONIND_number}, the NS provider need not discard further incoming connect indications, but may
choose to queue them internally until the number of outstanding connect indications drops below the
@parm{CONIND_number}.)  Only one Stream per network address is allowed to have a
@parm{CONIND_number} value greater than zero.  This indicates to the network provider that this
Stream is the listener Stream for the NS user.  This Stream will be used by the NS provider for
connect indications for that network address.

If a Stream is bound as a listener Stream, it will not be able to initiate connect requests.  If the
NS user attempts to send an @prim{N_CONN_REQ} primitive down this Stream, an @prim{N_ERROR_ACK}
primitive will be sent to the NS user by the NS provider with an error value of @perr{NACCESS}.

@emph{This field should be ignored in CLNS.}
@item @parm{BIND_flags} @tab
Specifies the bind option flags associated with the request.
@item @parm{PROTOID_length} @tab
Specifies the length of protocol identifiers to bind.
@item @parm{PROTOID_offset} @tab
Specifies the offset of protocol identifiers to bind from the beginning of the @msg{M_PROTO} message
block.
@end multitable

@subsubheading Flags

@table @pval
@item DEFAULT_LISTENER
When set, this flag indicates that this Stream is the @dfn{Default Listener Stream}.  This Stream
is used to pass connect indications for all incoming calls that contain protocol identifiers that
are not bound to any other listener, or when a listener Stream with @parm{CONIND_number} value of
greater than zero is not found.  Also, the default listener will receive all incoming call
indications that contain no user data.

Only one @dfn{Default Listener Stream} is allowed per occurrence of NPI.  An attempt to bind a
@dfn{Default Listener Stream} when one is already bound should result in an error (of type
@perr{NBOUND}).

@emph{The @pval{DEFAULT_LISTENER} flag is ignored in CLNS.}
@item TOKEN_REQUEST
When set, this flag indicates to the NS provider that the NS user has requested that a @dfn{token}
be assigned to the Stream (to be used in the NC response message), and the @dfn{token value} be
returned to the NS user via the @prim{N_BIND_ACK} primitive.

The @dfn{token} assigned by the NS provider can then be used by the NS user in a subsequent
@prim{N_CONN_RES} primitive to identify the Stream on which the NC is to be established.

@emph{The @pval{TOKEN_REQUEST} flag is ignored in CLNS.}
@item DEFAULT_DEST
When set, this flag indicates that this Stream is the @dfn{Default Destination Stream}.  This Stream
will receive all packets destined for the NSAP specified in the bind request.  If no NSAP is
indicated in the bind request, then this Stream should receive all packets destined to an NSAP that
is bound to no other Stream.

Only one @dfn{Default Destination Stream} per NSAP is allowed per occurrence of NPI.  An attempt to
bind a @dfn{Default Destination Stream} to an NSAP when one is already bound should result in an
error of type @perr{NBOUND}.

@emph{The @pval{DEFAULT_DEST} flag is ignored in the CONS.}
@end table

@subsubheading Valid States

This primitive is valid in state @psta{NS_UNBND} (@pxref{State/Event Tables}).

@subsubheading New State

The new state is @psta{NS_WACK_BREQ}.

@subsubheading Acknowledgements

The NS provider will generate one of the following acknowledgements upon receipt of the
@prim{N_BIND_REQ} primitive:

@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated using the @prim{N_BIND_ACK} primitive.
@item @emph{Unsuccessful (Non-fatal errors):}
These errors will be indicated using the @prim{N_ERROR_ACK} primitive.  The applicable non-fatal
errors are as follows:
@multitable @columnfractions .2 .8
@item @perr{NBADADDR} @tab
The network address was in an incorrect format or the address contained illegal information.  It is
not intended to indicate protocol errors.
@item @perr{NBOUND} @tab
The NS user attempted to bind a second Stream to a network address with the @parm{CONIND_number} set
to a non-zero value, or attempted to bind a second Stream with the @pval{DEFAULT_LISTENER} flag
value set to non-zero.
@item @perr{NNOADDR} @tab
The NS provider could not allocate an address.
@item @perr{NACCESS} @tab
The NS user did not have proper permissions for the use of the requested address.
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error
is indicated in the primitive.
@item @perr{NNOPROTOID} @tab
Protocol identifier could not be allocated.
@end multitable
@end itemize

@page
@node N_BIND_ACK
@subsection Bind Protocol Address Acknowledgement
@subsubheading N_BIND_ACK
@prindex N_BIND_ACK
This primitive indicates to the NS user that the specified network user entity has been bound to the
requested network address and that the specified number of connect indications are allowed to be
queued by the NS provider for the specified network address.
@subsubheading Format
This primitives consists of one @msg{M_PCPROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
    np_ulong PRIM_type;        /* always N_BIND_ACK */
    np_ulong ADDR_length;      /* address length */
    np_ulong ADDR_offset;      /* offset of address */
    np_ulong CONIND_number;    /* connection indications */
    np_ulong TOKEN_value;      /* NC response token value */
    np_ulong PROTOID_length;   /* length of protocol id */
    np_ulong PROTOID_offset;   /* offset from beg. of block */
} N_bind_ack_t;
@end verbatim
@tpindex N_bind_ack_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_BIND_ACK}.
@item @parm{ADDR_length} @tab
Indicates the length of the network address that was bound.
@item @parm{ADDR_offset} @tab
Indicates the offset of the network address that was bound, from the beginning of the
@msg{M_PCPROTO} message block.
@item @parm{CONIND_number} @tab
Indicates the accepted number of connection indications allowed to be outstanding by the NS provider
for the specified network address.  If its value is zero, this Stream cannot accept
@prim{N_CONN_IND} primitives.  If its value is greater than zero, then the NS user can accept
@prim{N_CONN_IND} primitives up to the value specified in this parameter before having to respond
with an @prim{N_CONN_RES} or an @prim{N_DISCON_REQ} primitive.

@emph{This field should be ignored for CLNS.}
@item @parm{TOKEN_value} @tab
Indicates the value of the @dfn{token} assigned to this Stream that can be used by the NS user in a
@prim{N_CONN_RES} primitive to accept an NC on this Stream.  It is a non-zero value, and is unique
to all Streams bound to the NS provider.

@emph{This field should be ignored for CLNS.}
@item @parm{PROTOID_length} @tab
Indicates the length of the protocol identifiers that were bound.
@item @parm{PROTOID_offset} @tab
Indicates the offset of the protocol identifiers that were bound, from the beginning of the
@msg{M_PCPROTO} message block.
@end multitable

Note that the proper alignment of the address in the @msg{M_PCPROTO} message block is not
guaranteed.

@subsubheading Bind Rules:

The following rules apply to the binding of the specified network address to the
Stream:

@itemize ---
@item
If the @parm{ADDR_length} field in the @prim{N_BIND_REQ} primitive is zero, then the NS provider is
to assign a network address to the user.
@item
The NS provider is to bind the network address as specified in the @prim{N_BIND_REQ} primitive.  If
the NS provider cannot bind the specified address, it may assign another network address to the
user.  It is the network user's responsibility to check the network address returned in the
@prim{N_BIND_ACK} primitive to see if it is the same as the one requested.
@end itemize

The following rules apply to negotiating @parm{CONIND_number} argument:

@itemize ---
@item
The @parm{CONIND_number} in the @prim{N_BIND_ACK} primitive must be less than or equal to the
corresponding requested number as indicated in the @prim{N_BIND_REQ} primitive.
@item
Only one Stream that is bound to the indicated network address may have a negotiated accepted number
of maximum connect requests greater than zero.  If a @prim{N_BIND_REQ} primitive specifies a value
greater than zero, but another Stream has already bound itself to the given network address with a
value greater than zero, the NS provider should assign another protocol address to the user.
@item
If a Stream with @parm{CONIND_number} greater than zero is used to accept a connection, the Stream
will be found busy during the duration of that connection and no other Streams may be bound to that
network address with a @parm{CONIND_number} greater than zero.  This will prevent more than one
Stream bound to the identical network address from accepting connect indications.
@item
A Stream requesting a @parm{CONIND_number} of zero should always be legal.  This indicates to the NS
provider that the Stream is to be used to request connections only.
@item
A Stream with a negotiated @parm{CONIND_number} greater than zero may generate connect requests or
accept connect indications.
@end itemize

@emph{If the above rules result in an error condition, then the NS provider must issue an
@prim{N_ERROR_ACK} primitive to the NS user specifying the error as defined in the description of
the @prim{N_BIND_REQ} primitive, @pxref{N_BIND_REQ}.}

@subsubheading Valid States

This primitive is valid in response to an @prim{N_BIND_REQ} primitive and is valid in the state
@psta{NS_WACK_BREQ} (@pxref{State/Event Tables}.)

@subsubheading New State

The new state is @psta{NS_IDLE}.

@page
@node N_UNBIND_REQ
@subsection Unbind Protocol Address Request
@subsubheading N_UNBIND_REQ
@prindex N_UNBIND_REQ
This primitive requests that the NS provider unbind the NS user entity that was previously bound to
the network address.
@subsubheading Format
This primitives consists of one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_UNBIND_REQ */
} N_unbind_req_t;
@end verbatim
@tpindex N_unbind_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_UNBIND_REQ}.
@end multitable

@subsubheading Valid States

This primitive is valid in the @psta{NS_IDLE} state.

@subsubheading New State

The new state is @psta{NS_WACK_UREQ}.

@subsubheading Acknowledgements

This primitive requires the NS provider to generate the following acknowledgements upon receipt of
the primitive:

@itemize ---
@item @emph{Successful:}
Correct acknowledgement of the primitive is indicated via the @prim{N_OK_ACK} primitive,
@pxref{N_OK_ACK}.
@item @emph{Unsuccessful (Non-fatal errors):}
These errors will be indicated via the @prim{N_ERROR_ACK} primitive.  The applicable non-fatal
errors are as follows:
@multitable @columnfractions .2 .7
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@end multitable
@end itemize

@page
@node N_OPTMGMT_REQ
@subsection Network Options Management Request
@subsubheading N_OPTMGMT_REQ
@prindex N_OPTMGMT_REQ
This primitive allows the NS user to manage QOS parameter values associated with the Stream.
@subsubheading Format
These primitives consists of one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
    np_ulong PRIM_type;			/* always N_OPTMGMT_REQ */
    np_ulong QOS_length;		/* length of QOS values */
    np_ulong QOS_offset;		/* offset of QOS values */
    np_ulong OPTMGMT_flags;		/* default receipt conf. selection */
} N_optmgmt_req_t;
@end verbatim
@tpindex N_optmgmt_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_OPTMGMT_REQ}.
@item @parm{QOS_length} @tab
Specifies the length of the Quality of Service parameters.  Specifies the length of the default
values of the QOS parameters as selected by the NS user.  In the connection-mode environment these
values will be used in subsequent @prim{N_CONN_REQ} primitives on the Stream that do not specify
values for these QOS parameters.  In the connection-less environment, these values represent the
selected QOS values that would apply to each unit data transmission.  If the NS user cannot
determine the value of a QOS parameter, its value should be set to @pval{QOS_UNKNOWN}.  If the NS
user does not specify any QOS parameter values, the length of this field should be set to zero.
@item @parm{QOS_offset} @tab
Specifies the offset of the Quality of Service parameters, from the beginning of the @msg{M_PROTO}
message block.
@item @parm{OPTMGMT_flags} @tab
Specifies the options management flags associated with the request.  (See ``Flags'' below.)
@end multitable

@subsubheading Flags

@table @pval
@item DEFAULT_RC_SEL
When set, it indicates to the NS provider that the NS user's default selection is for the use of
receipt confirmation with every @prim{N_DATA_REQ} message (applicable only when its use is
successfully negotiated via the @prim{N_CONN_REQ} or @prim{N_CONN_RES} primitives).  This default
indication is used only when the @msg{M_PROTO} message block is not present in the @prim{N_DATA_REQ}
(i.e. the primitive only contains @msg{M_DATA} message blocks).

@emph{This flag should be ignored in the connection-less environment.}
@end table

@subsubheading Valid States

This primitive is valid in the @psta{NS_IDLE} state.

@subsubheading New State

The new state is @psta{NS_WACK_OPTREQ}.

@subsubheading Acknowledgements

The @prim{N_OPTMGMT_REQ} primitive requires the NS provider to generate one of the following
acknowledgements upon receipt of the primitive:

@itemize ---
@item @emph{Successful:}
Acknowledgement is via the @prim{N_OK_ACK} primitive.  At successful completion, the resulting state
is @psta{NS_IDLE}.
@item @emph{Unsuccessful (Non-fatal errors):}
These errors are indicated in the @prim{N_ERROR_ACK} primitive.  The resulting state remains
unchanged.  The applicable non-fatal errors are defined as follows:
@multitable @columnfractions .2 .7
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NBADQOSPARAM} @tab
The QOS parameter values specified are outside the range supported by the NS provider.
@item @perr{NBADQOSTYPE} @tab
The QOS structure type is not supported by the NS provider.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@end multitable
@end itemize

@page
@node N_ERROR_ACK
@subsection Error Acknowledgement
@subsubheading N_ERROR_ACK
@prindex N_ERROR_ACK
This primitive indicates to the NS user that a non-fatal error has occurred in the last
network-user-originated primitive.  This may only be initiated as an acknowledgement for those
primitives that require one.  It also indicates to the user that no action was taken on the
primitive that caused the error.
@subsubheading Format
This primitives consists of one @msg{M_PCPROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_ERROR_ACK */
        np_ulong ERROR_prim;            /* primitive in error */
        np_ulong NPI_error;             /* NPI error code */
        np_ulong UNIX_error;            /* UNIX system error code */
} N_error_ack_t;
@end verbatim
@tpindex N_error_ack_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_ERROR_ACK}.
@item @parm{ERROR_prim} @tab
Indicates the primitive type that caused the error.
@item @parm{NPI_error} @tab
Indicates the Network Provider Interface error code.
@item @parm{UNIX_error} @tab
Indicates the @cite{UNIX@registeredsymbol{}} system error code.  This may only be non-zero when the
@parm{NPI_error} is equal to @perr{NSYSERR}.
@end multitable

@subsubheading Error Primitives

@emph{One of the following error primitive types are allowed to be returned in the @parm{ERROR_prim}
field:}

@multitable @columnfractions .2 .8
@item @prim{N_BIND_REQ} @tab
Bind Request.
@item @prim{N_OPTMGMT_REQ} @tab
Options Management Request.
@item @prim{N_CONN_REQ} @tab
Connect Request.
@item @prim{N_CONN_RES} @tab
Connect Response.
@item @prim{N_RESET_REQ} @tab
Reset Request.
@item @prim{N_RESET_RES} @tab
Reset Response.
@item @prim{N_DISCON_REQ} @tab
Disconnect Request.
@item @prim{N_UNBIND_REQ} @tab
Unbind Request.
@item @prim{N_INFORM_REQ} @tab
Inform Request.
@item @prim{N_STATE_REQ} @tab
State Request (SCCPI only).
@item @prim{N_COORD_REQ} @tab
Coordination Request (SCCPI only).
@item @prim{N_COORD_RES} @tab
Coordination Response (SCCPI only).
@end multitable

@emph{Also, any unrecognized primitive type may also be returned in conjunction with the
@perr{NNOTSUPPORT} error code.}

@subsubheading Valid Error Codes

@emph{The following error codes are allowed to be returned in the @parm{NPI_error} field:}

@multitable @columnfractions .2 .8
@item @perr{NBADADDR} @tab
The network address as specified in the primitive was in an incorrect format, or the address
contained illegal information.
@item @perr{NBADOPT} @tab
The options values as specified in the primitive were in an incorrect format, or they contained
illegal information.
@item @perr{NBADQOSPARAM} @tab
The QOS values specified are outside the range supported by the NS provider.
@item @perr{NBADQOSTYPE} @tab
The QOS structure type is not supported by the NS provider.
@item @perr{NBADTOKEN} @tab
Token used is not associated with an open Stream.
@item @perr{NNOADDR} @tab
The NS provider could not allocate an address.
@item @perr{NACCESS} @tab
The user did not have proper permissions.
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NBADSEQ} @tab
The sequence number specified in the primitive was incorrect or illegal.
@item @perr{NBADFLAG} @tab
The flags specified in the primitive were incorrect or illegal.
@item @perr{NBADDATA} @tab
The amount of user data specified was outside the range supported by the NS provider.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@item @perr{NNOTSUPPORT} @tab
Specified primitive type is not known to the NS provider.
@end multitable

@subsubheading Valid States

This primitive is valid in all states that have a pending acknowledgement or
confirmation.

@subsubheading New State

The new state is the same as the one from which the acknowledged request or
response was issued.

@page
@node N_OK_ACK
@subsection Successful Receipt Acknowledgement
@subsubheading N_OK_ACK
@prindex N_OK_ACK
This primitive indicates to the NS user that the previous network-user-originated primitive was
received successfully by the network provider.  It does not indicate to the NS user any network
protocol action taken due to the issuance of the last primitive.  The @prim{N_OK_ACK} primitive may
only be initiated as an acknowledgement for those user originated primitives that have no other
means of confirmation.
@subsubheading Format
This primitives consists of one @msg{M_PCPROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_OK_ACK */
        np_ulong CORRECT_prim;          /* primitive being acknowledged */
} N_ok_ack_t;
@end verbatim
@tpindex N_ok_ack_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_OK_ACK}.
@item @parm{CORRECT_prim} @tab
Indicates the successfully received primitive type.
@end multitable

@subsubheading Correct Primitives

@multitable @columnfractions .2 .8
@item @prim{N_OPTMGMT_REQ} @tab
Options Management Request.
@item @prim{N_CONN_RES} @tab
Connection Response.
@item @prim{N_RESET_RES} @tab
Reset Response.
@item @prim{N_DISCON_REQ} @tab
Disconnect Request.
@item @prim{N_UNBIND_REQ} @tab
Unbind Request.
@item @prim{N_COORD_RES} @tab
Coordination Response (SCCPI only).
@item @prim{N_INFORM_REQ} @tab
Inform Request (SCCPI only).
@end multitable

@subsubheading Valid States

This primitive is issued in the following states:

@multitable @columnfractions .2 .8
@item @psta{NS_WACK_UREQ} @tab
Wait for acknowledgement of Unbind Request.
@item @psta{NS_WACK_OPTREQ} @tab
Wait for acknowledgement of Options Management Request.
@item @psta{NS_WACK_RRES} @tab
Wait for acknowledgement of Reset Response.
@item @psta{NS_WACK_CRES} @tab
Wait for acknowledgement of Connection Response.
@item @psta{NS_WACK_DREQ6} @tab
Wait for acknowledgement of Disconnect Request.
@item @psta{NS_WACK_DREQ7} @tab
Wait for acknowledgement of Disconnect Request.
@item @psta{NS_WACK_DREQ9} @tab
Wait for acknowledgement of Disconnect Request.
@item @psta{NS_WACK_DREQ10} @tab
Wait for acknowledgement of Disconnect Request.
@item @psta{NS_WACK_DREQ11} @tab
Wait for acknowledgement of Disconnect Request.
@end multitable

@subsubheading New State

The resulting state depends on the current state (see @tabref{B-7}, and @tabref{B-8}).

@page
@node CONS Primitive Format and Rules
@section CONS Primitive Format and Rules

@menu
* Connection Establishment Primitives::
* Normal Data Transfer Phase::
* Receipt Confirmation Service Primitives::
* Expedited Data Transfer Service::
* Reset Service::
* Network Connection Release Phase::
@end menu

This section describes the format of the CONS primitives and the rules associated with these
primitives.  The default values of the QOS parameters associated with an NC may be selected via the
@prim{N_OPTMGMT_REQ} primitive.

@node Connection Establishment Primitives
@subsection Connection Establishment Primitives

@menu
* N_CONN_REQ::
* N_CONN_IND::
* N_CONN_RES::
* N_CONN_CON::
@end menu

The following network service primitives pertain to the establishment of an NC,
provided the NS users exist, and are known
to the NS provider.

@node N_CONN_REQ
@subsubsection Network Connection Request
@subsubheading N_CONN_REQ
@prindex N_CONN_REQ
This primitive requests that the NS provider make a network connection to the specified destination.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block followed by one or more @msg{M_DATA}
message blocks for the NS user data transfer.  The specification of the NS user data is optional.
The NS user can send any integral number of octets of data within the range supported by the NS
provider (@pxref{N_INFO_ACK}).  If the user does not specify QOS parameter values, the default
values (specified via @prim{N_OPTMGMT_REQ}) are used by the NS provider.

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_CONN_REQ */
        np_ulong DEST_length;           /* destination address length */
        np_ulong DEST_offset;           /* destination address offset */
        np_ulong CONN_flags;            /* bit masking for options flags */
        np_ulong QOS_length;            /* length of QOS parameter values */
        np_ulong QOS_offset;            /* offset of QOS parameter values */
} N_conn_req_t;

/* Flags to indicate if options are requested */
#define REC_CONF_OPT    0x00000001L
#define EX_DATA_OPT     0x00000002L
@end verbatim
@tpindex N_conn_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_CONN_REQ}.
@item @parm{DEST_length} @tab
Specifies the length of the destination address to which to connect.  Identifies the NS user to
which the NC is to be established.  This field will accommodate variable length addresses within a
range supported by the NS provider.
@item @parm{DEST_offset} @tab
Specifies the offset of the destination address to which to connect, from the beginning of the
@msg{M_PROTO} message block.
@item @parm{CONN_flags} @tab
Specifies the connection options flags.  (See ``Flags'' below.)
@item @parm{QOS_length} @tab
Specifies the length of the Quality of Service parameters negotiated.  Indicates the QOS parameter
values that apply to the NC being requested.  If the NS user cannot determine the value of a QOS
parameter, its value should be set to @pval{QOS_UNKNOWN}.  If the NS user does not specify any QOS
parameter values, the length of this field should be set to zero (@samp{0}).
@item @parm{QOS_offset} @tab
Specifies the offset of the Quality of Service parameters negotiated, from the beginning of the
@msg{M_PROTO} message block.
@end multitable

@subsubheading Flags

@table @pval
@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of the receipt
confirmation service on the NC.  The receipt confirmation service must be supported by the NS
provider to be used on the NC.
@item EX_DATA_OPT
Specifies the use of the expedited data transfer service on the NC.  The expedited data transfer
service must be provided by the NS provider for it to be used on the NC.
@end table

@subsubheading Valid States

This primitive is valid in state @psta{NS_IDLE}.

@subsubheading New State

The new state is @psta{NS_WCON_CREQ}.

@subsubheading Acknowledgements

The following acknowledgements are valid for this primitive:

@itemize ---
@item @emph{Successful NC Establishment:}
This is indicated using the @prim{N_CONN_CON} primitive.  This results in the @psta{NS_DATA_XFER}
state.
@item @emph{Unsuccessful NC Establishment:}
This is indicated using the @prim{N_DISCON_IND} primitive.  For example, a connection may be
rejected because either the called NS user cannot be reached, or the NS provider and/or the called
NS user did not agree with the specified QOS.  This results in the @psta{NS_IDLE} state.
@item @emph{Unsuccessful (Non-fatal errors):}
These are indicated using the @prim{N_ERROR_ACK} primitive.  The applicable non-fatal errors are
defined as follows:
@multitable @columnfractions .2 .7
@item @perr{NACCESS} @tab
The user did not have proper permission for the user of the requested address or options.
@item @perr{NBADQOSPARAM} @tab
The QOS parameter values specified are outside the range supported by the NS provider.
@item @perr{NBADQOSTYPE} @tab
The QOS structure type is not supported by the NS provider.
@item @perr{NBADADDR} @tab
The network address was in an incorrect format or contained illegal information.  It is not intended
to indicate NC errors, such as an unreachable destination.  These error types are included using the
@prim{N_DISCON_IND} primitive.
@item @perr{NBADOPT} @tab
The options were in an incorrect format, or they contain illegal information.
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NBADDATA} @tab
The amount of user data specified was outside the range supported by the NS provider.
@item @perr{NSYSERR} @tab
A system error occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@end multitable
@end itemize

@page
@node N_CONN_IND
@subsubsection Network Connection Indication
@subsubheading N_CONN_IND
@prindex N_CONN_IND
This primitive indicates to the destination NS user that a network connect request has been made by
the user at the specified source address.
@subsubheading Format
The format of this message is one @msg{M_PROTO} message block followed by one or more @msg{M_DATA}
message blocks for NS user data.  The specification of NS user data is optional.  The NS user can
send any integral number of octets of data within the range supported by the NS provider.  The NS
user data will only be present if the corresponding @prim{N_CONN_RES} had an NS user data parameter
specified, and their data will be identical.

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_CONN_IND */
        np_ulong DEST_length;           /* destination address length */
        np_ulong DEST_offset;           /* destination address offset */
        np_ulong SRC_length;            /* source address length */
        np_ulong SRC_offset;            /* source address offset */
        np_ulong SEQ_number;            /* sequence number */
        np_ulong CONN_flags;            /* bit masking for options flags */
        np_ulong QOS_length;            /* length of QOS parameter values */
        np_ulong QOS_offset;            /* offset of QOS parameter values */
} N_conn_ind_t;
@end verbatim
@tpindex N_conn_ind_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_CONN_IND}.
@item @parm{DEST_length} @tab
Indicates the length of the destination address.  This is the an address identifying the NS user to
which the NC is to be established.
@item @parm{DEST_offset} @tab
Indicates the offset of the destination address, from the beginning of the @msg{M_PROTO} message
block.
@item @parm{SRC_length} @tab
Indicates the length of the source address.  The source address is the network address of the NS
user from which the NC has been requested.  The semantics of the value in the @prim{N_CONN_IND}
primitive is identical to the value associated with the Stream on which the @prim{N_CONN_REQ} was
issued.
@item @parm{SRC_offset} @tab
Indicates the offset of the source address from the beginning of the @msg{M_PROTO} message block.
@item @parm{SEQ_number} @tab
Indicates the sequence number that can be used by the NS user to associate this message with the
@prim{N_CONN_RES} or @prim{N_DISCON_REQ} primitive that is to follow.  This value must be unique
among the outstanding @prim{N_CONN_IND} messages.  The use of this field allows the NS user to issue
the @prim{N_CONN_RES} or the @prim{N_DISCON_REQ} messages in any order.
@item @parm{CONN_flags} @tab
Indicates the connection options flags associated with the indication.
@item @parm{QOS_length} @tab
Indicates the length of the Quality of Service parameters.  This is the QOS values that are
negotiated during NC establishment.  If the destination NS user does not agree to the range of QOS
values specified by the source NS user in the @prim{N_CONN_REQ} primitive, it will reject the NC
establishment by invoking a @prim{N_DISCON_REQ} primitive (the originator parameter in the
@prim{N_DISCON_REQ} primitive will indicate NS user initiated release).  If the NS user does not
support or cannot determine the value of a QOS parameter, its value will be set to
@pval{QOS_UNKNOWN}.  If the NS user does not specify any QOS parameter values, the length of this
field should be set to zero.
@item @parm{QOS_offset} @tab
Indicates the offset of the Quality of Service parameters, from the beginning of the @msg{M_PROTO}
message block.
@end multitable

@subsubheading Flags

@table @pval
@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of the receipt
confirmation service on the NC.  The receipt confirmation service must be provided in the network
service to be used on the NC.
@item EX_DATA_OPT
The expedited data selection parameter indicates the use/availability of the expedited data transfer
service on the NC.  The expedited data transfer service must be provided by the NS provider for it
to be used on the NC.
@end table

@subsubheading Valid States

This primitive is valid in the states @psta{NS_IDLE} and @psta{NS_WRES_CIND}.

@subsubheading New State

In both cases the resulting state is @psta{NS_WRES_CIND} (the number of connect indications waiting
for user response is incremented by one).

@page
@node N_CONN_RES
@subsubsection Network Connection Response
@subsubheading N_CONN_RES
@prindex N_CONN_RES
This primitive allows the destination NS user to request that the network provider accept a previous
connect request.
@subsubheading Format
The format of this primitive is one @msg{M_PROTO} message block followed by one or more @msg{M_DATA}
message blocks (for NS user data).  The specification of the NS user data is optional.

The NS user can send any integral number of octets of data within the range supported by the NS
provider.

The structure of the @msg{M_PROTO} block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_CONN_RES */
        np_ulong TOKEN_value;           /* NC response token value */
        np_ulong RES_length;            /* responding address length */
        np_ulong RES_offset;            /* responding address offset */
        np_ulong SEQ_number;            /* sequence number */
        np_ulong CONN_flags;            /* bit masking for options flags */
        np_ulong QOS_length;            /* length of QOS parameter values */
        np_ulong QOS_offset;            /* offset of QOS parameter values */
} N_conn_res_t;
@end verbatim
@tpindex N_conn_res_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_CONN_RES}.
@item @parm{TOKEN_value} @tab
Specifies the response token value of the Stream upon which the connection is to be accepted, or
zero, if the connection is to be accepted on the issuing Stream.  This value is used to identify the
Stream that the NS user want to establish the NC on.  (Its value is determined by the NS user by
issuing a @prim{N_BIND_REQ} primitive with the @pval{TOKEN_REQUEST} flag set.  The token value is
returned in the @prim{N_BIND_ACK}).  The value of this field should be non-zero when the NS user
wants to establish the NC on a Stream other than the Stream on which the @prim{N_CONN_IND} arrived.
If the NS user wants to establish a NC on the same Stream that the @prim{N_CONN_IND} arrived on,
then the value of this field should be zero (@samp{0}).
@item @parm{RES_length} @tab
Specifies the length of the responding address.  This field conveys the network address of the NS
user to which the NC has been established.  Under certain circumstances, such as call redirection,
generic addressing, etc., the value of this parameter may be different from the destination address
parameter specified in the corresponding @prim{N_CONN_REQ}.
@item @parm{RES_offset} @tab
Specifies the offset of the responding address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{SEQ_number} @tab
Specifies the sequence number of the corresponding connection indication to which this primitive is
responding.  This is the sequence number of the @prim{N_CONN_RES} primitive.  It is used by the NS
provider to associate the @prim{N_CONN_RES} message with an outstanding @prim{N_CONN_IND} message.
An invalid sequence number should result in an @prim{N_ERROR_ACK} primitive with the error type
@perr{NBADSEQ}.
@item @parm{CONN_flags} @tab
Specifies the connection options flags associated with the connection response.  (See ``Flags''
below.)
@item @parm{QOS_length} @tab
Specifies the length of the Quality of Service parameters.  This is the QOS parameter values that
are negotiated during NC establishment by invoking a @prim{N_DISCON_REQ} primitive (the originator
parameter in the @parm{N_DISCON_REQ} primitive will indicate NS user invoked release).  If the NS
user cannot determine the value of a QOS parameter, its value should be set to @pval{QOS_UNKNOWN}.
If the NS user does not specify any QOS parameter values, the length of this field should be set to
zero (@samp{0}).
@item @parm{QOS_offset} @tab
Specifies the offset of the Quality of Service parameters from the beginning of the @msg{M_PROTO}
message block.
@end multitable

@subsubheading Flags

@table @pval
@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of the receipt
confirmation service on the NC.  The receipt confirmation service must be provided in the network
service to be used on the NC.
@item EX_DATA_OPT
The expedited data selection parameter indicates the use/availability of the expedited data transfer
service on the NC.  The expedited data transfer service must be provided by the NS provider for it
to be used on the NC.
@end table

@subsubheading Valid States

This primitive is valid in state @psta{NS_WRES_CIND}.

@subsubheading New State

The new state is @psta{NS_WACK_CRES}.

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon receipt of this
primitive:

@itemize ---
@item @emph{Successful:}
Successful completion is indicated via the @prim{N_OK_ACK} primitive.  The final state will be
@psta{NS_DATA_XFER} for the accepting Stream and @psta{NS_IDLE} or @psta{NS_WRES_CIND} for the
listening Stream when the listening Stream is different than the accepting Stream and depending upon
whether there are additional outstanding connection indications.
@item @emph{Unsuccessful (Non-fatal errors):}
Errors are indicated with the @prim{N_ERROR_ACK} primitive.  The applicable non-fatal errors are
defined as follows:
@multitable @columnfractions .2 .7
@item @perr{NBADOPT} @tab
The options were in an incorrect format, or they contained illegal information.
@item @perr{NBADQOSPARAM} @tab
The QOS parameter values specified are outside the range supported by the NS provider.
@item @perr{NBADQOSTYPE} @tab
The QOS structure type is not supported by the NS provider.
@item @perr{NBADTOKEN} @tab
The token specified is not associated with an open Stream.
@item @perr{NACCESS} @tab
The user did not have proper permissions for the use of the options or the token or response
identifier.
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NBADDATA} @tab
The amount of user data specified was outside the range supported by the NS provider.
@item @perr{NBADSEQ} @tab
The sequence number specified in the primitive was incorrect or illegal.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@end multitable
@end itemize

@page
@node N_CONN_CON
@subsubsection Network Connection Confirm
@subsubheading N_CONN_CON
@prindex N_CONN_CON
This primitive indicates to the source NS user that the network connect request has been confirmed
on the specified responding address.
@subsubheading Format
The format of the @prim{N_CONN_CON} primitive is one @msg{M_PROTO} message block followed by one or
more @msg{M_DATA} message blocks (for NS user data).  The specification of the NS user data is optional.

The NS user can send any integral number of octets of NS user data within a range supported by the
NS provider (@pxref{N_INFO_ACK}).  The NS user data will only be present if the corresponding
@prim{N_CONN_RES} had NS user data specified with it, and their data will always be identical.

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_CONN_CON */
        np_ulong RES_length;            /* responding address length */
        np_ulong RES_offset;            /* responding address offset */
        np_ulong CONN_flags;            /* bit masking for options flags */
        np_ulong QOS_length;            /* length of QOS parameter values */
        np_ulong QOS_offset;            /* offset of QOS parameter values */
} N_conn_con_t;
@end verbatim
@tpindex N_conn_con_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_CONN_CON}.
@item @parm{RES_length} @tab
Indicates the length of the responding address.  This field conveys the network address of the NS
user entity to which the NC has been established.  The semantics of the values in the
@prim{N_CONN_CON} is identical to the values in @prim{N_CONN_RES}.  Under certain circumstances,
such as call redirection, generic addressing, etc., the value of this parameter may be different
from the destination address parameter specification in the corresponding @prim{N_CONN_REQ}.
@item @parm{RES_offset} @tab
Indicates the offset of the responding address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{CONN_flags} @tab
Indicates the connect options flags associated with the connect confirmation.  (See ``Flags''
below.)
@item @parm{QOS_length} @tab
Indicates the length of the Quality of Service parameters.  This field conveys the QOS parameter
values selected by the responding NS user.  If the NS provider does not support or cannot determine
the selected value of the QOS parameter, its value will be set to @pval{QOS_UNKNOWN}.  If the NS
provider does not specify any QOS parameter values, the length of this field should be set to zero
(@samp{0}).
@item @parm{QOS_offset} @tab
Indicates the offset of the Quality of Service parameters from the beginning of the
@msg{M_PROTO} message block.
@end multitable

@subsubheading Flags

@table @pval
@item REC_CONF_OPT
The receipt confirmation selection parameter indicates the use/availability of the receipt
confirmation service on the NC.  The receipt confirmation service must be provided in the network
service to be used on the NC.
@item EX_DATA_OPT
The expedited data selection parameter indicates the use/availability of the expedited data transfer
service on the NC.  The expedited data transfer service must be provided by the NS provider for it
to be used on the NC.
@end table

@subsubheading Valid States

This primitive is valid in state @psta{NS_WCON_CREQ}.

@subsubheading New State

The new state is @psta{NS_DATA_XFER}.

@page
@node Normal Data Transfer Phase
@subsection Normal Data Transfer Phase

@menu
* N_DATA_REQ::
* N_DATA_IND::
@end menu

The data transfer service primitives provide for an exchange of NS user data known as NSDUs, in
either direction or in both directions simultaneously on an NC.  The network service preserves both
the sequence and the boundaries of the NSDUs (when the NS provider supports NSDUs).

@node N_DATA_REQ
@subsubsection Normal Data Transfer Request
@subsubheading N_DATA_REQ
@prindex N_DATA_REQ
This user-originated primitive specifies to the NS provider that this message contains NS user data.
It allows the transfer of NS user data between NS users without modification by the NS provider.
The NS user must send any integral number of octets of data greater than zero.  In a case where the
size of the NSDU exceeds the NIDU (as specified by the size of the @parm{NIDU_size} parameter of the
@prim{N_INFO_ACK} primitive), the NSDU may be broken up into more than one NIDU.  When an NSDU is
broken up into more than one NIDU, the @pval{N_MORE_DATA_FLAG} will be set on each NIDU except the
last one.  The @pval{N_RC_FLAG} may only be set on the last NIDU.
@subsubheading Format
The format of the message is one or more @msg{M_DATA} message blocks.  Use of a @msg{M_PROTO}
message block is optional.  The @msg{M_PROTO} message block is used for two reasons:

@enumerate
@item to indicate that the NSDU is broken into more than one NIDUs, and that the data carried in the
following @msg{M_DATA} message block constitutes one NIDU;
@item to indicate whether receipt confirmation is desired for the NSDU.
@end enumerate

@b{Guidelines for use of @msg{M_PROTO}:}

The following guidelines must be followed with respect to the use of the @msg{M_PROTO} message
block:

@enumerate
@item The @msg{M_PROTO} message block need not be present when the NSDU size is less than or equal
to the NIDU size and one of the following is true:
@itemize ---
@item receipt confirmation has been negotiated for non-user (with the @prim{N_CONN_REQ} and
@prim{N_CONN_RES} primitives); or
@item receipt confirmation has been successfully negotiated for use or non-use and the default
selection as specified with the @prim{N_OPTMGMT_REQ} primitive is to be used.
@end itemize
@item The @msg{M_PROTO} message block must be present when:
@itemize ---
@item the NSDU size is greater than the NIDU size;
@item receipt confirmation has been successfully negotiated for use and the default selection as
specified with the @prim{N_OPTMGMT_REQ} primitive needs to be overridden.
@end itemize
@end enumerate

The structure of the @msg{M_PROTO} message block, if present, is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DATA_REQ */
        np_ulong DATA_xfer_flags;       /* data transfer flags */
} N_data_req_t;

/* Data Transfer Flags */
#define N_MORE_DATA_FLAG    0x00000001L
#define N_RC_FLAG           0x00000002L
@end verbatim
@tpindex N_data_req_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_DATA_REQ}.
@item @parm{DATA_xfer_flags} @tab
Specifies the data transfer flags associated with the data.  (See ``Flags'' below.)
@end multitable

@subsubheading Flags

@table @pval
@item N_MORE_DATA_FLAG
When set, this flag indicates that the next @prim{N_DATA_REQ} primitive (NISDU) is also part of this
NSDU.
@item N_RC_FLAG
By setting this flag on the @prim{N_DATA_REQ}, the originating NS user can request confirmation of
receipt of the @prim{N_DATA_REQ} primitive.  The receipt is provided by the @prim{N_DATACK_IND}
primitive.  The parameter may only be present if use of Receipt Confirmation was agreed by both NS
users and the NS provider during NC establishment.

@end table

@subsubheading Valid States

This primitive is valid in the @psta{NS_DATA_XFER} state.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate a fatal error.  This
is indicated to the NS user with a @msg{M_ERROR} @cite{STREAMS} message type (specifying an error
number value of @errno{EPROTO}) that results in the failure of all system calls on that Stream.  The
applicable errors are defined as follows:

@table @errno
@item EPROTO
This indicates one of the following unrecoverable protocol conditions:
@itemize ---
@item The network interface was found to be in an incorrect state.
@item The amount of NS user data associated with the primitive is outside the range supported by the
NS provider (as specified by the @parm{NIDU_size} parameter of the @prim{N_INFO_ACK} primitive).
@item The options requested are either not supported by the NS provider or its use not specified
with the @prim{N_CONN_REQ} primitive.
@item The @msg{M_PROTO} message block was not followed by one or more @msg{M_DATA} message blocks.
@item The amount of NS user data associated with the current NSDU is outside the range supported by
the NS provider (as specified by the @parm{NSDU_size} parameter in the @prim{N_INFO_ACK} primitive.)
@item The @pval{N_RC_FLAG} and @pval{N_MORE_DATA_FLAG} were both set in the primitive, or the flags
field contained an unknown value.
@end itemize
@end table

@emph{NOTE:}  If the interface is in the @psta{NS_IDLE} or @psta{NS_WRES_RIND} states when the
provider receives the @prim{N_DATA_REQ} primitive, then the NS provider should discard the request
without generating a fatal error.

@page
@node N_DATA_IND
@subsubsection Normal Data Transfer Indication

@subsubheading N_DATA_IND
@prindex N_DATA_IND
This network-provider-originated primitive indicates to the NS user that this message contains NS
user data.  As in the @prim{N_DATA_REQ} primitive, the NSDU can be segmented into more than one
NIDUs.  The NIDUs are associated with the NSDU by using the @pval{N_MORE_DATA_FLAG}.  The
@pval{N_RC_FLAG} is allowed to be set only on the last NIDU.
@subsubheading Format
The format of the message is one or more @msg{M_DATA} message blocks.  The value of the NS user data
field is always the same as that supplied in the corresponding @prim{N_DATA_REQ} primitive at the
peer service access point.  Use of @msg{M_PROTO} message blocks is optional (see guidelines under
@pxref{N_DATA_REQ}).

The structure of the @msg{M_PROTO} message block, if present, is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DATA_IND */
        np_ulong DATA_xfer_flags;       /* data transfer flags */
} N_data_ind_t;

/* Data Transfer Flags */
#define N_MORE_DATA_FLAG    0x00000001L
#define N_RC_FLAG           0x00000002L
@end verbatim
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_DATA_IND}.
@item @parm{DATA_xfer_flags} @tab
Indicates the data transfer flags associated with the data.  (See ``Flags'' below.)
@end multitable

@subsubheading Flags

@table @pval
@item N_MORE_DATA_FLAG
When set, indicates that the next @prim{N_DATA_IND} message (NIDU) is part of this NSDU.
@item N_RC_FLAG
The value of the parameter may indicate either that confirmation is requested or that it is not
requested.  The parameter is allowed to be set only if use of Receipt Confirmation was agreed to
between both the NS users and the NS provider during NC establishment.  The value of this parameter
is always identical to that supplied in the corresponding @prim{N_DATA_REQ} primitive.
@end table

@subsubheading Valid States

This primitive is valid in state @psta{NS_DATA_XFER}.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).

@page
@node Receipt Confirmation Service Primitives
@subsection Receipt Confirmation Service Primitives

@menu
* N_DATACK_REQ::
* N_DATACK_IND::
@end menu

The receipt confirmation service is requested by the confirmation request parameter on the
@prim{N_DATA_REQ} primitive.  For each and every NSDU with the confirmation request parameter set,
the receiving NS user should return an @prim{N_DATACK_REQ} primitive.  Such acknowledgements should
be issued in the same sequence as the corresponding @prim{N_DATA_IND} primitives are received, and
are to be conveyed by the NS provider in such a way so as to preserve them distinct from any
previous or subsequent acknowledgements.  The NS user may thus correlate them with the original
requests by counting.  When an NSDU has been segmented into more than one NIDUs, only the last NIDU
is allowed to request receipt confirmation.  @prim{N_DATACK_REQ} primitive will not be subject to
the flow control affecting @prim{N_DATA_REQ} primitives at the same NC endpoint.
@prim{N_DATACK_IND} primitives will not be subject to the flow control affecting @prim{N_DATA_IND}
primitives at the same NC endpoint.

The use of the receipt confirmation service must be agreed to by the two NS users of the NC and the
NS provider during the NC establishment by using the @pval{DEFAULT_RC} parameter on the
@prim{N_CONN_REQ} or @prim{N_CONN_RES} primitive.

@node N_DATACK_REQ
@subsubsection Data Acknowledgement Request
@subsubheading N_DATACK_REQ
@prindex N_DATACK_REQ
This is a user-originated primitive that requests that the network provider acknowledge the
@prim{N_DATA_IND} that had previously been received with the receipt confirmation parameter set.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DATACK_REQ */
} N_datack_req_t;
@end verbatim
@tpindex N_datack_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_DATACK_REQ}.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_DATA_XFER}.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate a fatal
(unrecoverable) error.  This is indicated via an @msg{M_ERROR} @cite{STREAMS} message type (issued
to the NS user specifying the error number value of @errno{EPROTO}), which results in the failure of
all system calls on that Stream.  The allowable errors are as follows:

@multitable @columnfractions .2 .8
@item @errno{EPROTO} @tab
This indicates the following unrecoverable protocol condition:
@itemize ---
@item The network interface was found to be in an incorrect state.
@end itemize
@end multitable

@emph{NOTE:}  If the interface is in the @psta{NS_IDLE} state when the provider receives the
@prim{N_DATACK_REQ} primitive, then the NS provider should discard the request without generating a
fatal error.  If the NS provider had no knowledge of a previous @prim{N_DATA_IND} with the receipt
confirmation flag set, then the NS provider should just ignore the request without generating a
fatal error.

@page
@node N_DATACK_IND
@subsubsection Data Acknowledgement Indication
@subsubheading N_DATACK_IND
@prindex N_DATACK_IND
This is a NS provider originated primitive that indicates to the network service user that the
remote network service user has acknowledged the data that had previously been sent with the receipt
confirmation set.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DATACK_IND */
} N_datack_ind_t;
@end verbatim
@tpindex N_datack_ind_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_DATACK_IND}.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_DATA_XFER}.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).

@page
@node Expedited Data Transfer Service
@subsection Expedited Data Transfer Service

@menu
* N_EXDATA_REQ::
* N_EXDATA_IND::
@end menu

The expedited data transfer service provides a further means of information exchange on an NC in
both directions simultaneously.  The transfer of expedited network service data unit (ENSDU) is
subject to separate flow control from that applying to NS user data.  (However, a separate
@cite{STREAMS} message type for expedited data is not available with @cite{UNIX@registeredsymbol{}
System V Release 3.1}.  Until a new @cite{STREAMS} message type is provided, expedited data will be
implemented via queue manipulation).  The NS provider should guarantee that an expedited-NSDU will
not be delivered after any subsequently issued NSDU or expedited-NSDU on that NC.  The relationship
between normal and expedited data is shown in @tabref{2}.  Expedited data can still be delivered
when the receiving NS user is not accepting normal data (however this cannot be guaranteed if there
are blockages occurring in the lower layers).  The expedited data transfer service is a NS provider
option, and its use must be agreed by the two NS users of the NC and the NS provider during NC
establishment by using the @pval{EX_DATA_OPT} parameter on the @prim{N_CONN_REQ} and
@prim{N_CONN_RES} primitives.

@node N_EXDATA_REQ
@subsubsection Expedited Data Transfer Request
@subsubheading N_EXDATA_REQ
@prindex N_EXDATA_REQ
This is an NS user originated primitive and is used to indicate to the network provider that the
message block contains an ENSDU.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block, followed by one or more @msg{M_DATA}
message blocks.  The NS user must send an integral number of octets of data within the range
supported by the NS provider (@pxref{N_INFO_ACK}).

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_EXDATA_REQ */
} N_exdata_req_t;
@end verbatim
@tpindex N_exdata_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_EXDATA_REQ}.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_DATA_XFER}.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).

@subsubheading Acknowledgements

This primitive does not require any acknowledgements, although it may generate a fatal
(unrecoverable) error.  This is indicated with an @msg{M_ERROR} @cite{STREAMS} message type (issued
to the NS user with the error number value of @errno{EPROTO}), which results in the failure of all
system calls on that Stream.  The applicable errors are as follows:

@multitable @columnfractions .2 .8
@item @errno{EPROTO} @tab
This indicates one of the following unrecoverable protocol conditions:
@itemize ---
@item The network interface was found to be in an incorrect state.
@item The amount of NS user data associated with the primitive defines an expedited network service
data unit of a size that is outside the range supported by the NS provider.
@item Expedited data transfer is either not supported by the NS provider or not requested with the
@prim{N_CONN_REQ} primitive.
@end itemize
@end multitable

@emph{NOTE:}  If the interface is in the @psta{NS_IDLE} or @psta{NS_WRES_RIND} states when the
provider receives the @prim{N_EXDATA_REQ} primitive, then the NS provider should discard the request
without generating a fatal error.

@page
@node N_EXDATA_IND
@subsubsection Expedited Data Transfer Indication
@subsubheading N_EXDATA_IND
@prindex N_EXDATA_IND
This is a NS provider originated primitive and is used to indicate to the NS user that this message
contains an ENSDU.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block, followed by one or more @msg{M_DATA}
message blocks.  The value of the data in the @msg{M_DATA} message blocks is identical to that
supplied with the corresponding @prim{N_EXDATA_REQ} primitive.

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_EXDATA_IND */
} N_exdata_ind_t;
@end verbatim
@tpindex N_exdata_ind_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_EXDATA_IND}.
@end multitable

@subsubheading Valid States

This primitive is valid in the state @psta{NS_DATA_XFER}.

@subsubheading New State

The resulting state remains the same (@psta{NS_DATA_XFER}).


@page
@node Reset Service
@subsection Reset Service

@menu
* N_RESET_REQ::
* N_RESET_IND::
* N_RESET_RES::
* N_RESET_CON::
@end menu

The reset service can be used by the NS user to resynchronize the use of the NC; or by the NS
provider to report detected loss of data unrecoverable within the network service.

All loss of data that does not involve loss of the NC is reported in this way.  Invocation of the
reset service will unblock the flow of NSDUs and ENSDUs in case of congestion of the NC; it will
cause the NS provider to discard NSDUs, ENSDUs, or confirmations of receipt associated with the NC
(see @tabref{1}), and to notify any NS user or users that did not invoke reset that a reset has
occurred.  The service will be completed in finite time irrespective of the acceptance of the NSDUs,
ENSDUs, and confirmations of receipt by the NS users.

@node N_RESET_REQ
@subsubsection Reset Request
@subsubheading N_RESET_REQ
@prindex N_RESET_REQ
This user-originated primitive requests that the NS provider reset the network connection.
@subsubheading Format
The format of this primitive is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_RESET_REQ */
        np_ulong RESET_reason;          /* reason for reset */
} N_reset_req_t;
@end verbatim
@tpindex N_reset_req_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_RESET_REQ}.
@item @parm{RESET_reason} @tab
Specifies the reason for the reset.  (See ``Reasons'' below.)
@end multitable

@subsubheading Valid States

This primitive is valid in the @psta{NS_DATA_XFER} state.

@subsubheading New State

The resulting state is @psta{NS_WACK_RREQ}.

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon receipt of this
primitive:

@itemize ---
@item @emph{Successful:}
This primitive does not require an immediate acknowledgement, although when the resynchronization
completes successfully, an @prim{N_RESET_CON} primitive is issued to the NS user that issued the
@prim{N_RESET_REQ}.
@item @emph{Unsuccessful (Non-fatal errors):}
A non-fatal error is acknowledged with the @prim{N_ERROR_ACK} primitive.  In this case the resulting
state remains unchanged.  The following non-fatal error codes are valid:
@multitable @columnfractions .2 .7
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated with the
@prim{N_ERROR_ACK} primitive.
@end multitable
@end itemize

@emph{NOTE:}  If the interface is in the @psta{NS_IDLE} state when the provider receives the
@prim{N_RESET_REQ} primitive, then the NS provider should discard the message without generating an
error.

@page
@node N_RESET_IND
@subsubsection Reset Indication
@subsubheading N_RESET_IND
@prindex N_RESET_IND
This network-provider-originated primitive indicates to the NS user that the network connection has
been reset.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_RESET_IND */
        np_ulong RESET_orig;            /* reset originator */
        np_ulong RESET_reason;          /* reason for reset */
} N_reset_ind_t;
@end verbatim
@tpindex N_reset_ind_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_RESET_IND}.
@item @parm{RESET_orig} @tab
Indicates the source of the reset.  (See ``Reasons'' below.)
@item @parm{RESET_reason} @tab
Indicates the reason fro the reset.  (See ``Reasons'' below.)
@end multitable

@subsubheading Valid States

This primitive is valid in the @psta{NS_DATA_XFER} state.

@subsubheading New State

The new state is @psta{NS_WRES_RIND}.


@page
@node N_RESET_RES
@subsubsection Reset Response
@subsubheading N_RESET_RES
@prindex N_RESET_RES
This user-originated primitive indicates that the NS user has accepted a reset request.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block and is structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_RESET_RES */
} N_reset_res_t;
@end verbatim
@tpindex N_reset_res_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_RESET_RES}.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_WRES_RIND}.

@subsubheading New State

The new state is @psta{NS_WACK_RRES}.

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon receipt of this
primitive:

@itemize ---
@item @emph{Successful:}
The successful completion of this primitive is indicated with the @prim{N_OK_ACK} primitive.  This
results in the data transfer state (@psta{NS_DATA_XFER}).
@item @emph{Unsuccessful (Non-fatal errors):}
An unsuccessful completion of this primitive is indicated with the @prim{N_ERROR_ACK} primitive.
The resulting state remains the same.  The following non-fatal error codes are valid:
@multitable @columnfractions .2 .7
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
@prim{N_ERROR_ACK} primitive.
@end multitable
@end itemize

@emph{NOTE:}  If the interface is in the @psta{NS_IDLE} state when the provider receives the
@prim{N_RESET_RES} primitive, then the NS provider should discard the message without generating an
error.

@page
@node N_RESET_CON
@subsubsection Reset Confirmation
@subsubheading N_RESET_CON
@prindex N_RESET_CON
This NS provider-originated primitive indicates to the network user that initiated the reset, that
the reset request has been confirmed.  The NS providers is allowed to issue the @prim{N_RESET_CON}
primitive to the NS user that initiated the reset even before receiving a @prim{N_RESET_RES}.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_RESET_CON */
} N_reset_con_t;
@end verbatim
@tpindex N_reset_con_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_RESET_CON}.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_WCON_RREQ}.

@subsubheading New State

The resulting state is @psta{NS_DATA_XFER}.

@page
@node Network Connection Release Phase
@subsection Network Connection Release Phase

@menu
* N_DISCON_REQ::
* N_DISCON_IND::
@end menu

The NC release service primitives are used to release a NC.  The release may be performed by:

@itemize ---
@item either or both of the NS users to release an established NC;
@item the NS provider to release an established NC (all failures to maintain an NC are indicated in
this manner);
@item the destination NS user to reject an @prim{N_CONN_IND};
@item by the NS provider to indicate its inability to establish a requested NC.
@end itemize

An NC release is permitted at any time regardless of the current phase of the NC.  Once an NC
release procedure has been invoked, the NC will be released; a request for release cannot be
rejected.  The network service does not guarantee delivery of any data once the NC release phase is
entered (see @tabref{1}).

@node N_DISCON_REQ
@subsubsection Disconnect Request
@subsubheading N_DISCON_REQ
@prindex N_DISCON_REQ
This user-originated primitive requests that the NS provider deny a request for a network
connection, or disconnect an existing connection.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block, followed by one or more @msg{M_DATA}
message blocks (for NS user data).  The NS user data may be lost if the NS provider initiates
release before the @prim{N_DISCON_IND} is delivered.  Therefore, the NS user data parameter is
present only if the originator parameters (@pxref{N_DISCON_IND}) indicates that the release was
originated by an NS user.  The NS user may send any integral number of octets of data within a range
supported by the NS provider (@pxref{N_INFO_ACK}).

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DISCON_REQ */
        np_ulong DISCON_reason;         /* reason */
        np_ulong RES_length;            /* responding address length */
        np_ulong RES_offset;            /* responding address offset */
        np_ulong SEQ_number;            /* sequence number */
} N_discon_req_t;
@end verbatim
@tpindex N_discon_req_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_DISCON_REQ}.
@item @parm{DISCON_reason} @tab
Specifies the disconnect reason.  (See ``Reason'' below.)
@item @parm{RES_length} @tab
Specifies the length of the responding address.  The responding address parameter is an optional
parameter, and is present in the primitive only in the case where the primitive is used to indicate
rejection of an NC establishment attempt by an NS user.  The responding address parameter conveys
the network address of the NS user entity from which the @prim{N_DISCON_REQ} was issued and under
certain circumstances (e.g. call redirection, generic addressing, etc.) may be different from the
@dfn{Destination Address} in the corresponding @prim{N_CONN_REQ} primitive.
@item @parm{RES_offset} @tab
Specifies the offset of the responding address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{SEQ_number} @tab
Specifies the connection indication being disconnected.  When non-zero, it identifies the sequence
number of the @prim{N_CONN_IND} message being rejected.  This number is used by the NS provider to
associate the @prim{N_DISCON_REQ} with an unacknowledged @prim{N_CONN_IND} that is to be rejected.
If the @prim{N_DISCON_REQ} is rejecting a NC that is already established (or rejecting a
@prim{N_CONN_REQ} that the NS user had previously sent and has not yet been confirmed), then this
field should have a value of zero (@samp{0}).
@end multitable

@subsubheading Valid States

This primitive is valid in states @psta{NS_WCON_CREQ}, @psta{NS_WRES_CIND}, @psta{NS_DATA_XFER},
@psta{NS_WCON_RREQ} and @psta{NS_WRES_RIND}.

@subsubheading New State

The new state depends on the original state (see @tabref{B-8}).

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon receipt of this
primitive:

@itemize ---
@item @emph{Successful:}
Successful completion is indicated with the @prim{N_OK_ACK} primitive.
@item @emph{Unsuccessful (Non-fatal errors):}
Errors are indicated with the @prim{N_ERROR_ACK} primitive.  The applicable non-fatal errors are as
follows:
@multitable @columnfractions .2 .7
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@item @perr{NBADDATA} @tab
The amount of user data specified was outside the range supported by the NS provider.
@item @perr{NSYSERR} @tab
A system error has occurred and the @cite{UNIX@registeredsymbol{}} system error is indicated in the
primitive.
@item @perr{NBADSEQ} @tab
The specified sequence number referred to an invalid @prim{N_CONN_IND} message, or the
@prim{N_DISCON_REQ} is rejecting an NC that is already established (or rejecting an
@prim{N_CONN_REQ} that the NS user had previously sent and has not yet been confirmed) and the value
of the sequence number is not @samp{0}.
@end multitable
@end itemize

@page
@node N_DISCON_IND
@subsubsection Disconnect Indication
@subsubheading N_DISCON_IND
@prindex N_DISCON_IND
This network-provider originated primitive indicates to the NS user that either a request for
connection has been denied or an existing connection has been disconnected.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block, followed by one or more @msg{M_DATA}
blocks.  The value of the NS user data parameter is identical to the value in the corresponding
@prim{N_DISCON_REQ} primitive.  The NS user data parameter is present only if the originator
parameter indicates that the release was initiated by the NS user.

The structure of the @msg{M_PROTO} message block is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_DISCON_IND */
        np_ulong DISCON_orig;           /* originator */
        np_ulong DISCON_reason;         /* reason */
        np_ulong RES_length;            /* address length */
        np_ulong RES_offset;            /* address offset */
        np_ulong SEQ_number;            /* sequence number */
} N_discon_ind_t;
@end verbatim
@tpindex N_discon_ind_t
@end smallexample

@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_DISCON_REQ}.
@item @parm{DISCON_orig} @tab
Indicates the disconnect source.  (See ``Reason'' below.)
@item @parm{DISCON_reason} @tab
Indicates the disconnect reason.  (See ``Reason'' below.)
@item @parm{RES_length} @tab
Indicates the length of the responding address.  The responding address parameter is an optional
parameter, and is present in the primitive only in the case where the primitive is used to indicate
rejection of an NC establishment attempt by an NS user.  When not present, the value of this
parameter is zero.  When present, the value of the disconnect address parameter is identical to that
supplied with the corresponding @prim{N_DISCON_REQ} primitive.
@item @parm{RES_offset} @tab
Indicates the offset of the responding address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{SEQ_number} @tab
Indicates the connection indication being disconnected.  When its value is non-zero, it identifies
the sequence number associated with the @prim{N_CONN_IND} primitive that is being aborted.

The value of this parameter must be zero when:

@enumerate a
@item indicating the rejection of a previously issued @prim{N_CONN_REQ} primitive; or
@item indicating the release of a NC that is already successfully established.
@end enumerate

When this field is non-zero and its value is the same as the sequence number assigned to an
unacknowledged @prim{N_CONN_IND}, it indicates that the NS provider is canceling the unacknowledged
@prim{N_CONN_IND}.
@end multitable

@subsubheading Valid States

The valid states are as follows:

@multitable @columnfractions .2 .8
@item @psta{NS_WCON_CREQ} @tab
Waiting confirmation of connection request. 
@item @psta{NS_WRES_CIND} @tab
Waiting response of connection indication.
@item @psta{NS_DATA_XFER} @tab
Waiting response of data transfer.
@item @psta{NS_WCON_RREQ} @tab
Waiting confirmation of reset request.
@item @psta{NS_WRES_RIND} @tab
Waiting response to reset indication.
@end multitable

@subsubheading New State

The new state is @psta{NS_IDLE} (except when number of outstanding connect indications is greater
than 1, in which case the resulting state is @psta{NS_WRES_CIND}).

@page
@node CLNS Primitive Format and Rules
@section CLNS Primitive Format and Rules

@menu
* Unit Data Transfer::
* Unit Data Error::
@end menu

This section describes the format of the CLNS primitives and the rules associated with these
primitives.  The values of the QOS parameters associated with each unit data transmission are
selected with the @prim{N_OPTMGMT_REQ} primitive.

@node Unit Data Transfer
@subsection Unit Data Transfer

@node N_UNITDATA_REQ
@subsubsection Unit Data Request
@subsubheading N_UNITDATA_REQ
@prindex N_UNITDATA_REQ
This primitive requests that the NS provider send the specified datagram to the specified
destination.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block followed by one or more @msg{M_DATA}
message blocks.  The @msg{M_PROTO} message block is structured as followed:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_UNITDATA_REQ */
        np_ulong DEST_length;           /* destination address length */
        np_ulong DEST_offset;           /* destination address offset */
        np_ulong RESERVED_field[2];     /* reserved field for DLPI compatibility */
} N_unitdata_req_t;
@end verbatim
@tpindex N_unitdata_req_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Specifies the primitive type: always @prim{N_UNITDATA_REQ}.
@item @parm{DEST_length} @tab
Specifies the length of the destination address.
@item @parm{DEST_offset} @tab
Specifies the offset of the destination address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{RESERVED_field[0]} @tab
Specified the length of the Quality of Service parameters.
@item @parm{RESERVED_field[1]} @tab
Specified the offset of the Quality of Service parameters from the beginning of the @msg{M_PROTO}
message block.
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_IDLE}.

@subsubheading New State

The resulting state remains unchanged.

@subsubheading Acknowledgements

The NS provider should generate one of the following acknowledgements upon receipt of this
primitive:

@itemize ---
@item @emph{Successful:}
There is no acknowledgement for the successful completion of this primitive.
@item @emph{Unsuccessful (Non-fatal errors):}
If a non-fatal error occurs, it is the responsibility of the NS provider to report it with the
@prim{N_UDERROR_IND} primitive.  The following non-fatal error codes are allowed:
@multitable @columnfractions .2 .7
@item @perr{NBADADDR} @tab
The network address as specified in the primitive was in an incorrect format, or the address
contained illegal information.
@item @perr{NBADDATA} @tab
The amount of user data specified was outside the range supported by the NS provider.
@item @perr{NOUTSTATE} @tab
The primitive was issued from an invalid state.
@end multitable
@item @emph{Fatal Error:}
Fatal errors are indicated with an @msg{M_ERROR} @cite{STREAMS} message type (issued to the NS user with
the error number value of @errno{EPROTO}), that results in the failure of all
@cite{UNIX@registeredsymbol{}} system calls on the Stream.  The fatal errors are as follows:
@multitable @columnfractions .2 .7
@item @errno{EPROTO} @tab
This indicates one of the following unrecoverable protocol conditions:
@itemize ---
@item The network service interface was found to be in an incorrect state.
@item The amount of NS user data associated with the primitive defines a network service data unit
larger than that allowed by the NS provider.
@end itemize
@end multitable
@end itemize

@page
@node N_UNITDATA_IND
@subsubsection Unit Data Indication
@subsubheading N_UNITDATA_IND
@prindex N_UNITDATA_IND
This primitive indicates to the NS user that a datagram has been received from the specified source
address.
@subsubheading Format
The format of the message is one @msg{M_PROTO} message block followed by one or more @msg{M_DATA}
message blocks containing at least one byte of data.  The format of the @msg{M_PROTO} is as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_UNITDATA_IND */
        np_ulong SRC_length;            /* source address length */
        np_ulong SRC_offset;            /* source address offset */
        np_ulong DEST_length;           /* source address length */
        np_ulong DEST_offset;           /* source address offset */
        np_ulong ERROR_type;            /* reserved field for DLPI compatibility */
} N_unitdata_ind_t;
@end verbatim
@tpindex N_unitdata_ind_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_UNITDATA_IND}.
@item @parm{SRC_length} @tab
Indicates the length of the source network address.  This address is the same as the value
associated with the Stream on which the @prim{N_UNITDATA_REQ} was issued.
@item @parm{SRC_offset} @tab
Indicates the offset of the source address from the beginning of the @msg{M_PROTO} message block.
@item @parm{DEST_length} @tab
Indicates the length of the destination address.  The address is the same as in the corresponding
@prim{N_UNITDATA_REQ} primitive.
@item @parm{DEST_offset} @tab
Indicates the offset of the destination address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{ERROR_type} @tab
Specifies the reason for the error.  The possible values are:
@table @pval
@item N_UD_CONGESTION
This packet experienced congestion during its delivery.
@end table
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_IDLE}.

@subsubheading New State

The resulting state remains unchanged.

@page
@node Unit Data Error
@subsection Unit Data Error

@node N_UDERROR_IND
@subsubsection Unit Data Error Indication
@subsubheading N_UDERROR_IND
@prindex N_UDERROR_IND
This primitive indicates to the NS user that a datagram with the specified destination address and
QOS parameters has resulted in an error condition.
@subsubheading Format
The format of the primitive is one @msg{M_PROTO} message block, structured as follows:
@smallexample
@verbatim
typedef struct {
        np_ulong PRIM_type;             /* always N_UDERROR_IND */
        np_ulong DEST_length;           /* destination address length */
        np_ulong DEST_offset;           /* destination address offset */
        np_ulong RESERVED_field;        /* reserved field for DLPI compatibility */
        np_ulong ERROR_type;            /* error type */
} N_uderror_ind_t;
@end verbatim
@tpindex N_uderror_ind_t
@end smallexample
@subsubheading Parameters

@multitable @columnfractions .2 .8
@item @parm{PRIM_type} @tab
Indicates the primitive type: always @prim{N_UDERROR_IND}.
@item @parm{DEST_length} @tab
Indicates the length of the destination address.  The address is the same as in the corresponding
@prim{N_UNITDATA_REQ} primitive.
@item @parm{DEST_offset} @tab
Indicates the offset of the destination address from the beginning of the @msg{M_PROTO} message
block.
@item @parm{RESERVED_field} @tab
This field is reserved whose value must be set to zero.
@item @parm{ERROR_type} @tab
Indicates the reason for the error.  (See ``Errors'' below.)
@end multitable

@subsubheading Valid States

This primitive is valid in state @psta{NS_IDLE}.

@subsubheading New State

The resulting state remains unchanged.

@node Diagnostics Requirements
@chapter Diagnostics Requirements

Two error handling facilities should be provided to the network service user: one to handle
non-fatal errors, and the other to handle fatal errors.

@section Non-Fatal Error Handling Facility

These are errors that do not change the state of the network service interface as seen by the
network service user, and provide the user the option of reissuing the network service primitive
with the corrected options specification.  The non-fatal error handling is provided only to those
primitives that require acknowledgements, and uses the @prim{N_ERROR_ACK} to report these errors.
These errors retain the state of the network service interface the same as it was before the network
provider received the primitive that was in error.  Syntax errors and rule violations are reported
via the non-fatal error handling facility.

@section Fatal Error Handling Facility

These errors are issued by the NS provider when it detects errors that are not correctable by the
network service user, or if it is unable to report a correctable error to the network service user.
Fatal errors are indicated via the @cite{STREAMS} message type @msg{M_ERROR} with the
@cite{UNIX@registeredsymbol{}} system error @errno{EPROTO}.  The @msg{M_ERROR} @cite{STREAMS}
message type will result in the failure of all the @cite{UNIX@registeredsymbol{}} system calls on
the Stream.  The network service user can recover from a fatal error by having all the processes
close the files associated with the Stream, and then reopening them for processing.

@node Addendum for OSI Conformance
@unnumbered Addendum for OSI Conformance

This section describes the formats and rules that are specific to OSI.  The addendum must be used
along with the generic NPI as defined in the main document when implementing a NS provider that will
be configured with the OSI Transport Layer.

@section Quality of Service: Model & Description
The ``Quality of Service'' characteristics apply to both CONS as well as CLNS.

@subsection QOS Overview
QOS (Quality of Service) is described in terms of QOS parameters.  There are two types of QOS
parameters:

@enumerate 1

@item Those that are ``negotiated'' on a per-connection basis during NC establishment. (CLNS does
not support end-to-end QOS parameter negotiation).

@item Those that are not negotiated and their values are selected/determined by local management
methods.

@end enumerate

@tabref{8} summarizes the supported parameters both for connection-mode and connectionless network
service.  For more details on the definition of the QOS parameters, refer to CCITT X.213
(@pxref{X.213,,X.213}) and ISO 8348 (@pxref{ISO8348,,ISO8348}).

@tabfig{npi_tab8,8,Supported QoS Parameters}

@subsection QOS Parameter Formats

This section describes the formats of the QOS parameters for CONS and/or CLNS services.  The
requested QOS parameter values apply to complete NSDUs.

@subsubsection NC Establishment Delay

This parameter applies to CONS only.  It is defined as the maximum acceptable delay between a
@prim{N_CONN_REQ} and the corresponding @prim{N_CONN_CON} primitive.  NC establishment delay is
measured in milliseconds.

@subsubheading Format: 

@smallexample
@verbatim
long nc_estab_delay;        /* maximum NC establishment delay */
@end verbatim
@end smallexample

@table @parm

@item nc_estab_delay
Is the maximum acceptable delay value for NC establishment.

@end table

@subsubsection NC Establishment Failure Probability

This parameter applies to CONS only.  NC Establishment Failure Probability is the percent ratio
(rounded to the nearest integer) of total NC establishment failures to total NC establishment
attempts in a measurement sample.  A measurement sample consists of100 NC establishment attempts.

NC establishment failure occurs due to NS provider behaviour such as mis-connection, NC refusal, and
excessive delay.  NC establishment attempts that fail due to NS user behaviour such as error, NC
refusal, or excessive delay are excluded in calculating NC establishment failure probability.

@subsubheading Format:

@smallexample
@verbatim
long nc_estab_fail_prob;    /* maximum NC estab failure probability 
                             */
@end verbatim
@end smallexample

@table @parm

@item nc_estab_fail_prob
Is the maximum acceptable percent value (rounded to the nearest integer) for the NC establishment
failure probability.

@end table

@subsubsection Throughput

This parameter applies to CONS only, is specified separately for each direction of transfer, and has
end-to-end significance.  Throughput is defined in terms of at least two successfully transferred
NSDUs presented continuously to the NS provider at the maximum rate the NS provider can continuously
sustain, and unconstrained by flow control applied by the receiving NS user.  Given a sequence of
``n'' NSDUs (where is greater than or equal to two; suggested value is 100), throughput is defined
to be the smaller of:

@enumerate a

@item the number of NS user data octets contained in the last ``n-1'' NSDUs divided bythe time
between the first and the last @prim{N_DATA_REQ}s in the sequence; and

@item the number of NS user data octets contained in the last ``n-1'' NSDUs divided bythe time
between the first and the last @prim{N_DATA_IND}s in the sequence.

@end enumerate

Throughput should be measured and specified in bits per second.

@subsubheading Format:

@smallexample
@verbatim
typedef struct {
    long thru_targ_value;
    long thru_min_value;
} thru_values_t;
@end verbatim
@tpindex thru_values_t
@end smallexample

@table @parm

@item thru_targ_value
Specifies the requested QOS value for throughput for data transfer between the two NS users.

@item thru_min_value
Specifies the requested lowest acceptable QOS value for throughput between the two NS users.

@end table

@subsubsection Transit Delay

This parameter applies to CONS as well as CLNS.  Transit Delay is the elapsed time between a
@prim{N_DATA_REQ} and the corresponding @prim{N_DATA_IND} (calculated on successfully transferred
NSDUs only).  The pair of values specified for an NC applies to both directions of transfer.  The
specified values are averages (based on 100 samples using a NSDU size of 128 bytes).  Transit Delay
should be measured in milliseconds.

@subsubheading Format:

@smallexample
@verbatim
typedef struct {
    long td_targ_value;
    long td_max_value;
} td_values_t;
@end verbatim
@tpindex td_values_t
@end smallexample

@table @parm

@item td_targ_value
Specifies the desired QOS value for transit delay between the two NS users.

@item td_max_value
Specifies the maximum QOS value that the source NS user will agree for transit delay between the two
NS users.

@end table

@subsubsection Residual Error Rate

This parameter applies to both CONS as well as CLNS.  Residual Error Rate is the percent ratio
(rounded to the nearest integer) of total incorrect, lost, and duplicate NSDUs to total NSDUs
transferred across the NS boundary during a measurement period.  The measurement period will be 3600
seconds.

@subsubheading Format:

@smallexample
@verbatim
long residual_error_rate;   /* maximum acceptable residual error
                               rate */
@end verbatim
@end smallexample

@table @parm

@item residual_error_rate
Specifies the maximum acceptable percent value (rounded to the nearest integer) of the residual
error rate.

@end table

@subsubsection NC Resilience

This parameter applies to CONS only.  NC Resilience specifies the percent probability (rounded to
the nearest integer) of a NS provider invoked NC release or a NS provider invoked reset during a
specified time interval on an established NC.  The time interval will be 3600 seconds.

@subsubheading Format:

@smallexample
@verbatim
long nc_resilience;         /* maximum acceptable nc resilience */
@end verbatim
@end smallexample

@table @parm

@item nc_resilience
Specifies the maximum acceptable value for NC resilience.

@end table

@subsubsection Transfer Failure Probability

This parameter applies to CONS only.  It is the percent ratio (rounded to the nearest integer) of
total transfer failures to total transfer samples observed during a performance measurement.  A
transfer sample is a discrete observation of NS provider performance in transferring NSDUs between
specified sending and receiving NS user.  A transfer sample will last for the duration of the NC.  A
transfer failure is a transfer sample in which the observed performance is worse than the specified
minimum acceptable level.  A transfer failure is identified by comparing the measured values for the
supported performance parameters with specified transfer failure thresholds.  The three supported
performance parameters are throughput, transit delay, and residual error rate.

@subsubheading Format:

@smallexample
@verbatim
long xfer_fail_prob;        /* maximum xfer failure prob */
@end verbatim
@end smallexample

@table @parm

@item xfer_fail_prob
Specifies the maximum acceptable percent value (rounded to the nearest integer) for transfer failure
probability.

@end table

@subsubsection NC Release Delay

This parameter applies to CONS only.  NC Release Delay is defined as the maximum acceptable delay
between a NS user invoked @prim{N_DISCON_REQ} and the successful release of the NC at the peer NS
user.  NC Release Delay is specified independently for each NS user.  It does not apply in cases
where NC release is invoked by the NS provider.  NC release delay should be measured in
milliseconds.

@subsubheading Format:

@smallexample
@verbatim
long nc_rel_delay;          /* maximum nc release delay */
@end verbatim
@end smallexample

@table @parm

@item nc_rel_delay
Is the maximum acceptable value for NC release delay.

@end table

@subsubsection NC Release Failure Probability

This parameter applies to CONS only.  It is the percent ratio (rounded to the nearest integer) of
total NC release requests resulting in release failure to total NC release requests included in a
measurement sample.  A measurement sample consists of a 100NC release requests.  This parameter is
specified independently for each NS user.

A release failure is defined to occur for a particular NS user, if that user does not receive a
@prim{N_DISCON_IND} within a specified maximum NC release delay of the NS user issuing the
@prim{N_DISCON_REQ} (given that the former NS user has not issued a @prim{N_DISCON_REQ}).

@subsubheading Format:

@smallexample
@verbatim
long nc_rel_fail_prob;      /* maximum nc rel fail probability */
@end verbatim
@end smallexample

@table @parm

@item nc_rel_fail_prob
Is the maximum acceptable percent value (rounded to the nearest integer) of NC release failure
probability.

@end table

@subsubsection Protection

This parameter applies to both CONS and CLNS.  It specifies the extent to which the NS provider
attempts to prevent unauthorized monitoring or manipulation of NS user originated information.

@smallexample
@verbatim
/* Types of protection */
#define N_NO_PROT               0x00000000L     /* no protection */
#define N_PASSIVE_PROT          0x00000001L     /* protection
                                                   against passive
                                                   monitoring */
#define N_ACTIVE_PROT           0x00000002L     /* protection
                                                   against active
                                                   monitoring */
#define N_ACTIVE_PASSIVE_PROT   0x00000003L     /* maximum
                                                   protection */
@end verbatim
@end smallexample

Four protection options are provided:

@enumerate 1

@item No protection features;

@item Protection against passive monitoring;

@item Protection against modification, replay, addition, or deletion

@item Both 2 and 3.

@end enumerate

@subsubheading Format:

@smallexample
@verbatim
typedef struct {
    long protect_targ_value;    /* target protection */
    long protect_min_value; /* minimum protection */
} protection_values_t;
@end verbatim
@tpindex protection_values_t
@end smallexample

@table @parm

@item protect_targ_value
Specifies the target protection of the NS user originated information.

@item protect_min_value
Specifies the lowest quality acceptable of protection of the NS user originated information.

@end table

@subsubsection Priority

This parameter applies to both CONS and CLNS.

It specifies the target priority of:

@enumerate a

@item an NSDU in relation to any other NSDUs (for CLNS);

@item a NC (for CONS).  The number of priority levels is limited to 15 (where level 1 is the highest
priority and level 15 is the lowest priority).

@end enumerate

@subsubheading Format:

@smallexample
@verbatim
typedef struct {
    long priority_targ_value;   /* target priority */
    long priority_min_value;    /* minimum priority */
} priority_values_t;
@end verbatim
@tpindex priority_values_t
@end smallexample

@table @parm

@item priority_targ_value
Specifies the target NC priority level.

@item priority_min_value
Specifies the lowest quality acceptable of the NC priority level.

@end table

@subsubsection Maximum Acceptable Cost

This parameter applies to both CONS and CLNS.  It specifies the maximum acceptable cost in local
currency (composed of communications and end-system resource costs), or indicates to the NS provider
that it should choose the least expensive means available to it.

@subsubheading Format

@smallexample
@verbatim
long max_accept_cost;       /* acceptable cost maximum */

/* Choose least expensive means */
#define N_LEAST_EXPENSIVE 0x00000000L   /* choose least expensive
                                           means */
@end verbatim
@end smallexample

@table @parm

@item max_accept_cost
Specifies the maximum acceptable cost in local currency.

@end table

@subsection QOS Data Structures

The quality of services parameters are organized into six different structures for simplicity:

@table @pval

@item N_QOS_CO_RANGE1

Quality of service range requested for connection-mode service as used with the @prim{N_CONN_REQ}
and @prim{N_CONN_IND} primitives.

@item N_QOS_CO_SEL1

Quality of service values selected for the connection-mode service as used with the
@prim{N_CONN_RES} and @prim{N_CONN_CON} primitives.

@item N_QOS_CL_RANGE1

Range of quality of service values for connectionless-mode service as specified with the
@parm{QOS_range_length} and @parm{QOS_range_offset} parameters of the @prim{N_INFO_ACK} primitive.

@item N_QOS_CL_SEL1

Quality of service values supported/selected for connectionless-mode service as specified with the
@parm{QOS_length} and @parm{QOS_offset} parameters of the @prim{N_INFO_ACK} and the
@prim{N_OPTMGMT_REQ} primitives.

@item N_QOS_CO_OPT_RANGE1

Range of quality of service values for connection-mode service as specified with the
@parm{QOS_range_length} and @parm{QOS_range_offset} parameters of the @prim{N_INFO_ACK} primitive.

@item N_QOS_CO_OPT_SEL1

Default quality of service values supported/selected for connection-mode service as specified with
the @parm{QOS_length} and @parm{QOS_offset} parameters of the @prim{N_INFO_ACK} and the
@prim{N_OPTMGMT_REQ} primitives.

@end table

@subsubsection Structure N_QOS_CO_RANGE1
@vrindex N_QOS_CO_RANGE1

Structure @type{N_qos_co_range1} defines the QOS parameters that are transferred between the source
and destination NS users for a NC.  The format of this structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CO_RANGE */
    thru_values_t src_throughput_range; /* source throughput range */
    thru_values_t dest_throughput_range;        /* dest throughput
                                                   range */
    td_values_t transit_delay_range;    /* transit delay range */
    protection_values_t protection_range;       /* protection range 
                                                 */
    priority_values_t priority_range;   /* priority target */
} N_qos_co_range1_t;
@end verbatim
@tpindex N_qos_co_range1_t
@end smallexample

This structure should be used in the @parm{QOS_length} and @parm{QOS_offset} fields of the following
NPI primitives:

@itemize @bullet

@item @prim{N_CONN_REQ}

@item @prim{N_CONN_IND}

@end itemize

@subsubsection Structure N_QOS_CO_SEL1
@vrindex N_QOS_CO_SEL1

Structure @type{N_qos_co_sel1} defines the QOS parameters that are transferred between the
destination and source NS users for a NC.  The format of this structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CO_SEL */
    long src_throughput_sel;    /* source throughput selected */
    long dest_throughput_sel;   /* destination throughput selected */
    long transit_delay_sel; /* transit delay selected */
    long protection_sel;    /* NC protection selected */
    long priority_sel;      /* NC priority selected */
} N_qos_co_sel1_t;
@end verbatim
@tpindex N_qos_co_sel1_t
@end smallexample

This structure should be used in the @parm{QOS_length} and @parm{QOS_offset} fields of the following
NPI primitives:

@itemize @bullet

@item @prim{N_CONN_RES}

@item @prim{N_CONN_CON}

@end itemize

@subsubsection Structure N_QOS_CL_RANGE1
@vrindex N_QOS_CL_RANGE1

Structure @type{N_qos_cl_range1} defines the range of QOS parameter values that are supported by the
NS provider.  The format of the structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CL_RANGE */
    td_values_t transit_delay_max;      /* maximum transit delay */
    long residual_error_rate;   /* residual error rate */
    protection_values_t protection_range;       /* target
                                                   protection */
    priority_values_t priority_range;   /* target priority */
    long max_accept_cost;   /* maximum acceptable cost */
} N_qos_cl_range1_t;
@end verbatim
@tpindex N_qos_cl_range1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item @parm{QOS_range_length} and @parm{QOS_range_offset} fields of the @prim{N_INFO_ACK} primitive;

@end itemize

@subsubsection Structure N_QOS_CL_SEL1
@vrindex N_QOS_CL_SEL1

Structure @type{N_qos_cl_sel1} defines the QOS parameters values that will apply to each unitdata
transmission between the CLNS users.  The format of the structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CL_sel */
    long transit_delay_max; /* maximum transit delay */
    long residual_error_rate;   /* residual error rate */
    long protection_sel;    /* protection selected */
    long priority_sel;      /* priority selected */
    long max_accept_cost;   /* maximum acceptable cost */
} N_qos_cl_sel1_t;
@end verbatim
@tpindex N_qos_cl_sel1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item @parm{QOS_length} and @parm{QOS_offset} fields of the @prim{N_INFO_ACK} primitive;

@item @parm{QOS_length} and @parm{QOS_offset} fields of the @prim{N_OPTMGMT_REQ} primitive.

@end itemize

@subsubsection Structure N_QOS_CO_OPT_RANGE1
@vrindex N_QOS_CO_OPT_RANGE1

Structure @type{N_qos_opt_range1} defines the range of the default QOS parameter values that are
supported by the NS provider.  This allows the NS user to select values within the range supported
by the NS provider.  The format of the structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CO_OPT_RANGE */
    thru_values_t src_throughput;       /* source throughput values 
                                         */
    thru_values_t dest_throughput;      /* dest throughput values */
    td_values_t transit_delay;  /* transit delay values */
    long nc_estab_delay;    /* NC establishment delay */
    long nc_estab_fail_prob;    /* NC estab failure probability */
    long residual_error_rate;   /* residual error rate */
    long xfer_fail_prob;    /* transfer failure probability */
    long nc_resilience;     /* NC resilience */
    long nc_rel_delay;      /* NC release delay */
    long nc_rel_fail_prob;  /* NC release fail probability */
    protection_values_t protection_range;       /* protection range 
                                                 */
    priority_values_t priority_range;   /* priority range */
    long max_accept_cost;   /* maximum acceptable cost */
} N_qos_co_opt_range1_t;
@end verbatim
@tpindex N_qos_co_opt_range1_t
@end smallexample

This structure should be used in the:

@itemize @bullet

@item @parm{QOS_range_length} and @parm{QOS_range_offset} fields of the @prim{N_INFO_ACK} primitive;

@end itemize

@subsubsection Structure N_QOS_CO_OPT_SEL1
@vrindex N_QOS_CO_OPT_SEL1

Structure @type{N_qos_opt_sel1} defines the selected QOS parameter values.  The format of the
structure is as follows:

@smallexample
@verbatim
typedef struct {
    ulong n_qos_type;       /* always N_QOS_CO_OPT_SEL */
    thru_values_t src_throughput;       /* source throughput values 
                                         */
    thru_values_t dest_throughput;      /* dest throughput values */
    td_values_t transit_delay;  /* transit delay values */
    long nc_estab_delay;    /* NC establishment delay */
    long nc_estab_fail_prob;    /* NC estab failure probability */
    long residual_error_rate;   /* residual error rate */
    long xfer_fail_prob;    /* transfer failure probability */
    long nc_resilience;     /* NC resilience */
    long nc_rel_delay;      /* NC release delay */
    long nc_rel_fail_prob;  /* NC release failure probability */
    long protection_sel;    /* protection selected */
    long priority_sel;      /* priority selected */
    long max_accept_cost;   /* maximum acceptable cost */
} N_qos_co_opt_sel1_t;
@end verbatim
@tpindex N_qos_co_opt_sel1_t;
@end smallexample

This structure should be used in the:

@itemize @bullet

@item @parm{QOS_length} and @parm{QOS_offset} fields of the @prim{N_INFO_ACK} primitive;

@item @parm{QOS_length} and @parm{QOS_offset} fields of the @prim{N_OPTMGMT_REQ} primitive.

@end itemize

@page
@section NPI Primitives Rules for OSI Conformance

The following are the rules that apply to the NPI primitives for OSI compatibility.

@subsection Local Management Primitives

@subsubsection N_INFO_ACK
@prindex N_INFO_ACK

@subsubheading Parameters

@table @parm

@item NSDU_size
A value greater than zero specifies the maximum size of a Network Service Data Unit (NSDU); a value
of @samp{0} specifies that the transfer of normal data is not supported by the NS provider,and a
value of @samp{-1} specifies that there is no limit on the size of a NSDU.

@item ENSDU_size
A value between 1 and 32 inclusive specifies the maximum size of an Expedited Network Service Data
Unit (ENSDU); a value of @samp{0} specifies that the transfer of expedited data is not supported by
the NS provider.

@item CDATA_size
A value between 1 and 128 inclusive specifies the maximum number of octets of data that may be
associated with connection establishment primitives.  A value of @samp{0} specifies that the NS
provider does not allow data to be sent with connection establishment primitives.  When used in an
OSI conforming environment, @parm{CDATA_size} shall always equal 128.

@item DDATA_size
A value between 1 and 128 inclusive specifies the maximum number of octets of data that may be
associated with the disconnect primitives; a value of @samp{0} specifies that the NS provider does
not allow data to be sent with the disconnect primitives.  When used in an OSI conforming
environment, @parm{DDATA_size} shall always equal 128.

@item ADDR_size
A value between 1 and 40 indicates the maximum size of a network address in decimal digits.  When
used in an OSI conforming environment, @parm{ADDR_size} shall always equal 40 in order to
accommodate a full NSAP address.

@item QOS_length
Indicates the length in bytes of the default/negotiated/selected values of the QOS parameters.  The
applicable QOS parameters are defined in the following structures:

@enumerate a

@item @pval{N_QOS_CO_OPT_SEL1} for CONS; and

@item @pval{N_QOS_CL_SEL1} for CLNS.

@end enumerate

In the connection-mode environment, when this primitive is invoked before the NC is established on
the Stream, the values returned specify the the default values supported by the NS provider.  When
this primitive is invoked after a NC has been established on the Stream, the values returned
indicate the negotiated values for the QOS parameters.  In the connectionless environment, these
values represent the default or the selected QOS parameter values.

In case a QOS parameter is not supported by the NS Provider, a value of @pval{QOS_UNKNOWN} will be
returned.  In the case where no QOS parameters are supported by the NS provider, the length of this
field will be zero.

@item QOS_range_length
Indicates the length in bytes, of the available range of QOS parameters values supported by the NS
provider.  These ranges are used by the NS user to select QOS parameter values that are valid with
the NS provider.

The applicable QOS parameters are defined in the following structures:

@enumerate a

@item @pval{N_QOS_CO_OPT_RANGE1} for CONS; and

@item @pval{N_QOS_CL_RANGE1} for CLNS.

@end enumerate

QOS parameter values are selected, or the default values altered via the @prim{N_OPTMGMT_REQ}
primitive.  In the connection-mode environment, the values for end-to-end QOS parameters may be
specified with the @prim{N_CONN} primitives for negotiation.  If the NS provider does not support a
certain QOS parameter, its value will be set to @pval{QOS_UNKNOWN}.  In the case where no QOS
parameters are supported by the NS provider, the length of this field will be zero.

@item NIDU_size
This indicates the amount of user data that may be present in aN_DATA primitive.  The
@parm{NIDU_size} should not be larger than the @parm{NSDU_size} specification.

@item SERV_type
Specifies the service type supported by the NS provider.  The possible values can be @pval{N_CONS},
@pval{N_CLNS}, (or both by using @pval{N_CONS}|@pval{N_CLNS}).  If the @parm{SERV_type} is
@pval{N_CLNS}, the following rules will apply:

@itemize ---

@item The @parm{ENSDU_size}, @parm{CDATA_size}, @parm{DDATA_size}, and DEFAULT_rc_sel fields are not
used and their values should be set to @samp{0};

@item The @parm{NSDU_size} should be the same as the @parm{NIDU_size}.

@end itemize

@item NODU_size
The @parm{NODU_size} specifies the optimal NSDU size in octets of an NSDU given the current routing
information.

@item PROTOID_length
The length of the protocol identifiers to be bound.

@item PROTOID_offset
The offset of the protocol identifiers to be bound, from the beginning of the block.

@end table

@subsubsection N_OPTMGMT_REQ
@prindex N_OPTMGMT_REQ

@subsubheading Parameters

@table @parm

@item QOS_length
Indicates the length of the default values of the QOS parameters as selected by the NS user.  In the
connection-mode environment these values will be used in subsequent @prim{N_CONN_REQ} primitives on
the Stream that do not specify values for these QOS parameters.  In the connection-less environment,
these values represent the selected QOS values that would apply to each unit data transmission.  The
applicable QOS parameters are defined in the following structures:

@enumerate a

@item @pval{N_QOS_CO_OPT_SEL1} for CONS; and

@item @pval{N_QOS_CL_SEL1} for CLNS.

@end enumerate

If the NS user cannot determine the value of a QOS parameter,its value should be set to
@pval{QOS_UNKNOWN}.  If the NS user does not specify any QOS parameter values, the length of this
field should be set to zero.

@end table

@subsection CONS Connection Establishment Phase Rules for QOS Parameter Negotiation

The negotiation for NC throughput and NC transit-delay QOS parameters are conducted as follows:

@enumerate a

@item in the @prim{N_CONN_REQ} primitive, the source NS user specifies two values for each
negotiable QOS parameter:

@enumerate 1

@item a ``target'' which is the QOS value desired; and

@item a ``lowest acceptable'' QOS value to which the source NS user will agree;

@end enumerate

The value of each of these parameters must be within the limit of the allowable values defined for
the network service.  ``Default'' values for these parameters are supported by the NS provider.  The
default values may be selected by the NS user via the @prim{N_OPTMGMT_REQ} primitive.

@item if the NS provider agrees to provide a value of QOS which is in the range between the
``target'' and the ``lowest acceptable'' QOS values, inclusive, of the @prim{N_CONN_REQ}, then the
NS provider specifies two parameters in the @prim{N_CONN_IND} issued to the destination NS user:

@enumerate 1

@item an ``available'' value which is the QOS value the NS provider is willing to provide; and

@item a ``lowest acceptable'' QOS value which is identical to the ``lowest acceptable'' value
specified in the @prim{N_CONN_REQ}; (if the NS provider does not agree to provide QOS in the given
range, then the NC establishment request is rejected);

@end enumerate

@item if the destination NS user agrees to a QOS value which is in the range between the
``available'' and the ``lowest acceptable'' QOS values, inclusive, of the @prim{N_CONN_IND}, then
the destination NS user specifies a single parameter, ``selected'' in the @prim{N_CONN_RES}; this
parameter is the QOS value the destination NS user agrees to; (if the destination NS user does not
agree to a QOS in the given range, then the NC establishment request is rejected);

@item the NS provider adopts the QOS value for the NC which was specified by the destination NS user
and supplies this as a single parameter, ``selected'', in the @prim{N_CONN_CON} primitive.

@end enumerate

@itemize @bullet

@item The negotiation for the NC protection parameter is conducted as follows:

@enumerate a

@item In the @prim{N_CONN_REQ} primitive, the calling NS user specifies values for the ``Target''
and ``Lowest Quality Acceptable'' sub-parameters; permitted value assignments are:

@table @asis

@item Case1:
both the ``Target'' and ``Lowest Quality Acceptable'' are ``unspecified'';

@item Case2:
values other than ``unspecified'' are specified for both ``Target'' and ``Lowest Quality
Acceptable'';

@item Case3:
a value other than ``unspecified'' is specified for ``Target'' and the ``Lowest Quality Acceptable''
is ``unspecified''.

@end table

NOTE: In case where ``Target'' is ``unspecified'', the ``Lowest Quality Acceptable'' must also be
``unspecified''.

@item If the NS provider does not support a choice of NC protection levels, the value of the
``Target'' parameter is conveyed by the NS provider and passed to the called NS user unchanged as
the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive;

@item If the NS provider does support a choice of NC protection levels, then:

@enumerate 1

@item In Case1, the NS provider determines the QOS value to be offered on the NC and specifies it in
the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive;

@item In Case2 and Case3, if the NS provider does not agree to provide a QOS in the requested range,
then the NC establishment attempt is rejected as described in clause 13.5 of ISO 8348
(@pxref{ISO8348,,ISO8348}).  If the NS provider does agree to provide a QOS in the requested range,
then in the @prim{N_CONN_IND} primitive, the ``Available'' sub-parameter specifies the highest QOS
value within the range which the NS provider is willing to provide.

@end enumerate

@item The value of the ``Lowest Quality Acceptable'' sub-parameter in the @prim{N_CONN_IND}
primitive is identical to that in the @prim{N_CONN_REQ} primitive;

@item If the value of the ``Available'' sub-parameter of the @prim{N_CONN_IND} primitive is
``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to accept establishment of a NC with this unspecified
quality, the NS user rejects the NC establishment attempt as described in clause 13.4 of ISO 8348
(@pxref{ISO8348,,ISO8348});

@item if the called NS user does agree, then the NS user specifies the value ``unspecified'' in the
``Selected'' sub-parameter of the @prim{N_CONN_RES} primitive.

@end enumerate

@item If the value of the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive is not
``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to a QOS in the range identified by the ``Available'' and
``Lowest Quality Acceptable'' sub-parameters of the @prim{N_CONN_IND} primitive, then the NS user
rejects the NC establishment attempt as described in clause 13.4 of ISO 8348
(@pxref{ISO8348,,ISO8348});

@item if the called NS user does agree to a QOS in the identified range, then the NS user specifies
the agreed value in the ``Selected'' sub-parameter of the @prim{N_CONN_RES} primitive.

@end enumerate

@item In the @prim{N_CONN_CON} primitive, the ``Selected'' sub-parameter has a value identical to
that of ``Selected'' in the @prim{N_CONN_RES} primitive.

@end enumerate

@item The negotiation of the NC priority parameter is conducted as follows:

@enumerate a

@item In the @prim{N_CONN_REQ} primitive, the calling NS user specifies values for the ``Target''
and ``Lowest Quality Acceptable'' sub-parameters; permitted value assignments are:

@table @asis

@item Case1:
both the ``Target'' and ``Lowest Quality Acceptable'' are ``unspecified'';

@item Case2:
values other than ``unspecified'' are specified for both ``Target'' and ``Lowest Quality
Acceptable'';

@item Case3:
a value other than ``unspecified'' is specified for ``Target'' and the ``Lowest Quality Acceptable''
is ``unspecified''.

@end table

NOTE: In case where ``Target'' is ``unspecified'', the ``Lowest Quality Acceptable'' must also be
``unspecified''.

@item If the NS provider does not support a choice of NC priority levels, the value of the
``Target'' parameter is conveyed by the NS provider and passed to the called NS user unchanged as
the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive;

@item If the NS provider does support a choice of NC priority levels, then:

@enumerate 1

@item In Case1, the NS provider determines the QOS value to be offered on the NC and specifies it in
the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive;

@item In Case2 and Case3, if the NS provider does not agree to provide a QOS in the requested range,
then the NC establishment attempt is rejected as described in clause 13.5 of ISO 8348
(@pxref{ISO8348,,ISO8348}).  If the NS provider does agree to provide a QOS in the requested range,
then in the @prim{N_CONN_IND} primitive, the ``Available'' sub-parameter specifies the highest QOS
value within the range which the NS provider is willing to provide.

@end enumerate

@item The value of the ``Lowest Quality Acceptable'' sub-parameter in the @prim{N_CONN_IND}
primitive is identical to that in the @prim{N_CONN_REQ} primitive;

@item If the value of the ``Available'' sub-parameter of the @prim{N_CONN_IND} primitive is
``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to accept establishment of a NC with this unspecified
quality, the NS user rejects the NC establishment attempt as described in clause 13.4 of ISO 8348
(@pxref{ISO8348,,ISO8348});

@item if the called NS user does agree, then the NS user specifies the value ``unspecified'' in the
``Selected'' sub-parameter of the @prim{N_CONN_RES} primitive.

@end enumerate

@item If the value of the ``Available'' sub-parameter in the @prim{N_CONN_IND} primitive is not
``unspecified'' then:

@enumerate 1

@item if the called NS user does not agree to a QOS in the range identified by the ``Available'' and
``Lowest Quality Acceptable'' sub-parameters of the @prim{N_CONN_IND} primitive, then the NS user
rejects the NC establishment attempt as described in clause 13.4 of ISO 8348
(@pxref{ISO8348,,ISO8348});

@item if the called NS user does agree to a QOS in the identified range, then the NS user specifies
the agreed value in the ``Selected'' sub-parameter of the @prim{N_CONN_RES} primitive.

@end enumerate

@item In the @prim{N_CONN_CON} primitive, the ``Selected'' sub-parameter has a value identical to
that of ``Selected'' in the @prim{N_CONN_RES} primitive.

@end enumerate

@end itemize

@subsubheading Rules for QOS Parameter Selection

When a NS user/provider cannot determine the value of a QOS field, it should return a value of
@pval{QOS_UNKNOWN}.

@smallexample
@verbatim
#define QOS_UNKNOWN -1
@end verbatim
@end smallexample

@subsubheading Rules for Receipt Confirmation Selection

@itemize @bullet

@item The receipt confirmation selection parameter values on the various primitives are related such
that:

@enumerate 1

@item on the @prim{N_CONN_REQ}, either of the defined values may occur (namely, ``use of receipt
confirmation'', or ``no use of receipt confirmation'').

@item on the @prim{N_CONN_IND}, the value is either equal to the value on the request primitive, or
is ``no use of receipt confirmation''.

@item on the @prim{N_CONN_RES}, the value is either equal to the value on the indication primitive
or is ``no use of receipt confirmation''.

@item on the @prim{N_CONN_CON}, the value is equal to the value on the response primitive.

@end enumerate

@item Since the NS users and the NS provider must agree to the use of receipt confirmation
selection, there are four possible cases of negotiation of receipt confirmation on an NC:

@enumerate 1

@item if the source NS user does not request it---it is not used;

@item if the source NS user requests it but the NS provider does not provide it --- it is not used;

@item if the source NS user requests it and the NS provider agrees to provide it,but the destination
NS user does not agree to its use -- it is not used;

@item if the source NS user requests it, the NS provider agrees to provide it, and the destination
NS user agrees to its use -- it can be used.  Rules for Expedited Data Selection

@end enumerate

@item The expedited data selection parameter values on the various primitives are related such that:

@enumerate 1

@item on the @prim{N_CONN_REQ}, either of the defined values may occur, (namely ``use of expedited
data'' or ``no use of expedited data'');

@item on the @prim{N_CONN_IND}, the value is either equal to the value on the request primitive, or
is ``no use of expedited data'';

@item on the @prim{N_CONN_RES}, the value is either equal to the value on the indication primitive,
or is ``no use of expedited data'';

@item on the @prim{N_CONN_CON}, the value is equal to the value on the response primitive.

@end enumerate

@item Since the NS users and the NS provider must agree to the use of expedited data selection,
there are four possible cases of negotiation of expedited data on an NC:

@enumerate 1

@item if the source NS user does not request it---it is not used;

@item if the source NS user requests it but the NS provider does not provide it---it is not used;

@item if the source NS user requests it and the NS provider agrees to provide it, but the
destination NS user does not agree to its use---it is not used;

@item if the source NS user requests it, the NS provider agrees to provide it, and the destination
NS user agrees to its use---it can be used.

@end enumerate

@end itemize

@subsubsection N_CONN_REQ
@prindex N_CONN_REQ

@subsubheading Parameters

@table @parm

@item QOS_length
Indicates the length of the QOS parameters values that apply to the NC being requested.

The applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_RANGE1

@end enumerate

If the NS user cannot determine the value of a QOS parameter, its value should be set to
@pval{QOS_UNKNOWN}.  If the NS user does not specify any QOS parameter values, the length of this
field should be set to zero.

@end table

@subsubheading Flags

@table @pval

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether receipt confirmation service is
desired by the calling NS user on the NC.  The receipt confirmation service must be provided in the
network service to be used on the NC.  When set, it indicates ``use of receipt confirmation'', and
when not set it indicates ``no use of receipt confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data service is desired by
the calling NS user on the NC.  The expedited data transfer service must be provided by the NS
provider for it to be used on the NC.  When set, it indicates ``use of expedited data'', and when
not set it indicates ``no use of expedited data''.

@end table

@subsubsection N_CONN_IND
@prindex N_CONN_IND

@subsubheading Parameters

@table @parm

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC establishment.

The applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_RANGE1

@end enumerate

If the NS provider does not support or cannot determine the value of a QOS parameter, its value will
be set to @pval{QOS_UNKNOWN}.  If the NS provider does not specify any QOS parameter values, the
length of this field should be set to zero.

@item QOS_offset
Indicates the offset of the QOS parameters from the beginning of the @msg{M_PROTO} message block.

@end table

@subsubheading Flags

@table @pval

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt confirmation service is
available on the NC and the calling NS user desires its use.  The receipt confirmation service must
be provided in the network service to be used on the NC.  When set, it indicates ``use of receipt
confirmation'', and when not set, it indicates ``no use of receipt confirmation''.  The value on the
@prim{N_CONN_IND} is either equal to the value on the request primitive or is ``no use of receipt
confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data transfer service is
available on the NC and the calling NS user desires its use.  The expedited data transfer service
must be provided by the NS provider for it to be used on the NC.  When set, it indicates ``use of
expedited data'' or ``no use of expedited data''.  The value on the @prim{N_CONN_IND} is either
equal to the value on the request primitive or is ``no use of expedited data''.

@end table

@subsubsection N_CONN_RES
@prindex N_CONN_RES

@subsubheading Parameters

@table @parm

@item QOS_length
Indicates the length of the QOS parameters values that are negotiated during NC establishment.  The
applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_SEL1

@end enumerate

If the NS user does not agree to the QOS values, it will reject the NC establishment by invoking a
@prim{N_DISCON_REQ} primitive (the originator parameter in the @prim{N_DISCON_REQ} primitive will
indicate NS user invoked release).  If the NS user cannot determine the value of a QOS parameter,
its value should be set to @pval{QOS_UNKNOWN}.  If the NS user does not specify any QOS parameter
values, the length of this field should be set to zero.

@end table

@subsubheading Flags

@table @pval

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt confirmation service can
be used on the NC.  The receipt confirmation service must be provided in the network service to be
used on the NC.  When set, it indicates ``use of receipt confirmation'', and when not set it
indicates ``no use of receipt confirmation''.  The value on the @prim{N_CONN_RES} is either equal to
the value on the indication primitive or is ``no use of receipt confirmation''.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data transfer service can be
used on the NC.  The expedited data transfer service must be provided by the NS provider for it to
be used on the NC.  When set, it indicates ``use of expedited data'', and when not set, it indicates
``no use of expedited data''.  The value on the @prim{N_CONN_RES} is either equal to the value on
the indication primitive or is ``no use of expedited data''.

@end table

@subsubsection N_CONN_CON
@prindex N_CONN_CON

@subsubheading Parameters

@table @parm

@item QOS_length
Indicates the length of the QOS parameters values selected by the responding NS user.  The
applicable QOS parameters are defined in the following structure:

@enumerate a

@item N_QOS_CO_SEL1

@end enumerate

If the NS provider does not support or cannot determine the selected value of a QOS parameter, its
value will be set to @pval{QOS_UNKNOWN}.  If the NS provider does not specify any QOS parameter
values, the length of this field should be set to zero.

@end table

@subsubheading Flags

@table @pval

@item REC_CONF_OPT
The receipt confirmation selection parameter indicates whether the receipt confirmation service can
be used on the NC.  The receipt confirmation service must be provided in the network service to be
used on the NC.  When set, it indicates ``use of receipt confirmation'', and when not set it
indicates ``no use of receipt confirmation''.  The value on the @prim{N_CONN_CON} is equal to the
value on the response primitive.

@item EX_DATA_OPT
The expedited data selection parameter indicates whether the expedited data transfer service can be
used on the NC.  The expedited data transfer service must be provided by the NS provider for it to
be used on the NC.  When set, it indicates ``use of expedited data'', and when not set, it indicates
``no use of expedited data''.  The value on the @prim{N_CONN_CON} is equal to the value on the
response primitive.

@end table

@subsection CONS Reset Service

@subsubsection N_RESET_REQ
@prindex N_RESET_REQ

@subsubheading Parameters

@table @parm

@item RESET_reason

Gives information indicating the cause of the reset.  Rules governing the value of the RESET_reason
parameter For an @prim{N_RESET_REQ}, the reason shall always indicate @pval{N_USER_RESYNC}.

@end table

@subsubsection N_RESET_IND
@prindex N_RESET_IND

@subsubheading Parameters

@table @parm

@item RESET_orig
This parameter indicates the source of the reset.

Reset Originator

@table @pval

@item N_PROVIDER
NS provider originated reset

@item N_USER
NS user originated reset

@item N_UNDEFINED
reset originator undefined

@end table

@item RESET_reason
Gives information indicating the cause of the reset.

@end table

@subsubheading Rules governing the value of the RESET_reason parameter

The value conveyed in this parameter will be as follows:

@enumerate a

@item when the originator parameter indicates an NS provider invoked reset; the parameter is one of:

@table @pval

@item N_CONGESTION
reset due to congestion;

@item N_RESET_UNSPECIFIED
reset-reason unspecified.

@end table

@item when the originator parameter indicates an NS user invoked reset, the value is:

@table @pval

@item N_USER_RESYNC
user resynchronization.

@end table

@item when the originator parameter has the value ``undefined'', then the value of the reason
parameter is:

@table @pval

@item N_REASON_UNDEFINED
reset reason undefined

@end table

@end enumerate

@subsection CONS NC Release Phase

@subsubsection N_DISCON_REQ
@prindex N_DISCON_REQ

@subsubheading Parameters:

@table @parm

@item DISCON_reason
Gives information about the cause of the release.

@end table

@subsubheading Rules governing the value of the DISCON_reason parameter

The value conveyed in the parameter will be as follows:

@table @pval

@item N_DISC_NORMAL
``disconnection-normal condition''

@item N_DISC_ABNORMAL
``disconnection-abnormal condition''

@item N_REJ_P
``connection rejection-permanent condition''

@item N_REJ_T
``connection rejection-transient condition''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_INCOMPAT_INFO
``connection rejection-incompatible information in NS user data''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end table

@subsubsection N_DISCON_IND
@prindex N_DISCON_IND

@subsubheading Parameters

@table @parm

@item DISCON_orig
Indicates the source of the NC release.  Its value are as follows:

@table @pval

@item N_PROVIDER
NS provider originated disconnect

@item N_USER
NS user originated disconnect

@item N_UNDEFINED
disconnect originator undefined

@end table

The value ``undefined'' is not permitted when an @prim{N_DISCON_IND} is issued by an NS user or the
NS provider in order to reject an NC establishment attempt.

@item DISCON_reason
Gives information about the cause of the release.

@end table

@subsubheading Rules governing the value of the DISCON_reason parameter

The value conveyed in the parameter will be as follows:

@enumerate a

@item When the originator parameter indicates an NS provider invoked release, the value is one of:

@table @pval

@item N_DISC_P
``disconnection-permanent condition''

@item N_DISC_T
``disconnection-transient condition''

@item N_REJ_NSAP_UNKNOWN
``connection rejection-NSAP address unknown (permanent condition)''

@item N_REJ_NSAP_UNREACH_P
``connection rejection-NSAP unreachable(permanent condition)''

@item N_REJ_NSAP_UNREACH_T
``connection rejection-NSAP unreachable(transient condition)''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end table

@item When the originator parameter indicates an NS user invoked release, the value is one of:

@table @pval

@item N_DISC_NORMAL
``disconnection-normal condition''

@item N_DISC_ABNORMAL
``disconnection-abnormal condition''

@item N_REJ_P
``connection rejection-permanent condition''

@item N_REJ_T
``connection rejection-transient condition''

@item N_REJ_QOS_UNAVAIL_P
``connection rejection-QOS not available/permanent condition''

@item N_REJ_QOS_UNAVAIL_T
``connection rejection-QOS not available/transient condition''

@item N_REJ_INCOMPAT_INFO
``connection rejection-incompatible information in NS user data''

@item N_REJ_UNSPECIFIED
``connection rejection-reason unspecified''

@end table

@item When the originator parameter value is undefined, then the value of the reason parameter shall
be:

@table @pval

@item N_REASON_UNDEFINED
disconnect reason undefined

@end table

@end enumerate

@subsection CLNS

@subsubsection N_UDERROR_IND
@prindex N_UDERROR_IND

@subsubheading Parameters

@table @parm

@item ERROR_type
Specifies the reason for the error.  The possible values are:

@table @pval

@item N_UD_UNDEFINED
no reason specified;

@item N_UD_TD_EXCEEDED
transit delay exceeded;

@item N_UD_CONGESTION
NS provider congestion;

@item N_UD_QOS_UNAVAIL
other requested QOS/service characteristic unavailable;

@item N_UD_LIFE_EXCEEDED
NSDU lifetime exceeded;

@item N_UD_ROUTE_UNAVAIL
suitable route unavailable.

@item N_UD_SEG_REQUIRED
segmentation required where none permitted.

@end table

@end table

@node Mapping NPI to ISO 8348 and CCITT X.213
@appendix Mapping NPI to ISO 8348 and CCITT X.213

@tabref{A-1} shows a mapping of the NPI primitives to the OSI network service definition primitives.

@tabfig{npi_taba1,A-1,Mapping NPI Primitives to OSI NS}

@node State/Event Tables
@appendix State/Event Tables

This appendix contains tables showing the network-user's view of the possible states that the NPI
may enter due to an event, and the possible events that may occur on the interface.  The
@prim{N_INFO_REQ}, @prim{N_INFO_ACK}, @prim{N_TOKEN_REQ}, and @prim{N_TOKEN_ACK} primitives are
excluded from the state transition table because they can be issued from several states, and
secondly, they do not cause a state transition to occur.  However, the @prim{N_INFO_REQ} and the
@prim{N_TOKEN_REQ} primitives may not be issued by the NS user when a local acknowledgement to a
previously issued primitive is pending.

@tabfig{npi_tabb1,B-1,Kernel Level NPI States}

@tabref{B-2} and @tabref{B-3} describe the variables and outputs used in the state tables.

@tabfig{npi_tabb2,B-2,State Table Variables}

@tabfig{npi_tabb3,B-3,State Table Outputs}

@tabref{B-4} shows outgoing events that are initiated by the network-user entity.  These events are
either requests to the network provider or responses to an event of the network provider.

@tabfig{npi_tabb4,B-4,Kernel Level NPI Outgoing Events}

@tabref{B-5} shows incoming events that are initiated by the network provider.  These events are
either confirmations of a request, or are indications to the NS user entity that an event has
occurred.

@tabfig{npi_tabb5,B-5,Kernel Level NPI Incoming Events}

@tabref{B-6} and @tabref{B-7} describe the possible events the NPI may enter given a current state
and event.  The contents of each box represent the next state given the current state (column) and
the current incoming or outgoing event (row).  An empty box represents a state/event combination
that is invalid.  Along with the next state, each box may include an action.  The network provider
must take specific actions in the order specified in the state table.

@tabfig{npi_tabb6,B-6,Data Transfer State Table for CLNS}

@tabfig{npi_tabb7,B-7,Initialization State Table for CONS}

@tabfig{npi_tabb8,B-8,State Table for CONS for Connection/Release/Data Transfer States}

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables

@tabref{C-1} and @tabref{C-2} describe the precedence of the NPI primitives for both the Stream
write and read queues.  In both these tables, primitive Y is already on the queue and primitive X is
about to be put on the queue.  The Stream write queue contains network user initiated primitives and
the Stream read queue contains network provider initiated primitives.  The column headings are a
shorthand notation for the row headings.

@tabfig{npi_tabc1,C-1,STREAM Write Queue Precedence Table}

@tabfig{npi_tabc2,C-2,STREAM Read Queue Precedence Table}

@node NPI Header File Listing
@appendix NPI Header File Listing

This appendix contains a listing of the NPI header file needed by implementations.

@smallformat
@verbatiminclude npi.h
@end smallformat

@node Glossary
@unnumbered Glossary

@table @emph
@item Signalling Data Link Service Data Unit
A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link
connection to the other.
@item Data transfer
The phase in connection and connectionless modes that supports the transfer of data between to
signalling data link users.
@item SDL provider
The signalling data link layer protocol that provides the services of the signalling data link
interface.
@item SDL user
The user-level application or user-level or kernel-level protocol that accesses the services of the
signalling data link layer.
@item Local management
The phase in connection and connectionless modes in which a SDL user initializes a Stream and
attaches a PPA address to the Stream.  Primitives in this phase generate local operations only.
@item PPA
The point at which a system attaches itself to a physical communications medium.
@item PPA identifier
An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable @columnfractions 0.15 0.85
@item @dfn{ANSI} @tab American National Standards Institute
@item @dfn{CCITT} @tab The International Telegraph and Telephone Consutative Committee, old name for ITU-T
@item @dfn{CONS} @tab Connection-Oriented Network Service
@item @dfn{CUD} @tab Call User Data
@item @dfn{DCE} @tab Data Circuit-terminating Equipment
@item @dfn{DDN} @tab Defence Data Network
@item @dfn{DLPI} @tab Data Link Provider Interface
@item @dfn{DLSAP} @tab Destination Link Service Access Point
@item @dfn{DNIC} @tab Data Network Identification Code
@item @dfn{DSAP} @tab Destination Service Access Point
@item @dfn{DTE} @tab Data Terminal Equipment 
@item @dfn{ENSDU} @tab Expedited Network Service Data Unit
@item @dfn{ETSI} @tab European Telecommunications Standards Institute
@item @dfn{HDLC} @tab High-Level Data Link Control
@item @dfn{IEEE} @tab Institute of Electrical and Electronics Engineers
@item @dfn{IP} @tab Internet Protocol
@item @dfn{ISDNI} @tab ISDN Interface
@item @dfn{ISDN} @tab Integrated Services Digital Network
@item @dfn{ISO} @tab International Organization for Standardization
@item @dfn{ISUPI} @tab ISUP Interface
@item @dfn{ISUP} @tab ISDN User Part
@item @dfn{ITU} @tab International Telecommunications Union
@item @dfn{ITU-T} @tab ITU Telecom Sector
@item @dfn{LAN} @tab Local Area Network
@item @dfn{LAPB} @tab Link Access Procedure (Balanced), ISO/IEC 7776
@item @dfn{LAPD} @tab Link Access Procedure D-Channel, Q.921
@item @dfn{LAPF} @tab Link Access Procedure Frame Mode, Q.922
@item @dfn{LAP} @tab Link Access Procedure
@item @dfn{LCI} @tab Logical Channel Identifier
@item @dfn{LLC1} @tab Logical Link Control Type 1
@item @dfn{LLC2} @tab Logical Link Control Type 2
@item @dfn{LLC3} @tab Logical Link Control Type 3
@item @dfn{LLC} @tab Logical Link Control
@item @dfn{LLI} @tab Logical Link Inteface
@item @dfn{LSAP} @tab Link Service Access Point
@item @dfn{MAC} @tab Media Access Control
@item @dfn{MTPI} @tab Message Transfer Part Interface
@item @dfn{MTP} @tab Message Transfer Part 
@item @dfn{NLI} @tab Network Layer Interface
@item @dfn{NPDU} @tab Network Protocol Data Unit
@item @dfn{NPI} @tab Network Provider Interface
@item @dfn{NPI} @tab Numbering Plan Indicator
@item @dfn{NSAP} @tab Network Service Access Point
@item @dfn{NSDU} @tab Network Service Data Unit
@item @dfn{NSP} @tab Network Service Provider
@item @dfn{NS} @tab Network Service
@item @dfn{NSU} @tab Network Service User
@item @dfn{NUI} @tab Network User Information
@item @dfn{PAD} @tab Packet Assembler/Disassembler
@item @dfn{PDN} @tab Public Data Network
@item @dfn{PDU} @tab Protocol Data Unit
@item @dfn{PLP} @tab Packet Layer Protocol
@item @dfn{PPA} @tab Physical Point of Attachment
@item @dfn{PSDN} @tab Public Switched Data Network
@item @dfn{PSTN} @tab Public Switch Telephone Network
@item @dfn{PVC} @tab Permanent Virtual Circuit
@item @dfn{QOS} @tab Quality of Service
@item @dfn{RPOA} @tab Recognized Private Operating Agency
@item @dfn{SAP} @tab Service Access Point
@item @dfn{SCCPI} @tab Signalling Connection Control Part Interface
@item @dfn{SCCP} @tab Signalling Connection Control Part
@item @dfn{SDLI} @tab Signalling Data Link Interface
@item @dfn{SDL} @tab Signalling Data Link
@item @dfn{SDTI} @tab Signalling Data Terminal Interface
@item @dfn{SDT} @tab Signalling Data Terminal
@item @dfn{SDU} @tab Service Data Unit
@item @dfn{SLI} @tab Signalling Link Interface
@item @dfn{SLSAP} @tab Source Link Service Access Point
@item @dfn{SL} @tab Signalling Link
@item @dfn{SNPA} @tab Subnetwork Point of Attachment
@item @dfn{SSAP} @tab Source Service Access Point
@item @dfn{SVC} @tab Switched Virtual Circuit
@item @dfn{TCAP} @tab Transaction Capabilities Application Part
@item @dfn{TCI} @tab Transaction Component Interface
@item @dfn{TC} @tab Component Handling Sub-Layer
@item @dfn{TLI} @tab Transport Layer Interface
@item @dfn{TOA/NPI} @tab Type of Address/Numbering Plan Indicator
@item @dfn{TOA} @tab Type of Address
@item @dfn{TPI} @tab Transport Provider Interface
@item @dfn{TRI} @tab Transaction Interface
@item @dfn{TR} @tab Transaction Handling Sub-Layer
@item @dfn{VC} @tab Virtual Circuit
@item @dfn{WAN} @tab Wide Area Network
@item @dfn{X.121} @tab ITU-T Recommendation X.121
@item @dfn{X.25} @tab ITU-T Recommendation X.25
@item @dfn{X.28} @tab ITU-T Recommendation X.28
@item @dfn{X.3} @tab ITU-T Recommendation X.3
@item @dfn{X.75} @tab ITU-T Recommendation X.75
@item @dfn{XX25} @tab X.25 Programming Inteface using XTI
@item @dfn{XXX} @tab X.3, X.28, X.29
@end multitable

@node References
@unnumbered References

@table @asis

@item [X.213]
@anchor{X.213}
@uref{http://www.itu.int/rec/T-REC-X.213/,,@b{ITU-T Recommendation X.213 (1986)}},
[@b{ISO/IEC 8348}],
@cite{Network Service Definition for Open Systems Interconnection (OSI) for CCITT Applications},
Blue Book,
1986,
(Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').

@item [ISO8348]
@anchor{ISO8348}
@b{ISO/IEC 8348 : 1987},
[@uref{http://www.itu.int/rec/T-REC-X.213/,,@b{ITU-T Recommendation X.213}}],
@cite{Information Processing Systems---Data Communications---Network Service Definition},
April 15, 1987,
(Geneva), ISO/IEC,
@uref{http://www.iso.org/,,International Organization for Standardization},
@uref{http://www.iec.org/,,International Engineering Consortium}.

@item [ISO8348/AD1]
@anchor{ISO8348/AD1}
@b{ISO/IEC 8348/AD1 : 1987},
[@uref{http://www.itu.int/rec/T-REC-X.213/,,@b{ITU-T Recommendation X.213, Amd. 1}}],
@cite{Information Processing Systems---Data Communications---Network Service Definition---Addendum 1: Connectionless Mode Transmission},
April 15, 1987,
(Geneva), ISO/IEC,
@uref{http://www.iso.org/,,International Organization for Standardization},
@uref{http://www.iec.org/,,International Engineering Consortium}.

@item [ISO8473]
@anchor{ISO8473}
@b{ISO/IEC 8473 : 1987},
[@uref{http://www.itu.int/rec/T-REC-X.233/,,@b{ITU-T Recommendation X.233}}],
[@uref{http://www.itu.int/rec/T-REC-X.622/,,@b{ITU-T Recommendation X.622}}],
[@uref{http://www.itu.int/rec/T-REC-X.623/,,@b{ITU-T Recommendation X.623}}],
@cite{Information Processing Systems---Data Communications Protocol for Providing the Connectionless Mode Network Service},
SC6 N4542,
(Geneva), ISO/IEC,
@uref{http://www.iso.org/,,International Organization for Standardization},
@uref{http://www.iec.org/,,International Engineering Consortium}.

@item [ISO8208]
@anchor{ISO8208}
@b{ISO/IEC 8208 : 1987},
[@uref{http://www.itu.int/rec/T-REC-X.25/,,@b{ITU-T Recommendation X.25}}],
[@uref{http://www.itu.int/rec/T-REC-X.75/,,@b{ITU-T Recommendation X.75}}],
@cite{Information Processing Systems---X.25 Packet Level Protocol for Data Terminal Equipment},
September 15, 1987,
(Geneva), ISO/IEC,
@uref{http://www.iso.org/,,International Organization for Standardization},
@uref{http://www.iec.org/,,International Engineering Consortium}.

@item [ISO8878]
@anchor{ISO8878}
@b{ISO/IEC 8878 : 1987},
[@uref{http://www.itu.int/rec/T-REC-X.223/,,@b{ITU-T Recommendation X.223}}],
@cite{Information Processing Systems---Data Communications---Use of X.25 to Provide the OSI Connection-Mode Network Service},
September 1, 1987,
(Geneva), ISO/IEC,
@uref{http://www.iso.org/,,International Organization for Standardization},
@uref{http://www.iec.org/,,International Engineering Consortium}.

@item [SVID]
@anchor{SVID}
@cite{System V Interface Definition}, Issue 2, Volume 3.

@item [X.210]
@anchor{X.210}
@uref{http://www.itu.int/rec/T-REC-X.210/,,@b{ITU-T Recommendation X.210}},
[@b{ISO/IEC 10731 : 1994}],
@cite{Information Technology---Open Systems Interconnection---Basic reference model: Conventions for the definition of OSI services},
Red Book, 1984,
(Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}. 
(Previously ``CCITT Recommendation'').

@end table

@ifnotplaintext
@c skip indexes for plain text (regex search works better)
@c @iftex
@c @node Indices
@c @unnumbered Indices
@c @end iftex

@c @ifnottex
@c @c concatenate indices for html and info
@node Index
@unnumbered Index
@printindex cp
@c @end ifnottex

@c @iftex
@c @menu
@c * Concept Index::
@c * Protocol State Index::
@c * Primitive Index::
@c * Primitive Structure and Type Index::
@c * Primitive Structure Field Index::
@c * Primitive Values Index::
@c * Primitive Error Values Index::
@c * Input-Output Control Index::
@c * MIB Object Index::
@c * Manual Page Index::
@c @end menu
@c 
@c @node Concept Index
@c @section Concept Index
@c @printindex cp
@c 
@c @page
@c @node Protocol State Index
@c @section Protocol State Index
@c @printindex st
@c 
@c @page
@c @node Primitive Index
@c @section Primitive Index
@c @printindex pr
@c 
@c @page
@c @node Primitive Structure and Type Index
@c @section Primitive Structure and Type Index
@c @printindex tp
@c 
@c @page
@c @node Primitive Structure Field Index
@c @section Primitive Structure Field Index
@c @printindex vr
@c 
@c @page
@c @node Primitive Values Index
@c @section Primitive Values Index
@c @printindex pv
@c 
@c @page
@c @node Primitive Error Values Index
@c @section Primitive Error Values Index
@c @printindex pe
@c 
@c @page
@c @node Input-Output Control Index
@c @section Input-Output Control Index
@c @printindex ct
@c 
@c @page
@c @node MIB Object Index
@c @section MIB Object Index
@c @printindex mo
@c 
@c @page
@c @node Manual Page Index
@c @section Manual Page Index
@c @printindex mp
@c @end iftex
@end ifnotplaintext

@page
@shortcontents
@page
@contents
@bye
