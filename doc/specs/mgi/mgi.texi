\input texinfo
@c -*- texinfo -*- vim: ft=texinfo
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
@c =========================================================================
@c
@c @(#) doc/specs/mgi/mgi.texi
@c
@c =========================================================================
@c
@c Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
@c Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
@c Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
@c
@c All Rights Reserved.
@c
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3 or
@c any later version published by the Free Software Foundation; with no
@c Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
@c copy of the license is included in the section entitled "GNU Free
@c Documentation License".
@c
@c Permission to use, copy and distribute this documentation without
@c modification, for any purpose and without fee or royalty is hereby
@c granted, provided that both the above copyright notice and this
@c permission notice appears in all copies and that the name of OpenSS7
@c Corporation not be used in advertising or publicity pertaining to
@c distribution of this documentation or its contents without specific,
@c written prior permission.  OpenSS7 Corporation makes no representation
@c about the suitability of this documentation for any purpose.  It is
@c provided "as is" without express or implied warranty.
@c 
@c Permission is granted to process this file through Tex and print the
@c results, provided the printed document carries copying permission
@c notice identical to this one except for the removal of this paragraph
@c (this paragraph not being relevant to the printed manual).
@c 
@c OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
@c DOCUMENTATION INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
@c FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE
@c CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE
@c IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY
@c PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL
@c OPENSS7 CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR
@c CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
@c USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
@c OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH ANY USE OF
@c THIS DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS
@c THEREOF.
@c 
@c Since the Linux kernel and libraries are constantly changing, this
@c manual page may be incorrect or out-of-date.  The author(s) assume no
@c responsibility for errors or omissions, or for damages resulting from
@c the use of the information contained herein.  The author(s) may not
@c have taken the same level of care in the production of this manual,
@c which is licensed free of charge, as they might when working
@c professionally.
@c 
@c Formatted or processed versions of this manual, if unaccompanied by
@c the source, must acknowledge the copyright and authors of this work.
@c
@c -------------------------------------------------------------------------
@c
@c U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
@c on behalf of the U.S. Government ("Government"), the following
@c provisions apply to you.  If the Software is supplied by the Department
@c of Defense ("DoD"), it is classified as "Commercial Computer Software"
@c under paragraph 252.227-7014 of the DoD Supplement to the Federal
@c Acquisition Regulations ("DFARS") (or any successor regulations) and the
@c Government is acquiring only the license rights granted herein (the
@c license rights customarily provided to non-Government users).  If the
@c Software is supplied to any unit or agency of the Government other than
@c DoD, it is classified as "Restricted Computer Software" and the
@c Government's rights in the Software are defined in paragraph 52.227-19
@c of the Federal Acquisition Regulations ("FAR") (or any successor
@c regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
@c NASA Supplement to the FAR (or any successor regulations).
@c
@c =========================================================================
@c 
@c Commercial licensing and support of this software is available from
@c OpenSS7 Corporation at a fee.  See http://www.openss7.com/
@c 
@c =========================================================================
@c

@setfilename mgi.info
@include ../../../scripts/texi/args.texi
@set MANUAL_TITLE Media Gateway Interface (MGI)
@set MANUAL_TYPE Specification
@settitle @value{MANUAL_TITLE}

@dircategory OpenSS7
@direntry
* MGI: (mgi).				Media Gateway Interface
@end direntry

@include ../../../scripts/texi/args.texi
@set MANUAL_TITLE Media Gateway Interface (MGI)
@set MANUAL_TYPE Specification

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file provides the @value{MANUAL_TYPE} for @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}, last updated @value{PACKAGE_DATE}, of the
@cite{@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version @value{PACKAGE_VERSION}
Release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}.

Copyright @copyright{} 2008-2015  @uref{http://www.monavacon.com/, Monavacon Limited} @*
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2001  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*

All Rights Reserved.

Permission is granted to copy, distribute and/or modify this document under the terms of the GNU
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled @ref{GNU Free Documentation License}.

Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of @cite{OpenSS7 Corporation} not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  @cite{OpenSS7 Corporation} makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@ignore
Permission is granted to process this file through Tex and print the results, provided the printed
document carries copying permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS DOCUMENTATION INCLUDING ALL IMPLIED
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT
THE CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF SUCH
CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.  IN
NO EVENT SHALL OPENSS7 CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH ANY USE OF
THIS DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS THEREOF.
@end ifinfo

@include ../../../scripts/texi/args.texi
@set MANUAL_TITLE Media Gateway Interface (MGI)
@set MANUAL_TYPE Specification

@set PART Media Gateway
@set LONG Media Gateway
@set SHORT MG
@set INTERFACE MGI

@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 1
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@subtitle Updated @value{PACKAGE_PDATE}
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2008-2015  Monavacon Limited
@subtitle All Rights Reserved.
@sp 4
@quotation
@chapheading Abstract:
This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the
@value{LONG} (@value{SHORT}) interface to these components as well as providing a basis for
@value{LONG} control for other @value{LONG} protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll

@chapheading Published by:

@sp 1

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Copyright @copyright{} 2008-2015  @uref{http://www.monavacon.com/, Monavacon Limited} @*
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock} @*

@noindent
All Rights Reserved.

@sp 1

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@noindent
Permission is granted to copy, distribute and/or modify this document under the terms of the GNU
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of
the license is included in the section entitled @ref{GNU Free Documentation License}.

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of @cite{OpenSS7 Corporation} not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  @cite{OpenSS7 Corporation} makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@chapheading Notice:

@noindent
@strong{OpenSS7 Corporation disclaims all warranties with regard to this documentation including all
implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title;
that the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights.  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.}

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of primitive error values
@defcodeindex pe
@c Define an index of protocol states
@defcodeindex st
@c Define an index of input-output controls
@defcodeindex ct
@c Define an index of manual pages.
@defcodeindex mp
@c Define an index of MIB objects.
@defcodeindex mo

@c frags out automake
@c @ifnottex
@c @c concatenate indices for text, html and info
@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex pe cp
@syncodeindex st cp
@syncodeindex mp cp
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex ct cp
@syncodeindex mo cp
@c @end ifnottex

@include texi/macros.texi
@include texi/versions.texi
@include texi/prims.texi

@ifnottex
@node Top
@top @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@heading About This Manual
This is Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}, last updated @value{PACKAGE_DATE}, of
@cite{The @value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version
@value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} of the
@value{PACKAGE_TITLE} package.
@end ifnottex

@menu
* Preface::
* Introduction::
* The Media Gateway Layer::
* MGI Services Definition::
* MGI Service Primitives::
* MGI Input-Output Controls::
* MGI Management::
* Mapping of MGI Primitives to ITU-T H.248::
* Addendum for ITU-T H.248 Conformance::
* State/Event Tables::
* Primitive Precedence Tables::
* MGI Header Files::
* MGI Drivers and Modules::
* MGI Applications::
* MGI Utilities::
* MGI File Formats::
* MGI Compatibility and Porting::
* Glossary::
* Acronyms::
* References::
* Licenses::
@c @iftex
@c * Indices::
@c @end iftex
@c @ifnottex
* Index::
@c @end ifnottex
@end menu

@shortcontents
@contents

@node Preface
@unnumbered Preface

@section Notice

Software in this document and related software is released under the AGPL (@pxref{GNU Affero General
Public License}).  Please note, however, that there are different licensing terms for some of the
manual package and some of the documentation.  Consult permission notices contained in the
documentation of those components for more information.

This document is released under the FDL (@pxref{GNU Free Documentation License}) with no invariant
sections, no front-cover texts and no back-cover texts.

@section Abstract

This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.

@noindent
This document specifies a @value{MANUAL_TITLE} Specification in support of the OpenSS7 @value{LONG}
(@value{SHORT}) protocol stacks.  It provides abstraction of the @value{PART} interface to these
components as well as providing a basis for @value{PART} control for other @value{PART} protocols.

@subsection Purpose
@cpindex STREAMS

The purpose of this document is to provide technical documentation of the @value{MANUAL_TITLE}.
This document is intended to be included with the OpenSS7 @acronym{STREAMS} software package released
by @cite{OpenSS7 Corporation}.  It is intended to assist software developers, maintainers and users
of the @value{MANUAL_TITLE} with understanding the software architecture and technical interfaces
that are made available in the software package.

@subsection Intent

It is the intent of this document that it act as the primary source of information concerning the
@value{MANUAL_TITLE}.  This document is intended to provide information for writers of OpenSS7
@value{MANUAL_TITLE} applications as well as writers of OpenSS7 @value{MANUAL_TITLE} Users.

@subsection Audience

The audience for this document is software developers, maintainers and users and integrators of the
@value{MANUAL_TITLE}.  The target audience is developers and users of the OpenSS7 SS7 stack.

@section Revision History

Take care that you are working with a current version of this documentation: you will not be
notified of updates.  To ensure that you are working with a current version, check the
@uref{http://www.openss7.org/,OpenSS7 Project} website for a current version.

A current version of this specification is normally distributed with the @cite{@value{PACKAGE_TITLE}}
package, @file{@value{PACKAGE}-@value{VERSION}}.@footnote{@url{http://www.openss7.org/repos/tarballs/@value{PACKAGE}-@value{VERSION}.tar.bz2}}

@subsection Version Control

@noindent
Although the author has attempted to ensure that the information in this document is complete and
correct, neither the Author nor OpenSS7 Corporation will take any responsibility in it.
@cite{OpenSS7 Corporation} is making this documentation available as a reference point for the
industry.  While @cite{OpenSS7 Corporation} believes that these interfaces are well defined in this
release of the document, minor changes may be made prior to products conforming to the interfaces
being made available.  @cite{OpenSS7 Corporation} reserves the right to revise this software and
documentation for any reason, including but not limited to, conformity with standards promulgated by
various agencies, utilization of advances in the state of the technical arts, or the reflection of
changes in the design of any techniques, or procedures embodied, described, or referred to herein.
@cite{OpenSS7 Corporation} is under no obligation to provide any feature listed herein.

@smallexample
@verbatim
$Log: mgi.texi,v $
Revision 1.1.2.3  2011-02-07 02:21:40  brian
- updated manuals

Revision 1.1.2.2  2010-03-10 08:42:18  brian
- added Optranex files

Revision 1.1.2.1  2010-02-22 14:25:53  brian
- added new documentation files

@end verbatim
@end smallexample

@section ISO 9000 Compliance

Only the @TeX{}, texinfo, or roff source for this maual is controlled.  An opaque (printed,
postscript or portable document format) version of this manual is a @strong{UNCONTROLLED VERSION}.

@subsection Disclaimer

@noindent
@strong{@cite{OpenSS7 Corporation} disclaims all warranties with regard to this documentation
including all implied warranties of merchantability, fitness for a particular purpose,
non-infrincement, or title; that the contents of the manual are suitable for any purpose, or that
the implementation of such contents will not infringe on any third party patents, copyrights,
trademarks or other rights.  In no event shall @cite{OpenSS7 Corporation} be liable for any direct,
indirect, special or consequential damages or any damages whatsoever resulting from loss of use,
data or profits, whether in an action or contract, negligence or other tortious action, arising out
of or in connection with any use of this documentation or the performance or implementation of the
contents thereof.}

@subsection U.S. Government Restricted Rights

If you are licensing this Software on behalf of the U.S. Government ("Government"), the following
provisions apply to you.  If the Software is supplied by the Department of Defense ("DoD"), it is
classified as "Commercial Computer Software" under paragraph 252.227-7014 of the DoD Supplement to
the Federal Aquisition Regulations ("DFARS") (or any successor regulations) and the Government is
acquiring only the license rights granded herein (the license rights customarily provided to
non-Government users).  If the Software is supplied to any unit or agency of the Government other
than DoD, it is classified as "Restricted Computer Software" and the Government's rights in the
Software are defined in paragraph 52.227-19 of the Federal Acquisition Regulations ("FAR") (or any
successor regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplerment
to the FAR (or any successor regulations).

@section Acknowledgements

@url{http://www.openss7.org/,The OpenSS7 Project} was funded in part by:

@itemize @bullet
@item @url{http://www.monavacon.com/,Monavacon Limited}
@item @url{http://www.openss7.com/,OpenSS7 Corporation}
@end itemize

Thanks to the subscribers to and sponsors of @url{http://www.openss7.org/, The OpenSS7 Project}.
Without their support, open software like this would not be possible.

As with most open source projects, this project would not have been possible without the valiant
efforts and productive software of the @url{http://www.fsf.org/,Free Software Foundation}, the
@url{http://www.kernel.org/,Linux Kernel Community}, and the open source software movement at large.

@node Introduction
@chapter Introduction
@cpindex STREAMS

This document specifies a @acronym{STREAMS}-based kernel-level instantiation of the
@value{MANUAL_TITLE} definition.  The @value{MANUAL_TITLE} enables the user of a media gateway
service to access and use any of a variety of conforming media gateway providers without specific
knowledge of the provider's protocol.  The service interface is designed to support any network
media gateway protocol.  This interface only specifies access to media gateway service providers,
and does not address issues concerning media gateway management, protocol performance, and
performance analysis tools.

This specification assumes that the reader is familiar with ITU-T state machines and media gateway
interface (e.g. H.248) and @acronym{STREAMS}.

@section Related Documentation

@itemize ---
@item @strong{ITU-T Recommendation H.248}
@item @strong{System V Interface Definition, Issue 2 - Volume 3}
@end itemize

@subsection Role

This document specifies an interface that supports the services provided by the @dfn{Media Gateway}
for ITU-T, ANSI and ETSI applications as described in ITU-T Recommendation H.248.  These
specifications are targeted for use by developers and testers of protocol modules that require media
gateway service.

@section Definitions, Acronyms, Abbreviations

@table @dfn
@item LM
Local Management.
@item LMS
Local Management Service.
@item LMS User
A user of Local Management Services.
@item LMS Provider
A provider of Local Management Services.
@item ISO
International Organization for Standardization
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
A communication services development facility first available with UNIX System V Release 3.
@end table

@node The Media Gateway Layer
@chapter The Media Gateway Layer

@menu
* Model of the MGI::
* MGI Services::
* Purpose of the MGI::
* Media Gateway Addressing::
* Media Gateway Parameters::
@end menu

The Media Gateway Layer provides the means to manage the association of MG-User connections.  It is
responsible for the routing and management of data to and from media gateway connections between
MG-user entities.

@node Model of the MGI
@section Model of the MGI


The MGI defines the services provided by the media gateway layer to the media gateway user at the
boundary between the media gateway provider (MG) and the media gateway user (MGC) entity.  The
interface consists of a set of primitives defined as @acronym{STREAMS} messages that provide access
to the media gateway layer services, and are transferred between the MGS user entity (MGC) and the
MGS provider (MG).  These primitives are of two types; ones that originate from the MGS user, and
others that originate from the MGS provider.  The primitives that originate from the MGS user make
requests to the MGS provider, or respond to an indication of an event of the MGS provider.  The
primitives that originate from the MGS provider are either confirmations of a request or are
indications to the MGS user that an event has occurred.  @figref{1} show the model of the MGI.

@figuresized{mgi01,1,Model of the MGI,3.0in}
The MGI allows the MGS provider to be configured with any media gateway layer user (such as a
swtiching application) that also conforms to the MGI.  A media gateway layer user can also be a user
program that conforms to the MGI and accesses the MGS provider via @command{@b{putmsg}(2s)} and
@command{@b{getmsg}(2s)} system calls.  A typical configuration, however, is to have a switching
user-space application using the media gateway layer.  Nevertheless, another typical configuration
is to have an H.248 multiplexing driver connected to the MG provider Streams.

@node MGI Services
@section MGI Services

The features of the MGI are defined in terms of the services provided by the MGS provider, and the
individual primitives that may flow between the MGS user and the MGS provider.

The MGI Services are broken into two groups: local management services and protocol services.  Local
management services are responsible for the local management of Streams, assignment of Streams to
physical points of attachment, enabling and disabling of Streams, management of options associated
with a Stream, and general acknowledgement and event reporting for the Stream.  Protocol services
consist of connecting a Stream to a medium, exchanging bits with the medium, and disconnecting the
Stream from the medium.

@subsection Local Management

Local management services are listed in @tabref{1}.

@tabfig{mgit01,1,Local Management Services}

The local management services interface is described in @ref{Local Management Services}, and the
primitives are detailed in @ref{Local Management Service Primitives}.  The local management services
interface is defined by the @file{sys/mgi.h} header file (@pxref{MGI Header Files}).

@subsection Protocol

Protocol services are listed in @tabref{2}.

@tabfig{mgit02,2,Protocol Services}

The protocol services interface is described in @ref{Protocol Services}, and the primitives are
detailed in @ref{Protocol Service Primitives}.  The protocol services interface is defined by the
@file{sys/mgi.h} header file (@pxref{MGI Header Files}).

@node Purpose of the MGI
@section Purpose of the MGI

The MGI is typically implemented as a device driver connecting and controlling a TDM (Time Division
Mutliplexing) device that provides access to multiplexed media streams, and a network device that
provides packet-based media streams.  This is a high level control interface that can be used in
conjunction with a media gateway control protocol or an integrated media gateway controller to
provide media gateway or integrated softswitch functions.

This allows MGCP and MATRIX modules to be verified independently for correct operation and then
simply used for all manner of new device drivers that can implement the MGI interface.

@node Media Gateway Addressing
@section Media Gateway Addressing

Each use of MGI must establish an identity to communicate with other media gateway users.  The MGS
user must identify the physical media over which communication will occur.  This is particularly
evident on a system that is attached to multiple physical media.  @figref{17} illustrates the
identification approach, which is explained below.

@figuresized{mgi17,17,Media Gateway Addressing Components,3.5in}
@subsection Physical Attachment Identification

The physical point of attachment (PPA in @figref{17}) is the point at which a system interface
attaches itself to a physical communications medium (a channel, facility or network interface).  All
communication on that physical medium funnels through the PPA associated with that physical medium.
On systems where a MGS provider supports more than one physical medium, the MGS user must identify
the medium through which it will communicate.  A PPA is identified by a unique PPA identifier.

For media that supports physical layer multiplexing of multiple channels over a single physical
medium (such as the B and D channels of ISDN), the PPA identifier must identify the specific
channel(s) over which communication will occur.  See also @ref{Multiplex Media}.

Unlike the Data Link Provider Interface (DLPI), which also uses the concept of a PPA, MGI does not
define a SAP for a MGS user.

Once a Stream has been associated with a PPA, all messages received on that medium are controlled by
the attached MGS user.  Only one major/minor device number combination (Stream head) can be
associated with a given PPA and active for a range of channels at any point in time.

@subsection MGS Provider Styles

Two styles of MGS provider are defined by MGI, distinguished by the way they enable a MGS user to
choose a particular PPA.

@subsubsection Style 1 MGS Provider

The @dfn{Style 1} provider assigns a PPA based on the major/minor device the MGS user opened.  One
possible implementation of a @dfn{Style 1} driver would reserve a major device for each PPA the
media gateway device driver would support.  This would allow the @acronym{STREAMS} clone open
feature to be used for each PPA configured.  This style of provider is appropriate when few PPAs
will be supported.

For example, a PCIe card that supports four SONET/SDH ports could assign a major device number to
the card diver and a minor device number to each of the ports on each card in the system.  To
establish a Stream to a MGS provider for a given port, the minor device number @samp{1} or @samp{2}
could be opened for port @samp{1} or @samp{2} on card @samp{1}, minor device number @samp{3} or
@samp{4} could be opened for port @samp{1} or @samp{2} on card @samp{2}, and so on.  One major
device number for the driver could easily support 127 cards in a system, which is not possible for
typical PCIe systems and, therefore, is ample.

@dfn{Style 1} providers do not user the @prim{MG_ATTACH_REQ} and @prim{MG_DETACH_REQ} primitives and
when freshly opened are in the @psta{MGS_ATTACHED} state.  That is, as illustrated in @figref{17},
the @dfn{Style 1} MGS provider associates the Stream with the PPA during the @manref{open(2s)} system
call.

@subsubsection Style 2 MGS Provider

If the number of PPAs as MGS provider will support is large, a @dfn{Style 2} provider implementation
is more suitable.  The @dfn{Style 2} provider requires a MGS user to explicitly identify the desired
PPA using a special attach service primitive.  For a @dfn{Style 2} driver, the @manref{open(2s)}
system call creates a Stream between the MGS user and MGS provider, and the attach primitive then
associated a particular PPA with that Stream.  The format of the PPA identifier is specific to the
MGS provider, and should be described in the provider-specific addendum documentation.

The MGS user uses the support primitvies(@prim{MG_ATTACH_REQ}, @prim{MG_ENABLE_REQ}) to associate a
Stream with a given Physical Point of Appearance.  @dfn{Style 2} MGS providers, when freshly opened,
are in the @psta{MGS_DETACHED} state.  That is, the @dfn{Style 2} MGS provider does not associate
the Stream with the PPA during the @manref{open(2s)} call, but only later when the
@prim{MG_ATTACH_REQ} primitive is issued by the MGS user.

@subsection Multiplex Media
@anchor{Multiplex Media}

To accommodate multiplexed media and multi-media channels, there are three kinds of PPA address:

@enumerate

@item A discrete PPA that specifies a non-multiplexed medium.

This is the normal case of a @dfn{Style 1} or @dfn{Style 2} MGS provider supporting access to a
non-multiplexed medium.  An example is a MGS provider supporting access to a FXO/FXS interface.

@item A specific PPA that specifies a single channel to a multiplexed medium.

This is again the normal case of a @dfn{Style 1} or @dfn{Style 2} MGS provider supporting access to
a specific channel in a multiplexed medium.  An example is a MGS provider supporting access to
channel 16 of an E1 interface.

@item A general PPA that specifies a channel group for a multiplexed medium.

This is th case of a @dfn{Style 1} or @dfn{Style 2} MGS provider supporting access to multiple
channels in a multiplexed medium.  An example is a MGS provider supporting statistically multiplexed
channel access to a full or fractional T1 facilitiy.  Another example is access to the left and
right channels of a stereo program.

@end enumerate

In the case of a general PPA, as enumerated in @dfn{3} above, some additional information is
required to identify which slots in the group of channle forming the multiplex are associatedw the
the MGS user Stream.  This additional information is provided using the @parm{mg_slot} parameter to
the @prim{MG_CONN_REQ}, @prim{MG_CONN_CON}, @prim{MG_DATA_REQ}, @prim{MG_DATA_IND},
@prim{MG_EVENT_IND}, @prim{MG_DISCON_REQ}, @prim{MG_DISCON_CON} and @prim{MG_DISCON_IND}
primitives.@footnote{Note that it is the ability of the Media Gateway Interface to support fractional
E1/T1 that distinguishes it from similar interfaces such as the SDLI and CDI.}

@node Media Gateway Parameters
@section Media Gateway Parameters


@node MGI Services Definition
@chapter MGI Services Definition

@menu
* Local Management Services::
* Protocol Services::
@end menu

@node Local Management Services
@section Local Management Services

@menu
* Acknowledgement Service::
* Information Reporting Service::
* Physical Point of Attachment Service::
* Initialization Service::
* Options Management Service::
* Error Reporting Service::
* Statistics Reporting Service::
* Event Reporting Service::
@end menu

@node Acknowledgement Service
@subsection Acknowledgement Service

The acknowledgement service provides the MGS user with the ability to receive positive and negative
acknowledgements regarding the successful or unsuccessful completion of services.

@itemize @bullet

@item @b{@prim{MG_OK_ACK}}:
The @prim{MG_OK_ACK} message is used by the MGS provider to indicate successful receipt and
completion of a service primitive request that requires positive acknowledgement.

@item @b{@prim{MG_ERROR_ACK}}:
The @prim{MG_ERROR_ACK} message is used by the MGS provider to indicate successful receipt and
failure to complete a service primitive request that requires negative acknowledgement.

@end itemize

A successful invocation of the acknowledgement service is illustrated in @figref{15}.

@figuresized{mgi15,15,Message Flow: Successful Acknowledgement Service,4.0in}
As illustrated in @figref{15}, the
service primitives for which a positive acknowledgement may be returned are the
@prim{MG_ATTACH_REQ} and @prim{MG_DETACH_REQ}.

An unsuccessful invocation of the acknowledgement service is illustrated in @figref{16}.

@figuresized{mgi16,16,Message Flow: Unsuccessful Acknowledgement Service,4.0in}
As illustrated in @figref{16}, the service primitives for which a negative acknowledgement may be
returned are the @prim{MG_INFO_REQ}, @prim{MG_ATTACH_REQ}, @prim{MG_DETACH_REQ},
@prim{MG_ENABLE_REQ}, @prim{MG_DISABLE_REQ} and @prim{MG_OPTMGMT_REQ} messages.

@node Information Reporting Service
@subsection Information Reporting Service

The information reporting service provides the MGS user with the ability to elicit information from
the MGS provider.

@itemize @bullet

@item @b{@prim{MG_INFO_REQ}}:
The @prim{MG_INFO_REQ} message is used by the MGS user to request information about the MGS
provider.

@item @b{@prim{MG_INFO_ACK}}:
The @prim{MG_INFO_ACK} message is issued by the MGS provider to provide requested information about
the MGS provider.

@end itemize

A successful invocation of the information reporting service is illustrated in @figref{2}.

@figuresized{mgi02,2,Message Flow: Successful Information Reporting Service,4.0in}

@node Physical Point of Attachment Service
@subsection Physical Point of Attachment Service

The local management interface provides the MGS user with the ability to associate a Stream to a
physical point of appearance (@dfn{PPA}) or to disassociate a Stream from a PPA.  The local
management interface provides for two styles of MGS provider:@footnote{See also @ref{Media Gateway
Addressing}.}

@subsubheading Style 1 MGS Provider

A @dfn{Style 1} MGS provider is a provider that associates a Stream with a PPA at the time of the
first @manref{open(2s)} call for the device, and disassociates a Stream from a PPA at the time of the
last @manref{close(2s)} call for the device.

Physical points of attachment (PPA) are assigned to major and minor device number combinations.
When the major and minor device number combination is opened, the opened Stream is automatically
associated with the PPA for the major and minor device number combination.  The last close of the
device disassociates the PPA from the Stream.

Freshly opened @dfn{Style 1} MGS provider Streams start life in the @psta{MG_DISABLED} state.

This approach is suitable for MGS providers implemented as real or pseudo-device drivers and is
applicable when the number of minor devices is small and static.

@subsubheading Style 2 MGS Provider

A @dfn{Style 2} MGS provider is a provider that associates a Stream with a PPA at the time that the
MGS user issues the @prim{MG_ATTACH_REQ} message.  Freshly opened Streams are not associated with
any PPA.  The @dfn{Style 2} MGS provider Stream is disassociated from a PPA when the Stream is
closed or when the MGS user issues the @prim{MG_DETACH_REQ} message.

Freshly opened @dfn{Style 2} MGS provider Streams start life in the @psta{MG_UNATTACHED} state.

This approach is suitable for MGS providers implemented as clone real or pseudo-device drivers  and
is applicable when the number of minor devices is large or dynamic.

@menu
* PPA Attachment Service::
* PPA Detachment Service::
@end menu

@node PPA Attachment Service
@subsubsection PPA Attachment Service

The PPA attachment service provides the MGS user with the ability to attach a @dfn{Style 2} MGS
provider Stream to a physical point of appearance (PPA).

@itemize @bullet

@item @b{@prim{MG_ATTACH_REQ}}:
The @prim{MG_ATTACH_REQ} message is issued by the MGS user to request that a @dfn{Style 2} MGS
provider Stream be attached to a specified physical point of appearance (PPA).

@item @b{@prim{MG_OK_ACK}}:
Upon successful receipt and processing of the @prim{MG_ATTACH_REQ} message, the MGS provider
acknowledges the success of the service completion with a @prim{MG_OK_ACK} message.

@item @b{@prim{MG_ERROR_ACK}}:
Upon successful receipt but failure to process the @prim{MG_ATTACH_REQ} message, the MGS provider
acknowledges the failure of the service completion with a @prim{MG_ERROR_ACK} message.

@end itemize

A successful invocation of the attachment service is illustrated in @figref{3}.

@figuresized{mgi03,3,Message Flow: Successful Attachment Service,4.0in}


@node PPA Detachment Service
@subsubsection PPA Detachment Service

The PPA detachment service provides the MGS user with the ability to detach a @dfn{Style 2} MGS
provider Stream from a physical point of attachment (PPA).

@itemize @bullet

@item @b{@prim{MG_DETACH_REQ}}:
The @prim{MG_DETACH_REQ} message is issued by the MGS user to request that a @dfn{Style 2} MGS
provider Stream be detached from the attached physical point of appearance (PPA).

@item @b{@prim{MG_OK_ACK}}:
Upon successful receipt and processing of the @prim{MG_DETACH_REQ} message, the MGS provider
acknowledges the success of the service completion with a @prim{MG_OK_ACK} message.

@item @b{@prim{MG_ERROR_ACK}}:
Upon successful receipt but failure to process the @prim{MG_DETACH_REQ} message, the MGS provider
acknowledges the failure of the service completion with a @prim{MG_ERROR_ACK} message.

@end itemize

A successful invocation of the detachment service is illustrated in @figref{4}.

@figuresized{mgi04,4,Message Flow: Successful Detachment Service,4.0in}

@node Initialization Service
@subsection Initialization Service

The initialization service provides the MGS user with the abilty to enable and disable the Stream
for the associated PPA.

@menu
* Interface Enable Service::
* Interface Disable Service::
@end menu

@node Interface Enable Service
@subsubsection Interface Enable Service

The interface enable service provides the MGS user with the ability to enable an MGS provider
Stream that is associated with a PPA.  Enabling the interface permits the MGS user to exchange
protocol service interface messages with the MGS provider.

@itemize @bullet

@item @b{@prim{MG_ENABLE_REQ}}:
The @prim{MG_ENABLE_REQ} message is issued by the MGS user to request that the protocol service
interface be enabled.

@item @b{@prim{MG_ENABLE_CON}}:
Upon successful enabling of the protocol service interface, the MGS provider acknowledges successful
completion of the service by issuing a @prim{MG_ENABLE_CON} message to the MGS user.

@item @b{@prim{MG_ERRORK_ACK}}:
Upon unsuccessful enabling of the protocol service interface, the MGS provider acknowledges the
failure to complete the service by issuing an @prim{MG_ERROR_ACK} message to the MGS user.

@end itemize

A successful invocation of the enable service is illustrated in @figref{5}.

@figuresized{mgi05,5,Message Flow: Successful Enable Service,4.0in}

@node Interface Disable Service
@subsubsection Interface Disable Service

The interface disable service provides the MGS user with the ability to disable an MGS provider
Stream that is associated with a PPA.  Disabling the interface withdraws the MGS user's ability to
exchange protocol service interface messages with the MGS provider.

@itemize @bullet

@item @b{@prim{MG_DISABLE_REQ}}:
The @prim{MG_DISABLE_REQ} message is issued by the MGS user to request that the protocol service
interface be disabled.

@item @b{@prim{MG_DISABLE_CON}}:
Upon successful disabling of the protocol service interface, the MGS provider acknowledges
successful completion of the service by issuing a @prim{MG_DISABLE_CON} message to the MGS user.

@item @b{@prim{MG_ERRORK_ACK}}:
Upon unsuccessful disabling of the protocol service interface, the MGS provider acknowledges the
failure to complete the service by issuing an @prim{MG_ERROR_ACK} message to the MGS user.

@item @b{@prim{MG_DISABLE_IND}}:
The @prim{MG_DISABLE_IND} message is used by the MGS provider to indicate to the MGS user that the
Stream has been autonomously disabled and the cause of the autonomous disabling.

@end itemize

A successful invocation of the disable service is illustrated in @figref{6}.

@figuresized{mgi06,6,Message Flow: Successful Disable Service,4.0in}

@node Options Management Service
@subsection Options Management Service

The options management service provides the MGS user with the ability to control and affect various
generic and provider-specific options associated with the MGS provider.

@itemize @bullet

@item @b{@prim{MG_OPTMGMT_REQ}}:
The MGS user issues a @prim{MG_OPTMGMT_REQ} message when it wishes to interrogate or affect the
setting of various generic or provider-specific options associated with the MGS provider for the
Stream upon which the message is issued.

@item @b{@prim{MG_OPTMGMT_ACK}}:
Upon successful receipt of the @prim{MG_OPTMGMT_REQ} message, and successful options processing, the
MGS provider acknowledges the successful completion of the service with an @prim{MG_OPTMGMT_ACK}
message.

@item @b{@prim{MG_ERROR_ACK}}:
Upon successful receipt of the @prim{MG_OPTMGMT_REQ} message, and unsuccessful options processing, the
MGS provider acknowledges the failure to complete the service by issuing an @prim{MG_ERROR_ACK}
message to the MGS user.

@end itemize

A successful invocation of the options management service is illustrated in @figref{7}.

@figuresized{mgi07,7,Message Flow: Successful Options Management Service,4.0in}

@node Error Reporting Service
@subsection Error Reporting Service

The error reporting service provides the MGS provider with the ability to indicate asynchronous
errors to the MGS user.

@itemize @bullet

@item @b{@prim{MG_ERROR_IND}}:
The MGS provider issues the @prim{MG_ERROR_IND} message to the MGS user when it needs to indicate an
asynchronous error (such as the unusability of the communications medium).

@end itemize

A successful invocation of the error reporting service is illustrated in @figref{8}.

@figuresized{mgi08,8,Message Flow: Successful Error Reporting Service,4.0in}

@node Statistics Reporting Service
@subsection Statistics Reporting Service

@itemize @bullet

@item @b{@prim{MG_STATS_IND}}:

@end itemize

A successful invocation of the statistics reporting service is illustrated in @figref{9}.

@figuresized{mgi09,9,Message Flow: Successful Statistics Reporting Service,4.0in}

@node Event Reporting Service
@subsection Event Reporting Service

The event reporting service provides the MGS provider with the ability to indicate specific
asynchronous management events to the MGS user.

@itemize @bullet

@item @b{@prim{MG_EVENT_IND}}:
The MGS provider issues the @prim{MG_EVENT_IND} message to the MGS user when it wishes to indicate
an asynchronous (management) event to the MGS user.

@end itemize

A successful invocation of the event reporting service is illustrated in @figref{10}.

@figuresized{mgi10,10,Message Flow: Successful Event Reporting Service,4.0in}

@node Protocol Services
@section Protocol Services

Protocol services are specific to the Media Gateway interface.  These services consist of
connection services that permit the transmit and receive directions to be connected to or
disconnected from the medium, and data transfer services that permit the exchange of bits between MGS
users.

The service primitives that implement the protocol services are described in detail in @ref{Protocol
Service Primitives}.

@menu
* Create Service::
* Join Service::
* Enable Service::
* Connection Service::
* Action Service::
* Data Transfer Service::
* Notify Service::
* Disconnection Service::
* Disable Service::
* Leave Service::
* Destroy Service::
@end menu

@node Create Service
@subsection Create Service

The create service provides the ability for the MGS user to create a session context.  A session
context so created does not have any termination points associated with it.  Session contexts
created with the @dfn{Create Service} can be destroyed with the @ref{Destroy Service}.  Session
contexts provide a mechanism whereby termination points can be enjoined into a communications
session.

@itemize @bullet

@item @b{@prim{MG_CREATE_REQ}}:
The @prim{MG_CREATE_REQ} primitive is used by the MGS user to create a session context.  The newly
created session context has no terminations associated with it.

@item @b{@prim{MG_CREATE_ACK}}:
The @prim{MG_CREATE_REQ} primitive is issued by the MGS provider to acknowledge creation of a
session context.

@end itemize

Session contexts can be long-lived or short-lived depending on the needs of the MGS user.  For
example, it is possible for the @dfn{Media Gateway} to allocated all of the session contexts that it
might need to perform its functions in advance of the need for communications within any given
session context.  Sessions may alternately be created on demand using the @ref{Join Service}.

@node Join Service
@subsection Join Service

The join service provides the ability for the MGS user to associate a termination point with a
session.  It is equivalent to the @msg{Add} service for a single termination point in H.248.
The join service may also be used to create a session context, on demand, by specifying a null
session context identifier.

@itemize @bullet

@item @b{@prim{MG_JOIN_REQ}}:
The @prim{MG_JOIN_REQ} primitive is used by the MGS user to associate a termination point with a
session context.  The primitive only affects a single termination point within a single session.
The primitive may also be used to create a session context.

@item @b{@prim{MG_JOIN_CON}}:
The @prim{MG_JOIN_CON} primitive is issued by the MGS provider to confirm that a termination point
has been associated with a session context.  The primitive only confirms the association of a single
termination point within a session.  The primitive may also be used to confirm the creation of a
session.

@end itemize

@noindent
A successful invocation of the join service is illustrated in @figref{18}.

@figuresized{mgi18,18,Message Flow: Successful Join Service by MGS Provider,4.0in}
The lifespan of a termination point within a session context can be long-lived or short-lived
depending on the needs of the MGS user.  For example, a @dfn{Media Gateway} can establish all of the
session contexts that it might need and enjoin termination points into the session contexts in
advance of any need for communication amoung the termination points within the sessions.  This
permits a pre-assigned association of termination points to session contexts.


@node Enable Service
@subsection Enable Service

The enable service provides the ability for the MGS user to reserve resources or set parameters
associated with a termination point.  It is equivalent in part to the @msg{Add} service for a single
termination point in @cite{ITU-T Recommendation H.248}.

The MGS user can choose the point at which termination points are to be enabled.  An enabled
termination point is not necessarily connected into a session context.  Where the nature of the
termination point does not require a procedure to be enabled, the @ref{Connection Service} can be
used to both enable the termination point and establish communications within the session in a
single operation.

Note that a termination point does not need to be joined to a session context to be enabled.

@itemize @bullet

@item @b{@prim{MG_ENABLE_REQ}}:
The @prim{MG_ENABLE_REQ} primitive is used by the MGS user to request that resources be allocated or
parameters be set for a termination point.  This may include, for example, the activation of an RTP
session, or the seizure of a TDM trunk.  Parameters that might be included when enabling a
termination point might include, for an RTP stream, whether RTCP is used, the maximum jitter buffer
size, the codec, and the IP address and port number of the remote end of the RTP stream.

@item @b{@prim{MG_ENABLE_CON}}:
The @prim{MG_ENABLE_CON} primitive is issued by the MGS provider to confirm that resources have been
allocated and parameters negotiated for a termination point.  This may include, for example, the
activation of an RTP session, or the seizure of a TDM trunk.

@end itemize

@noindent
A successful invocation of the enable service is illustrated in @figref{19}.

@figuresized{mgi19,19,Message Flow: Successful Enable Service by MGS Provider,4.0in}

@node Connection Service
@subsection Connection Service

The connection service provides the ability for the MGS user to specify that a termination point be
connected within a session context.  Termination points can be connected for transmission (samples
sent to the termination point) or for reception (samples received from the termination point) or
both.  Connecting a termination point within a session context causes transmission to be taken from
the session context and receiption to be provided to the session context.

@itemize @bullet

@item @b{@prim{MG_CONN_REQ}}:
The @prim{MG_CONN_REQ} message is used by the MGS user to request that the termination point be
connected to the session context.  Connection to the context might require some switching or other
mechanism to prepare the termination point for data transmission and reception.  Connections can be
formed for the receive direction or the transmit direction independently.

@item @b{@prim{MG_CONN_CON}}:
The @prim{MG_CONN_CON} message is used by the MGS provider to confirm that the termination point has
been connected to the session context.  Connection to the session context may have required some
switching or other mechanism to prepare the termination point for data transmission and receptoin.
Connection can be confirmed for the receive or transmit directions independently.

@end itemize

A successful invocation of the connection service is illustrated in @figref{11}.

@figuresized{mgi11,11,Message Flow: Successful Connection Service,4.0in}

@node Action Service
@subsection Action Service

The action service provides the ability for the MGS user to request that an action be performed on a
termination point within a session, or on an entire session.  It allows the MGS user to provide
tones, anouncements, test terminations, etc.

@itemize @bullet
@item @b{@prim{MG_ACTION_REQ}}:
The @prim{MG_ACTION_REQ} message is used by the MGS user to request that an action be performed on a
session or on a termination point within a session.  The action can be an audio pattern provided by
the MGS user in associated data blocks, or can be a pre-established pattern specified by the MGS
user.  The MGS user has control of the session and termination point within the session to which the
action is applied, the duration or repetition of the action.
@item @b{@prim{MG_ACTION_IND}}:
The @prim{MG_ACTION_IND} message is used by the MGS provider to indicate to the MGS user that a
requested action has been initiated or has passed a repetition point.
@item @b{@prim{MG_ACTION_CON}}:
The @prim{MG_ACTION_CON} message is used by the MGS provider to confirm to the MGS user that an
action of restricted duration or repetitions has reached the endi of its duration or repetitions.
@item @b{@prim{MG_ABORT_REQ}}:
The @prim{MG_ABORT_REQ} message is used by an MGS user to abort an ongoing actions that was
previously initiated with an @prim{MG_ACTION_REQ} message, but has not yet terminated (i.e. with an
@prim{MG_ACTION_CON}).
@end itemize

@noindent
A successful invocation of the action service is illustrated in @figref{20}.

@figuresized{mgi20,20,Message Flow: Successful Action Service by MGS Provider,4.0in}

@noindent
An aborted invocation of the action service is illustrated in @figref{21}.

@figuresized{mgi21,21,Message Flow: Aborted Action Service by MGS Provider,4.0in}

@node Data Transfer Service
@subsection Data Transfer Service

The data transfer service provides the MGS user with the ability to request that bits be
transmitted on the medium, and the MGS provider with the ability to indicate bits that have been
received from the medium.

@itemize @bullet

@item @b{@prim{MG_DATA_REQ}}:
The @prim{MG_DATA_REQ} message is used by the MGS user to place raw bits onto
the medium.  The Stream must have first been successfully activated in the transmit direction using
the @prim{MG_CONN_REQ} message.

@item @b{@prim{MG_DATA_IND}}:
The @prim{MG_DATA_IND} message is issued by the MGS provider when activated for the
receive direction with the @prim{MG_CONN_REQ} message, to indicate bits received on the medium.

@end itemize

A successful invocation of the data transfer service is illustrated in @figref{12}.

@figuresized{mgi12,12,Message Flow: Successful Data Transfer Service,4.0in}

@node Notify Service
@subsection Notify Service

The notify service provides the MGS user with the ability to request notification of specific events
or detected conditions.  These notifications can be on a specific termination point, within a
session context, or on a global basis.

@itemize @bullet

@item @b{@prim{MG_NOTIFY_REQ}}:
The @prim{MG_NOTIFY_REQ} message is used by the MGS user to request that the MGS provider issue
notification indications for specific events or detected conditions with the @dfn{Media Gateway}.

@item @b{@prim{MG_NOTIFY_IND}}:
The @prim{MG_NOTIFY_IND} message is issued by the MGS provider when a detected event requested by
the MGS user has occured.

@end itemize

This service is roughly equivalent to the @msg{Audit} service of @cite{ITU-T Recommendation
H.248.1}.

@node Disconnection Service
@subsection Disconnection Service

The disconnection service provides the ability for the MGS user to disconnect from the medium,
withdrawing from the purpose of transmitting bits, receiving bits, or both.  It allows the
MGS provider to autonomously indicate that the medium has been disconnected from the Stream.  In
OSI, this is a Layer 1 function, possibly the responsiblity of a multiplex or digital cross-connect
switch.

@itemize @bullet

@item @b{@prim{MG_DISCON_REQ}}:
The @prim{MG_DISCON_REQ} message is used by the MGS user to request that the Stream be
disconnected from the medium.  Disconnection from the medium might require some switching or other
mechanism.  Disconnection can be performed for the receive direction or the transmit direction
independently.

@item @b{@prim{MG_DISCON_CON}}:
The @prim{MG_DISCON_CON} message is used by the MGS provider to confirm that the Stream has been
disconnected from the medium.  Disconnect from the medium might require some switching or other
mechanism.  Disconnection can be confirmed for the receive or transmit directions independently.

@item @b{@prim{MG_DISCON_IND}}:
The @prim{MG_DISCON_IND} message is used by the MGS provider to indicate to the MGS user
that the termination point has been disconnected from the session context.  Disconnection is
indicated for both the receive and transmit directions.  Disconnection indications can result from
such things as loss of an RTP stream, on-hook condition, trunk release, or hardware-failure oriented
circuit blocking.  This primitive is roughly equivalent to the @msg{ServiceChange} service of
@cite{ITU-T Recommendation H.248} for a specific termination.

@end itemize

A successful invocation of the disconnection service by the MGS user is illustrated in @figref{13}.

@figuresized{mgi13,13,Message Flow: Successful Disconnection Service by MGS User,4.0in}
A successful invocation of the disconnection service by  the MGS provider is illustrated in @figref{14}.

@figuresized{mgi14,14,Message Flow: Successful Disconnection Service by MGS Provider,4.0in}

@node Disable Service
@subsection Disable Service

The disable service provides the ability for the MGS user to release resources associated with a
termination point.  It is equivalent in part to the @msg{Subtract} service for a single termination
point in @cite{ITU-T Recommendation H.248}.

The MGS user can choose th point at which termination points are to be enabled and disabled.  An
enabled or disable termination point is not necessarily connected into a session context.  Where the
nature of the termination point does not require a procedure to be disabled, the @ref{Disconnection
Service} can be used to both disable the termination point and disconnect communications within the
session in a single operation.

Note that a termination point does not need to be joined to a session context to be disabled.

@itemize @bullet

@item @b{@prim{MG_DISABLE_REQ}}:
The @prim{MG_DISABLE_REQ} primitive is used by the MGS user to request that resources be released
for a termination point.  This may include, for example, the deactivation of an RTP session, or the
release of a TDM trunk.

@item @b{@prim{MG_DISABLE_CON}}:
The @prim{MG_DISABLE_CON} primitive is issued by the MGS provider to confirm that resources have
been released for a termination point.  This may include, for example, the release of an RTP stream,
or the release of a TDM trunk.

@end itemize

@noindent
A successful invocation of the disable service is illustrated in @figref{22}.  The disable service
is an acknowledged and confirmed service that requries the immediate acknowledgement or refusal of
the requires penultimately followed by a confirmation on success.

@figuresized{mgi22,22,Message Flow: Successful Disable Service by MGS Provider,4.0in}

@node Leave Service
@subsection Leave Service

The leave service provides the ability for the MGS user to disassociate a termination point with a
session context.  It is roughly equivalent to the @msg{Subtract} service for a single termination
point in @cite{ITU-T Recommendation H.248}.  The leave service may also be used to disconnect a
termination point in one operation.

@itemize @bullet

@item @b{@prim{MG_LEAVE_REQ}}:
The @prim{MG_LEAVE_REQ} service provides the ability for the MGS user to disassociate a termination
point from a session context.  The primitive affects one or more termination points within a given
session context.  The primitive may also be used to disconnect termination points from the session
context as they are being disassociated.

@item @b{@prim{MG_LEAVE_CON}}:
The @prim{MG_LEAVE_CON} primitive is issued by the MGS provider to confirm that a termination point,
or a number of termination points, have been disconnected from and disassociated with a session
context.  The primitive confirms one or more termination point disconnects and removals from the
session.

@c @item @b{@prim{MG_LEAVE_IND}}:

@end itemize

@noindent
A successful invocation of the leave service is illustrated in @figref{23}.  The leave service is an
acknowleged and confirmed service that requires the immediate acknowledgement or refusal of the
request penultimately followed by a confirmation on success.

@figuresized{mgi23,23,Message Flow: Successful Leave Service by MGS Provider,4.0in}
The lifespan of termination points within a session context can be long-lived or short-lived
depending on the needs of the MGS user.  For example, a @dfn{Media Gateway} can establish all of the
session contexts that it might need in advance and enjoin termination points into the session
contexts in advance of any need for communiction among the termination points within the sessions.
This permits pre-assigned association of termination points to session contexts.  In this case, the
leave service is only required when tearing down an entire @dfn{Media Gateway}.

@node Destroy Service
@subsection Destroy Service

The destroy service allows an MGS user to request the destruction of a session context.  Destruction
of a session context may result in the disconnection and disassociation of all termination points
that are currently connected or enjoined in the session context.

@itemize @bullet

@item @b{@prim{MG_DESTROY_REQ}}:
The @prim{MG_DESTROY_REQ} primitive is used by an MGS user to request that a session context be
deleted.

@item @b{@prim{MG_DESTROY_ACK}}:
The @prim{MG_DESTROY_ACK} primitive is issued by the MGS provider to acknowledge the destruction of
a session context.  The session context identfier is available again to be used for the creation of
a session context.

@end itemize

Session contexts can be long-lived or short-lived depending on the needs of the MGS user.  For
example, it is possible for the @dfn{Media Gateway} to allocated all of the session contexts that it
might need to perform its functions in advance of the need for communications within any given
session context.  In this case, the destroy service might only be required when tearing down an
entire @dfn{Media Gateway}.

@node MGI Service Primitives
@chapter MGI Service Primitives

@menu
* Local Management Service Primitives::
* Protocol Service Primitives::
* Diagnostics Requirements::
@end menu

@node Local Management Service Primitives
@section Local Management Service Primitives

These service primitives implement the local management services (@pxref{Local Management
Services}).

@menu
* Acknowledgement Service Primitives::
* Information Reporting Service Primitives::
* Physical Point of Attachment Service Primitives::
* Initialization Service Primitives::
* Options Management Service Primitives::
* Event Reporting Service Primitives::
@end menu

@node Acknowledgement Service Primitives
@subsection Acknowledgement Service Primitives

These service primitives implement the acknowledgement service (@pxref{Acknowledgement Service}).

@menu
* MG_OK_ACK::
* MG_ERROR_ACK::
@end menu

@node MG_OK_ACK
@subsubsection MG_OK_ACK

@subsubheading Description

This primitive is used to acknowledge receipt and successful service completion for
primitives requiring acknowledgement that have no confirmation primitive.

@subsubheading Format
@tpindex MG_ok_ack

This primitive consists of one @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_ok_ack {
    mg_ulong mg_primitive;
    mg_ulong mg_correct_prim;
    mg_ulong mg_state;
} MG_ok_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_OK_ACK}.

@item mg_correct_prim
Indicates the service primitive that was received and serviced correctly.  This field can be one of
the following values:

@multitable @columnfractions .25 .75
@ignore
@item @prim{MG_INFO_REQ} @tab Information request.
@item @prim{MG_OPTMGMT_REQ} @tab Options management request.
@end ignore
@item @prim{MG_ATTACH_REQ} @tab Attach request.
@item @prim{MG_ENABLE_REQ} @tab Enable request.
@item @prim{MG_CONN_REQ} @tab Connect request.
@ignore
@item @prim{MG_DATA_REQ} @tab Data request.
@end ignore
@item @prim{MG_DISCON_REQ} @tab Disconnect request.
@item @prim{MG_DISABLE_REQ} @tab Disable request.
@item @prim{MG_DETACH_REQ} @tab Detach Request.
@ignore
@item @prim{MG_INFO_ACK} @tab Information acknowledgement.
@item @prim{MG_OPTMGMT_ACK} @tab Options Management acknowledgement.
@item @prim{MG_OK_ACK} @tab Successful receipt acknowledgement.
@item @prim{MG_ERROR_ACK} @tab Error acknowledgement.
@item @prim{MG_ENABLE_CON} @tab Enable confirmation.
@item @prim{MG_CONN_CON} @tab Connect confirmation.
@item @prim{MG_DATA_IND} @tab Data indication.
@item @prim{MG_DISCON_IND} @tab Disconnect indication.
@item @prim{MG_DISCON_CON} @tab Disconnect confirmation.
@item @prim{MG_DISABLE_IND} @tab Disable indication.
@item @prim{MG_DISABLE_CON} @tab Disable confirmation.
@item @prim{MG_EVENT_IND} @tab Event indication.
@end ignore
@end multitable

@item mg_state

Indicates the current state of the MGS provider at the time that the primitive was issued.
This field can be one of the following values;

@multitable @columnfractions .2 .8
@item @psta{MGS_UNINIT} @tab Unitialized.
@item @psta{MGS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MGS_DETACHED} @tab No PPA attached, awaiting @prim{MG_ATTACH_REQ}.
@ignore
@item @psta{MGS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MGS_WACK_UREQ} @tab Waiting for detach.
@end ignore
@item @psta{MGS_ATTACHED} @tab PPA attached, awaiting @prim{MG_ENABLE_REQ}.
@ignore
@c @item @psta{MGS_WACK_EREQ} @tab Waiting acknowledgement of @prim{MG_ENABLE_REQ}.
@end ignore
@item @psta{MGS_WCON_EREQ} @tab Waiting to send @prim{MG_ENABLE_CON}.
@ignore
@c @item @psta{MGS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MG_DISABLE_REQ}.
@end ignore
@item @psta{MGS_WCON_RREQ} @tab Waiting to send @prim{MG_DISABLE_CON}.
@item @psta{MGS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@ignore
@item @psta{MGS_WACK_CREQ} @tab Waiting acknowledgement of @prim{MG_CONN_REQ}.
@end ignore
@item @psta{MGS_WCON_CREQ} @tab Waiting to send @prim{MG_CONN_CON}.
@ignore
@item @psta{MGS_WACK_DREQ} @tab Waiting acknowledgement of @prim{MG_DISCON_REQ}.
@end ignore
@item @psta{MGS_WCON_DREQ} @tab Waiting to send @prim{MG_DISCON_CON}.
@item @psta{MGS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive is issued by the MGS provider in the @psta{MGS_WACK_AREQ}, @psta{MGS_WACK_UREQ},
@psta{MGS_WACK_CREQ} or @psta{MGS_WACK_DREQ} state.

@subsubheading New State

The new state is @psta{MGS_DETACHED}, @psta{MGS_ATTACHED}, @psta{MGS_ENABLED} or @psta{MGS_CONNECTED}, depending on the primitive to
which the message is responding.

@page
@node MG_ERROR_ACK
@subsubsection MG_ERROR_ACK

@subsubheading Description

The error acknowledgement primitive is used to acknowledge receipt and unsuccessful service
completion for primitives requiring acknowledgement.

@subsubheading Format
@tpindex MG_error_ack

The error acknowledgement primitive consists of one @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_error_ack {
    mg_ulong mg_primtive;
    mg_ulong mg_error_primitive;
    mg_ulong mg_error_type;
    mg_ulong mg_unix_error;
    mg_ulong mg_state;
} MG_error_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The error acknowledgement primitive contains the following parameters:

@table @parm

@item mg_primitive

Indicates the primitive type.  Always @prim{MG_ERROR_ACK}.

@item mg_error_type

Indicates the MG error number.
This field can have one of the following values:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@item mg_unix_error

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{mg_error_type} field
is @perr{MGSYSERR}, the @parm{mg_unix_error} field is the UNIX error number as described in
@manref{errno(3)}.

@item mg_error_primitive

Indicates the primitive that was in error.
This field can have one of the following values:

@multitable @columnfractions .25 .75
@item @prim{MG_INFO_REQ} @tab Information request.
@item @prim{MG_OPTMGMT_REQ} @tab Options management request.
@item @prim{MG_ATTACH_REQ} @tab Attach request.
@item @prim{MG_ENABLE_REQ} @tab Enable request.
@item @prim{MG_CONN_REQ} @tab Connect request.
@item @prim{MG_DATA_REQ} @tab Data request.
@item @prim{MG_DISCON_REQ} @tab Disconnect request.
@item @prim{MG_DISABLE_REQ} @tab Disable request.
@item @prim{MG_DETACH_REQ} @tab Detach Request.
@item @prim{MG_INFO_ACK} @tab Information acknowledgement.
@item @prim{MG_OPTMGMT_ACK} @tab Options Management acknowledgement.
@item @prim{MG_OK_ACK} @tab Successful receipt acknowledgement.
@item @prim{MG_ERROR_ACK} @tab Error acknowledgement.
@item @prim{MG_ENABLE_CON} @tab Enable confirmation.
@item @prim{MG_CONN_CON} @tab Connect confirmation.
@item @prim{MG_DATA_IND} @tab Data indication.
@item @prim{MG_DISCON_IND} @tab Disconnect indication.
@item @prim{MG_DISCON_CON} @tab Disconnect confirmation.
@item @prim{MG_DISABLE_IND} @tab Disable indication.
@item @prim{MG_DISABLE_CON} @tab Disable confirmation.
@item @prim{MG_EVENT_IND} @tab Event indication.
@end multitable

@item mg_state

Indicates the state of the MGS provider at the time that the primitive was issued.  This field can
have one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MGS_UNINIT} @tab Unitialized.
@item @psta{MGS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MGS_DETACHED} @tab No PPA attached, awaiting @prim{MG_ATTACH_REQ}.
@item @psta{MGS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MGS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MGS_ATTACHED} @tab PPA attached, awaiting @prim{MG_ENABLE_REQ}.
@c @item @psta{MGS_WACK_EREQ} @tab Waiting acknowledgement of @prim{MG_ENABLE_REQ}.
@item @psta{MGS_WCON_EREQ} @tab Waiting to send @prim{MG_ENABLE_CON}.
@c @item @psta{MGS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MG_DISABLE_REQ}.
@item @psta{MGS_WCON_RREQ} @tab Waiting to send @prim{MG_DISABLE_CON}.
@item @psta{MGS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MGS_WACK_CREQ} @tab Waiting acknowledgement of @prim{MG_CONN_REQ}.
@item @psta{MGS_WCON_CREQ} @tab Waiting to send @prim{MG_CONN_CON}.
@item @psta{MGS_WACK_DREQ} @tab Waiting acknowledgement of @prim{MG_DISCON_REQ}.
@item @psta{MGS_WCON_DREQ} @tab Waiting to send @prim{MG_DISCON_CON}.
@item @psta{MGS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
MGS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node Information Reporting Service Primitives
@subsection Information Reporting Service Primitives

These service primitives implement the information reporting service (@pxref{Information Reporting
Service}).

@menu
* MG_INFO_REQ::
* MG_INFO_ACK::
@end menu

@node MG_INFO_REQ
@subsubsection MG_INFO_REQ

@subsubheading Description

This MGS user originated primitive is issued by the MGS user to request that the MGS provider
return information concerning the capabilities and state of the MGS provider.

@subsubheading Format
@tpindex MG_info_req

The primitive consists of one @msg{M_PROTO} or @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_info_req {
    mg_ulong mg_primitive;
} MG_info_req_t;
@end verbatim
@end display

@subsubheading Parameters

This primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the primitive type.  Always @prim{MG_INFO_REQ}.

@end table

@subsubheading State

This primitive may be issued in any state but only when a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

This primitive requires the MGS provider to acknowledge receipt of the primitive as follows:

@itemize @minus

@item @b{Successful}:
The MGS provider is required to acknowledge receipt of the primitive and provide the requested
information using the @prim{MG_INFO_ACK} primitive.

@item @b{Unsuccessful (non-fatal errors)}:
The MGS provider is required to negatively acknowledge the primtive using the @prim{MG_ERROR_ACK}
primitive, and include the reason for failure in the primitive.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}: applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_INFO_ACK
@subsubsection MG_INFO_ACK

@subsubheading Description

This MGS provider originated primitive acknowledges receipt and successful processing of the
@prim{MG_INFO_REQ} primitive and provides the requested information concerning the MGS provider.

@subsubheading Format
@tpindex MG_info_ack

This message is formatted a one @msg{M_PROTO} or @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_info_ack {
    mg_ulong mg_primitive;    /* always MG_INFO_ACK */
    mg_ulong mg_addr_length;  /* media gateway address length */
    mg_ulong mg_addr_offset;  /* media gateway address offset */
    mg_ulong mg_parm_length;  /* media gateway parameters length */
    mg_ulong mg_parm_offset;  /* media gateway parameters offset */
    mg_ulong mg_prov_flags;   /* provider options flags */
    mg_ulong mg_prov_class;   /* provider class */
    mg_ulong mg_style;        /* provider style */
    mg_ulong mg_version;      /* media gateway interface version */
    mg_ulong mg_state;        /* media gateway state */
} MG_info_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The information acknowledgement service primitive has the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_INFO_ACK}.

@item mg_addr_length
Indicates the length of the PPA address to which the provider is attached.  When in states
@psta{MGS_DETACHED} or @psta{MGS_WACK_AREQ}, this value will be zero (@samp{0}).

@item mg_addr_offset
Indicates the offset, beginning from the start of the @msg{M_PCPROTO} message block of the
PPA address associated with the provider.
When the @parm{mg_addr_length} field is zero, this field is also zero (@samp{0}).

@item mg_parm_length
Indicates the length of the parameters associated with the provider.

@item mg_parm_offset
Indicates the offset, beginning from the start of the @msg{M_PCPROTO} message block, of the
parameters associated with the provider.
When the @parm{mg_parm_length} field is zero, this field is also zero (@samp{0}).

@item mg_prov_flags
Indicates the options flags associated with the provider.  This is a bitwise OR of zero or more of
the following flags:

@item mg_prov_class
Indicates the provider class.  This can be one of the following values:

@multitable @columnfractions .2 .6
@item @pval{MG_CIRCUIT} @tab Circuit provider class.
@end multitable

@item mg_addr_length
This is a variable length field.  The length of the field is determined by the length
attribute.

For a @dfn{Style 2} driver, when @parm{mg_style} is @pval{MG_STYLE2}, and when in an attached state,
this field provides the current PPA associated with the Stream; the length is typically 4 bytes.

For a @dfn{Style 1} driver, when @parm{mg_ppa_stype} is @pval{MG_STYLE1}, the length is 0 bytes.

@item mg_style
Indicates the PPA style of the MGS provider.  This value can be one of the following values;

@multitable @columnfractions .15 .65
@item @pval{MG_STYLE1} @tab PPA is implicitly attached by @manref{open(2s)}.
@item @pval{MG_STYLE2} @tab PPA must be explicitly attached using @prim{MG_ATTACH_REQ}.
@end multitable

@item mg_version
The version of the interface.  This version is @pval{MG_VERSION_1_1}.

@multitable @columnfractions .2 .6
@item @pval{MG_VERSION_1_0} @tab Version 1.0 of interface.
@item @pval{MG_VERSION_1_1} @tab Version 1.1 of interface.
@item @pval{MG_VERSION} @tab Always the current version of the header file.
@end multitable

@item mg_state
Indicates the state of the MGS provider at the time that the information acknowledgement service
primitive wsa issued.  This field can be one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MGS_UNINIT} @tab Unitialized.
@item @psta{MGS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MGS_DETACHED} @tab No PPA attached, awaiting @prim{MG_ATTACH_REQ}.
@item @psta{MGS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MGS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MGS_ATTACHED} @tab PPA attached, awaiting @prim{MG_ENABLE_REQ}.
@c @item @psta{MGS_WACK_EREQ} @tab Waiting acknowledgement of @prim{MG_ENABLE_REQ}.
@item @psta{MGS_WCON_EREQ} @tab Waiting to send @prim{MG_ENABLE_CON}.
@c @item @psta{MGS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MG_DISABLE_REQ}.
@item @psta{MGS_WCON_RREQ} @tab Waiting to send @prim{MG_DISABLE_CON}.
@item @psta{MGS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MGS_WACK_CREQ} @tab Waiting acknowledgement of @prim{MG_CONN_REQ}.
@item @psta{MGS_WCON_CREQ} @tab Waiting to send @prim{MG_CONN_CON}.
@item @psta{MGS_WACK_DREQ} @tab Waiting acknowledgement of @prim{MG_DISCON_REQ}.
@item @psta{MGS_WCON_DREQ} @tab Waiting to send @prim{MG_DISCON_CON}.
@item @psta{MGS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node Physical Point of Attachment Service Primitives
@subsection Physical Point of Attachment Service Primitives

These service primitives implement the physical point of attachment service (@pxref{Physical Point
of Attachment Service}).

@menu
* MG_ATTACH_REQ::
* MG_DETACH_REQ::
@end menu

@node MG_ATTACH_REQ
@subsubsection MG_ATTACH_REQ

@subsubheading Description

This MGS user originated primitive requests that the Stream upon which the primitive is issued be
associated with the specified Physical Point of Attachment (PPA).  This primitive is only applicable
to @dfn{Style 2} MGS provider Streams, that is, Streams that return @pval{MG_STYLE2} in the
@parm{mg_style} field of the @prim{MG_INFO_ACK}.

@subsubheading Format
@tpindex MG_attach_req

This primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef MG_attach_req {
    mg_ulong mg_primitive;
    mg_ulong mg_addr_length;
    mg_ulong mg_addr_offset;
    mg_ulong mg_flags;
} MG_attach_req_t;
@end verbatim
@end display

@subsubheading Parameters

The attach request primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_ATTACH_REQ}.

@item mg_addr_length
Specifies the Physical Point of Attachment (PPA) to which to associate the @dfn{Style 2} Stream.
This is a variable length identifier whose length is determined by the @parm{mg_addr_length} value.
Specifies the length of the Physical Point of Attachment (PPA) address.  The form of the PPA address
is provider-specific.

@item mg_addr_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
Physical Point of Attachment (PPA) address.

@item mg_flags
Specifies the options flags for attachment.  Options flags are provider-specific.

@end table

@subsubheading State

This primitive is only valid in state @psta{MGS_DETACHED} and when a local acknowledgement is not
pending.

@subsubheading New State

Upon success, the new state is @psta{MGS_WACK_AREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The attach request service primitive requires that the MGS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The MGS provider acknowledges receipt of the primitive and successful outcome of the attach service
with a @prim{MG_OK_ACK} primitive.  The new state is @psta{MGS_ATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The MGS provider acknowledges receipt of the primitive and failure of the attach service with a
@prim{MG_ERROR_ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_DETACH_REQ
@subsubsection MG_DETACH_REQ

@subsubheading Description

This MGS user originated primitive requests that the Stream upon which the primitive is issued be
disassociated from the Physical Point of Appearance (PPA) to which it is currently attached.  This
primitive is only applicable to @dfn{Style 2} MGS provider Streams, that is, Streams that return
@pval{MG_STYLE2} in the @parm{mg_style} field of the @prim{MG_INFO_ACK}.

@subsubheading Format
@tpindex MG_detach_req

The detach request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_detach_req {
    mg_ulong mg_primitive;
} MG_detach_req_t;
@end verbatim
@end display

@subsubheading Parameters

The detach request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_DETACH_REQ}.

@end table

@subsubheading State

This primitive is valid in the @psta{MGS_ATTACHED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{MGS_WACK_UREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The detach request service primitive requires that the MGS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The MGS provider acknowledges receipt of the primitive and successful outcome of the detach service
with a @prim{MG_OK_ACK} primitive.  The new state is @psta{MGS_DETACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The MGS provider acknowledges receipt of the primitive and failure of the detach service with a
@prim{MG_ERROR_ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node Initialization Service Primitives
@subsection Initialization Service Primitives

Initialization service primitives allow the MGS user to enable or disable the protocol service
interface.  Enabling the protocol service interface may require that some action be taken to prepare
the protocol service interface for use or to remove it from use.  For example, where the PPA
corresponds to a multiplex identifier as defined in G.703, it may be necessary to perform
switching to connect or disconnect the circuit identification code associated with the multiplex
identifier.

These service primitives implement the initialization service (@pxref{Initialization Service}).

@menu
* MG_ENABLE_REQ::
* MG_ENABLE_CON::
* MG_DISABLE_REQ::
* MG_DISABLE_CON::
* MG_DISABLE_IND::
@end menu

@node MG_ENABLE_REQ
@subsubsection MG_ENABLE_REQ

@subsubheading Description

This MGS user originated primitive requests that the MGS provider perform the actions necessary to
enable the protocol service interface and confirm that it is enabled.  This primitive is applicable
to both styles of PPA.

@subsubheading Format
@tpindex MG_enable_req

The enable request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_enable_req {
    mg_ulong mg_primitive;
    mg_ulong mg_addr_length;
    mg_ulong mg_addr_offset;
    mg_ulong mg_flags;
} MG_enable_req_t;
@end verbatim
@end display

@subsubheading Parameters

The enable request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_ENABLE_REQ}.

@item mg_addr_length
Specifies a remote address to which to connect the PPA.  The need for and form of this address is
provider-specific.  The length of the field is determined by the value of this field.
This remote address could be a circuit identification code, an IP address, or some other
form of circuit or multiplex identifier.

@item mg_addr_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
remote address.

@item mg_flags
Specifies the options flags associated with the enable request.  Options flags are
provider-specific.

@end table

@subsubheading State

This primitive is valid in the @psta{MGS_ATTACHED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success the new state is @psta{MGS_WCON_EREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The enable request service primitive requires that the MGS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MGS provider acknowledges successful completion of the enable service with a
@prim{MG_ENABLE_CON} primitive.  The new state is @psta{MGS_ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MGS provider acknowledges the failure of the enable service with a
@prim{MG_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_ENABLE_CON
@subsubsection MG_ENABLE_CON

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to confirm the successful
completion of the enable service.

@subsubheading Format
@tpindex MG_enable_con

The enable confirmation service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_enable_con {
    mg_ulong mg_primitive;
    mg_ulong mg_addr_length;
    mg_ulong mg_addr_offset;
    mg_ulong mg_flags;
} MG_enable_con_t;
@end verbatim
@end display

@subsubheading Parameters

The enable confirmation service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_ENABLE_CON}.

@item mg_addr_length
Confirms the length of the remote address to which the enable is confirmed.

@item mg_addr_offset
Confirms the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
remote address.

@item mg_flags
Confirms the options flags associated with the enable confirmation.  Options flags are
provider-specific.

@end table

@subsubheading State

This primitive is issued by the MGS provider in the @psta{MGS_WCON_EREQ} state.

@subsubheading New State

The new state is @psta{MGS_ENABLED}.

@page
@node MG_DISABLE_REQ
@subsubsection MG_DISABLE_REQ

@subsubheading Description

This MGS user originated primitive requests that the MGS provider perform the actions necessary to
disable the protocol service interface and confirm that it is disabled.  The primitive is applicable
to both styles of PPA.

@subsubheading Format
@tpindex MG_disable_req

The disable request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_disable_req {
    mg_ulong mg_primitive;
} MG_disable_req_t;
@end verbatim
@end display

@subsubheading Parameters

The disable request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_DISABLE_REQ}.

@end table

@subsubheading State

The disable request service primitive is valid in the @psta{MGS_ENABLED} state and when no local
acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{MGS_WCON_RREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The disable request service primitive requires the MGS provider to acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MGS provider acknowledges successful completion of the disable service with an
@prim{MG_DISABLE_CON} primitive.  The new state is @psta{MGS_ATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MGS provider acknowledges the failure of the disable service with a
@prim{MG_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_DISABLE_CON
@subsubsection MG_DISABLE_CON

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to confirm the successful
completion of the disable service.

@subsubheading Format
@tpindex MG_disable_con

The disable confirmation service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_disable_con {
    mg_ulong mg_primitive;
} MG_disable_con_t;
@end verbatim
@end display

@subsubheading Parameters

The disable confirmation service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_DISABLE_CON}.



@end table

@subsubheading State

This primitive is issued by the MGS provider in the @psta{MGS_WCON_RREQ} state.

@subsubheading New State

The new state is @psta{MGS_ATTACHED}.

@page
@node MG_DISABLE_IND
@subsubsection MG_DISABLE_IND

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider, if an autonomous event results
in the disabling of the MGS use Stream without an explicity MGS user request.

@subsubheading Format
@tpindex MG_disable_ind

The disable indication primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_disable_ind {
    mg_ulong mg_primitive;
    mg_ulong mg_cause;
} MG_disable_ind_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_DISABLE_IND}.

@item mg_cause
Indicates the cause of the autonomous disabling of the MGS user Stream.

@end table

@subsubheading State

This primitive will only be issued by the MGS provider in the @psta{MGS_ENABLED} state.

@subsubheading New State

The new state is @psta{MGS_ATTACHED}.

@page
@node Options Management Service Primitives
@subsection Options Management Service Primitives

The options management service primitives allow the MGS user to negotiate options with the MGS
provider, retrieve the current and default values of options, and check that values specified for
options are correct.

The options management service primitive implement the options management service (@pxref{Options
Management Service}).

@menu
* MG_OPTMGMT_REQ::
* MG_OPTMGMT_ACK::
@end menu

@node MG_OPTMGMT_REQ
@subsubsection MG_OPTMGMT_REQ

@subsubheading Description

This MGS user originated primitive requests that MGS provider options be managed.

@subsubheading Format
@tpindex MG_optmgmt_req

The option management request service primitive consists of one @msg{M_PROTO} or @msg{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct MG_optmgmt_req {
    mg_ulong mg_primitive;
    mg_ulong mg_opt_length;
    mg_ulong mg_opt_offset;
    mg_ulong mg_mgmt_flags;
} MG_optmgmt_req_t;
@end verbatim
@end display

@subsubheading Parameters

The option management request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_OPTMGMT_REQ}.

@item mg_opt_length
Specifies the length of the options.

@item mg_opt_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the options.

@item mg_mgmt_flags
Specifies the management flags that determine what operation the MGS provider is expected to
perform on the specified options.  This field can assume one of the following values:

@table @pval

@item MG_NEGOTIATE
Negotiate the specified value of each specified option and return the negotiated value.

@item MG_CHECK
Check the validity of the specified value of each specified option and return the result.  Do not
alter the current value assumed by the MGS provider.

@item MG_DEFAULT
Return the default value for the specified options (or all options).  Do not alter the current value
assumed by the MGS provider.

@item MG_CURRENT
Return the current value for the specified options (or all options).  Do not alter the current value
assumed by the MGS provider.

@end table

@end table

@subsubheading State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The option management request service primitive requires the MGS provider to acknowledge receipt of
the primitive as follows:

@itemize @minus

@item @b{Successful}:
Upon success, the MGS provider acknowledges receipt of the service primitive and successful
completion of the options management service with an @prim{MG_OPTMGMT_ACK} primitive containing the
options management result.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors)}:
Upon failure, the MGS provider acknowledges receipt of the service primitive and failure to
complete the options management service with an @prim{MG_ERROR_ACK} primitive containing the error.
The state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_OPTMGMT_ACK
@subsubsection MG_OPTMGMT_ACK

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider upon successful completion of
the options management service.  It indicates the outcome of the options management operation
requested by the MGS user in a @prim{MG_OPTMGMT_REQ} primitive.

@subsubheading Format
@tpindex MG_optmgmt_ack

The option management acknowledgement service primitive consists of one @msg{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct MG_optmgmt_ack {
    mg_ulong mg_primitive;
    mg_ulong mg_opt_length;
    mg_ulong mg_opt_offset;
    mg_ulong mg_mgmt_flags;
} MG_optmgmt_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The option management acknowledgement service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_OPTMGMT_ACK}.

@item mg_opt_length
Indicates the length of the returned options.

@item mg_opt_offset
Indicates the offset of the returned options from the start of the @msg{M_PCPROTO} message block.

@item mg_mgmt_flags
Indicates the returned management flags.  These flags indicate the overall success of the options
management service.  This field can assume one of the following values:

@table @pval

@item MG_SUCCESS
The MGS provider succeeded in negotiating or returning all of the options specified by the MGS
user in the @prim{MG_OPTMGMT_REQ} primitive.

@item MG_FAILURE
The MGS provider failed to negotiate one or more of the options specified by the MGS user.

@item MG_PARTSUCCESS
The MGS provider negotiated a value of lower quality for one or more of the options specified by
the MGS user.

@item MG_READONLY
The MGS provider failed to negotiate one or more of the options specified by the MGS user because
the option is treated as read-only by the MGS provider.

@item MG_NOTSUPPORT
The MGS provider failed to recognize one or more of the options specified by the MGS user.

@end table

@end table

@subsubheading State

This primitive is issued by the MGS provider in direct response to a @prim{MG_OPTMGMT_REQ} primitive.

@subsubheading New State

The new state remains unchangted.

@subsubheading Rules

The MGS provider observes the following rules when processing option management service requests:

@itemize ---

@item
When the @parm{mg_mgmt_flags} field in the @prim{MG_OPTMGMT_REQ} primitive is set to @pval{MG_NEGOTIATE},
the MGS provider will attempt to negotiate a value for each of the options specified in the
request.

@item
When the flags are @pval{MG_DEFAULT}, the MGS provider will return the default values of the specified
options, or the default values of all options known to the MGS provider if no options were
specified.

@item
When the flags are @pval{MG_CURRENT}, the MGS provider will return the current values of the specified
options, or all options.

@item
When the flags are @pval{MG_CHECK}, the MGS provider will attempt to negotiate a value for each of the
options specified in the request and return the resulg of the negotiation, but will not affect the
current value of the option.

@end itemize

@page
@node Event Reporting Service Primitives
@subsection Event Reporting Service Primitives

The event reporting service primitives allow the MGS provider to indicate asynchronous errors,
events and statistics collection to the MGS user.

These service primitives implement the event reporting service (@pxref{Event Reporting Service}).

@menu
* MG_ERROR_IND::
* MG_STATS_IND::
* MG_EVENT_IND::
@end menu

@node MG_ERROR_IND
@subsubsection MG_ERROR_IND

@subsubheading Description

This MGS provider originated service primitive is issued by the MGS provider when it detects and
asynchronous error event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MG_error_ind

The error indication service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_error_ind {
    mg_ulong mg_primitive;
    mg_ulong mg_error_type;
    mg_ulong mg_unix_error;
    mg_ulong mg_state;
} MG_error_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The error indication service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_ERROR_IND}.

@item MG_error_type
Indicates the MGI error number describing the error.  This field can have one of the following
values:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@item mg_unix_error

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{mg_error_type} field
is @perr{MGSYSERR}, the @parm{mg_unix_error} field is the UNIX error number as described in
@manref{errno(3)}.

@item mg_state

Indicates the state of the MGS provider at the time that the primitive was issued.
This field can have one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MGS_UNINIT} @tab Unitialized.
@item @psta{MGS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MGS_DETACHED} @tab No PPA attached, awaiting @prim{MG_ATTACH_REQ}.
@item @psta{MGS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MGS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MGS_ATTACHED} @tab PPA attached, awaiting @prim{MG_ENABLE_REQ}.
@c @item @psta{MGS_WACK_EREQ} @tab Waiting acknowledgement of @prim{MG_ENABLE_REQ}.
@item @psta{MGS_WCON_EREQ} @tab Waiting to send @prim{MG_ENABLE_CON}.
@c @item @psta{MGS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MG_DISABLE_REQ}.
@item @psta{MGS_WCON_RREQ} @tab Waiting to send @prim{MG_DISABLE_CON}.
@item @psta{MGS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MGS_WACK_CREQ} @tab Waiting acknowledgement of @prim{MG_CONN_REQ}.
@item @psta{MGS_WCON_CREQ} @tab Waiting to send @prim{MG_CONN_CON}.
@item @psta{MGS_WACK_DREQ} @tab Waiting acknowledgement of @prim{MG_DISCON_REQ}.
@item @psta{MGS_WCON_DREQ} @tab Waiting to send @prim{MG_DISCON_CON}.
@item @psta{MGS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
MGS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node MG_STATS_IND
@subsubsection MG_STATS_IND

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to indicate a periodic
statistics collection event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MG_stats_ind

The statistics indication service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_stats_ind {
    mg_ulong mg_primitive;
    mg_ulong mg_interval;
    mg_ulong mg_timestamp;
} MG_stats_ind_t;
@end verbatim
@end display

Following this structure within the @msg{M_PROTO} message block is the provider-specific statistics.

@subsubheading Parameters

The statistics indication service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_STATS_IND}.

@item mg_interval
Indicates the statistics collection interval to which the statistics apply.  This interval is
specified in milliseconds.

@item mg_timestamp
Indicates the UNIX time (from epoch) at which statistics were collected.  The timestamp is given in
milliseconds from epoch.

@end table

@subsubheading State

This service primitive may be issued by the MGS provider in any state in which a local
acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node MG_EVENT_IND
@subsubsection MG_EVENT_IND

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to indicate an asynchronous
event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MG_event_ind

The event indication service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_event_ind {
    mg_ulong mg_primitive;
    mg_ulong mg_event;
    mg_ulong mg_slot;
} MG_event_ind_t;
@end verbatim
@end display

Following this structure within the @msg{M_PROTO} message block is the provider-specific event
information.

@subsubheading Parameters

THe event indication service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_EVENT_IND}.

@item mg_event
Indicates the provider-specific event that has occured.

@multitable @columnfractions .3 .7
@item @pval{MGF_EVT_DCD_ASSERT} @tab Data carrier detect lead asserted.
@item @pval{MGF_EVT_DCD_DEASSERT} @tab Data carrier detect lead deasserted.
@item @pval{MGF_EVT_DSR_ASSERT} @tab Data set ready lead asserted.
@item @pval{MGF_EVT_DSR_DEASSERT} @tab Data set ready lead deasserted.
@item @pval{MGF_EVT_DTR_ASSERT} @tab Data terminal ready lead asserted.
@item @pval{MGF_EVT_DTR_DEASSERT} @tab Data terminal ready lead deasserted.
@item @pval{MGF_EVT_RTS_ASSERT} @tab Request to send lead asserted.
@item @pval{MGF_EVT_RTS_DEASSERT} @tab Request to send lead deasserted.
@item @pval{MGF_EVT_CTS_ASSERT} @tab Clear to send lead asserted.
@item @pval{MGF_EVT_CTS_DEASSERT} @tab Clear to send lead deasserted.
@item @pval{MGF_EVT_RI_ASSERT} @tab Ring indicator asserted.
@item @pval{MGF_EVT_RI_DEASSERT} @tab Ring indicator deasserted.
@item @pval{MGF_EVT_YEL_ALARM} @tab Yellow alarm condition.
@item @pval{MGF_EVT_BLU_ALARM} @tab Blue alarm condition.
@item @pval{MGF_EVT_RED_ALARM} @tab Red alarm condition.
@item @pval{MGF_EVT_NO_ALARM} @tab Alarm recovery condition.
@end multitable

@ignore
@item mg_timestamp
Indicates the UNIX time from epoch (in milliseconds).

@item mg_severity
Indicates the provider-specific severity of the event.
@end ignore

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media to which the event corresponds.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This service primitive can be issued by the MGS provider in any state where a local
acknowledgement is not pending.  Normally the MGS provider must be in the @psta{MGS_ENABLED} state for
event reporting to occur.

@subsubheading New State

The new state remains unchanged.

@page
@node Protocol Service Primitives
@section Protocol Service Primitives

Protocol service primitives implement the Media Gateway Interface protocol.  Protocol service
primitives provide the MGS user with the ability to connect transmission or reception directions of
the bit stream, pass bits for transmission and accept received bits.

These service primitives implement the protocol services (@pxref{Protocol Services}).

@menu
* Connection Service Primitives::
* Data Transfer Service Primitives::
* Action Service Primitives::
* Disconnection Service Primitives::
@end menu

@node Connection Service Primitives
@subsection Connection Service Primitives

The connection service primitives permit the MGS user to establish a connection between the line
(circuit or channel) and the MGS user in the transmit, receive, or both, directions.

These service primitives implement the connection service (@pxref{Connection Service}).

@menu
* MG_CONN_REQ::
* MG_CONN_CON::
@end menu

@node MG_CONN_REQ
@subsubsection MG_CONN_REQ

@subsubheading Description

This MGS user originated service primitive allows the MGS user to connect the user Stream to the
medium in the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MG_connect_req

The connect request primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_connect_req {
    mg_ulong mg_primitive;
    mg_ulong mg_conn_flags;
    mg_ulong mg_slot;
} MG_connect_req_t;
@end verbatim
@end display

@subsubheading Parameters

The connect request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_CONN_REQ}.

@item mg_conn_flags
Specifies the direction in which to connect.  This field can contain a bitwise OR of one or more of
the following flags:

@multitable @columnfractions .15 .65
@item @pval{MGF_RX_DIR} @tab Specifies that the MGS user Stream is to be connected to the medium in the receive direction.
@item @pval{MGF_TX_DIR} @tab Specifies that the MGS user Stream is to be connected to the medium in the transmit direction.
@item @pval{MGF_MONITOR} @tab Specifies that the MGS user Stream is to be connected to the medium in monitoring (tap) mode.
@end multitable

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media to be connected to the MGS User Stream.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This service primitive is only valid in the @psta{MGS_ENABLED} state.

@subsubheading New State

The new state is the @psta{MGS_WACK_CREQ} state.

@subsubheading Response

The connect request service primitive requires that the MGS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MGS provider acknowledges successful completion of the connect service with a
@prim{MG_OK_ACK} primitive.  The new state is @psta{MGS_WCON_CREQ}.  When the MGS provider
eventually completes the connection, it confirms the connection with a @prim{MG_CONN_CON}
primitive and the new state is then @psta{MGS_CONNECTED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MGS provider acknowledges the failure of the connect service with a
@prim{MG_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_CONN_CON
@subsubsection MG_CONN_CON

@subsubheading Description

This MGS provider originated service primitive allows the MGS provider to confirm the succesful
completion of the connect servivce with the connection of the user Stream to the medium in the
transmit, receive, or both, directions.

@subsubheading Format
@tpindex MG_connect_con

The connect confirmation primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_connect_con {
    mg_ulong mg_primitive;
    mg_ulong mg_conn_flags;
    mg_ulong mg_slot;
} MG_connect_con_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_CONN_CON}.

@item mg_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MGF_RX_DIR} @tab Confirms that the MGS user Stream was connected to the medium in the receive direction.
@item @pval{MGF_TX_DIR} @tab Confirms that the MGS user Stream was connected to the medium in the transmit direction.
@item @pval{MGF_MONITOR} @tab Confirms that the MGS user Stream was connected to the medium in monitoring (tap) mode.
@end multitable

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media that are confirmed connected to the MGS user Stream.  The form of the slot
specification is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This primitive will only be issued by the MGS provider in the @psta{MGS_WCON_CREQ} state.

@subsubheading New State

The new state of the interface is the @psta{MGS_CONNECTED} state.

@page
@node Data Transfer Service Primitives
@subsection Data Transfer Service Primitives

The data transfer service primitives permit the MGS user to pass bits for transmission to the MGS
provider and accept received bits from the MGS provider.

These service primitives implement the data transfer service (@pxref{Data Transfer Service}).

@menu
* MG_DATA_REQ::
* MG_DATA_IND::
@end menu

@node MG_DATA_REQ
@subsubsection MG_DATA_REQ

@subsubheading Description

This MGS user originated primitive allows the MGS user to specify bits for transmission on the
medium.

@subsubheading Format
@tpindex MG_data_req

The transmission request service primitive consists of one optional @msg{M_PROTO} message block followed
by one or more @msg{M_DATA} message blocks containing the bits for transmission.  The @msg{M_PROTO} message
block is structured as follows:

@display
@verbatim
typedef struct MG_data_req {
    mg_ulong mg_primitive;
    mg_ulong mg_slot;
} MG_data_req_t;
@end verbatim
@end display

@subsubheading Parameters

The transmission request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_DATA_REQ}.

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media upon which the user data is to be transmitted.  The form of the slot
specification is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This primitive is only valid in the @psta{MGS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node MG_DATA_IND
@subsubsection MG_DATA_IND

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to indicate bits that were
received on the medium.

@subsubheading Format
@tpindex MG_data_ind

The receive indication service primitive consists of one optional @msg{M_PROTO} message block followed by
one or more @msg{M_DATA} message blocks containing the received bits.  The @msg{M_PROTO} message block is
structured as follows:

@display
@verbatim
typedef struct MG_data_ind {
    mg_ulong mg_primitive;
    mg_ulong mg_slot;
} MG_data_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The receive indication service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_DATA_IND}.

@item mg_slot
Where the PPA corresponds to a multiplexed media, this parameter specifies to which of the media
streams the data indicated corresponds.  The form of the slot specification is provider- and
media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This primitive is only issued by the MGS provider in the @psta{MGS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node Action Service Primitives
@subsection Action Service Primitives

The action service primitives permit the MGS user to initiate and control and action that is to be
performed on a session or on a termination point within a session.

These service primitives implement the action service (@pxref{Action Service}).

@menu
* MG_ACTION_REQ::
* MG_ACTION_CON::
* MG_ACTION_IND::
* MG_ABORT_REQ::
@end menu

@node MG_ACTION_REQ
@subsubsection MG_ACTION_REQ

@subsubheading Description

This MGS user originated service primitive allows the MGS user to initiate an action on an existing
session or on an existing termination point within an existing session.

@subsubheading Format
@tpindex MG_action_req

The action request primitive consists of one @msg{M_PROTO} message block, followed by zero or more
@msg{M_DATA} blocks containing audio information.  The @msg{M_PROTO} message block is formatted as
follows:

@display
@verbatim
typedef struct MG_action_req {
    mg_ulong mg_primitive;      /* always MG_ACTION_REQ */
    mg_ulong mg_action;         /* requested action */
    mg_ulong mg_se_id;          /* session id */
    mg_ulong mg_tp_id;          /* termination id to perform action */
    mg_ulong mg_duration;       /* duration in milliseconds */
    mg_ulong mg_flags;          /* option flags */
} MG_action_req_t;
@end verbatim
@end display

@subsubheading Parameters

The action request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_ACTION_REQ}.

@item mg_action
Specifies the action to perform.  For specific values, see `Flags' below.

@item mg_se_id
Specifies the session in which to apply the action.  When specified as zero (0), the session
specified is that associated with the Stream upon which the @msg{MG_ACTION_REQ} was issued.

@item mg_tp_id
Specifies the termination point to which to apply the action.  When specified as zero (0), the
termination point(s) specified are all connected termination points within the specified session.

@item mg_duration
Specifies the duration of the pattern or repetition in milliseconds.  When specified as zero (0),
the default duration for the pattern or action will be used.

@item mg_flags
Specifies the flags associated with the action.  The flags ar described below under `Flags'.

@end table

@subsubheading Flags

The @parm{mg_flags} field can assume one of the following values:

@table @pval
@item MG_MORE_DATA
The data contained in @msg{M_DATA} message blocks associated with the @msg{M_PROTO} message block of
the primitive do not represent the entire pattern.  Subsequent @msg{M_DATA} message blocks (either
on their own, or combined with a @prim{MG_DATA_REQ} primitive) represent additional data
corresponding to the action.
@end table

The @parm{mg_action} field can assume one of the following values:

@table @pval
@item MG_ACTION_SEND_PATTERN
Specifies that the MGS provider is to send the pattern provided in associated @msg{M_DATA} message
blocks accompanying the @msg{M_PROTO} message block of the @prim{MG_ACTION_REQ} primitive.
The default duration is to send the pattern once.
@item MG_ACTION_REPEAT_PATTERN
Specifies that the MGS provider is to repeat the pattern provided in the associated @msg{M_DATA}
message blocks accompanying the @msg{M_PROTO} message block of the @prim{MG_ACTION_REQ} primitive.
The default duration is to repeat the pattern indefinitely.@footnote{Note: care should be taken with
attempting to repeat very long patterns.  The MGS provider is permitted to refuse repetition of
patterns on the basis of their length.}
@item MG_ACTION_LOOPBACK
Specifies that the MGS provider is to loopback the received media stream to the sent media stream
for a specific (or all connected) termination point(s) in the specified session.
The default duration is to repeat the condition indefinitely.
@item MG_ACTION_TEST_CONT
Specifies that the MGS provider is to apply a continuity test tone to a specific (or all connected)
termination point(s) in the specified session.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_TEST_MILLIWATT
Specifies that the MGS provider is to apply milliwatt test tone to a specific (or all connected)
termination point(s) in the specified session.  This capability is used to provide standard 100 test
lines.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_TEST_SILENT
Specifies that the MGS provider is to apply silent termination to a specific (or all connected)
termination point(s) in the specified session.  This capability is used to provide standard 100 test
lines.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_TEST_BALANCED
Specifies that the MGS provider is to apply balanced termination to a specific (or all connected)
termination point(s) in the specified session.  This capability is used to provide standard 100 test
lines.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_US_RINGBACK
Specifies that the MGS provider is to apply a ringback pattern, according to US standards, to the
specific (or all connected) termination point(s) in the specified session.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_US_BUSY
The MGS provider is to apply US busy pattern (T60).
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_US_REORDER
The MGS provider is to apply US reorder tone (T120).
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_US_PERM_SIGNAL
The MGS provider is to apply US receiver off hook (ROH).
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_US_BONG
The MGS provider is to apply US bong tone.
The default duration is to repeat the pattern once only.
@item MG_ACTION_EU_RINGBACK
The MGS provider is to apply EU ringback.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_EU_BUSY
The MGS provider is to apply EU busy.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_EU_REORDER
The MGS provider is to apply EU reorder.
The default duration is to repeat the pattern indefinitely.
@item MG_ACTION_EU_PERM_SIGNAL
The MGS provider is to apply EU receiver of hook.
@item MG_ACTION_EU_BONG
The MGS provider is to apply EU bong tone.
The default duration is to repeat the pattern once only.
@item MG_ACTION_MF_0
The MGS provider is to apply DTMF tones corresponding to digit 0.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_1
The MGS provider is to apply DTMF tones corresponding to digit 1.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_2
The MGS provider is to apply DTMF tones corresponding to digit 2.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_3
The MGS provider is to apply DTMF tones corresponding to digit 3.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_4
The MGS provider is to apply DTMF tones corresponding to digit 4.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_5
The MGS provider is to apply DTMF tones corresponding to digit 5.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_6
The MGS provider is to apply DTMF tones corresponding to digit 6.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_7
The MGS provider is to apply DTMF tones corresponding to digit 7.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_8
The MGS provider is to apply DTMF tones corresponding to digit 8.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_9
The MGS provider is to apply DTMF tones corresponding to digit 9.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_A
The MGS provider is to apply DTMF tones corresponding to digit A.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_B
The MGS provider is to apply DTMF tones corresponding to digit B.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_C
The MGS provider is to apply DTMF tones corresponding to digit C.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_D
The MGS provider is to apply DTMF tones corresponding to digit D.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_E
The MGS provider is to apply DTMF tones corresponding to digit E.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_MF_F
The MGS provider is to apply DTMF tones corresponding to digit F.
If the duration is not specified, the default duration is 200 milliseconds.
@item MG_ACTION_WAIT
The MGS provider is to wait for the specified duration.
If the duration is not specified, the default duration is 2 seconds.
@end table

@subsubheading State
This primitive is valid for existing sessions and termination points in any state.

@subsubheading New State
The state of the requesting Stream remains unchanged.  The state of the session and contained
termination points remain unchanged.

@subsubheading Response

The action request service primitive requires that the MGS provider acknowledge receipt of the
primitive.  The MGS user is not permitted to issue any MGI service primitives until it receives an
acknowledgement to this primitive.  Receipt acknowledgement is given by the MGS provider as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MGS provider acknowledges successful completion of the action service with an
@prim{MG_OK_ACK} primitive.  The new state is @psta{MGS_WCON_AREQ}.  When the MGS provider
eventually initiates the action, it confirms the initiation of the action with a
@prim{MG_ACTION_CON} primitive and the new state is then @psta{MGS_WIND_AREQ}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MGS provider acknowledges the failure of the connect service with a
@prim{MG_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_ACTION_CON
@subsubsection MG_ACTION_CON

@subsubheading Description

This MGS provider initiated service primitive is used by the MGS provider to inform the MGS user
that a requested action has begun.

@subsubheading Format
@tpindex MG_action_con

The action confirmation primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_action_con {
    mg_ulong mg_primitive;      /* always MG_ACTION_CON */
    mg_ulong mg_action;         /* confirmed action */
    mg_ulong mg_se_id;          /* session id */
    mg_ulong mg_tp_id;          /* termination id for action confirmed */
    mg_ulong mg_action_id;      /* action identifier */
} MG_action_con_t;
@end verbatim
@end display

@subsubheading Parameters

The action confirmation service primitive contains the following parameters:

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_ACTION_CON}.

@item mg_action

@item mg_se_id

@item mg_tp_id

@item mg_action_id

@end table

@subsubheading State
@subsubheading New State
@subsubheading Response
@subsubheading Reasons for Failure

@page
@node MG_ACTION_IND
@subsubsection MG_ACTION_IND

@subsubheading Description

This MGS provider initiated service primitive is used by the MGS provider to inform the MSG user
that a requested action has terminated or has reached a repetition point.

@subsubheading Format
@tpindex MG_action_ind

The action indication primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_action_ind {
    mg_ulong mg_primitive;      /* always MG_ACTION_IND */
    mg_ulong mg_action;         /* completed action */
    mg_ulong mg_se_id;          /* session id */
    mg_ulong mg_tp_id;          /* termination id for action completed */
    mg_ulong mg_action_id;      /* action identifier */
} MG_event_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The action indication service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_ACTION_IND}.

@item mg_action
@item mg_se_id
@item mg_tp_id
@item mg_action_id

@end table

@subsubheading State
@subsubheading New State
@subsubheading Response
@subsubheading Reasons for Failure

@page
@node MG_ABORT_REQ
@subsubsection MG_ABORT_REQ

@subsubheading Description

This MGS user originated primitive is used by the MGS user to terminate an ongoing action requested
on a session or termination point within a session.

@subsubheading Format
@tpindex MG_abort_req

The abort request primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MG_abort_req {
    mg_ulong mg_primitive;      /* always MG_ABORT_REQ */
    mg_ulong mg_se_id;          /* session id */
    mg_ulong mg_tp_id;          /* termination id for action to abort */
    mg_ulong mg_action_id;      /* identifier of action to abort */
} MG_abort_req_t;
@end verbatim
@end display

@subsubheading Parameters

The abort request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_ABORT_REQ}.

@item mg_se_id
@item mg_tp_id
@item mg_action_id

@end table

@subsubheading State
@subsubheading New State
@subsubheading Response
@subsubheading Reasons for Failure

@page
@node Disconnection Service Primitives
@subsection Disconnection Service Primitives

The disconnection service primitives permit the MGS user to disconnect the Stream from the line
(circuit or channel) for the transmit, receive, or both, directions.  They also allow the MGS
provider to indicate that a disconnection has occured outside of MGS user control.

These service primitives implement the disconnection service (@pxref{Disconnection Service}).

@menu
* MG_DISCON_REQ::
* MG_DISCON_CON::
* MG_DISCON_IND::
@end menu

@node MG_DISCON_REQ
@subsubsection MG_DISCON_REQ

@subsubheading Description

This MGS user originated service primitive allows the MGS user to disconnect the MGS user Stream
from the bit-stream in the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MG_disconnect_req

The disconnect request primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_disconnect_req {
    mg_ulong mg_primitive;   /* always MG_DISCON_REQ */
    mg_ulong mg_conn_flags;  /* direction to disconnect */
    mg_ulong mg_slot;        /* slot within multiplex */
} MG_disconnect_req_t;
@end verbatim
@end display

@subsubheading Parameters

The disconnect request service primitive contains the following parameters:

@table @parm

@item mg_primitive
Specifies the service primitive type.  Always @prim{MG_DISCON_REQ}.

@item mg_conn_flags
Specifies the direction from which to disconnect.  This field can be a bitwise OR of one or more of
the following flags:

@multitable @columnfractions .15 .65
@item @pval{MGF_RX_DIR} @tab Specifies that the MGS user Stream is to be disconnected from the medium in the receive direction.
@item @pval{MGF_TX_DIR} @tab Specifies that the MGS user Stream is to be disconnected from the medium in the transmit direction.
@item @pval{MGF_MONITOR} @tab Specifies that the MGS user Stream is to be discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media that have been autonomouosly disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This service primitive is only valid in the @psta{MGS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response

The disconnect request service primitive requires that the MGS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MGS provider acknowledges successful completion of the connect service with a
@prim{MG_OK_ACK} primitive.  The new state is @psta{MGS_WCON_DREQ}.  When the MGS provider
eventually completes the disconnection, it confirms the disconnect with a @prim{MG_DISCON_CON}
primitive and the new state is then @psta{MGS_ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MGS provider acknowledges the failure of the connect service with a
@prim{MG_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MGSYSERR} @tab UNIX system error.
@item @perr{MGBADADDR} @tab Bad address format or content.
@item @perr{MGOUTSTATE} @tab Interface out of state.
@item @perr{MGBADOPT} @tab Bad options format or content.
@item @perr{MGBADPARM} @tab Bad parameter format or content.
@item @perr{MGBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MGBADFLAG} @tab Bad flag.
@item @perr{MGBADPRIM} @tab Bad primitive.
@item @perr{MGNOTSUPP} @tab Primitive not supported.
@item @perr{MGBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MG_DISCON_CON
@subsubsection MG_DISCON_CON

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider to confirm the successful
completion of the disconnect service with the disconnection of the user Stream from the medium in
the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MG_disconnect_con

@display
@verbatim
typedef struct MG_disconnect_con {
    mg_ulong mg_primitive;
    mg_ulong mg_conn_flags;
    mg_ulong mg_slot;
} MG_disconnect_con_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_DISCON_CON}.

@item mg_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MGF_RX_DIR} @tab Confirms that the MGS user Stream was disconnected from the medium in the receive direction.
@item @pval{MGF_TX_DIR} @tab Confirms that the MGS user Stream was disconnected from the medium in the transmit direction.
@item @pval{MGF_MONITOR} @tab Confirms that the MGS user Stream was discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media that are confirmed as disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This primitive will only be issued by the MGS provider in the @psta{MGS_WCON_DREQ} state.

@subsubheading New State

The new state of the interface is the @psta{MGS_ENABLED} state.

@page
@node MG_DISCON_IND
@subsubsection MG_DISCON_IND

@subsubheading Description

This MGS provider originated primitive is issued by the MGS provider if an autonomous event
results in the disconnection of the transmit and receive bit-streams from the MGS user without
an explicit MGS user request.

@subsubheading Format
@tpindex MG_disconnect_ind

The disconnect indication primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MG_disconnect_ind {
    mg_ulong mg_primitive;   /* always MG_DISCON_IND */
    mg_ulong mg_conn_flags;  /* direction disconnected */
    mg_ulong mg_cause;       /* cause for disconnection */
    mg_ulong mg_slot;        /* slot within multiplex */
} MG_disconnect_ind_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mg_primitive
Indicates the service primitive type.  Always @prim{MG_DISCON_IND}.

@item mg_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MGF_RX_DIR} @tab Indicates that the MGS user Stream disconnected from the medium in the receive direction.
@item @pval{MGF_TX_DIR} @tab Indicates that the MGS user Stream disconnected from the medium in the transmit direction.
@item @pval{MGF_MONITOR} @tab Indicates that the MGS user Stream discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mg_cause
Indicates the cause of the autonomous disconnect.

@item mg_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media that have autonomously disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MGS provider on MGS provider originated primitives and is ignored by the MGS provider on MGS
user originated primitives.

@end table

@subsubheading State

This primtiive will only be issued by the MGS provider in the @psta{MGS_CONNECTED} state.

@subsubheading New State

The new state is @psta{MGS_ENABLED}.

@node Diagnostics Requirements
@section Diagnostics Requirements

Two error handling facilities should be provided to the MGS user: one to handle non-fatal errors,
and the other to handle fatal errors.

@subsection Non-Fatal Error Handling Facility

These are errors that do not change the state of the MGS interface as seen by the MGS user and
provide the user with the option of reissuing the MG primitive with the corrected options
specification.  The non-fatal error handling is provided only to those primitives that require
acknowledgements, and uses the @prim{MG_ERROR_ACK} to report these errors.  These errors retain the
state of the MGS interface the same as it was before the MGS provider received the primitive that
was in error.  Syntax errors and rule violations are reported via the non-fatal error handling
facility.

@subsection Fatal Error Handling Facility

These errors are issued by the MG provider when it detects errors that are not correctable by the
MG user, or if it is unable to report a correctible error to the MG user.  Fatal errors are
indicated via the STREAMS message type @msg{M_ERROR} with the UNIX system error @errno{EPROTO}.  The
@msg{M_ERROR} STREAMS message type will result in the failure of all the UNIX system calls on the
Stream.  The MGS user can recover from a fatal error by having all the processes close the files
associated with the Stream, and then reopening them for processing.




@node MGI Input-Output Controls
@chapter MGI Input-Output Controls

These input-output controls can be used to interrogate, negotiate, reset, collect and manage a given
channel or group of channels.  When issued on a MGS user Stream, they can only be used to affect the
channel or channels associated with the MGS user Stream.  Deattached @dfn{Style 2} Streams have no
associated channels.  When issued on a management Stream, they can be used to affect the
configuration of any channel or channels accessible to the management Stream (i.e.  provided by the
same driver, or temporarily linked from the control Stream).

Channels can have characteristics at the channel level, as well as characteristics at the channel
group level.  For example, the channel may not be looped back at the channel, but might be looped
back at the channel group (span).  Where the channel represents a channel within a multiplexed
medium (such as a PCM TDM facility), the MGI input-output controls can be used to interrogate,
negotiate and otherwise manage the channel group characteristics providing that the MGS user has
sufficient privilege to do so.

Note that these input-output controls are not normally issued on the global management Stream by
user processes.  Rather the Management Agent (SNMP Agent) for the driver is normally responsible for
managing channels within the driver using these input-output controls.  Nomally these input-output
controls would only be issued by user processes to affect the channel or channels associated with
the attached MGS user Stream. 

@menu
* MGI Configuration::
* MGI Options::
* MGI State::
* MGI Statistics::
* MGI Events::
* MGI Commands::
@end menu

@node MGI Configuration
@section MGI Configuration

These input-output controls can be used to interrogate or negotiate the configuration of a given
channel or group of channels.

@menu
* MGI Get Configuration::
* MGI Set Configuration::
* MGI Test Configuration::
* MGI Commit Configuration::
@end menu

@display
@verbatim
typedef struct mg_config {
    mg_ulong type;         /* unused */
    mg_ulong encoding;     /* encoding */
    mg_ulong block_size;   /* data block size (bits) */
    mg_ulong samples;      /* samples per block */
    mg_ulong sample_size;  /* sample size (bits) */
    mg_ulong rate;         /* clock rate (samples/second) */
    mg_ulong tx_channels;  /* number of tx channels */
    mg_ulong rx_channels;  /* number of rx channels */
    mg_ulong opt_flags;    /* options flags */
} mg_config_t;
@end verbatim
@end display

The multiplex configuration structure, @type{mg_config_t}, contains the following members:

@table @member
@item type
This member is only to maintain alignment with the equivalient parameter structure as defined in the
MGI and unused in the input-output control.
@item encoding
Indicates or specifies the encoding associated with the multiplex.  When the multiplex is used for any
form of data, @pval{MG_ENCODING_NONE} will be indicated and should be specified.  @member{encoding}
can be one of the following values:
@multitable @columnfractions .3 .5
@item @pval{MG_ENCODING_NONE} @tab No encoding.  Used for data or other clear channel information.
@item @pval{MG_ENCODING_CN} @tab CN.
@item @pval{MG_ENCODING_DVI4} @tab DVI4.
@item @pval{MG_ENCODING_FS1015} @tab FIPS FS 1015 LPC.
@item @pval{MG_ENCODING_FS1016} @tab FIPS FS 1016 LPC.
@item @pval{MG_ENCODING_G711_PCM_A} @tab G.711 PCM A-law.
@item @pval{MG_ENCODING_G711_PCM_L} @tab G.711 PCM Linear.
@item @pval{MG_ENCODING_G711_PCM_U} @tab G.711 PCM Mu-law.
@item @pval{MG_ENCODING_G721} @tab G.721.
@item @pval{MG_ENCODING_G722} @tab G.722.
@item @pval{MG_ENCODING_G723} @tab G.723.
@item @pval{MG_ENCODING_G726} @tab G.726.
@item @pval{MG_ENCODING_G728} @tab G.728.
@item @pval{MG_ENCODING_G729} @tab G.729.
@item @pval{MG_ENCODING_GSM} @tab GSM.
@item @pval{MG_ENCODING_GSM_EFR} @tab GSM Extended Full-Rate.
@item @pval{MG_ENCODING_GSM_HR} @tab GSM Half-Rate.
@item @pval{MG_ENCODING_LPC} @tab LPC.
@item @pval{MG_ENCODING_MPA} @tab MPA.
@item @pval{MG_ENCODING_QCELP} @tab QCELP.
@item @pval{MG_ENCODING_RED} @tab RED.
@item @pval{MG_ENCODING_S16_BE} @tab Signed 16-bit Big-Endian.
@item @pval{MG_ENCODING_S16_LE} @tab Signed 16-bit Little-Endian.
@item @pval{MG_ENCODING_S8} @tab Sign 8-bit.
@item @pval{MG_ENCODING_U16_BE} @tab Unsigned 16-bit Big-Endian.
@item @pval{MG_ENCODING_U16_LE} @tab Unsigned 16-bit Little-Endian.
@item @pval{MG_ENCODING_U8} @tab Unsigned 8-bit.
@item @pval{MG_ENCODING_VDVI} @tab DVI.
@end multitable
@item block_size
Specifies or indicates the block size associated with the multiplex.  The block size is the number of
samples that are written or read at one time.  If this value is less than the size of a STREAMS fast
buffer, @pval{FASTBUF}, then a @pval{FASTBUF} of samples will be read or written at once.
@item samples
Specifies or indicates the number of samples (from the same timeslot) in a block.
@item sample_size
Specifies or indicates the sample size in bits.  This can normally be 3, 4, 5, 7, 8, 12, 14 or 16.
@item rate
Specifies or indicates the rate of the multiplex.  This is the rate in samples per second.
@member{rate} can be one of the following values:
@multitable @columnfractions .3 .5
@item @pval{MG_RATE_VARIABLE} @tab The rate is variable.
@item @pval{MG_RATE_8000} @tab 56kbps or 64kbps.
@item @pval{MG_RATE_11025} @tab 11kHz Audio.
@item @pval{MG_RATE_16000} @tab 16kHz Audio.
@item @pval{MG_RATE_22050} @tab 22kHz Audio.
@item @pval{MG_RATE_44100} @tab 44kHz Audio.
@item @pval{MG_RATE_90000} @tab 90kHz Audio.
@item @pval{MG_RATE_184000} @tab 23B.
@item @pval{MG_RATE_192000} @tab T1 (24B).
@item @pval{MG_RATE_240000} @tab 30B.
@item @pval{MG_RATE_248000} @tab E1 (31B).
@end multitable
@item tx_channels
Specifies or indicates the number of transmit channels available.  For the MG interface, this value
is either 0 or 1.
@item rx_channels
Specifies or indicates the number of receive channels available.  For the MG interface, this value
is either 0, 1, or 2.  (The value of 2 is used for monitoring mode where two receive channels exists
and zero transmit channels.)
@item opt_flags
Specifies or indicates the options associated with the MG provider.  MG provider options are
provider specific and no generic options have yet been defined.
@end table

@node MGI Get Configuration
@subsection MGI Get Configuration
@subsubheading @pioc{MG_IOCGCONFIG}

Gets the media gateway configuration.  Upon success, the media gateway configuration is written to the memory
extent indicated by the pointer argument to the @manref{ioctl(2s)} call.

@node MGI Set Configuration
@subsection MGI Set Configuration
@subsubheading @pioc{MG_IOCSCONFIG}

Set the media gateway configuration.  Upon success, the media gateway configuration is read from the memory
extent specified by the pointer argument to the @manref{ioctl(2s)} call.

@node MGI Test Configuration
@subsection MGI Test Configuration
@subsubheading @pioc{MG_IOCTCONFIG}

Test the media gateway configuration.  Upon success, the media gateway configuration is read from the memory
extent specified by the pointer argument to the @manref{ioctl(2s)} call, values adjusted according to
the rules for configuration, and the resulting configuraiton written back to the memory extent
specified by the pointer argumnet to the @manref{ioctl(2s)} call.  Actual configuration is not
changed.

@node MGI Commit Configuration
@subsection MGI Commit Configuration
@subsubheading @pioc{MG_IOCCCONFIG}

Confirms the media gateway configuration.  Upon success, the media gateway configuration is read from the memory
extent specified by the pointer argument to the @manref{ioctl(2s)} call, values adjusted according to
the rules for configuration, the configuration applied, and then the resulting configuration written
back to the memory extent specified by the pointer argument to the @manref{ioctl(2s)} call.

Normally, the argument to the @pioc{MG_IOCCCONFIG} call is the same as to an immediately preceding
@pioc{MG_IOCTCONFIG} call.

@node MGI Options
@section MGI Options

These input-output controls can used to interrogate or negotiate the options associated with a
given channel or group of channels.

@node MGI State
@section MGI State

These input-output controls can be used to interrotate or reset the state associated with a channel
or a group of channels.

State input-output controls all take an argument containing a poitner to a @type{mg_statem_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mg_statem {
    mg_ulong index;
    mg_ulong type;
    mg_ulong rate;
    mg_ulong mode;
    mg_ulong admin_state;
    mg_ulong usage_state;
    mg_ulong avail_status;
    mg_ulong ctrl_status;
} mg_statem_t;
@end verbatim
@end display

The media gateway state structure, @type{mg_statem_t}, contains the following members:

@table @member
@item index
Provides  time slot index for the channel.  For T1 and J1 spans, the time slots @samp{1} through
@samp{24} index the corresponding time slot in the span.  For E1 spans, the time slot indices
@samp{1} throught @samp{31} index the corresponding time slot in the span.  For E1 operation, TS0 is
unusable.  For E1 CAS operation (where any channel in the span is configured for CAS), TS16 is not
available to users for payload.  For V.35 and other discrete synchronous channels, this index is
@samp{1}.
@item type
Specifies or indicates whether the channel (or channels) has channel associated signalling or common
channel signalling.  This field can have one of the following values:
@table @pval
@item MG_TYPE_NONE
For non-trunk channels, no type is necessary.
@item MG_TYPE_CAS
For T1 and J1 span, channel associated signalling implies 56kbps DS0A operation for data within the
channel.
@item MG_TYPE_CCS
For E1, T1 or J1 spans, common channel signalling implies 64kbps DS0 oepration within the channel is
indicated.  For E1, CCS operation for the entire span implies that channel 17 (timeslot 16) is used
for common channel signalling or is also available for payload.  This is why it is typical on
non-CAS E1 spans to place the signalling channel in timeslot 16 (e.g.  the D-channel of a primary
rate interface).
@end table
@item rate
Specifies or indicates the bit rate of the channel in a single-rate channel, or of each channel in a
multi-rate channel, or of each channel in a full-rate channel.  Channels @samp{1} through @samp{24}
for T1 and J1 can be 56kbps or 64kbps.  Channels @samp{1} through @samp{31} for E1 are 64kbps but
can be forced into 56kbps mode.  The default is 64kbps for E1 CCS and CAS channels and T1 CCS
channels; 56kbps for T1 CAS channels.
@item mode
Specifies or indicates the channel mode.  This is bitwise OR of zero or more of the following
values:
@table @pval
@item MG_MODE_REMLOOP
The receive data in the channel is looped back to replace the transmit data for the channel.  This
may either be accomplished within the host or using the per-channel loopback capability of some chip
sets.
@item MG_MODE_LOCLOOP
The transmit data for the channel is looped back to replace the receive data for the channel.  This
may be accomplished within the host.
@item MG_MODE_TEST
The channel is marked for BERT testing.  When BERT testing for the span is enabled on a channel
basis, this channel will be included in the channels upon which the BERT test pattern is
transmitted.
@end table
Because tests are disruptive, no value can be added to this set unless the channel has a control
status of ``subject to test'' or ``reserved for test''.
@item admin_state
Specifies or indicates the administrative state of the channel.  The administrative state can be one
of the following values:
@table @pval
@item MG_ADMIN_LOCKED
The administrative state is ``locked''.  The channel is administratively prohibited from providing
service to users.
@item MG_ADMIN_UNLOCKED
The administrative state is ``unlocked''.  The channel is administratively permitted to provide
service to users.
@item MG_ADMIN_SHUTDOWN
The administrative state is ``shutting down''.  The channel will continue to provide service to
existing users but will reject new users: once there are no more users of the channel, the channel
will move to the ``locked'' state.
@end table
@item usage_state
Specifies or indicates the usage state of the channel.  The usage state can be one of the following
values:
@table @pval
@item MG_USAGE_IDLE
The channel is ``idle''.  The channel is not currently in use.
@item MG_USAGE_ACTIVE
The channel is ``active''.  The channel is in use and has sufficient operating capacity to provide
for additional users simultaneously (e.g. a half-channel is used).
@item MG_USAGE_BUSY
The channel is ``busy''.  The channel is in use and has no spare capacity (i.e. the full channs is
in use).
@end table
If partial channels are not supported, only the values ``idle'' and ``busy'' are allowed.
@item avail_status
Specifies or indicates the availabiltiy status of the channel.  The availablity status is a bitwise
OR of zero or more of the following values:
@table @pval
@item MG_AVAIL_INTEST
The channel is ``in test''.  The channel is undergoing a test procedure.  The administrative state
is ``locked'' and the operational state is ``disabled''.  This condition exists while the span is in
test in a manner disruptive to the channel, or when the channel is in loopback or test modes.
@item MG_AVAIL_FAILED
The channel has ``failed''.  The channel has an internal fault that prevents it from operating.  The
operational state is ``disabled''.  This value is present when the same value is present in the span
availability status.
@item MG_AVAIL_POWEROFF
The channel has ``power off''.  The channl requires power to be applied and is not powered on.  For
example, power management may have removed power from the device.  This value is present when the
same value is present in the span availablity status.
@item MG_AVAIL_OFFLINE
The channel is ``off line''.  The channel requires a outing operation to be performed to place it
online and make it available for use.  The operation may be manul or automatic, or both.  The
operational state is ``disabled''.  This value is present when the same value is present in the span
availability status.
@item MG_AVAIL_OFFDUTY
The channel is ``off duty''.  The channel has been made inactive by an internal control process in
accordance with a predetermined time schedule.  Under normal conditions, the control process can be
expected to reactivate the channel at some scheduled time.
@item MG_AVAIL_DEPEND
The channel has a ``dependency''.  The channel cannot operate because some other resource on which
it depends is unavailable (e.g. the span).
@item MG_AVAIL_DEGRADED
The channel is ``degraded''.  The channel is operating with degraded peformance.  This value is
present when the same value is present in the span availability status.
@item MG_AVAIL_MISSING
The channel is ``not installed''.  The channel is not present in the system or is incomplete.
@item MG_AVAIL_LOGFULL
Not used.
@end table
@item ctrl_status
Specifies or indicates the control status of the channel.  The control status is a bitwise OR of
zero or more of the following values:
@table @pval
@item MG_CTRL_CANTEST
The channel is ``subject to test''.  The channel is available to normal users but tests may be
conducted on it simultaneously at unpredicatable times, which may cause it to exhibit unusual
characteristics to users.
@item MG_CTRL_PARTLOCK
The channel is ``part of services locked''.  A manager has adminstratively locked some part of the
channel.
@item MG_CTRL_RESERVED
The channel is ``reserved for test''.  The channel is undergoing a test procedure and is unavailable
to users.
@item MG_CTRL_SUSPENDED
The channel is ``suspended''.  The channel service has been administratively suspended to users.
@end table
@end table

@subsection MGI Get State
@subsubheading @pioc{MG_IOCGSTATEM}

Requests that the state information be obtained and written to the @type{mg_statem_t} structure
pointed to by the argument to the input-output control.

@subsection MGI Reset State
@subsubheading @pioc{MG_IOCCMRESET}

Request that the state associated with the media gateway be reset.  This input-output control takes no
argument.

@node MGI Statistics
@section MGI Statistics

These input-output controls can be used to collect statistics or set staticstics collection intervals
associated with a channel or group of channels.

Statistics input-output controls all take an argument containing a pointer to a @type{mg_stats_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mg_stats {
    mg_ulong header;
    mg_ulong rx_octets;
    mg_ulong tx_octets;
    mg_ulong rx_overruns;
    mg_ulong tx_underruns;
    mg_ulong rx_buffer_overflows;
    mg_ulong tx_buffer_overflows;
    mg_ulong lead_cts_lost;
    mg_ulong lead_dcd_lost;
    mg_ulong carrier_lost;
    mg_ulong errored_seconds;
    mg_ulong severely_errored_seconds;
    mg_ulong severely_errored_framing_seconds;
    mg_ulong unavailable_seconds;
    mg_ulong controlled_slip_seconds;
    mg_ulong path_coding_violations;
    mg_ulong line_errored_seconds;
    mg_ulong bursty_errored_seconds;
    mg_ulong degraded_minutes;
    mg_ulong line_coding_violations;
} mg_stats_t;
@end verbatim
@end display

The media gateway statistics structure, @type{mg_stats_t}, contains the following members:

@table @member
@item header
Specifies or indicates the statistics period header associated with the media gateway.  This header is a
statistics collection period in milliseconds.
@item rx_octets
Indicates the number of octets received during the collection interval.  This does not include
octets for which there was a receiver overrun condition.
@item tx_octets
Indicates the number of octets transmitted during the collection interval.  This does not include
octets for which there was a transmitter underrun condition.
@item rx_overruns
Indicates the number of receive overrun conditions that occurred during the collection interval.
When the overrun condition spans interval boundaries, the condition is counted in the interval
during which the overrun condition began.
@item tx_underruns
Indicates the number of transmitter underrun conditions that occurred during the collection
interval.  When the underrun condition spans interval boundaries, the condition is counted in the
interval during which the underrun condition began.
@item rx_buffer_overflows
Indicates the number of receive buffer overflows that occured during the collection interval.
Receive buffer overflow conditions occur when the driver is unable to allocate a message block or
buffer for received bits, resulting in the discard of the received bits.
@item tx_buffer_overflows
Indicates the number of transmit buffer overflows that occured during the collection interval.
Transmit buffer overflow conditions occur when the driver is unable to allocate a message block or
buffer for transmit bits, resulting in the discard of the bits to be transmitted.
@item lead_cts_lost
Indicates the number of Clear To Send leads lost.  That is, the number of times that the Clear To
Send lead transitioned from asserted to deasserted.
@item lead_dcd_lost
Indicates the number of Data Carrier Detect leads lost.  That is, the number of times that the Data
Carrier Detect lead trasitioned from asserted to deasserted.
@item carrier_lost
Indicates the number of Carrier lost conditions.  That is, the number of times that an alarm or lead
indicated that the facility carrier was lost.
@item errored_seconds
The number of errored seconds (ESs) in the current interval.  An errored second has one or more path
code violations, one or more out of frame defects, one or more controlled slip events, or a detected
alarm indication signal (AIS) defect.
@item severely_errored_seconds
The number of severely errored seconds (SESs) in the current interval.
@item severely_errored_framing_seconds
The number of severely errored framing seconds (SEFSs) in the current interval.  A severely errored
framing second has one or more out of frame defects or a detected AIS defect.
@item unavailable_seconds
The number of unavailable seconds in the current interval.
@item controlled_slip_seconds
The number of controlled slip seconds (CSSs) in the current interval.  A controlled slip second has
one or more controlled slip events.
@item path_coding_violations
The number of path coding violations (PCVs) in the current interval.  A path coding violation is a
fram synchronization bit error in the D4  and E1 no-CRC4 formats, or a CRC or frame synchronization
bit error in the ESF and E1 CRC4 formats.
@item line_errored_seconds
The number of line errored seconds (LESs) in the current interval.  A line errored second is a
second in which one or more line code violation error events are detected.
@item bursty_errored_seconds
The number of bursty errroed seconds (BESs) in the current interval.  A bursty errored second has 2
to 319 path coding violation error events, no severely errored frame defects, and no detected
inocming AIS defects.
@item degraded_minutes
The number of degraded minutes (DMs) in the current interval.
@item line_coding_violations
The number of line coding violations (LCVs) in the current interval.  An LCV is the occurence of a
bipolar violation (BPV) or excessive zeroes (EXZ) error event.
@end table

@node MGI Events
@section MGI Events

These input-output controls can be used to specify the events that will be reported by a channel or
channels.

Notification input-output controls all take an argument containing a pointer to a @type{mg_notify_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mg_notify {
    mg_ulong events;
} mg_notify_t;
@end verbatim
@end display

The media gateway events structure, @type{mg_notify_t}, contains the following members:

@table @member
@item events
Specifies or indicates a bitwise OR of the events associated with the media gateway.  When a bit is set,
it specifies that event reporting for the specific event is enabled for the media gateway; when clear,
that the event reporting is disabled.
@end table

@subsection MGI Get Notify
@subsubheading @pioc{MG_IOCGNOTIFY}

Requests that the events associated with the media gateway be obtained and written to the
@type{mg_notify_t} structure pointed to by the argument to the input-output control.

@subsection MGI Set Notify
@subsubheading @pioc{MG_IOCSNOTIFY}

Requests that the events associated with the media gateway be read from the @type{mg_notify_t} structure
pointed to by the argument to the input-output control and set for the media gateway.  Each bit set in the
@member{events} member specifies an event for which notification is to be set.

@subsection MGI Clear Notify
@subsubheading @pioc{MG_IOCCNOTIFY}

Request that the events associated with the media gateway be read from the @type{mg_notify_t} structure
pointed to by the argument to the input-output control and cleared for the media gateway.  Each bit set in
the @member{events} member specifies an event for which notification is to be cleared.

@node MGI Commands
@section MGI Commands

These input-output controls can be used to manage a channel or channels.

Management input-output controls all take an argument containing a pointer to a @type{mg_mgmt_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mg_mgmt {
    mg_ulong cmd;
} mg_mgmt_t;
@end verbatim
@end display

The media gateway management structure, @type{mg_mgmt_t}, contains the following members:

@table @member
@item cmd
Specifies the management command to be performed by the MGS provider.
This member can have one of the following values:
@table @pval
@item MG_CMD_REMLOOP
Place the multiplex in remote loopback.  The administrative state of
the multiplex must be ``locked'' for this command to be successfull.  Once complete, the control
status of the multiplex will contain ``reserved for test'' and the availability status of the
multiplex
will contain ``in test''.
@item MG_CMD_LOCLOOP
Place the multiplex in local loopback.  The administrative state of
the multiplex must be ``locked'' for this command to be successfull.  Once complete, the control
status of the multiplex will contain ``reserved for test'' and the availabiltiy status of the
multiplex
will contain ``in test''.
@item MG_CMD_FORTEST
Reserve the multiplex for BERT testing.  The administrative state of
the multiplex must be ``locked'' for this command to be successful.  Once complete, the control status
of the multiplex will contain ``reserved for test'' and the availability status of the multiplex will
contain ``in test'' while BERT testing is actively being performed.
@item MG_CMD_LOCK
Place the multiplex in the ``locked'' administrative state.  If the
multiplex is in the ``unlocked'' or ``shutting down'' states and the usage state is ``busy'', this
will result in the removal from service of the multiplex while it is in use.
@item MG_CMD_UNLOCK
Place the multiplex in the ``unlocked'' administrative state.  This
makes the multiplex adminstratively available for use.
@item MG_CMD_SHUTDOWN
Place the multiplex in the ``shutting down'' administrative state.
If the multiplex has a usage state of ``idle'' the multiplex will be placed immediately into the
``locked'' administrative state.  If the usage state is ``busy'', then the administrative state will
be set to ``shutting down'' and the driver will wait until the multiplex is released before it is
placed in the ``locked'' administrative state.
@end table
@end table

@subsection MGI Command
@subsubheading @pioc{MG_IOCCMGMT}

Request that the management command be read from the @type{mg_mgmt_t} structure pointed to by the
argument to the input-output control and acted upon for the media gateway.

@node MGI Management
@chapter MGI Management

@node Mapping of MGI Primitives to ITU-T H.248
@unnumbered Mapping of MGI Primitives to ITU-T H.248

@table @command
@item Add
@prim{MG_JOIN_REQ}, @prim{MG_JOIN_CON}
@prim{MG_CONN_REQ}, @prim{MG_CONN_CON}
@item Modify
@prim{MG_OPTMGMT_REQ}, @prim{MG_OPTMGMT_ACK}
@prim{MG_CONN_REQ}, @prim{MG_CONN_CON}
@prim{MG_DISCON_REQ}, @prim{MG_DISCON_IND}, @prim{MG_DISCON_CON}
@item Subtract
@prim{MG_LEAVE_REQ}, @prim{MG_LEAVE_IND}, @prim{MG_LEAVE_CON}
@item Move
@prim{MG_LEAVE_REQ}, @prim{MG_LEAVE_IND}, @prim{MG_LEAVE_CON}
@prim{MG_DISCON_REQ}, @prim{MG_DISCON_IND}, @prim{MG_DISCON_CON}
@prim{MG_CONN_REQ}, @prim{MG_CONN_CON}
@prim{MG_JOIN_REQ}, @prim{MG_JOIN_CON}
@item AuditValue
@prim{MG_OPTMGMT_REQ}, @prim{MG_OPTMGMT_ACK}
@item AuditCapabilities
@prim{MG_INFO_REQ}, @prim{MG_INFO_ACK}
@item Notify
@prim{MG_NOTIFY_REQ}, @prim{MG_NOTIFY_IND}
@item ServiceChange
@prim{MG_DISCON_IND}, @prim{MG_LEAVE_IND}, @prim{MG_NOTIFY_IND}
@end table

@subsubheading Mode Property

@table @parm
@item SendOnly
@item RecvOnly
@item SendRecv
@item Inactive
@item LoopBack
@end table

@node Addendum for ITU-T H.248 Conformance
@unnumbered Addendum for ITU-T H.248 Conformance

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables

@node MGI Header Files
@appendix MGI Header Files
@menu
* MGI Header File Listing::
* MGI Input-Output Controls Header File Listing::
@end menu

@node MGI Header File Listing
@section MGI Header File Listing

@noindent
@smallformat
@verbatiminclude mgi.h
@end smallformat

@node MGI Input-Output Controls Header File Listing
@section MGI Input-Output Controls Header File Listing

@noindent
@smallformat
@verbatiminclude mgi_ioctl.h
@end smallformat

@node MGI Drivers and Modules
@appendix MGI Drivers and Modules

There are a number of standard drivers and modules provided by the @cite{OpenSS7 Project} the
provide capabilities uilizing the Media Gateway Interface.

@menu
* MGI Drivers::		MGI Modules provided by the OpenSS7 Project.
* MGI Modules::		MGI Drivers provided by the OpenSS7 Project.
@end menu

@node MGI Drivers
@section MGI Drivers

Drivers that provide the MGI interace fall into two categories:

@subsection MGI Pseudo-device Drivers

Pseudo-device drivers that accept or provide the MGI interface for the purpose of providing or
controlling access the multiplexed facilities available on a system.

@subsubsection Media Gateway Driver---@code{mg}

The @file{mg} driver is a pseudo-device multiplexing driver that provides the @dfn{Media Gateway
Interface} (MGI) at its upper service interface and accepts the @dfn{Channel Interface} (CHI) at its
lower service interface.  This driver provides the MGI service interface to directly control
@dfn{Media Gateway} (MG) functions.  Its purpose is to control the @dfn{Switch Matrix Multiplexing
Driver} (@file{matrix}) beneath it and connected using CHI streams, and to perform media
marshalling, conversion, tones, announcements and termination functions of a @dfn{Media Gateway}.

Due to the intensive nature of media handling and conversion and desire for wide scalability, the
functions such as those performed by this driver (that are in the media stream) are best performed
by @acronym{STREAMS} modules or drivers.@footnote{This is due to the superior scheduling and
throughput performance exhibited by @acronym{STREAMS} modules and drivers.}

The @dfn{Media Gateway Controller} for this MG function can either be local to the same host, or
remote, using the services of the @dfn{H.248 Media Gateway (MG) Driver}, @file{h248-mg}.

@subsubsection H.248 Media Gateway Controller (MGC) Driver--@code{h248-mgc}

The @file{h248-mgc} driver is peudo-device multiplexing driver that provides the MGI interface at
its upper service interface and accepts the NPI or TPI interface at its lower service interface.
This driver performs the conversion of the MGI service interface to the H.248 protocol carried on
the lower transport streams.  Its purpose is to implement the @dfn{Media Gateway Controller} (MGC)
side of the MGC-MG communications as described in the @cite{ITU-T Recommendation H.248} and
equivalent IETF RFCs.  It could support both H.248 (MEGACO) and MGCP.

The @file{h248-mgc} driver can be used to control a remote MG.  It would normally be used by a
@dfn{Media Gateway Controller} (MGC) or softswitch.

In general, it is not necessary for the conversion between the H.248 or MGCP protocol and the
services of the MGI to be performed by a @acronym{STREAMS} module.  This is because the protocol is
only involved in the setup and tear-down of media connections, and is not directly involved in the
media path.  Therefore, a user-space application is quite capable of performing the same functions
using the normal user-space services: XTI or Sockets for accessing the transport streams.

@subsubsection H.248 Media Gateway (MG) Driver---@code{h248-mg}

The @file{h248-mg} driver is a pseudo-device multiplexing driver that provides the MGI interface at
its lower service interface and also accepts the NPI or TPI interface at its lower service
interface.  This driver performs the conversion of the MGI service interface to and from the H.248
protocol carried on the transport streams.  Its purpose is to implement the @dfn{Media Gateway} (MG)
side of the MGC-MG communications as described in the @cite{ITU-T Recommendation H.248} and
equivalent IETF RFCs.  It could support both H.248 (MEGACO) and MGCP.

In general, it is not necessary for the conversion between H.248 and MGCP protocol and the services
of the MGI to be performed by a @acronym{STREAMS} module.  This is because the protocol is only
involved in the setup and tear-down of media connections, and is not directly involved in the media
path.  Therefore, a user-space application is quite capable of performing the same functions using
the normal user-space services: XTI or Sockets for accessing the transport streams, and the MGI for
accessing the MG driver (which is kernel resident and directly involved in handling media).

@subsection MGI Device Drivers

There are currently no real device drivers that provide the MGI interface.

@node MGI Modules
@section MGI Modules

@acronym{STREAMS} pushable modules are an excellent way of adapting a MGS user Stream that conforms to
the general concept of a communications media gateway into a complex communications protocol.

There are currently no pushable modules implementing the MGI.

@node MGI Applications
@appendix MGI Applications

The media gateway interface is a rather important upper layer component of a number of @cite{OpenSS7
Project} protocol and media stacks.

@menu
* MGI in MGC Stack::
* MGI in MG Stack::
@end menu

@node MGI in MGC Stack
@section MGI in MGC Stack

As illustrated in @figref{B-8}, the MGI interface provides support for the remote control of a @dfn{Media
Gateway} (MG) using several related protocols used for that purpose.  The protocols are @cite{MGCP}
and @cite{MEGACO}@footnote{@cite{ITU-T Recommendation H.248}.}.

@figuresized{mgib8,B-8,Media Gateway Controller Stack,5.75in}
The MGI interface is responsible for providing access to media gateway services necessary for the
@dfn{Media Gateway Controller} to control the functions of the @dfn{Media Gateway}.  Use of the MGI
and the @cite{OpenSS7} media gateway controller MGCP/MEGACO component provides a mechanism whereby
any media gateway, whether local or remote, can be controlled by an MGC as a MGS user of the MGI.

The stack also provides the capability of providing for redundancy of remote media gateways, or
redundant configuration with local and remote media gateways.

Note that, because the H.248/MEGACO and MGCP protocols are only used for setup and tear-down of
media connections, the traffic is not intensive under normal operation.  This makes H.248/MEGACO and
MGCP possible to be implemented in user-space applications using regular application approaches.
However, there is one instance where H.248 requires extensive messaging: when performing audits on
large media gateways.  In these circumstances audits on 10's to 100's of thousand circuits might be
required in an extremely short interval.  For ISUP applications, this may particularly be true when
adjacent switches with trunks groups with 10's of thousands of circuits restart.

Also note that, in an integrated MGC-MG product such as the @cite{Optranex 248}, use of H.248 might
not be necessary.

@node MGI in MG Stack
@section MGI in MG Stack

As illustrated in @figref{B-9}, the MGI interface provides support for both the remote control by a
@dfn{Media Gateway Controller} (MGC) of the local MG functions, as well as providing an interface
for interaction using IP transport and the @cite{MGCP} or @cite{MEGACO} protocols.

@figuresized{mgib9,B-9,Media Gateway Stack,5.75in}
The MGI interface is responsible both for providing a service primitive interface that is capable of
performing the functions of the H.248/MEGACO and MGCP protocols, as well as providing for the
control of the media functions of the media gatway itself.  This is illustrated by the two
multiplexing drivers, @file{h248-mgc} and @file{mg}, illustrated in @figref{B-9}.

@node MGI Utilities
@appendix MGI Utilities

No MGI-specific utilities are currently provided.

@node MGI File Formats
@appendix MGI File Formats

No MGI-specific file formats are currently defined.

@node MGI Compatibility and Porting
@appendix MGI Compatibility and Porting

The @dfn{Media Gateway Interface} (MGI) is a service interface and API that is defined by the
@cite{OpenSS7 Project} for use with @cite{OpenSS7} modules, drivers and applications programs and
has not (to our knowledge) been implemented by others.  The interface uses standard
@acronym{STREAMS} and @cite{POSIX/SUSv3} facilities.  As such, there are no compatibility or porting
issues associated with the interface.

@node Glossary
@unnumbered Glossary

@table @emph

@item Media Gateway Service Data Unit

A grouping of MGS user data whose boundaries are preserved from one end of the signalling data link
connection to the other.

@item Data transfer

The phase in connection and connectionless modes that supports the transfer of data between to media
gateway service users.

@item MGS provider

The media gateway control layer protocol that provides the services of the media gateway interface.

@item MGS user

The user-level application or user-level or kernel-level protocol that accesses the services of the
media gateway layer.

@item Local management

The phase in connection and connectionless modes in which a MGS user initializes a Stream and
attaches a PPA address to the Stream.  Primitives in this phase generate local operations only.

@item PPA

The point at which a system attaches itself to a physical communications medium.

@item PPA identifier

An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {MGS Provider}{International Telecommunication Union - Telecom Sector}
@item ANSI @tab American National Standards Institute
@item ETSI @tab European Telecommunications Standards Institute
@item GCP @tab Gateway Control Protocol
@item H.248 @tab ITU-T Recommendation H.248
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item LMS Provider @tab A provider of Local Management Services
@item LMS @tab Local Management Service
@item LMS User @tab A user of Local Management Services
@item LM @tab Local Management
@item LSC @tab Link State Control
@item MEGACO @tab Media Gateway Control Protocol
@item MGCP @tab Media Gateway Control Protocol
@item MGC @tab Media Gateway Controller
@item MGSP @tab MGS Provider
@item MGS @tab Media Gateway Service
@item MGSU @tab MGS User
@item MG @tab Media Gateway
@item PPA @tab Physical Point of Attachment
@item SS7 @tab Signalling System No. 7
@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}
@item [1] @anchor{Q.700} @tab @uref{http://www.itu.int/rec/T-REC-Q.700/,ITU-T Recommendation Q.700},
@cite{Introduction to CCITT Signalling System No. 7},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [2] @anchor{Q.701} @tab @uref{http://www.itu.int/rec/T-REC-Q.701/,ITU-T Recommendation Q.701},
@cite{Functional Description of the Message Transfer Part (MTP) of Signalling System No. 7},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [3] @anchor{Q.702} @tab @uref{http://www.itu.int/rec/T-REC-Q.702/,ITU-T Recommendation Q.702},
@cite{Signalling System No. 7---Signalling Data Link},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [4] @anchor{Q.703} @tab @uref{http://www.itu.int/rec/T-REC-Q.703/,ITU-T Recommendation Q.703},
@cite{Signalling System No. 7---Signalling Link},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [5] @anchor{Q.704} @tab @uref{http://www.itu.int/rec/T-REC-Q.704/,ITU-T Recommendation Q.704},
@cite{Message Transfer Part---Signalling Network Functions and Messages},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [6] @anchor{CDIAPI} @tab
Geoffrey Gerrietts; Dave Grothe, Mikel Matthews, Dave Healy,
@cite{CDI---Application Program Interface Guide},
March 1999,
(Savoy, IL),
GCOM, Inc.
@item [7] @anchor{Q.771} @tab @uref{http://www.itu.int/rec/T-REC-Q.771/,ITU-T Recommendation Q.771},
@cite{Signalling System No. 7---Functional Description of Transaction Capabilities},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@end multitable

@node Licenses
@unnumbered Licenses

All code presented in this manual is licensed under the @ref{GNU Affero General Public License}.
The text of this manual is licensed under the @ref{GNU Free Documentation License}, with no
invariant sections, no front-cover texts and no back-cover texts.  Please note, however, that it is
just plain wrong to modify statements of, or attribute statements to, the Author or @cite{OpenSS7
Corporation}.

@menu
* GNU Affero General Public License::
* GNU Free Documentation License::
@end menu

@include texi/agpl3.texi
@page
@include texi/fdl13.texi

@ifnotplaintext
@c skip indexes for plain text (regex search works better)
@c @iftex
@c @node Indices
@c @unnumbered Indices
@c @end iftex

@c @ifnottex
@c @c concatenate indices for html and info
@node Index
@unnumbered Index
@printindex cp
@c @end ifnottex

@c @iftex
@c @menu
@c * Concept Index::
@c * Protocol State Index::
@c * Primitive Index::
@c * Primitive Structure and Type Index::
@c * Primitive Structure Field Index::
@c * Primitive Values Index::
@c * Primitive Error Values Index::
@c * Input-Output Control Index::
@c * MIB Object Index::
@c * Manual Page Index::
@c @end menu
@c 
@c @node Concept Index
@c @section Concept Index
@c @printindex cp
@c 
@c @page
@c @node Protocol State Index
@c @section Protocol State Index
@c @printindex st
@c 
@c @page
@c @node Primitive Index
@c @section Primitive Index
@c @printindex pr
@c 
@c @page
@c @node Primitive Structure and Type Index
@c @section Primitive Structure and Type Index
@c @printindex tp
@c 
@c @page
@c @node Primitive Structure Field Index
@c @section Primitive Structure Field Index
@c @printindex vr
@c 
@c @page
@c @node Primitive Values Index
@c @section Primitive Values Index
@c @printindex pv
@c 
@c @page
@c @node Primitive Error Values Index
@c @section Primitive Error Values Index
@c @printindex pe
@c 
@c @page
@c @node Input-Output Control Index
@c @section Input-Output Control Index
@c @printindex ct
@c 
@c @page
@c @node MIB Object Index
@c @section MIB Object Index
@c @printindex mo
@c 
@c @page
@c @node Manual Page Index
@c @section Manual Page Index
@c @printindex mp
@c @end iftex
@end ifnotplaintext

@iftex
@c insert list of figures and tables for printed manuals
@page
@heading List of Figures
@listoffloats Figure
@page
@heading List of Tables
@listoffloats Table
@end iftex

@bye
