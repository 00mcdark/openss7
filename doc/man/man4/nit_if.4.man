'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id$
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaning to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date$ by $Author$
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log$
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore CGIQOSTU
.R2
.so openss7.macros
.\"
.\"
.TH NIT_IF 4 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ Modules"
.\"
.\"
.SH NAME
.B nit_if, nit
\- \fISTREAMS\fP NIT device interface driver
.\"
.\"
.SH SYNOPSIS
.PP
.HP 8
.BI "int " fd ;
.PD 0
.HP
.BI "int open(" \*(lq\fR/dev/nit\fP\*(rq ", " \fR0\fP );
.PD
.\"
.\"
.SH DESCRIPTION
.PP
.B nit_if
is a
.I STREAMS
pseudo-device driver that provides
.I STREAMS
access to network interfaces.  It is designed to be used in conjunction with
the other components of NIT,
.BR nit (4),
but can be used by itself as a raw
.I STREAMS
network interface.
.PP
.B nit_if
is an exclusive-open device that is intended to be opened indirectly through
the clone device;
.B /dev/nit
or
.B /dev/streams/clone/nit
are suitable instances of the clone device.  Before the stream resulting from
opening an instance of
.B nit_if
may be used to read or write packets, it must first be bound to a specific
network interface, using the
.B NIOCSBIND
input-output control command described below.
.\"
.SS Read-side Behaviour
.PP
.b nit_if
copies leading prefixes of selected packets from its associated network
interface and passes them up the stream.  If the
.B NI_PROMISC
flag is set, it passes along all packets; otherwise, it passes along only
packets addressed to the underlying interface.
.PP
The amount of data copied from a given packet depends on the current snapshot
length, which is set with the
.B NIOCSSNAP
input-output control command described below.
.PP
Before passing each packet prefix upward,
.B nit_if
optionally prepends one or more headers, as controlled by the state of the
flag bits set with the
.B NIOCSFLAGS
input-output control command.  The driver collects headers into
.BR M_PROTO (9)
message blocks, with the headers guaranteed to be completely contained in a
single message block, whereas the packet itself goes into one or more
.BR M_DATA (9)
message blocks.
.\"
.SS Write-side Behaviour
.PP
.B nit_if
accepts packets from the module above it in the stream and relays them to the
associated network interface for transmission.  Packets must be formatted
with the destination address in a leading
.BR M_PROTO (9)
message block, followed by the packet itself, complete with link-level
header, in a sequence of
.BR M_DATA (9)
message blocks.  The destination address must be expressed as a
.B struct sockaddr
whose
.I sa_family
field is
.B AF_UNSPEC
and whose
.I sa_data
field is a copy of the link-level header.  (See
.I <sys/socket.h>
for the definition of this structure.)  If the packet does not conform to
this format, an
.BR M_ERROR (9)
message with
.RB [ EINVAL ]
will be sent upstream.
.PP
.B nit_if
processes
.BR M_IOCTL (9)
messages as described below.  Upon receiving an
.BR M_FLUSH (9)
message specifying that the write queue be flushed,
.B nit_if
does so and transfers the message to the read side of the stream.  It
discards all other messages.
.\"
.\"
.SH IOCTLS
.PP
.B nit_if
response to the following input-output control commands, as defined in
.IR <net/nit_if.h> .
It generates an
.BR M_IOCNAK (9)
message for all others, returning this message to the invoker along the
read side of the stream.
.PP
.TP
.BR SIOCGIFADDR ", " SIOCADDMULTI ", " SIOCDELMULTI
.B nit_if
passes these input-output control commands on to the underlying interface's
driver and returns it response in a
.B struct ifreq
instance, as defined in
.IR <net/if.h> .
(See the description of this input-output control command in
.BR if (4)
for more details.)
.TP
.B NIOCBIND
This input-output control command attaches the stream represented by its
first argument to the network interface designated by its third argument,
which should be a pointer to an
.B ifreq
structure whose
.I ifr_name
field naems the desired interface.  See
.I <net/if.h>
for the definition of this structure.
.TP
.B NIOCSSNAP
Set the current snapshot length to the value given in the
.B u_long
pointed to by the input-output control command's final argument.
.B nit_if
interprets a snapshot length of zero as meaning infinity, so that it will
copy all selected packets in their entirety.  It constrains positive snapshot
lengths to be at least the length of an Ethernet header, so that it will pass
at least the link-level header of all selected packets to its upstream
neighbour.
.TP
.B NIOCGSNAP
Returns the current snapshot length for this device instance in the
.B u_long
pointed to by the input-output control command's final argument.
.TP
.B NIOCSFLAGS
.B nit_if
recognizes the following flag bits, which must be given in the
.B u_long
pointed to by the input-output control command's final argument.  This set
may be augmented in future releases.  All but the
.I NI_PROMISC
bit control the addition of headers that precede the packet body.  These
headers appear in the order given below, with the last-mentioned enabled
header adjacent to the packet body.
.RS
.TP
.I NI_PROMISC
Requests that the underlying interface be set into promiscuous mode and that
all packets that the interface receives be passed up through the stream.
.B nit_if
only honours this bit for the super-user.
.TP
.I NI_TIMESTAMP
Prepend to each selected packet a header containing the packet arrival time
expressed as a
.BR "struct timeval" .
.TP
.I NI_DROPS
Prepend to each selected packet a header containing the cumulative number of
packets that this instance of
.B nit_if
has dropped because of flow control requirements or resource exhaustion.  The
header value is expressed as a
.BR u_long .
Note: it accounts only for events occurring within
.BR nit_if ,
and does not count packets dropped at the network interface level or by
upstream modules.
.TP
.I NI_LEN
Prepend to each selected packet a header containing the packet;s original
length (including link-level header), as it was before being trimmed to the
snapshot length.  The header value is expressed as
.BR u_long .
.RE
.TP
.B NIOCGFLAGS
Returns the current state of the flag bits for this device instance in the
.B u_long
pointed to by the input-output control command's final argument.
.\"
.\"
.SH FILES
.PP
.TP
.IR /dev/nit " or " /dev/streams/clone/nit
The clone device instance referring to the
.B nit_if
device.
.TP
.I <net/nit_if.h>
Header file containing definitions for the input-output control commands
and packet headers described above.
.\"
.\"
.SH IMPLEMENTATION
.PP
Note that
.B nit_if
is impemented using the same driver as is provided for
.BR dlpi (4);
it just responds in the same manner as would the
.B nit_if
driver when opened as
.RB \*(lq /dev/nit \*(rq.
.\"
.\"
.SH CAVEATS
.PP
.\"
.\"
.SH "SEE ALSO"
.PP
.BR clone (4),
.BR nit (4),
.BR nit_buf (4),
.BR nit_pf (4).
.\"
.\"
.SH COMPATIBILITY
.PP
.B nit_buf
is compatible with
.BR "SVR 4.1" ,
.[
svr41spg
.]
and descriptions for
.BR SunOS\(rg 4.x,
with the following portability considerations:
.IP \(em \w'\(em\ \ 'u
.IP \(em
.PP
Compatibility is tested using the
.BR test-snit (8)
test case executable and the
.I @PACKAGE_TITLE@
.B autotest
test suite.
.\"
.\"
.SH CONFORMANCE
.PP
Network interface taps and raw sockets and DLPI drivers have never been an
interesting subject for standards organizations such as IEEE and the
OpenGroup, and these modules have never been subjected to formal
standardization.
.\"
.\"
.SH HISTORY
.PP
.B snit
first appeared in
.IR "SunOS\fR\(rg\fP 4.x" .
.\"
.\"
.[
$LIST$
.]
.TI
