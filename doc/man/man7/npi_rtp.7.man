'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id: npi_rtp.7.man,v 1.1.2.1 2011-01-11 23:40:09 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2010  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaining to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2011-01-11 23:40:09 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: npi_rtp.7.man,v $
.\" Revision 1.1.2.1  2011-01-11 23:40:09  brian
.\" - added new files
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore T
.R2
.so openss7.macros
.\"
.\"
.TH NPI-RTP 7 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "Network Provider Interface (NPI)"
.\"
.\"
.SH NAME
.B npi_rtp
\- Network Provider Interface (NPI) - Internet Protocol (IP) Corrigendum
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/npi.h>
.br
.B #include <sys/npi_ip.h>
.br
.B #include <sys/npi_udp.h>
.br
.B #include <sys/npi_rtp.h>
.\"
.\"
.SH DESCRIPTION
.PP
.B NPI-RTP
provides a Stream supporting the Network Provider Interface,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
to the Real-Time Transport Protocol (RTP),
.BR rtp (7).
This
.IR STREAMS (4)
interface provides the
.BR rtp (7)
protocol service interface using the N-primitives of the
.BR npi (7).
This interface is intended solely for use by user programs or protocol
modules requiring the common
.BR npi (7)
interface, such as the
.BR xti (3)
and
.BR sockets (3)
library.
.\"
.SS "Address Formats"
.PP
For consistency with other protocol modules, the address format used by
.B NPI-RTP
is a Internet Protocol socket address
.RB ( sockaddr_in
structure)
in address family
.B AF_INET
or
.RB ( sockaddr_in6
structure)
in address family
.BR AF_INET6 .
The
.B sockaddr_in
structure is described in
.BR ip (7).
The
.B sockaddr_in6
structure is described in
.BR ipv6 (7).
.PP
Unlike the
.BR PNI-IP ,
.BR npi_ip (7),
and
.BR PNI-UDP ,
.BR npi_udp (7),
.B NPI-RTP
does not support the notion of multi-homing.  RTP does not require
multi-homing and the data structures necessary to support multi-homing
prohibits large-scale RTP deployment due to the drastically increased
connection memory requirements.
Nevertheless,
.B NPI-RTP
permits multiple addresses to be specified to bind or connect for the purpose
of specifying a list of preferred transport addresses from which the
NS-provider may choose the optimal address.  When multiple address are
specified, they are specified using a simply array of
.BR sockaddr_in " or " sockaddr_in6
structures.  The list forms the address specified using the
.IR ADDR_length " and " ADDR_offset
fields in the
.BR N_INFO_ACK (7),
.BR N_BIND_REQ (7)
and
.BR N_BIND_ACK (7)
primitives; the
.IR DEST_length ", " DEST_offset ", " RES_length " and " RES_offset
fields in the
.BR N_CONN_REQ (7)
and
.BR N_CONN_CON (7)
primitives.
.\"
.\"
.SS "QOS Parameters"
.PP
.B NPI-RTP
provides Quality of Service parameters using
.BR RTP -specific
structures as described in the sections that follow.
.B OSI
conforming structures are not used.
Note, however, that RTP quality of service parameters are based in turn on
UDP and IP quality of service parameters.  The NS-provider may also recognize
any of the quality of service parameter structures specified at the IP or UDP
levels.
.\"
.TP
.B N_QOS_SEL_INFO_RTP
Used with the
.BR N_INFO_ACK (7)
and
.BR N_OPTMGMT_REQ (7)
primitives, it provides a selection of quality of service parameters for both
connectionless and connection-oriented providers.  The structure contains the
following fields:
.RS
.TP
.I n_qos_type
Always
.B N_QOS_SEL_INFO_RTP
indicating the
.B N_qos_sel_info_rtp_t
structure.
.TP
.I protocol
Specifies or indicates the IP protocol number being used on the connection or
for outgoing connectionless RTP packets.  This value is typically always
.B IPPROTO_UDP
(which has the value 17).  Only if RTP is transported directly over IP using
some other IP protocol number does this value need to be changed.  The
default is, of course,
.BR IPPROTO_UDP .
.TP
.I priority
Specifies or indicates the priority of RTP packets.  This priority is only
used for queueing within the local system.  It provides priority treatment of
some channels.  The NS-provider is not required to implement this.
.TP
.I ttl
Specifies or indicates the IP time-to-live being used on the connection or
for outgoing connectionless RTP packets.  The H.248
.[
h248
.]
protocol's use of SDP
.[
rfc2327
.]
.[
rfc4566
.]
in the local and remote descriptor, provides for the specification of the
time-to-live value to be placed into the IP header of outgoing packets when
a multi-cast address is provided.  The time-to-live value is also used to
scope some IPv4 multi-cast addresses.  Uni-cast addresses do not specify the
time-to-live even though one is required in the IPv4 header.  Therefore, it
may not really be necessary to manage time-to-live on a basis finer than
the Stream.  This means that a time-to-live parameter applies to all virtual
interface within a multi-stream.
.IP ""
The time-to-live value requires a minimum of 8-bits of storage per value.
.TP
.I tos
Specifies or indicates the IP type-of-service being used on the connection or
for outgoing connectionless RTP packets.  This is the TOS precedence and can
have values:
.BR N_ROUTINE ,
.BR N_PRIORITY ,
.BR N_IMMEDIATE ,
.BR N_FLASH ,
.BR N_OVERRIDEFLASH ,
.BR N_CRITIC_ECP ,
.BR N_INETCONTROL ,
or
.BR N_NETCONTROL .
.IP ""
The type-of-service requires a minimum of 3-bits of storage per value.
.TP
.I mtu
Specifies or indicates the maximum-transfer-unit being used on the connection
or for outgoing connectionless RTP packets.  When used with multi-homed
connections, this is the minimum of the maximum-transfer-unit values
associated with each destination in the multi-homed connection.
.IP ""
The maximum-transfer-unit requires a minimum of 14-bits of storage per value.
.TP
.I saddr
Specifies or indicates the source address being used on the connection or for
outgoing connectionless RTP packets.  If specified as
.BR INADDR_ANY ,
the source address associated with the outgoing route for a given packet will
be used instead.
.TP
.I daddr
Specifies or indicates the destination address being used on the connection.
This parameter is only significant for multi-homed connections and specifies
to which of the list of destinations is currently being used as a primary
destination for sending packets.  This parameter has no effect on
connectionless providers.
.TP
.I checksum
Specifies whether checksum is to be calculated and included in outgoing RTP
packets.  When zero, no checksum will be calculated; otherwise, when
non-zero, the checksum will be calculated.
.RE
.\"
.TP
.B N_QOS_SEL_CONN_RTP
Used with the
.BR N_CONN_REQ (7),
.BR N_CONN_IND (7),
.BR N_CONN_RES (7),
.BR N_CONN_CON (7)
and
.BR N_OPTMGMT_REQ (7)
primitives, it provide a selection of quality of service parameters for
connection-oriented providers.  The structure contains the following fields:
.RS
.TP
.I n_qos_type
Always
.B N_QOS_SEL_CONN_RTP
indicating the
.B N_qos_sel_conn_rtp_t
structure.
.TP
.I protocol
Specifies or indicates the IP protocol number being used or requested for the
connection.  This parameter is of end-to-end significance.
.TP
.I priority
Specifies or indicates the queueing priority of messages for the connection.
This parameter is of local significance.
.TP
.I ttl
Specifies or indicates the IP header time-to-live being used or requested for
the connection.  This parameter is of local significance.
.TP
.I tos
Specifies or indicates the IP header type-of-service being used or requested
for the connection.  This parameter is of end-to-end significance.  This is
the TOS precedence and can have values:
.BR N_ROUTINE ,
.BR N_PRIORITY ,
.BR N_IMMEDIATE ,
.BR N_FLASH ,
.BR N_OVERRIDEFLASH ,
.BR N_CRITIC_ECP ,
.BR N_INETCONTROL ,
or
.BR N_NETCONTROL .
.TP
.I mtu
Specifies or indicates the maximum-transfer-unit being used for the
connection.  This parameter is of local significance.
.TP
.I saddr
Specifies or indicates the source address being used or requested for the
connection.  This parameter is of end-to-end significance.
.TP
.I daddr
Specifies or indicates the destination address being used or requested for
the connection.  This parameter is of local significance.
.TP
.I checksum
Specifies or indicates whether a checksum will be calculated for packages on
the connection.  This parameter is of end-to-end significance.
.TP
.I payload_type
Specifies the RTP payload type (used in the RTP header) that will be placed into RTP packets for
this connection.
.RE
.\"
.TP
.B N_QOS_SEL_UD_RTP
Used with the
.BR N_OPTMGMT_REQ (7)
primitive, it provide a selection of quality of service parameters for
connectionless providers.  The structure contains the following fields:
.RS
.TP
.I n_qos_type
Always
.B N_QOS_SEL_UD_RTP
indicating the
.B N_qos_sel_ud_rtp_t
structure.
.TP
.I protocol
Specifies the IP protocol number requested for outgoing RTP packets.
.TP
.I priority
Specifies the queueing priority for outgoing RTP packets.
.TP
.I ttl
Specifies the IP header time-to-live parameter for outgoing RTP packets.
.TP
.I tos
Specifies the IP header type-of-service parameter for outgoing RTP packets.
This is the TOS precedence and can have values:
.BR N_ROUTINE ,
.BR N_PRIORITY ,
.BR N_IMMEDIATE ,
.BR N_FLASH ,
.BR N_OVERRIDEFLASH ,
.BR N_CRITIC_ECP ,
.BR N_INETCONTROL ,
or
.BR N_NETCONTROL .
.TP
.I saddr
Specifies the IP header source address parameter for outgoing RTP packets.  If
specifies as
.BR INADDR_ANY ,
the source address associated with the outgoing interface will be used for
each given packet.
.TP
.I checksum
Specifies whether checksum will be calculated and included in the outgoing
RTP packet.
.TP
.I payload_type
Specifies the RTP payload type (used in the RTP header) that will be placed into RTP packets for
this connection.
.RE
.\"
.TP
.B N_QOS_RANGE_INFO_RTP
Used with the
.BR N_INFO_ACK (7)
primitive, it provides a range of quality of service parameters available to
connection-oriented and connectionless providers.  The structure contains the
following fields:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_RANGE_INFO_RTP
indicating the
.B N_qos_range_info_rtp_t
structure.
.TP
.I priority
Indicates the acceptable range of the priority parameter.
This field is a
.B ip_priority_values_t
structure containing the following members:
.RS
.TP
.I priority_min_value
Indicates the minimum acceptable priority value.  This value is normally zero
(0).
.TP
.I priority_max_value
Indicates the maximum acceptable priority value.  This value is normally two
hundred and fifty-five (255).
.RE
.TP
.I ttl
Indicates the acceptable range of the time-to-live parameter.
This field is a
.B ip_ttl_values_t
structure containing the following members:
.RS
.TP
.I ttl_min_value
Indicates the minimum acceptable time-to-live value.  This value is normally
one (1).
.TP
.I ttl_max_value
Indicates the maximum acceptable time-to-live value.  This value is normally
one hundred and twenty-seven (127).
.RE
.TP
.I tos
Indicates the acceptable range of the type-of-service parameter.
This field is a
.B ip_tos_values_t
structure containing the following members:
.RS
.TP
.I tos_min_value
Indicates the minimum acceptable type-of-service value.  This value is normally
.BR N_ROUTINE .
.TP
.I tos_max_value
Indicates the maximum acceptable type-of-service value.  This value is normally
.BR N_NETCONTROL .
.RE
.TP
.I mtu
Indicates the acceptable range of the maximum-transfer-unit parameter.
This field is a
.B ip_mtu_values_t
structure containing the following members:
.RS
.TP
.I mtu_min_value
Indicates the minimum acceptable maximum-transfer-unit.  This value is
normally forty (40).
.TP
.I mtu_max_value
Indicates the maximum acceptable maximum-transfer-unit.  This value is
normally six thousand five hundred and thirty five (65535).
.RE
.RE
.\"
.\"
.SS "Local Management Interface"
.PP
For the most part, the local management interface of the NPI operates for the
NPI-RTP provider in accordance with the Network Provider Interface Revision
2.0.0 specifications.
.[
NPI Revision 2.0.0
.]
Some enhancements are provided to addressing in support of the Stream Control
Transmission Protocol (SCTP),
.[
rfc4960
.]
.BR sctp (4),
and multi-homed associations.
.PP
The local management primitives are interpreted and issued as follows:
.\" -------------------------------------------------------------------------
.\" N_INFO_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_INFO_REQ (7)
This primitive is interpreted by the NPI-RTP provider in accordance with the
NPI specifications.
.[
NPI Revision 2.0.0
.]
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_INFO_REQ
specifying the information request primitive.
.RE
.\" -------------------------------------------------------------------------
.\" N_INFO_ACK
.\" -------------------------------------------------------------------------
.TP
.BR N_INFO_ACK (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specifications
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
.IP 2.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_INFO_ACK
indicating the information acknowledgement primitive.
.TP
.I NSDU_size
This field reflects the current Maximum Transfer Unit (MTU) (minus the size
of the RTP header), times the number of RTP packets that can be generated
considering IP fragmentation, for the Stream given the protocol addresses to
which the Stream is bound.
.TP
.I ENSDU_size
The NPI-RTP provider, being a CLNS or pseudo-CONS provider, has no concept of
expedited data and this field is always set to zero
.RB ( 0 ).
.TP
.I CDATA_size
The NPI-RTP provider, being a CLNS or pseudo-CONS provider, has no concept of
connection data and this field is always set to zero
.RB ( 0 ).
.TP
.I DDATA_size
The NPI-RTP provider, being a CLNS or pseudo-CONS provider, has no concept of
disconnection data and this field is always set to zero
.RB ( 0 ).
.TP
.I ADDR_size
Specifies the maximum address size.  For a device that supports IPv4, this is
the size of the
.B sockaddr_in
structure.  For an NPI-RTP provider supporting multi-homing, this value will
be an integer multiple of the size of the
.B sockaddr_in
structure.  For a device that supports IPv6, the size of the
.B sockaddr_in6
structure, or, supporting multi-homing, an integer multiple.
.TP
.IR ADDR_length ", " ADDR_offset
The length and offset from the beginning of the message block of the bound
protocol addresses.  For an NPI-RTP provider supporting multi-homing, the
length and offset specify a list of address structures as described above
under
.RB \*(lq "Address Formats" \*(rq.
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the message block of the current
selected QOS parameters.  This will be an
.B N_QOS_SEL_INFO_RTP
structure completed as described above under
.RB \*(lq "QOS Parameters" .\*(rq
It may be necessary to bind a Stream before a value will be returned in the
information acknowledgement.
.IP ""
In the connection-mode environment, when this primitive is invoked before the
NC is established on the Stream, the values returned specify the default
values provided by the NS provider.  When this primitive is invoked after an
NC has been established on the Stream, the values returns indicate negotiated
values for the QOS parameters.
.IP ""
In the connectionless-mode environment, these values represent the default of
the selected QOS parameter values.  In case of QOS parameter is not supported
by the NS provider, a value of
.B QOS_UNKNOWN
will be returned in the corresponding field.  In the case where no QOS
parameters are supported by the NS provider, the
.B QOS_length
field will be zero (0).
.TP
.IR QOS_range_length ", " QOS_range_offset
The length and offset from the beginning of the message block of the current
range of QOS parameters.  This will be an
.B N_QOS_RANGE_INFO_RTP
structure completed as described above under
.RB \*(lq "QOS Parameters" .\*(rq
It may be necessary to bind a Stream before a value will be returned in the
information acknowledgement.
.IP ""
These ranges are used by the NS user to select QOS parameter values that are
valid with the NS provider.  QOS parameter values are selected, or the
default values altered via the
.BR N_OPTMGMT_REQ (7)
primitive.  In the connection-mode environment, the values for end-to-end QOS
parameter may be specified with the N_CONN primitives for negotiation. If the
NS provider does not support a certain QOS parameter, its value will be set
to
.BR QOS_UNKNOWN .
In the case where no QOS parameters are supported by the NS provider, the
length of this field will be zero (0).
.TP
.I OPTIONS_flags
The NPI-RTP provider sets no options flags and this field is always set to
zero
.RB ( 0 ).
.TP
.I NIDU_size
The NPI-RTP provider, being a CLNS or pseudo-CONS provider, has no concept of
interface data unit size and this field is always set to zero
.RB ( 0 ).
.TP
.I SERV_type
The NPI-RTP provider always sets this field to
.B N_CLNS
for connectionless network service.
.TP
.I CURRENT_state
Indicates the current state of the NPI provider in accordance with the NPI
specifications.
.TP
.I PROVIDER_type
The NPI-RTP provider always sets this field to
.B N_SNICFP
for Subnetwork Independent Convergence Function/Protocol.
.TP
.I NODU_size
This field reflects the current Maximum Transfer Unit (MTU) (minus the size
of the IP header) for the Stream given the protocol address to which the
Stream is bound.  Sending a packet using the
.BR N_UNITDATA_REQ
primitive with a data payload of less than or equal to this size will not
normally result in IP fragmentation.
.TP
.IR PROTOID_length ", " PROTOID_offset
The length and offset from the beginning of the message block of the bound
protocol identifiers.
.TP
.I NPI_version
The NPI-RTP always sets this field to
.B N_VERSION_2
to indicate Network Provider Interface Revision 2.0.0.
.[
NPI Revision 2.0.0
.]
.RE
.\" -------------------------------------------------------------------------
.\" N_OPTMGMT_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_OPTMGMT_REQ (7)
This primitive is interpreted by the NPI-RTP provider as specified in the NPI
specification.
.[
NPI Revision 2.0.0
.]
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.IR PRIM_type
Always
.B N_OPTMGMT_REQ
specifying the option management request primitive.
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the message block of the protocol
options.  The NPI-RTP provider will only recognize the
.BR N_QOS_SEL_INFO_RTP ,
.BR N_QOS_SEL_CONN_RTP ,
.BR N_QOS_SEL_UD_RTP ,
structure types and will return
.BR NBADQOSTYPE
for all other structures.
.TP
.I OPTMGMT_flags
The NPI-RTP provider does not support receipt acknowledgement and will ignore
the
.B DEFAULT_RC_SEL
flag because it is a CLNS provider as specified in the NPI.
.[
NPI Revision 2.0.0
.]
.RE
.\" -------------------------------------------------------------------------
.\" N_BIND_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_BIND_REQ (7)
This primitive is interpreted by the NPI-RTP provider as specified in the NPI
specification,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
If the number of connection indications,
.IR CONIND_number ,
is zero, the bind is performed and the service type set to connectionless
.RB ( N_CLNS ).
If the number of connection indications,
.IR CONIND_number ,
is non-zero, the bind is performed and the service type set to
connection-oriented
.RB ( N_CONS ).
If, however, the
.B TOKEN_REQUEST
flag is set, then the bind is always considered connection-oriented, even if
the number of connection indications,
.IR CONIND_number ,
is set to zero, as this is the typical case for an accepting Stream.
This is the normal case for the
.B NPI-RTP
provider: setting the
.I CONIND_number
to zero and setting the
.B TOKEN_REQUEST
flag.
.IP 2.
The NS-user can successfully bind to the wildcard IPv4 address and port (that is
.B INADDR_ANY
and port zero
.RB ( 0 )).
A local address will not be assigned until an
.BR N_CONN_REQ (7)
primitive is issued.  Interfaces that bind to a wildcard IP address will
always be considered connection-oriented interfaces of type
.RB ( N_CONS ).
Interfaces that bind to a wildcard port number are not consider
connection-oriented in this fashion, just wildcard IP addresses.  This is
because a wildcard IP address cannot be assigned until the remote IP address
is known (during the connection phase) and the scope requirement of the local
IP address known.
.IP 3.
The NS-user can specify the
.IR ADDR_length
field as zero
.RB ( 0 ).
In this case, the address will be treated as though the wildcard IP address
and port number was provided (see (2) above).
.IP 4
The NS-user can provide multiple IPv4 address in the bind request by
including an array of structures of type
.BR sockaddr_in
in the 
.IR ADDR_length " and " ADDR_offset
fields.  These IPv4 addresses are listed in order of preference to the
NS-User.  The NS-provider is to select one of the addresses (if valid) and
port numbers (if specified, assigned otherwise), in the order of preference
as provided by the NS-user, and bind that selected address and return it in
the
.BR N_BIND_ACK (7)
response.
.IP 5
All RTP/RTCP channels are fundamentally connection-oriented.  It is always
possible to perform an
.B N_CONN_REQ (7)
on an interface, regardless of the binding procedures and the initial service
type assigned.  The only difference between an initial service type of
.B N_CLNS
and one of
.B N_CONS
is that the
.B N_CLNS
service type provider interface will provide
.BR N_UNITDATA_IND "(7) and " N_UDERROR_IND (7)
indication primitives during the
.B NS_IDLE
state; whereas the
.B N_CONS
interface will not.
The
.B N_CLNS
service type is invoked in cases where early media is required on an RTP/RTCP
channel in the reverse direction before the IP address and port number of the
remote end is not yet known.  This can have some advantages for core-network
facing RTP/RTCP sessions.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_BIND_REQ
specifying the bind request primitive.
.TP
.IR ADDR_length ", " ADDR_offset
Specifies the length in bytes of the network address(es) to be used to bind
the Stream and the offset from the beginning of the
.BR M_PROTO (9)
message block where the network address(es) begin.  Typically in NPI the
network address consists of a single address.  The
.B NPI-RTP
driver supports the specification of multiple addresses in the form of a list
of addresses.  See
.RB \*(lq "ADDRESS FORMAT" ,\*(rq
and note (4),
above.
.TP
.I CONIND_number
If
.I CONIND_number
is non-zero, the Stream is considered to be a CONS Stream.  If zero, whether the Stream is
considered a CONS or a CLNS stream is dependent upon other factors.
.TP
.I BIND_flags
The
.I BIND_flags
can be a bitwise OR of the following flags:
.RB ( DEFAULT_LISTENER " and " TOKEN_REQUEST
are mutually exclusive with
.B DEFAULT_DEST
in the NPI.)
.RS
.TP
.B DEFAULT_LISTENER
This flag is not supported by the
.B NPI-RTP
provider.  There is no concept of a default listener in RTP/RTCP.
.TP
.B TOKEN_REQUEST
When set, the Stream is considered to be a CONS Stream.  When clear, whether the Stream is
considered CONS or CLNS is dependent upon other factors.  The token may be
used either then accepting connection indications with
.BR N_CONN_RES (7),
or when forming cross-connects with
.BR N_XCON_REQ (7).
.TP
.B DEFAULT_DEST
This flag is not supported by the
.B NPI-RTP
provider.  There is no concept of a default destination in RTP/RTCP.
.RE
.TP
.IR PROTOID_length ", " PROTOID_offset
Specifies the length in bytes of the protocol identifiers and the offset from the beginning of the
.BR M_PROTO (9)
message block where the protocol identifiers begin.  Protocol identifiers for
NPI-RTP consist of IP protocol numbers.  Typically only one IP protocol
number is bound in a given bind request.  For
.B NPI-RTP
this is typically
.BR IPPROTO_UDP .
.RE
.\" -------------------------------------------------------------------------
.\" N_BIND_ACK
.\" -------------------------------------------------------------------------
.TP
.BR N_BIND_ACK (7)
The bind acknowledgement primitive is issued in accordance with the NPI
specifications,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
When a list of addresses were specified to the bind, the
.IR ADDR_length " and " ADDR_offset
fields may specify a bound address that consists of one of the addresses from
the list as indicated under
.RB \*(lq "ADDRESS FORMATS" ,\*(rq
above.
.IP 2.
If no address was specified to the bind, the NPI-RTP provider will assume
that the interface is connection-oriented
.RB ( N_CONS )
and that routing tables may be used to select a local address at the time
that a connection is made with
.BR N_CONN_REQ (7).
The NPI-RTP provider also respects the
.B INADDR_ANY
value in the address, as well as the special port number zero (0).
.IP 3.
NPI-RTP does not currently bind more than one protocol identifier and will
always only return the first protocol identifier in the
.BR N_BIND_ACK (7)
primitive.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_BIND_ACK
indicating the bind acknowledgement primitive.
.TP
.IR ADDR_length ", " ADDR_offset
Indicates the length and offset from the beginning of the
.BR M_PCPROTO (9)
message block containing the bound address.
.TP
.I CONIND_number
Indicates the negotiated maximum number of connection indications.
.TP
.I TOKEN_value
Indicates the token value when requested on bind, zero otherwise.
.TP
.I PROTOID_length ", " PROTOID_offset
Indicates the length and offset from the beginning of the of the
.BR M_PCPROTO (9)
message block containing the protocol identifiers that were bound.
.RE
.\" -------------------------------------------------------------------------
.\" N_UNBIND_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_UNBIND_REQ (7)
The unbind request primitive is interpreted by the NPI-RTP provider in
accordance with the NPI specifications.
.[
NPI Revision 2.0.0
.]
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_UNBIND_REQ
specifying the unbind request primitive.
.RE
.\" -------------------------------------------------------------------------
.\" N_OK_ACK
.\" -------------------------------------------------------------------------
.TP
.BR N_OK_ACK (7)
The NPI-RTP provider issues this primitive in accordance with the NPI
specifications.
.[
NPI Revision 2.0.0
.]
Acknowledges the successful completion of primitives requiring positive
acknowledgement.
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_OK_ACK
specifying the success acknowledgement primitive.
.TP
.I CORRECT_prim
The successful primitive that is being acknowledged.
.RE
.\" -------------------------------------------------------------------------
.\" N_ERROR_ACK
.\" -------------------------------------------------------------------------
.TP
.BR N_ERROR_ACK (7)
The NPI-RTP provider issues this primitive in accordance with the NPI
specifications.
.[
NPI Revision 2.0.0
.]
Provides negative acknowledgement for non-fatal errors for primitives
requiring negative acknowledgement.
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_ERROR_ACK
specifying the error acknowledgement primitive.
.TP
.I ERROR_prim
The primitive that was in error.
.TP
.I NPI_error
The NPI error.
.TP
.I UNIX_error
When
.I NPI_error
is
.BR NSYSERR ,
the UNIX error number.
.RE
.\"
.\"
.SS "Connectionless Data Transfer"
.PP
The NPI-RTP provider is a CLNS (Connectionless Network Service) provider that
uses the connectionless data transfer N-primitives to transfer data.  For the
most part, these primitives are used in strict accordance with the NPI
specifications.
.[
NPI Revision 2.0.0
.]
.PP
The connectionless data transfer primitives are interpreted and issued as
follows:
.\" -------------------------------------------------------------------------
.\" N_UNITDATA_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_UNITDATA_REQ (7)
This primitive is interpreted by the NPI-RTP provider as specified in the NPI
specification,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
For outgoing RTP packets, the values of the various header fields other than
the destination address are controlled using the quality-of-service selection
for unit data for RTP (see,
.RI \(lq "QOS Parameters" ,\(rq
above).
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_UNITDATA_REQ
specifying that this is a unit data request primitive.
.TP
.IR DEST_length ", " DEST_offset
These fields are interpreted as the destination address for the RTP packet.
The specified address must be a single address and cannot contain a list.  A
destination address must be specified (i.e.
.I DEST_length
cannot be zero).
.TP
.IR RESERVED_Field "[0] and " RESERVED_field [1]
These fields are reserved for DLPI
.[
DLPI
.]
compatibility and are set to zero.
.RE
.\" -------------------------------------------------------------------------
.\" N_UNITDATA_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_UNITDATA_IND (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
IP addresses, IP options and other IP particulars are available in the
message block.  The message body (attached
.BR M_DATA (9)
message blocks) contains the entire IP packet including IP network and
transport headers and payload.  The base pointer of the first data block
points to the IP header, although the read pointer of the first message block
points to the transport header.  This means that the IP information is
available for inter-module use but is unavailable to a User-space user of the
service interface.
.IP 2.
It is normally only necessary for the NPI provider to specify the destination
address if it is not implicit to the receiving Stream: that is, if the
receiving Stream is a default destination Stream.  For NPI-RTP, it is also
necessary that the destination address be specified by the NPI-RTP provider
when the receiving Stream is bound to more than one address.
.IP 3.
The NPI-RTP provider may indicate the
.B N_UD_CONGESTION
value in the
.I ERROR_type
field when the IP packet is marked for Explicit Congestion Notification or
other congestion indication.  Otherwise, the
.I ERROR_type
field is set to zero (0).
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_UNITDATA_IND
indicating that this is a unit data indication primitive.
.TP
.IR DEST_length ", " DEST_offset
Populated by the NPI provider in accordance with the NPI specifications.
These fields specify a single address.
.TP
.IR SRC_length ", " SRC_offset
Populated by the NPI provider in accordance with the NPI specifications.
These fields specify a single address.
.TP
.IR ERROR_type
Populated by the NPI provider in accordance with the NPI specifications.
.RE
.\" -------------------------------------------------------------------------
.\" N_UDERROR_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_UDERROR_IND (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
The original IP header, IP options and portion of the transport packet are
available in the message body.  The message body (attached
.BR M_DATA (9)
message blocks) contains the entire IP packet including IP and ICMP headers
and payload.  The base pointer of the first data block points to the ICMP IP
header, although the read pointer of the first message block points to the
ICMP payload.  This means that the ICMP IP information is available for
inter-module use but is unavailable to a user-space user of the the service
interface.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_UDERROR_IND
indication that this is a unit data error indication primitive.
.TP
.IR DEST_length ", " DEST_offset
Populated by the NPI-RTP provider in accordance with the NPI specifications.
.[
NPI Revision 2.0.0
.]
.TP
.I RESERVED_field
This field is set to zero (0) in accordance with NPI specifications.
.[
NPI Revision 2.0.0
.]
.\".TP
.\".IR RESERVED_field "[0] and " RESERVED_field [1]
.\"As with the
.\".BR N_UNITDATA_REQ (7)
.\"primitive, these fields are reserved fro DLPI
.\".[
.\"DLPI
.\".]
.\"compatibility and are normally set to zero.  For multi-homed hosts in support
.\"of the Stream Control Transmission Protocol (SCTP),
.\".[
.\"rfc4960
.\".]
.\"and when the Stream is bound to multiple addresses, these fields can be
.\"treated as
.\".IR SRC_length ", " SRC_offset
.\"fields and used to specify the source address for the outgoing packet that was
.\"in error.  The source address indicated will be one of the addresses to which
.\"the Stream is bound.
.\"If only one address was bound, these fields are set to zero by the NPI-RTP
.\"provider.
.TP
.I ERROR_type
This field is populated by the NPI-RTP provider in accordance with the NPI
specifications.  Some of the
.BR N_UDERROR_IND (7)
reason codes have additional meaning when issued by the NPI-RTP provider as
follows:
.RS
.TP
.B N_UD_UNDEFINED
No reason was specified.
.TP
.B N_UD_TD_EXCEEDED
Transit delay exceeded.  This can be generated by the NPI-RTP provider in
response to an ICMP message
.RB ( ICMP_TIME_EXCEEDED/ICMP_EXC_FRAGTIME ).
.TP
.B N_UD_CONGESTION
NS Provider congestion encountered.  This can be generated by the NPI-RTP
provider in response to an ICMP message
.RB ( ICMP_SOURCE_QUENCH ).
.TP
.B N_UD_QOS_UNAVAIL
Requested QOS/service characteristic unavailable.
.TP
.B N_UD_LIFE_EXCEEDED
NSDU lifetime exceeded.  This is an indication that the specified lifetime
(TTL) was exceeded as detected to the NPI-RTP provider in a returned ICMP
message.  This can be generated by the NPI-RTP provider in response to an
ICMP message
.RB ( ICMP_TIME_EXCEEDED/ICMP_EXC_TTL ).
.TP
.B N_UD_ROUTE_UNAVAIL
Suitable route unavailable.  This is used by the NPI-RTP provider to specify
many separate error conditions as indicated by the received ICMP messages.
This can be generated by the NPI-RTP provider in response to an ICMP message
.RB ( ICMP_DEST_UNREACH/ICMP_PROT_UNREACH ", " ICMP_PORT_UNREACH ", "
.BR ICMP_NET_UNKNOWN ", " ICMP_HOST_UNKNOWN ", " ICMP_HOST_ISOLATED ", "
.BR ICMP_NET_ANO ", " ICMP_HOST_ANO ", " ICMP_PKG_FILTERED ", "
.BR ICMP_PREC_VIOLATION ", " ICMP_PREC_CUTOFF ).
This can also be generated by the NPI-RTP provider in the event that it
cannot find a suitable route on which to transmit the unitdata message.
.TP
.B N_UD_SEG_REQUIRED
Segmentation was required where none permitted.  This error is used in
conjunction the Path MTU Discovery and is used to indicate that a packet that
was marked don't fragment encounter a path with an MTU less than the packet
size.  This can be generated by the NPI-RTP provider in response to an ICMP
message
.RB ( ICMP_DEST_UNREACH/ICMP_FRAG_NEEDED ).
.RE
.RE
.\"
.\"
.SS Connection-Oriented Connection Establishment
.PP
The NPI-RTP provider also provides a pseudo-CONS (Connection Oriented Network
Service) provider that uses the connection mode data transfer N-primitives to
transfer data.  For the most part, these primitives are used in accordance
with the NPI specifications.
.[
NPI Revision 2.0.0
.]
Some enhancements are provided to addressing in support of the multi-homed
nature of the Stream Control Transmission Protocol (SCTP),
.[
rfc4960
.]
.BR sctp (4).
.PP
The connection establishment primitives are interpreted as follows:
.\" -------------------------------------------------------------------------
.\" N_CONN_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_CONN_REQ (7)
This primitive is interpreted by the NPI-RTP provider in accordance with the
NPI specification,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
The primitive can be issued on a Stream that has not yet been bound; i.e.
that is in the
.I NS_UNBND
state.  The
.B NPI-RTP
provider will automatically bind the Stream to an IP address of
.BR INADDR_ANY ,
a dynamically assigned port number, and the RTP protocol number.  The
resulting Stream will be a pseudo-connection-oriented mode Stream.  This is
primarily for compatibility with the
.BR sockets (3)
library.  The NPI specification,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
indicates that the response in this situation should be a
.BR N_ERROR_ACK (7)
primitive with either a
.RB [ NNOTSUPPORT ]
or
.RB [ NOUTSTATE ]
error.
.IP 2.
The primitive can be issued on a Stream that has been bound, but which
reports a
.I SERV_type
of
.B N_CLNS
in the
.BR T_INFO_ACK (7)
primitive.  This, again, is primarily for compatibility with the
.BR sockets (3)
library.  The NPI specification,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
indicates that the response in this situation should be a
.BR N_ERROR_ACK (7)
primitive with a
.RB [ NNOTSUPPORT ]
error.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_CONN_REQ
requesting an NS connection.
.TP
.IR DEST_length ", " DEST_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the destination address(es), to
which the connection is to be formed.  This field can contain more than one
IP address, but can only contain one port number.
.TP
.IR CONN_flags
Specifies connection options flags associated with the connection request.
The following connection flags are defined, but not supported:
.RS
.TP
.B REC_CONF_OPT
Specifies that receipt confirmation is to be used by default.  The
.B NPI-RTP
provider does not support receipt confirmation and setting this flag is
invalid.
.TP
.B EX_DATA_OPT
Specifies that expedited data transfer is to be enabled by default.  The
.B NPI-RTP
provider does not support expedited data transfer and setting this flag is
invalid.
.RE
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the quality-of-service parameters to be associated
with the connection.  See
.RI \(lq "Quality of Service" ,\(rq
above.  The only QOS data type accepted in the
.BR N_CONN_REQ (7)
by the
.B NPI-RTP
provider is the
.BR N_QOS_SEL_CONN_RTP
data structure containing the following fields:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_SEL_CONN_RTP .
.TP
.I protocol
Specifies the protocol field used for packets sent on the network connection.
.TP
.I priority
Specifies the priority of packets sent on the network connection.
.TP
.I ttl
Specifies the time-to-live field used for packets sent on the network connection.
.TP
.I tos
Specifies the type-of-service field used for packets sent on the network connection.
.TP
.I mtu
Specifies the maximum-transfer-unit to be used for packets sent on the
network connection.  If the MTU of the path upon which RTP packets are sent
is less than this value, the lower MTU will be used.  If the MTU of the path
on which RTP packets are sent is greater than this value, the lower MTU will
be used.
.TP
.I saddr
Specifies the default source address to be used in outgoing packets on the
connection.
.TP
.I daddr
Specifies the default destination address to be used in outgoing packets on
the connection.  This parameter is only necessary if the connection is
multi-homed.
.TP
.I checksum
Specifies the default checksum to be used in outgoing packets on the
connection.
.TP
.I payload_type
Specifies the default payload type to be used in outgoing packets on
the connection.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_CONN_CON
.\" -------------------------------------------------------------------------
.TP
.BR N_CONN_CON (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
The
.B NPI-RTP
provider does not provide true confirmation of a connection in
pseudo-connection-oriented mode.  The confirmation is issued automatically
and locally by the
.B NPI-RTP
provider upon receipt of a proper
.BR N_CONN_REQ (7)
primitive with a usable address and options.  The primitive will not contain
any data
.RB ( M_DATA (9)
blocks).
.IP 2.
Quality of service values confirmed are the result of negotiation with the
local provider only and are not the result of end-to-end negotiation in
pseudo-connection-oriented mode.
.IP 3.
Because the local IP address and port number can be wildcarded in the
.BR N_BIND_REQ (7),
they dynamic IP address and port number used to connect to the remote
destination can be assigned only at connection time.  Because RTP/RTCP has no
concept of a responding address, the
.IR RES_length " and " RES_offset
fields are used to communicate the auto-bound local address.  Otherwise, the
.IR RES_length " and " RES_offset
fields are unused and
.I RES_length
is coded zero
.RB ( 0 ).
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_CONN_CON
confirming a previous connection request.
.TP
.IR RES_length ", " RES_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the responding address(es),
which, in the case of the
.B NPI-RTP
provider in pseudo-connection-oriented mode, is the instead the auto-bound
local address.  This field is only used when the local address changes as a
result of the formation of the connection.
.TP
.IR CONN_flags
Indicates the connection options flags associated with the connection
confirmation.  The following flags are defined; but not supported:
.RS
.TP
.B REC_CONF_OPT
Indicates that receipt confirmation is confirmed to be used on the connection
by default.  The
.B NPI-RTP
provider does not support true receipt confirmation but automatic receipt
confirmation can be used to pace data flow across modules.  This flag will
only be returned when it was requested in the corresponding
.BR N_CONN_REQ (7)
primitive.
.TP
.B EX_DATA_OPT
Indicates that expedited data transfer is confirmed to be enabled by default.
The
.B NPI-RTP
provider does not directly support expedited data transfer; however, there
are type-of-service parameters in the received IP messages that can be used
to set the priority of received data messages.  This flag will only be
returned when it was requested in the corresponding
.BR N_CONN_REQ (7)
primitive.
.RE
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the quality-of-service
parameters associated with the confirmed connection.  The values represent
negotiation with the local provider only, and are not the result of
end-to-end negotiation.  See
.RI \(lq "Quality of Service" ,\(rq
above.  The only QOS data type indicated in the
.BR N_CONN_CON (7)
primitive by the
.B NPI-RTP
provider is the
.B N_QOS_SEL_CONN_RTP
data structure containing the following information:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_SEL_CONN_RTP .
.TP
.I protocol
Confirms the protocol value to be used in outgoing packets on the network
connection.  This value is typically
.BR IPPROTO_UDP (17).
.TP
.I priority
Confirms the priority value to be used in outgoing packets on the network
connection.
.TP
.I ttl
Confirms the time-to-live value to be used in outgoing packets on the network
connection.
.TP
.I tos
Confirms the type-of-service value to be used in outgoing packets on the
network connection.
.TP
.I checksum
Confirms the default checksum to be used in outgoing packets on the
connection.
.TP
.I mtu
Confirms the maximum-transfer-unit to be used for outgoing packets on the
network connection.  This is the minimum of the individual
maximum-transfer-units of all the destinations for the network connection and
the requested maximum-transfer-unit.
.TP
.I saddr
Confirms the (possibly auto-bound) source address to be used in outgoing
packets on the connection.
.TP
.I sport
Confirms the (possibly auto-bound) source port to be used in outgoing packets
on the connection.
.TP
.I payload_type
Confirms the payload type used in outgoing packets on the connection.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_CONN_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_CONN_IND (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
.BR npi (7),
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
The
.B NPI-RTP
provider does not provide true connection-oriented modes.  In
pseudo-connection-oriented mode, with a listening Stream, connection
indications are synthesized from any received packet that matches the
listening Stream and delivered as a connection indication (with data) and
must either be accepted or refused.
.IP 2.
The use of connection indications is useful when a partially specified
RTP/RTCP channel receives early media from multiple sources due to forking of
a SIP call.  It is also useful for providing access control mechanisms during
the establishment of RTP/RTCP connections.
.RE
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_CONN_IND
indicating a remote connection request.
.TP
.IR DEST_length ", " DEST_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the destination address of the
RTP packet causing the connection indication.  This field will contain only
one destination address and is structured as a
.BR sockaddr_in
structure.
.TP
.IR SRC_length ", " SRC_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the source address of the RTP
packet causing the connection indication.  This field will contain only one
source address and is structured as a
.BR sockaddr_in
structure.
.TP
.IR SEQ_number
Indicates the sequence number for the connection indication to be used by the
NS user in a subsequent
.BR N_DISCON_REQ (7)
or
.BR N_CONN_RES (7)
primitive.
.TP
.IR CONN_flags
Indicates the connection options flags associated with the connection
request.  The following connection flags are defined, but not supported:
.RS
.TP
.B REC_CONF_OPT
Indicates that receipt confirmation is requested to be used on the connection
by default.  The
.B NPI-RTP
provider does not support receipt confirmation and this flag will not be
indicated.
.TP
.B EX_DATA_OPT
Indicates that expedited data transfer is requested to be enabled by default.
The
.B NPI-RTP
provider does not support expedited data transfer and this flag will not be
indicated.
.RE
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the quality-of-service
parameters associated with the connection indication.  See
.RI \(lq "Quality of Service" ,\(rq
above.  The only QOS data type indicated in the
.BR N_CONN_IND (7)
primitive by the
.B NPI-RTP
provider is the
.B N_QOS_SEL_CONN_RTP
data structure containing the following information:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_SEL_CONN_RTP .
.TP
.I protocol
Indicates the protocol of the received packet that invoked the connection
indication.
.TP
.I priority
Indicates the priority of the received packet that invoked the connection
indication.
.TP
.I ttl
Indicates the time-to-live field received in the packet that invoked the
connection indication.
.TP
.I tos
Indicates the type-of-service field received in the packet that invoked the
connection indication.
.TP
.I mtu
Indicates the maximum-transfer-unit to be used for packets sent on the
network connection toward the source address of the received packet that
invoked the connection indication.
.TP
.I saddr
Specifies the default source address to be used in outgoing packets on the
connection.
.TP
.I daddr
Specifies the default destination address to be used in outgoing packets on
the connection.  This parameter is only necessary if the connection is
multi-homed.
.TP
.I checksum
Specifies the default checksum to be used in outgoing packets on the
connection.
.TP
.I payload_type
Specifies the default payload type to he used in outgoing packets on
the connection.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_CONN_RES
.\" -------------------------------------------------------------------------
.TP
.BR N_CONN_RES (7)
This primitive is interpreted by the NPI-RTP provider in accordance with the
NPI specification,
.[
NPI Revision 2.0.0

.]
.BR npi (7),
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
The
.B NPI-RTP
provider does not support true connection-oriented modes; only a
pseudo-connection-oriented mode.  Accepting a connection indication with this
primitive will deliver queued and any further received packets with the same
source and destination addresses, port numbers and protocol number to the
accepting Stream.
.IP 2.
Default quality-of-service parameters associated with the Stream are not
negotiated end-to-end and are simply set as specified.
.IP 3.
The responding address(es) do no represent the local addresses that form the
connection, but the remote addresses involved in a multi-homed association.
.RS
.RE
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_CONN_RES
accepting a previous connection indication.
.TP
.IR TOKEN_value
Specifies the token value of the Stream onto which the connection is to be
accepted.  If the connection is to be accepted on the same Stream upon which
the corresponding
.BR N_CONN_IND (7)
was received, this field should be zero (0).  It is an error to accept a
connection on the listening Stream if there is more than one connection
indication outstanding.
.TP
.IR RES_length ", " RES_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the responding address(es).
.TP
.IR SEQ_number
Specifies the sequence number in the corresponding
.BR N_CONN_IND (7)
primitive to which this primitive is responding.
.TP
.IR CONN_flags
Specifies connection options flags for the resulting NS connection.  The
following flags are defined; but not supported:
.RS
.TP
.B REC_CONF_OPT
Specifies that receipt confirmation is to be used by default.  The
.B NPI-RTP
provider does not support receipt confirmation and setting this flag is
invalid.
.TP
.B EX_DATA_OPT
Specifies that expedited data transfer is to be enabled by default.  The
.B NPI-RTP
provider does not support expedited data transfer and setting this flag is
invalid.
.RE
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the quality-of-service
parameters to be used with the completed NS connection.  See
.RI \(lq "Quality of Service" ,\(rq
above.  The only QOS data type allowed in the 
.BR N_CONN_RES (7)
primitive by the
.B NPI-RTP
provider is the
.B N_QOS_SEL_CONN_RTP
data structure containing the following information:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_SEL_CONN_RTP .
.TP
.I protocol
Specifies the protocol to be used for packets sent on the network connection.
.TP
.I priority
Specifies the priority to be used for packets sent on the network connection.
.TP
.I ttl
Specifies the time-to-live field to be used in packets sent on the network
connection.
.TP
.I tos
Specifies the type-of-service field to be used in packets sent on the network
connection.
.TP
.I mtu
Specifies the maximum-transfer-unit to be used for packets sent on the
network connection.  If the underlying maximum-transfer-unit is different
from this value, the smaller of the two will be used.
.TP
.I saddr
Specifies the default source address to be used in outgoing packets on the
connection.
.TP
.I daddr
Specifies the default destination address to be used in outgoing packets on
the connection.  This parameter is only necessary if the connection is
multi-homed.
.TP
.I checksum
Specifies the default checksum to be used in outgoing packets on the
connection.
.TP
.I payload_type
Specifies the default payload type to be used in outgoing packets on
the connection.
.RE
.RE
.\"
.\"
.SS Connection-Oriented Data Transfer
.PP
The established connection data transfer primitives are interpreted as follows:
.PP
.\" -------------------------------------------------------------------------
.\" N_DATA_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_DATA_REQ (7)
This primitive is interpreted by the
.B NPI-RTP
in accordance with the NPI specifications,
.[
NPI Revision 2.0.0
.]
with the following considerations.
.RS
.IP 1. \w'0.\(em'u
In pseudo-connection-oriented mode, the NPI-RTP user transfers data using the
.BR N_DATA_REQ (7)
primitive.  RTP/RTCP packets are transferred as a unit and the use of the
.B N_MORE_DATA
flag is prohibited.
.IP 2.
When a cross-connect is established, data request primitives are not
issued by the NS-user but arrive from the other leg of the cross-connect.
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_DATA_REQ
specifying the data transfer request primitive.
.TP
.I DATA_xfer_flags
Specifies the data transfer flags.
.RS
.TP
.B N_MORE_DATA_FLAG
This flag may be set in accordance with the NPI specifications; however, as
the
.B NPI-RTP
provider performs segmentation and reassembly at the
.B IP
level, this flag is unused.  Setting this flag will result in a fatal
.RB [ EPROTO ]
error condition on the single-interface Stream, or a
.BR N_RESET_IND (7)
primitive being issued on the multiple-interface Stream.
.TP
.B N_RC_FLAG
This flag may be set in accordance with the NPI specifications; however, as
the
.B NPI-RTP
provider does not support receipt verification, this flag is only used for
local flow control across modules.
When this flag is set (or the
.B DEFAULT_RC_SEL
option is set), the NS-user expects a
.BR N_DATACK_IND (7)
primitive when the data is successfully transferred by the NS-provider.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_DATA_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_DATA_IND (7)
This primitive is interpreted by the
.B NPI-RTP
in accordance with the NPI specifications,
.[
NPI Revision 2.0.0
.]
with the following considerations.
.RS
.IP 1. \w'0.\(em'u
In pseudo-connection-oriented mode, the NPI-RTP provider transfers data to
the NPI-RTP user with the
.BR N_DATA_IND (7)
primitive.
.IP 2.
For multi-homed local or remote hosts, information concerning the source
address and destination address of the packet is lost.  For a service that
provides this information, use the connectionless mode.
.IP 3.
when a cross-connect is established, data indication primitives are not
issued by the NS-provider, but are transferred to the other leg of the
cross-connect.
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_DATA_IND
indicating the data transfer indication primitive.
.TP
.I DATA_xfer_flags
Indicates the data transfer flags.
.RS
.TP
.B N_MORE_DATA_FLAG
This flag may be set in accordance with the NPI specifications; however, as
the
.B NPI-RTP
provider performs segmentation and reassembly at the
.B IP
level, this flag is unused.
.TP
.B N_RC_FLAG
This flag may be set in accordance with the NPI specifications; however, as
the
.B NPI-RTP
provider does not support receipt verification, this flag is only used for
local flow control across modules.  When this flag is set (or the
.B DEFAULT_RC_SEL
option is set), the NS-user expects a
.BR N_DATA_REQ (7)
primitive when the data is successfully received by the NS-user.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_DATACK_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_DATACK_REQ (7)
This primitive is interpreted by the
.B NPI-RTP
provider in accordance with the NPI specifications,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
Data acknowledgements are not supported by the RTP/RTCP protocol.
Nevertheless, data acknowledgements have some use for flow control across a
number of modules. They may be used by
.B NPI-RTP
for pacing of messages.
.IP 2.
When the 
.B DEFAULT_RC_SEL
option is set, the provider will expect a data acknowledgement request for
each data indication given.
When the
.B DEFAULT_RC_SEL
option is not set, the provider will only expect a data acknowledgement
request for data indications that have the
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.BR N_DATACK_REQ (7).
.RE
.\" -------------------------------------------------------------------------
.\" N_DATACK_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_DATACK_IND (7)
This primitive is interpreted by the
.B NPI-RTP
provider in accordance with the NPI specifications,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
Data acknowledgements are not supported by the RTP/RTCP protocol.
Nevertheless, data acknowledgements have some use for flow control across a
number of modules. They may be used by
.B NPI-RTP
for pacing of messages.
.IP 2.
When the 
.B DEFAULT_RC_SEL
option is set, the provider will expect a data acknowledgement indication for
each data request issued.
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.BR N_DATACK_IND (7).
.RE
.\" -------------------------------------------------------------------------
.\" N_RESET_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_RESET_REQ (7)
This primitive is interpreted by the NPI-RTP provider in accordance with the
NPI specification,
.[
NPI Revision 2.0.0
.]
with the following additional considerations:
.RS
.IP 1. \w'0.\(em'u
Reset requests are not normally issued by the
.B NPI-RTP
provider.  There are two possible uses for a reset request: (1) to generate
an ICMP message toward the remote user (especially as a proxy of ICMP error
messages received on a cross-connected leg); and, (2) to generate an RTCP
report.
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_RESET_REQ
specifying the reset request primitive.
.TP
.I RESET_reason
The reset reason can be any of the reasons issued by the provider and
described under \(lq\)N_RESET_IND\(rq\).
.RE
.\" -------------------------------------------------------------------------
.\" N_RESET_CON
.\" -------------------------------------------------------------------------
.TP
.BR N_RESET_CON (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
and will be used by the provider to confirm a reset request.
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_RESET_CON
indicating the reset confirmation primitive.
.RE
.\" -------------------------------------------------------------------------
.\" N_RESET_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_RESET_IND (7)
This primitive is issued by the NPI-RTP provider in accordance with the NPI
specification,
.[
NPI Revision 2.0.0
.]
with the following considerations:
.RS
.IP 1. \w'0.\(em'u
Because the
.B NPI-RTP
provider is only a pseudo-connection-oriented provider, reset indications are
not normally issued by the provider.  The only information in an RTP channel
that can be used to indicate reset is ICMP errors returned from the remote
host.  To avoid premature abortive disconnect, ICMP errors normally result in
either an
.BR N_UDERROR_IND (7)
primitive in
.B N_CLNS
mode, or a
.BR N_RESET_IND (7)
primitive in
.B N_CONS
mode.  This is to avoid an abortive disconnect using the
.BR N_DISCON_IND (7)
primitive.
Nevertheless, there are some ICMP errors that can be considered as notable
and result in the reset of the media channel.
.IP 2.
Because the
.BR N_RESET_IND (7)
primitive is driven largely by ICMP errors, a large number of ICMP errors can
result from the blind packet flows presented by an RTP/RTCP channel.  To
avoid excessive overloading of the NS user, only one reset indication can be
outstanding on a given interface, and the reset indications are flow
controlled to throttle excessive receipts of ICMP errors.
.IP 3.
One of the methods of determining whether a given ICMP message should result
in a
.BR N_RESET_IND (7)
or a
.BR N_DISCON_IND (7)
is whether the channel has successfully received any packets in its lifetime.
A channel that is receiving ICMP errors and yet has never received a valid
packet should result in an abortive disconnection.  A channel that is
receiving ICMP errors but is also receiving valid packets should instead
generate reset indications.
.IP 4.
In addition to any of the reset reasons given below, any of the disconnect
reasons may also be used as a reset reason where the provider wishes to avoid
an abortive disconnection and instead issues a reset indication.
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_RESET_CON
indicating the reset indication primitive.
.TP
.I RESET_orig
.RS
.TP \w'N_PROVIDER\(em'u
.B N_PROVIDER
The origin of the reset is the NS provider.
.PD 0
.TP
.B N_USER
The origin of the reset is the peer NS user.
.TP
.B N_UNDEFINED
The origin of the reset is unknown.
.PD
.RE
.TP
.I RESET_reason
.RS
.PP
When
.I RESET_orig
is
.BR N_PROVIDER ,
the following reasons apply:
.TP \w'N_RESET_UNSPECIFIED\(em'u
.B N_CONGESTION
This reset reason can result from source-quench ICMP errors or explicit
congestion notifications in received packets.
.PD 0
.TP
.B N_RESET_UNSPECIFIED
This reset reason is used simply when no other reset reason is applicable.
.PD
.PP
When
.I RESET_orig
is
.BR N_USER ,
the following reasons apply:
.TP \w'N_RESET_UNSPECIFIED\(em'u
.B N_USER_RESYNC
.PP
When
.I RESET_orig
is
.BR N_UNDEFINED ,
the following reasons apply:
.TP \w'N_RESET_UNSPECIFIED\(em'u
.B N_REASON_UNDEFINED
This reset reason is used simply when no other reset reason is applicable.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_RESET_RES
.\" -------------------------------------------------------------------------
.TP
.BR N_RESET_RES (7)
This primitive is interpreted by the NPI-RTP provider in accordance with the
NPI specification,
.[
NPI Revision 2.0.0
.]
and must be used to respond to a reset indication.  Instead of choosing to
respond to the reset indication, the NS-user has the option of disconnecting
the channel.
.RS
.PP
Fields of the primitive are interpreted as follows:
.TP
.I PRIM_type
Always
.B N_RESET_RES
specifying the reset response primitive.
.RE
.\"
.\"
.SS Connection-Oriented Connection Termination
.PP
The connection release primitives are interpreted as follows:
.PP
.\" -------------------------------------------------------------------------
.\" N_DISCON_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_DISCON_REQ (7)
Disconnect requests result in the abortive release of the pseudo-connection.
The primitive is acknowledge in accordance with NPI specifications with the
following considerations:
.RS
.IP 1. \w'0.\(em'u
The responding address in the
.IR RES_length " and " RES_offset
fields is not used and the provider will ignore any address placed in these
fields.
.IP 2.
.IP 3.
.IP 4.
.TP
.IR DISCON_reason
.TP
.IR RES_length ", " RES_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the responding address(es).
.TP
.IR SEQ_number
.RE
.\" -------------------------------------------------------------------------
.\" N_DISCON_IND
.\" -------------------------------------------------------------------------
.TP
.BR N_DISCON_IND (7)
Disconnect indications result in the abortive release of the
pseudo-connection.  This primitive is treated in accordance with the NPI
specifications with the following considerations:
.RS
.IP 1. \w'0.\(em'u
Because the NPI-RTP provider is only a pseudo-connection-oriented provider,
disconnect indications are not normally issued by the provider.  The only
information in an RTP channel that can be used to indicate disconnection is
ICMP errors returned from the remote host.  To avoid premature abortive
disconnection, ICMP errors normally result in either a
.BR N_UDERROR_IND (7)
primitive in
.B N_CLNS
mode, or a
.BR N_RESET_IND (7)
primitive in
.B N_CONS
mode.  Nevertheless, there are some ICMP errors that can be considered as
fatal and result in the abortive disconnect of the media channel.
.IP 2.
.IP 3.
.IP 4.
.TP
.I DISCON_orig
.RS
.TP \w'N_UNDEFINED\(em'u
.B N_PROVIDER
The disconnection origin is the NS provider.  This reason is not normally
used by the
.BR NPI-RTP.
.PD 0
.TP
.B N_USER
The disconnection origin is the remote NS user.  This reason is not normally
used by
.BR NPI-RTP .
.TP
.B N_UNDEFINED
The disconnection origin is undefined.  When abortive disconnect indications
are issued, this is the origin used by the
.BR NPI-RTP .
.PD
.RE
.TP
.I DISCON_reason
.RS
.PP
When the
.I DISCON_orig
is
.BR N_PROVIDER ,
the following reasons apply:
.TP \w'N_REJ_DISC_P\(em'u
.B N_DISC_P
.TP
.B N_DISC_T
.TP
.B N_REJ_NSAP_UNKNOWN
This reason indicates that the remote address on the connection is unknown to
the NS provider.
.TP
.B N_REJ_NSAP_UNREACH_P
This reason indicates that the remote address on the connection is
permanently unreachable.  This can result from the inability to establish or
maintain a route between the local transport address and the remote transport
address.
.TP
.B N_REJ_NSAP_UNREACH_T
This reason indicates that the remote address on the connection is
temporarily unreachable.  This can result in the disappearance of a route
between the local transport address and the remote transport address where an
route formerly existed.  This is caused by changes in the IP routing tables.
.TP
.B N_REJ_QOS_UNAVAIL_P
This reason can be given when a QOS parameter (such as time-to-live) cannot
result in the successful transfer of packets to the remote transport address.
.TP
.B N_REJ_QOS_UNAVAIL_T
This reason can be given when a QOS parameter (such as time-to-live) has
temporarily resulted in the inability to successfully transfer subsequent
packets to the remote transport address.
.TP
.B N_REJ_UNSPECIFIED
This reason is used simply when no other reason is applicable.
.PP
The disconnect origin of
.B N_USER
is not normally used because there is no mechanism in the RTP/RTCP protocol
for the remote user to indicate the desire of a remote user to disconnect the
media channel.  This is normally indicated using an external signalling
protocol such as SIP.
.PP
However, when the
.I DISCON_orig
is
.BR N_USER ,
the following reasons apply:
.TP \w'N_REJ_DISC_P\(em'u
.B N_DISC_NORMAL
This reason is not normally used by the
.BR NPI-RTP ,
as there is no mechanism for indicating a normal disconnect using the
RTP/RTCP protocol.
.TP
.B N_DISC_ABNORMAL
An abnormal disconnect may be indicated when the ICMP port unreachable errors
are received by the NS provider.  This is an indication that the remote user
has released its end of the channel.
.TP
.B N_REJ_P
This reason is not normally used by the
.BR NPI-RTP
because there is not mechanism in the RTP/RTCP protocol to provide for the
remote rejection of a connection request.
.TP
.B N_REJ_T
This reason is not normally used by the
.BR NPI-RTP
because there is not mechanism in the RTP/RTCP protocol to provide for the
remote rejection of a connection request.
.TP
.B N_REJ_INCOMPAT_INFO
This reason is not normally used because it requires protocol mechanisms that
are only available to CONS protocols such as X.25 and SCCP.
.TP
.B N_REJ_QOS_UNAVAIL_P
This reason is not normally used because the RTP/RTCP protocol has not
mechanism for negotiating end-to-end quality of service parameters.
.TP
.B N_REJ_QOS_UNAVAIL_T
This reason is not normally used because the RTP/RTCP protocol has not
mechanism for negotiating end-to-end quality of service parameters.
.TP
.B N_REJ_UNSPECIFIED
This reason is used simply when no other reason is applicable.
.PP
When the
.I DISCON_orig
is
.BR N_UNDEFINED ,
the following reasons apply:
.TP \w'N_REJ_DISC_P\(em'u
.B N_REASON_UNDEFINED
.RE
.RE
.\"
.SS Cross-Connection
.PP
Standard
.B NPI
does not have the ability to perform cross-connects using primitives.
.B NPI-RTP
requires the ability to perform driver cross-connects between one RTP channel
and another, without further involving the upper layer stream.  Therefore,
additional cross-connection primitives are provided.
.PP
When an RTP channel is cross-connected, all data messages flow between
interfaces, that is
.BR N_DATA_IND (7),
.BR N_DATA_REQ (7),
.BR N_UNITDATA_IND (7),
.BR N_UNITDATA_REQ (7),
.BR N_EXDATA_IND (7),
.BR N_EXDATA_REQ (7),
.BR N_DATACK_IND (7),
.BR N_DATACK_REQ (7),
and are not delivered upstream on either interface (unless
monitoring is requested in the cross-connection request).  Each
.BR N_DATACK_IND (7),
.BR N_DATA_IND (7),
.BR N_EXDATA_IND (7),
.BR N_UNITDATA_IND (7),
primitive arriving on the one interface is treated as the equivalent
.BR N_DATACK_REQ (7),
.BR N_DATA_REQ (7),
.BR N_EXDATA_REQ (7),
.BR N_UNITDATA_REQ (7),
primitive issued to the other interface, and visa versa.
.PP
Other primitives,
such as
.BR N_UDERR_IND (7),
.BR N_RESET_IND (7),
.BR N_RESET_CON (7),
.BR N_DISCON_IND (7)
are sent upstream as normal.  Note that disconnecting one of the channels
does not remove the cross-connection (although it may stop the data flow in
one or more directions).  It requires that one of the interfaces be
destroyed, or the
.BR N_XDIS_REQ (7)
primitive issued and successfully processed on either interface to remove the
cross-connection.
.\" -------------------------------------------------------------------------
.\" N_XCON_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_XCON_REQ (7)
Cross-connection request requests the cross-connection of data flows between
two
.B NPI-RTP
channels.
The channels must exist (that is, they need to be in at least the bound state,
.BR NS_IDLE ).
When either channel moves to the unbound state
.RB ( NS_UNBND ),
the cross-connection is removed.
The primitive is positively acknowledged with the
.BR N_OK_ACK (7)
primitive and negatively acknowledged with the
.BR N_ERROR_ACK (7)
primitive.
.RS
.TP
.I PRIM_type
Always
.BR N_XCON_REQ :
requesting the cross-connection of two interfaces.
.TP
.I TOKEN_value
Specifies the token of the NP interface to which the requesting interface is to be
cross-connected.  This is the value that was returned in the
.IR TOKEN_value
field of the
.BR N_BIND_ACK (7)
for the interface to which this interface is to be cross-connected.  If
either interface should be destroyed, the cross-connection disappears along
with the removed interface.
If the connection is to be cross-connected to itself (i.e. looped-back), this
field should be zero (0).
.TP
.I CONN_flags
Specifies the cross-connection options flags for the resulting NS
cross-connect.  The following flags are defined; but not supported:
.RS
.TP
.B REC_CONF_OPT
Specifies that receipt confirmation is to be used by default.  The
.B NPI-RTP
provider does not support receipt configuration and setting this flag is
invalid.
.TP
.B EX_DATA_OPT
Specifies that expedited data transfer is to be enabled by default.  The
.B NPI-RTP
provider does not support expedited data transfer and setting this flag is
invalid.
.RE
.TP
.IR QOS_length ", " QOS_offset
The length and offset from the beginning of the
.BR M_PROTO (9)
message block of the memory extent containing the quality-of-service
parameters to be used with the cross-connected NS connections.  Seq
\(lq\)Quality of Service,\(rq\) above.  The only QOS data type allowed in the
.BR N_XCON_REQ (7)
primitive by the
.B NPI-RTP
provider is the
.B N_QOS_SEL_CONN_RTP
data structure containing the following information:
.RS
.TP
.I n_qos_type
Always
.BR N_QOS_SEL_CONN_RTP .
.TP
.I protocol
Specifies the IP protocol to be used for packets forwarded through the
cross-connection.  Typically,
.BR IPPROTO_UDP .
.TP
.I priority
Specifies the priority to be used for packets forwarded through the
cross-connection.
.TP
.I ttl
Specifies the time-to-live field to be used in packets forwarded through the
cross-connection.
.TP
.I tos
Specifies the type-of-service field to be used in packets forwarded through
the cross-connection.
.TP
.I mtu
Specifies the maximum-transfer-unit to be used for packets forwarded through
the cross-connection.  If the underlying maximum-transfer-unit is different
from this value, the smaller of the two will be used.
.TP
.I checksum
Specifies the default checksum to be used in packets forwarded through the
cross-connection.
.TP
.I payload_type
Specifies the payload type to be cross-connected.
.RE
.RE
.\" -------------------------------------------------------------------------
.\" N_XDIS_REQ
.\" -------------------------------------------------------------------------
.TP
.BR N_XDIS_REQ (7)
Cross-connection disconnect request requests that the cross-connection of
data flows between two
.BR NPI-RTP
channels be removed.  The channels must exist and a cross-connection must
exist between the channels.  When either channel moves to the unbound state
or is closed, the cross-connection is automatically removed.  The primitive
is positively acknowledged with the
.BR N_OK_ACK (7)
primitive.
.RS
.TP
.I PRIM_type
Always
.BR N_XDIS_REQ (7).
.TP
.I DISCON_reason
Specifies the disconnect reason for disconnecting the cross-connection.
.RE
.\"
.\"
.\"
.SH "MULTIPLEXED CONNECTIONS"
.PP
In support of multiplexing drivers that do not wish to link an additional NPI
stream for each connection, an extension to the NPI service interface was
crafted to support multiplexing many virtual NPI Streams onto a single
Stream.  This enhancement was created to ease the burden of configuration
control of multiplexing drivers in protocol stacks.
.PP
Without this enhancement, transport protocols implemented as multiplexing
drivers that require that a network connection not be shared between
transport connections would required that an additional network Stream be
temporarily linked under the multiplexing driver for each open of a transport
Stream on the multiplexing driver.  While this is not impossible, it does not
scale well.
.PP
A case where this is evident is in the OSI protocol stack, where a separate
network connection must be established for each transport connection (for
TP0, TP1, TP2 and TP3 operation).  The approach taken historically by the Sun
Microsystems OSI stack was to create a pool of network streams that are
permanently linked under the transport driver, and from which a network
stream can be selected when a transport Stream is opened and initialized.
This was performed at the network-to-transport, transport-to-session,
session-to-presentation, and presentation-to-application layers.  An obvious
difficulty with this approach is that only a fixed number of application
Streams can be opened and active at any given point in time.  Further,
configuration information specifying the size of the pools is required and
the linking was necessarily performed at boot time using a startup script.
Modifications of pool sizes while the protocol stack is running is quite
difficult with this approach.
.PP
By providing a multiplexed Stream that supports an unlimited number of
connections, the STREAMS stack runs more efficiently and the number of
connections is limited only by available memory.
.PP
It should be noted, however, that multiplexed NPI Streams are intended as an
internal module-to-module interface, and the multiplexed service interface is
not intended on being directly used by user-space programs (other than test
programs).
.\"
.SS Operation
.PP
The multiplexed
.B NPI-RTP 
service interface modifies the NPI primitives by prepending a connection
identifier tag to each and every NPI primitive.  This tag is a 32-bit word on
32-bit kernels and a 64-bit word on 64-bit kernels.  The intention here is
that the tag be able to hold a memory pointer.
.PP
The tag value is selected by the NPI user module and should be sufficiently
unique that the NPI user can distinguish messages belonging to different
virtual NPI interfaces on the Stream.  A tag is associated with a virtual
NPI interface when the first
.BR N_BIND_REQ (7)
primitive is issued.  The NPI provider associates the tag with the virtual
interface and will tag all NPI primitives issued to the NPI user for the
virtual interface with the associated tag.  In this way, the NPI user can
independently control each of the virtual interfaces associated with the
Stream.
.PP
Whenever a virtual interface transitions to the
.B NS_UNBND
state (as a result of the success of an
.BR NS_UNBIND_REQ (7)
primitive, the virtual interface is destroyed and its associated tag removed.
Upon successful processing of an
.BR NS_BIND_REQ (7)
primitive, a new virtual interface is created and the tag provided with the
.BR NS_BIND_REQ (7)
primitive will be associated with the newly created virtual interface.
.PP
Aside from this difference and the tagging of primitives, each virtual
interface operates in a manner similar to an interface provided on an
independent Stream.  However, because the Stream does not belong to a single
interface, several issues emerge:
.\"
.IP 1. \w'0.\(em'u
Under the normal non-multiplexed NPI,
.BR N_BIND_REQ (7)
primitives are normally issued by the NPI user as
.BR M_PROTO (7)
message blocks.  Under the multiplexed NPI,
.BR N_BIND_REQ (7)
primitives should be issued by the NPI user as
.BR M_PCPROTO (7)
message blocks.
.\"
.IP 2. \w'0.\(em'u
Under the normal non-multiplexed NPI, whenever an
.BR N_UNBIND_REQ (7)
primitive is successfully received by the NS provider, an
.BR M_FLUSH (7)
message is issued upstream before the
.BR N_OK_ACK (7)
primitive is issued acknowledging the
.BR N_UNBIND_REQ (7).
This is to flush any received unitdata messages that were sent to the NS
user after the
.BR N_UNBIND_REQ (7)
primitive was issued by the NS user.  Under the multiplexed NPI, this
flushing of the Stream could flush messages belonging to other virtual
interfaces.  Therefore, modules along the NPI multiplexed Stream must be
cognisant of the fact that unitdata messages could arrive on the virtual
interface after the virtual interface is unbound.  Either the module can
perform its own purging of related messages upon receipt of the
.BR N_OK_ACK (7),
or the module must be prepared to otherwise process or discard unitdata
messages that might arrive after the
.BR N_OK_ACK (7)
has been received.
.\"
.IP 3. \w'0.\(em'u
Under the normal non-multiplexed NPI, whenever an
.BR N_DISCON_REQ (7)
primitive is successfully received by the NS provider, an
.BR M_FLUSH (7)
message is issued upstream before the
.BR N_OK_ACK (7)
primitive is issued acknowledging the abortive disconnect.  This is to flush
any received data messages that were sent to the NS user after the
.BR N_DISCON_REQ (7)
primitive was issued by the NS user.  Under the multiplexed NPI, this
flushing of the Stream could flush messages belonging to other virtual
interfaces.  Therefore, modules along the NPI multiplexed Stream must be
cognisant of the fact that data messages could arrive on the virtual
interface after the virtual interface has processed an abortive disconnect.
Either the module can perform its own purging of related message upon receipt
of the
.BR N_OK_ACK (7),
or the module must be prepared to otherwise process or discard data messages
that might arrive after the
.BR N_OK_ACK (7)
has been received.
.\"
.IP 4. \w'0.\(em'u
Under the normal non-multiplexed NPI, before an
.BR N_DISCON_IND (7)
primitive is issued by the NS provider, an
.BR M_FLUSH (7)
message is issued upstream.  This is to flush any received data messages and
any NS user issued primitives before issuing the abortive disconnect.  Under
the multiplexed NPI, this flushing of the Stream could flush messages
belonging to other virtual interfaces.  Therefore, the NS provider and
modules along the NPI multiplexed Stream must be cognisant of the fact that
data messages or other primitives could arrive on the virtual interface after
the virtual interface has been abortively disconnected.
.\"
.IP 5. \w'0.\(em'u
In the non-multiplexed NPI Stream, the NS user must await an acknowledgement
for primitives requiring an acknowledgement before issuing any other
primitives.  This is largely because the Stream head will only process one
priority message at a time.  If an
.BR M_PCPROTO (9)
message appears at the Stream head while another is queued, the first will be
discarded.  For the multiplexed NPI stream, the module representing the NS
user must be cognisant of this fact.  The multiplexed interface was not
intended to be used by user processes, but, for test programs, the user must
await acknowledgement of primitives that require acknowledgement before
issuing any other primitives on any virtual interface.
.\"
.IP 6. \w'0.\(em'u
In the non-multiplexed NPI Stream, the NS provide issues
.BR M_ERROR (9)
messages upstream with the error numbers set to
.RB [ EPROTO ]
to indicate fatal protocol errors.  These error messages can be correlated
with the interface because there is only one interface per Stream.  In the
multiplexed NPI Stream, these error messages can no longer be correlated with
the virtual interface.  Therefore, the NS provider should issue either a
.BR N_UDERR_IND (7)
or
.BR N_RESET_IND (7)
message instead depending on whether the virtual interface is connectionless
or pseudo-connection-oriented.
.PP
Aside from these, relatively minor issues, each virtual interface on the
multiplexed NPI Stream acts as a real interface on its own Stream.
.\"
.\"
.SH IOCTLS
.PP
The
.B NPI
specification
.[
NPI Revision 2.0.0
.]
does not standardize on any input-output controls.
.\"
.\"
.\".SH "ERROR HANDLING"
.\".PP
.\"
.\"
.\".SH ERRORS
.\".PP
.\"
.\"
.SH NOTICES
.PP
There are a number of purposes for this NPI-RTP driver:
.IP 1. \w'0.\(em'u
The
.I OpenSS7 Project
has a need for a solution for providing a pseudo-device driver for RTP
(Real-Time Transport Protocol),
.[
rfc3550
.]
.BR rtp (4).
Because RTP runs over RTP (User Datagram Protocol), it is necessary to
intercept packets ahead of Linux' native RTP at the IP level to avoid the
inefficiencies of opening Sockets from inside the kernel.  This NPI-RTP
driver accomplishes that feat.  It also permits a single Stream to be opened
but which communicates on many RTP channels.
.IP 2.
The
.I OpenSS7 Project
has a need for a direct interface and interception (drop and insert)
capabilities at the IP level for the purposes of testing both RTP (Real-Time
Transport Protocol),
.[
rfc3550
.]
.BR rtp (4),
and SCTP (Stream Control Transmission Protocol),
.[
rfc4960
.]
.BR sctp (4).
This need is less critical because of the availability of Ferry-Clip testing,
using STREAMS-based pipes, that can be rigged to RTP and SCTP to achieve the
same effect.
.IP 3.
Although historically the STREAMS SCTP driver hooks directly to the Linux
native IP subsystem at the driver-kernel level, it might be of some advantage
to make SCTP a pushable module that simply pushes over one of these NPI-RTP
Streams, or a multiplexing driver under which one of these NPI-RTP Streams is
permanently linked at system initialization.  The ability to bind multiple
addresses is of use to SCTP.
.IP 4.
Although there is no prevailing standardized way of interfacing to the IP
layer of various
.IR UNIX \(rg
operating systems, such as
.IR Solaris \(rg,
.[
soldoc11
.]
it might be possible to make the
.I OpenSS7 Project
RTP and SCTP drivers immediately portable to other operating systems with
STREAMS such as
.IR Solaris \(rg,
.[
solspg
.]
.IR pSOS \(rg,
.IR VxWorks \(rg,
.[
vxwspg
.]
.IR LynxOS \(rg,
etc. by simply porting the NPI-RTP driver instead of each protocol driver.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR npi (7),
.BR getpmsg (2s),
.BR putpmsg (2s),
.BR getpmsg (3p),
.BR putpmsg (3p),
.BR ioctl (2),
.BR ioctl (3p).
.\"
.\"
.SH VERSIONS
.PP
This is version @VERSION@ of the NPI-RTP Corrigendum.
.\"
.\"
.SH COMPATIBILITY
.PP
There is, in fact, no standard for using the Network Provider Interface (NPI)
.[
NPI Revision 2.0.0
.]
with the Internet Protocol (IP) suite.  Although historically some approaches
may have been taken in various releases of the
.IR UNIX \(rg
operating system, none have been well documented nor can be considered the
basis for a standard.
.\"
.\"
.SH CONFORMANCE
.PP
This Corrigendum conforms where possible to the
.I Network Provider Interface Revision 2.0.0
.[
NPI Revision 2.0.0
.]
but its application to the Internet Protocol is implementation specific and
not subject to standardization.
.\"
.\"
.[
$LIST$
.]
.T2
