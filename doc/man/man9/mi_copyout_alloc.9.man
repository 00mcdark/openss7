'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id: mi_copyout_alloc.9.man,v 1.1.2.2 2011-01-11 23:43:16 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2010  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaining to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2011-01-11 23:43:16 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: mi_copyout_alloc.9.man,v $
.\" Revision 1.1.2.2  2011-01-11 23:43:16  brian
.\" - updated manual pages
.\"
.\" Revision 1.1.2.1  2009-06-21 10:38:47  brian
.\" - added files to new distro
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore T
.R2
.so openss7.macros
.\"
.\"
.TH MI_COPYOUT_ALLOC 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_copyout_alloc
\- allocate a buffer to be copied out using \fBmi_copyout\fR(9)
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MPS_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/mpsddi.h>
.HP
.BI "mblk_t *mi_copyout_alloc(queue_t *" q ", mblk_t *" mp ", caddr_t " uaddr ", size_t " len ", int " free );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the current write-side queue whose
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure within which
.BR mi_copyout_alloc ()
is being called.
.TP
.I mp
a pointer to the message block that contains the
.BR M_IOCTL (9)
or
.BR M_IOCDATA (9)
message being processed.  This is the message that was passed to the write-side
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure within which
.BR mi_copyout_alloc ()
is invoked.
.TP
.I uaddr
a pointer to the user-space memory address to which the data will be copied, or
.BR NULL ,
to copy data from the user-space memory address from which data would be copied in.
.TP
.I len
the number of bytes to copy out to user space.
.TP
.I free
specifies, when non-zero, to automatically close the input-output operation on error.
.\"
.\"
.SH INTERFACE
.PP
.IR MPS \(rg-specific
DDI.
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_copyout_alloc ()
is one of a set of helper functions that supports both
.B TRANSPARENT
and
.IR I_STR (7)
input-output controls (see
.BR ioctl (2s)
and
.BR streamio (7)).
These helper functions include:
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyout_alloc ()
allocates a message block, links it onto the message pointed to by
.I mp
and returns a pointer to the newly allocated message block. The caller copies the data (to
be copied out to user space) into the message block.
The caller can then use the
.BR mi_copyout (9)
function to invoke a
.BR M_COPYOUT (9)
message upstream, resulting in an
.BR M_IOCDATA (9)
message appearing on the write queue.  (For
.IR I_STR (7)
input-output controls, this exchange is simulated by
.BR mi_copyout (9)
by placing an appropriate
.BR M_IOCDATA (9)
message directly on the write queue).
.PP
.BR mi_copyout_alloc ()
can be used to allocate multiple copy-out operations before calling
.BR mi_copyout (9).
Each operation will be remembered until the call to
.BR mi_copyout (9)
is issued.  The first allocated operation will be the first to be processed.
Normally, however, calls to
.BR mi_copyout_alloc ()
are interspersed with calls to
.BR mi_copyout (9).
.PP
Calling
.BR mi_copyout_alloc ()
before calling
.BR mi_copyout (9)
is typicaly, but not necessary: should
.BR mi_copyout (9)
be called without ever calling
.BR mi_copyout_alloc ()
it has the same effect as calling
.BR mi_copy_done (9)
with a successful error code.
.\"
.\"
.SH USAGE
.PP
.BR mi_copyout_alloc ()
is only used in conjunction with the other
.I mi_copy
helper functions:
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyout_alloc ()
is used for
.B TRANSPARENT
input output controls where the size of the data passed by the user is not known until the initial
portion of the passed in data is copied in.
For
.RB non- TRANSPARENT
.RI ( I_STR )
input output controls, this is not a problem, because the length of the passed in data is provided
directly by the user (see
.BR streamio (7)).
.PP
The last copyout operation allocated with
.BR mi_copyout_alloc ()
before the input-output control operation is closed, that has as its target the implicit copyout
buffer specified by the user, should set the user address,
.IR uaddr ,
argument to
.BR NULL .
This indicates to the
.BR mi_copyout (9)
function that this is the last coyout operation of an input-output control opertation and that it
can use the implicit copyout capabilities afforded and
.IR I_STR (7)
.BR M_IOCACK (9)
message, which is used to complete the operation.
All callse to
.BR mi_copyout_alloc ()
prior to this last call, must set the
.I uaddr
argument to a specific and explicit user address.
.\"
.\"
.SH RETURN
.PP
When
.BR mi_copyout_alloc ()
succeeds, it returns a pointer to the newly allocated message;
when it fails, it returns
.BR NULL .
.\"
.\"
.SH ERRORS
.PP
.BR mi_copyout_alloc ()
fails when it cannot allocate a message block, or the structure of the passed
in message block is invalid.
When
.I free
is non-zero, and
.BR mi_copyout_alloc ()
fails, it will have the same effect as calling
.BR mi_copy_done ()
with an error code of
.RB [ ENOSR ]
when a message block could not be allocated, or
.RB [ EPROTO ]
when the structure or configuration of the passed in message block was
incorrect.
.\"
.\"
.SH EXAMPLE
.PP
See
.BR mi_copyout (9)
for examples of the usage of
.BR mi_copyout_alloc ().
.\"
.\"
.SH CONTEXT
.PP
.BR mi_copyout_alloc ()
can be called from any context; however, it is normally called from the
.I STREAMS
driver or module write-side queue
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_copyout_alloc ()
is MP-safe; however, it is the responsibility of the caller to ensure exclusive access to the passed
in message blocks.  This is normally the case when the function is called from the
.I STREAMS
driver or module write-side queue
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure.
.\"
.\"
.SH NOTICES
.PP
.BR mi_copyout_alloc ()
is an
.IR MPS \(rg-specific
function:
.BR _MPS_SOURCE ,
.B _AIX_SOURCE
or
.B _MAC_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.BR "@PACKAGE_TITLE@"
must also have been compiled with
.BR CONFIG_STREAMS_COMPAT_MPS ,
.BR CONFIG_STREAMS_COMPAT_MPS_MODULE ,
.BR CONFIG_STREAMS_COMPAT_AIX ,
.BR CONFIG_STREAMS_COMPAT_AIX_MODULE ,
.BR CONFIG_STREAMS_COMPAT_MAC
or
.B CONFIG_STREAMS_COMPAT_MAC_MODULE
defined.
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR mi_copyout_alloc ()
is implemented by directly manipulating the
.BR iocblk (9),
.BR copyreq (9)
and
.BR copyresp (9)
structures contained in the message block.  Private state information and accumulated data is
chained off of the
.IR cq_private " and " cp_private
members of the
.BR copyreq (9)
and
.BR copyresp (9)
structures.
Because of this, it is important that once one of these helper functions is used to begin an
.BR M_IOCTL (9)
sequence, that the remaining help functions be used also, instead of directly manipulating the
structures.  Messages and their contained structures should be passed to the helper functions
without being manipulated in any way by the caller.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_copy_done (9),
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copy_set_rval (9),
.BR mi_copy_state (9),
.BR MI_COPY_CASE (9),
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_copyout_alloc ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_copyout_alloc ()
is
compatible with
.IR MPS \(rg,
.IR AIX \(rg,
.IR MacOT \(rg,
and
.IR Solaris \(rg,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR mi_copyout_alloc ()
is an
.IR MPS \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.
The more common message utility functions
should be used in its stead.
.IP \(em
.BR mi_copyout_alloc ()
is provided for source level compatibility with
.IR MPS \(rg
for the purpose of porting
.IR MPS \(rg
drivers to
.BR Linux .
Because internal structures and definitions for
.BR "@PACKAGE_TITLE@"
.[
@PACKAGE@
.]
differ from that of
.IR MPS \(rg,
binaries are incompatible.
.IP \(em
.BR mi_copyout_alloc ()
only provides functionality comparable to
.IR MPS \(rg
for use by
.I STREAMS
drivers and modules.
Any and all functionality provided by
.BR mi_copyout_alloc ()
in support of
.RI non- STREAMS
devices are not supported.
.PP
See
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR MPS \(rg
DDI documentation,
.IR MacOT \(rg
DDI documentation,
.[
macotr
.]
.[
macspg
.]
.IR AIX \(rg
documentation.
.[
aixcpc
.]
.\"
.\"
.SH HISTORY
.PP
.BR mi_copyout_alloc ()
first appeared in
.IR MPS \(rg.
.BR mi_copyout_alloc ()
is a
Mentat, Inc. function that goes all the way back to the
.RI pre- OSF/1
.I Mentat
implementations.
.BR mi_copyout_alloc ()
appears in
.IR MacOT \(rg
.[
macspg
.]
and
.IR AIX \(rg.
.[
aixcpc
.]
An undocumented version of
.BR mi_copyout_alloc ()
appears in
.IR Solaris \(rg.
.\"
.\"
.[
$LIST$
.]
.TI
