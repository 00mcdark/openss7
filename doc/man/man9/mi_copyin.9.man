'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id$
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaning to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date$ by $Author$
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log$
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore T
.R2
.so openss7.macros
.\"
.\"
.TH MI_COPYIN 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_copyin
\- copy data from a user buffer
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MPS_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/mpsddi.h>
.HP
.BI "void mi_copyin(queue_t *" q ", mblk_t *" mp ", caddr_t " uaddr ", size_t " len );
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I q
the current write-side queue whose
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure within which
.BR mi_copyin ()
is being called.
.TP
.I mp
a pointer to the message block that contains the
.BR M_IOCTL (9)
or
.BR M_IOCDATA (9)
message being processed.  This is the message that was passed to the write-side
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure within which
.BR mi_copyin ()
is invoked.
.TP
.I uaddr
a pointer to the user-space memory address from which data will be copied.  This argument must be
.B NULL
on the first call to
.BR mi_copyin ()
on the original
.BR M_IOCLT (9)
message.  For subsequent calls for
.BR M_IOCDATA (9)
messages, this address is extracted from the data structures specific to the input-output control.
.TP
.I len
the number of bytes to copy in from user space.
.\"
.\"
.SH INTERFACE
.PP
.IR MPS \(rg-specific
DDI.
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_copyin ()
is one of a set of helper functions that supports both
.B TRANSPARENT
and
.IR I_STR (7)
input-output controls (see
.BR ioctl (2s)
and
.BR streamio (7)).
These helper functions include:
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyin ()
is used to copy data from a user-space to the kernel.  When a driver or module
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure first receives a
.BR M_IOCTL (9)
message, the
.BR mi_copyin ()
function is used, if necessary, to generate an upstream
.BR M_COPYIN (9)
request to the stream head.
It may also be used by a driver or module
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure when it receives a subsequent
.BR M_IOCDATA (9)
message and has additional user-space memory areas to copy in.
.\"
.\"
.SH USAGE
.PP
.BR mi_copyin ()
is only used in conjunction with the other
.I mi_copy
helper functions:
.BR mi_copyin (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_done (9),
.BR MI_COPY_CASE (9),
.BR mi_copy_set_rval (9)
and
.BR mi_copy_state (9).
.PP
.BR mi_copyin ()
is used for both
.B TRANSPARENT
and
.IR I_STR (7)
input-output controls.
With
.B TRANSPARENT
input-output controls, the size of the data passed by the user is not known until the initial
portion of the passed in data is copied in.
For
.RB non- TRANSPARENT
.RI ( I_STR )
input output controls, this is not a problem, because the length of the passed in data is provided
directly by the user (see
.BR streamio (7)).
.B mi_copyin ()
is used to blur the differences between the two approaches.
.PP
When the initial
.BR M_IOCTL (9)
message of an input-output control operation is received on a write queue, and
data needs to be copied in as part of the operation,
.BR mi_copin ()
is used to effect the copying in of data.  The function is invoked on this
initial
.BR M_IOCTL (9)
message with a
.I uaddr
argument of
.BR NULL ,
and the length of data that must be initially copied in.  The put or service
procedure processing the
.BR M_IOCTL (9)
message the simply returns.  For
.B TRANSPARENT
input-output controls,
.BR mi_copyin ()
causes an
.BR M_COPYIN (9)
message to be sent upstream resulting in an
.BR M_IOCDATA (9)
message being passed back downstream.
For
.IR I_STR (7)
input-output controls, the data is taken from the buffer containing the
implicity copied in data, and an
.BR M_IOCDATA (9)
message is simulated and place on the write queue,
.IR q .
.PP
When used for a subsequent copy in operation after the initial copy in
operation has completed,
.BR mi_copyin ()
acts a litte bit differently.
.I uaddr
is set to an explicit user address from which to copy in data, and the
operation always results in an
.BR M_COPYIN (9)
message being sent upstream, regardless of whether the original input-output
control was a
.B TRANSPARENT
or a
.IR I_STR (7)
input-output control.
.PP
For either the initial, implicit, copy in operation with
.BR mi_copyin ()
and
.I uaddr
set to
.BR NULL ,
or for the subsequent, explicit, copy in operation with
.BR mi_copyin ()
and
.I uaddr
set to an explicit address;
.BR mi_copyin_n (9)
can be used to copy in additional portions of the same buffer.
.PP
Once all copyin operations are complete, copout operations can commence.  See
.BR mi_copyout_alloc (9)
and
.BR mi_copyout (9).
.\"
.\"
.SH RETURN
.PP
.BR mi_copyin ()
returns
.BR void .
.\"
.\"
.SH ERRORS
.PP
.BR mi_copyin ()
fails when passed invalid pointers.  When
.BR mi_copyin ()
fails, it panics the kernel.
.PP
If
.BR mi_copyin ()
suffers an internal failure, it will close the input-output control operation with a suitable error
code.  The error codes returned by
.BR mi_copyin ()
to the
.BR ioctl (2s)
operation in
.IR errno (3)
are as follows:
.TP \w'[\fBENOBUFS\fR]\ \ 'u
.RB [ EPROTO ]
.BR mi_copyin ()
was passed a message block other than an
.BR M_IOCTL (9)
or
.BR M_IOCDATA (9)
message block.
.TP
.RB [ EPROTO ]
.BR mi_copyin ()
was passed an
.BR M_IOCTL (9)
message block corresponding to a
.B TRANSPARENT
input-output control command, and the
.BR M_IOCTL (9)
message block had no attached
.BR M_DATA (9)
message block indicating the argument to the
.BR ioctl (2s)
call.
.TP
.RB [ EINVAL ]
.BR mi_copyin ()
was passed an
.BR M_IOCTL (9)
message block corresponding to an
.IR I_STR (7)
input-outpu control command, and the attached
.BR M_DATA (9)
message blocks did no contain sufficient data to satisfy the request.
.TP
.RB [ ENOBUFS ]
A message block could not be allocated to satisfy the request.
.TP
.RB [ EPROTO ]
.BR mi_copyin ()
was passed an
.BR M_IOCDATA (9)
message block that did not belong to an operation that was begun with
.BR mi_copyin (9)
or
.BR mi_copyout (9).
.\"
.\"
.SH EXAMPLE
.PP
See
.BR mi_copyin_n (9)
for examples of the usage of
.BR mi_copyin ().
.PP
The most typical use of
.BR mi_copyin ()
is immediately after receiving an
.BR M_IOCTL (9)
message to copy in information necessary to process the input output control such as follows:
In the example, an input output control is use to set the configuration of a device using an options
structure.  The options structure must be copied in so that configuration values may be set.
.PP
.nf
\fC\s-1\
static int
xxx_putp(queue_t *q, mblk_t *mp)
{
    switch (DB_TYPE(mp)) {
    ...
    case M_IOCTL:
    {
        struct iocblk *ioc;

        ioc = (struct iocblk *) mp->b_rptr;

        switch (ioc->ioc_cmd) {
        case MY_SETCONFIG:
            mi_copyin(q, mp, NULL,
                      sizeof(struct my_options));
            return (0);
        }

        mi_copy_done(q, mp, EINVAL);
        return (0);
    }
    case M_IOCDATA:
    {
        struct copyresp *cp;
        mblk_t *dp;

        cp = (struct copyresp * cp) mp->b_rptr;

        switch (cp->cp_cmd) {
        case MY_SETCONFIG:
            switch (mi_copy_state(q, mp, &dp)) {
            case -1:
                return (0);
            default:
                mi_copy_done(q, mp, EPROTO);
                return (0);
            case MI_COPY_CASE(M_COPY_IN, 1):
            {
                struct my_options *opt;

                opt = (struct my_options *) dp->b_rptr;

                /* take elements from structure to
                   set configuration of the device. */

                mi_copy_done(q, mp, 0);
                return (0);
            }
            }
        }

        mi_copy_done(q, mp, EINVAL);
        return (0);
    }
    ...
    }
}
\s+1\fP
.fi
.PP
The code in the above example works equally well for both
.B TRANSPARENT
and
.IR I_STR (7)
input-output control operations.
.PP
See also,
.BR mi_copyin_n (9)
for additional examples of
.BR mi_copyin ().
.\"
.\"
.SH CONTEXT
.PP
.BR mi_copyin ()
can be called from any context; however, it is normally called from the
.I STREAMS
driver or module write-side queue
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_copyin ()
is MP-safe; however, it is the responsibility of the caller to ensure exclusive access to the passed
in message blocks.  This is normally the case when the function is called from the
.I STREAMS
driver or module write-side queue
.IR qi_putp (9)
or
.IR qi_srvp (9)
procedure.
.\"
.\"
.SH NOTICES
.PP
.BR mi_copyin ()
is an
.IR MPS \(rg-specific
function:
.BR _MPS_SOURCE ,
.B _AIX_SOURCE
or
.B _MAC_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.BR "@PACKAGE_TITLE@"
must also have been compiled with
.BR CONFIG_STREAMS_COMPAT_MPS ,
.BR CONFIG_STREAMS_COMPAT_MPS_MODULE ,
.BR CONFIG_STREAMS_COMPAT_AIX ,
.BR CONFIG_STREAMS_COMPAT_AIX_MODULE ,
.BR CONFIG_STREAMS_COMPAT_MAC
or
.B CONFIG_STREAMS_COMPAT_MAC_MODULE
defined.
.PP
.BR mi_copy_state (9)
must be called between the initial call to
.BR mi_copyin (9)
or
.BR mi_copyout (9)
and subsequent calls to
.BR mi_copyin (9),
.BR mi_copyin_n (9),
.BR mi_copyout (9)
or
.BR mi_copy_done (9).
.\"
.\"
.SH IMPLEMENTATION
.PP
.B mi_copyin ()
is implemented by directly manipulating the
.BR iocblk (9),
.BR copyreq (9)
and
.BR copyresp (9)
structures contained in the message block.  Private state information and accumulated data is
chained off of the
.IR cq_private " and " cp_private
members of the
.BR copyreq (9)
and
.BR copyresp (9)
structures.
Because of this, it is important that once one of these helper functions is used to begin an
.BR M_IOCTL (9)
sequence, that the remaining help functions be used also, instead of directly manipulating the
structures.  Messages and their contained structures should be passed to the helper functions
without being manipulated in any way by the caller.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_copy_done (9),
.BR mi_copyout (9),
.BR mi_copyout_alloc (9),
.BR mi_copy_set_rval (9),
.BR mi_copy_state (9),
.BR MI_COPY_CASE (9),
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_copyin ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_copyin ()
is
compatible with
.IR MPS \(rg,
.IR AIX \(rg,
.IR MacOT \(rg,
and
.IR Solaris \(rg,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR mi_copyin ()
is not bug for bug compatible with
.IR Solaris \(rg.
.IR OpenSolaris \(rg
has the bug that its implementation of 
.BR mi_copyin ()
will only work correctly on the initial
.BR M_IOCTL (9)
message and will fail if used on subsequent
.BR M_IOCDATA (9)
messages.
.IP \(em
.BR mi_copyin ()
is an
.IR MPS \(rg-specific
function and should not be used by portable
.I STREAMS
drivers and modules.
The more common message utility functions
should be used in its stead.
.IP \(em
.BR mi_copyin ()
is provided for source level compatibility with
.IR MPS \(rg
for the purpose of porting
.IR MPS \(rg
drivers to
.BR Linux .
Because internal structures and definitions for
.BR "@PACKAGE_TITLE@"
.[
@PACKAGE@
.]
differ from that of
.IR MPS \(rg,
binaries are incompatible.
.IP \(em
.BR mi_copyin ()
only provides functionality comparable to
.IR MPS \(rg
for use by
.I STREAMS
drivers and modules.
Any and all functionality provided by
.BR mi_copyin ()
in support of
.RI non- STREAMS
devices are not supported.
.PP
See
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
.IR MPS \(rg
DDI documentation,
.IR MacOT \(rg
DDI documentation,
.[
macotr
.]
.[
macspg
.]
.IR AIX \(rg
documentation.
.[
aixcpc
.]
.\"
.\"
.SH HISTORY
.PP
.BR mi_copyin ()
first appeared in
.IR MPS \(rg.
.BR mi_copyin ()
is a
Mentat, Inc. function that goes all the way back to the
.RI pre- OSF/1
.I Mentat
implementations.
.BR mi_copyin ()
appears in
.IR MacOT \(rg
.[
macspg
.]
and
.IR AIX \(rg.
.[
aixcpc
.]
An undocumented version of
.BR mi_copyin ()
appears in
.IR Solaris \(rg.
.\"
.\"
.[
$LIST$
.]
.TI
