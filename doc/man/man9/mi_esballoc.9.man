'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id: mi_esballoc.9.man,v 1.1.2.1 2011-01-11 23:40:10 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2010  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaining to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2011-01-11 23:40:10 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: mi_esballoc.9.man,v $
.\" Revision 1.1.2.1  2011-01-11 23:40:10  brian
.\" - added new files
.\"
.\" Revision 1.1.2.1  2009-06-21 10:38:46  brian
.\" - added files to new distro
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore T
.R2
.so openss7.macros
.\"
.\"
.TH MI_ESBALLOC 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_esballoc
\- reliably allocate an external message block
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MPS_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/mpsddi.h>
.HP
.BI "mblk_t *\fRmi_esballoc(\fPqueue_t *" q ", unsigned char *" base ", size_t " size ", int " priority ", frtn_t " freeinfo \fR)\fP;
.\"
.\"
.SH ARGUMENTS
.PP
.TP \w'priority\(em'u
.I q
the queue to reschedule when a buffer becomes available (if one is not
immediately available).
.PD 0
.TP
.I base
the base of the user supplied message buffer.
.TP
.I size
the size of the user supplied message buffer.
.TP
.I priority
the priority of the request.
.TP
.I freeinfo
a pointer to a free routine description structure.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR MPS \(rg-specific
DDI.
.br
.I "Linux Fast-STREAMS"
specific.
.\"
.\"
.SH DESCRIPTION
.PP
.B mi_esballoc ()
is a reliable external buffer allocation function that can be used with the
functions from the
.BR mi_open_comm (9)
family.
.PP
In contrast to the DDI/DKI function,
.BR esballoc (9),
.BR mi_esballoc ()
takes an extra argument,
.IR q ,
a pointer to the queue to schedule (with
.BR qenable (9))
when a message block of priority,
.IR priority ,
becomes available.
.\"
.\"
.SH USAGE
.PP
.BR mi_esballoc ()
is used to simplify and make more efficient the handling of buffer callbacks
when allocating message blocks within a
.I STREAMS
module or driver.
.BR mi_esballoc ()
can be used throughout the driver or module from the
.I STREAMS
synchronous environment, whenever a message block would otherwise be
allocated using
.BR esballoc (9).
.BR mi_esballoc ()
is called instead, and passed the queue,
.IR q ,
for which an active message is being processed by a put or service procedure.
.PP
When
.BR mi_esballoc ()
fails to allocate a message block, it returns
.B NULL
and schedules a buffer callback that will enable queue,
.IR q ,
when a buffer becomes available.
The caller can then simply place the message being processed on its receiving
queue,
.IR q ,
and return.  The queue,
.IR q ,
service procedure will be invoked when a buffer is available and the message
taken off the queue for processing once again.
.\"
.\"
.SH RETURN
.PP
When the message block allocation is successful,
.BR mi_esballoc ()
functions identical to
.BR esballoc (9),
and returns a pointer to the newly allocated message block.
When the message block allocation fails,
.BR mi_esballoc ()
returns
.B NULL
and generates a buffer callback for the queue,
.IR q .
When the buffer callback is executed, the queue,
.IR q ,
is enabled using
.BR qenable (9).
.\"
.\"
.SH ERRORS
.PP
.BR mi_esballoc (9)
always succeeds; however, whether a buffer was immediately allocated depends
on the return value.
.\"
.\"
.SH EXAMPLE
.PP
Following is an example of the use of
.BR mi_esballoc ().
In the example, a zero-length
.BR M_PROTO (9)
message block is appended to all
.BR M_DATA (9)
message blocks received on a Stream.
.nf
\fC\s-2
  1  int streamscall
  2  xxx_rput(queue_t *q, mblk_t *mp)
  3  {
  4      mblk_t *pp;
  5  
  6      if (!pcmsg(DB_TYPE(mp)) && (q->q_first || (q->q_flag & QSVCBUSY))) {
  7          putq(q, mp);
  8          return (0);
  9      }
 10      switch (DB_TYPE(mp)) {
 11      case M_DATA:
 12          if (!(pp = mi_esballoc(q, NULL, 0, BPRI_MED, NULL))) {
 13              putq(q, mp);
 14              break;
 15          }
 16          if (!canputnext(q)) {
 17              freeb(pp);
 18              putq(q, mp);
 19              break;
 20          }
 21          DB_TYPE(pp) = M_PROTO;
 22          pp->b_cont = mp;
 23          putnext(q, pp);
 24          break;
 25      case...:
 26          ...;
 27      }
 28      return (0);
 29  }
 30  int streamscall
 31  xxx_rsrv(queue_t *q)
 32  {
 33      mblk_t *mp;
 34  
 35      while ((mp = getq(q))) {
 36          switch (DB_TYPE(mp)) {
 37          case M_DATA:
 38              if (!(pp = mi_esballoc(q, NULL, 0, BPRI_MED, NULL))) {
 39                  putbq(q, mp);
 40                  break;
 41              }
 42              if (!canputnext(q)) {
 43                  freeb(pp);
 44                  putbq(q, mp);
 45                  break;
 46              }
 47              DB_TYPE(pp) = M_PROTO;
 48              pp->b_cont = mp;
 49              putnext(q, pp);
 50              break;
 51          case...:
 52              ...;
 53         }
 54         break;
 55      }
 56      return (0);
 57  }
\s+2\fP
.fi
.PP
In the example, when a message block cannot be immediately allocated with
.BR mi_esballoc (),
the caller simply places the message to be processed on the queue,
.IR q ,
and returns.  The queue,
.IR q ,
will have its service procedure scheduled, using
.BR qenable (9),
when a message block is available and processing of the message can continue.
.\"
.\"
.SH CONTEXT
.PP
.BR mi_esballoc ()
can be called from any context, including user context, module procedures,
call-outs, callbacks, soft interrupts (tasklets and bottom halves), and
interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_esballoc ()
is MP-safe, however, see
.BR esballoc (9).
.\"
.\"
.SH NOTICES
.PP
.BR mi_esballoc ()
is an
.IR MPS \(rg-specific
function:
.BR _MPS_SOURCE ", " _AIX_SOURCE ", " _MAC_SOURCE " or _SUN_SOURCE
must be defined before including DDI/DKI include files to expose this symbol.
.B @PACKAGE_TITLE@
must also have been compiled with
.BR CONFIG_STREAMS_COMPAT_MPS ", " CONFIG_STREAMS_COMPAT_MPS_MODULE ", "
.BR CONFIG_STREAMS_COMPAT_AIX ", " CONFIG_STREAMS_COMPAT_AIX_MODULE ", "
.BR CONFIG_STREAMS_COMPAT_MAC ", " CONFIG_STREAMS_COMPAT_MAC_MODULE ", "
.BR CONFIG_STREAMS_COMPAT_SUN " or " CONFIG_STREAMS_COMPAT_SUN_MODULE
defined.
.PP
Because
.BR mi_esballoc ()
stores a buffer callback identifier in the module private structure for
queue,
.IR q ,
.BR mi_esballoc ()
cannot be called for a queue pair that has not had its private structure
allocated with one of the
.BR mi_open_comm (9)
family of functions.
.PP
Because
.BR mi_esballoc ()
utilizes
.BR esballoc (9)
and
.BR esbbcall (9),
many of the caveats that apply to those functions also apply to
.BR mi_esballoc ().
.\"
.\"
.SH IMPLEMENTATION
.PP
The
.BR mi_esballoc ()
function is implemented with a rather direct call to
.BR esballoc (9)
and a call to
.BR esbbcall (9)
with the queue pointer,
.IR q ,
upon failure of the call to
.BR esballoc (9)
to immediately allocate a message block.
Because the buffer callback must be cancelled before returning from the
.I STREAMS
close procedure, the buffer callback identifier is saved in the module
private structure.  Because this is automatic,
.BR mi_esballoc ()
can only be called on Streams that have their private data structures
allocated with one of the
.BR mi_open_comm (9)
family of functions.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR esballoc (9),
.BR esbbcall (9),
.BR mi_esbbcall (9),
.BR mi_open_comm (9),
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_esballoc (9)
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_esballoc ()
is
compatible with
.IR MPS \(rg,
.IR AIX \(rg,
.IR MacOT \(rg,
and
.IR Solaris \(rg,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR mi_esballoc ()
is an
.I OpenSS7 Project
specific implementation of an
.IR MPS \(rg-compatible
function and should not be used by portable
.I STREAMS
drivers and modules.
.IP \(em
.BR mi_esballoc ()
is provided for use with SS7 drivers and modules that need some automatic
handling of buffer callbacks for speed and efficiency.
.IP \(em
.BR mi_esballoc ()
does not exist in any other
.IR MPS \(rg
implementation other than
.IR "Linux Fast-STREAMS" .
.IP \(em
.BR mi_esballoc ()
is compatible with
.BR ss7_esballoc (9)
which is now deprecated.
.PP
See
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR suncompat (9),
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
Conforms to
.B OpenSS7
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR mi_esballoc ()
is new for
.BR "@PACKAGE_TITLE@" .
It is largely equivalent to the
.BR ss7_esballoc (9)
SS7 common function that appeared in early releases of the
.BR strss7
package and is also contained in
.BR "@PACKAGE_TITLE@" .
.PP
.BR mi_esballoc ()
first appeared in
.I OpenSS7
release 1.1.1 as a result of an effort to remove the remaining undocumented
SS7 helper functions.  Because
.BR mi_esballoc ()
relies on the set of
.B mi_*
helper functions being used to allocate private structures, the function was
transposed into the
.B mi_*
group of helper functions.
.\"
.\"
.[
$LIST$
.]
.TI
