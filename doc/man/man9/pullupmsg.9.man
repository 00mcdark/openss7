'\" rtp
.\" vim: ft=nroff sw=4 noet nocin nosi com=b\:.\\\" fo+=tcqlorn tw=77
.\" =========================================================================
.\"
.\" @(#) $Id: pullupmsg.9.man,v 1.1.2.1 2009-06-21 10:38:50 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\" Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to copy, distribute and/or modify this manual
.\" under the terms of the GNU Free Documentation License, Version 1.3 or
.\" any later version published by the Free Software Foundation; with no
.\" Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
.\" copy of the license is included in the section entitled "GNU Free
.\" Documentation License".
.\"
.\" Permission to use, copy and distribute this manual without modification,
.\" for any purpose and without fee or royalty is hereby granted, provided
.\" that both the above copyright notice and this permission notice appears
.\" in all copies and that the name of OpenSS7 Corporation not be used in
.\" advertising or publicity pertaning to distribution of this documentation
.\" or its contents without specific, written prior permission.  OpenSS7
.\" Corporation makes no representation about the suitability of this manual
.\" for any purpose.  It is provided "as is" without express or implied
.\" warranty.
.\"
.\" Permission is granted to process this file through groff and print the
.\" results, provided the printed document carries a copying permission
.\" notice identical to this one except for the removal of this paragraph
.\" (this paragraph not being relevant to the printed manual).
.\"
.\" OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS MANUAL
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
.\" PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
.\" DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF
.\" SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS,
.\" TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL OPENSS7 CORPORATION BE
.\" LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY
.\" DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
.\" IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
.\" OUT OF OR IN CONNECTION WITH ANY USE OF THIS DOCUMENT OR THE PERFORMANCE
.\" OR IMPLEMENTATION OF THE CONTENTS THEREOF.
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not have
.\" taken the same level of care in the production of this manual, which is
.\" licensed free of charge, as they might when working professionally.  The
.\" author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by the
.\" source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2009-06-21 10:38:50 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: pullupmsg.9.man,v $
.\" Revision 1.1.2.1  2009-06-21 10:38:50  brian
.\" - added files to new distro
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database openss7.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
search-truncate 40
search-ignore T
.R2
.so openss7.macros
.\"
.\"
.TH PULLUPMSG 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B pullupmsg
\- pull up the bytes in a \fISTREAMS\fP message
.\"
.\"
.SH SYNOPSIS
.PP
.B #include <sys/stream.h>
.HP
.BI "int pullupmsg(mblk_t *" mp ", int " len );
.\"
.\"
.SH ARGUMENTS
.TP
.I mp
the message to pull up.
.PD 0
.TP
.I len
the number of bytes to pull up.
.PD
.\"
.\"
.SH INTERFACE
.PP
.IR STREAMS .
.\"
.\"
.SH DESCRIPTION
.PP
.BR pullupmsg ()
attempts to merge the first
.I len
data bytes of the passed in message pointed to by
.I mp
into a single data block.
.PP
If
.I len
is -1,
.BR pullupmsg ()
attempts to merge all of the leading data blocks of the same type from the passed in message pointed
to by
.I mp
into a single data block.
.PP
If there is nothing to alter (that is, the initial data block contains greater than or equal to
.I len
bytes, or there is only one data block in the message),
.BR pullupmsg ()
returns success without altering the message.  (This is also true in the case where the passed in
length,
.IR len ,
is zero (0).)
.PP
If the number of bytes in the initial blocks of the passed in message pointed to by
.I mp
is less than the number of bytes specified in
.IR len ,
.BR pullupmsg ()
will fail.
.PP
.BR pullupmsg ()
does not allocate a new message block, but attaches the altered data block to the existing initial
message block.
.BR pullupmsg ()
does not deallocate the message blocks or data blocks that were absorbed into the new data block:
instead,
.BR pullupmsg ()
sets the
.I b_wptr
to the
.I b_rptr
in the message blocks of all absorbed data blocks.
.\"
.\"
.SH USAGE
.PP
.BR pullupmsg ()
is typically used where it is necessary for the first number of bytes in a
.I STREAMS
message be contiguous to meet the needs of the routines processing the bytes contained in the
message.  In this case,
.BR pullupmsg ()
is called before processing the bytes.
.PP
The primary difference between
.BR pullupmsg ()
and
.BR msgpullup (9)
is that
.BR pullupmsg ()
reuses the message blocks and data blocks where possible,
.BR msgpullup (9)
always copies.  This is similar to the differences between
.BR dupmsg (9)
and
.BR copymsg (9)
in that
.BR pullupmsg ()
is more efficient under many circumstances.  Nevertheless,
.BR pullupmsg ()
can be problematic in a multiprocessor (MP) environment in that it may be difficult to ensure that
the caller has exclusive access to the passed in message.  Because
.BR msgpullup (9)
treats the passed in message as read-only, there are fewer difficulties on MP architectures.  This
is probably why
.BR msgpullup (9)
was originally added to
.IR "SVR 4.0 MP STREAMS" .
.PP
Perhaps it is because
.BR pullupmsg ()
has the notion of architectural alignment, whereas
.BR msgpullup (9)
does not.
.\"
.\"
.SH RETURN
.PP
Upon success,
.BR pullupmsg ()
returns true (1), and the message pointed to by
.I mp
is altered.
Upon failure,
.BR pullupmsg ()
returns false (0), and the passed in message is unaltered.
.\"
.\"
.SH ERRORS
.PP
.BR pullupmsg ()
fails and returns false (0) when the number bytes in the initial data blocks of the same type in the
passed in message pointed to by
.I mp
is less than the number of bytes specified in
.IR len ;
or, when the passed in message pointer,
.IR mp ,
is
.BR NULL ;
when the passed in length,
.IR len ,
is less than minus one; or, when allocation of the necessary blocks fails.
.\"
.\"
.SH CONTEXT
.PP
.BR pullupmsg ()
can be called from any context, including user context, module procedures, callouts, callbacks, soft
interrupts and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR pullupmsg ()
is MP-safe; however, the caller is responsible for ensuring exclusive access to all components of
the passed in message.
.\"
.\"
.SH NOTICES
.PP
It is not always necessary to allocate a new data block to contain the pulled up bytes: if there is
sufficient room in the initial data block, and the initial data block is properly aligned (it is
aligned to the layer 1 cache line for the architecture), the initial data block can be reused.
.BR pullupmsg ()
checks for this possibility and efficiently reuses the initial data block where possible.
.PP
If the data block is not reused and a new data block is allocated and attached onto the initial
message block, then the existing initial data block is freed.  This has the side effect that any free
routine callback is also executed.  Also, any message blocks that are subsumed into the initial data
block are also freed, possibly executing the free routine callbacks of their associated data blocks
as well.
.PP
Care must be taken with the function because it possibly invalidates all
pointer references to data within the data block.  Any pointers within the
data of the data block will be incorrect if the initial data block is copied
and the message block retained (with
.BR b_rptr " and " b_wptr
adjusted accordingly).
.\"
.\"
.SH IMPLEMENTATION
.PP
Data blocks allocated during the pullup operation are allocated with priority
.BR BPRI_MED .
See
.BR allocb (9)
for more information on block allocation priorities.  Data buffers allocated during the pullup
operation are allocated with flag
.BR KM_NOSLEEP ", " KM_CACHEALIGN " and " KM_DMA .
See
.BR kmem_alloc (9)
for more information on memory allocation flags.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR msgpullup (9).
.\"
.\"
.SH BUGS
.PP
.BR pullupmsg ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR pullupmsg ()
is compatible with
.IR "SVR 4.2 MP DDI/DKI" , 
.[
usldk
.]
and implementations based on
.I SVR 4
.[
svr4dk
.] 
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR AIX \(rg,
.IR HP-UX \(rg,
.IR IRIX \(rg,
.IR OSF/1 \(rg,
.IR Solaris \(rg,
.IR Super-UX \(rg,
.IR UnixWare \(rg,
and
.IR UXP/V \(rg
all document
.BR pullupmsg ().
.[
aixdoc
.]
.[
hpuxdoc
.]
.[
irixspg
.]
.[
osfdoc
.]
.[
soldoc
.]
.[
suxdoc
.]
.[
uw7doc
.]
.[
uxpdoc
.]
Whereas, only
.IR HP-UX \(rg,
.IR IRIX \(rg,
.IR Solaris \(rg,
.IR Super-UX \(rg,
and
.IR UnixWare \(rg,
document
.BR msgpullup (9).
.IR Solaris \(rg
states that
.BR msgpullup (9)
is a \*(lq\)DKI-compliant replacement for the older
.BR pullupmsg ()
routine,\*(rq that is \*(lq\)not included in the DKI and will be removed form the system in a future
release\*(rq and that users \*(lq\)are strongly encouraged to use
.BR msgpullup (9)
instead of
.BR pullupmsg ().\*(rq
.[
soldoc
.]
.IR UnixWare \(rg
documentation indicates that
.IR "SCO OpenServer" \(rg
is stuck with
.BR pullupmsg ().
.[
uw7doc
.]
.IR UnixWare \(rg
documentation
indicates that
.BR pullupmsg ()
was only applicable to
.IR "SVR 4.0" ,
.IR "SVR 4.1 ES" ,
and
.IR "SVR 4.2" .
That is, no multiprocessor (MP) releases support
.BR pullupmsg ().
.IR UnixWare \(rg
documentation also indicates that use of
.BR pullupmsg ()
can panic a multiprocessor (MP)
.IR UnixWare \(rg " 7
system, and yet is suitable for a multiprocessor (MP)
.IR "SCO OpenServer" \(rg
system.
.[
uw7doc
.]
So, although
.BR msgpullup (9)
is recommended by
.IR Solaris \(rg
and
.IR UnixWare \(rg
instead of
.BR pullupmsg (),
.BR pullupmsg ()
is by far the more popular interface and has the widest support.
.IP ""
Portable
.I STREAMS
drivers and modules may use
.BR pullupmsg ()
instead of
.BR msgpullup (9).
.B Linux Fast-STREAMS
supports both in an MP-safe way.
.IP \(em
.IR UnixWare \(rg
indicates that the memory for data buffers returned by both
.BR pullupmsg ()
and
.BR msgpullup (9)
(through
.IR "SVR 4.2 MP DDI/DKI" )
are suitable for worst-case DMA and are physically contiguous.
.[
uw7doc
.]
.B Linux Fast-STREAMS
also exhibits this behaviour.  Physical contiguous data buffers, aligned on a layer 1 cache boundary
and suitable for worst-case DMA are allocated by
.BR pullupmsg ()
but not
.BR msgpullup (9).
If no data buffer is allocated, the characteristics of the existing data buffer prevail.  If
worst-case DMA suitable memory is necessary, it must be allocated as such in the first place.  You
cannot use
.BR pullupmsg ()
to change the character of the data buffer.
.IP ""
Portable
.I STREAMS
drivers and modules will not make any assumptions about the physical contiguity or suitability for
worst-case DMA of data buffers allocated via
.BR msgpullup (9).
.IP \(em
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
.IR "SVR 4.2 MP DDI/DKI" .
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
.BR pullupmsg ()
appears as part of
.IR "SVR 4.0 STREAMS" .
.[
svr4spg
.]
.PP
.BR pullupmsg ()
first appeared in
.IR "SVR 3" .
.[
svr3spg
.]
.\"
.\"
.[
$LIST$
.]
.TI
