@c -*- texinfo -*- vim: ft=texinfo
@c =========================================================================
@c
@c @(#) $Id: todo.texi,v 0.9.2.9 2008-04-11 16:58:13 brian Exp $
@c
@c =========================================================================
@c
@c Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
@c
@c All Rights Reserved.
@c
@c Permission is granted to make and distribute verbatim copies of this
@c manual provided the copyright notice and this permission notice are
@c preserved on all copies.
@c
@c Permission is granted to copy and distribute modified versions of this
@c manual under the conditions for verbatim copying, provided that the
@c entire resulting derived work is distributed under the terms of a
@c permission notice identical to this one.
@c 
@c Since the Linux kernel and libraries are constantly changing, this
@c manual page may be incorrect or out-of-date.  The author(s) assume no
@c responsibility for errors or omissions, or for damages resulting from
@c the use of the information contained herein.  The author(s) may not
@c have taken the same level of care in the production of this manual,
@c which is licensed free of charge, as they might when working
@c professionally.
@c 
@c Formatted or processed versions of this manual, if unaccompanied by
@c the source, must acknowledge the copyright and authors of this work.
@c
@c -------------------------------------------------------------------------
@c
@c U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
@c on behalf of the U.S. Government ("Government"), the following
@c provisions apply to you.  If the Software is supplied by the Department
@c of Defense ("DoD"), it is classified as "Commercial Computer Software"
@c under paragraph 252.227-7014 of the DoD Supplement to the Federal
@c Acquisition Regulations ("DFARS") (or any successor regulations) and the
@c Government is acquiring only the license rights granted herein (the
@c license rights customarily provided to non-Government users).  If the
@c Software is supplied to any unit or agency of the Government other than
@c DoD, it is classified as "Restricted Computer Software" and the
@c Government's rights in the Software are defined in paragraph 52.227-19
@c of the Federal Acquisition Regulations ("FAR") (or any successor
@c regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
@c NASA Supplement to the FAR (or any successor regulations).
@c
@c =========================================================================
@c 
@c Commercial licensing and support of this software is available from
@c OpenSS7 Corporation at a fee.  See http://www.openss7.com/
@c 
@c =========================================================================
@c
@c Last Modified $Date: 2008-04-11 16:58:13 $ by $Author: brian $
@c
@c =========================================================================

@subsubheading Current Plan

The OpenSS7 master package is a mature collection of all of the OpenSS7 STREAMS and protocol modules
that builds all packages on a wide range of supported Linux distributions and kernels.  The master
package is a good way to build and validate all packages against a given distribution.

Therefore, the current plan for the OpenSS7 Master Package is largely a maintenance plan.  The
OpenSS7 Project intends to release regularly new versions of the Master Package that build and
validate against upcoming releases of the supported Linux Distributions available from major
distributors and upcoming releases of the Linux kernel, both mainline and as patched by major
distributions.  This release schedule is approximately every 3 to 6 months.  More recent corrections
and support for new distributions and kernels can be obtained by sponsoring the OpenSS7 Project and
obtaining access to the live CVS repository (also available as a git repository).

Two significant plans for the master package include providing cross-compiling support for more
cross-platform development distributions, such as the Denx ELDK.  Also, support for real-time
distributions such as Montavista Linux and upcoming RT releases of SuSE and RedHat are within the
scope of the development plan.

No additional subpackages are currently planned although development within the existing subpackages
are planned.  See the TODO files in the subpackage for a current development plan for a specific
subpackage.

@subsubheading Things to Do

@itemize @minus

@item Packaging.

Get master build package working better.  Currently the master build package does not build a master
tarball or RPM distribution, which would be nice, only individual RPMs for subpackages.

@item Cross-testing framework.

We have nice autotest test suites that are fine for native builds, but for cross-compile builds, it
would also be nice to cross-test.  We can accomplish this nicely within the autoconf framework using
DejaGNU.  DejaGNU configured under the LiS, but we need a more general autoconf .m4 fragement check
for the existence of DejaGNU, and automake and DejaGNU expect wrappers for the existing test
programs (and integration into the make check-DEJAGNU target).  Then we could cross-build the
package and then execute the test scripts on the result on a remote board using DEJAGNU.

@item Distributed testing framework.

Because these are mostly communications protocols implemented using STREAMS, it is important to be
able to do consistent distributed testing and validation of the protocol implementations.  We can
perform much validation using Ferry-Clip approaches (linking or pushing STREAMS-based pipes beneath
drivers or modules), however, acceptance and performance testing would benefit from a distributed
framework.  Perhaps the most direct yet general approach to this is TETware from OpenGroup and is
used for POSIX (and XNS 5.2, by the way) test suites from OpenGroup.  Although netperf incorporates
its own client-server subsystem, TETware provides these mechanisms separately.  TETware also
provides mechanisms for test case synchronization points between distributed systems that makes
distributed conformance test cases quite possible.  Note that TETware does not really require any
external tools but does require network access and installation on the target systems (unlike
DejaGNU that can execute test cases over a serial port if necessary).

@item Documentation generation.

I have all these @samp{/**} comments that use either kerneldoc or doxygen format sprinkled
throughout the code.  I would like to get doxygen running, or kerneldoc, or write a script of my
own.  This documentation would be useful for developers and troubleshooters, particularly if the
code was included with the documentation.  Doxygen does this nicely, but only in html, but does not
generate manual pages or other things very nicely.  Well, I have to do something with that.  A start
would be just providing the autoconf .m4 and automake .am fragments necessary to generate doxygen or
kerneldoc documentation.

@emph{*done*} (for doxygen)

I added .m4 and .am files to search out doxygen source files.  It looks for source files in the
package with the string 'doxygen(1)' in them.  What I really put in there was

@smallexample
/* This file can be processed with doxygen(1). */
@end smallexample

Then html documentation is automatically generated in the doc/html or html directory.  I still need
to do the same for kerneldoc.

@item Dynamic configuration.

Automake files (Makefile.am) are too static.  The strbcm package needs the list of sources and
objects to be rather dynamic.  It would be nice to convert all packages to the same approach.  We
could perhaps use strconf-sh to generate Makefile.in fragments at configuration time and then
include them in a far more general main Makefile.am file.

@item Merge sub-packages.

I really want to put all these packages back together, it is too time consuming maintaining the
various administrative files for each of seven or so packages.  Once some more testing has been done
on Linux Fast-STREAMS, I will drop LiS altogether and wrap the following packages together:

@multitable @columnfractions .05 .95
@item @tab @bullet{} streams-0.7a.5
@item @tab @bullet{} strcompat-0.9.2.4
@item @tab @bullet{} strutil-0.9.2.4
@item @tab @bullet{} strxns-0.9.2.4
@item @tab @bullet{} strxnet-0.9.2.9
@item @tab @bullet{} strinet-0.9.2.4
@item @tab @bullet{} strsctp-0.9.2.6
@item @tab @bullet{} netperf-2.3.2
@end multitable

The result will be just a streams-0.9.4 release.  The only two (STREAMS) packages left will be
strbcm and strss7.

@item STREAMS Terminals

I want to someday write an ldterm for Linux Fast-STREAMS and provide truly STREAMS-based pseudo
terminals.

@emph{*done*}

Added package @command{strtty-0.9.2.1} for @dfn{STREAMS}-based terminals.  Pick up the todo list
there...

@item Bug reporting.

We have these nice autotest test suites that generate a lot of information when a test case fails in
testsuite.log.  What I would like to do is integrate that to our GNATS problem report system so that
testsuite will generate the template for a new problem report upon test case failure.  Unfortunately
autotest does not provide an m4 diversion point at which to hook into the failure branch of the test
script.  Several choices:

@itemize @minus
@item distribute a modified set of autotest macros. uggh.
@item submit a change to autoconf (2.59 is not going away soon).
@end itemize

Perhaps a better alternative is to provide a make target for problem reports that will collect the
testsuite.log and any other pertinent information and generate a problem report template as a mail
text file that can then be edited by the user and mailed to the bugs address.  I like that.  That
will work better.

Better still, it might be a good idea to modify the logging targets to automatically generate a
problem report when they fail.  That would be better.

@emph{*done*}

@item Embedded install.

Provide an option for not installing documentation and development headers, etc.  Just the runtime.
This is mostly for embedded targets.  Make it a @option{--without-devel} configure flag that
defaults to including documentation and development environment.

@emph{*done*}
@end itemize
