@c -*- texinfo -*- vim: ft=texinfo tw=100 nocin nosi noai
@c =========================================================================
@c
@c @(#) doc/manual/install.texi
@c
@c =========================================================================
@c
@c Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
@c Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
@c Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
@c
@c All Rights Reserved.
@c
@c Permission is granted to copy, distribute and/or modify this document
@c under the terms of the GNU Free Documentation License, Version 1.3 or
@c any later version published by the Free Software Foundation; with no
@c Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
@c copy of the license is included in the section entitled "GNU Free
@c Documentation License".
@c
@c Permission to use, copy and distribute this documentation without
@c modification, for any purpose and without fee or royalty is hereby
@c granted, provided that both the above copyright notice and this
@c permission notice appears in all copies and that the name of OpenSS7
@c Corporation not be used in advertising or publicity pertaining to
@c distribution of this documentation or its contents without specific,
@c written prior permission.  OpenSS7 Corporation makes no representation
@c about the suitability of this documentation for any purpose.  It is
@c provided "as is" without express or implied warranty.
@c 
@c Permission is granted to process this file through Tex and print the
@c results, provided the printed document carries copying permission notice
@c identical to this one except for the removal of this paragraph (this
@c paragraph not being relevant to the printed manual).
@c 
@c OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
@c DOCUMENTATION INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY,
@c FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE
@c CONTENTS OF THE DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE
@c IMPLEMENTATION OF SUCH CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY
@c PATENTS, COPYRIGHTS, TRADEMARKS OR OTHER RIGHTS.  IN NO EVENT SHALL
@c OPENSS7 CORPORATION BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL OR
@c CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
@c USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
@c OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH ANY USE OF
@c THIS DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS
@c THEREOF.
@c 
@c Since the Linux kernel and libraries are constantly changing, this
@c manual page may be incorrect or out-of-date.  The author(s) assume no
@c responsibility for errors or omissions, or for damages resulting from
@c the use of the information contained herein.  The author(s) may not have
@c taken the same level of care in the production of this manual, which is
@c licensed free of charge, as they might when working professionally.
@c 
@c Formatted or processed versions of this manual, if unaccompanied by the
@c source, must acknowledge the copyright and authors of this work.
@c
@c -------------------------------------------------------------------------
@c
@c U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
@c on behalf of the U.S. Government ("Government"), the following
@c provisions apply to you.  If the Software is supplied by the Department
@c of Defense ("DoD"), it is classified as "Commercial Computer Software"
@c under paragraph 252.227-7014 of the DoD Supplement to the Federal
@c Acquisition Regulations ("DFARS") (or any successor regulations) and the
@c Government is acquiring only the license rights granted herein (the
@c license rights customarily provided to non-Government users).  If the
@c Software is supplied to any unit or agency of the Government other than
@c DoD, it is classified as "Restricted Computer Software" and the
@c Government's rights in the Software are defined in paragraph 52.227-19
@c of the Federal Acquisition Regulations ("FAR") (or any successor
@c regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
@c NASA Supplement to the FAR (or any successor regulations).
@c
@c =========================================================================
@c 
@c Commercial licensing and support of this software is available from
@c OpenSS7 Corporation at a fee.  See http://www.openss7.com/
@c 
@c =========================================================================
@c

@set pkgtype release
@set PACKAGE_CVSMODULE @value{PACKAGE}
@set package @value{PACKAGE_LCNAME}
@set pkgexample @value{PACKAGE_LCNAME}

@menu
* Repositories::		Repositories for the package
* Downloading::			Downloading the package
* Configuration::		Configuration of the package
* Building::			Building the package
* Installing::			Installing the package
* Removing::			Removing the package
* Loading::			Loading the package
* Maintenance::			Maintaining the package
@end menu

@quotation
@emph{Please note that the installation instructions have changed.  Previously
@cite{@value{PACKAGE_TITLE}} releases consisted of a number of subpackages to a master package: this
is no longer the case.  All @cite{@value{PACKAGE_TITLE}} release software is now contained in a
single package.  This change was necessary to reduce the maintenance burden cause by a growing
number of subpackages.  The net benefit of this changes is that the resulting tarballs, RPMs and
DEBs are far less error prone due to far fewer dependencies between RPMs and DEBs.}
@end quotation

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Repositories
@section Repositories
@cindex repositories

The @value{PACKAGE_TITLE} package release can be accessed from the repositories of
@uref{http://www.openss7.org/, The OpenSS7 Project}.  For @manpage{rpm(8)} based systems, the
package is available in a @manpage{yum(8)} repository based on @file{repo-md} XML and may also be
accessed using @manpage{up2date(8)}, @manpage{zypper(8)} or @manpage{yast(8)}.  For
@manpage{yast(8)} based systems, the package is also available as a @manpage{yast(8)} installation
source.  For @manpage{dpkg(1)} based systems, the package is available in an @manpage{apt(8)}
repository.

By far the easiest (most repeatable and manageable) form for installing and using the
@cite{@value{PACKAGE_TITLE}} packages is to install packages from the @manpage{yum(8)},
@manpage{yast(8)} or @manpage{apt(8)} repositories.  If your distribution does not support
@manpage{yum(8)}, @manpage{zypper(8)}, @manpage{up2date(8)}, @manpage{yast(8)} or @manpage{apt(8)},
then it is still possible to install the RPMs or DEBs from the repositories using @manpage{rpm(8)},
@manpage{dpkg(1)}; or by using @manpage{wget(1)} and then installing them from RPM or DEB using
@manpage{rpm(8)} or @manpage{dpkg(1)} locally.

If binaries are not available for your distribution or specific kernel, but your distribution
supports @manref{rpm(8)} or @manref{dpkg(1)}, the next best method for installing and using
@cite{@value{PACKAGE_TITLE}} packages is to download and rebuild the source RPMs or DSCs from the
repository.  This can also be performed with @manpage{yum(8)}, @manpage{zypper(8)},
@manpage{yast(8)}, @manpage{apt(8)}; or directly using @manpage{wget(1)}, @manpage{rpm(8)} or
@manpage{dpkg(1)}.

If your architecture does not support @manpage{rpm(8)} or @manpage{dpkg(1)} at all, or you have
special needs (such as cross-compiling for embedded targets or for development), the final resort
method is to download, configure, build and install from the tarball.

@menu
* Repository Access::			access to the repositories
* Repositories for YUM::		the @manpage{yum(8)} repository
* Repositories for YAST::		the @manpage{yast(8)} repository
* Repositories for URPMI::		the @manpage{urpmi(8)} repository
* Repositories for APT::		the @manpage{apt(8)} repository
* Repositories for ALPM::		the @manpage{pacman(8)} repository
@end menu

@node Repository Access
@subsection Repository Access
@cindex repository access

Repositories are located under @uref{https://www.openss7.org/repo}.  The path from there to the
specific repository consists of the following components:

@table @var
@item packaging
For @manpage{yum(8)} and @manpage{yast(8)} repositories, this is always @file{rpms}.  For
@manpage{apt(1)} repositories, this is always @file{debs}.  For @manpage{tar(1)} repositories, this
is @file{tarballs}.
@item distro
The identifier of the distrbution.  Example, @file{centos}, @file{debian}.
@item release
The release of the distribution.  Example, @file{5.5}, @file{squeeze}.
@item arch
The architecture of the release.  Example , @file{x86_64}, @file{amd64}.
@end table

So, for example, the @cite{CentOS 5.5} distribution for @file{x86_64} is located under
@uref{https://@-www.@-openss7.@-org/@-repo/@-rpms/@-centos/@-5.5/@-x86_64/}; the @cite{Debian
Squeeze} distribution for @file{i386} is located under
@uref{https://@-www.@-openss7.@-org/@-repo/@-debs/@-debian/@-squeeze/@-i386/}; the tarball
distribution is located under @uref{https://@-www.@-openss7.@-org/@-repo/@-tarballs}.

Note that repository access is restricted.  You may download the @file{repo} packages without
restriction, however, when installing the @file{repo} package you will be prompted for your
registration username and repository password.  The RPMs or DEBs that you will be allowed access to
will depend on your entitlement.

For the following distributions, follow the instructions in the sections referenced:

@multitable @columnfractions 0.3 0.15 0.55
@item CentOS Enterprise Linux 4.92 @tab centos49 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.0  @tab centos5  @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.1  @tab centos51 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.2  @tab centos52 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.3  @tab centos53 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.4  @tab centos54 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.5  @tab centos55 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.6  @tab centos56 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 5.7  @tab centos57 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 6.0  @tab centos60 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 6.1  @tab centos61 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 6.2  @tab centos62 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 6.3  @tab centos63 @tab @ref{Installing with YUM}
@item CentOS Enterprise Linux 6.4  @tab centos64 @tab @ref{Installing with YUM}
@item Debian 4.0 Etch              @tab deb4.0   @tab @ref{Installing with APT}
@item Debian 4.0r1 Etch            @tab deb4.1   @tab @ref{Installing with APT}
@item Debian 4.0r2 Etch            @tab deb4.2   @tab @ref{Installing with APT}
@item Debian 4.0r3 Etch            @tab deb4.3   @tab @ref{Installing with APT}
@item Debian 5.0 Lenny             @tab deb5.0   @tab @ref{Installing with APT}
@item Debian 6.0 Squeeze           @tab deb6.0   @tab @ref{Installing with APT}
@item Debian 7.0 Wheezy            @tab deb7.0   @tab @ref{Installing with APT}
@item Scientific Linux 5.0 @tab sl5  @tab @ref{Installing with YUM}
@item Scientific Linux 5.1 @tab sl51 @tab @ref{Installing with YUM}
@item Scientific Linux 5.2 @tab sl52 @tab @ref{Installing with YUM}
@item Scientific Linux 5.3 @tab sl53 @tab @ref{Installing with YUM}
@item Scientific Linux 5.4 @tab sl54 @tab @ref{Installing with YUM}
@item Scientific Linux 5.5 @tab sl55 @tab @ref{Installing with YUM}
@item Scientific Linux 5.6 @tab sl56 @tab @ref{Installing with YUM}
@item Scientific Linux 5.7 @tab sl57 @tab @ref{Installing with YUM}
@item Scientific Linux 6.0 @tab sl6  @tab @ref{Installing with YUM}
@item Scientific Linux 6.1 @tab sl61 @tab @ref{Installing with YUM}
@item Scientific Linux 6.2 @tab sl61 @tab @ref{Installing with YUM}
@item Scientific Linux 6.3 @tab sl61 @tab @ref{Installing with YUM}
@item Scientific Linux 6.4 @tab sl61 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.0 @tab puias5  @tab @ref{Installing with YUM}
@item PUIAS Linux 5.1 @tab puias51 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.2 @tab puias52 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.3 @tab puias53 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.4 @tab puias54 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.5 @tab puias55 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.6 @tab puias56 @tab @ref{Installing with YUM}
@item PUIAS Linux 5.7 @tab puias57 @tab @ref{Installing with YUM}
@item PUIAS Linux 6.0 @tab puias6  @tab @ref{Installing with YUM}
@item PUIAS Linux 6.1 @tab puias61 @tab @ref{Installing with YUM}
@item PUIAS Linux 6.2 @tab puias61 @tab @ref{Installing with YUM}
@item PUIAS Linux 6.3 @tab puias61 @tab @ref{Installing with YUM}
@item PUIAS Linux 6.4 @tab puias61 @tab @ref{Installing with YUM}
@item Oracle Linux Server 5.3 @tab ols53 @tab @ref{Installing with YUM}
@item Oracle Linux Server 5.4 @tab ols54 @tab @ref{Installing with YUM}
@item Oracle Linux Server 5.5 @tab ols55 @tab @ref{Installing with YUM}
@item Oracle Linux Server 5.6 @tab ols56 @tab @ref{Installing with YUM}
@item Oracle Linux Server 5.7 @tab ols57 @tab @ref{Installing with YUM}
@item Oracle Linux Server 6.0 @tab ols6  @tab @ref{Installing with YUM}
@item Oracle Linux Server 6.1 @tab ols61 @tab @ref{Installing with YUM}
@item Oracle Linux Server 6.2 @tab ols61 @tab @ref{Installing with YUM}
@item Oracle Linux Server 6.3 @tab ols61 @tab @ref{Installing with YUM}
@item Oracle Linux Server 6.4 @tab ols61 @tab @ref{Installing with YUM}
@item Fedora 7 @tab FC7 @tab @ref{Installing with YUM}
@item Fedora 8 @tab FC8 @tab @ref{Installing with YUM}
@item Fedora 9 @tab FC9 @tab @ref{Installing with YUM}
@item Fedora 10 @tab FC10 @tab @ref{Installing with YUM}
@item Fedora 11 @tab FC11 @tab @ref{Installing with YUM}
@item Fedora 12 @tab FC12 @tab @ref{Installing with YUM}
@item Fedora 13 @tab FC13 @tab @ref{Installing with YUM}
@item Fedora 14 @tab FC14 @tab @ref{Installing with YUM}
@item Fedora 15 @tab FC15 @tab @ref{Installing with YUM}
@item Gentoo 2006.1 @tab untested @tab @ref{Installing the Tar Ball}
@item Gentoo 2007.1 @tab untested @tab @ref{Installing the Tar Ball}
@item RedHat Enterprise Linux 4 @tab EL4 @tab @ref{Installing with YUM}
@item RedHat Enterprise Linux 5 @tab EL5 @tab @ref{Installing with YUM}
@item RedHat Enterprise Linux 6 @tab EL6 @tab @ref{Installing with YUM}
@item SuSE 10.0 @tab SuSE10.0 @tab @ref{Installing with ZYPPER}
@item SuSE 10.1 @tab SuSE10.1 @tab @ref{Installing with ZYPPER}
@item SuSE 10.2 @tab SuSE10.2 @tab @ref{Installing with ZYPPER}
@item SuSE 10.3 @tab SuSE10.3 @tab @ref{Installing with ZYPPER}
@item SuSE 11.0 @tab SuSE11.0 @tab @ref{Installing with ZYPPER}
@item SuSE 11.1 @tab SuSE11.1 @tab @ref{Installing with ZYPPER}
@item SuSE 11.2 @tab SuSE11.2 @tab @ref{Installing with ZYPPER}
@item SuSE 11.3 @tab SuSE11.3 @tab @ref{Installing with ZYPPER}
@item SuSE 11.4 @tab SuSE11.4 @tab @ref{Installing with ZYPPER}
@item SLES 9 SP3 @tab SLES9 @tab @ref{Installing with ZYPPER}
@item SLES 10 @tab SLES10 @tab @ref{Installing with ZYPPER}
@item SLES 10 SP1 @tab SLES10 @tab @ref{Installing with ZYPPER}
@item SLES 10 SP2 @tab SLES10 @tab @ref{Installing with ZYPPER}
@item SLES 11 @tab SLES11 @tab @ref{Installing with ZYPPER}
@item SLES 11 SP1 @tab SLES11 @tab @ref{Installing with ZYPPER}
@item Mageia 1 @tab MGA1 @tab @ref{Installing with URPMI}
@item Mandriva 2010.2 @tab MDV2010.2 @tab @ref{Installing with URPMI}
@item Mandriva 2011.0 @tab MDV2011.0 @tab @ref{Installing with URPMI}
@item MES @tab MDVMES5.2 @tab @ref{Installing with URPMI}
@item Ubuntu 8.10 @tab ubu8.10 @tab @ref{Installing with APT}
@item Ubuntu 9.04 @tab ubu9.04 @tab @ref{Installing with APT}
@item Ubuntu 9.10 @tab ubu9.10 @tab @ref{Installing with APT}
@item Ubuntu 10.04 @tab ubu10.04 @tab @ref{Installing with APT}
@item Ubuntu 10.10 @tab ubu10.10 @tab @ref{Installing with APT}
@item Ubuntu 11.04 @tab ubu11.04 @tab @ref{Installing with APT}
@item Ubuntu 11.10 @tab ubu11.10 @tab @ref{Installing with APT}
@item Ubuntu 8.04 Server (LTS) @tab ubu8.04 @tab @ref{Installing with APT}
@item Ubuntu 10.04 Server (LTS) @tab ubu10.04 @tab @ref{Installing with APT}
@item Ubuntu 10.04.1 Server (LTS) @tab ubu10.04 @tab @ref{Installing with APT}
@item Ubuntu 10.04.2 Server (LTS) @tab ubu10.04 @tab @ref{Installing with APT}
@item Slackware 13.1 @tab Slack13.1 @tab @ref{Installing with SLACKPKG}
@item Slackware 13.2 @tab Slack13.2 @tab @ref{Installing with SLACKPKG}
@item Slackware 13.37 @tab Slack13.37 @tab @ref{Installing with SLACKPKG}
@item Salix 13.1 @tab Salix13.1 @tab @ref{Installing with SLAPT}
@item Salix 13.2 @tab Salix13.2 @tab @ref{Installing with SLAPT}
@item Salix 13.37 @tab Salix13.37 @tab @ref{Installing with SLAPT}
@item Archlinux @tab Archlinux @tab @ref{Installing with PACMAN}
@end multitable

@node Repositories for YUM
@subsection Repositories for YUM
@cindex repositories, yum
@cindex yum

The @manpage{yum(8)} repositories are based on @file{repo-md} XML and are provided for all
@cite{RedHat}/@cite{Fedora} architectures @cite{RHEL 4.8} and beyond, or @cite{FC 7} and beyond.
This includes all current (supported) @cite{RHEL} systems.

@menu
* Setting up YUM::			setting up repository access with YUM
* Using the YUM Repository::		using the repository with YUM
* YUM Kernel Updates::			updating kernels with YUM
* Setting up ZYPPER::			setting up repository access with ZYPPER
* Using the ZYPPER Repository::		using the repository with ZYPPER
* ZYPPER Kernel Updates::		updating kernels with ZYPPER
* General REPO-MD Repository::		setting up repository access for general use
@end menu

@node Setting up YUM
@subsubsection Setting up YUM
@cindex yum

To install or upgrade from the @cite{@value{PACKAGE_TITLE}} @file{repo-md} repositories
using @manpage{yum(8)}, you will need to install the @file{@value{PACKAGE}-repo} RPM on
your system, as follows:

@cartouche
@smallexample
$> REPO="https://user@@www.openss7.org/repo/rpms"
$> REPONOARCH="$REPO/fedora/15/x86_64/RPMS/noarch"
$> REPORPM="$REPONOARCH/@value{PACKAGE}-repo.noarch.rpm"
$> sudo rpm -Uhv $REPORPM
$> Username: anonymous
$> Password: *******
@end smallexample
@end cartouche

The example, above, assumes that the distribution is @samp{fedora} and the distribution
release is @samp{15} and the required architecture is @samp{x86_64}.  Another example
would be @file{$REPO/redhat/6.0/x86_64/RPMS/noarch}, for using @manpage{yum(8)} with
RHEL.

To obtain access to the repository at the level to which you are entitled, you will
have to respond to the @samp{Username:} query with the user name with which you are
registered with @uref{https://www.openss7.org/}, and to the @samp{Password:} query with
your repository access password.@footnote{Note that your repository access password is
separate and distinct from your web access or mailing list password.}

You can test whether the @manpage{yum(8)} repository is properly set up by refreshing
the repository and by listing the packages:

@cartouche
@smallexample
$> sudo yum makecache openss7
$> sudo yum search openss7
$> sudo yum info openss7
$> sudo yum info @@openss7
@end smallexample
@end cartouche

Note that only the packages to which you are entitled will be listed.

@node Using the YUM Repository
@subsubsection Using the YUM Repository
@cindex yum

Once the repository is set up, @cite{@value{PACKAGE_TITLE}} includes a number of
virtual package and package group definitions that ease the installation and removal of
kernel modules, libraries and utilities.  Downloading, configuring, building and
installation for a single-kernel distribution is as easy as (one of):

@cartouche
@smallexample
$> sudo yum install @value{PACKAGE}
$> sudo yum install @@@value{PACKAGE}
$> sudo yum groupinstall @value{PACKAGE}
@end smallexample
@end cartouche

Removing the package is as easy as (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}
$> sudo yum remove @@@value{PACKAGE}
$> sudo yum groupremove @value{PACKAGE}
@end smallexample
@end cartouche

To install the development packages for developing STREAMS modules and drivers, or
applications that use the @cite{@value{PACKAGE_TITLE} Protocol Suites}, install the
development packages using (one of):

@cartouche
@smallexample
$> sudo yum install @value{PACKAGE}-devel
$> sudo yum install @@@value{PACKAGE}-devel
$> sudo yum groupinstall @value{PACKAGE}-devel
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI based package manager, such as
@manpage{PackageKit(8)}.

@node YUM Kernel Updates
@subsubsection YUM Kernel Updates
@cindex yum
@cindex kernel updates

The @cite{@value{PACKAGE_TITLE}} @manpage{yum(8)} repository definitions support the
automatic updating of kernel modules when kernels are updated.  When the system is
updated, using @samp{yum update}, openss7 packages that are available for an updated
kernel will be installed automatically.  @cite{@value{PACKAGE_TITLE}} kernel module
packages also support weak updates and when kernels are updated to compatible kernels
(e.g.  for security updates, or normally for any update within an Enterprise
distribution), kernel modules are automatically applied against the updated kernel.

@node Setting up ZYPPER
@subsubsection Setting up ZYPPER
@cindex zypper

To install or upgrade from the @cite{@value{PACKAGE_TITLE}} @file{repo-md} repositories using
@manpage{zypper(8)}, you will need to install the @file{@value{PACKAGE}-repo} RPM on your system, as
follows:

@cartouche
@smallexample
$> REPO="https://user@@www.openss7.org/repo/rpms"
$> REPONOARCH="$REPO/opensuse/11/x86_64/RPMS/noarch"
$> REPORPM="$REPONOARCH/@value{PACKAGE}-repo.noarch.rpm"
$> sudo rpm -Uhv $REPORPM
$> Username: anonymous
$> Password: *******
@end smallexample
@end cartouche

The example assumes that the distribution is @samp{opensuse} and the distribution
release is @samp{11} and the architecture requiresd is @samp{x86_64}.  Another example
would be @file{$REPO/suse/11/x86_64/RPMS/noarch}, for using @manpage{zypper(8)} with
SLES.

To obtain access to the repository at the level to which you are entitled, you will
have to respond to the @samp{Username:} query with the user name with which you are
registered with @uref{https://www.openss7.org/}, and to the @samp{Password:} query with
your repository access password.@footnote{Note that your repository access password is
separate from you web access or mailing list password.}

@manpage{zypper(8)} does not do a very good job of importing GPG signatures.  When
@command{zypper} is reporting that there are no keys for the RPMs being installed, the
key can be imported directly into RPM as follows:

@cartouche
@smallexample
$> sudo rpm --import https://www.openss7.org/pubkey.asc
@end smallexample
@end cartouche

You can test whether the @manpage{zypper(8)} repository is properly set up by refreshing the
repository and by listing the packages:

@cartouche
@smallexample
$> sudo zypper refresh openss7
$> sudo zypper search -t package openss7
$> sudo zypper info -t package openss7
@end smallexample
@end cartouche

@node Using the ZYPPER Repository
@subsubsection Using the ZYPPER Repository
@cindex zypper

Once the repository is set up, @cite{@value{PACKAGE_TITLE}} includes a number of virtual package and
package group (pattern) definitions that ease the installation and removal of kernel modules,
libraries and utilities.  Downloading, configuring, building and installation for a single-kernel
distribution is a easy as (one of):

@cartouche
@smallexample
$> sudo zypper install -t pattern @value{PACKAGE}
$> sudo zypper install @value{PACKAGE}
@end smallexample
@end cartouche

Removing the package is as easy as:@footnote{Note that @manpage{zypper(8)} does not yet support
removal by pattern.}

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}
@end smallexample
@end cartouche

To install the development packages for developing @cite{STREAMS} modules and drivers, or
applications that use the @cite{@value{PACKAGE_TITLE} Protocol Suites}, install the development
packages using (one of):

@cartouche
@smallexample
$> sudo zypper install -t pattern @value{PACKAGE}-devel
$> sudo zypper install @value{PACKAGE}-devel
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI based package manager, such as
@manpage{yast2(8)}.

@node ZYPPER Kernel Updates
@subsubsection ZYPPER Kernel Updates
@cindex zypper
@cindex kernel updates

The @cite{@value{PACKAGE_TITLE}} @manpage{zypper(8)} repository definitions support the automatic
updating of kernel modules when kernels are updated.  When the system is updated, using @samp{zypper
update}, @cite{@value{PACKAGE_TITLE}} packages that are available for an updated kernel will be
installed automatically.  @cite{@value{PACKAGE_TITLE}} kernel module packages also support weak
updates and when kernels are updated to compatible kernels (e.g.  for security updates, or normally
for any update within an Enterprise distribution), kernel modules are automatically applied against
the updated kernel.

@node General REPO-MD Repository
@subsubsection General REPO-MD Repository
@cindex repositories, repo-md

To avoid having to change the @file{openss7.repo} file contents if they should change on the
archive, place the following into the @file{openss7.repo} and place it into your
@file{/etc/yum.repo.d/} directory:

@cartouche
@smallexample
-| include=https://www.openss7.org/repo/rpms/centos/$releasever/$arch/repodata/openss7.repo
@end smallexample
@end cartouche

If you have difficulty downloading the @file{openss7.repo} file, edit the following information into
the file and place it into the @file{/etc/yum.repo.d/openss7.repo} file:

@cartouche
@smallexample
-| [openss7]
-| name = @value{PACKAGE_TITLE} Repository
-| baseurl = https://www.openss7.org/repo/rpms/centos/$releasever/$arch
-| gpgkey = https://www.openss7.org/repo/tarballs/OPENSS7-GPG-KEY
-| repo_gpgcheck = 1
-| gpgcheck = 1
-| enabled = 1
@end smallexample
@end cartouche

Note that it is also possible to point to these repositories as an additional installation source
when installing CentOS, RedHat, Fedora, or others.  You will have an additional @acronym{STREAMS}
category from which to choose installation packages.

The category that is provided is as follows:

@samp{@value{PACKAGE}-components} -- @value{PACKAGE_TITLE} STREAMS and Protocol Suite Components.

The groups (patterns) that are provided in this category are as follows:
@table @asis
@item @samp{@value{PACKAGE}} --- @value{PACKAGE_TITLE} STREAMS and Protocol Suites.  This group
(pattern) installs packages required for the @cite{Linux Fast-STREAMS} and
@cite{@value{PACKAGE_TITLE} Protocol Suites} run-time libraries, commands, utilities, init scripts
and kernel modules.  Also included are section 1, 4, 5 and 8 manual pages for the commands, module
and drivers, configuration file formats and administrative utilities.

Install this group (pattern) if you need the @cite{Linux Fast-STREAMS} and
@cite{@value{PACKAGE_TITLE} Protocol Suties} core run-time.

The mandatory (required) packages in this group (pattern) are
@samp{@value{PACKAGE}},
@samp{@value{PACKAGE}-@-base},
@samp{@value{PACKAGE}-@-lib} and
@samp{@value{PACKAGE}-@-kernel}.
The default (recommended) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-java}.
The optional (suggested) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-devel},
@samp{@value{PACKAGE}-@-devel-@-kernel},
@samp{@value{PACKAGE}-@-doc},
@samp{@value{PACKAGE}-@-javadoc} and
@samp{@value{PACKAGE}-@-source-@-kernel}.

@item @samp{@value{PACKAGE}-java} --- @value{PACKAGE_TITLE} STREAMS and Protocol Suite Java Components.
This group (pattern) installs packages required for the @cite{Linux Fast-STREAMS} and
@cite{@value{PACKAGE_TITLE} JAIN} Java components.

The mandatory (required) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-java}.
The optional (suggested) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-javadoc}.

@item @samp{@value{PACKAGE}-@-devel} --- @value{PACKAGE_TITLE} STREAMS and Protocol Suite Development.

The mandatory (required) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-devel} and
@samp{@value{PACKAGE}-@-devel-@-kernel}.
The optional (suggested) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-doc},
@samp{@value{PACKAGE}-@-javadoc} and
@samp{@value{PACKAGE}-@-source-@-kernel}.

@item @samp{@value{PACKAGE}-doc} --- @value{PACKAGE_TITLE} STREAMS and Protocol Suite Documentation.

The mandatory (required) packages in this group (pattern) are
@samp{@value{PACKAGE}-@-doc} and
@samp{@value{PACKAGE}-@-javadoc}.

@end table

For assistance with specific RPMs, see @ref{Downloading the Binary RPM}.

@node Repositories for YAST
@subsection Repositories for YAST
@cindex repositories, yast
@cindex yast

For distributions that support @cite{YaST}, such as @cite{SUSE Linux Enterprise Server}, and
@cite{OpenSUSE}, @cite{YaST} repositories are built coexistent with @cite{repo-md} repositories.
Setting up the installation source as a @cite{YaST} installation source instead of @cite{repo-md}
can provide the additional features associated with @cite{YaST} install sources.

@menu
* Setting up YAST::			setting up repository access with YAST
@end menu

@node Setting up YAST
@subsubsection Setting up YAST
@cindex setup, yast
@cindex yast

@cartouche
@smallexample
$> REPODIR="https://www.openss7.org/repo/rpms/suse/11/x86_64"
$> sudo zypper addrepo --type yast2 $REPODIR openss7
@end smallexample
@end cartouche

@node Repositories for URPMI
@subsection Repositories for URPMI
@cindex repositories, urpmi
@cindex urpmi

For distributions that support @manpage{urmpi(8)}, such as @cite{Mageia}, @cite{Mandriva} and
@cite{MES}, @manpage{urpmi(8)} repositories are built.  Setting up the installation source as a
@manpage{urpmi(8)} installation source instead of @cite{repo-md} can provide the additional features
associated with @manpage{urpmi(8)} install sources.

@menu
* Setting up URPMI::			setting up repository access with URPMI
* Using the URPMI Repository::		using the repostory with URPMI
* URPMI Kernel Updates::		updating kernels with UPRMI
@end menu

@node Setting up URPMI
@subsubsection Setting up URPMI
@cindex setup, urpmi
@cindex urpmi

To install or upgrade from the @cite{@value{PACKAGE_TITLE}} @file{urpmi} repositories using
@manpage{urpmi(8)}, you will need to install the @file{@value{PACKAGE}-repo} RPM on your system as
follows:

@cartouche
@smallexample
$> REPO="https://user@@www.openss7.org/repo/repms"
$> REPONOARCH="$REPO/mageia/1/x86_64/RPMS/noarch"
$> REPORPM="$REPONOARCH/@value{PACKAGE}-repo.noarch.rpm"
$> sudo rpm -Uhv $REPORPM
$> Username: anonymous
$> Password: *******
@end smallexample
@end cartouche

The example, above, assumes that the distribution is @samp{mageia} and the distribution release is
@samp{1} and the required architecture is @samp{x86_64}.  Another example would be
@file{$REPO/mes/5.2/x86_64/RPMS/noarch}, for using @manpage{urpmi(8)} with MES (Mandriva Enterprise
Server).

To obtain access to the respository at the level to which you are entitled, you will have to respond
to the @samp{Username:} query with the user name with which you are registered with
@uref{http://www.openss7.org/}, and to the @samp{Password:} query with your repository access
password.@footnote{Note that your repository access password is separate and distinct from your web
access or mailing list password.}

You can test whether the @manpage{urpmi(8)} repository is properly set up by refreshing the
repository with @manpage{urpmi.update(8)} and by listing the packages with @manpage{urpmq(8)}:

@cartouche
@smallexample
$> sudo urpmi.update
$> sudo urpmq -a | grep openss7
$> sudo urpmq -ivl openss7
@end smallexample
@end cartouche

Note that only the packages to which you are entitled will be listed.

@node Using the URPMI Repository
@subsubsection Using the URPMI Repository
@cindex urpmi

Once the repository is set up, @cite{@value{PACKAGE_TITLE}} include a number of virtual package and
package group definitions that ease the installation and removal of kernel modules, libriaries and
utilities.  Downloading, configuring, building and installation for a single-kernel distribution is
as easy as (one of):

@cartouche
@smallexample
$> sudo urpmi @value{PACKAGE}
@end smallexample
@end cartouche

Removing the package is as easy as (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}
@end smallexample
@end cartouche

To install the development packages for developing STREAMS modules and drivers, or applications that
use the @cite{@value{PACKAGE_TITLE} Protocol Suites}, install the development packages using (one
of):

@cartouche
@smallexample
$> sudo urpmi @value{PACKAGE}-devel
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI based package manager, such as @manpage{rpmdrake(8)}.

@node URPMI Kernel Updates
@subsubsection URPMI Kernel Updates
@cindex urpmi

The @cite{@value{PACKAGE_TITLE}} @manpage{urpmi(8)} repository definitions support the automatic
updating of kernel modules when kernels are updated.  When the system is updated, using
@samp{urpmi}, openss7 packages that are available for an updated kernel will be installed
automatically.  @cite{@value{PACKAGE_TITLE}} kernel module packages also support weak updates and
when kernels are updated to compatible kernels (e.g.  for security updates, or normally for any
update within an Enterprise distribution), kernel modules are automatically applied against the
updated kernel.

@node Repositories for APT
@subsection Repositories for APT
@cindex repositories, apt
@cindex apt

For assistance with specific DEBs, see @ref{Downloading the Debian DEB}.

@menu
* Setting up APT::			setting up repository access with APT
* Using the APT Repository::		using the repository with APT
* APT Kernel Updates::			updating kernels with APT
* Setting up APT-RPM::			setting up repository access with APT-RPM
* Using the APT-RPM Repository::	using the repository with APT-RPM
* APT-RPM Kernel Updates::		updating kernels with APT-RPM
@end menu

@node Setting up APT
@subsubsection Setting up APT
@cindex apt

To install or upgrade from the @cite{@value{PACKAGE_TITLE}} @file{apt} repositories using
@manpage{apt(8)}, you will need to install the @file{@value{PACKAGE}-repo} DEB on your system, as
follows:

@cartouche
@smallexample
$> REPO="https://user@@www.openss7.org/repo/debs"
$> REPONOARCH="$REPO/debian/squeeze/amd64"
$> REPODEB="$REPONOARCH/@value{PACKAGE}-repo_all.deb"
$> wget $REPODEB
$> dpkg -i -D010077 @value{PACKAGE}-repo_all.deb
$> Username: anonymous
$> Password: ********
@end smallexample
@end cartouche

The example, above, assumes that the distribution is @samp{debian} and the distribution release is
@samp{squeeze} and the required architecture is @samp{amd64}.@footnote{Note that this is the
@samp{$(uname -m)} style architecture and not the Debian sytle architecture.}  Another example would
be @file{$REPO/ubuntu/10.04/amd64}, for using @manpage{apt(8)} with Ubuntu.

To obtain access to the repository at the level to which you are entitled, you will have to respond
to the @samp{Username:} query with the user name with which you are registered with
@uref{https://www.openss7.org/}, and to the @samp{Password:} query with your repository access
password.@footnote{Note that your repository access password is separate and distinct from your web
access password.}

@manpage{apt(8)} does not do a very good job of importing GPG signatures.  When @command{apt-get} is
reporting that there are no keys for the DEBs being installed, the key can be imported directly into
APT as follows:

@cartouche
@smallexample
$> wget https://www.openss7.org/pubkey.asc
$> sudo apt-key add pubkey.asc
@end smallexample
@end cartouche

You can test whether the @manpage{apt(8)} repository is properly set up by refreshing the repository
and by listing the packages.

@cartouche
@smallexample
$> sudo apt-get update
$> aptitude search openss7
@end smallexample
@end cartouche

@node Using the APT Repository
@subsubsection Using the APT Repository
@cindex apt

Once the repository is set up, @cite{@value{PACKAGE_TITLE}} includes a number of virtual packages
and packages recommendations that ease the installation and removal of kernel modules, libraries and
utilities.  Downloading, configuring, building and installation for a single-kernel distribution is
as easy as:@footnote{Note that using @manpage{aptitude(8)} in this way relies upon recommendations
being treated as strong dependencies.  This is normally the case for default @manpage{apt(8)}
configuration files (particularly when @command{synaptic} is installed); however, it is not
necessarily the case.  If you are not getting recommended packages being automatically installed,
add @option{--with-recommends} to the command line.}

@cartouche
@smallexample
$> sudo aptitude install @value{PACKAGE}
@end smallexample
@end cartouche

Removing the package is as easy as:

@cartouche
@smallexample
$> sudo aptitude remove @value{PACKAGE}
$> sudo aptitude purge @value{PACKAGE}
@end smallexample
@end cartouche

To install the development packages for developing @cite{STREAMS} modules and drivers, or
applications that use the @cite{@value{PACKAGE_TITLE} Protocol Suites}, install the development
packages using:

@cartouche
@smallexample
$> sudo aptitude install @value{PACKAGE}-devel
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI based package manager, such as
@manpage{synaptic(8)}.

@node APT Kernel Updates
@subsubsection APT Kernel Updates
@cindex apt
@cindex kernel updates

The @cite{@value{PACKAGE_TITLE}} @manpage{apt(8)} repository definitions support the automatic
updating of kernel modules when kernels are updated.  When the system is updated, using
@samp{apt-get upgrade}, @cite{@value{PACKAGE_TITLE}} packages that are available for an updated
kernel will be installed automatically.

@cite{@value{PACKAGE_TITLE}} kernel module packages also support weak updates and when kernels are
updated to compatible kernels (e.g. for security upgrades, or normally for any updated within an
Enterprise (LTS) distribution), kernel modules are automatically applied against the updated kernel.

@node Setting up APT-RPM
@subsubsection Setting up APT-RPM
@cindex apt-rpm

To install or upgrade from the @cite{@value{PACKAGE_TITLE}} @file{apt-rpm} repositories using
@manpage{apt(8)}, you will need to install the @file{@value{PACKAGE}-repo} RPM on your system, as
follows:

@cartouche
@smallexample
$> REPO="https://user@@www.openss7.org/repo/rpms"
$> REPONOARCH="$REPO/mageia/1/x86_64/RPMS/noarch"
$> REPORPM="$REPONOARCH/@value{PACKAGE}-repo.noarch.rpm"
$> wget $REPORPM
$> sudo rpm -Uhv $REPORPM
$> Username: anonymous
$> Password: *******
@end smallexample
@end cartouche

The example, above, assumes that the distribution is @samp{mageia} and the distribution release is
@samp{1} and the required architecture is @samp{x86_64}.  Another example would be
@file{$REPO/mes/5.2/x86_64/RPMS/noarch}, for using @manpage{apt(8)} with MES (Mandriva Enterprise
Server).

To obtain access to the repository at the level to which you are entitled, you will have to respond
to the @samp{Username:} query with the user name with which you are registered with
@uref{https://www.openss7.org/}, and to the @samp{Password:} query with your repository access
password.@footnote{Note that your repository access password is separate and distinct from your web
access password.}

@manpage{apt(8)} does not do a very good job of importing GPG signatures.  When @command{apt-get} is
reporting that there are no keys for the DEBs being installed, the key can be imported directly into
APT as follows:

@cartouche
@smallexample
$> wget https://www.openss7.org/pubkey.asc
$> sudo apt-key add pubkey.asc
@end smallexample
@end cartouche

You can test whether the @manpage{apt(8)} repository is properly set up by refreshing the repository
and by listing the packages.

@cartouche
@smallexample
$> sudo apt-get update
$> sudo apt-cache gencaches
$> apt-cache search openss7
@end smallexample
@end cartouche

@node Using the APT-RPM Repository
@subsubsection Using the APT-RPM Repository
@cindex apt-rpm

Once the repository is set up, @cite{@value{PACKAGE_TITLE}} includes a number of virtual packages
and packages recommendations that ease the installation and removal of kernel modules, libraries and
utilities.  Downloading, configuring, building and installation for a single-kernel distribution is
as easy as:@footnote{Note that using @manpage{apt-get(8)} in this way relies upon recommendations
being treated as strong dependencies.  This is normally the case for default @manpage{apt(8)}
configuration files (particularly when @command{synaptic} is installed); however, it is not
necessarily the case.  If you are not getting recommended packages being automatically installed,
add @option{--install-recommends} to the command line.}

@cartouche
@smallexample
$> sudo apt-get install @value{PACKAGE}
@end smallexample
@end cartouche

Removing the package is as easy as:

@cartouche
@smallexample
$> sudo apt-get remove @value{PACKAGE}
$> sudo apt-get purge @value{PACKAGE}
@end smallexample
@end cartouche

To install the development packages for developing @cite{STREAMS} modules and drivers, or
applications that use the @cite{@value{PACKAGE_TITLE} Protocol Suites}, install the development
packages using:

@cartouche
@smallexample
$> sudo apt-get install @value{PACKAGE}-devel
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI based package manager, such as
@manpage{synaptic(8)}.

@node APT-RPM Kernel Updates
@subsubsection APT-RPM Kernel Updates
@cindex apt-rpm
@cindex kernel updates

The @cite{@value{PACKAGE_TITLE}} @manpage{apt(8)} repository definitions support the automatic
updating of kernel modules when kernels are updated.  When the system is updated, using
@samp{apt-get upgrade}, @cite{@value{PACKAGE_TITLE}} packages that are available for an updated
kernel will be installed automatically.

@cite{@value{PACKAGE_TITLE}} kernel module packages also support weak updates and when kernels are
updated to compatible kernels (e.g. for security upgrades, or normally for any updated within an
Enterprise (LTS) distribution), kernel modules are automatically applied against the updated kernel.

@node Repositories for ALPM
@subsection Repositories for ALPM
@cindex repositories, ALPM
@cindex pacman

@menu
* Setting up ALPM::			setting up repository access with ALPM
* Using the ALPM Repository::		using the repository with ALPM
* ALPM Kernel Updates::			updating kernels with ALPM
@end menu

@node Setting up ALPM
@subsubsection Setting up ALPM
@cindex ALPM

@node Using the ALPM Repository
@subsubsection Using the ALPM Repository
@cindex pacman

@node ALPM Kernel Updates
@subsubsection ALPM Kernel Updates
@cindex pacman
@cindex kernel updates


@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Downloading
@section Downloading
@cindex downloading

The @cite{@value{PACKAGE_TITLE}} package releases can be downloaded from the downloads page of
@uref{http://www.openss7.org/download.html, The OpenSS7 Project}.  The package is available as a
binary RPM (for popular architectures) a source RPM, Debian binary DEB and source DSC, or as a tar
ball.  If you are using a browsable viewer, you can obtain the @cite{@value{PACKAGE_TITLE}} release
of @command{@value{PACKAGE_NAME}} from the links in the sections that follow.

By far the easiest (most repeatable and manageable) form for installing and using the
@cite{@value{PACKAGE_TITLE}} packages is to download and install the repository definition and use
the distribution's native packaging tools.  Another (still repeatable and manageable) form for
installing and using @cite{@value{PACKAGE_TITLE}} packages is to download and install individual
packages from binary RPM or DEB.

If binary RPMs or DEBs are not available for your distribution, but your distribution supports
@manref{rpm(8)} or @manref{dpkg(1)}, the next best method for installing and using
@cite{@value{PACKAGE_TITLE}} packages is to download and rebuild the source RPMs or
DSCs.@footnote{Note, however, that @cite{OpenSS7 Corporation} restricts access to source RPMs and
DSCs.}

If your architecture does not support @manpage{rpm(8)} or @manpage{dpkg(1)} at all, or you have
special needs (such as cross-compiling for embedded targets or for development), the final resort
method is to download, configure, build and install from tarball.  In this later case, the easiest
way to build and install @cite{@value{PACKAGE_TITLE}} packages is from tarball.@footnote{Note,
however, that @cite{OpenSS7 Corporation} restricts access to tarballs.}

@menu
* Downloading with YUM::		the easiest approach for YUM based systems
* Downloading with ZYPPER::		the easiest approach for ZYPPER based systems
* Downloading with URPMI::		the easiest approach for URPMI based systems
* Downloading with APT::		the easiest approach for APT based systems
* Downloading the Binary RPM::		the easiest approach
* Downloading the Debian DEB::		the easiest approach for Debian
* Downloading the Source RPM::		the next best approach
* Downloading the Debian DSC::		the next best approach for Debian
* Downloading the Tar Ball::		last resort
* Downloading from CVS::		mid-release download
@end menu

@c ----------------------------------------------------------------------------

@node Downloading with YUM
@subsection Downloading with YUM
@cindex downloading, yum
@cindex yum

Once the repository definitions have been established, downloading RPMs with @manref{yum(8)} is
automatic.  See @refman{Setting up YUM}, for instructions on downloading the repository RPM and
using it to set up for @manref{yum(8)}, and @refman{Installing with YUM}, for instructions on
installing subsequent packages.  See @manref{yum(8)} for more information on downloading without
installing.

@c ----------------------------------------------------------------------------

@node Downloading with ZYPPER
@subsection Downloading with ZYPPER
@cindex downloading, zypper
@cindex zypper

Once the repository definitions have been established, downloading RPMs with @manref{zypper(8)} is
automatic.  See @refman{Setting up ZYPPER}, for instructions on downloading the repository RPM and
using it to set up for @manref{zypper(8)}, and @refman{Installing with ZYPPER}, for instructions on
installing subsequent packages.  See @manref{zypper(8)} for more information on downloading without
installing.

@c ----------------------------------------------------------------------------

@node Downloading with URPMI
@subsection Downloading with URPMI
@cindex downloading, urpmi
@cindex urpmi

Once the repository definitions have been established, downloading RPMs with @manref{urpmi(8)} is
automatic.  See @refman{Setting up URPMI}, for instructions on downloading the repository RPM and
using it to set up for @manref{urpmi(8)}, and @refman{Installing with URPMI}, for instructions on
installing subsequent packages.  See @manref{urpmi(8)} for more information on downloading without
installing.

@c ----------------------------------------------------------------------------

@node Downloading with APT
@subsection Downloading with APT
@cindex downloading, apt
@cindex apt

Once the repository definitions have been established, downloading DEBs with @manref{apt(8)} is
automatic.  See @refman{Setting up APT}, for instructions on downloading the repository DEB and
using it to set up for @manref{apt(8)}.  See @refman{Setting up APT-RPM}, for instructions on
downloading the repository RPM and using it to set up for @manref{apt(8)}.  See
@refman{Installing with APT},
for instructions on installing subsequent packages.  See @manref{apt(8)} for more
information on downloading without installing.

@c ----------------------------------------------------------------------------

@node Downloading the Binary RPM
@subsection Downloading the Binary RPM
@cindex downloading, binary rpms
@cindex binary rpms

To install from binary RPM, you will need several of the RPM for a complete installation.  Binary
RPM fall into several categories.  To download and install a complete package requires the
appropriate RPM from each of the several categories below, as applicable.  Some release packages do
not provide RPMs in each of the several categories.

To install from Binary RPM, you will need all of the following kernel
independent packages for your architecture, and one of the kernel-dependent
packages from the next section.

@subsubheading Independent RPM
Independent RPM are
not dependent on the Linux kernel version.
For example, the
source package
@samp{@value{PACKAGE}-@-source-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm},
is not dependent on
kernel.

@noindent
All of the following kernel independent RPM are required for your architecture.
Binary RPMs listed here are for example only: additional binary RPMs are
available from the downloads site.  If your architecture is not available, you
can build binary RPM from the source RPM (@pxrefman{Building from the Source
RPM}).

@subsubheading Architecture Independent

Architecture independent RPMs are not dependent upon the processor architecture.  That is, they are
@samp{noarch} RPMs.  The architecture independent RPMs in the @cite{@value{PACKAGE_TITLE}}
components are as follows:

@table @file

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/noarch/@value{PACKAGE}-repo-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-repo-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}

This packages can be used to install or remove the repository source definitions for all
@value{PACKAGE_TITLE} release packages.  On systems that support repository access, this package is
required by the other packages.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/noarch/@value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}

This package can be used to install or remove the entire @value{PACKAGE_TITLE} package.  When
installing, kernel modules will be installed automatically for the highest version kernel on your
system.  When removing, all corresponding kernel modules will also be removed.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/noarch/@value{PACKAGE}-base-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-base-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}

The @file{@value{PACKAGE}-base} binary package contains the init scripts, test scripts, maintenance
scripts and base system configuration files necessary for the operation of Linux Fast-STREAMS and
the protocol suites contained in the @value{PACKAGE_TITLE} package.  It contains user and
administrative documentation in @file{.info}, @file{.pdf} and @file{.html} formats as well as
sections 1, 4, 5 and 8 of the manual pages.  This binary package is required for any installation of
the @value{PACKAGE_TITLE} package and is not architecture specific (@samp{noarch}).

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/noarch/@value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-doc-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}

The @file{@value{PACKAGE}-doc} binary package contains the documentation used in the development of
applications and programs that use the package.  It contains developer and programmer manuals in
@file{.info}, @file{.pdf} and @file{.html} formats as well as sections 2, 3, 7 and 9 of the manual
pages and Javadoc HTML documentation.  Install this binary package if you are interested in
developing Linux Fast-STREAMS drivers or modules or application programs for the protocol suites
contained in the @value{PACKAGE_TITLE} package.  This package is massive and is not normally
necessary except on a development system.  The package is not architecture specific (@samp{noarch}).

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/noarch/@value{PACKAGE}-javadoc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-javadoc-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}

The @file{@value{PACKAGE}-javadoc} binary package contains Javadoc documentation for the
@value{PACKAGE_TITLE} package.  Install this binary package if you are interested in developing JAIN
applications or resource adaptors.  This package is not normally required on other than a
development system.  The package is not architecture specific (@samp{noarch}).

@ignore
@item @uref{https://www.openss7.org/repo/rpms/RPMS/noarch/@value{PACKAGE}-dev-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-dev-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}-@-dev} package contains the device definitions necessary
to run applications programs developed for @value{PACKAGE_TITLE}.@footnote{Not all distributions
support the @samp{%dev} RPM macro: a case in point is the SuSE 8.0 distribution which uses an older
version of @manpage{rpm(8)}.  Distributions that do not support the @samp{%dev} macro will build
devices as a @samp{%post} operation.  Note also that not all release packages contain devices.  Only
packages that provide @acronym{STREAMS} character device drivers need devices, and then only when
the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{https://www.openss7.org/repo/rpms/RPMS/noarch/@value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-doc-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}-@-doc} package contains this manual in plain text, postscript, @file{pdf}
and @file{html} forms, along with the meta-information from the @file{@value{PACKAGE_NAME}} package.
It also contains all of the manual pages necessary for developing @value{PACKAGE_TITLE} applications
and @value{PACKAGE_TITLE} @acronym{STREAMS} modules or drivers.

@item @uref{https://www.openss7.org/repo/rpms/RPMS/noarch/@value{PACKAGE}-init-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-init-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}-@-init} package contains the @command{init} scripts and provides
the @samp{postinst} scripts necessary to create kernel module preloads and modules
definitions for all kernel module @samp{core} subpackages.

@item @uref{https://www.openss7.org/repo/rpms/RPMS/noarch/@value{PACKAGE}-source-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-source-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}-@-source} package contains the source code necessary for building the
@value{PACKAGE_TITLE} release.  It includes the @manpage{autoconf(1)} configuration utilities
necessary to create and distribute tarballs, @file{rpm} and @file{deb}/@file{dsc}.

@item @uref{https://www.openss7.org/repo/rpms/RPMS/noarch/@value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}} package contains this manual in plain texit, postscript, @samp{pdf}, and
@samp{html} forms, along with the meta-information from the package.  It also contains the @file{init}
scripts and provides @command{postinst} scriptlets necessary to create kernel module preloads and
modules definintions for all kernel module subpackages.  It also includes @acronym{SNMP MIB} files and
@acronym{TMN GDMO} files.
@end ignore
@end table

@subsubheading Architecture Dependent

Architecture dependent RPMs are dependent upon the processor architecture (but not on the specific
kernel version).  That is, they are @samp{@value{_target_cpu}} RPMs.  The architecture dependent
RPMs in the @cite{@value{PACKAGE_TITLE}} components are as follows:

@table @file

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-lib-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-lib-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-lib} binary package contains the run-time (shared object) libraries
necessary to run applications programs and utilities developed for @cite{Linux Fast-STREAMS} and the
protocol suites contained in the @cite{@value{PACKAGE_TITLE}} package.  Also included are the
libtool @file{.la} files describing the shared object libraries.  The binary package also provides
administrative and configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Note that these utilities are needed for running the validation test
suites contained in the @file{@value{PACKAGE}-base} binary package.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-java-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-java-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-java} binary package contains JAIN implementations for
@value{PACKAGE_TITLE} Linux Fast-STREAMS and the associated protocol suites.  It includes jar files,
JNI and CNI libraries, and gcj native compiled libraries.  It also includes SWIG implementations of
Java interfaces for @value{PACKAGE_TITLE} API libraries.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-devel-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-devel-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-devel} binary package contains library archives for static compilation,
and header files to develop Linux Fast-STREAMS modules and drivers.  This also includes header files
and static libraries required to compile Linux Fast-STREAMS and @value{PACKAGE_TITLE} protocol suite
applications programs.

This binary package does not contain developer nor programmer documentation nor manual pages.  To
obtain the developer and programmer documentation, load the @file{@value{PACKAGE}-doc} binary
package.  This package is architecture-specific but not kernel-specific.

This package can be used to install or remove the development components of the
@value{PACKAGE_TITLE} package.  When installing, @samp{@value{PACKAGE}} an appropriate kernel module
and kernel module development packages will also be installed.  When removing, the development
package and all kernel module development packages will also be removed.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-debuginfo-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-debuginfo-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-debuginfo} binary package contains debugging information stripped from
C-language libraries and C-language binary executables.  This package is required for full debugging
of the executables contained in the @file{@value{PACKAGE}-lib} binary package.  This package
provides debug information for the @value{PACKAGE_TITLE} packages.  Debug information is useful when
developing applications that use the @value{PACKAGE_TITLE} package or when debugging the
@value{PACKAGE_TITLE} package.

This package can be used to install or remove the debug information components of the
@value{PACKAGE_TITLE} package.  When installing, @samp{@value{PACKAGE}} an appropriate kernel module
and kernel module debug information packages will also be installed.  When removing, the debug
information package and all kernel module debug information packages will also be removed.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-debugsource-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-debugsource-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-debugsource} binary package contains debugging source references stripped
from C-language libraries and C-language binary executables.  This package is required for
source-level debugging of the executables contained in the @file{@value{PACKAGE}-lib} binary
package.  This package provides debug source for the @value{PACKAGE_TITLE} packages.  Debug source
is useful when developing applications that use the @value{PACKAGE_TITLE} package or when debugging
the @value{PACKAGE_TITLE} package.

This package can be used to install or remove the debug source components of the
@value{PACKAGE_TITLE} package.  When installing, @samp{@value{PACKAGE}} an appropriate kernel module
and kernel module debug source packages will also be installed.  When removing, the debug source
package and all kernel module debug source packages will also be removed.

@end table

@subsubsection Kernel-Dependent RPM

Kernel-Dependent RPM are dependent on specific Linux Kernel Binary RPM releases.  Packages are
provided for popular distribution production kernels.  Packages dependent upon a kernel RPM will
have the @samp{_kversion} kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture and kernel version.
If your architecture or kernel version is not available, you can build binary RPM from the source
RPM (see @pxrefman{Building from the Source RPM}).@footnote{Note that on @cite{Mandrakelinux},
unlike other RPM kernel distributions, kernel packages for the ix86 architectures are always placed
in i586 architecture packages regardless of the true processor architecture of the kernel package.
@file{configure} detects this and builds the appropriate packages.}

@table @file

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-kernel} binary package contains the kernel modules that provide the Linux
kernel Linux Fast-STREAMS drivers and modules.  This includes assorted drivers and modules for Linux
Fast-STREAMS and additional @value{PACKAGE_TITLE} protocol suite components.  This binary package
also includes modprobe configuration files for the associated kernel modules.  This package is
heavily tied to the kernel for which it and dependent components were compiled.  This package
applies to kernel version @value{_kversion} and requires components compiled for the same kernel.
If you cannot find a binary package that matches your kernel, rebuild for your kernel from the
@value{PACKAGE_TITLE} package source rpm.

This package can be used to install or remove the package for a specific kernel version.  When
installing, the @samp{@value{PACKAGE}} package will also be installed if necessary.  When removing
the last kernel module package, the @samp{@value{PACKAGE}} package will also be removed.

Note that the version @samp{@value{_kversion}} is just an example.  Use the version returned by
@samp{$(uname -r)} for the kernel for which you wish to install or remove the packages.

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-devel-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-devel-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-devel-@value{_kversion}} binary package contains the kernel modules symbol
information for development of additional Linux Fast-STREAMS kernel modules against the core kernel
modules included in the @samp{@value{PACKAGE}-@value{_kversion}} binary package.  This package is
heavily tied to the core kernel modules and kernel for which it was compiled.  This package applies
to core kernel modules @samp{@value{_kversion}} for kernel version @samp{@value{_kversion}}.  This
package provides kernel debug information for the @value{PACKAGE_TITLE} package.  Kernel debug
information is useful when developing kernel modules that use this package or when debugging kernel
modules contained in the package.

This package can be used to install or remove the development and debug packages for a specific
kernel version.  When installing, the @samp{@value{PACKAGE}} and @samp{@value{PACKAGE}-devel}
packages will also be installed if necessary.  When removing the development and debug for kernel
modules for the last kernel, the @samp{@value{PACKAGE}-devel} package will also be removed.

Note that the version @samp{@value{_kversion}} is just an example.  Use the version returned by
@samp{$(uname -r)} for the kernel for which you wish to install or remove the packages.

The @file{@value{PACKAGE}-@-devel-@-@value{_kversion}} package contains the module symbol version
information for the @file{kernel} package, above.  It is possible to load this package and compile
modules that use the exported symbols without loading the actual kernel modules (from the
@file{kernel} package above).  This package is heavily tied to the kernel for which it was compiled.
This particular package applies to kernel version @samp{@value{_kversion}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-debuginfo-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-debuginfo-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-debugsource-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-debugsource-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

@item @uref{https://www.openss7.org/repo/rpms/@value{PACKAGE_RPMSUBDIR}/RPMS/@value{_target_cpu}/@value{PACKAGE}-source-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.@value{_target_cpu}.rpm,, @value{PACKAGE}-@-source-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.@value{_target_cpu}@-.rpm}

The @file{@value{PACKAGE}-@-source-@-@value{_kversion}} package contains the configured source for
a specific kernel.  This package contains source that is configured to the kernel for which it was
configured.  This particular package contains configured source for kernel version
@samp{@value{_kversion}}@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only
an example.}
The @file{@value{PACKAGE}-@-source} package contains the source code necessary for building the
@value{PACKAGE_TITLE} release.  It includes the @manpage{autoconf(1)} configuration utilities
necessary to create and distribute tarballs, @file{rpm} and @file{deb}/@file{dsc}.

The @file{@value{PACKAGE}-source-@value{_kversion}} binary package contains the source code
necessary for building the @value{PACKAGE_TITLE} release for the kernel version
@samp{@value{_kversion}}.  It also includes the @manpage{autoconf(1)} configuration utilities
necessary to create and distribute this rpm.  However, to develop on the package, it would be better
to use the tarball release.  Load this package if you need some files from the build that are not
present in the @file{@value{PACKAGE}-devel-@value{_kversion}} package.

@end table

@subsubheading Configuration and Installation
To configure, build and install the binary RPM, @pxrefman{Configuring the Binary
RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DEB
@subsection Downloading the Debian DEB
@cindex downloading, debian debs
@cindex binary debs

To install from binary DEB, you will need several of the DEB for a complete installation.  Binary
DEB fall into several categories.  To download and install a complete package requires the
appropriate DEB from each of the several categories below,
as applicable.  Some release packages do not provide DEBs in each of the several categories.

To install from Binary DEB, you will need all of the following kernel
independent packages for your architecture,
and one of the kernel-dependent packages from the next section.

@subsubheading Independent DEB
Independent DEB are not dependent on the Linux kernel version.  For
example, the source package
@samp{@value{PACKAGE}-@-source_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}, is not
dependent on kernel.

@noindent
All of the following kernel
independent DEB are required for your architecture.
Binary DEBs listed here are for example only: additional binary DEBs are available from the
downloads site.  If your architecture is not available, you can build binary DEB from the Debian DSC
(see @pxrefman{Building from the Debian DSC}).

@subsubheading Architecture Independent
@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-repo_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}-@-repo_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_all@-.deb}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-dev_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}-@-dev_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}-@-dev} package contains the device definitions necessary to run
applications programs developed for @value{PACKAGE_TITLE}.  @footnote{Note that not all release
packages contain devices.  Only packages that provide @acronym{STREAMS} character device drivers
need devices, and then only when the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-doc_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}-@-doc_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}-@-doc} package contains this manual in plain text, postscript, @file{pdf}
and @file{html} forms, along with the meta-information from the @file{@value{PACKAGE_NAME}} package.
It also contains all of the manual pages necessary for developing @value{PACKAGE_TITLE} applications
and @value{PACKAGE_TITLE} @acronym{STREAMS} modules or drivers.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-init_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}-@-init_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}-@-init} package contains the @command{init} scripts and provides the @command{postinst}
scripts necessary to create kernel module preloads and modules definitions for all kernel module
@samp{core} subpackages.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-source_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}-@-source_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}-@-source} package contains the source code necessary for building the
@value{PACKAGE_TITLE} release.  It includes the @manpage{autoconf(1)} configuration utilities
necessary to create and distribute tarballs, rpms and deb/dscs.
@end table

@subsubheading Architecture Dependent
@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-devel_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-devel_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}-@-devel} package contains library archives for static compilation, header
files to develop @value{PACKAGE_TITLE} modules and drivers.  This also includes the header files and
static libraries required to compile @value{PACKAGE_TITLE} applications programs.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-lib_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-lib_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}-@-lib} package contains the run-time shared libraries
necessary to run application programs and utilities developed for the
@file{@value{PACKAGE_NAME}} package.

@ignore
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-util_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-util_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}-@-util} package provides administrative and configuration test utilities
and commands associated with the @value{PACKAGE_TITLE} package.
@end ignore

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-debuginfo_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-debuginfo_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-debugsource_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-debugsource_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}

@end table

@subsubheading Kernel-Dependent DEB
Kernel-Dependent DEB are dependent on specific Linux Kernel Binary DEB releases.
Packages are provided for popular released @cite{Debian} kernels.  Packages
dependent upon @cite{Debian} or other kernel DEB will have the @samp{_kversion}
kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary DEB from the source DEB (see @pxrefman{Building from the
Debian DSC}).@footnote{Note that on @cite{Mandrakelinux}, unlike other DEB
kernel distributions, kernel packages for the ix86 architectures are always
placed in i586 architecture packages regardless of the true processor
architecture of the kernel package.  @file{configure} detects this and builds
the appropriate packages.}

@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-core-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-core-@-@value{_kversion}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}-@-core} package contains the loadable kernel modules
that depend only on the kernel.  This package is heavily tied to the kernel for
which it was compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.  Note also that only release
packages that contain kernel modules will contain a @file{core} subpackage.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-info-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}-@-info-@-@value{_kversion}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}-@-info} package@footnote{Note that only release packages
that contain kernel modules and that export versioned symbols will contain a
@file{info} subpackage.  Also, this subpackage is only applicable to 2.4 series
kernels and is not necessary and not built for 2.6 or 3.x series kernels.} contains the
module symbol version information for the @file{core} subpackage, above.  It is
possible to load this subpackage and compile modules that use the exported
symbols without loading the actual kernel modules (from the @file{core}
subpackage above).  This package is heavily tied to the kernel for which it was
compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@end table

@subsubheading Configuration and Installation
To configure, build and install the Debian DEB, @pxrefman{Configuring the Debian
DEB}.

@c ----------------------------------------------------------------------------

@node Downloading the Source RPM
@subsection Downloading the Source RPM
@cindex downloading, source srpm
@cindex source rpms

If you cannot obtain a binary RPM for your architecture, or would like to roll you own binary RPM,
download the following source RPM.

@table @asis
@item @uref{https://www.openss7.org/repo/rpms/SRPMS/@value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}.src.rpm,, @value{PACKAGE}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@-.src@-.rpm}
This is the source RPM for the package.  From this source RPM it is possible to build binary RPM for
any supported architecture and for any 2.4, 2.6 or 3.x kernel.
@end table

@subsubheading Configuration
To configure the source RPM, @pxrefman{Configuring the Source RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DSC
@subsection Downloading the Debian DSC
@cindex downloading, debian dscs
@cindex source dscs

If you cannot obtain a binary DEB for your architecture, or would like to roll your own DEB,
download the following Debian DSC.

@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc,, @value{PACKAGE}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}@-.dsc}
@itemx @uref{http://www.openss7.org/debian/@value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.tar.gz,, @value{PACKAGE}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}@-.tar@-.gz}
This is the Debian DSC for the package.  From this Debian DSC it is possible to build binary DEB for
any supported architecture and for any 2.4, 2.6 or 3.x kernel.
@end table

@subsubheading Configuration
To configure the source RPM, @pxrefman{Configuring the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Downloading the Tar Ball
@subsection Downloading the Tar Ball
@cindex downloading, tar ball
@cindex tar ball

For non-@manpage{rpm(8)} and non-@manpage{dpkg(1)} architectures,
download the tarball as follows:

@table @asis
@item @uref{https://www.openss7.org/repo/tarballs/@value{PACKAGE}-@value{VERSION}.tar.bz2,, @value{PACKAGE}-@-@value{VERSION}@-.tar@-.bz2}
@itemx @uref{https://www.openss7.org/repo/tarballs/@value{PACKAGE}-@value{VERSION}.tar.xz,, @value{PACKAGE}-@-@value{VERSION}@-.tar@-.xz}
These are the @manpage{tar(1)} balls for the release.  These @manpage{tar(1)} balls contain the
@manpage{autoconf(1)} distribution which includes all the source necessary for building and
installing the package.  These tarballs will even build Source RPM and Binary RPM on
@manpage{rpm(8)} architectures and Debian DSC and DEB on @manpage{dpkg(1)} architectures.
@end table

The tar ball may be downloaded easily with @manpage{wget(1)} as follows:

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
@end smallexample
@end cartouche

@noindent
or

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@value{VERSION}.tar.xz
@end smallexample
@end cartouche

Note that you will need an @cite{OpenSS7 Project} user name and password to download release
candidates (which are only available to subscribers and sponsors of the @cite{OpenSS7 Project}).

@subsubheading  Unpacking the Archive

After downloading one of the tar balls, unpack the archive using one of the
following commands:

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
@end smallexample
@end cartouche

@noindent
or

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@value{VERSION}.tar.xz
% tar -xJvf @value{PACKAGE}-@value{VERSION}.tar.xz
@end smallexample
@end cartouche

@noindent
Either will create a subdirectory name
@file{@value{PACKAGE}-@value{VERSION}}
containing all of the files and subdirectories for the
@command{@value{PACKAGE_NAME}} package.


@subsubheading Configuration
To configure and install the tar ball, @pxrefman{Configuring the Tar Ball}.

@c ----------------------------------------------------------------------------

@node Downloading from CVS
@subsection Downloading from CVS
@cindex checkout, cvs
@cindex cvs

If you are a subscriber or sponsor of @uref{http://www.openss7.org/, The OpenSS7 Project} with CVS
archive access privileges then you can download release, mid-release or release candidate versions
of the @file{@value{PACKAGE_NAME}} package from the project CVS archive.

The @value{PACKAGE_TITLE} package is located in the @file{@value{PACKAGE_CVSMODULE}} module of
@file{/var/cvs}.  For release tag information, @pxrefman{Releases}.

To access the archive from the project CVS pserver, use the following commands to check out a
version from the archive:

@cartouche
@smallexample
% export CVSROOT=':pserver:@var{username}@@cvs.openss7.org:2401/var/cvs'
% cvs login
Password: *********
% cvs co -r @value{PACKAGE}_@value{VERSION} @value{PACKAGE_CVSMODULE}
% cvs logout
@end smallexample
@end cartouche

It is, of course, possible to check out by date or by other criteria.  For more information, see
@manref{cvs(1)}.

@subsubheading Preparing the CVS Working Directory

Although public releases of the @file{@value{PACKAGE_NAME}} package do not require reconfiguration,
creating a configurable directory from the CVS archive requires tools not normally distributed with
the other releases.

The build host requires the following GNU tools:

@multitable @columnfractions .05 .95
@item @tab @bullet{} @command{m4 1.4.17}
@item @tab @bullet{} @command{autoconf 2.69}
@item @tab @bullet{} @command{automake 1.14.1}
@item @tab @bullet{} @command{libtool 2.4.2}
@item @tab @bullet{} @command{gettext 0.19.2}
@item @tab @bullet{} @command{flex 2.5.39}
@item @tab @bullet{} @command{bison 3.0.2}
@item @tab @bullet{} @command{swig 3.0.2}
@item @tab @bullet{} @command{xz-5.0.7}
@end multitable

Most desktop development GNU/Linux distributions will have these tools; however, some non-development
or server-style installations might not and they must be installed separately.@footnote{Older
version of bison (2.0) and the older version of flex (2.5.4a) are also suitable.  Where possible,
use the more recent bison 3.0.2 and flex 2.5.39.}

Also, these tools can be acquired from the @url{http://www.fsf.org/,FSF website} in the free
software directory, and also at the following locations:

@itemize
@item @url{http://www.openss7.org/tarballs/m4-1.4.17.tar.bz2,m4-1.4.17}
@item @url{http://www.openss7.org/tarballs/autoconf-2.69.tar.xz,autoconf-2.69}
@item @url{http://www.openss7.org/tarballs/automake-1.14.1.tar.xz,automake-1.14.1}
@item @url{http://www.openss7.org/tarballs/libtool-2.4.2.tar.gz,libtool-2.4.2}
@item @url{http://www.openss7.org/tarballs/gettext-0.19.2.tar.gz,gettext-0.19.2}
@item @url{http://www.openss7.org/tarballs/flex-2.5.39.tar.bz2,flex-2.5.39}
@item @url{http://www.openss7.org/tarballs/bison-3.0.2.tar.xz,bison-3.0.2}
@item @url{http://www.openss7.org/tarballs/swig-3.0.2.tar.gz,swig-3.0.2}
@item @url{http://www.openss7.org/tarballs/xz-5.0.7.tar.xz,xz-5.0.7}
@end itemize

It should be stressed that, in particular, the @manpage{autoconf(1)}, and @manpage{automake(1)},
must be at version releases @command{2.68} and @command{1.11.1}.  @emph{The versions normally
distributed in some mainstream GNU/Linux distributions are, in fact, much older than these
versions.}@footnote{A notable exception is Debian and Fedora 7.  Note that on Fedora 7 the
@command{gettext-devel} package must be installed.}  GNU version of these packages configured and
installed to default directories will install in @file{/usr/local/} allowing them to coexist with
distribution installed versions.

For building documentation, the build host also requires the following documentation tools:

@multitable @columnfractions .05 .95
@item @tab @bullet{} @command{gs 9.15} or @command{ghostscript 9.15}, or newer.
@item @tab @bullet{} @command{tetex 3.14159265} or @command{texlive 2014}, or newer.
@item @tab @bullet{} @command{texinfo 5.2} or newer.
@item @tab @bullet{} @command{transfig 3.2.5e} or newer.
@item @tab @bullet{} @command{imagemagick 6.8.0.8} or @command{ImageMagick 6.8.0.8}, or newer.
@item @tab @bullet{} @command{groff 1.22.2} or newer.
@item @tab @bullet{} @command{gnuplot 4.6} or newer.
@item @tab @bullet{} @command{latex2html 2012 (1.2)} or newer.
@end multitable

Most desktop GNU/Linux distributions will have these tools; however, some server-style installations
(e.g. @cite{Ubuntu}-server, @cite{SLES 9} or @cite{Fedora 6 or 7}) will not and they must be
installed separately.@footnote{In particular, for @cite{CentOS}, @cite{Fedora
6 or 7}, the @command{tetex-latex} and @command{gnuplot} packages must be loaded as well.  Note also
that the @command{latex2html} used to be part of the @command{textex} package (or subpackages) but
is now often packaged on its own.  Recent distributions such as SUSE 11.0 and Fedora 9 use the
@command{texlive} package instead of the @command{tetex} package.}

Note that @command{texinfo 4.12} must not be used as it breaks the build process.

For uncooked manual pages, the entire @manpage{groff(1)} package is required on older @cite{Debian} and
@cite{Ubuntu} systems (the base package did not include @manpage{grefer(1)} which is used extensively by
uncooked manual pages).  The following will get what you need on older systems:

@cartouche
@smallexample
Debian: % apt-get install groff_ext
Ubuntu: % apt-get install groff
@end smallexample
@end cartouche

On newer systems, simply:

@cartouche
@smallexample
% apt-get install groff
@end smallexample
@end cartouche

In addition, the build host requires a complete tool chain for compiling for the target host,
including kernel tools such as @manref{genksyms(8)} and others.

If you wish to package @file{rpms} on an @manpage{rpm(8)} system, or @file{debs} on a
@manpage{dpkg(1)} system, you will need the appropriate tool chain.  Systems based on
@manpage{rpm(8)}
typically have the necessary tool chain available, however, @manpage{dpkg(1)} systems do not.  The
following on a @cite{Debian} or @cite{Ubuntu} system will get what you need:

@cartouche
@smallexample
% apt-get install debhelper
% apt-get install fakeroot
@end smallexample
@end cartouche

To generate a configuration script and the necessary scriptlets required by the GNU
@manpage{autoconf(1)} system, execute the following commands on the working directory:

@cartouche
@smallexample
% autoreconf -fiv @value{PACKAGE_CVSMODULE}
@end smallexample
@end cartouche

@noindent
where, @file{@value{PACKAGE_CVSMODULE}} is the name of the directory to where the working copy was
checked out under the previous step.  This command generates the @file{configure} script and
other missing pieces that are normally distributed with the release Tar Balls, SRPMs and DSCs.

Make sure that @samp{autoreconf --version} returns @samp{2.68}.  Otherwise, you may need to perform
something like the following:

@cartouche
@smallexample
% PATH="/usr/local/bin:$PATH"
% autoreconf -fiv @value{PACKAGE_CVSMODULE}
@end smallexample
@end cartouche

@noindent
After reconfiguring the directory, the package can then be configured and built using the same
instructions as are used for the Tar Ball, see @refman{Configuring the Tar Ball}, and @refman{Building
from the Tar Ball}.

Do note, however, that @manpage{make(1)} will rebuild the documentation that is normally released
with the package.  Additional tools may be necessary for building the documentation.  To avoid
building and installing the documentation, use the @option{--disable-devel} or
@option{--disable-docs} option to configure described in @refman{Configuring the Tar Ball}.

When configuring the package in a working directory and while working a change-compile-test cycle
that involves configuration macros or documentation, I find it of great advantage to invoke the GNU
@file{configure} options @option{--enable-maintainer-mode}, @option{--enable-dependency-tracking}
and @option{--disable-devel}.  The first of these three options will add maintainer-specific targets
to any generated @file{Makefile}, the second option will invoke automatic dependency tracking within
the @file{Makefile} so rebuilds after changes to macro, source or documentation files will be
automatically rebuilt; and the last option will suppress rebuilding and reinstalling documentation
manual pages and header files.  Header files will still be available under the @file{/usr/src}
directory.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Configuration
@section Configuration
@cindex configuration

@menu
* Configuring the Binary RPM::		the easiest approach
* Configuring the Debian DEB::		the easiest approach for Debian
* Configuring the Source RPM::		the next best approach
* Configuring the Debian DSC::		the next best approach for Debian
* Configuring the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Configuring the Binary RPM
@subsection Configuring the Binary RPM
@cindex configuring, binary rpms
@cindex binary rpms

In general the binary RPM do not require any configuration, however, during installation it is
possible to relocate some of the installation directories.  This allows some degree of
customization.  Relocations that are available on the binary RPM are as follows:

@table @file
@item @value{PACKAGE}-@-core-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-core-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/lib/@-modules/@-@value{_kversion}}
This relocatable directory contains the kernel modules that provide the
@value{PACKAGE_NAME} core, drivers and modules.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}
@end table

@item @value{PACKAGE}-@-info-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-info-@-@value{_kversion}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/usr/@-include/@-@value{PACKAGE}/@-@value{_kversion}}
This relocatable directory contains the kernel module exported symbol
information that allows other kernel modules to be compiled against the correct
version of the @value{PACKAGE} package.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.  Also, note that the @samp{info}
subpackage is only applicable to the 2.4 kernel series.}
@end table

@item @value{PACKAGE}-@-dev-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-dev-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
(not relocatable)

@item @value{PACKAGE}-@-devel-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-devel-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains @value{PACKAGE} libraries.
@item @file{@value{_rootdir}@value{_includedir}/@-@value{PACKAGE}}
This relocatable directory contains @value{PACKAGE} header files.
@end table

@item @value{PACKAGE}-@-doc-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-doc-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_datadir}/@-doc}
This relocatable directory contains all package specific documentation
(including this manual).  The subdirectory in this directory is the
@file{@value{PACKAGE}-@-@value{VERSION}} directory.
@item @file{@value{_rootdir}@value{_infodir}}
This relocatable directory contains info files (including the info version of
this manual).
@item @file{@value{_rootdir}@value{_mandir}}
This relocatable directory contains manual pages.
@end table

@item @value{PACKAGE}-@-lib-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-lib-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains the run-time shared libraries necessary to run applications
programs and utilities developed for @value{PACKAGE_TITLE}.
@item @file{@value{_rootdir}@value{_datadir}/@-locale}
This relocatable directory contains the locale information for shared library files.
@end table

@item @value{PACKAGE}-@-source-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-source-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_prefix}/@-src}
This relocatable directory contains the source code.
@end table

@item @value{PACKAGE}-@-util-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}-@-util-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_bindir}}
This relocatable directory contains binary programs and utilities.
@item @file{@value{_rootdir}@value{_sbindir}}
This relocatable directory contains system binary programs and utilities.
@item @file{@value{_rootdir}@value{_libexecdir}}
This relocatable directory contains test programs.
@item @file{@value{_rootdir}@value{_sysconfdir}}
This relocatable directory contains @command{init} scripts and configuration information.
@end table

@end table

@subsubheading Installation
To install the binary RPM, @pxrefman{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DEB
@subsection Configuring the Debian DEB
@cindex configuring, binary debs
@cindex binary debs

In general the binary DEB do not require any configuration.

@subsubheading Installation
To install the Debian DEB, @pxrefman{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Configuring the Source RPM
@subsection Configuring the Source RPM
@cindex configuring, source srpm
@cindex source rpms

When building from the source RPM (@pxrefman{Building from the Source RPM}), the rebuild process uses a
number of macros from the user's @file{.rpmmacros} file as described in @manref{rpm(8)}.

Following is an example of the @file{~/.rpmmacros} file that I use for rebuilding RPMS:

@cartouche
@smallexample
#
# RPM macros for building rpms
#

%vendor OpenSS7 Corporation
%distribution OpenSS7
%disturl http://www.openss7.org/
%packager Brian Bidulock <bidulock@@openss7.org>
%url http://www.openss7.org/

%_signature gpg
%_gpg_path /home/brian/.gnupg
%_gpg_name openss7@@openss7.org
%_gpgbin /usr/bin/gpg

%_source_payload w9.bzdio
%_binary_payload w9.bzdio

%_unpackaged_files_terminate_build 1
%_missing_doc_files_terminate_build 1
%_use_internal_dependency_generator 0
%_repackage_all_erasures 0
%_rollback_transaction_on_failure 0

%configure2_5x %configure
%make make

@end smallexample
@end cartouche


When building from the source RPM (@pxrefman{Building from the Source RPM}), it is possible to pass a
number of additional configuration options to the @manpage{rpmbuild(1)} process.

The additional configuration options are described below.

Note that distributions that use older versions of rpm do not have the @option{--with} or
@option{--without} options defined.  To achieve the same effect as:
@smallexample
--with someparm=somearg
@end smallexample
do:
@smallexample
--define "_with_someparm --with-someparm=somearg"
@end smallexample

This is a generic description of common @manpage{rpmbuild(1)} options.  Not all @manpage{rpmbuild(1)}
options are applicable to all SRPMs.

@table @code
@item --define "_kversion $PACKAGE_KVERSION"
@vindex PACKAGE_KVERSION
@opindex k-release
Specifies the kernel version other than the running kernel for which to build.  If
@command{_kversion} is not defined when rebuilding, the environment variable @var{PACKAGE_KVERSION}
is used.  If the environment variable @var{PACKAGE_KVERSION} is not defined, then the version of the
running kernel (i.e. discovered with @samp{uname -r}) is used as the target version for
kernel-dependent packages.  This option can also be defined in an @file{.rpmspec} file using the
macro name @samp{_kversion}.

@item --with checks
@itemx --without checks
@opindex checks
Enable or disable preinstall checks.  Each packages supports a number of preinstall checks that can
be performed by invoking the @samp{check} target with @manpage{automake(1)}.  These currently consist of
checking each kernel module for unresolved kernel symbols, checking for documentation for exported
kernel module symbols, checking for documentation for exported library symbols, checking for
standard options for build and installable programs, checking for documentation for built and
installable programs.  Normally these checks are only run in maintainer mode, but can be enabled and
disabled with this option.

@ignore
@item --with autotest
@itemx --without autotest
@opindex autotest
@end ignore

@item --with k-optimize=HOW
@itemx --without k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or @var{quick}.  @var{size}
compiles kernel modules @code{-Os}, @var{speed} compiles kernel modules @code{-O3}, and @var{quick}
compiles kernel modules @code{-O0}.  The default is @var{normal}.  Use with care.

@item --with cooked-manpages
@itemx --without cooked-manpages
@opindex cooked-manpages
Some systems do not like @manpage{grefer(1)} references in manual pages.@footnote{In particular, some
@cite{Debian} systems do not load the @manpage{groff(1)} extensions package and do not have
@manpage{grefer(1)} installed.  Although this is an oversight on the configuration of the particular
@cite{Debian} system, we accomodate such misconfiguration with this feature.}  This option will cook
@manpage{soelim(1)}, @manpage{refer(1)}, @manpage{tbl(1)} and @manpage{pic(1)} commands from the manual pages and
also strip @manpage{groff(1)} comments.  The default is to leave manual pages uncooked: they are actually
smaller that way.

@item --with public
@itemx --without public
@opindex public
Release public packages or private packages.
The default is to release public packages.

@item --with k-debug
@itemx --without k-debug
@opindex k-debug
Specifies whether kernel debugging is to be performed on the build kernel modules.  Mutually
exclusive with @code{test} and @code{safe} below.  This has the effect of removing static and inline
attributes from functions and invoking all debugging macros in the code.  The default is to not
perform kernel debugging.

@item --with k-test
@itemx --without k-test
@opindex k-test
Specifies whether kernel testing is to be performed.  Mutually exclusive with @code{debug} above and
@code{safe} below.  This has the effect of removing static and inline attributes from functions and
invoking most debugging macros in the code.  The default is to not perform kernel testing.

@item --with k-safe
@itemx --without k-safe
@opindex k-safe
Specifies whether kernel saftey is to be performed.  Mutually exclusive with @code{debug} and
@code{test} above.  This has the effect of invoking some more pedantic assertion macros in the code.
The default is not to apply kernel safety.

@item --with k-inline
@itemx --without k-inline
@opindex k-inline
Specifies whether kernel @code{inline} functions are to be placed inline.  This has the effect of
adding the @option{-finline-functions} flag to @var{CFLAGS} for compiling kernel modules.  Linux 2.4
kernels are normally compiled @option{-O2} which does not respect the @code{inline} directive.  This
compiles kernel modules with @option{-finline-functions} to get closer to @option{-O3} optimization.
For better optimization controls, @pxrefman{Configuring the Tar Ball}.

@item --with k-modversions
@itemx --without k-modversions
@opindex k-modversions
Specifies whether kernel symbol versions are to be applied to symbols exported by package kernel
modules.  The default is to version exported module symbols.

@item --with devfs
@itemx --without devfs
Specifies whether the build is for a device file system daemon enabled system with autoloading, or
not.  The default is to build for @manpage{devfsd(1)} autoloading when @var{CONFIG_DEVFS_FS} is defined in the
target kernel.  The @samp{rebuild} target uses this option to signal to the RPM spec file that the
@samp{dev} subpackage need not be built.

@item --with devel
@itemx --without devel
@opindex devel
Specifies whether to build development environment packages such as those that include header files,
static libraries, manual pages and @manpage{texinfo(1)} documentation.  The default is to build development
environment packages.  This option can be useful when building for an embedded target where only the
run-time components are desired.

@item --with docs
@itemx --without docs
@opindex docs
Specifies whether to build and install major documentation such manual pages and
@manpage{texinfo(1)} documentation.  The default is to build and install documentation.  This option
can be useful when building for an embedded target where only the run-time and static compile
components are desired, but not major documentation.  This option does not override the setting of
@code{--without devel}.

@item --with tools
@itemx --without tools
@opindex tools
Specifies whether user space packages are to be built.  The default is to build user space packages.
This option can be useful when rebuilding for multiple architectures and target kernels.  The
@samp{rebuild} @manpage{automake(1)} target uses this feature when rebuilding for all available architectures
and kernels, to rebuild user packages once per architecture instead of once per kernel.

@item --with modules
@itemx --without modules
@opindex modules
Specifies whether kernel modules packages are to be built.  The default is to build kernel module
packages.  This option can be useful when rebuilding for multiple architectures and target kernels.
The @samp{rebuild} @manpage{automake(1)} target uses this feature to rebuild for all available architectures
and kernels.

@end table

@include rpm.texi

In general, the default values of these options are sufficient for most purposes and no options need
be provided when rebuilding the Source RPMs.

@subsubheading Build
To build from the source RPM, @pxrefman{Building from the Source RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DSC
@subsection Configuring the Debian DSC
@cindex configuring, source dscs
@cindex source dscs

The Debian DSC can be configured by passing options in the environment variable
@var{BUILD_DEBOPTIONS}.  The options placed in this variable take the same form as those passed to
the @file{configure} script, @pxrefman{Configuring the Tar Ball}.  For an example, @pxrefman{Building
from the Debian DSC}.

@subsubheading Build
To build from the Debian DSC, @pxrefman{Building from the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Configuring the Tar Ball
@subsection Configuring the Tar Ball
@cindex configuring, tar ball
@cindex tar ball

All of the normal GNU @manpage{autoconf(1)} configuration options and environment variables apply.
Additional options and environment variables are provided to tailor or customize the build and are
described below.

@menu
* Configure Options::		Options to @file{configure}
* Environment Variables::	Environment variables to @file{configure}
@end menu

@c ----------------------------------------------------------------------------

@node Configure Options
@subsubsection Configure Options
@cindex configure options

This is a generic description of common @file{configure} options that are in addition to those
provided by @manpage{autoconf(1)}, @manpage{automake(1)}, @manpage{libtool(1)} and @manpage{gettext(1)}.

Following are the additional @file{configure} options, their meaning and use:

@table @command
@item --enable-checks
@itemx --disable-checks
@opindex checks
Enable or disable preinstall checks.  Each @value{pkgtype} package supports a number of preinstall
checks that can be performed by invoking the @samp{check} target with @manpage{make(1)}.  These
currently consist of checking each kernel module for unresolved kernel symbols, checking for
documentation for exported kernel module symbols, checking for documentation for exported library
symbols, checking for standard options for build and installable programs, checking for
documentation for built and installable programs.  Normally these checks are only run in maintainer
mode, but can be enabled and disabled with this option.

@item --enable-autotest
@itemx --disable-autotest
@opindex autotest
Enable or disable pre- and post-installation testing.  Each @value{pkgtype} package supports a
number of @command{autotest} test suites that can be performed by invoking the @samp{installcheck}
target with @manpage{make(1)}.  These currently consist of running installed modules, commands and
binaries against a number of specific test cases.  Normally these checks are only run in maintainer
mode, but can be enabled and disabled with this option.

@item --disable-compress-manpages
@opindex compress-manpages
Compress manual pages with @samp{gzip -9} or @samp{bzip2 -9} or leave them uncompressed.  The default is
to compress manual pages with @samp{gzip -9} or @samp{bzip2 -9} if a single compressed manual page exists in
the target installation directory (@option{--mandir}).  This disables automatic compression.

@item --disable-public
@opindex public
Disable public release.  This option is not usable on public releases and only has a usable effect
on @value{PACKAGE_TITLE} when the package is acquired from CVS.  In particular, the @cite{STREAMS
SS7/VoIP/ISDN/SIGTRAN Stacks} (@command{strss7-@value{VERSION_STRSS7}}) @value{pkgtype} package has
a large number of non-public components.  Specifying this option will cause the package to build and
install all private release components in addition to the public release components.  This option
affects all @value{pkgtype} packages.  Most @value{pkgtype} packages do not have private release
components.

@item --disable-initscripts
@opindex initscripts
Disables the installation of @command{init} scripts.
The default is to configure and install @command{init} scripts and their associated
configuration files.

Although the default is to install @command{init} scripts, installation attempts to detect a System V @command{init}
script configuration, and if one is not found, the @command{init} scripts are installed into the appropriate
directories, but the symbolic links to the run level script directories are not generated and the
script is not invoked.  Therefore, it is safe to leave this option unchanged, even on distributions
that do not support System V @command{init} script layout.

@item --disable-32bit-libs
@opindex 32bit-libs
Disables the build and install of 32-bit compatibility libraries and test binaries on 64-bit systems
that support 32-bit compatibility.  The default is to build and install 32-bit compatibility
libraries and test binaries.  This option can be useful when configuring for an embedded target
where only native shared libraries and binaries are desired.

@item --disable-devel
@opindex devel
Disables the installation of development environment components such as header files, static
libraries, manual pages and @manpage{texinfo(1)} documentation.  The default is to install development
environment components.  This option can be useful when configuring for an embedded target where
only the run-time components are desired, or when performing a edit-compile-test cycle.

@item --disable-docs
@opindex docs
Disables the build and installation of major documentation such manual pages and
@manpage{texinfo(1)} documentation.  The default is to build and install documentation.  This option
can be useful when building for an embedded target where only the run-time and static compile
components are desired, but not major documentation.  This option does not override the setting of
@option{--disable-devel}.

@item --enable-distribute-docs
@opindex distribute-docs
Enables the distribution of pre-built documentation.
Distribution of pre-built documentation in the distribution tarball causes the tarball size to
increase dramatically.  To avoid this, the distribution of pre-built documentation was suppressed,
by default, to reduce the size of the distribution tarball.  Enabling this feature causes pre-built
documentation to be included in the distribution tarball.
The default is to disable the distribution of pre-built documentation.

@item --disable-tools
@opindex tools
Specifies whether user space programs and libraries are to be built and installed.  The default is
to build and install user space programs and libraries.  This option can be useful when rebuilding
for multiple architectures and target kernels, particularly under @manpage{rpm(8)} or
@manpage{dpkg(1)}.  The @samp{rebuild} @manpage{automake(1)} target uses this feature when rebuilding
RPMs for all available architectures and kernels, to rebuild user packages once per architecture
instead of once per kernel.

@item --disable-modules
@opindex modules
Specifies whether kernel modules are to be built and installed.  The default is to build and install
kernel modules.  This option can be useful when rebuilding for multiple architectures and target
kernels, particularly under @manpage{rpm(8)} or @manpage{dpkg(1)}.  The @samp{rebuild}
@manpage{automake(1)} target uses this feature to rebuild for all available architectures and
kernels.

@item --disable-arch
@opindex arch
Specifies whether architectural dependent package components are to be built and installed.  This
option can be useful when rebuilding for multiple architectures and target kernels, particularly
under @manpage{dpkg(1)}.  The default is to configure, build and install architecture dependent
package components.

@item --disable-indep
@opindex indep
Specifies whether architecture independent package components are to be built and installed.  This
option can be useful when rebuilding for multiple architectures and target kernels, particularly
under @manpage{dpkg(1)}.  The default is to configure, build and install architecture independent
package components.

@item --enable-k-inline
@opindex k-inline
Enable kernel inline functions.  Most Linux kernels build without @option{-finline-functions}.  This
option adds the @option{-finline-functions} and @option{-Winline} flags to the compilation of kernel
modules.  Use with care.

@item --enable-k-safe
@opindex k-safe
Enable kernel module run-time safety checks.  Specifies whether kernel safety is to be performed.
This option is mutually exclusive with @option{--enable-k-test}, @option{--enable-k-debug} and
@option{--enable-k-none} below.
This has the effect of invoking some more pedantic assertion macros in the code.  The default is not
to apply kernel safety.

@item --enable-k-test
@opindex k-test
Enable kernel module run-time testing.  Specifies whether kernel testing is to be performed.  This
option is mutually exclusive with @option{--enable-k-safe} above and @option{--enable-k-debug} and
@option{--enable-k-none} below.  This has the effect of removing @code{static} and @code{inline}
attributes from functions and invoking most non-performance affecting debugging macros in the code.
The default is not to perform kernel testing.

@item --enable-k-debug
@opindex k-debug
Enable kernel module run-time debugging.  Specifies whether kernel debugging is to be performed.
This option is mutually exclusive with @option{--enable-k-safe} and @option{--enable-k-test} above,
and @option{--enable-k-none} below.
This has the effect of removing @code{static} and @code{inline} attributes from functions and
invoking all debugging macros in the code (including performance-affecting debug macros).  The
default is to not perform kernel debugging.

@item --enable-k-none
@opindex k-none
Enable no kernel module run-time checks.  Specifies whether kernel run-time checks are to be
performed.  This option is mutually exclusive with @option{--enable-k-safe},
@option{--enable-k-test} and @option{--enable-k-debug}.  This has the effect of removing all
assertion macros from the code.  The default is to not to remove all assertion macros.

@item --disable-k-modversions
@opindex k-modversions
Disable module versions on @command{@value{PACKAGE_NAME}} symbols.  Specifies whether kernel symbol
versions are to be used on symbols exported from built @command{@value{PACKAGE_NAME}} modules.  The
default is to provide kernel symbol versions on all exported symbols.

@item --enable-k-package
@opindex k-package
Enable generation of a kernel source package.  Specifies whether the source package: installation
of configured source in @file{/usr/src/@value{PACKAGE_NAME}}, will be generated.  This also affects
@manpage{rpm(8)} and @manpage{dpkg(1)} builds to include a source package.  Generation of source
pacakges is disabled by default.

@item --enable-devfs
@itemx --disable-devfs
@opindex devfs
Specifies whether the build is for a device file system daemon enabled system with autoloading, or
not.  The default is to build for @manpage{devfsd(8)} autoloading when @var{CONFIG_DEVFS_FS} is
defined in the target kernel.  The @samp{reuild} @manpage{automake(1)} target uses this option to
signal to the RPM spec file that the @samp{dev} subpackage need not be built.  This option has no
effect for @value{pkgtype} packages that do not provide devices.

@item --with-gpg-user=GNUPGUSER
@opindex gpg-user
Specify the @manref{gpg(1)} @samp{GNUPGUSER} for signing RPMs and tarballs.  The default is the
content of the environment variable @var{GNUPGUSER}.  If unspecified, the @manpage{gpg(1)} program
will normally use the user name of the account invoking the @manpage{gpg(1)} program.  For building
source RPMs, the RPM macro @samp{_gpg_name} will override this setting.

@item --with-gpg-home=GNUPGHOME
@opindex gpg-home
Specify the @samp{GNUPGHOME} directory for signing RPMs and tarballs.  The default is the user's
@file{~/.gpg} directory.  For building source RPMs, the RPM macro @samp{_gpg_path} will override
this setting.

@item --with-pkg-epoch=EPOCH
@opindex pkg-epoch
Specifies the epoch for the package.  This is neither used for @manpage{rpm(8)} nor
@manpage{dpkg(1)} packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgepoch} file in the @value{pkgtype} package source directory or, if that
file does not exist, zero (0).

@item --with-pkg-release=RELEASE
@opindex pkg-release
Specifies the release for the package.  This is neither used for @manpage{rpm(8)} nor
@manpage{dpkg(1)} packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgrelease} file in the @value{pkgtype} package source directory or, if that
file does not exist, one (1).  This is the number after the last point in the package version
number.

@item --with-pkg-patchlevel=PATCHLEVEL
@opindex pkg-patchlevel
Specifies the patch level for the package.  This is neither used for @manpage{rpm(8)} nor
@manpage{dpkg(1)} packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgpatchlevel} file in the @value{pkgtype} package source directory or, if
that file does not exist, the null string.  This is an additional suffix after the package release
in the package version number.  It is intended for bug fix releases or release candidates.

@item --with-pkg-distdir=DIR
@opindex pkg-distdir
Specifies the distribution directory for the package.  This is used by the maintainer for building
distribution repositories.  This is the directory into which binary packages are copied for
distribution.  The default is the top build directory.

@item --with-pkg-tardir=DIR
@opindex pkg-tardir
Specifies the tarball distribution directory for the package.  This is used by the maintainer for
building distributions of tarballs.  This is the directory into which archives are copied for
distribution.  The default is the top build directory.

@item --with-cooked-manpages
@opindex cooked-manpages
Convert manual pages to remove macro dependencies and @manpage{grefer(1)} references.  Some systems
do not like @manpage{grefer(1)} references in manual pages.@footnote{In particular, some @cite{Debian}
or @cite{Ubuntu} systems do not load the @manpage{groff(1)} extensions package and do not have
@manpage{grefer(1)} installed.  Although this is an oversight on the configuration of the particular
@cite{Debian} or @cite{Ubuntu} system, we accomodate such misconfiguration with this feature.} This
option will cook @manpage{soelim(1)}, @manpage{refer(1)}, @manpage{tbl(1)} and @manpage{pic(1)}
commands from the manual pages and also strip @manpage{groff(1)} comments.  The default is to leave
manual pages uncooked (they are actually smaller that way).

@item --with-rpm-epoch=PACKAGE_EPOCH
@opindex rpm-epoch
Specify the @samp{PACKAGE_EPOCH} for the RPM spec file.  The default is to use the RPM epoch
contained in the @value{pkgtype} package file @file{.rpmepoch}.

@item --with-rpm-release=PACKAGE_RPMRELEASE
@opindex rpm-release
Specify the @samp{PACKAGE_RPMRELEASE} for the RPM @file{spec} file.  The default is to use the RPM release
contained in the @value{pkgtype} package file @file{.rpmrelease}.

@item --with-rpm-extra=PACKAGE_RPMEXTRA
@opindex rpm-extra
Specify the @samp{PACKAGE_RPMEXTRA} extra release information for the RPM spec file.  The default is
to use the RPM extra release information contained in the @value{pkgtype} package file
@file{.rpmextra}.  Otherwise, this value will be determined from automatic detection of the RPM
distribution.

@item --with-rpm-topdir=PACKAGE_RPMTOPDIR
@opindex rpm-topdir
Specify the @samp{PACKAGE_RPMTOPDIR} top directory for RPMs.  If specified with a null
@samp{PACKAGE_RPMTOPDIR}, the default directory for the RPM distribution will be used.  If this
option is not provided on the command line, the top build directory will be used as the RPM top
directory as well.

@item --with-deb-epoch=EPOCH
@opindex deb-epoch
Specify the @samp{PACKAGE_DEBEPOCH} for the DEB control file.  The default is to use the DEB epoch
contained in the @value{pkgtype} package file @file{.debepoch}.

@item --with-deb-release=RELEASE
@opindex deb-release
Specify the @samp{PACKAGE_DEBRELEASE} for the DEB control file.  The default is to use the DEB
release contained in the @value{pkgtype} package file @file{.debrelease}.

@item --with-deb-topdir=DIR
@opindex deb-topdir
Specify the @samp{PACKAGE_DEBTOPDIR} top directory for DEBs.  If specified with a null
@samp{PACKAGE_DEBTOPDIR}, the default directory for the DEB distribution will be used.  If this
option is not provided on the command line, the top build directory will be used as the DEB top
directory as well.

@item --with-k-release=PACKAGE_KRELEASE
@opindex k-release
Specify the @samp{PACKAGE_KRELEASE} release of the Linux kernel for which the build is targeted.
When not cross compiling, if this option is not set, the build will be targeted at the kernel
running in the build environment (e.g., @samp{uname -r}).  When cross-compiling this option must be
specified or the configure script will generate an error and terminate.

@ignore
@item --with-k-prefix=K-PREFIX-DIR
@opindex k-prefix
Specify the @samp{K-PREFIX-DIR} kernel directory prefix for install.  The default is the root
directory (@file{/}) of the build machine.  This directory is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-rootdir=K-ROOTDIR
@opindex k-rootdir
Specify the @samp{K-ROOTDIR} root directory for configure.  The default is the setting of
environment variable @var{DESTDIR}, and if @var{DESTDIR} is not set, the root directory (@file{/})
of the build machine.  This directory is normally located by the @file{configure} script and need
only be provided for special cross-build environments or when requested by a @file{configure}
script error message.
@end ignore

@item --with-k-linkage=PACKAGE_KLINKAGE
@opindex k-linkage
Specify the @samp{PACKAGE_KLINKAGE} for kernel module linkage.  This can be one of the following:
@itemize
@item @samp{loadable} -- loadable kernel modules
@item @samp{linkable} -- linkable kernel objects
@end itemize
The default is to build loadable kernel modules.

@item --with-k-modules=K-MODULES-DIR
@opindex k-modules
Specify the @samp{K-MODULES-DIR} directory to which kernel modules will be installed.  The default
is based on the option @option{--with-k-release}, @option{--with-k-prefix} and
@option{--with-k-rootdir}.  The default is @file{DESTDIR}/@-@file{K-@-MODULES-@-DIR} which is
typically @file{@var{DESTDIR}/@-lib/@-modules/@-@var{PACKAGE_KRELEASE}/@-}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-build=K-BUILD-DIR
@opindex k-build
Specify the @samp{K-BUILD-DIR} base kernel build directory in which configured kernel source
resides.  The default is @file{@var{DESTDIR}/@-@var{K-@-MODULES-@-DIR}/@-build}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-source=K-SOURCE-DIR
@opindex k-build
Specify the @samp{K-SOURCE-DIR} base kernel build directory in which configured kernel source
resides.  The default is @file{@var{DESTDIR}/@-@var{K-@-MODULES-@-DIR}/@-source}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-modver=K-MODVER-FILE
@opindex k-sysmap
Specify the @samp{K-MODVER-FILE} kernel module versions file.  The default is
@file{@var{K-@-BUILD-@-DIR}/@-Module.symvers}.  This file is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-sysmap=K-SYSMAP-FILE
@opindex k-sysmap
Specify the @samp{K-SYSMAP-FILE} kernel system map file.  The default is
@file{@var{K-@-BUILD-@-DIR}/@-System.map}.  This file is normally located by the @file{configure}
script and need only be provided for special cross-build environments or when requested by a
@file{configure} script error message.

@ignore
@item --with-k-includes=K-INCLUDES-DIR
@opindex k-includes
Specify the @samp{K-INCLUDES-DIR} include directory of the kernel for which the build is targeted.
The default is @file{@var{DESTDIR}/@-@var{K-@-BUILD-@-DIR}/@-include}.  This directory is normally
located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.
@end ignore

@item --with-k-hdrdir=K-HEADER-DIR
@opindex k-hdrdir
Specify the @samp{K-INCLUDES-DIR} include directory of the kernel for which the build is targeted.
resides.  The default is @file{@var{DESTDIR}/@-@var{K-@-BUILD-@-DIR}/@-include}.  This directory is
normally located by the @file{Configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-archdir=K-ARCHDIR
@opindex k-archdir
Specify the @samp{K-ARCHDIR} kernel source architecture specific directory.  The default is
@file{@var{DESTDIR}/@-@var{K-@-SOURCE-@-DIR}/@-arch}.  This directory is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-asm=K-ASMDIR
@opindex k-asm
Specifiy the @samp{K-ASMDIR} kernel source architecture specific directory.  The default is
@file{@var{DESTDIR}/@-@var{K-@-HEADER-@-DIR}/@-asm}.  This directory is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-machdir=K-MACHDIR
@opindex k-machdir
Specify the @samp{K-MACHDIR} kernel source machine specific directory.  The default is
@file{@var{DESTDIR}/@-@var{K-@-SOURCE-@-DIR}/@-@var{target_cpu}}.  This directory is normally
located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-config=K-CONFIG
@opindex k-config
Specify the @samp{K-CONFIG} kernel configuration file.  The default is
@file{@var{BOOT}/@-config-@-@var{K-@-RELEASE}}.  This configuration file is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-optimize=HOW
@itemx --without-k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or @var{quick}.  @var{size}
compiles kernel modules @code{-Os}, @var{speed} compiles kernel modules @code{-O3}, and @var{quick}
compiles kernel modules @code{-O0}.  The default is @var{normal}.  Use with care.  The most common
use of this option is to specify @option{--with-k-optimize=speed --disable-k-safe} to compile for
maximum performance.  Nevertheless, even these settings are @dfn{ricing} and the resulting kernel
modules will only be about 5% faster.

@item --with-optimize=HOW
@itemx --without-optimize
@opindex optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or @var{quick}.  @var{size}
compiles user programs @code{-Os}, @var{speed} compiles user programs @code{-O3}, and @var{quick}
compiles user programs @code{-O0}.  The default is @var{normal}.  Use with care.  The most common
use of this option is to specify @option{--with-optimize=speed} to compile for maximum performance.
Nevertheless, even these setting are @dfn{ricing} and the resulting user programs will only be about
5% faster.

@item --disable-texinfo
@opindex texinfo
Disable INFO-formatted texinfo documents.
Normally @command{configure} can find the tools necessary to build INFO documents from texinfo and
will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of texinfo INFO-formatted documents.
The default is to enable INFO-formatted texinfo documents.

@item --disable-texinfo-html
@opindex texinfo-html
Disable HTML-formatted texinfo documents.
Normally @command{configure} can find the tools necessary to build HTML documents from texinfo and
will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of texinfo HTML-formatted documents.
The default is to enable HTML-formatted texinfo documents.

@item --disable-texinfo-print
@opindex texinfo-print
Disable PS- and PDF-formatted texinfo documents.
Normally @command{configure} can find the tools necessary to build PS and PDF documents from texinfo
and will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of texinfo PS- and PDF-formatted documents.
The default is to enable PS and PDF-formatted texinfo documents.

@item --disable-papers
@opindex papers
Disable build and install of latex papers.
Normally @command{configure} can find the tools necessary to build TXT documents from latex and will
provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of latex TXT-formatted documents.
The default is to automatically determine whether to build and install of latex papers.

@item --disable-papers-html
@opindex papers-html
Disable HTML-formatted latex papers.
Normally @command{configure} can find the tools necessary to build HTML documents from latex and
will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of latex HTML-formatted documents.
The default is to automatically determine whether to enable HTML-formatted latex papers.

@item --disable-papers-print
@opindex papers-print
Disable PS- and PDF-formatted latex papers.
Normally @command{configure} can find the tools necessary to build PS and PDF documents from latex
and will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of PS- and PDF-formatted documents.
The default is to automatically determine whether to enable print-formatted latex papers.

@item --disable-drafts
@opindex drafts
Disable build and install of TXT-formatted internet drafts.
Normally @command{configure} can find the tools necessary to build TXT documents from groff ME and
will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of TXT-formatted documents.
The default is to automatically determine whether to enable build and install of TXT-formatted
internet drafts.

@item --disable-drafts-html
@opindex drafts-html
Disable HTML-formatted internet drafts.
Normally @command{configure} can find the tools necessary to build HTML documents from groff ME and
will provide missing substitutions instead.  This option need only be provided when requested by
@command{configure} script error messages.
This option can otherwise be used to suppress the creation of HTML-formatted documents.
The default is to automatically determine whether to enable HTML-formatted internet drafts.

@item --disable-drafts-print
@opindex drafts-print
Disable PS- and PDF-formatted internet drafts.
Normally @command{configure} can find the tools necessary to build PS and PDF documents from groff
ME and will provide missing substitutions instead.  This option need only be provided when requested
by @command{configure} script error messages.
This option can otherwise be used to suppress the creation of PS- and PDF-formatted documents.
The default is to automatically determine whether to enable PS- and PDF-formatted internet drafts.

@item --with-strconf-master=STRCONF_CONFIG
@opindex strconf-master
Specify the @samp{STRCONF_CONFIG} file name to which the configuration master file is written.  The
default is @file{Config.master}.

@item --with-base-major=STRCONF_MAJBASE
@opindex base-major
Start numbering for major devices at @samp{STRCONF_MAJBASE}.  The default is @samp{230} on 16-bit
device number systems, and @samp{2000} on 32-bit device number systems.

@item --with-base-modid=STRCONF_MODBASE
@opindex base-modid
Start numbering for module identifiers at @samp{STRCONF_MODBASE}.  The default is @samp{5000}.

@item --with-strconf-pkgdir=PKG-DIRECTORY
@opindex strconf-pkgdir
Specifies the relative or absolute path to the binary package configuration directory in which to
look for binary packages, @samp{PKG-DIRECTORY}.  The default is the @file{pkg} subdirectory in the
build or source directory.

@item --with-strconf-pkgrules=PKG-FILENAME
@opindex strconf-pkgrules
Specifies the relative or absolute file name to which package rules are written,
@samp{PKG-FILENAME}.  The default is the @file{pkgrules} file in the build directory.

@item --with-snmp-agent=SNMP-AGENT-HEADERS
@itemx --without-snmp-agent
@opindex snmp-agent
Normally SNMP agents are included in the build.  By specifying @samp{--without-snmp-agent}, the SNMP
argents are not included in the build.  This option is only for exceptional circumstances where SNMP
support cannot be included in the run-time.

Otherwise, specifies the SNMP agent header file directory, @samp{SNMP-AGENT-HEADERS}.  The default
is @file{@i{$INCLUDEDIR}} and the @command{configure} script will search for this directory.
The directory is normally located by the @command{configure} script and need only be provided for
special cross-build environments or when requested by a @command{configure} script error message.

@item --with-perl-headers HEADERS
@opindex perl-headers
Normally @command{configure} can find the perl headers necessary for generating SNMP agents based on
NET-SNMP.  This option may be used to direct @command{configure} to the location of the perl headers.
The default is @samp{$INCLUDEDIR/perl}.

@item --with-snmp=SNMP-HEADERS
@itemx --without-snmp
@opindex snmp
Normally @command{configure} can find the NET-SNMP headers necessary for generating SNMP argents
based on NET-SNMP.  This option may be used to direct @command{configure} to the location of the
NET-SNMP headers, @samp{SNMP-HEADERS}.  The default is @samp{$INCLUDEDIR/ucd-snmp}.
The directory is normally located by the @command{configure} script and need only be provided for
special cross-build environments or when requested by a @command{configure} script error message.

@item --disable-java
@opindex java
Disable JAVA modules.
The package contains JAVA modules that can only be built the the appropriate tool chain.  The
@command{configure} script can normally detect and recommend missing JAVA components that are needed
to generate JAVA modules and documentation.  This option should only be used on a system that does
not support JAVA or when directed by a @command{configure} script error message.
The default is to enable JAVA modules.

@item --with-tcl=TCL-HEADERS
@itemx --without-tcl
@opindex tcl
Specifies the TCL header file directory, @samp{TCL-HEADERS}.  The default is to search for the
appropriate headers in a number of locations.  The directory is normally located by the
@command{configure} script and need only be provided for special cross-build environments or when
requested by a @command{configure} script error message.  This option has no effect on
@value{pkgtype} packages that do not contain TCL interfaces.

@item --with-perl=PERL-HEADERS
@itemx --without-perl
@opindex perl
Specifies the PERL header file directory, @samp{PERL-HEADERS}.  The default is to search for the
appropriate headers in a number of locations.  The directory is normally located by the
@command{configure} script and need only be provided for special cross-build environments or when
requested by a @command{configure} script error message.  This option has no effect on
@value{pkgtype} packages that do not contain PERL interfaces.

@item --disable-bestzip
@itemx --enable-bestzip
@opindex bestzip
Disable best compression of archives.
The @command{configure} script normally detects the available tools and determines what the best
compression (highest compression ratio) is to compress @manpage{tar(1)} archives.  It will typically
use @file{.bz2} and @file{.xz} formats on current distributions but may fall back to @file{.gz} and
@file{.bz2} compression on older distributions.
The default is to enable the best compression of archives.

@item --with-lzma=LZMA_CMD
@itemx --without-lzma
@opindex lzma
Specifies the creation of @file{lzma} archives.  @samp{LZMA_CMD} specifies the compression command
to use (typically @command{lzma}).
The typical use of is command is to specify @option{--without-lzma} to suppress the rather slow
@file{lzma} compression for test compilations.
The default is to create @file{lzma} archives when a suitable command can be found or was specified
and no @file{xz} archive capability is provided.

Unfortunately, @manpage{automake(1)} does not detect the presence of the necessary tools to build
@file{lzma} archives, breaking distribution on systems that do not have @file{lzma} tools.  This
option tells @command{configure} to configure distribution to include @file{lzma} archives.  As the
generation of @file{lzma} takes a significant amount of time, generation of @file{lzma} archives is
disabled by default.

@item --with-xz=XZ_CMD
@itemx --without-xz
@opindex xz
Specifies the creation of @file{xz} archives.  @samp{XZ_CMD} specifies the compression command to
use (typically @command{xz}).
The typical use of is command is to specify @option{--without-xz} to suppress the rather slow
@file{lzma} compression for test compilations.
The default is to create @file{xz} archives when a suitable command can be found or was specified.

Unfortunately, @manpage{automake(1)} does not detect the presence of the necessary tools to build
@file{xz} archives, breaking distribution on systems that do not have @file{xz} tools.  This
option tells @command{configure} to configure distribution to include @file{xz} archives.  As the
generation of @file{xz} takes a significant amount of time, generation of @file{xz} archives is
disabled by default.

@item --disable-repo-tar
@itemx --enable-repo-tar
@opindex repo-tar
Disable building of @manpage{tar(1)} repositories.  Normally @command{configure} can determine
whether there are sufficient tools to create @manpage{tar(1)} repositories.
This option explicitly disables or enables generation of @manpage{tar(1)} repositories.
Normally in maintainer mode, @manpage{tar(1)} repositories will be constructed.  This option is
normally used to disable the construction of @manpage{tar(1)} repositories.

@item --disable-rpms
@itemx --enable-rpms
@opindex rpms
Disable building of RPMs.  Normally @command{configure} can determine whether it is possible to
build RPMs on the current system and automatically determines whether to build RPMs as part of the
@samp{release} makefile target.  This option explicitly disables or enables building of RPMs.
The default is to auotmatically determine whether RPMs should be built.
This option is only enabled automatically when a suitable @manpage{rpm(8)} command can be located.
A typical use of this option is to disable rpms with @option{--disable-rpms} on a @cite{Debian}
system that yet provides the @manpage{rpm(8)} commands.

@item --disable-srpms
@itemx --enable-srpms
@opindex srpms
Disable building of SRPMs.  Normally @command{configure} can determine whether it is possible to
build SRPMs on the current system and automatically determines whether to build SRPMs as part of the
@samp{release} makefile target.  This option explicitly disables or enables building of SRPMs.
The default is to automatically determine whether SRPMs should be built.
This option is only enabled automatically when a suitable @manpage{rpm(8)} command can be located.
A typical use of this option is to disable rpms with @option{--disable-srpms} on a @cite{Debian}
system that yet provides the @manpage{rpm(8)} commands.

@item --disable-repo-yum
@itemx --enable-repo-yum
@opindex repo-yum
Disable building of @manpage{yum(8)} repositories.  Normally @command{configure} can determine
whether there are sufficient tools to create @manpage{yum(8)} repositories.  This option explicitly
disables or enables generation of @manpage{yum(8)} repositories.

@item --with-install-source-yum=REPODIR
@itemx --without-install-source-yum
@opindex install-source-yum
Specifies the @manpage{yum(8)} repository directory, @samp{REPODIR}.
Creates and installs an installation source for the @manpage{yum(8)} package management tool.
The default is to search for the appropriate directory.

@item --disable-repo-yast
@itemx --enable-repo-yast
@opindex repo-yast
Disable building of @manpage{yast(8)} repositories.  Normally @command{configure} can determine
whether there are sufficient tools to create @manpage{yast(8)} repositories.  This option explicitly
disables or enables generation of @manpage{yast(8)} repositories.

@item --with-install-source-zypp=REPODIR
@itemx --without-install-source-zypp
@opindex install-source-zypp
Specifies the @manpage{zypper(8)} repository directory, @samp{REPODIR}.
Creates and installs an installation source for the @manpage{zypper(8)} package management tool.
The default is to search for the appropriate directory.

@item --disable-debs
@itemx --enable-debs
@opindex debs
Disable building of DEBs.  Normally @command{configure} can determine whether it is possible to
build DEBs on the current system and automatically determines whether to build DEBs as part of the
@samp{release} makefile target.  This option explicitly disables or enable building of DEBs.

@item --disable-dscs
@itemx --enable-dscs
@opindex dscs
Disable building of DSCs.  Normally @command{configure} can determine whether it is possible to
build DSCs on the current system and automatically determines whether to build DSCs as part of the
@samp{release} makefile target.  This option explicitly disables or enable building of DSCs.

@item --disable-repo-apt
@itemx --enable-repo-apt
@opindex repo-apt
Disable building of @manpage{apt-get(1)} repositories.  Normally @command{configure} can determine
whether there are sufficient tools to create @manpage{apt-get(1)} repositories.  This option explicitly
disables or enables generation of @manpage{apt-get(1)} repositories.

@item --with-install-source-apt=SOURCESDIR
@itemx --without-install-source-apt
@opindex install-source-apt
Specifies the @manpage{apt(1)} sources directory, @samp{SOURCESDIR}.
Creates and installs an installation source for the @manpage{aptitude(8)} package management tool.
The default is to search for the appropriate directory.

@end table

@include configure.texi

@c ----------------------------------------------------------------------------

@node Environment Variables
@subsubsection Environment Variables
@cindex configure environment variables

Following are additional environment variables to @file{configure}, their meaning and use:

@vtable @var
@item CC
C compiler command.  Defaults to @command{gcc}.

@item CFLAGS
C compiler flags.  Defaults to an automatically determined set of flags.

@item LDFLAGS
Linker flags.  Defaults to an automatically determined set of flags.

@item CPPFLAGS
C/C++/Objective C preprocessor flags.  Defaults to an automatically determined set of flags.

@item CPP
C preprocessor.  Defaults to @command{gcc -E}.

@item CCAS
Assembler compiler command (defaults to @samp{CC}).

@item CCASFLAGS
Assembler compiler flags (defaults to CFLAGS).  Defaults to an automatically determined set of
flags.

@item CXX
C++ compiler command.  Defaults to @command{g++}.

@item CXXFLAGS
C++ compiler flags.  Defaults to an automatically determined set of flags.

@item CXXCPP
C++ preprocessor.  Defaults to @command{g++ -E}.

@item LD
Linker loader command.  Defaults to @command{gcc}.

@item YACC
The `Yet Another C Compler' implementation to use.  Defaults to the first program found out of:
`bison -y', `byacc', `yacc'.

@item YFLAGS
The list of arguments that will be passed by default to @samp{$YACC}.  This script will default
@samp{YFLAGS} to the empty string to avoid a default value of @option{-d} given by some make
applications.

@item SWIG
Swig command.  Defaults to @command{swig}.

@item GCJ
Java compiler command.  Defaults to @command{gcj}.

@item GCJFLAGS
Java complier flags.  Defaults to an automatically determined set of flags.

@item GCJDBTOOL
GCJ database tool.  Defaults to @command{gcj-dbtool}.

@item GCJH
Java CNI header command.  Defaults to @command{gcjh}.

@item GCJHFLAGS
Java CNI header command flags.  Defaults to an automatically determined set of flags.

@item JAVAH
Java JNI header command.  Defaults to @command{gcjh}.

@item JAVAHFLAGS
Java JNI header command flags.  Defaults to an automatically determined set of flags.

@item JAVAC
Java class compiler.  Defaults to @command{gcj}.

@item JAVACFLAGS
Java class compiler flags.  Defaults to an automatically determined set of flags.

@item CLASSPATH
Java CLASSPATH variable.  Defaults to @var{auto}.

@item JAVADOC
Java documentation doclet.  Defaults to @command{gjdoc}.

@item JAVADOCFLAGS
Java documentation flags.  Defaults to an automatically determined set of flags.

@item GPG
GPG signature command.  This is used for signing distributions by the maintainer.  By default,
@file{configure} will search for this tool.

@item GNUPGUSER
GPG user name.  This is used for signing distributions by the maintainer.

@item GNUPGHOME
GPG home directory.  This is used for signing distributions by the maintainer.

@item GPGPASSWD
GPG password for signing.  This is used for signing distributions by the maintainer.  This
environment variable is not maintained by the @file{configure} script and should only be used on
an isolated system.

@item SOELIM
Roff source elimination command, @manref{soelim(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{soelim(1)} command.  By default, @file{configure} will search for this tool.

@item REFER
Roff references command, @manref{refer(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{refer(1)} command.  By default, @file{configure} will search for this tool.

@item TBL
Roff table command, @manref{tbl(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{tbl(1)} command.  By default, @file{configure} will search for this tool.

@item PIC
Roff picture command, @manref{pic(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{pic(1)} command.  By default, @file{configure} will search for this tool.

@item GZIP
Default compression options provided to @command{GZIP_CMD}.  The default is @samp{--best}.

@item GZIP_CMD
Manpages (and kernel modules) compression commands, @manref{gzip(1)}.  This is only necessary when
the option @option{--without-compressed-manpages} has @emph{not} been specified and
@file{configure} cannot find the proper @manpage{gzip(1)} command.  By default,
@file{configure} will search for this tool.

@item BZIP2
Default compression options provided to @command{BZIP2_CMD}.

@item BZIP2_CMD
Manpages compression commands, @manref{bzip2(1)}.  This is only necessary when the option
@option{--without-compressed-manpages} has @emph{not} been specified and @file{configure} cannot
find the proper @manpage{bzip2(1)} command.  By default, @file{configure} will search for this
tool.

@item LZMA
Default compression options given to @command{LZMA_CMD} is @samp{--best}.

@item LZMA_CMD
Lzma compression command.  Defaults to @command{lzma}.

@item XZ
Default compression options given to @command{XZ_CMD} is @samp{-f9v}.

@item XZ_CMD
Xz compression command.  Defaults to @command{xz}.

@item MAKEWHATIS
Manpages apropros database rebuild command, @manref{makewhatis(8)}.  By default, @file{configure}
will search for this tool.  By default, @file{configure} will search for this tool.

@item JAR
Java archive command.  Defaults to this first found of @command{fastjar}, or @command{jar}.

@item ZIP
Zip archive command.  Defaults to @command{zip}.

@item CHKCONFIG
Chkconfig command, @manref{chkconfig(8)}.  This was used for installation of @command{init} scripts.  All
packages now come with @manpage{init_install(8)} and @manpage{init_remove(8)} scripts used to install and
remove @command{init} scripts on both RPM and Debian systems.

@item INSSERV
Insert service command.  Defautls to @command{insserv}.

@item RPM
Rpm command, @manref{rpm(8)}.  This is only necessary for RPM builds.  By default,
@file{configure} will search for this tool.

@item RPMBUILD
Build RPM command, @manref{rpmbuild(1)}.  This is only necessary for RPM builds.  By default,
@file{configure} will search for this tool.  @manpage{rpm(8)} will be used instead of
@manpage{rpmbuild(1)} only if @manpage{rpmbuild(1)} cannot be found.

@item CREATEREPO
Create @file{repo-md} repository command.  This command is used when building @manpage{yum(8)} repositories.
By default, @command{configure} will search for this tool.

@item MODIFYREPO
Modify @file{repo-md} respository command.  This command is used when building @manpage{yum(8)}
repositories.
By default, @command{configure} will search for this tool.

@item CREATE_PACKGE_DESCR
Create YaST package descriptions command.  This command is used when building @manpage{yast(8)}
repositories.  By default, @command{configure} will search for this tool.

@item DPKG
Dpkg comand, @manref{dpkg(1)}.  This command is used for building Debian packages.  By default,
@file{configure} will search for this tool.

@item DPKG_SOURCE
Dpkg-source command, @manref{dpkg-source(1)}.  This command is used for building Debian dsc
packages.  By default, @file{configure} will search for this tool.

@item DPKG_BUILDPACKAGE
Dpkg-buildpackage command, @manref{dpkg-buildpackage(1)}.  This command is used for building Debian
deb packages.  By default, @file{configure} will search for this tool.

@item APT_FTPARCHIVE
Apt-ftparchive command, @manref{apt-ftparchive(1)}.  This command is used to building Debian apt
repositories.  By default, @file{configure} will search for this tool.

@item DPKG_SCANSOURCES
Dpkg-scansources command, @manref{dpkg-scansources(1)}.  This command is used to create the sources
file when building Debian apt repositories.  By default, @command{configure} will search for this
tool.

@item DPKG_SCANPAKCAGES
Dpkg-scanpackages command, @manref{dpkg-scanpackages(1)}.  This command is used to create the
packages file when building Debian apt repositories.  By default, @command{configure} will search
for this tool.

@item DPKG_DEB
Dpkg-deb command, @manpage{dpkg-deb(1)}.  This command is used when building Debian apt
repositories.  By default, @command{configure} will search for this tool.

@item LDCONFIG
Configure loader command, @manref{ldconfig(8)}.  Command used to configure the loader when libraries
are installed.  By default, @file{configure} will search for this tool.

@item DESTDIR
Cross build root directory.  Specifies the root directory for build and installation.

@item DEPMOD
Build kernel module dependencies command, @manref{depmod(8)}.  This is used during installation of
kernel modules to a running kernel to rebuild the modules dependency database.  By default,
@file{configure} will search for this tool.

@item MODPROBE
Probe kernel module dependencies command, @manref{modprobe(8)}.  This is used during installation of
kernel modules to a running kernel to remove old modules.  By default, @file{configure} will
search for this tool.

@item LSMOD
List kernel modules command, @manref{lsmod(8)}.  This is used during installation of kernel modules
to a running kernel to detect old modules for removal.  By default, @file{configure} will search
for this tool.

@item LSOF
List open files command, @manref{lsof(1)}.  This is used during installation of kernel modules to a
running kernel to detect old modules for removal.  Processes owning the old kernel modules will be
killed and the module removed.  If the process restarts, the new module will be demand loaded.  By
default, @file{configure} will search for this tool.

@item GENKSYMS
Generate kernel symbols command, @manref{genksyms(8)}.  This is used for generating module symbol
versions during build.  By default, @file{configure} will search for this tool.

@item KGENKSYMS
Linux 2.6 and 3.x generate kernel symbols command, @manref{genksyms(8)}.  This is used for
generating module symbol version during build.  By default, @file{configure} will search for this
tool.

@item OBJDUMP
Object dumping command, @manref{objdump(1)}.  This is used for listing information about object
files.  By default, @file{configure} will search for this tool.

@item NM
Object symbol listing command, @manref{nm(1)}.  This is used for listing information about object
files.  By default, @file{configure} will search for this tool.

@item MODPOST_CACHE
Cache file for @manpage{modpost(1)}.  The version of the @command{modpost.sh} script that ships with each package
can cache information to a cache file to speed multiple builds.  This environment variable is used
to specify a cache file.

@item AUTOM4TE
Autom4te command, @manref{autom4te(1)}.  This is the executable used by @command{autotest} for pre- and
post-installation checks.  By default, @file{configure} will search for this tool.

@item AUTOTEST
Autotest macro build command, @manpage{autom4te(1)}.  This is the executable used by @command{autotest} for
pre- and post-installation checks.  By default, @file{configure} will search for this tool.

@item DOXYGEN
Doxygen command, @manref{doxygen(1)}.  This command is used when building Doxygen documentation.  By
default, @command{configure} will search for this tool.

@item TEX
Tex command for PS.  Defaults to @command{tex}, @command{etex}.
By default, @command{configure} will search for this tool.

@item PDFTEX
Tex command for PDF.  Defaults to @command{pdftex}, @command{pdfetex}.
By default, @command{configure} will search for this tool.

@item BIBTEX
BibTeX command.  Defaults to @command{bibtex}.
By default, @command{configure} will search for this tool.

@item LATEX
Latex command.  Defaults to @command{latex}.
By default, @command{configure} will search for this tool.

@item PSLATEX
PS Latex command.  Defaults to @command{pslatex}.
By default, @command{configure} will search for this tool.

@item PDFLATEX
PDF Latex command.  Defaults to @command{pdflatex}.
By default, @command{configure} will search for this tool.

@item LATEX2HTML
LaTeX to HTML command.  Defaults to @command{latex2html}.
By default, @command{configure} will search for this tool.

@item DVI2PS
DVI to PS conversion command.  Defaults to @command{dvips}.
By default, @command{configure} will search for this tool.

@item DVIPDF
DVI to PDF conversion command.  Defatuls to @command{dvipdf}.
By default, @command{configure} will search for this tool.

@item PS2PDF
PS to PDF conversion command.  Defaults to @command{ps2pdf}.
By default, @command{configure} will search for this tool.

@item GNUPLOT
GNU plot command.  Defaults to @command{gnuplot}.
By default, @command{configure} will search for this tool.

@item GROFF
Roff formatting command.  Default @command{groff}.
By default, @command{configure} will search for this tool.

@item FIG2DEV
Fig to graphics format command.  Defaults to @command{fig2dev}.
By default, @command{configure} will search for this tool.

@item CONVERT
Graphics format conversion command.  Defaults to @command{convert}.
By default, @command{configure} will search for this tool.

@item PS2EPSI
PS to EPSI conversion command.  Defaults to @command{ps2epsi}.
By default, @command{configure} will search for this tool.

@item EPSTOPDF
EPS to PDF conversion command. Defaults to @command{epstopdf}.
By default, @command{configure} will search for this tool.

@item MD5SUM
MD5 sum command, @manref{md5sum(1)}.
This command is used to checksum tarballs when creating FTP archive respositories.
By default, @command{configure} will search for this tool.
It normally defaults to @command{md5sum}.

@item SHA1SUM
SHA1 sum command, @manref{sha1sum(1)}.
This command is used to checksum tarballs when creating FTP archive respositories.
By default, @command{configure} will search for this tool.
It normally defaults to @command{sha1sum}.

@item SHA256SUM
SHA256 sum command, @manref{sha256sum(1)}.
This command is used to checksum tarballs when creating FTP archive respositories.
By default, @command{configure} will search for this tool.
It normally defaults to @command{sha256sum}.

@item DEB_BUILD_ARCH
Debian build architecture.
This variable is used for building Debian packages.
The default is the @command{autoconf} build architecture.

@item DEB_BUILD_GNU_CPU
Debian build cpu.
This variable is used for building Debian packages.
The default is the @command{autoconf} build cpu.

@item DEB_BUILD_GNU_SYSTEM
Debian build os.
This variable is used for building Debian packages.
The default is the @command{autoconf} build os.

@item DEB_BUILD_GNU_TYPE
Debian build alias.
This variable is used for building Debian packages.
The default is the @command{autoconf} build alias.

@item DEB_HOST_ARCH
Debian host architecture.
This variable is used for building Debian packages.
The default is the @command{autoconf} host architecture.

@item DEB_HOST_GNU_CPU
Debian host cpu.
This variable is used for building Debian packages.
The default is the @command{autoconf} host cpu.

@item DEB_HOST_GNU_SYSTEM
Debian host os.
This variable is used for building Debian packages.
The default is the @command{autoconf} host os.

@item DEB_HOST_GNU_TYPE
Debian host alias.
This variable is used for building Debian packages.
The default is the @command{autoconf} host alias.

@end vtable

@subsubsection Build
To build from the tar ball, @pxrefman{Building from the Tar Ball}.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Building
@section Building
@cindex building

The @cite{@value{PACKAGE_TITLE}} can be built from source RPM, Debian DSC, or tarball.  Any of these
approaches requires access to source code.  Note, however, that you must be entitled to receive
source code to be able to build using any of these techniques.  @cite{OpenSS7} does not normally
permit access to source code beginning with the 1.1.1 release.  Only sponsors of the @cite{OpenSS7
Project} and some clients of @cite{OpenSS7 Corporation} are permitted access to source.

@menu
* Building from the Source RPM::	the next best approach
* Building from the Debian DSC::	the next best approach for Debian
* Building from the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Building from the Source RPM
@subsection Building from the Source RPM
@cindex building, source srpm
@cindex source rpms

If you have downloaded the necessary source RPM (@pxrefman{Downloading the Source RPM}), then the
following instructions will rebuild the binary RPMs on your system.  Once the binary RPMs are
rebuilt, you may install them as described above (@pxrefman{Installing the Binary RPM}).

@noindent
The source RPM is rebuilt to binary RPMs as follows:

@cartouche
@smallexample
% wget https://www.openss7.org/repo/@-rpms/@-SRPMS/@-@value{PACKAGE}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
% rpmbuild --rebuild -vv @value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}.src.rpm
@end smallexample
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to tweak the resulting
binaries, @pxrefman{Configuring the Source RPM}.  These options are provided on the @manpage{rpm(8)}
command line.  For example:

@cartouche
@smallexample
% rpmbuild --rebuild -vv --target athlon-redhat-linux \ 
  --define "_kversion @value{_kversion}" \ 
  -- @value{PACKAGE}-@-@value{VERSION}-@-@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
@end smallexample
@end cartouche

@noindent
will rebuild binary RPM
for the @samp{@value{_kversion}} kernel
for the @samp{athlon} architecture.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary RPM, @pxrefman{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Building from the Debian DSC
@subsection Building from the Debian DSC
@cindex building, source dscs
@cindex source dscs

If you have downloaded the necessary Debian DSC (@pxrefman{Downloading the Debian DSC}), then the
following instructions will rebuild the binary DEBs on your system.  Once the binary DEBs are
rebuilt, you may install them as described above (@pxrefman{Installing the Debian DEB}).

@noindent
The Debian DSC is rebuilt to binary DEBs as follows:

@cartouche
@smallexample
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}@-.dsc
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}-@-@value{PACKAGE_DEBRELEASE}@-.tar@-.gz
% dpkg-buildpackage -v @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end smallexample
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to tweak the resulting
binaries, @pxrefman{Configuring the Debian DSC}.  These options are provided in the environment variable
@var{BUILD_DPKGOPTIONS} and have the same form as the options to @file{configure},
@pxrefman{Configuring the Tar Ball}.  For example:

@cartouche
@smallexample
% BUILD_DEBOPTIONS='
        --with-k-release=@value{_kversion}
        --host=athlon-debian-linux-gnu'
  dpkg-buildpackage -v \
  @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end smallexample
@end cartouche

@noindent
will rebuild binary DEB
for the @samp{@value{_kversion}} kernel
for the @samp{athlon} architecture.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary DEB, @pxrefman{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Building from the Tar Ball
@subsection Building from the Tar Ball
@cindex building, tar ball
@cindex tar ball

If you have downloaded the tar ball (@pxrefman{Downloading the Tar Ball}), then the following
instructions will rebuild the package on your system.  (Note that the build process does not
required @command{root} privilege.)

@subsubsection Native Build

Following is an example of a native build against the running kernel:

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@-@value{VERSION}@-.tar@-.xz
% tar -xJvf @value{PACKAGE}-@value{VERSION}.tar.xz
% pushd @value{PACKAGE}-@value{VERSION}
% ./configure
% make
% popd
@end smallexample
@end cartouche

@subsubsection Cross-Build

Following is an example for a cross-build.  The kernel release version must always be specified for
a cross-build.@footnote{Because it @emph{is} a cross-build, the kernel version on the build machine
is unlikely to be the kernel version of the target machine, except by coincidence.}  If you are
cross-building, specify the root for the build with environment variable @var{DESTDIR}.  The
cross-compile host must also be specified if different from the build host.  Either the compiler and
other tools must be in the usual places where GNU @manpage{autoconf(1)} can find them, or they must
be specified with declarations such as @samp{CC=/usr/@-lib/@-ppc-@-linux/@-gcc} on the
@file{configure} command line.

@cartouche
@smallexample
% wget https://www.openss7.org/repo/tarballs/@-@value{PACKAGE}-@-@value{VERSION}@-.tar@-.xz
% tar -xJvf @value{PACKAGE}-@-@value{VERSION}@-.tar@-.xz
% pushd @value{PACKAGE}-@-@value{VERSION}
% ./configure DESTDIR="/some/@-other/@-root" \ 
	--with-k-release=2.4.18 --host sparc-linux
% make
% popd
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Installing
@section Installing
@cindex installing

@menu
* Installing with YUM::			the easiest YUM based system approach
* Installing with ZYPPER::		the easiest ZYPPER based system approach
* Installing with URPMI::		the easiest URPMI based system approach
* Installing with APT::			the easiest APT based system approach
* Installing the Binary RPM::		the easiest approach
* Installing the Debian DEB::		the easiest approach for Debian
* Installing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Installing with YUM
@subsection Installing with YUM
@cindex installing, yum
@cindex yum

If you have set up the necessary repository definitions (@pxrefman{Setting up YUM}), then the
following instructions will install the RPMs on your
system.@footnote{For additional information on @manpage{yum(8)}, see @manref{yum(8)}.}
The repository includes groups (patterns) and virtual packages that ease the installation and
removal of kernel modules, libraries and utilities.

To install the @cite{@value{PACKAGE_TITLE}} run-time components for a single-kernel distribution
installation, use (one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}
% sudo yum install @@@value{PACKAGE}
% sudo yum groupinstall @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To include the @cite{@value{PACKAGE_TITLE} JAIN} Java components, use (one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}-java
% sudo yum install @@@value{PACKAGE}-java
% sudo yum groupinstall @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel run-time component to the installation, use
(one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}-$(uname -r)
% sudo yum install @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To install the @cite{@value{PACKAGE_TITLE}} development components for a single-kernel distribution,
use (one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}-devel
% sudo yum install @@@value{PACKAGE}-devel
% sudo yum groupinstall @value{PACKAGE}-devel
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel development component to the installation,
use (one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}-devel-$(uname -r)
% sudo yum install @value{PACKAGE}-devel-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To add @cite{@value{PACKAGE_TITLE}} development documentation, use (one of):

@cartouche
@smallexample
% sudo yum install @value{PACKAGE}-doc @value{PACKAGE}-javadoc
% sudo yum install @@@value{PACKAGE}-doc @value{PACKAGE}-javadoc
% sudo yum groupinstall @value{PACKAGE}-doc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Installing with ZYPPER
@subsection Installing with ZYPPER
@cindex installing, zypper
@cindex zypper

If you have set up the necessary repository definitions (@pxrefman{Setting up ZYPPER}), then the
following instructions will install the RPMs on your
system.@footnote{For additional information on @manpage{zypper(8)}, see @manref{zypper(8)}.}
The repository includes groups (patterns) and virtual packages that ease the installation and
removal of kernel modules, libraries and utilities.

To install the @cite{@value{PACKAGE_TITLE}} run-time components for a single-kernel distribution
installation, use (one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}
% sudo zypper install -t pattern @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To include the @cite{@value{PACKAGE_TITLE} JAIN} Java components, use (one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}-java
% sudo zypper install -t pattern @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel run-time component to the installation, use
(one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}-$(uname -r)
% sudo zypper install @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To install the @cite{@value{PACKAGE_TITLE}} development components for a single-kernel distribution,
use (one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}-devel
% sudo zypper install -t pattern @value{PACKAGE}-devel
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel development component to the installation,
use (one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}-devel-$(uname -r)
% sudo zypper install @value{PACKAGE}-devel-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To add @cite{@value{PACKAGE_TITLE}} development documentation, use (one of):

@cartouche
@smallexample
% sudo zypper install @value{PACKAGE}-doc @value{PACKAGE}-javadoc
% sudo zypper install -t pattern @value{PACKAGE}-doc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Installing with URPMI
@subsection Installing with URPMI
@cindex installing, urpmi
@cindex urpmi

If you have set up the necessary repository definitions (@pxrefman{Setting up URPMI}), then the
following instructions will install the RPMs on your
system.@footnote{For additional information on @manpage{urpmi(8)}, see @manref{urpmi(8)}.}
The repository includes groups (patterns) and virtual packages that ease the installation and removal
of kernel modules, libraries and utilities.

To install the @cite{@value{PACKAGE_TITLE}} run-time components for a single-kernel distribution
installation, use (one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To include the @cite{@value{PACKAGE_TITLE} JAIN} Java components, use  (one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel run-time component to the installation, use
(one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}-$(uname -r)
% sudo urpmi @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To install the @cite{@value{PACKAGE_TITLE}} development components for a single-kernel distribution,
use (one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}-devel
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel development component to the installation,
use (one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}-devel-$(uname -r)
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To add @cite{@value{PACKAGE_TITLE}} development documentation, use (one of):

@cartouche
@smallexample
% sudo urpmi @value{PACKAGE}-doc @value{PACKAGE}-javadoc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Installing with APT
@subsection Installing with APT
@cindex installing, apt
@cindex apt

If you have set up the necessary repository definitions (@pxrefman{Setting up APT}), then the
following instructions will install the DEBs on your
system.@footnote{For additional information on @manpage{apt(8)}, see @manref{apt(8)}.}
The repository includes groups (patterns) and virtual packages that ease the installation and
removal of kernel modules, libraries and utilities.

To install the @cite{@value{PACKAGE_TITLE}} run-time components for a single-kernel distribution
installation, use (one
of):@footnote{Note that @manref{aptitude(8)} is not always available on systems supporting APT-RPM.}

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}
% sudo aptitude install @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To include the @cite{@value{PACKAGE_TITLE} JAIN} Java components, use  (one of):

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}-java
% sudo aptitude install @value{PACKAGE}-java
@end smallexample
@end cartouche


@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel run-time component to the installation, use
(one of):

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}-$(uname -r)
% sudo apt-get install @value{PACKAGE}-@value{_kversion}
% sudo aptitude install @value{PACKAGE}-$(uname -r)
% sudo aptitude install @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To install the @cite{@value{PACKAGE_TITLE}} development components for a single-kernel distribution,
use (one of):

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}-devel
% sudo aptitude install @value{PACKAGE}-devel
@end smallexample
@end cartouche

@noindent
To add an additional @cite{@value{PACKAGE_TITLE}} kernel development component to the installation,
use (one of):

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}-devel-$(uname -r)
% sudo aptitude install @value{PACKAGE}-devel-$(uname -r)
@end smallexample
@end cartouche

@noindent
Here, @samp{$(uname -r)} is simply a way of specifying the running kernel.  The value
@samp{@value{_kversion}} is just an example.  Use the specific kernel version that you want to add
to the installation.

To add @cite{@value{PACKAGE_TITLE}} development documentation, use (one of):

@cartouche
@smallexample
% sudo apt-get install @value{PACKAGE}-doc @value{PACKAGE}-javadoc
% sudo aptitude install @value{PACKAGE}-doc @value{PACKAGE}-javadoc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Installing the Binary RPM
@subsection Installing the Binary RPM
@cindex installing, binary rpms
@cindex binary rpms

If you have downloaded the necessary binary RPMs (@pxrefman{Downloading the Binary RPM}), or have
rebuilt binary RPMs using the source RPM (@pxrefman{Building from the Source RPM}), then the following
instructions will install the RPMs on your system.  For additional information on @manpage{rpm(8)},
see @manref{rpm(8)}.

@cartouche
@smallexample
% pushd RPMS/i686
% rpm -ihv @value{PACKAGE}-*-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end smallexample
@end cartouche

@noindent
You must have the correct binary RPMs downloaded or built for this to be successful.

Some of the packages are relocatable and can have final installation directories altered with the
@option{--relocate} option to @manpage{rpm(8)}, see @manref{rpm(8)}.
For example, the following will relocate the documentation and info directories:

@cartouche
@smallexample
% pushd RPMS/i686
% rpm -ihv \ 
        --relocate '/usr/share/doc=/usr/local/share/doc' \ 
        --relocate '/usr/share/info=/usr/local/share/info' \ 
        -- @value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end smallexample
@end cartouche

@noindent
The previous example will install the @file{@value{PACKAGE}-doc} package by will relocate the
documentation an info directory contents to the @file{/usr/local} version.

@c ----------------------------------------------------------------------------

@node Installing the Debian DEB
@subsection Installing the Debian DEB
@cindex installing, binary debs
@cindex binary debs

If you have downloaded the necessary Debian DEBs (@pxrefman{Downloading the Debian DEB}), or have
rebuild binary DEBs using the Debian DSC (@pxrefman{Building from the Debian DSC}), then the following
instructions will install the DEBs on your system.  For additional information see @manref{dpkg(8)}.

@cartouche
@smallexample
% pushd debian
% dpkg -iv @value{PACKAGE}-*_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_*.deb
@end smallexample
@end cartouche

@noindent
You must have the correct @file{.deb} files downloaded or build for this to be successful.@footnote{Depending
on the release, and if you have used option @samp{--enable-maintainer-mode} to @command{configure}
and have generated DEBs with @samp{make release}, you should be able to issue @samp{make
install-debs} from the build directory.}

@c ----------------------------------------------------------------------------

@node Installing the Tar Ball
@subsection Installing the Tar Ball
@cindex installing, tar ball
@cindex tar ball

After the build process (@pxrefman{Building from the Tar Ball}), installation only requires execution
of one of two @manpage{automake(1)} targets:

@table @asis
@item @samp{make install}
The @samp{install} @manpage{automake(1)} target will install all the components of the package.
Root privilege is required to successfully invoke this target.

@item @samp{make install-strip}
The @samp{install-strip} @manpage{automake(1)} target will install all the components of the
package, but will strip unnecessary information out of the objects and compress manual pages.  Root
privilege is required to successfully invoke this target.
@end table

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Removing
@section Removing
@cindex removing

@menu
* Removing with YUM::			the easiest YUM based system approach
* Removing with ZYPPER::		the easiest ZYPPER based system approach
* Removing with URPMI::			the easiest URPMI based system approach
* Removing with APT::			the easiest APT based system approach
* Removing the Binary RPM::		the easiest approach
* Removing the Debian DEB::		the easiest approach for Debian
* Removing the Source RPM::		the next best approach
* Removing the Debian DSC::		the next best approach for Debian
* Removing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Removing with YUM
@subsection Removing with YUM
@cindex removing, yum
@cindex yum

@cite{@value{PACKAGE_TITLE}} repositories support @manref{yum(8)} in @file{repo-md} XML format.  The
repository includes virtual packages that ease the removal of kernel modules, libraries and
utilities.

To remove all @cite{@value{PACKAGE_TITLE}} components, use (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}
$> sudo yum remove @@@value{PACKAGE}
$> sudo yum groupremove @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To remove just the @cite{@value{PACKAGE_TITLE} JAIN} Java component, use (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}-java
$> sudo yum remove @@@value{PACKAGE}-java
$> sudo yum groupremove @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} run-time components for a specific kernel, use (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}-$(uname -r)
$> sudo yum remove @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  Note also that @cite{@value{PACKAGE_TITLE}} does not install a kernel package for each and
every kernel version, nor is it normally necessary.  When the kernel run-time being removed is the
last kernel run-time, the remainder of the @cite{@value{PACKAGE_TITLE}} components will also be
removed.

To remove all @cite{@value{PACKAGE_TITLE}} development components, use (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}-develop
$> sudo yum remove @@@value{PACKAGE}-develop
$> sudo yum groupremove @value{PACKAGE}-develop
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} development components for a specific kernel, use (one
of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}-develop-$(uname -r)
$> sudo yum remove @value{PACKAGE}-develop-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  When the kernel development component being removed is the last kernel development
component, the remainder of the @cite{@value{PACKAGE_TITLE}} development components will also be
removed.

To remove just documentation components, use (one of):

@cartouche
@smallexample
$> sudo yum remove @value{PACKAGE}-doc @value{PACKAGE}-javadoc
$> sudo yum remove @@@value{PACKAGE}-doc
$> sudo yum groupremove @value{PACKAGE}-doc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Removing with ZYPPER
@subsection Removing with ZYPPER
@cindex removing, zypper
@cindex zypper

@cite{@value{PACKAGE_TITLE}} repositories support @manref{zypper(8)} in SUSE @file{repo-md} XML format.
The repository includes virtual packages that ease the removal of kernel modules, libraries and
utilities.

To remove all @cite{@value{PACKAGE_TITLE}} components, use (one of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To remove just the @cite{@value{PACKAGE_TITLE} JAIN} Java component, use (one of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} run-time components for a specific kernel, use (one of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}-$(uname -r)
$> sudo zypper remove @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  Note also that @cite{@value{PACKAGE_TITLE}} does not install a kernel package for each and
every kernel version, nor is it normally necessary.  When the kernel run-time being removed is the
last kernel run-time, the remainder of the @cite{@value{PACKAGE_TITLE}} components will also be
removed.

To remove all @cite{@value{PACKAGE_TITLE}} development components, use (one of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}-develop
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} development components for a specific kernel, use (one
of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}-develop-$(uname -r)
$> sudo zypper remove @value{PACKAGE}-develop-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  When the kernel development component being removed is the last kernel development
component, the remainder of the @cite{@value{PACKAGE_TITLE}} development components will also be
removed.

To remove just documentation components, use (one of):

@cartouche
@smallexample
$> sudo zypper remove @value{PACKAGE}-doc @value{PACKAGE}-javadoc
@end smallexample
@end cartouche

@c ----------------------------------------------------------------------------

@node Removing with URPMI
@subsection Removing with URPMI
@cindex removing, urpmi
@cindex urpmi

@cite{@value{PACKAGE_TITLE}} repositories support @manref{urpmi(8)} in @file{hdlist} format.  The
repository includes virutal packages that ease the removal of kernel modules, libraries and
utilities.

To remove all @cite{@value{PACKAGE_TITLE}} components, use (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}
@end smallexample
@end cartouche

@noindent
To remove just the @cite{@value{PACKAGE_TITLE} JAIN} Java component, use (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}-java
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} run-time components for a specific kernel, use (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}-$(uname -r)
$> sudo urpme @value{PACKAGE}-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  Note also that @cite{@value{PACKAGE_TITLE}} does not install a kernel package for each and
every kernel version, nor is it normally necessary.  When the kernel run-time being removed is the
last kernel run-time, the remainder of the @cite{@value{PACKAGE_TITLE}} components will also be
removed.

To remove all @cite{@value{PACKAGE_TITLE}} development components, use (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}-develop
@end smallexample
@end cartouche

@noindent
To remove the @cite{@value{PACKAGE_TITLE}} development components for a specific kernel, use (one
of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}-develop-$(uname -r)
$> sudo urpme @value{PACKAGE}-develop-@value{_kversion}
@end smallexample
@end cartouche

@noindent
Where, @samp{$(uname -r)} will remove for the running kernel.  @samp{@value{_kversion}} is just an
example.  When the kernel development component being removed is the last kernel development
component, the remainder of the @cite{@value{PACKAGE_TITLE}} development components will also be
removed.

To remove just documentation components, use (one of):

@cartouche
@smallexample
$> sudo urpme @value{PACKAGE}-doc @value{PACKAGE}-javadoc
@end smallexample
@end cartouche

Of course, you are welcome to use a GUI package manager, such as @manpage{rpmdrake(8)}.

@c ----------------------------------------------------------------------------

@node Removing with APT
@subsection Removing with APT
@cindex removing, apt
@cindex apt

@c ----------------------------------------------------------------------------

@node Removing the Binary RPM
@subsection Removing the Binary RPM
@cindex removing, binary rpms
@cindex binary rpms

To remove an installed version of the binary RPMs (whether obtained from the @value{PACKAGE_TITLE}
binary RPM releases, or whether created by the source RPM), execute the following command:

@cartouche
@smallexample
% rpm -evv $(rpm -qa '*@value{PACKAGE}*') 2>&1 | tee erase.log
@end smallexample
@end cartouche

@noindent
This should uninstall all installed @file{@value{PACKAGE_NAME}} RPMs from your
system.@footnote{Depending on the release, and if you have used option
@samp{--enable-maintainer-mode} to @command{configure} and have generated RPMs with @samp{make
release}, you should be able to issue @samp{make uninstall-rpms} from the build directory to remove
all installed binary rpms belonging to the build release.} Note that this command may also be used
for any system based on @manref{rpm(8)} regardless of whether the RPMs where installed using
@manref{rpm(8)}, @manref{yum(8)} or @manref{zypper(8)}.

For more information see @manref{rpm(8)}.

@c ----------------------------------------------------------------------------

@node Removing the Debian DEB
@subsection Removing the Debian DEB
@cindex removing, binary debs
@cindex binary debs

To remove an installed version of the Debian DEB (whether obtained from the @value{PACKAGE_TITLE}
binary DEB releases, or whether created by the Debian DSC), execute the following command:

@cartouche
@smallexample
% dpkg -ev $(dpkg -l | grep '^@value{PACKAGE}') 2>&1 | tee erase.log
@end smallexample
@end cartouche

@noindent
This should uninstall all installed @file{@value{PACKAGE_NAME}} DEBs from your
system.@footnote{Depending on the release, and if you have used option
@samp{--enable-maintainer-mode} to @command{configure} and have generated DEBs with @samp{make
release}, you should be able to issue @samp{make uninstall-debs} from the build directory to remove
all installed Debian debs belonging to the build release.}  Note that this command may also be used
for any system based on @manref{dpkg(1)} regardless of whether the DEBs were installed using
@manref{dpkg(1)} or @manref{apt(8)}.

For more information see @manref{dpkg(1)}.

@c ----------------------------------------------------------------------------

@node Removing the Source RPM
@subsection Removing the Source RPM
@cindex removing, source srpm
@cindex source rpms

To remove all the installed binary RPM build from the source RPM, see @refman{Removing the Binary RPM}.
Then simply remove the binary RPM package files and source RPM file.  A command such as:

@cartouche
@smallexample
% find / -name '@value{PACKAGE}-*.rpm' -type f -print0 | xargs --null rm -f
@end smallexample
@end cartouche

@noindent
This should remove all @file{@value{PACKAGE_NAME}} RPMs from your system.@footnote{Depending on the
release, you might be able to issue @samp{make remove-rpms} from the build directory.}

@c ----------------------------------------------------------------------------

@node Removing the Debian DSC
@subsection Removing the Debian DSC
@cindex removing, source dscs
@cindex source dscs

To remove all the installed binary DEB build from the Debian DSC, see @refman{Removing the Debian DEB}.
Then simply remove the binary DEB package files and Debian DSC file.  A command such as:

@cartouche
@smallexample
% find / \( -name '@value{PACKAGE}-*.deb' \
         -o -name '@value{PACKAGE}-*.dsc' \
         -o -name '@value{PACKAGE}-*.tar.* \
         \) -type f -print0 | xargs --null rm -f
@end smallexample
@end cartouche

@noindent
This should remove all @file{@value{PACKAGE_NAME}} DEBs, DSCs and TARs from your
system.@footnote{Depending on the release, you might be able to issue @samp{make remove-debs} from
the build directory.}

@c ----------------------------------------------------------------------------

@node Removing the Tar Ball
@subsection Removing the Tar Ball
@cindex removing, tar ball
@cindex tar ball

To remove a version installed from tar ball, change to the build directory where the package was
built and use the @samp{uninstall} @manpage{automake(1)} target as follows:

@cartouche
@smallexample
% cd /usr/src/@value{PACKAGE}
% make uninstall
% cd ..
% rm -fr @value{PACKAGE}-@value{VERSION}
% rm -f @value{PACKAGE}-@value{VERSION}.tar.bz2
% rm -f @value{PACKAGE}-@value{VERSION}.tar.xz
@end smallexample
@end cartouche

If you have inadvertently removed the build directory and, therefore, no longer have a configured
directory from which to execute @samp{make uninstall}, then perform all of the steps for
configuration and installation (@pxrefman{Installing the Tar Ball}) except the final installation and
then perform the steps above.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Loading
@section Loading
@cindex loading

@subsection Normal Module Loading

When @value{PACKAGE_TITLE} installs, modules and drivers belonging to @value{pkgtype} packages are
normally configured for demand loading.  The @samp{install} and @samp{install-strip}
@manpage{automake(1)}
@mkindex all
@mkindex install
@mkindex install-strip
targets will make the necessary changes to the @file{/etc/@-modules@-.conf} file and place the
modules in an appropriate place in
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{package}}.
The @samp{make install} process should have copied the kernel module files @file{streams-*.o} to the
directory
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{package}}.
This means that to load any of these modules, you can simply execute, for example, @samp{modprobe
stream-@var{somedriver}}.@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is
only an example.}

@subsubsection Linux Fast-STREAMS Module Loading

The @file{@value{PACKAGE}} demand load system supports both the old @command{kerneld} and the new
@command{kmod} mechanisms for demand loading kernel modules.

The convention for @file{@value{PACKAGE}} kernel loadable object files is:
@itemize @bullet
@item Their name start with "streams-".
@item They are placed in @file{/@-lib@-/@-modules@-/@-@value{_kversion}@-/@-streams@-/@-}, where @samp{@value{_kversion}} is an example kernel version.
@pgindex /lib/@-modules/@-@value{_kversion}/@-streams/@-
@end itemize

If your kernel has been built using the @file{kerneld} daemon, then @file{@value{PACKAGE_NAME}}
kernel modules will automatically load as soon as the @acronym{STREAMS} module is pushed or the driver
is opened.  The @samp{make install} process makes the necessary changes to the
@file{@value{_rootdir}/@-etc/@-modules.conf} file.  After the install, you will see lines like the
following added to your @file{@value{_rootdir}/@-etc/@-modules.conf} file:

@cartouche
@smallexample
prune modules.@value{pkgexample}
if -f /lib/modules/$(uname -r)/modules.@value{pkgexample}
include /lib/modules/$(uname -r)/modules.@value{pkgexample}
endif
@end smallexample
@end cartouche

@noindent
which will provide for demand loading of the modules if they have been built and installed for the
running kernel.  The @file{/lib/@-modules/@-@command{$(uname -r)}/@-modules.@value{pkgexample}} file
looks like this:

@cartouche
@smallexample
alias char-major-245  streams-@var{some_driver}
alias char-major-246  streams-@var{other_driver}
@end smallexample
@end cartouche

Note that @acronym{STREAMS} modules are not listed in this file, but will be loaded by name using
@file{kerneld} if available.

@cite{Linux Fast-STREAMS} has a wider range of kernel module loading mechanisms than previously provided.
For mechanisms used for kernel module loading under @cite{Linux
Fast-STREAMS}, @xref{Top, About This Manual, , STREAMS, Linux Fast-STREAMS Reference Manual}.

@node Maintenance
@section Maintenance

@menu
* Makefile Targets::
@end menu

@node Makefile Targets
@subsection Makefile Targets

@manpage{automake(1)} has many targets, not all of which are obvious to the casual user.  In
addition, @cite{@value{PACKAGE_TITLE}} @manpage{automake(1)} files have additional rules added to
make maintaining and releasing a package somewhat easier.  This list of targets provides some help
with what targets can be invoked, what they do, and what they hope to achieve.  The available
targets are as follows:

@menu
* User Targets::
* Maintainer Targets::
* Clean Targets::
* Manual Page Targets::
* Release Targets::
* Logging Targets::
* Problem Report Targets::
* Release Archive Targets::
* RPM Build Targets::
* Debian Build Targets::
* Documentation Targets::
@end menu

@node User Targets
@subsubsection User Targets

The following are normal targets intended to be invoked by installers of the package.  They are
concerned with compiling, checking the compile, installing, checking the installation, and
removing the package.

@table @samp
@item [all]
@mkindex all
This is also the default target.  It compiles the package and all @value{pkgtype} packages selected
by @file{configure}.  This is performed after configuring the source with @samp{configure}.  A
@file{Makefile} stub is provided so that if the package has not had @manpage{autoreconf(1)} run
(such as when checked out from CVS, the package will attempt to run @samp{autoreconf -fiv}.

All @cite{OpenSS7 Project} packages are configured without maintainer mode and without dependency
tracking by default.  This speeds compilation of the package for one-time builds.  This also means
that if you are developing using the source package (edit-compile-test cycle), changes made to
source files will not cause the automatic rebuilding due to dependencies.  There are two ways to
enable dependency tracking: specify @option{--enable-maintainer-mode} to @file{configure}; or,
specify @option{--enable-dependency-tracking} to @file{configure}.  I use the former during my
edit-compile-test cycle.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.

@item check
@mkindex check
All @cite{OpenSS7 Project} @value{pkgtype} packages provide check scripts for the check target.
This step is performed after compiling the package and will run all of the @samp{check} programs
against the compiled binaries.  Which checks are performed depends on whether
@option{--enable-maintainer-mode} was specified to @file{configure}.  If in maintainer mode,
checks that assist with the release of the package will be run (such as checking that all manual
pages load properly and that they have required sections.)  We recommend running the check stage
before installing, because it catches problems that might keep the installed package from
functioning properly.

Another way to enable the greater set of checks, without invoking maintainer mode, is to specify
@option{--enable-checks} to @file{configure}.  For more information, see @refman{Pre-installation
Checks}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target, although the functions
performed are customized for the @cite{OpenSS7 Project}.  This target does not require root
privilege.

@item install
@itemx install-strip
@mkindex install
@mkindex install-strip
The @samp{install} target installs the package by installing each @value{pkgtype} package.  This
target also performs some actions similar to the pre- and post-install scripts used by packaging
tools such as @manpage{rpm(8)} or @manpage{dpkg(1)}.  The @samp{install-strip} target strips
unnecessary symbols from executables and kernel modules before installing.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target requires root
privilege.

@item installcheck
@mkindex installcheck
All @cite{OpenSS7 Project} packages provide test scripts for the @samp{installcheck} target.  Test
scripts are created and run using @command{autotest} (part of the @manpage{autoconf(1)} package).
Which test suites are run and how extensive they are depends on whether
@option{--enable-maintainer-mode} was specified to @file{configure}.  When in maintainer mode,
all test suites will be run.  When not in maintainer mode, only a few post-install checks will be
performed, but the test suites themselves will be installed in
@file{@value{_libexecdir}/@value{package}}@footnote{@file{@value{_libexecdir}/@value{package}}
is just an example, the actual location is @file{$@{libexecdir@}/$@{PACKAGE@}}, which varies from
distribution to distribution (as some distributions such as Mandriva do not have a libexec
directory).} for later use.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege.  Tests requiring root privilege will be skipped when run as a regular user.  Tests
requiring regular account privileges will be skipped when run as root.

@item retest
@mkindex retest
To complement the @samp{installcheck} target above, all @cite{OpenSS7 Project} packages provide the
@samp{retest} target as a means to rerun failed conformance test suite test cases.  The @samp{retest}
target is provided because some test cases in the test suites have delicate timing considerations
that allow them to fail sporadically.  Invoking this target will retest the failed cases until no
cases that are not expected failures remain.

This is an @cite{OpenSS7 Project} specific makefile target.  As with @samp{installcheck}, this
target might require root privilege.  Tests requiring root privilege will be skipped when run as a
regular user.  Tests requiring regular account privileges will be skipped when run as root.

@item uninstall
@mkindex uninstall
This target will reverse the steps taken to install the package.  This target also performs pre- and
post- erase scripts used by packaging tools such as @cite{rpm} or @cite{dpkg}.  You need to have a
configured build directory from which to execute this target, however, you do not need to have
compiled any of the files in that build directory.@footnote{Therefore, it is possible to download
the package, configure it, and then uninstall it.  This is handy if you do not have the sources used
to build and install the package immediately available.}

The @samp{uninstall} target unfortunately removes add-on packages in the same order in which they
were installed.  This is not good for the @cite{OpenSS7 Master Package}, where the @samp{remove}
target should be used instead.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target requires root
privilege.

@item remove
@mkindex remove
This target is like @samp{uninstall} with the exception that it removes add-on packages in the
reverse order that installation was performed.@footnote{This is useful from the @cite{OpenSS7 Master
Package}.}

This is an @cite{OpenSS7 Project} specific makefile target.  This target requires root privilege.
@end table

@node Maintainer Targets
@subsubsection Maintainer Targets

The following targets are targets intended for use by maintainers of the package, or those
responsible for release and packaging of a derivative work of the package.  Some of these targets
are only effective when maintainer mode has been invoked (@option{--enable-maintainer-mode} specified
to @file{configure}.)

@table @samp
@item dist
@mkindex dist
Creates a distribution package (tarball) in the top level build directory.  @cite{OpenSS7 Project}
packages distribute two archives: a @samp{gzip tar} archive and a @samp{bzip tar} archive.  These
archives will have the name @file{@value{PACKAGE}-@value{VERSION}.tar.bz2} and
@file{@value{PACKAGE}-@value{VERSION}.tar.xz}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.

@item distcheck
@mkindex distcheck
This target is intended for use when releasing the package.  It creates the @manpage{tar(1)} archives
above and then unpacks the tarball in a source directory, configures in a separate build directory,
compiles the package, installs the package in a separate install directory, tests the install
package to ensure that some components work, and, finally, uses the unpacked source tree to build
another tarball.  If you have added or removed files from the package, this is a good way to ensure
that everything is still stable for release.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.
@end table

@node Clean Targets
@subsubsection Clean Targets

@table @samp
@item mostlyclean
@mkindex mostlyclean
Cleans out most of the files from the compile stage.  This target is helpful if you have not enabled
dependency tracking and need to recompile with changes.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.
This target does not require root privilege.

@item clean
@mkindex clean
Cleans all the files from the build directory generated during the @samp{make [all]} phase.  It does
not, however, remove files from the directory left there from the @file{configure} run.  Use the
@samp{distclean} target to remove those too.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item distclean
@mkindex distclean
This target cleans out the directories left behind by @samp{distcheck} and removes all the
@file{configure} and generated files from the build directory.  This will effectively remove all
the files in the build directory, with the except of files that belong to you or some other process.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item maintainer-clean
@mkindex maintainer-clean
This target not only removes files from the build directory, it removes generated files from the
source directory as well.  Care should be taken when invoking this target, because it removes files
generated by the maintainer and distributed with the archive that might require special tools to
regenerate.  These special tools might only be available to the maintainer.@footnote{Theoretically
this is true, however, the @cite{OpenSS7 Project} does not use any maintainer programs that are not
generally available (i.e. open source).}
It also means that you probably need a full blown Linux system to rebuild the package. For more
information, see @refman{Downloading from CVS}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item check-clean
@mkindex check-clean
This target removes log files left behind by the @samp{check} target.  By default, the check scripts
append to log files in the top level build directory.  This target can be used to clean out those
log files before the next run.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Manual Page Targets
@subsubsection Manual Page Targets

The following targets are used to build, install and uninstall just the manual pages from the
distribution.  These targets are good for creating a distribution of just the manual pages.  When
building atop multiple packages, these targets recurse down through each package.

@table @samp
@item mans
@mkindex mans
Build all of the manual pages.  This involves performing parameter substitution on manual pages and
optionally cooking the manual pages if @option{--with-cooked-manpages} was requested during
configuration.

@item install-mans
@mkindex install-mans
Installs the manual pages under @var{DESTDIR}.  Specify @var{DESTDIR} to place the manual pages
wherever you see fit.  If @var{DESTDIR} is not specified on the command line, the manual pages will
be installed in the normal installation directory.

@item uninstall-mans
@mkindex uninstall-mans
Uninstalls the manual pages from @var{DESTDIR}.  Specify @var{DESTDIR} to indicate where to remove
the manual pages from.  If @var{DESTDIR} is not specified on the command line, the manual pages will
be removed from the normal installation directory.
@end table

@node Release Targets
@subsubsection Release Targets

The following are targets used to generate complete releases into the package distribution
directory.  These are good for unattended and NFS builds, which is what I use them for.  Also, when
building from atop multiple packages, these targets also recurse down through each package.

@table @samp
@item release
@mkindex release
Build all of the things necessary to generate a release.  On an @manpage{rpm(8)} system this is the
distribution archives, the source rpm, and the architecture dependent and architecture independent
binary rpms.  All items are placed in the package distribution directory that can be specified with
the @option{--with-pkg-distdir=DIR} option to @file{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release
@mkindex forced-release
The @samp{release} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign
@mkindex release-sign
You will be prompted for a password, unless to specify it to make with the @var{GNUPGPASS} variable.
For unattended or non-interactive builds with signing, you can do that as: @samp{make
GNUPGPASS=mypasswd release-sign}

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release-sign
@mkindex forced-release-sign
The @samp{release-sign} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean
@mkindex release-clean
This target will remove all distribution files for the current package from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Logging Targets
@subsubsection Logging Targets

For convenience, to log the output of a number of targets to a file, log targets are defined.  The
log file itself is used as the target to make, but make invokes the target minus a @file{.log}
suffix.  So, for example, to log the results of target @samp{foo}, invoke the target @samp{foo.log}.
The only target that this does not apply to is @samp{compile.log}.  When you invoke the target
@samp{compile.log} a simple @manpage{automake(1)} is invoked and logged to the file @file{compile.log}.
The @samp{foo.log} rule applies to all other targets.  This does not work for all targets, just a
selected few.@footnote{Note that because logging targets invoke a pipe, @manpage{automake(1)} does not
return the correct return status (always returns success if the @manpage{tee(1)} operation is
successful).  Therefore, these targets should not be invoked by scripts that need to use the return
value from @manpage{automake(1)}.} Following are the logging targets:

@subsubheading Common Logging Targets

Common logging targets correspond to normal user @manpage{automake(1)} makefile targets as follows:

@table @samp
@item compile.log
@mkindex compile.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{[all]}.

@item check.log
@mkindex check.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{check}.

@item install.log
@mkindex install.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{install}.

@item installcheck.log
@mkindex installcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{installcheck}.

@item uninstall.log
@mkindex uninstall.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{uninstall}.

@item remove.log
@mkindex remove.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.
@end table

@subsubheading Maintainer Logging Targets

Maintainer logging targets correspond to maintainer mode @manpage{automake(1)} makefile targets as
follows:

@table @samp
@item dist.log
@mkindex dist.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{dist}.

@item distcheck.log
@mkindex distcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{distcheck}.

@item srpm.log
@mkindex srpm.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{srpm}
target.

@item rebuild.log
@mkindex rebuild.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{rebuild}
target.

@item resign.log
@mkindex resign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{resign}
target.

@item release.log
@mkindex release.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{release}
target.

@item release-sign.log
@mkindex release-sign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{release-sign}
target.
@end table

If you want to add one, simply add it to @var{LOGGING_TARGETS} in @file{Makefile.am}.

@node Problem Report Targets
@subsubsection Problem Report Targets

To ease problem report generation, all logging targets will automatically generate a problem report
suitable for mailing in the file @file{@i{target}.pr} for target @samp{@i{target}.log}.  This
problem report file is in the form of an email and can be sent using the included @command{send-pr}
script or by invoking the @samp{send-pr} makefile target.

There are two additional problem report targets:

@table @samp
@item pr
@mkindex pr
The @samp{pr} target is for independently generating a problem report outside of the build or
installation process.  The target will automatically generate a problem report skeleton suitable for
editing and mailing in the file @file{problem.pr}.  This problem report file is in the form of an
email and can be edited and sent directly, or sent using the included @command{send-pr} script or
by invoking the @samp{send-pr} target.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item send-pr
@mkindex send-pr
The @samp{send-pr} target is for finalizing and mailing a problem report generated either inside or
outside the build and installation process.  The target will automatically finalize and mail the
@file{problem.pr} problem report if it has changed since the last time that @samp{send-pr} was
invoked.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege (unless the problem report file was generated as root).
@end table

@node Release Archive Targets
@subsubsection Release Archive Targets

The following targets are used to generate and clean distribution archive and signature files.
Whereas the @samp{dist} target affects archives in the top build directory, the
@samp{release-archive} targets affects archives in the package distribution directory (either the
top build directory or that specified with @option{--with-pkg-distdir=DIR} to @file{configure}).

You can change the directory to which packages are distributed by using the
@option{--with-pkg-distdir=DIR} option to @file{configure}.  The default directory is the top build
directory.

@table @samp
@item release-archives
@mkindex release-archives
This target creates the distribution archive files if they have not already been created.  This not
only runs the @samp{dist} target, but also copies the files to the distribution directory, which, by
default is the top build directory.

The files generated are named:

@file{@value{PACKAGE}-@value{VERSION}.tar.bz2}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.xz}

You can change this distribution directory with the @option{--with-pkg-distdir} option to
@file{configure}.  See @samp{./configure --help} for more details on options.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign-archives
@mkindex release-sign-archives
This target is like @samp{release-archives}, except that it also signs the archives using a
@cite{GPG} detached signature.  You will be prompted for a password unless you pass the
@var{GNUPGPASS} variable to make.  For automated or unattended builds, pass the @var{GNUPGPASS}
variable like so:

@samp{make GNUPGPASS=mypasswd release-sign-archives}

Signature files will be named:

@file{@value{PACKAGE}-@value{VERSION}.tar.bz2.asc}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.xz.asc}

These files will be moved to the package distribution directory with the plain text archives.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean-archives
@mkindex release-clean-archives
This target will clean the release archives and signature files from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node RPM Build Targets
@subsubsection RPM Build Targets

On @manpage{rpm(8)} systems, or systems sporting rpm packaging tools, the following targets are used to
generate @manpage{rpm(8)} release packages.  The epoch and release number can be controlled by the
contents of the @file{.rpmepoch} and @file{.rpmrelease} files, or with the
@option{--with-rpm-epoch=EPOCH} and @option{--with-rpm-release=RELEASE} options to @file{configure}.
See @samp{configure --help} for more information on options.  We always use release number @samp{1}.
You can use release numbers above @samp{1}.

@table @samp
@item srpm
@mkindex srpm
This target generates the source rpm for the package (without signing the source rpm).  The source
rpm will be named: @file{@value{PACKAGE}-@value{VERSION}-1.srpm}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rpms
@mkindex rpms
This target is responsible for generating all of the package binary rpms for the architecture.  The
binary rpms will be named:

@file{@value{PACKAGE}-*-@value{VERSION}-1.*.rpm}

where the stars indicate the subpackage and the architecture.  Both the architecture specific
subpackages (binary objects) and the architecture independent (@file{.noarch}) subpackages will be
built unless the the former was disabled with the option @option{--disable-arch}, or the later with
the option @option{--disable-indep}, passed to @file{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sign
@itemx srpm-sign
@mkindex sign
@mkindex srpm-sign
These two targets are the same.  When invoked, they will add a signature to the source rpm file,
provided that the file does not already have a signature.  You will be prompted for a password if a
signature is required.  Automated or unattended builds can be achieved by using the @command{emake}
expect script, included in
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rebuild
@mkindex rebuild
This target accepts searches out a list of kernel names from the @file{$@{DESTDIR@}/lib/modules}
directory and builds rpms for those kernels and for each of a set of architectures given in the
@var{AM_RPMTARGETS} variable to make.  This is convenience target for building a group of rpms on a
given build machine.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item resign
@mkindex resign
This target will search out and sign, with a @cite{GPG} signature, the source rpm, and all of the
binary rpms for this package that can be found in the package distribution directory.  This target
will prompt for a @cite{GPG} password.  Automated or unattended builds can be achieved with the
@command{emake} expect script located here:
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Debian Build Targets
@subsubsection Debian Build Targets

On Debian systems, or systems sporting Debian packaging tools, the following targets are used to
generate Debian release packages.  The release number can be controlled by the contents of the
@file{.debrelease} file, or with the @option{--with-debrelease=RELEASENUMBER} option to
@file{configure}.  See @samp{configure --help} for more information on options.

@table @samp
@item dsc
@mkindex dsc
This target will build the Debian source change package (@file{.dsc} file).  We use release number
@samp{0} so that the entire tarball is included in the @file{dsc} file.  You can use release number
@samp{1} for the same purposes.  Release numbers above @samp{1} will not include the entire tarball.
The @file{.dsc} file will be named: @file{@value{PACKAGE}_@value{VERSION}-0.dsc}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sigs
@mkindex sigs
This target signs the @file{.deb} files.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item debs
@mkindex debs
This target will build the Debian binary package (@file{.deb} file) from the @file{.dsc} created
above.  (This target will also create the @file{.dsc} if it has not been created already.)  The
subpackage @file{.deb} files will be named: @file{@value{PACKAGE}-*_@value{VERSION}-0_*.deb}, where
the stars indicate the subpackage and the architecture.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item csig
@mkindex csig
This target signs the @file{.dsc} file.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Documentation Targets
@subsubsection Documentation Targets

On systems that have @manref{doxygen(1)} documentation tool, the following targets are used to
generate doxygen html documentation:

@table @samp
@item doxy
@mkindex doxy
This target generates @manref{doxygen(1)} documentation from suitably marked sources.  File
containing the necessary documentation marks are discovered automatically by @command{configure}.
Doxygen documentation can be generated bus is not distributed.  Documentation is cerated in the
subdirectory @file{doc/html}.
@end table
