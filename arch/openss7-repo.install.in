#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile$ $Name$($Revision$) $Date$
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date$ by $Author$
#
# =============================================================================
subpkg=repo
_set_vars() {
@package_archhdr@
datarootdir=@datarootdir@
}

# preinst_repo() - When we go to install this subpackage fresh, we need to
#   acquire a username and password from the user and get credentials for this
#   machine.  When reinstalling (previous package was not purged), this function
#   gets the existing credentials from the persistent configuration file.  Even
#   when a package is purged, we like to keep a copy of the credentials lying
#   around in a .pacold file so that the machine credentials don't get lost.
#
#   Note that because the credentials are really machine credentials, we should
#   really be saving them in /boot so that installations of other distros can
#   also see the same machine credentials.
#
preinst_repo () { :
    local d un pw o f s ext u p m
    for s in '' .pacold .pacnew; do
    for p in credentials; do
    for d in $localstatedir/lib/$name/; do
	o=$d$p$s
	[ -r $o ] || continue
        un=`awk 'BEGIN{FS="="}{if($1~/^username$/){print$2;exit}}' $o`
        pw=`awk 'BEGIN{FS="="}{if($1~/^password$/){print$2;exit}}' $o`
        [ -n "$un" -a -n "$pw" ] || continue
        break 3
    done
    done
    for p in $PACKAGE; do
    for d in $pacmanrepodir/; do
	o=$d${p}list$s
	[ -r $o ] || continue
	un=`sed -n -r 's,^.*Server[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$,\2,p;t end;b;: end q' $o`
	pw=`sed -n -r 's,^.*Server[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$,\4,p;t end;b;: end q' $o`
        [ -n "$un" -a -n "$pw" ] || continue
        break 3
    done
    done
    done
    [ -n "$un" -a -n "$pw" ] || { un=; pw=; }
    d=$sslcertdir; n=OPENSS7-CA-CERT.pem
    o=; f=$d/$n; [ -d $d ] || mkdir -p -- $d
    [ -e $f ] || { wget --no-check-certificate -O $f $reposerv://$repobase/cacert.pem 2>/dev/null; (cd $d; ln -sf $n `openssl x509 -hash -noout -in $f`.0); }
    d=$localstatedir/lib/$name; n=credentials
    o=; f=$d/$n; [ -d $d ] || mkdir -p -- $d
    [ ! -e $f ] || { o=$f; mv -f -- $f $f.$$; }
    hn=`hostname -f`; ip=`hostname -I|sed 'y/ /,/'`;n=patches
    id=`e=$(for s in /sys/class/net/e*;do if [ ! -L $s ];then continue;fi;echo $(readlink $s)" "$s;done|sort|head -1|cut -f2 "-d ");[ -r $e/address ] && cat $e/address|sed "s,:,,g"`
    ext="?hn=$hn&ip=$ip&id=$id${un:+&un=}${un}${pw:+&pw=}${pw}"
    ext="$ext`echo /$reposubdir|sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'`"
    key="${un:+${un}${pw:+:}${pw}@}"
    url="$reposerv://$key$repobase/$reporoot/`basename $f`$ext"
    if ! echo "$url"|wget -i - -O $f 2>/dev/null ; then
        if echo "$url"|wget -i - -O /dev/null 2>&1|grep '401 Authorization Required' >/dev/null 2>&1 ; then
            u='anonymous'; p=
            m='Authorization required for repository access.'
            if [ -n "$DISPLAY" -a -x "`which zenity 2>/dev/null`" ]; then
                zenity --info --text="$m" --no-wrap || return 1
                while true; do
                    u=`zenity --entry --text='Username: ' --entry-text="$u" || exit 1` || return 1; u=${u:-anonymous}
                    [ "$u" != anonymous ] || break
                    p=`zenity --entry --text="Password for '$u': " --hide-text || exit 1` || continue
                    [ -z "$p" ] || break
                done
            elif [ "${DISPLAY+set}" = set -a -x "`which whiptail 2>/dev/null`" ]; then
                whiptail --msgbox "$m" 7 50 >/dev/tty </dev/tty || return 1
                while true; do
                    u=`whiptail --inputbox 'Username: ' 8 40 "$u" 2>&1 >/dev/tty </dev/tty || exit 1` || return 1; u=${u:-anonymous}
                    [ "$u" != anonymous ] || break
                    p=`whiptail --passwordbox "Password for '$u': " 8 40 2>&1 >/dev/tty </dev/tty || exit 1` || continue
                    [ -z "$p" ] || break
                done
            elif [ "${DISPLAY+set}" = set -a -x "`which dialog 2>/dev/null`" ]; then
                dialog --msgbox "$m" 5 50 >/dev/tty </dev/tty || return 1
                while true; do
                    u=`dialog --inputbox 'Username: ' 0 0 "$u" 2>&1 >/dev/tty </dev/tty || exit 1` || return 1; u=${u:-anonymous}
                    [ "$u" != anonymous ] || break
                    p=`dialog --passwordbox "Password for '$u': " 0 0 2>&1 >/dev/tty </dev/tty || exit 1` || continue
                    [ -z "$p" ] || break
                done
            else
                echo "$m" >/dev/tty
                while true; do
                    d="$u"
                    read -e  -p "Username ($u): " u </dev/tty >/dev/tty || { echo '' >/dev/tty; return 1; }; u=${u:-$d}
                    [ "$u" != anonymous ] || break
                    read -es -p "Password ($u): " p </dev/tty >/dev/tty || { echo '' >/dev/tty; continue; }
                    echo '' >/dev/tty
                    [ -z "$p" ] || break
                done
            fi
            key="${u:+${u}${p:+:}${p}@}"
            url="$reposerv://$key$repobase/$reporoot/`basename $f`$ext"
            rm -f -- $f
            if ! echo "$url"|wget -i - -O $f 2>/dev/null; then
                rm -f -- $f
                m='Authorization failed.'
                if [ -n "$DISPLAY" -a -x "`which zenity 2>/dev/null`" ]; then
                    zenity --error --text="$m" --no-wrap
                elif [ "${DISPLAY+set}" = set -a -x "`which whiptail 2>/dev/null`" ]; then
                    whiptail --msgbox "$m" 7 50 >/dev/tty </dev/tty
                elif [ "${DISPLAY+set}" = set -a -x "`which dialog 2>/dev/null`" ]; then
                    dialog --msgbox "$m" 5 50 >/dev/tty </dev/tty
                else
                    echo "$m" >/dev/tty
                fi
                [ "$o" != "$f" -o ! -e $o.$$ ] || mv -f -- $o.$$ $o
                return 1
            fi
	fi
    fi
    if [ ! -e $f ]; then
        [ "$o" != "$f" -o ! -e $o.$$ ] || mv -f -- $o.$$ $o
        return 1
    fi
    [ "$o" != "$f" ] || rm -f -- $o.$$
    chmod 0600 $f
    un=`awk 'BEGIN{FS="="}{if($1~/^username$/){print$2;exit}}' $f`
    pw=`awk 'BEGIN{FS="="}{if($1~/^password$/){print$2;exit}}' $f`
    [ -n "$un" -a -n "$pw" ] || return 1
    unp="`echo $un|cut -c1-24`"
    pwp="`echo $pw|cut -c1-24`"
    echo "$pwp$unp" >$d/$n
    key="${un:+${un}${pw:+:$pw}@}"
    ext="`echo /$reposubdir|sed 's,//,/,g;s,/,?distro=,;s,/,\&relver=,;s,/,\&osarch=,'`"
    d=$pacmanrepodir; n=${PACKAGE}list
    o=; f=$d/$n; [ -d $d ] || mkdir -p -- $d
    [ ! -e $f ] || { o=$f; mv -f -- $f $f.$$; }
    url="$reposerv://$key$repobase/$reporoot/$n$ext"
    if ! echo "$url"|wget -i - -O $f 2>/dev/null || [ ! -e $f ]; then
        [ "$o" != "$f" -o ! -e $o.$$ ] || mv -f -- $o.$$ $o
        return 1
    fi
    [ "$o" != "$f" ] || rm -f -- $o.$$
    d=$pacmanrepodir; n=${PACKAGE}repo
    o=; f=$d/$n; [ -d $d ] || mkdir -p -- $d
    [ ! -e $f ] || { o=$f; mv -f -- $f $f.$$; }
    url="$reposerv://$key$repobase/$reporoot/$n$ext"
    if ! echo "$url"|wget -i - -O $f 2>/dev/null || [ ! -e $f ]; then
        [ "$o" != "$f" -o ! -e $o.$$ ] || mv -f -- $o.$$ $o
        return 1
    fi
    [ "$o" != "$f" ] || rm -f -- $o.$$
    return 0
}

postinst_keyring () { :
    if [ -x /usr/bin/pacman-key ]; then
	/usr/bin/pacman-key --populate openss7
    fi
}

# pre_install($newver) - Run right before files are extracted.  One argument is
#   passed: new package full version string.
#
pre_install() {
    _set_vars
    preinst_repo || exit $?
}

# post_install($newver) - Run right after files are extracted.  One argument is
#   passed: new package full version string.
#
post_install() {
    _set_vars
    postinst_keyring || :
}

# pre_upgrade($newver,$oldver) - Run right before files are extracted.  Two
#   arguments are passed in this order: new package ful version string, old
#   package full version string.
#
pre_upgrade() {
    _set_vars
    #_pre $*
}

# post_upgrade($newver,$oldver) - Run after files are extracted.  Two arguments
#   are passed in this order: new package full version string, old package full
#   version string.
#
post_upgrade() {
    _set_vars
    #_post $*
}

# pre_remove($oldver) - Run right before files are removed.  One argument is
#   passed: old package full version string.
#
pre_remove() {
    _set_vars
}

# post_remove($oldver) - Run right after files are removed.  One argument is
#   passed: old package full version string.
#
post_remove() {
    _set_vars
}

# =============================================================================
#
# $Log$
# =============================================================================
# vim: sw=4 tw=80
