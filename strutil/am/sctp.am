## =============================================================================
## 
# @(#) $RCSfile: sctp.am,v $ $Name:  $($Revision: 0.9.2.11 $) $Date: 2005/03/02 17:41:27 $
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
## Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation; either version 2 of the License, or (at your option) any later
## version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, write to the Free Software Foundation, Inc., 675 Mass
## Ave, Cambridge, MA 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date: 2005/03/02 17:41:27 $ by $Author: brian $
##
## =============================================================================

##
# This is a makefile fragment for installing sctp kernel modules for the Linux Native SCTP
# implementation.  It is different from am/kernel.am in that the later only installs STREAMS modules
# for use with STREAMS.  In addition, this fragment needs to check for redundant lksctp modules and
# move them out of the way on install and move them back on uninstall.  Aside from that, the make
# variables input to this fragment are the same as for kernel.am.  (Perhaps kernel.am was a bad
# choice of names because it is not so general.  Perhaps streams.am would have been a better
# choice!)  Note that we ignore KERNEL_MODCONF make variable because we do not need to adjust the
# modules.conf file (yet).  Perhaps later with udev we will have to do something there.
# KERNEL_SUBDIR is our kernel module subdirectory (which is going to be kernel/net, although we have
# to look for redundant lksctp modules in kernel/net/sctp.
##

if RPM_BUILD_KERNEL

Modules.map: $(KERNEL_MODULES)
	$(NM) -s $(KERNEL_MODULES) > $@

all-kernel: $(KERNEL_MODULES) Modules.map

STRIP_KERNEL_MODULES		= $(STRIP) --strip-debug -X -x

##
# This is equivalent to the source rpm %install scriptlet, and is in fact invoked by that scriptlet.
# This is performed both for the install as well as the install-strip targets.  This simply installs
# and strips if required.  We use libtool to install even though these are not .la libraries but
# just objects.  We set kernel module stripping as above.
##
install-modules: $(KERNEL_MODULES)
	@$(NORMAL_INSTALL)
	@r='$(DESTDIR)$(rootdir)' ; k="$$r$(kmoduledir)" ; d="$$k/$(KERNEL_SUBDIR)" ; \
	if test -n "$(COMPRESS_KERNEL_MODULES)" ; then kext='.gz' ; else kext='' ; fi ; \
	if test -n "$(KERNEL_PRELOADS)" ; then \
		$(ECHO) "$(mkinstalldirs) $$d/boot" ; \
		$(mkinstalldirs) $$d/boot ; \
	elif test -n "$(KERNEL_MODULES)" ; then \
		$(ECHO) "$(mkinstalldirs) $$d" ; \
		$(mkinstalldirs) $$d ; \
	else \
		$(ECHO) "$(mkinstalldirs) $$k" ; \
		$(mkinstalldirs) $$k ; \
	fi ; \
	list='$(KERNEL_MODULES)'; for p in $$list; do \
		if test -f $$p; then \
			f="`$(ECHO) $$p | sed -e 's|^.*/||;s|lib.*_a-||'`" ; \
			$(ECHO) "$(LIBTOOL) --mode=install $(INSTALL) -m 644 $$p $$d/$$f" ; \
			$(LIBTOOL) --mode=install $(INSTALL) -m 644 $$p $$d/$$f ; \
			if test -n "$(INSTALL_STRIP_FLAG)" -a -n "$(STRIP_KERNEL_MODULES)" ; then \
				$(ECHO) "$(STRIP_KERNEL_MODULES) $$d/$$f" ; \
				$(STRIP_KERNEL_MODULES) $$d/$$f ; \
			fi ; \
			if test -n "$(COMPRESS_KERNEL_MODULES)" ; then \
				$(ECHO) "$(COMPRESS_KERNEL_MODULES) $$d/$$f" ; \
				$(COMPRESS_KERNEL_MODULES) $$d/$$f ; \
			fi ; \
		else :; fi ; \
	done ; \
	list='$(KERNEL_PRELOADS)'; for p in $$list ; do \
		p="$$p$$kext" ; \
		if test -f $$d/$$p ; then \
			$(ECHO) "(cd $$d/boot ; $(LN_S) ../$$p . )" ; \
			(cd $$d/boot ; $(LN_S) ../$$p . ) ; \
		fi ; \
	done ; \
	if test -n "$(KERNEL_MODCONF)" ; then \
		$(ECHO) "$(INSTALL) -m 600 $(KERNEL_MODCONF) $$k/modules.$(KMODCONF_EXT)" ; \
		$(INSTALL) -m 600 $(KERNEL_MODCONF) $$k/modules.$(KMODCONF_EXT) ; \
	fi

INSTALL_EXEC_LOCAL += install-modules

##
# This is equivalent to the kernel modules package rpm %post scriptlet for non-rpm (autoconf)
# installs.  It is only executed when the install directory is fully configured for kernel modules.
# That is, this does not run when building an rpm because the binaries are installed in a temporary,
# unconfigured directory.  Autoconf has no post-install targets, so we hook this into the install
# target with install-exec-hook that runs after install-exec has completed.
##
# The post-modules target checks for a fully configured install directory by checking for
# modules.dep in the kernel modules directory $(DESTDIR)$(rootdir)$(kmoduledir).
##
# If modules.dep does not exist, we simply exit.
##
# If modules.dep exists, then we are doing a non-rpm (autoconf) install and need to configure the
# target directory.  First we check if there is a deprecated lksctp kernel module in the
# kernel/net/sctp subdirectory.  If one exists, we move it out of the way to a file named
# sctp_deprecated.o.  We only move it so that it can be replaced if we uninstall later.
##
# If we have a usable system map file and an executable depmod, we perform the depmod.
##
# The last thing that we do on an installed system is check is create a symbolic link from
# /usr/src/$(PACKAGE_TARNAME} to the location of the untarred source.  This has the same effect as
# installing the source package under rpm.
##
post-modules:
	@r='$(DESTDIR)$(rootdir)' ; k="$$r$(kmoduledir)" ; conf_fil="$$r/etc/modules.conf" ; \
	if test -n "$(COMPRESS_KERNEL_MODULES)" ; then kext='.gz' ; else kext='' ; fi ; \
	if test -f "$$conf_fil" ; then \
		if test -e "$$k/net/sctp/sctp.o$$kext" ; then \
			mv -f "$$k/net/sctp/sctp.o$$kext" "$$k/net/sctp/sctp_deprecated.o$$kext" ; \
		fi ; \
		if test -n "$(DEPMOD)" -a -x "$(DEPMOD)"; then \
			s="$$r$(ksysmap)" ; \
			if test -f "$$s" ; then \
				$(ECHO) "UNAME_MACHINE=$(target_cpu) $(DEPMOD) -ae -b $$r/ -C $$conf_fil -F $$s $(kversion)" ; \
				UNAME_MACHINE=$(target_cpu) $(DEPMOD) -ae -b $$r/ -C $$conf_fil -F $$s $(kversion) ; \
			fi ; \
		fi ; \
		prel_fil="$$r/etc/modules" ; \
		if test -n "$(KERNEL_PRELOADS)" -a -f "$$prel_fil" ; then \
			prel_tmp="$$prel_fil.tmp.$$$$" ; \
			prel_new="$$prel_fil.new.$$$$" ; \
			cp -f $$prel_fil $$prel_new ; \
			list='$(KERNEL_PRELOADS)' ; for p in $$list ; do \
				f=`basename $$p .o` ; \
				sed -e "/^$$f\>/d" $prel_new > $prel_tmp ; \
				mv -f $$prel_tmp $$prel_new ; \
				$(ECHO) "$$f" >> $$prel_new ; \
			done ; \
			chmod --reference=$$prel_fil $$prel_new ; \
			cp -fb --suffix=$$ext.bak $$prel_new $$prel_fil ; \
			rm -f -- "$$prel_new" ; \
		fi ; \
	fi

post-source:
	@u='$(DESTDIR)$(rootdir)/usr/src' ; \
	if test -d $$u ; then \
		p="$$u/$(PACKAGE_TARNAME)" ; \
		d=`(cd $(srcdir); pwd)` ; \
		$(ECHO) "rm -f -- $$p" ; \
		rm -f -- "$$p" ; \
		$(ECHO) "$(LN_S) -f $$d $$p" ; \
		$(LN_S) -f "$$d" "$$p" ; \
	fi

##
# This is equivalent to the kernel modules package rpm %post scriptlet for non-rpm (autoconf)
# installs.  It is only executed when the install directory is fully configured for kernel modules.
# That is, this does not run when building an rpm because the binaries are installed in a temporary,
# unconfigured directory.  Autoconf has no post-install targets, so we hook this into the install
# target with install-exec-hook that runs after install-exec has completed.
##
INSTALL_EXEC_HOOK += post-modules post-source

##
# There is no rpm equivalent for this target.  This simply removes kernel modules.  It is not
# invoked by rpm but is only used from the tarball uninstall.  We simply remove our modules (and
# possibly the directory that they are in).
##
uninstall-modules:
	@$(NORMAL_UNINSTALL)
	@r='$(DESTDIR)$(rootdir)' ; k="$$r$(kmoduledir)" ; d="$$k/$(KERNEL_SUBDIR)" ; \
	if test -n "$(COMPRESS_KERNEL_MODULES)" ; then kext='.gz' ; else kext='' ; fi ; \
	list='$(KERNEL_MODULES)'; for p in $$list; do \
		p="`$(ECHO) $$p | sed -e 's|^.*/||;s|lib.*_a-||'`" ; \
		p="$$p$$kext" ; \
		$(ECHO) "$(LIBTOOL) --mode=uninstall rm -f -- $$d/$$p" ; \
		$(LIBTOOL) --mode=uninstall rm -f -- "$$d/$$p" ; \
	done ; \
	list='$(KERNEL_PRELOADS)'; for p in $$list; do \
		p="$$p$$kext" ; \
		$(ECHO) "rm -f -- $$d/boot/$$p" ; \
		rm -f -- $$d/boot/$$p ; \
	done ; \
	$(ECHO) "rmdir --ignore-fail-on-non-empty $$d" ; \
	rmdir --ignore-fail-on-non-empty "$$d" ; \
	$(ECHO) "rm -f -- $$k/modules.$(KMODCONF_EXT)" ; \
	rm -f -- "$$k/modules.$(KMODCONF_EXT)"

UNINSTALL_LOCAL += uninstall-modules

##
# This is equivalent to the kernel modules package rpm %postun scriptlet.  It is only executed when
# the uninstall directory is fully configured for kernel modules.  That is, this does not run when
# building an rpm because the binaries are not uninstalled (they are usually just removed
# wholesale).  Autoconf has no post-uninstall targets, so we hook this into the uninstall-hook that
# runs after uninstall has completed.
##
# The postun-modules target checks for a fully configured uninstall directory by checking for the
# existence of the modules.dep file in the target uninstall directory $(DESTDIR)$(kmoduledir).  It
# it exists, then we are doing a non-rpm (autoconf) uninstall and need to replace the deprecated
# lksctp kernel module if it exists.
##
# If we have a usable system map file and an executable depmod, we perform the depmod.
##
# Lastly we break the symlink in /usr/src/$(PACKAGE_TARNAME).  (We should probably check if the
# symbolic links points to us first.)  This has the same effect as erasing the source rpm package
# under rpm.
##
postun-modules:
	@r='$(DESTDIR)$(rootdir)' ; k="$$r$(kmoduledir)" ; conf_fil="$$r/etc/modules.conf" ; \
	if test -n "$(COMPRESS_KERNEL_MODULES)" ; then kext='.gz' ; else kext='' ; fi ; \
	if test -f "$$conf_fil" ; then \
		l=yes ; \
		for f in $$r/lib/modules/*/$(KERNEL_SUBDIR)/sctp.o* ; do \
			if test -f $$f ; then l=no ; break ; fi ; \
		done ; \
		if test ":$$l" = :yes ; then \
			if test -e "$$k/net/sctp/sctp_deprecated.o$$kext" ; then \
				mv -f "$$k/net/sctp/sctp_deprecated.o$$kext" "$$k/net/sctp/sctp.o$$kext" ; \
			fi ; \
			prel_fil="$$r/etc/modules" ; \
			if test -n "$(KERNEL_PRELOADS)" -a -f "$$prel_fil" ; then \
				prel_tmp="$$prel_fil.tmp.$$$$" ; \
				prel_new="$$prel_fil.new.$$$$" ; \
				cp -f $$prel_fil $$prel_new ; \
				list='$(KERNEL_PRELOADS)' ; for p in $$list ; do \
					f=`basename $$p .o` ; \
					sed -e "/^$$f\>/d" $prel_new > $prel_tmp ; \
					mv -f $$prel_tmp $$prel_new ; \
				done ; \
				chmod --reference=$$prel_fil $$prel_new ; \
				cp -fb --suffix=$$ext.bak $$prel_new $$prel_fil ; \
				rm -f -- "$$prel_new" ; \
			fi ; \
		fi ; \
		if test -n "$(DEPMOD)" -a -x "$(DEPMOD)"; then \
			s="$$r$(ksysmap)" ; \
			if test -f $$s ; then \
				$(ECHO) "UNAME_MACHINE=$(target_cpu) $(DEPMOD) -ae -b $$r/ -C $$conf_fil -F $$s $(kversion)" ; \
				UNAME_MACHINE=$(target_cpu) $(DEPMOD) -ae -b $$r/ -C $$conf_fil -F $$s $(kversion) ; \
			fi ; \
		fi ; \
	fi

postun-source:
	rm -f -- "$(DESTDIR)$(rootdir)/usr/src/$(PACKAGE_TARNAME)"

##
# This is equivalent to the kernel modules package rpm %postun scriptlet.  It is only executed when
# the uninstall directory is fully configured for kernel modules.  That is, this does not run when
# building an rpm because the binaries are not uninstalled (they are usually just removed
# wholesale).  Autoconf has no post-uninstall targets, so we hook this into the uninstall-hook that
# runs after uninstall has completed.
##
UNINSTALL_HOOK += postun-modules postun-source

if PERFORM_CHECKS
dist_check_SCRIPTS	+= $(top_srcdir)/scripts/check_modules
TESTS_ENVIRONMENT 	+= DESTDIR='$(DESTDIR)' \
			   ksysmap='$(ksysmap)' \
			   KERNEL_MODULES='$(KERNEL_MODULES)' \
			   KERNEL_MODMAPS='$(KERNEL_MODMAPS)'
CLEANFILES		+= check_modules.log
DISTCLEANFILES		+= *.err *.out
endif

else

all-kernel:

endif

dist_noinst_SCRIPTS	+= scripts/cflagcheck
EXTRA_SCRIPTS		+= scripts/cflagcheck

ALL_LOCAL += all-kernel

CLEANFILES += Modules.map

.PHONY: all-kernel install-modules post-modules uninstall-modules postun-modules

## vim: ft=automake
