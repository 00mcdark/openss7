#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile: netperf_udp_rr,v $ $Name:  $($Revision: 1.1.2.8 $) $Date: 2006/05/23 22:43:30 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# Unauthorized distribution or duplication is prohibited.
#
# This software and related documentation is protected by copyright and
# distributed under licenses restricting its use, copying, distribution and
# decompilation.  No part of this software or related documentation may be
# reproduced in any form by any means without the prior written
# authorization of the copyright holder, and licensors, if any.
#
# The recipient of this document, by its retention and use, warrants that
# the recipient will protect this information and keep it confidential, and
# will not disclose the information contained in this document without the
# written permission of its owner.
#
# The author reserves the right to revise this software and documentation
# for any reason, including but not limited to, conformity with standards
# promulgated by various agencies, utilization of advances in the state of
# the technical arts, or the reflection of changes in the design of any
# techniques, or procedures embodied, described, or referred to herein.
# The author is under no obligation to provide any feature listed herein.
#
# -----------------------------------------------------------------------------
#
# As an exception to the above, this software may be distributed under the
# GNU General Public License (GPL) Version 2, so long as the software is
# distributed with, and only used for the testing of, OpenSS7 modules,
# drivers, and libraries.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"),
# it is classified as "Commercial Computer Software" under paragraph
# 252.227-7014 of the DoD Supplement to the Federal Acquisition Regulations
# ("DFARS") (or any successor regulations) and the Government is acquiring
# only the license rights granted herein (the license rights customarily
# provided to non-Government users).  If the Software is supplied to any unit
# or agency of the Government other than DoD, it is classified as "Restricted
# Computer Software" and the Government's rights in the Software are defined
# in paragraph 52.227-19 of the Federal Acquisition Regulations ("FAR") (or
# any successor regulations) or, in the cases of NASA, in paragraph 18.52.227-86
# of the NASA Supplement to the FAR (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2006/05/23 22:43:30 $ by $Author: brian $
#
# -----------------------------------------------------------------------------
#
# $Log: netperf_udp_rr,v $
# Revision 1.1.2.8  2006/05/23 22:43:30  brian
# - updated copyright headers
#
# Revision 1.1.2.7  2006/05/23 06:57:49  brian
# - header updates
#
# Revision 1.1.2.6  2005/05/14 08:30:03  brian
# - copyright header correction
#
# Revision 1.1.2.5  2004/08/13 04:34:58  brian
# - Move device to test specific options.
#
# Revision 1.1.2.4  2004/08/11 19:45:30  brian
# - Add verbose and debugging capability.
#
# Revision 1.1.2.3  2004/08/11 12:08:11  brian
# - A few corrections to scripts.
#
# Revision 1.1.2.2  2004/08/11 11:27:29  brian
# - Somw tweaking.
#
# Revision 1.1.2.1  2004/08/11 09:16:58  brian
# - Added openss7 tcp_rr_script.
#
# Revision 1.1.2.1  2004/08/11 09:05:07  brian
# - OpenSS7 tcp_stream_script
#
# Revision 1.1.2.3  2004/08/11 08:02:30  brian
# - Working up script, display correct defaults.
#
# Revision 1.1.2.2  2004/08/11 07:38:23  brian
# - Working up snapshot script
#
# =============================================================================


ECHO='echo'
SHELL='/bin/bash'
SED='sed'

# check that we have a working $ECHO
if test "X$1" = X--no-reexec ; then
# Discard the --no-reexec flag and continue
    shift
elif test "X$1" = X--fallback-echo ; then
    :
else
    exec $SHELL "$0" --no-reexec ${1+"$@"}
fi

if test "X$1" = X--fallback ; then
    shift
    cat <<EOF
$*
EOF
    exit 0
fi

program=`$ECHO "$0" | $SED -e 's%^.*/%%'`
modename="$program"

ident='$RCSfile: netperf_udp_rr,v $ $Name:  $($Revision: 1.1.2.8 $)'

HELP="Try \`$program --help' for more information."

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed="$SED"' -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'
# test EBCDIC or ASCII
case `$ECHO A | od -x` in
    *[Cc]1*) # EBCDIC based system
	SP2NL="tr '\100' '\n'"
	NL2SP="tr '\r\n' '\100\100'"
	;;
    *) # Assume ASCII based system
	SP2NL="tr '\040' '\012'"
	NL2SP="tr '\015\012' '\040\040'"
	;;
esac

# NLS nuisances
# Only set LANG and LC_ALL to C if already set.
# These must not be set unconditionally because not all systems understand
# e.g. LANG=C (notably SCO).
# We save the old values to restore during execute mode.
if test "${LC_ALL+set}" = set ; then
    save_LC_ALL="$LC_ALL" ; LC_ALL=C ; export LC_ALL
fi
if test "${LANG+set}" = set ; then
    save_LANG="$LANG" ; LANG=C ;  export LANG
fi

# Make sure IFS has a sensible default
: ${IFS=" 	"}

my_letters='abcdefghijklmnopqrstuvwxyz'
my_LETTERS='ABCDEFGHIJLKMNOPQRSTUVWXYZ'
my_Letters=$my_letters$my_LETTERS
my_numbers='0123456789'
my_alphano=$my_Letters$my_numbers
my_uppercase="$SED y%*$my_letters%P$my_LETTERS%;s%[^_$my_alphano]%_%g"
my_tokenize="$SED s%[^a-zA-Z0-9]%_%g"

# defaults

command=
debug=0
verbose=1

default_command=run
default_debug=0
default_verbose=1
default_run=yes

default_netperf=${NETPERF_CMD:=netperf}
default_testtime=${NETPERF_TIME:=60}
default_port=${NETPERF_PORT:=}
default_bufsizes=${NETPERF_SKTS:='32768'}
default_stats=${NETPERF_STATS:='-i 10,2 -I 99,10'}
default_hostname='localhost'
default_device='/dev/udp'
default_xti=no
default_headers='-P 0'
default_calibrate=no
default_rrsizes='1,1 64,64 100,200 1024,1024'

defaults='command debug verbose run netperf testtime port hostname device xti stats headers calibrate bufsizes rrsizes'

function version()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF
$program:
    $ident
    Copyright (c) 2001-2006  OpenSS7 Corporation.  All Rights Reserved.
    Distributed by OpenSS7 Corporation under GPL Version 2,
    incorporated here by reference.
    See \`$0 -C' for more information.
EOF
}

function usage()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF
Usage:
    $program [options] [HOSTNAME [CPU]]
    $program { -h | --help }
    $program { -V | --version }
    $program { -C | --copying }
EOF
}

function help()
{
    if test :${show:-yes} = :no ; then
        return
    fi
    version
    usage
    cat <<EOF
Arguments:
    HOSTNAME
        name of remote host [Default: $default_hostname]
    CPU
        calibrate CPU [Default: $default_calibrate]
Options:
    -c, --calibrate
        calibrate CPU [Default: $default_calibrate]
    -H, --hostname=HOSTNAME
        name or address of netserver host [Default: $default_hostname]
    -p, --port=PORTNUM
        netserver port number [Default: ${default_port:-12865}]
    -t, --testtime=SECONDS
        duration of each test in seconds [Default: $default_testtime]
    -b, --bufsize=SIZE
        add an additional buffer size to the list
    -B, --bufsizes='SIZE[ SIZE]*'
        specify the list of buffer sizes to test [Default: '$default_bufsizes']
    -r, --rrsize=REQSIZE,RSPSIZE
        add an additional request/response size to the list
    -R, --rrsizes='REQSIZE,RSPSIZE[ REQSIZE,RSPSIZE]*'
        specify the list of r/r sizes to test [Default: '$default_rrsizes']
    -x, --xti=[DEVICE]
        use XTI interface instead of Sockets [Default: $default_xti:$default_device]
    -n, --dry-run
        do not execute but verify actions [Default: run]
    -q, --quiet
        supress normal output
    -D, --debug [LEVEL]
        increase or set debugging verbosity [Default: $default_debug]
    -v, --verbose [LEVEL]
        increase or set output verbosity [Default: $default_verbose]
    -h, --help
        prints this usage information and exits
    -V, --version
        prints the version information and exits
    -C, --copying
        prints copying permissions and exits
Environment:
    NETPERF_CMD
        default netperf command [Default: $default_netperf]
    NETPERF_TIME
        default test case duration [Default: $default_testtime]
    NETPERF_PORT
        default netserver port number [Default: ${default_port:-12865}]
    NETPERF_SKTS
        default buffer sizes [Default: \`$default_bufsizes']
    NETPERF_STATS
        default statistics options [Default: \`$default_stats']
EOF
}

function copying()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF

$ident

Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
 
All Rights Reserved.

Unauthorized distribution or duplication is prohibited.

This software and related documentation is protected by copyright and distribut-
ed under licenses restricting its use,  copying, distribution and decompilation.
No part of this software or related documentation may  be reproduced in any form
by any means without the prior  written  authorization of the  copyright holder,
and licensors, if any.

The recipient of this document,  by its retention and use, warrants that the re-
cipient  will protect this  information and  keep it confidential,  and will not
disclose the information contained  in this document without the written permis-
sion of its owner.

The author reserves the right to revise  this software and documentation for any
reason,  including but not limited to, conformity with standards  promulgated by
various agencies, utilization of advances in the state of the technical arts, or
the reflection of changes  in the design of any techniques, or procedures embod-
ied, described, or  referred to herein.   The author  is under no  obligation to
provide any feature listed herein.

As an exception  to the above,  this software  may be distributed  under the GNU
General Public License (GPL) Version  2,  so long as the software is distributed
with, and only used for testing of, OpenSS7 modules, drivers and libraries.

U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf
of the U.S. Government ("Government"), the following provisions apply to you. If
the Software is supplied by the  Department of Defense ("DoD"), it is classified
as "Commercial  Computer  Software"  under  paragraph  252.227-7014  of the  DoD
Supplement  to the  Federal Acquisition Regulations  ("DFARS") (or any successor
regulations) and the  Government  is acquiring  only the  license rights granted
herein (the license rights customarily provided to non-Government users). If the
Software is supplied to any unit or agency of the Government  other than DoD, it
is  classified as  "Restricted Computer Software" and the Government's rights in
the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition
Regulations ("FAR")  (or any successor regulations) or, in the cases of NASA, in
paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor
regulations).

Commercial  licensing  and  support of this  software is  available from OpenSS7
Corporation at a fee.  See http://www.openss7.com/

EOF
}

function option_unrec()
{
    if test ${verbose:-1} -gt 0 ; then
	opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
	$ECHO "$program: syntax error -- \`$opt' unrecognized" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_noarg()
{
    if test ${verbose:-1} -gt 0 ; then
	opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
	$ECHO "$program: syntax error -- \`$opt' does not accept an argument" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_needarg()
{
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' requires an argument" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_after()
{
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' cannot occur after \`$2'" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_with()
{
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' cannot occur with \`$2'" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_nonopt()
{
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "$program: syntax error -- excess nonoption arguments \`$1'" >&2
	( usage ) >&2
    fi
    exit 2
}

# Parse our command line options once, thoroughly.
while test "$#" -gt 0 -o ":$more" != ":"
do
    if test ":$more" != ":" ; then arg="-$more" ; more= ; else arg="$1" ; shift ; fi
    if test x"$more_options" = xno ; then nonopt="$arg" ; break ; fi
    # check for attached option argument
    case $arg in
	--debug=* | --debu=* | --deb=* | --de=* | --d=* | \
	--verbose=* | --verbos=* | --verbo=* | --verb=* | \
	--port=* | --por=* | --po=* | --p=* | \
	--hostname=* | --hostnam=* | --hostna=* | --hostn=* | --host=* | --hos=* | --ho=* | --h=* | \
	--testtime=* | --testime=* | --testtim=* | --testim=* | --time=* | --t=* | \
	--bufsizes=* | --bufsize=* | --bufsiz=* | --bufsi=* | --bufs=* | --buf=* | --bu=* | --b=* | \
	--rrsizes=* | --rrsize=* | --rrsiz=* | --rrsi=* | --rrs=* | --rr=* | --r=*)
	    optarg=`$ECHO "X$arg" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'` ;;
	--*=*)
	    option_noarg $arg ;;
	-[cnqDvhVC])
	    optarg= ;;
	-[cnqDvhVC]*)
	    optarg=
	    more=`$ECHO "X$arg" | $Xsed -e 's/-[cnqDvhVC]//'`
	    eval "arg=\`$ECHO \"X$arg\" | $Xsed -e 's|$more||'\`"
	    ;;
	-[xtHbBrRp])
	    optarg= ;;
	-[xtHbBrRp]*)
	    optarg=`$ECHO "X$arg" | $Xsed -e 's/-[xtHbBrRp]//'` ;;
	*)
	    optarg= ;;
    esac
    # check for optional or required option argument
    if test -n "$prev" ; then
	case $arg in
	    -* | \+*) # optional arguments not forthcoming
		case $prev in
		    # these have optional option arguments
		    debug | verbose) eval "(($prev++))" ;;
		    device) ;;
		    # these have required arguments
		    port | hostname | bufsize | bufsizes | rrsize | rrsizes | testtime)
			option_needarg $prevopt ;;
		esac
		prev= ; prevopt=
		;;
	    *) # if the previous option needs an argument, assign it.
		case $prev in
		    # these are accumulative
		    bufsize | rrsize)
			eval "${prev}s=\"\$${prev}s\$\{${prev}s:+ }\$arg" ;;
		    # the rest are simple assignments
		    *) eval "$prev=\"\$arg\"" ;;
		esac
		prev= ; prevopt=
		continue
		;;
	esac
    fi
    # Have we seen a non-optional argument yet?
    case $arg in
	--help | --h | --\? | -h | -\?)
	    show_help=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--version | --versio | --versi | --vers | -V)
	    show_version=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--copying | --copyin | --copyi | --copy | --cop | --co | --c | -C)
	    show_copying=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--verbose | --verbos | --verbo | --verb)
	    prevopt="$arg"
	    prev=verbose
	    ;;
	-v)
	    ((verbose++))
	    ;;
	--verbose=* | --verbos=* | --verbo=* | --verb=*)
	    verbose="$optarg"
	    ;;
	--debug | --debu | --deb)
	    prevopt="$arg"
	    prev=debug
	    ;;
	-D)
	    $ECHO "$program: enabling shell trace mode" 1>&2
	    set -x
	    ;;
	--debug=* | --debu=* | --deb=*)
	    debug="$optarg"
	    ;;
	--dry-run | --dryrun | --n | -n)
	    run=no
	    ;;
	--quiet | --silent | -q)
	    show=no
	    verbose=0
	    debug=0
	    ;;
	--port | --por | --po | --p | -p)
	    prevopt=$arg
	    prev=port
	    ;;
	--port=* | --por=* | --po=* | --p=* | -p*)
	    port="$optarg"
	    ;;
	--testtime | --testime | --testtim | --testim | --time | --t | -t)
	    prevopt="$arg"
	    prev=testtime
	    ;;
	--testtime=* | --testime=* | --testtim=* | --testim=* | --time=* | --t=* | -t*)
	    testtime="$optarg"
	    ;;
	--hostname | --hostnam | --hostna | --hostn | --host | --hos | --ho | --h | -H)
	    prevopt="$arg"
	    prev=hostname
	    ;;
	--hostname=* | --hostnam=* | --hostna=* | --hostn=* | --host=* | --hos=* | --ho=* | --h=* | -H*)
	    hostname="$optarg"
	    ;;
	--bufsize | --bufsiz | --bufsi | --bufs | --buf | --bu | --b | -b)
	    prevopt="$arg"
	    prev=bufsize
	    ;;
	--bufsize=* | --bufsiz=* | --bufsi=* | --bufs=* | --buf=* | --bu=* | --b=* | -b*)
	    bufsizes="$bufsizes${bufsizes:+ }$optarg"
	    ;;
	--bufsizes | -B)
	    prevopt="$arg"
	    prev=bufsizes
	    ;;
	--bufsizes=* | -B*)
	    bufsizes="$optarg"
	    ;;
	--rrsize | --rrsiz | --rrsi | --rrs | --rr | --r | -r)
	    prevopt="$arg"
	    prev=rrsize
	    ;;
	--rrsize=* | --rrsiz=* | --rrsi=* | --rrs=* | --rr=* | --r=* | -r*)
	    rrsizes="$rrsizes${rrsizes:+ }$optarg"
	    ;;
	--rrsizes | -R)
	    prevopt="$arg"
	    prev=rrsizes
	    ;;
	--rrsizes=* | -R*)
	    rrsizes="$optarg"
	    ;;
	--calibrate | --calibrat | --calibra | --calibr | --calib | --cali | --cal | --ca | --c | -c)
	    calibrate=yes
	    ;;
	--xti | --xt | --x | -x)
	    xti=yes
	    prevopt="$arg"
	    prev=device
	    ;;
	--xti=* | --xt=* | --x=* | -x*)
	    xti=yes
	    device="$optarg"
	    ;;
	--)
	    # end of options
	    more_options=no
	    ;;
	-* | \+*)
	    option_unrec $arg
	    ;;
	*)
	    # permute all non-options to the end
	    nonopt="${nonopt}${nonopt:+ }$arg"
	    ;;
    esac
done

# hit end of list wanting an argument
case $prev in
    # these have optional option arguments
    debug | verbose) eval "(($prev++))" ;;
    device) ;;
    # these have required arguments
    port | hostname | bufsize | bufsizes | rrsize | rrsizes | testtime)
	option_needarg $prevopt ;;
esac

args=($nonopt${nonopt:+ }${1+$@})

if test "$verbose" -gt 3 ; then
    $ECHO "Nonoption arguments: ${args[@]}"
fi

if test "${#args[*]}" -gt 2 ; then
    option_nonopt "${args[*+2]}"
fi
if test "${#args[*]}" -gt 1 ; then
    calibrate=yes
fi
if test "${#args[*]}" -gt 0 ; then
    hostname=${args[0]}
fi

# assign defaults to all unassigned variables
for def in $defaults ; do
    val=`eval 'echo $'"$def"`
    if test :${val:+set} != :set ; then
	eval "$def=\$default_$def"
    fi
done

if test ${verbose:-1} -gt 1 ; then
    headers='-P 1'
fi

function netperf_options()
{
    if test ${verbose:-1} -gt 3 ; then
	for arg in $defaults ; do
	    val=`eval 'echo $'"$arg"`
	    $ECHO "Option $arg is \`$val'"
	done
	$ECHO
    fi
}

function netperf_find()
{
    netperf=`which netperf 2>/dev/null`
    pname=`$ECHO "$netperf" | $SED -e 's%^.*/%%'`
    if test ":$pname" = ":netperf" ; then
	return
    fi
    if test -x "$netperf" ; then
	return
    fi
    # netperf is not in our path, check elsewhere
    netperf=`whereis netperf 2>/dev/null`
    netperf=`$ECHO "$netperf" | $SED -e 's%^netperf:[[:space:]]*%%;s%[[:space:]].*%%'`
    pname=`$ECHO "$netperf" | $SED -e 's%^.*/%%'`
    if test ":$pname" = ":netperf" ; then
	return
    fi
    if test -x "$netperf" ; then
	return
    fi
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "$program: error -- cannot find netperf executable" >&2
    fi
    if test ":${run:-yes}" = :yes ; then
	exit 1
    fi
    netperf=netperf
}

function none_command()
{
    if test -n "$show_version$show_help$show_copying" ; then
	if test ${verbose:-1} -gt 1 ; then
	    $ECHO "Displaying information"
	fi
	if test ":$show_version" != ":" ; then
	    version
	fi
	if test ":$show_help" != ":" ; then
	    help
	fi
	if test ":$show_copying" != ":" ; then
	    copying
	fi
    fi
}

function netperf_calibrate()
{
    calibration=
    if test :${calibrate:-no} = :no ; then
	return
    fi
    if test ${verbose:-1} -gt 1 ; then
	$ECHO "Performing local  CPU calibration"
	$ECHO
	$ECHO "------------------------------------"
	$ECHO "$netperf_command ${port:+-p }$port -t LOC_CPU"
    fi
    if test :${run:-yes} != :no ; then
	loc_rate=`$netperf_command ${port:+-p }$port -t LOC_CPU`
    fi
    if test ${verbose:-1} -gt 1 ; then
	$ECHO "  Local  CPU rate = $loc_rate"
	$ECHO
	$ECHO
    fi
    if test "${loc_rate:-0}" -gt 0 ; then
	calibration="$calibration${calibration:+ }-c $loc_rate"
    fi
    if test ${verbose:-1} -gt 1 ; then
	$ECHO "Performing remote CPU calibration"
	$ECHO
	$ECHO "------------------------------------"
	$ECHO "$netperf_command ${port:+-p }$port -t REM_CPU -H $hostname"
    fi
    if test :${run:-yes} != :no ; then
	rem_rate=`$netperf_command ${port:+-p }$port -t REM_CPU -H $hostname`
    fi
    if test ${verbose:-1} -gt 1 ; then
	$ECHO "  Remote CPU rate = $rem_rate"
	$ECHO
	$ECHO
    fi
    if test "${rem_rate:-0}" -gt 0 ; then
	calibration="$calibration${calibration:+ }-C $rem_rate"
    fi
}

function netperf_udp_test()
{
    if test :${xti:-no} = :no ; then
	testcase='UDP_RR'
	udpdev=
    else
	testcase='XTI_UDP_RR'
	udpdev="${device:+ -X $device}"
    fi
    for bufsize in $bufsizes ; do
	for rrsize in $rrsizes ; do
	    if test ${verbose:-1} -gt 0 ; then
		$ECHO
		$ECHO "------------------------------------"
		$ECHO
		$ECHO "$netperf ${port:+-p }$port $stats $headers -l $testtime -t $testcase -H $hostname $calibration -- -r $rrsize -s $bufsize -S $bufsize $udpdev"
	    fi
	    if test :${run:-yes} != :no ; then
		$netperf ${port:+-p }$port $stats $headers -l $testtime -t $testcase -H $hostname $calibration -- -r $rrsize -s $bufsize -S $bufsize $udpdev
	    fi
	    if test ${verbose:-1} -gt 0 ; then
		$ECHO
	    fi
	done
    done
}

function netperf_test()
{
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "Netperf $program script started at `date`"
	$ECHO
    fi
    netperf_calibrate
    netperf_udp_test
    if test ${verbose:-1} -gt 0 ; then
	$ECHO "Tests completed at `date`"
	$ECHO
	$ECHO "If you wish to submit these results to the netperf database at"
	$ECHO "http://www.cup.hp.com/netperf/NetperfPage.html, please submit each"
	$ECHO "datapoint individually. Individual datapoints are separated by"
	$ECHO "lines of dashes."
    fi
}

function netperf_copying()
{
    if test ${verbose:-1} -gt 1 ; then
	copying
    fi
}

function run_command()
{
    netperf_copying
    netperf_options
    netperf_find
    if test "${verbose:-1}" -gt 1 ; then
	((verb=$verbose-1))
	verb="-v $verb"
    fi
    if test "${debug:-0}" -gt 0 ; then
	debg="-d"
    fi
    netperf_command="$netperf"
    netperf="$netperf $verb $debg"
    netperf_test
}

case "$command" in
    none)
	none_command
	;;
    run)
	run_command
	;;
    *)
	if test ${verbose:-1} -gt 0 ; then
	    ( usage ) >&2
	fi
	exit 1
	;;
esac

exit 0

# vim: ft=sh noet sw=4 nocindent
