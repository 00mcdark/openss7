## vim: ft=automake
## =============================================================================
## 
# @(#) $RCSfile: deb.am,v $ $Name:  $($Revision: 0.9.2.24 $) $Date: 2005/03/22 12:38:10 $
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
## Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation; either version 2 of the License, or (at your option) any later
## version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, write to the Free Software Foundation, Inc., 675 Mass
## Ave, Cambridge, MA 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date: 2005/03/22 12:38:10 $ by $Author: brian $
##
## =============================================================================

##
## These are the rules that I use for build debian source and binary packages using automake.  As a
## maintainer I need to package releases using dpkg.  The following rules accomplish that for all
## most packages.
##

if MAINTAINER_MODE

##
## For better speed when building package binaries, we skip these rules to invoke package building.
## There is not (yet) a need to build packages when building packages...  We use maintainer mode to
## distinguish whether these rules are necessary or not.
##

if BUILD_DPKG

##
## Debian builds are a little different from rpm builds.  We use the same bootstrapping as we do for
## RPM in that a distributed tarball has all of the targets necessary for building dsc and deb
## packages built in, however, the debian control file does not have the powerful macro capabilities
## of an RPM spec file.  Therefore, one debian source package cannot be used for building all binary
## packages as we do with RPM.  The Debian build process here consists of unpacking the distribution
## and configuring it.  Then the .dsc and .deb packages are built from the already configured source.
##

##
# Because we *are* the upstream source, we always use debian version @PACKAGE_DEBRELEASE@ and pack the RPM release
# number onto the upstream version, but with a period instead of a dash to suppress warnings from
# dpkg-source.
##
debianpkg		= $(PACKAGE_LCNAME)_$(VERSION)-$(PACKAGE_DEBRELEASE)
debian_dir		= $(PACKAGE_DEBTOPDIR)/$(PACKAGE_LCNAME)-$(VERSION)
debian_dir_stamp	= $(PACKAGE_DEBTOPDIR)/stamp-$(PACKAGE_LCNAME)-$(VERSION)
debian_dsc_file		= $(PACKAGE_DEBTOPDIR)/$(debianpkg).dsc
debian_sig_file		= $(PACKAGE_DEBTOPDIR)/$(debianpkg).dsc.sig
debian_chg_file		= $(PACKAGE_DEBTOPDIR)/$(debianpkg)_%.changes
debian_asc_file		= $(PACKAGE_DEBTOPDIR)/$(debianpkg)_%.changes.asc
debian_tar_file		= $(PACKAGE_DEBTOPDIR)/$(debianpkg).tar.gz
debian_source_files	= $(debian_dsc_file) $(debian_tar_file) $(debian_sig_file)
debian_binary_files	= $(PACKAGE_DEBTOPDIR)/$(PACKAGE_LCNAME)-*_$(VERSION)-$(PACKAGE_DEBRELEASE)_*.deb
debian_change_files	= $(PACKAGE_DEBTOPDIR)/$(PACKAGE_LCNAME)_$(VERSION)-*.changes \
			  $(PACKAGE_DEBTOPDIR)/$(PACKAGE_LCNAME)_$(VERSION)-*.changes.asc

RELEASE_DIRECTORIES	+= $(PACKAGE_DEBTOPDIR)

##
# For the master build package it is sometime necessary to pass extra options down to configured
# subdirectories for a master build.  These options will contain the passed down options from the
# environment in that case.  See the recursive build targets below.
##
DEBXOPTS	= -D

$(debian_dir):: $(debian_dir_stamp)
$(debian_dir_stamp): $(PACKAGE_DISTDIR)/$(PACKAGE)-$(VERSION).tar.gz $(PACKAGE_DEBTOPDIR)
	rm -rf $(PACKAGE_DEBTOPDIR)/$(PACKAGE)-$(VERSION) $(debian_dir)
	$(mkdir_p) $(PACKAGE_DEBTOPDIR)/$(PACKAGE)-$(VERSION)
	$(GZIP_CMD) -dc $< | tar xf - -C $(PACKAGE_DEBTOPDIR)
	@if test "$(PACKAGE_DEBTOPDIR)/$(PACKAGE)-$(VERSION)" != "$(debian_dir)" ; then \
		$(ECHO) "mv -f $(PACKAGE_DEBTOPDIR)/$(PACKAGE)-$(VERSION) $(debian_dir)" ; \
		mv -f $(PACKAGE_DEBTOPDIR)/$(PACKAGE)-$(VERSION) $(debian_dir) ; \
	fi
	touch $(debian_dir_stamp)

##
# Approach to signing dsc files taken from dpkg-buildpackage:  A signed .dsc file is merely a signed
# cleartext armoured version of the original .dsc file with the same filename.  The tar file is not
# signed.  As there is an md5 checksum in the signed .dsc file, the signature verifies the tar file
# as well.  We use a little trick to allow GPGPASSWD to be exported by the user to permit automated
# builds that including signing.  If you don't like the security issues that raises, dont use it and
# you will be prompted for a passphrase with each signature.
##
$(debian_dsc_file) $(debian_tar_file): $(debian_dir_stamp) $(PACKAGE_DEBTOPDIR)
	(cd "$(PACKAGE_DEBTOPDIR)" ; $(DPKG_SOURCE) -b -sn $(debian_dir))

$(debian_sig_file): $(debian_dsc_file)
	@\
	user="$(GNUPGUSER)" ; user="$${user:+ -u $$user}" ; \
	home="$(GNUPGHOME)" ; home="$${home:+ --homedir $$home}" ; \
	pass="$(GNUPGPASS)" ; pass="$${pass:+ --batch }" ; \
	pipe="$(GNUPGPASS)" ; pipe="$${pipe:+ $(ECHO) "$$pipe" |}" ; \
	$(ECHO) "rm -f $@" ; \
	rm -f $@ ; \
	$(ECHO) "$(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@" ; \
	eval "$$pipe $(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@" || { rm -f $< $@ ; exit 1 ; }
	cp -fp $@ $<
	touch $@

dsc: $(debian_dsc_file) $(debian_tar_file)

debs: $(debian_dir)
	( cd $(debian_dir) ; $(DPKG_BUILDPACKAGE) -b -rfakeroot -uc $(DEBXOPTS) -nc )

# Another sneaky trick
all-debs: ALL_EXPORT_OPTS = DEBXOPTS='$(DEBXOPTS)'

$(debian_asc_file): $(debian_chg_file)
	@\
	user="$(GNUPGUSER)" ; user="$${user:+ -u $$user}" ; \
	home="$(GNUPGHOME)" ; home="$${home:+ --homedir $$home}" ; \
	pass="$(GNUPGPASS)" ; pass="$${pass:+ --batch }" ; \
	pipe="$(GNUPGPASS)" ; pipe="$${pipe:+ $(ECHO) "$$pipe" |}" ; \
	$(ECHO) "rm -f $@" ; \
	rm -f $@ ; \
	$(ECHO) "$(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@" ; \
	eval "$$pipe $(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@" || { rm -f $< $@ ; exit 1 ; }
	cp -fp $@ $<
	touch $@

sigs: $(debian_sig_file)

csig:
	@for file in $(debian_change_files) ; do \
		if test -f "$$file" ; then \
			f=`echo "$$file" | sed -r -e 's|\.changes(\.asc)?$$|.changes.asc|'` ; \
			$(MAKE) $(AM_MAKEFLAGS) $$f ; \
		fi ; \
	done

release-deb: dsc debs

release-sign-dsc: sigs
release-sign-chg: csig

RELEASE			+= release-deb
RELEASE_SIGN		+= release-sign-dsc release-sign-chg
RELEASECLEANFILES	+= $(debian_source_files) $(debian_dir_stamp) $(debian_binary_files) $(debian_change_files)
RELEASE_DIRECTORIES	+= $(debian_dir)

distclean-deb:
	rm -rf $(debian_dir)

DISTCLEAN_LOCAL		+= distclean-deb

RELEASE_CLEAN_LOCAL	+= distclean-deb

EXTRA_DIST		+= \
			debian/changelog \
			debian/control \
			debian/rules \
			.pkgrelease \
			.pkgepoch

MY_PHONY		+= dsc debs sigs csig
ALL_RECURSIVE_TARGETS	+= all-dsc all-debs all-sigs

endif
## BUILD_DPKG

endif
## MAINTAINER_MODE

## vim: ft=automake
