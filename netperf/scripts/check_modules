#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile: check_modules,v $ $Name:  $($Revision: 0.9.2.18 $) $Date: 2005/07/07 11:34:00 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2005/07/07 11:34:00 $ by $Author: brian $
#
# =============================================================================

me=`basename $0`
retval=0

exec 5>>$top_builddir/$me.log

export -p >&5

function echo_v()
{
	echo "$me:  : $1"
}
function echo_t()
{
	echo "$me: T: $1"
}
function echo_s()
{
	if test :"${MAINTAINER_MODE:-no}" = :verbose ; then
		echo "$me: S: $1"
	fi
	echo "$me:$2: S: $1" >&5
}
function echo_d()
{
	echo "$me:$2: D: $1" >&5
}
function echo_e()
{
	echo "$me: E: --- $1" >&2
	echo "$me:$2: E: $1" >&5
	retval=1
}
function echo_w()
{
#	if test :"${MAINTAINER_MODE:-no}" != :no ; then
		echo "$me: W: --- $1" >&2
#	fi
	echo "$me:$2: W: $1" >&5
}

export -p | while read line
do
	echo_d "$line" $LINENO
done

KERNEL_SYSMAP="$DESTDIR$ksysmap"
KERNEL_MODMAP="Modules.map"

echo_v "testing for undefined symbols in kernel modules"
if test -z "$KERNEL_SYSMAP"
then
	echo_w "KERNEL_SYSMAP is empty, skipping test" $LINENO
	exit 77
fi
if test -z "$KERNEL_MODULES" -o ! -f $KERNEL_MODMAP
then
	echo_w "KERNEL_MODULES is empty, skipping test" $LINENO
	exit 77
fi
echo_d "using system map $KERNEL_SYSMAP" $LINENO
echo_d "using module map $KERNEL_MODMAP" $LINENO
rm -f Modules.def
for modmap in $KERNEL_MODMAP $KERNEL_MODMAPS
do
	echo_v "creating defined symbol map for $modmap"
	echo_d "cat $modmap | egrep -- '\<B\>|\<D\>|\<T\>' >> Modules.def" $LINENO
	cat $modmap | egrep -- '\<B\>|\<D\>|\<T\>' | tee -a Modules.def \
		| while read line ; do echo_d "$line" $LINENO ; done
done
for module in $KERNEL_MODULES
do
	thismodule=
	if test -f ./$module
	then
		echo_v "testing symbols in kernel module $module"
#		symbollist=`objdump -t $module | egrep -- '\*UND\*' | sed -e 's|^.* ||'`
#		for symbol in $symbollist
		echo_d "nm -s $module | egrep -- '\<U\>' | sed -e 's|^.* ||' > Modules.und" $LINENO
		nm -s $module | egrep -- '\<U\>' | sed -e 's|^.* ||' | tee Modules.und \
			| while read line ; do echo_d "$line" $LINENO; done
		while read symbol
		do
			if test "$symbol" = "__this_module"
			then
				thismodule=found
				continue
			fi
			uv_symbol=`echo $symbol | sed -r -e 's|_R(smp_)?[[:xdigit:]]{8}$||'`
			echo_t "testing symbol $symbol"
			: #echo_t "testing Modules.def for $symbol"
			echo_d "egrep -- \"\<$symbol\>\" Modules.def 2>&1 >/dev/null" $LINENO
			if ( egrep -- "\<$symbol\>" Modules.def 2>&1 >/dev/null)
			then
				echo_s "symbol $symbol found (Modules.def)" $LINENO
			else
				: #echo_t "testing System.map for $symbol"
				echo_d "egrep -- \"\<$symbol\>\" $KERNEL_SYSMAP 2>&1 >/dev/null" $LINENO
				if ( egrep -- "\<$symbol\>" $KERNEL_SYSMAP 2>&1 >/dev/null)
				then
					echo_s "symbol $symbol found (System.map)" $LINENO
				else
					: #echo_t "testing System.map for $uv_symbol"
					echo_d "egrep -- \"\<$uv_symbol\>\" $KERNEL_SYSMAP 2>&1 >/dev/null" $LINENO
					if ( egrep -- "\<$uv_symbol\>" $KERNEL_SYSMAP 2>&1 >/dev/null)
					then
						echo_s "symbol $symbol found (System.map)[unversioned]" $LINENO
					else
						echo_w "cannot find symbol $uv_symbol" $LINENO
						symbols="${symbols}${symbols:+ }${module}:${symbol}"
					fi
				fi
			fi
		done <Modules.und
		rm -f Modules.und
	else
		echo_e "kernel module $module does not exist" >&2 $LINENO
		modules="${modules}${modules:+ }$module"
	fi
done
rm -f Modules.def

if test -z "$modules"
then
	echo_s "all modules found" $LINENO
else
	echo_e "the following modules were not found:" $LINENO
	for module in $modules
	do
		echo_e "$module" $LINENO
	done
fi
if test -z "$symbols"
then
	echo_s "all symbols in all modules found" $LINENO
else
	echo_e "the following symbols were not found:" $LINENO
	for symbol in $symbols
	do
		echo_e "$symbol" $LINENO
	done
fi

if test :"${MAINTAINER_MODE:-no}" != :no ; then
	if test -n "$PKG_MANPATH" ; then
		manpath="$PKG_MANPATH"
	else
		manpath="${top_builddir}/doc/man:${top_builddir}/man:${top_builddir}:./doc/man:./man:.${mandir:+:${mandir}}"
	fi
	searchpath=`echo "$manpath" | sed -e 's|:| |g'`
	#
	# Check for manual pages for exported symbols.  In maintainer mode we get pedantic and
	# generate an error if there are any exported symbols from our modules that are not
	# documented with a manual page in section 9.  This ensures that the documentation is
	# complete.  You need to run make check in maintainer mode to perform this check.
	#
	echo_v "testing for manual pages for exported symbols"
	rm -f Modules.exp
	for module in $KERNEL_MODULES
	do
		echo_v "creating exported symbol map for $module"
		echo_d "nm -s $module | egrep -- '. __ksymtab_' | sed -e 's|^.*. __ksymtab_||' >> Modules.exp" $LINENO
		nm -s $module | egrep -- '. __ksymtab_' | sed -e 's|^.*. __ksymtab_||' | tee -a Modules.exp \
			| while read line ; do echo_d "$line" $LINENO ; done
	done
	while read symbol
	do
		symbol=`echo $symbol | sed -r -e 's|_R(smp_)?[[:xdigit:]]{8}$||'`
		echo_t "testing for $symbol in section 9"
		# just find it
		page=man9/$symbol.9
		found=no
		for dir in $searchpath ; do
			test -d $dir || continue
			if test -f $dir/$page -o -f $dir/$page.gz -o -f $dir/$page.bz2 ; then
				echo_s "manual page $dir/$page exists" $LINENO
				found=yes
				break
			fi
		done
		if test :"$found" = :yes ; then
			echo_s "found $page"
		else
			echo_e "cannot find $page"
		fi
#		echo_d "man -aw -M $manpath 9 $symbol 2>&1" $LINENO
#		if result=`man -aw -M $manpath 9 $symbol 2>&1`
#		then
#			echo "$result" | while read line
#			do
#				echo_s "$line" $LINENO
#			done
#		else
#			echo_e "$result" $LINENO
#		fi
	done <Modules.exp
	rm -f Modules.exp
fi

if test -n "$symbols" -o -n "$modules"
then
	retval=1
fi

if test $retval -eq 1 ; then
	echo_v "--------------"
	echo_v "Error summary:"
	echo_v "--------------"
	egrep -- '\<E:' $top_builddir/$me.log >&2
	echo_v "--------------"
fi

exit $retval

