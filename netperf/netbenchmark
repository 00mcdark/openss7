#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile: netbenchmark,v $ $Name:  $($Revision: 0.9.2.4 $) $Date: 2006/05/23 22:43:29 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2006/05/23 22:43:29 $ by $Author: brian $
#
# =============================================================================

ECHO='echo'
SHELL='/bin/bash'
SED='sed'

# check that we have a working $ECHO
if test "X$1" = X--no-reexec ; then
# Discard the --no-reexec flag and continue
    shift
elif test "X$1" = X--fallback-echo ; then
    :
else
    exec $SHELL "$0" --no-reexec ${1+"$@"}
fi

if test "X$1" = X--fallback ; then
    shift
    cat <<EOF
$*
EOF
    exit 0
fi

program=`$ECHO "$0" | $SED -e 's%^.*/%%'`
modename="$program"

ident='$RCSfile: netbenchmark,v $ $Name:  $($Revision: 0.9.2.4 $)'

HELP="Try \`$program --help' for more information."

MKDIR='mkdir'
MV='/bin/mv -f'
RM='/bin/rm -f'

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed="$SED"' -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'
# test EBCDIC or ASCII
case `$ECHO A | od -x` in
    *[Cc]1*) # EBCDIC based system
	SP2NL="tr '\100' '\n'"
	NL2SP="tr '\r\n' '\100\100'"
	;;
    *) # Assume ASCII based system
	SP2NL="tr '\040' '\012'"
	NL2SP="tr '\015\012' '\040\040'"
	;;
esac

# NLS nuisances
# Only set LANG and LC_ALL to C if already set.
# These must not be set unconditionally because not all systems understand
# e.g. LANG=C (notably SCO).
# We save the old values to restore during execute mode.
if test "${LC_ALL+set}" = set ; then
    save_LC_ALL="$LC_ALL" ; LC_ALL=C ; export LC_ALL
fi
if test "${LANG+set}" = set ; then
    save_LANG="$LANG" ; LANG=C ;  export LANG
fi

# Make sure IFS has a sensible default
: ${IFS=" 	"}

my_letters='abcdefghijklmnopqrstuvwxyz'
my_LETTERS='ABCDEFGHIJLKMNOPQRSTUVWXYZ'
my_Letters=$my_letters$my_LETTERS
my_numbers='0123456789'
my_alphano=$my_Letters$my_numbers
my_uppercase="$SED y%*$my_letters%P$my_LETTERS%;s%[^_$my_alphano]%_%g"
my_tokenize="$SED s%[^a-zA-Z0-9]%_%g"

# defaults

command=
filename=
debug=0
verbose=1

default_command=none
default_port=12865
default_testime=60
default_hostname=localhost
default_headers=0

case "$program" in
    *_range_script)
	if test ":$program" = ":sctp_range_script" ; then
	    # These are for SCTP_STREAM range tests
	    default_stats='-i 10,2 -I 99,3'
	    default_bufsizes='32768'
	    default_sndsizes='1 4 16 64 256 1024 4096 162 8192 16384 65536'
	    default_nettest=SCTP_STREAM
	elif test ":$program" = ":tcp_range_script" ; then
	    # These are for TCP_STREAM range tests
	    default_stats='-i 10,2 -I 99,3'
	    default_bufsizes='32768'
	    default_sndsizes='1 4 16 64 256 1024 4096 162 8192 16384 65536'
	    default_nettest=TCP_STREAM
	fi
	default_rrsizes=''
	;;
    *_stream_script)
	if test ":$program" = ":sctp_stream_script" ; then
	    # These are for SCTP_STREAM tests
	    default_stats='-i 10,2 -I 99,5'
	    default_bufsizes="57344 32768 8192"
	    default_sndsizes="4096 8192 32768"
	    default_nettest=SCTP_STREAM
	elif test ":$program" = ":tcp_stream_script" ; then
	    # These are for TCP_STREAM tests
	    default_stats='-i 10,2 -I 99,5'
	    default_bufsizes="57344 32768 8192"
	    default_sndsizes="4096 8192 32768"
	    default_nettest=TCP_STREAM
	elif test ":$program" = ":udp_stream_script" ; then
	    # These are for UDP_STREAM tests
	    default_stats='-i 10,2 -I 99,10'
	    default_bufsizes="32768"
	    default_sndsizes="64 1024 1472"
	    default_nettest=UDP_STREAM
	fi
	default_rrsizes=''
	default_warmtime=
	;;
    *_rr_script)
	if test ":$program" = ":sctp_rr_script" ; then
	    # These are for SCTP_RR tests
	    default_stats='-i 10,2 -I 99,5'
	    default_rrsizes='1,1 64,64 100,200 128,8192'
	    default_nettest=SCTP_RR
	elif test ":$program" = ":tcp_rr_script" ; then
	    # These are for TCP_RR tests
	    default_stats='-i 10,2 -I 99,5'
	    default_rrsizes='1,1 64,64 100,200 128,8192'
	    default_nettest=TCP_RR
	elif test ":$program" = ":udp_rr_script" ; then
	    # These are for UDP_RR tests
	    default_stats='-i 10,2 -I 99,10'
	    default_rrsizes='1,1 64,64 100,200 1024,1024'
	    default_nettest=UDP_RR
	fi
	default_bufsizes='0'
	default_sndsizes=''
	default_warmtime=
	;;
    snapshot_script)
	if test ":$program" = ":snapshot_script" ; then
	    # These are for snapshot tests
	    default_stats='-i 10,3 -I 99,5'
	    default_bufsizes=''
	    default_sndsizes=''
	    default_rrsizes=''
	    default_nettest=''
	    default_warmtime=20
	fi
	;;
    arr_script)
	if test ":$program" = ":arr_script" ; then
	    : # These are for arr tesets
	fi
	;;
    *)
	;;
esac

defaults='command port testtime stats bufsizes sndsizes rrsizes nettest warmtime hostname headers'

function version()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF
$program:
    $ident
    Copyright (c) 2001-2006  OpenSS7 Corporation.  All Rights Reserved.
    Distributed under GPL Version 2, included here by reference.
EOF
}

function usage()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF
Usage:
    $program [options]
    $program { -h | --help }
    $program { -V | --version }
    $program { -C | --copying }
EOF
}

function help()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    usage
    cat <<EOF
Options:
    -n, --dry-run
	do not execute but verify actions
    -q, --quiet
	supress normal output
    -D, --debug [LEVEL]
	increase or set debugging verbosity
    -v, --verbose [LEVEL]
	increase or set output verbosity
    -h, --help
	prints this usage information and exits
    -V, --version
	prints the version information and exits
    -C, --copying
	prints copying permissions and exits
EOF
}

function copying()
{
    if test :${show:-yes} = :no ; then
	return
    fi
    cat <<EOF
--------------------------------------------------------------------------------
$ident
--------------------------------------------------------------------------------
Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
 
All Rights Reserved.
--------------------------------------------------------------------------------
This program is free software; you can  redistribute  it and/or modify  it under
the terms  of the GNU General Public License  as  published by the Free Software
Foundation; version 2 of the License.
 
This program is distributed in the hope that it will  be useful, but WITHOUT ANY
WARRANTY; without event  the implied warranty of MECHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 
You should  have received a copy of the GNU  General  Public License  along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass Ave.
Cambridge, MA 02139, USA.
--------------------------------------------------------------------------------
U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf
of the U.S. Government ("Government"), the following provisions apply to you. If
the Software is supplied by the  Department of Defense ("DoD"), it is classified
as "Commercial  Computer  Software"  under  paragraph  252.227-7014  of the  DoD
Supplement  to the  Federal Acquisition Regulations  ("DFARS") (or any successor
regulations) and the  Government  is acquiring  only the  license rights granted
herein (the license rights customarily provided to non-Government users). If the
Software is supplied to any unit or agency of the Government  other than DoD, it
is  classified as  "Restricted Computer Software" and the Government's rights in
the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition
Regulations ("FAR")  (or any successor regulations) or, in the cases of NASA, in
paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor
regulations).
--------------------------------------------------------------------------------
Commercial  licensing  and  support of this  software is  available from OpenSS7
Corporation at a fee.  See http://www.openss7.com/
--------------------------------------------------------------------------------
EOF
}

function option_unrec()
{
    if test ${verbose:-0} -gt 0 ; then
	opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
	$ECHO "$program: syntax error -- \`$opt' unrecognized" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_noarg()
{
    if test ${verbose:-0} -gt 0 ; then
	opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
	$ECHO "$program: syntax error -- \`$opt' does not accept an argument" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_needarg()
{
    if test ${verbose:-0} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' requires an argument" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_after()
{
    if test ${verbose:-0} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' cannot occur after \`$2'" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_with()
{
    if test ${verbose:-0} -gt 0 ; then
	$ECHO "$program: syntax error -- \`$1' cannot occur with \`$2'" >&2
	( usage ) >&2
    fi
    exit 2
}

# Parse our command line options once, thoroughly.
while test "$#" -gt 0 -o ":$more" != ":"
do
    if test ":$more" != ":" ; then
	arg="-$more"
	more=
    else
	arg="$1"
	shift
    fi
    if test x"$more_options" = xno ; then
	nonopt="$arg"
	break
    fi
    # check for attached option argument
    case $arg in
	--filename=* | --filenam=* | --filena=* | --filen=* | --file=* | --fil=* | --fi=* | --f=*)
	    optarg=`$ECHO "X$arg" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	--*=*)
	    option_noarg $arg ;;
	-[nqDvhVC])
	    optarg= ;;
	-[nqDvhVC]*)
	    optarg=
	    more=`$ECHO "X$arg" | $Xsed -e 's|-[cdinqDvhVC]||'`
	    eval "arg=\`$ECHO \"X$arg\" | $Xsed -e 's|$more||'\`"
	    ;;
	-f)
	    optarg= ;;
	-f*)
	    optarg=`$ECHO "X$arg" | $Xsed -e 's|-f||'` ;;
	*)
	    optarg= ;;
    esac
    # check for optional or required option argument
    if test -n "$prev" ; then
	case $arg in
	    -*) # optional arguments not forthcoming
		case $prev in
		    debug | verbose) eval "(($prev++))" ;;
		    # these have required arguments
		    filename)
			option_needarg $prevopt ;;
		esac
		prev= ; prevopt=
		;;
	    *) # if the previous option needs an argument, assign it.
		eval "$prev=\"\$arg\""
		prev= ; prevopt=
		continue
		;;
	esac
    fi
    # Have we seen a non-optional argument yet?
    case $arg in
	--help | --h | --Help | --H | -h | -H | -\? | --\?)
	    show_help=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--version | --versio | --versi | --vers | -V)
	    show_version=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--copying | --copyin | --copyi | --copy | --cop | --co | --c | -C)
	    show_copying=yes
	    if test ":$command" = ":" ; then command=none ; fi
	    ;;
	--verbose | --verbos | --verbo | --verb)
	    prevopt="$arg"
	    prev=verbose
	    ;;
	-v)
	    ((verbose++))
	    ;;
	--verbose=* | --verbos=* | --verbo=* | --verb=*)
	    verbose="$optarg"
	    ;;
	--debug | --debu | --deb)
	    prevopt="$arg"
	    prev=debug
	    ;;
	-D)
	    $ECHO "$program: enabling shell trace mode" 1>&2
	    set -x
	    ;;
	--debug=* | --debu=* | --deb=*)
	    debug="$optarg"
	    ;;
	--dry-run | --dryrun | --n | -n)
	    run=no
	    ;;
	--quiet | --silent | -q)
	    show=no
	    verbose=0
	    debug=0
	    ;;
	--test-time | --testtime | --testime | --test | --time | --t | -t)
	    prevopt="$arg"
	    prev=testtime
	    ;;
	--test-time=* | --testtime=* | --testime=* | --time=* | --t=* | -t*)
	    testtime="$optarg"
	    ;;
	--host-names | --host-name | --hostnames | --hostname | --hosts | --host | --rem-hosts | --rem-host | --remote-hosts | --remote-host | --remhosts | --remhost)
	    if test ":$program" != ":netbenchmark" -o ":$command" != "arr" ; then option_unrec $arg ; fi
	    prevopt="$arg"
	    prev=hostname
	    ;;
	--host-names=* | --host-name=* | --hostnames=* | --hostname=* | --hosts=* | --host=* | --rem-hosts=* | --rem-host=* | --remote-hosts=* | --remote-host=* | --remhosts=* | --remhost=*)
	    if test ":$program" != ":netbenchmark" -o ":$command" != "arr" ; then option_unrec $arg ; fi
	    hostname="$hostname $optarg"
	    ;;
	--buffer-sizes | --buffers | --bufsize | --bufsizes | --bufs | --b | -b)
	    prevopt="$arg"
	    prev=bufsizes
	    ;;
	--buffer-sizes=* | --buffers=* | --bufsize=* | --bufsize=* | --bufs=* | --b=* | -b*)
	    bufsizes="$bufsizes $optarg"
	    ;;
	--send-sizes | --send-size | --sndsizes | --sndsizes | --send | --snd | --s | -s)
	    prevopt="$arg"
	    prev=sndsizes
	    ;;
	--send-sizes=* | --send-size=* | --sndsizes=* | --sndsizes=* | --send=* | --snd=* | --s=* | -s*)
	    sndsizes="$sndsizes $optarg"
	    ;;
	--net-tests | --net-test | --nettests | --nettest | --net-tsts | --net-tst | --nettsts | --nettst | --net | --tests | --test)
	    prevopt="$arg"
	    prev=nettest
	    ;;
	--net-test=* | --nettest=* | --net-tst=* | --nettst=* | --net=*)
	    nettest="$nettest $optarg"
	    ;;
	--SNAPSHOT | --snapshot | --snapsho | --snapsh | --snap)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --snapshot ; else command=snapshot ; fi
	    ;;
	--PACKET_BYTE | --packet_byte | --packet-byte | --packet-byt | --packet)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --packet_byte ; else command=packet_byte ; fi
	    ;;
	--SCTP_STREAM | --sctp_stream | --sctpstream | --sctp-stream | --sctp-strea | --sctp-stre | --sctp-str | --sctp-st)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --sctp_stream ; else command=sctp_stream ; fi
	    ;;
	--TCP_STREAM | --tcp_stream | --tcpstream | --tcp-stream | --tcp-strea | --tcp-stre | --tcp-str | --tcp-st)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --tcp_stream ; else command=tcp_stream ; fi
	    ;;
	--UDP_STREAM | --udp_stream | --udpstream | --udp-stream | --udp-strea | --udp-stre | --udp-str | --udp-st)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --udp_stream ; else command=udp_stream ; fi
	    ;;
	--SCTP_RR | --sctp_rr | --sctprr | --sctp-rr)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --sctp_rr ; else command=sctp_rr ; fi
	    ;;
	--TCP_RR | --tcp_rr | --tcprr | --tcp-rr)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --tcp_rr ; else command=tcp_rr ; fi
	    ;;
	--UDP_RR | --udp_rr | --udprr | --udp-rr)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --udp_rr ; else command=udp_rr ; fi
	    ;;
	--ARR | --arr)
	    if test ":$program" != ":netbenchmark" ; then option_unrec $arg ; fi
	    if test ":$command" != ":" ; then option_with "--$command" --arr ; else command=arr ; fi
	    ;;
	--)
	    # end of options
	    more_options=no
	    ;;
	-*)
	    option_unrec $arg
	    ;;
	*)
	    nonopt="${nonopt}${nonopt:+ }'$arg'"
	    ;;
    esac
done

# hit end of list wanting an argument
case $prev in
    # these have optional arguments
    debug | verbose) eval "(($prev++))" ;;
    # the rest have required arguments
    filename)
	option_needarg $prevopt ;;
esac

if test x"$nonopt${nonopt:+ }${1+$@}" != "x" ; then
    eval "files=($nonopt${nonopt:+ }${1+$@})"
else
    files=
fi

# assign defaults to all unassigned variables
for def in $defaults ; do
    val=`eval 'echo $'"$def"`
    if test :${val:+set} != :set ; then
	eval "$def=\$default_$def"
    else
	eval "$def=\"\$val\""
    fi
done

function none_command()
{
    if test -n "$show_version$show_help$show_copying" ; then
	if test ${verbose:-0} -gt 1 ; then
	    $ECHO "Displaying information"
	fi
	if test ":$show_version" != ":" ; then
	    version
	fi
	if test ":$show_help" != ":" ; then
	    help
	fi
	if test ":$show_copying" != ":" ; then
	    copying
	fi
    fi
}

function find_netperf()
{
    netperf=`which netperf`
    pname=`$ECHO "$netperf" | $SED -e 's%^.*/%%'`
    if test ":$pname" != ":netperf" -o !-x $netperf ; then
	# netperf is not in our path, check elsewhere
	netperf=`whereis netperf`
	netperf=`$ECHO "$netperf" | $SED -e 's%^netperf:[[:space:]]*%%;s%[[:space:]].*%%'`
	pname=`$ECHO "$netperf" | $SED -e 's%^.*/%%'`
	if test ":$pname" != ":netperf" -o !-x $netperf ; then
	    if test ${verbose:-0} -gt 0 ; then
		$ECHO "$program: error -- cannot find netperf executable" >&2
		( usage ) >&2
	    fi
	    exit 1
	fi
    fi
}

function stream_command()
{
    find_netperf
    for bufsize in $bufsizes ; do
	for sndsize in $sndsizes ; do
	    $ECHO
	    $ECHO "------------------------------------"
	    $ECHO "Testing with the following command line:"
	    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime ${hostname+-H }$hostname ${1+-t }$1 ${stats} -- -m $sndsize -s $bufsize -S $bufsize"
	    $ECHO
#	    $netperf ${port+-p }$port ${testtime+-l }$testtime ${hostname+-H }$hostname ${1+-t }$1 ${stats} -- -m $sndsize -s $bufsize -S $bufsize
	    $ECHO
	done
    done
    cat <<EOF
If you wish to submit these results to the netperf database at
http://www.cup.hp.com/netperf/NetperfPage.html, please submit each
datapoint individually. Individual datapoints are separated by
lines of dashes. 
EOF
}

function rr_command()
{
    find_netperf
}

function range_command()
{
    stream_command $1
}

function snapshot_command()
{
    find_netperf
    if test $verbose -gt 1 ; then
	$ECHO "Performing warm-up test `date`"
	$ECHO "$netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 4096"
    fi
#   $netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 4096 2>&1 >/dev/null
    if test $verbose -gt 1 ; then
	$ECHO "$netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m   96"
    fi
#   $netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m   96 2>&1 >/dev/null
    if test $verbose -gt 1 ; then
	$ECHO "$netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_RR     ${hostname+-H }$hostname -- -r 1,1                   "
    fi
#   $netperf ${port+-p }$port ${warmtime+-l }$warmtime -t TCP_RR     ${hostname+-H }$hostname -- -r 1,1                    2>&1 >/dev/null
    if test $verbose -gt 1 ; then
	$ECHO "Warm-up tests complete `date`"
    fi
    $ECHO "Starting 56x4  TCP_STREAM tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_STREAM ${hostname+-H }$hostname -- -s 57344 -S 57344 -m 4096"
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_STREAM ${hostname+-H }$hostname -- -s 57344 -S 57344 -m 4096 2>&1
    $ECHO
    $ECHO
    $ECHO "Starting 32x4  TCP_STREAM tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 4096"
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 4096 2>&1
    $ECHO
    $ECHO
    $ECHO "Starting 1,1   TCP_RR     tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_RR     ${hostname+-H }$hostname -- -r 1,1                   "
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t TCP_RR     ${hostname+-H }$hostname -- -r 1,1                   
    $ECHO
    $ECHO
    $ECHO "Starting 1,1   UDP_RR     tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_RR     ${hostname+-H }$hostname -- -r 1,1                   "
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_RR     ${hostname+-H }$hostname -- -r 1,1                   
    $ECHO
    $ECHO
    $ECHO "Starting 512,4 UDP_RR     tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_RR     ${hostname+-H }$hostname -- -r 516,4                 "
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_RR     ${hostname+-H }$hostname -- -r 516,4                 
    $ECHO
    $ECHO
    $ECHO "Starting 32x4  UDP_STREAM tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 4096"
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_STREAM ${hostname+-H }$hostname -- -r s 32768 -S 32768 -m 4096
    $ECHO
    $ECHO
    $ECHO "Starting 32x1  UDP_STREAM tests at `date`"
    $ECHO
    $ECHO "------------------------------------"
    $ECHO "Testing with the following command line:"
    $ECHO "$netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_STREAM ${hostname+-H }$hostname -- -s 32768 -S 32768 -m 1024"
    $ECHO
#   $netperf ${port+-p }$port ${testtime+-l }$testtime $stats -t UDP_STREAM ${hostname+-H }$hostname -- -r s 32768 -S 32768 -m 1024
    $ECHO
    $ECHO
    $ECHO "Tests completed at `date`"
    $ECHO
    cat <<EOF
If you wish to submit these results to the netperf database at
http://www.cup.hp.com/netperf/NetperfPage.html, please submit each
datapoint individually. Individual datapoints are separated by
lines of dashes. 
EOF
}

case "$program" in
    *)
	:
	;;
esac

case "$command" in
    none)
	none_command
	;;
    *)
	( usage ) >&2
	exit 1
	;;
esac




# vim: ft=sh noet sw=4 nocindent
