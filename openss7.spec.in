# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
# =============================================================================
#
# @(#) $RCSfile: openss7.spec.in,v $ $Name:  $($Revision: 1.1.2.11 $) $Date: 2011-02-07 04:48:31 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2011-02-07 04:48:31 $ by $Author: brian $
#
# =============================================================================

# Note: we have way too many devices to make traditional device nodes
# any more, so these are commented out.  Only the traditional UNIX ABI
# inet devices are created.  Use the /dev/streams directory for the rest.

%global majbase     @STRCONF_MAJBASE@
#global makedev     @STRCONF_MAKEDEV@
#global mknods      /usr/sbin/inet_mkdev    # inet style install
#global rmnods      /usr/sbin/inet_rmdev    # inet style removal
%global mknods      /usr/sbin/@STRCONF_DEVICES@
%global rmnods      /usr/sbin/@STRCONF_DEVICES@ --remove
# all creation and removal of devices is now performed by init script
%global epoch       @PACKAGE_RPMEPOCH@
%global base        @PACKAGE_LCNAME@
%global title       @PACKAGE_TITLE@
%global stitle      @PACKAGE_SHORTTITLE@
%global virtual     STREAMS

%global binfiles    %{nil}
%global sbinfiles   %{nil}
%global modules     specfs streams streams-aixcompat streams-clone streams-connld streams-echo streams-fifo streams-hpuxcompat streams-log streams-nsdev streams-nuls streams-osfcompat streams-pipe streams-pipemod streams-sad streams-sc streams-sth streams-suncompat streams-svr4compat streams-uw7compat
%global nonrpmmods  LiS lis streams STREAMS strbcm strcompat strutil strtty strchan strxns strxnet strnsl strsock strinet strsctp strisdn strvoip strss7 sigtran stratm
%global preloads    specfs streams
%global libraries   streams
%global perlmods    %{nil}
%global tcllibs     %{nil}
%global gcjlibs     %{nil}
%global gcjmaps     %{nil}
%global jarfiles    %{nil}
%global jnilibs     %{nil}
%global javadoc     %{nil}
%global locales     %{nil}
%global tools       ldltest strtst thrtst timetst fattach fdetach ldlconfig oc pafd psfd rwf streams strmakenodes mkfifo
%global manuals     openss7 ATM carrier cci cdi chi cnam dlpi dlpi_porting FR hlr INET ISDN lab libxnet libxnsl lli mapi MG mg mtpi mxi nli npi npi_mtp npi_sccp OSI PHYS porting sbc sccpi sdli sdti sg sgp SIGTRAN sli SPG2 SPG SS7 ssg ss STREAMS_FAQ STREAMS tci tpi tpi_sccp tri TTY VOIP voip wan X25 x25_porting x400p xcc xmap XNS xti_sccp
%global pngfiles    *.png
%global cssfiles    *.css
%global initfiles   specfs streams %{base} strerr strace
%global nonrpminit  strms_up strms_dn
%global conffiles   *.conf
%global testfiles   *test*
%global testscripts testsuite
%global sendpr      %{nil}
%global mibfiles    *.mib
%global snmpmods    strMIB
#global gdmos       %{nil}
%global netconfig   %{base}
%global sock2path   %{base}
%global snmpconf    strMIB.conf
%global manrefs     %{base}.refs
%global manmacros   %{base}.macros
%global manpages    man*
%global includes    %{nil}
%global license     AGPLv3

%global NEED_streams    0

%{!?_enable_debug_packages:%{expand: %%global _enable_debug_packages 0}}

# there are three ways to pass kernel version to the build process:
#    global _kversion in /usr/lib/rpm/macros, /etc/rpm/macros or ~/.rpmmacros
#    global _kversion on the rpmbuild command line
#    global PACKAGE_KVERSION environment variable
#    just let it default to `uname -r`
#{!?_kversion: #{expand: ##global _kversion #(env | grep PACKAGE_KVERSION | sed -e 's,.*=,,')}}
%{!?_kversion: %{expand: %%global _kversion %(uname -r)}}

%global without_ko_modules %(echo %{_kversion} | sed -e 's,^2\.[56]\..*$,0,;s,^2\.4\..*$,1,')
%global kernel_version %{_kversion}
%global kernel_source %(echo %{_kversion} | sed -r -e 's,BOOT$,,;s,-?smp$,,;s,bigmem$,,;s,debug$,,;s,enterprise$,,;s,hugemem$,,;s,secure$,,;s,-i686-up-4GB$,,;s,-p3-smp-64GB$,,;s,-64GB-SMP,.SuSE,;s,-default$,,')
%global kernel_number %(echo %{_kversion} | sed -e 's,-.*$,,')
%global kernel_release %(echo %{_kversion} | sed -e 's,-,.,g')
%global kernel_string %(echo %{_kversion} | sed -e 's,-,_,g')
%global kernel_flavor %(echo %{_kversion} | sed -r -e 's,.*BOOT,-BOOT,;t;s,.*-?smp$,-smp,;t;s,.*bigmem$,-bigmem,;t;s,.*debug$,-debug,;t;s,.*kdump$,-kdump,;t;s,.*enterprise$,-enterprise,;t;s,.*hugemem$,-hugemem,;t;s,.*secure$,-secure,;t;s,.*-i686-up-4GB,-i686-up-4GB,;t;s,.*-p3-smp-4GB$,-p3-smp-4GB,;t;s,.*-64GB-SMP$,-64GB-SMP,;t;s,.*-default$,-default,;t;s,.*pae$,-pae,;t;s,.*PAE$,-PAE,;t;s,.*,,')

%global HAVE_devices        %{?majbase:     1}%{!?majbase:     0}
%global HAVE_makedev        %{?makedev:     1}%{!?makedev:     0}
%global HAVE_mknods         %{?mknods:      1}%{!?mknods:      0}
%global HAVE_rmnods         %{?rmnods:      1}%{!?rmnods:      0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_binfiles       %{?binfiles:    1}%{!?binfiles:    0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_preloads       %{?preloads:    1}%{!?preloads:    0}
%global HAVE_modules        %{?modules:     1}%{!?modules:     0}
%global HAVE_libraries      %{?libraries:   1}%{!?libraries:   0}
%global HAVE_perlmods       %{?perlmods:    1}%{!?perlmods:    0}
%global HAVE_tcllibs        %{?tcllibs:     1}%{!?tcllibs:     0}
%global HAVE_gcjlibs        %{?gcjlibs:     1}%{!?gcjlibs:     0}
%global HAVE_gcjmaps        %{?gcjmaps:     1}%{!?gcjmaps:     0}
%global HAVE_jarfiles       %{?jarfiles:    1}%{!?jarfiles:    0}
%global HAVE_jnilibs        %{?jnilibs:     1}%{!?jnilibs:     0}
%global HAVE_javadoc        %{?javadoc:     1}%{!?javadoc:     0}
%global HAVE_locales        %{?locales:     1}%{!?locales:     0}
%global HAVE_tools          %{?tools:       1}%{!?tools:       0}
%global HAVE_manuals        %{?manuals:     1}%{!?manuals:     0}
%global HAVE_pngfiles       %{?pngfiles:    1}%{!?pngfiles:    0}
%global HAVE_cssfiles       %{?cssfiles:    1}%{!?cssfiles:    0}
%global HAVE_initscripts    %{?initfiles:   1}%{!?initfiles:   0}
%global HAVE_configfiles    %{?conffiles:   1}%{!?conffiles:   0}
%global HAVE_testfiles      %{?testfiles:   1}%{!?testfiles:   0}
%global HAVE_testscripts    %{?testscripts: 1}%{!?testscripts: 0}
%global HAVE_sendpr         %{?sendpr:      1}%{!?sendpr:      0}
%global HAVE_mibfiles       %{?mibfiles:    1}%{!?mibfiles:    0}
%global HAVE_snmpmods       %{?snmpmods:    1}%{!?snmpmods:    0}
%global HAVE_gdmofiles      %{?gdmos:       1}%{!?gdmos:       0}
%global HAVE_netconfig      %{?netconfig:   1}%{!?netconfig:   0}
%global HAVE_sock2path      %{?sock2path:   1}%{!?sock2path:   0}
%global HAVE_manrefs        %{?manrefs:     1}%{!?manrefs:     0}
%global HAVE_manmacros      %{?manmacros:   1}%{!?manmacros:   0}
%global HAVE_manpages       %{?manpages:    1}%{!?manpages:    0}
%global HAVE_snmpconf       %{?snmpconf:    1}%{!?snmpconf:    0}
%global HAVE_debugfiles     %{_enable_debug_packages}
%global HAVE_kdebugfiles    %{_enable_debug_packages}
%global HAVE_sourcefiles    1
%global HAVE_docfiles       1
%global HAVE_includes       %{?includes:    1}%{!?includes:    0}
%global HAVE_mkvars         1

%global HAVE_devscripts     0
%if %{HAVE_mknods}
%global HAVE_devscripts     1
%endif
%if %{HAVE_rmnods}
%global HAVE_devscripts     1
%endif

%global HAVE_infofiles      1
%global HAVE_txtfiles       1
%global HAVE_dvifiles       1
%global HAVE_psfiles        1
%global HAVE_pdffiles       1
%global HAVE_htmlfiles      1
%global HAVE_pngfiles       1
%global HAVE_cssfiles       1

%ifarch x86_64 s390x sparc64 ppc64 ia64
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%else
%global HAVE_lib32compat    0
%global HAVE_test32files    0
%global HAVE_snmp32mods     0
%endif

%if %{HAVE_devices}
%global USE_makedev         %{HAVE_makedev}
%global USE_mknods          %{HAVE_mknods}
%global USE_rmnods          %{HAVE_rmnods}
%else
%global USE_makedev         0
%global USE_mknods          0
%global USE_rmnods          0
%endif

%if %(if (rpm -q --whatprovides /usr/bin/gcj-dbtool >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%global HAVE_gcjmaps        0
%endif

%if %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%global USE_makedev         0
%endif

%if %(if (echo "%{_kversion}" | grep '^2\.4\.' >/dev/null 2>&1) ; then echo 1 ; else echo 0; fi)
%global HAVE_oldmods        %{HAVE_modules}
%global HAVE_oldprel        %{HAVE_preloads}
%global HAVE_newmods        0
%global HAVE_newprel        0
%else
%global HAVE_oldmods        0
%global HAVE_oldprel        0
%global HAVE_newmods        %{HAVE_modules}
%global HAVE_newprel        %{HAVE_preloads}
%endif

%if %{HAVE_newmods}
%global USE_makedev         0
%endif

%if %{USE_makedev}
%global USE_mknods          0
%global USE_rmnods          0
%global devicesfile         -f %{makedev}
%endif

%global FILES_binfiles      %{HAVE_binfiles}
%global FILES_sbinfiles     %{HAVE_sbinfiles}
%global FILES_preloads      %{HAVE_preloads}
%global FILES_oldprel       %{HAVE_oldprel}
%global FILES_newprel       %{HAVE_newprel}
%global FILES_modules       %{HAVE_modules}
%global FILES_oldmods       %{HAVE_oldmods}
%global FILES_newmods       %{HAVE_newmods}
%global FILES_libraries     %{HAVE_libraries}
%global FILES_libstatic     %{HAVE_libraries}
%global FILES_lib32compat   %{HAVE_lib32compat}
%global FILES_lib32static   %{HAVE_lib32compat}
%global FILES_perlmods      %{HAVE_perlmods}
%global FILES_tcllibs       %{HAVE_tcllibs}
%global FILES_gcjlibs       %{HAVE_gcjlibs}
%global FILES_gcjmaps       %{HAVE_gcjmaps}
%global FILES_jarfiles      %{HAVE_jarfiles}
%global FILES_jnilibs       %{HAVE_jnilibs}
%global FILES_javadoc       %{HAVE_javadoc}
%global FILES_locales       %{HAVE_locales}
%global FILES_tools         %{HAVE_tools}
%global FILES_initscripts   %{HAVE_initscripts}
%global FILES_devscripts    %{HAVE_devscripts}
%global FILES_configfiles   %{HAVE_configfiles}
%global FILES_testfiles     %{HAVE_testfiles}
%global FILES_test32files   %{HAVE_test32files}
%global FILES_testscripts   %{HAVE_testscripts}
%global FILES_sendpr        %{HAVE_sendpr}
%global FILES_mibfiles      %{HAVE_mibfiles}
%global FILES_snmpmods      %{HAVE_snmpmods}
%global FILES_snmp32mods    %{HAVE_snmp32mods}
%global FILES_gdmofiles     %{HAVE_gdmofiles}
%global FILES_netconfig     %{HAVE_netconfig}
%global FILES_sock2path     %{HAVE_sock2path}
%global FILES_manrefs       %{HAVE_manrefs}
%global FILES_manmacros     %{HAVE_manmacros}
%global FILES_manpages      %{HAVE_manpages}
%global FILES_snmpconf      %{HAVE_snmpconf}
%global FILES_debugfiles    %{HAVE_debugfiles}
%global FILES_kdebugfiles   %{HAVE_kdebugfiles}
%global FILES_sourcefiles   %{HAVE_sourcefiles}
%global FILES_docfiles      %{HAVE_docfiles}
%global FILES_includes      %{HAVE_includes}
%global FILES_symvers       %{HAVE_newmods}
%global FILES_mkvars        %{HAVE_mkvars}

# Try to reduce the side of the -doc package: skip txt, dvi and ps.
%global FILES_infofiles     %{HAVE_manuals}
#global FILES_txtfiles      %{HAVE_manuals}
#global FILES_dvifiles      %{HAVE_manuals}
#global FILES_psfiles       %{HAVE_manuals}
# FIXME: Skip documentation for texting
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
#global FILES_pdffiles      %{HAVE_manuals}
#global FILES_htmlfiles     %{HAVE_manuals}
#global FILES_pngfiles      %{HAVE_pngfiles}
#global FILES_cssfiles      %{HAVE_cssfiles}

# These are the defaults for the WITH_zzz macros.  These
# defaults can be changed by passing --with-zzz or --without-zzz
# to the rpmbuild command.  The default is to build everything
# for LFS but source.
%global WITH_modules        1
%global WITH_devel          1
%global WITH_tools          1
%global WITH_noarch         1
%global WITH_arch           1
%global WITH_source         0
%global WITH_snmp           1
%global WITH_java           1
%global WITH_mibs           1
%global WITH_docs           1
%global WITH_manrefs        1
%global WITH_manmacros      1
%global WITH_debug          %{_enable_debug_packages}
%global WITH_texinfo        1
%global WITH_texinfo_html   1
%global WITH_texinfo_print  1
%global WITH_papers         1
%global WITH_papers_html    1
%global WITH_papers_print   1
%global WITH_drafts         1
%global WITH_drafts_html    0
%global WITH_drafts_print   1

# Because we only need to build the tools binaries once for each
# architecture, but need to build the modules binaries once for
# each architecture and kernel vesion, we accept --with[out]-zzz
# options "modules" and "tools".  There are number of other
# options as well.
%{?_without_modules:         %{expand: %%global WITH_modules        0}}
%{?_with_modules:            %{expand: %%global WITH_modules        1}}
%{?_without_devel:           %{expand: %%global WITH_devel          0}}
%{?_with_devel:              %{expand: %%global WITH_devel          1}}
%{?_without_tools:           %{expand: %%global WITH_tools          0}}
%{?_with_tools:              %{expand: %%global WITH_tools          1}}
%{?_without_indep:           %{expand: %%global WITH_noarch         0}}
%{?_with_indep:              %{expand: %%global WITH_noarch         1}}
%{?_without_arch:            %{expand: %%global WITH_arch           0}}
%{?_with_arch:               %{expand: %%global WITH_arch           1}}
%{?_with_public:             %{expand: %%global WITH_source         1}}
%{?_with_k_package:          %{expand: %%global WITH_source         1}}
%{?_without_snmp_agent:      %{expand: %%global WITH_snmp           0}}
%{?_without_snmp_agent:      %{expand: %%global WITH_mibs           0}}
%{?_with_snmp_agent:         %{expand: %%global WITH_snmp           1}}
%{?_with_snmp_agent:         %{expand: %%global WITH_mibs           1}}
%{?_without_docs:            %{expand: %%global WITH_docs           0}}
%{?_with_docs:               %{expand: %%global WITH_docs           1}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manrefs        1}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manmacros      1}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manrefs        0}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manmacros      0}}
%{?_with_java:               %{expand: %%global WITH_java           1}}
%{?_without_java:            %{expand: %%global WITH_java           0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo        0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo_html   0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo_print  0}}
%{?_without_texinfo_html:    %{expand: %%global WITH_texinfo_html   0}}
%{?_without_texinfo_print:   %{expand: %%global WITH_texinfo_print  0}}
%{?_without_papers:          %{expand: %%global WITH_papers         0}}
%{?_without_papers:          %{expand: %%global WITH_papers_html    0}}
%{?_without_papers:          %{expand: %%global WITH_papers_print   0}}
%{?_without_papers_html:     %{expand: %%global WITH_papers_html    0}}
%{?_without_papers_print:    %{expand: %%global WITH_papers_print   0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts         0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts_html    0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts_print   0}}
%{?_without_drafts_html:     %{expand: %%global WITH_drafts_html    0}}
%{?_without_drafts_print:    %{expand: %%global WITH_drafts_print   0}}

%if %{WITH_texinfo}
%else
%global HAVE_infofiles  0
%global FILES_infofiles 0
%endif

%global WITH_txtfiles   0
%if %{WITH_texinfo}
%global WITH_txtfiles   1
%endif
%if %{WITH_drafts}
%global WITH_txtfiles   1
%endif

%if %{WITH_txtfiles}
%else
%global HAVE_txtfiles   0
%global FILES_txtfiles  0
%endif

%global WITH_htmlfiles  0
%global WITH_cssfiles   0
%if %{WITH_texinfo_html}
%global WITH_htmlfiles  1
%endif
%if %{WITH_papers_html}
%global WITH_htmlfiles  1
%global WITH_cssfiles   1
%endif
%if %{WITH_drafts_html}
%global WITH_htmlfiles  1
%endif

%if %{WITH_htmlfiles}
%else
%global HAVE_htmlfiles  0
%global HAVE_pngfiles   0
%global HAVE_cssfiles   0
%global FILES_htmlfiles 0
%global FILES_pngfiles  0
%global FILES_cssfiles  0
%endif

%global WITH_printfiles 0
%if %{WITH_texinfo_print}
%global WITH_printfiles 1
%endif
%if %{WITH_papers_print}
%global WITH_printfiles 1
%endif
%if %{WITH_drafts_print}
%global WITH_printfiles 1
%endif

%if %{WITH_printfiles}
%else
%global HAVE_dvifiles   0
%global HAVE_psfiles    0
%global HAVE_pdffiles   0
%global FILES_dvifiles  0
%global FILES_psfiles   0
%global FILES_pdffiles  0
%endif

%global BUILD_modules   %{WITH_modules}
%global BUILD_devel     %{WITH_devel}
%global BUILD_tools     %{WITH_tools}
%global BUILD_noarch    %{WITH_noarch}
%global BUILD_arch      %{WITH_arch}
%global BUILD_source    %{WITH_source}
%global BUILD_snmp      %{WITH_snmp}
%global BUILD_java      %{WITH_java}
%global BUILD_mibs      %{WITH_mibs}
%global BUILD_docs      %{WITH_docs}
%global BUILD_manrefs   %{WITH_manrefs}
%global BUILD_manmacros %{WITH_manmacros}
%global BUILD_debug     %{WITH_debug}

# define new autoconf 2.60, 2.61 stuff
%{!?_datarootdir:       %{expand: %%global _datarootdir     %%{_datadir}}}
%{!?_docdir:            %{expand: %%global _docdir          %%{_datarootdir}/doc}}
%{!?_htmldir:           %{expand: %%global _htmldir         %%{_docdir}}}
%{!?_dvidir:            %{expand: %%global _dvidir          %%{_docdir}}}
%{!?_pdfdir:            %{expand: %%global _pdfdir          %%{_docdir}}}
%{!?_psdir:             %{expand: %%global _psdir           %%{_docdir}}}
%{!?_localedir:         %{expand: %%global _localedir       %%{_datadir}/locale}}
%{!?_configdir:         %{expand: %%global _configdir       %%{_sysconfdir}/sysconfig}}
%{!?_modutildir:        %{expand: %%global _modutildir      %%{_sysconfdir}/modutils}}
%{!?_kmoduledir:        %{expand: %%global _kmoduledir      /lib/modules/%%{kernel_version}}}
%{!?_pkglibexecdir:     %{expand: %%global _pkglibexecdir   %%{_libexecdir}/%%{name}}}
%{!?_snmpmibdir:        %{expand: %%global _snmpmibdir      %%{_datarootdir}/snmp/mibs}}
%{!?_snmpdlmoddir:      %{expand: %%global _snmpdlmoddir    %%{_libdir}/snmp/dlmod}}
%{!?_snmpconfdir:       %{expand: %%global _snmpconfdir     %%{_sysconfdir}/snmp}}
%ifarch x86_64 ppc64 sparc64 ia64
%{!?_lib32dir:          %{expand: %%global _lib32dir        %%{_exec_prefix}/lib}}
%{!?_pkglibexec32dir:   %{expand: %%global _pkglibexec32dir %%{_pkglibexecdir}/lib32}}
%{!?_snmpdlmod32dir:    %{expand: %%global _snmpdlmod32dir  %%{_lib32dir}/snmp/dlmod}}
%endif
%{!?_gcjdir:            %{expand: %%global _gcjdir          %%{_libdir}/gcj}}
%{!?_pkggcjdir:         %{expand: %%global _pkggcjdir       %%{_gcjdir}/%%{name}}}
%{!?_jnidir:            %{expand: %%global _jnidir          %%{_libdir}/java}}
%{!?_javadir:           %{expand: %%global _javadir         %%{_datadir}/java}}
%{!?_javadocdir:        %{expand: %%global _javadocdir      %%{_datadir}/javadoc}}
%{!?_pkgjavadocdir:     %{expand: %%global _pkgjavadocdir   %%{_javadocdir}/%%{name}}}
%{!?_tcllibdir:         %{expand: %%global _tcllibdir       %%{_libdir}}}
%{!?_tclsrcdir:         %{expand: %%global _tclsrcdir       %%{_datadir}}}
%{!?_pkgtcllibdir:      %{expand: %%global _pkgtcllibdir    %%{_tcllibdir}/@PACKAGE_NAME@@PACKAGE_VERSION@}}
%{!?_perldir:           %{expand: %%global _perldir         %(eval "`perl -V:installvendorarch`"; echo $installvendorarch)}}

# ---------------------------------------------------------------------------
# Calculate which files were not built (and are not included)
# ---------------------------------------------------------------------------

%global kernel_fedora       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,1,;t;s,.*\.fc[6789].*$,1,;t;s,.*\.EL[45]?.*$,1,;t;s,.*\.el[56].*$,1,;t;s,.*$,0,')
%global kernel_others       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,0,;t;s,.*\.fc[6789].*$,0,;t;s,.*\.EL[45]?.*$,0,;t;s,.*\.el[56].*$,0,;t;s,.*$,1,')

%{!?VIRT_virt:  %{expand: %%global VIRT_virt       0}}
%{!?VIRT_base:  %{expand: %%global VIRT_base       0}}
%{!?VIRT_doc:   %{expand: %%global VIRT_doc        0}}
%{!?VIRT_lib:   %{expand: %%global VIRT_lib        0}}
%{!?VIRT_devel: %{expand: %%global VIRT_devel      0}}
%{!?VIRT_kmod:  %{expand: %%global VIRT_kmod       0}}
%{!?VIRT_kbug:  %{expand: %%global VIRT_kbug       0}}
%{!?VIRT_ksrc:  %{expand: %%global VIRT_ksrc       0}}
%{!?VIRT_java:  %{expand: %%global VIRT_java       0}}
%{!?VIRT_jdoc:  %{expand: %%global VIRT_jdoc       0}}

%if %{BUILD_modules}
%else
%global VIRT_kmod           0
%global VIRT_kbug           0
%global VIRT_ksrc           0
%global kernel_fedora       0
%global kernel_others       0
%global FILES_modules       0
%global FILES_kdebugfiles   0
%global FILES_symvers       0
%global FILES_mkvars        0
%global FILES_sourcefiles   0
%endif

%if %{BUILD_devel}
%else
%global VIRT_devel          0
%global FILES_includes      0
%global FILES_libstatic     0
%global FILES_lib32static   0
%global FILES_javadoc       0
%global FILES_infofiles     0
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_manpages      0
%global FILES_debugfiles    0
%global FILES_testscripts   0
%global FILES_sendpr        0
%endif

%if %{BUILD_tools}
%else
%global VIRT_lib            0
%global VIRT_devel          0
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_perlmods      0
%global FILES_tcllibs       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%global FILES_locales       0
%global FILES_tools         0
%global FILES_gdmofiles     0
%global FILES_testfiles     0
%global FILES_test32files   0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_debugfiles    0
%endif

%if %{BUILD_noarch}
%else
%global VIRT_base           0
%global VIRT_jdoc           0
%global FILES_infofiles     0
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
%global FILES_initscripts   0
%global FILES_devscripts    0
%global FILES_configfiles   0
%global FILES_mibfiles      0
%global FILES_netconfig     0
%global FILES_sock2path     0
%global FILES_javadoc       0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_snmpconf      0
%global FILES_docfiles      0
%global FILES_testscripts   0
%global FILES_sendpr        0
%global FILES_manpages      0
%endif

%if %{BUILD_arch}
%else
%global VIRT_lib            0
%global VIRT_devel          0
%global VIRT_kmod           0
%global VIRT_kbug           0
%global VIRT_java           0
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_modules       0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_perlmods      0
%global FILES_tcllibs       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%global FILES_locales       0
%global FILES_tools         0
%global FILES_gdmofiles     0
%global FILES_testfiles     0
%global FILES_test32files   0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%global FILES_symvers       0
%global FILES_mkvars        0
%global FILES_sourcefiles   0
%endif

%if %{BUILD_source}
%else
%global FILES_sourcefiles   0
%endif

%if %{BUILD_snmp}
%else
%global FILES_snmpconf      0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_mibfiles      0
%endif

%if %{BUILD_mibs}
%else
%global FILES_mibfiles      0
%endif

%if %{BUILD_docs}
%else
%global FILES_javadoc       0
%endif

%if %{BUILD_java}
%else
%global FILES_javadoc       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%endif

%if %{BUILD_manrefs}
%else
%global FILES_manrefs       0
%endif

%if %{BUILD_manmacros}
%else
%global FILES_manmacros     0
%endif

%if %{BUILD_debug}
%global __debug_package     1
%else
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%endif

# ---------------------------------------------------------------------------
# Calculate whether we want to build debugging information.
# ---------------------------------------------------------------------------

%global WANT_debug          0

%if %{HAVE_debugfiles}
%global WANT_debug          1
%endif
%if %{HAVE_kdebugfiles}
%global WANT_debug          1
%endif

%if %{FILES_debugfiles}
%global WANT_debug          1
%endif
%if %{FILES_kdebugfiles}
%global WANT_debug          1
%endif

%if %{WANT_debug}
%global __debug_package     1
%endif

%global debug_package       %{nil}

# ---------------------------------------------------------------------------
# Calculate which packages we want (and don't want).
# ---------------------------------------------------------------------------

%if %{VIRT_virt}
%global WANT_virt       1
%global NEED_virt       1
%else
%global WANT_virt       0
%global NEED_virt       0
%endif

%if %{HAVE_docfiles}
%global NEED_virt       1
%endif

%if %{FILES_docfiles}
%global WANT_virt       1
%endif

%if %{WANT_virt}
%global PACKAGE_virt    1
%else
%global PACKAGE_virt    0
%endif

# -----------------------

%if %{VIRT_base}
%global WANT_base       1
%global NEED_base       1
%else
%global WANT_base       0
%global NEED_base       0
%endif

%if %{HAVE_snmpconf}
%global NEED_base       1
%endif
%if %{HAVE_configfiles}
%global NEED_base       1
%endif
%if %{HAVE_netconfig}
%global NEED_base       1
%endif
%if %{HAVE_sock2path}
%global NEED_base       1
%endif
%if %{HAVE_oldmods}
%global NEED_base       1
%endif
%if %{HAVE_initscripts}
%global NEED_base       1
%endif
%if %{HAVE_mibfiles}
%global NEED_base       1
%endif
%if %{HAVE_testscripts}
%global NEED_base       1
%endif
%if %{HAVE_sendpr}
%global NEED_base       1
%endif
%if %{HAVE_pngfiles}
%global NEED_base       1
%endif
%if %{HAVE_cssfiles}
%global NEED_base       1
%endif
%if %{HAVE_manrefs}
%global NEED_base       1
%endif
%if %{HAVE_manmacros}
%global NEED_base       1
%endif
%if %{HAVE_manpages}
%global NEED_base       1
%endif

%if %{FILES_snmpconf}
%global WANT_base       1
%endif
%if %{FILES_configfiles}
%global WANT_base       1
%endif
%if %{FILES_netconfig}
%global WANT_base       1
%endif
%if %{FILES_sock2path}
%global WANT_base       1
%endif
%if %{FILES_oldprel}
%global WANT_base       1
%endif
%if %{FILES_initscripts}
%global WANT_base       1
%endif
%if %{FILES_devscripts}
%global WANT_base       1
%endif
%if %{FILES_mibfiles}
%global WANT_base       1
%endif
%if %{FILES_testscripts}
%global WANT_base       1
%endif
%if %{FILES_sendpr}
%global WANT_base       1
%endif
%if %{FILES_manrefs}
%global WANT_base       1
%endif
%if %{FILES_manmacros}
%global WANT_base       1
%endif
%if %{FILES_manpages}
%global WANT_base       1
%endif

%if %{WANT_base}
%global PACKAGE_base    1
%else
%global PACKAGE_base    0
%endif

# -----------------------

%if %{VIRT_doc}
%global WANT_doc        1
%global NEED_doc        1
%else
%global WANT_doc        0
%global NEED_doc        0
%endif

%if %{HAVE_infofiles}
%global NEED_doc        1
%endif
%if %{HAVE_txtfiles}
%global NEED_doc        1
%endif
%if %{HAVE_dvifiles}
%global NEED_doc        1
%endif
%if %{HAVE_psfiles}
%global NEED_doc        1
%endif
%if %{HAVE_pdffiles}
%global NEED_doc        1
%endif
%if %{HAVE_htmlfiles}
%global NEED_doc        1
%endif
%if %{HAVE_pngfiles}
%global NEED_doc        1
%endif
%if %{HAVE_cssfiles}
%global NEED_doc        1
%endif
%if %{HAVE_manpages}
%global NEED_doc        1
%endif

%if %{FILES_infofiles}
%global WANT_doc        1
%endif
%if %{FILES_txtfiles}
%global WANT_doc        1
%endif
%if %{FILES_dvifiles}
%global WANT_doc        1
%endif
%if %{FILES_psfiles}
%global WANT_doc        1
%endif
%if %{FILES_pdffiles}
%global WANT_doc        1
%endif
%if %{FILES_htmlfiles}
%global WANT_doc        1
%endif
%if %{FILES_pngfiles}
%global WANT_doc        1
%endif
%if %{FILES_cssfiles}
%global WANT_doc        1
%endif
%if %{FILES_manpages}
%global WANT_doc        1
%endif

%if %{WANT_doc}
%global PACKAGE_doc     1
%else
%global PACKAGE_doc     0
%endif

# -----------------------

%if %{VIRT_lib}
%global WANT_lib        1
%global NEED_lib        1
%else
%global WANT_lib        0
%global NEED_lib        0
%endif

%if %{HAVE_binfiles}
%global NEED_lib        1
%endif
%if %{HAVE_sbinfiles}
%global NEED_lib        1
%endif
%if %{HAVE_libraries}
%global NEED_lib        1
%endif
%if %{HAVE_lib32compat}
%global NEED_lib        1
%endif
%if %{HAVE_perlmods}
%global NEED_lib        1
%endif
%if %{HAVE_tcllibs}
%global NEED_lib        1
%endif
%if %{HAVE_locales}
%global NEED_lib        1
%endif
%if %{HAVE_gdmofiles}
%global NEED_lib        1
%endif
%if %{HAVE_testfiles}
%global NEED_lib        1
%endif
%if %{HAVE_test32files}
%global NEED_lib        1
%endif
%if %{HAVE_snmpmods}
%global NEED_lib        1
%endif
%if %{HAVE_snmp32mods}
%global NEED_lib        1
%endif

%if %{FILES_binfiles}
%global WANT_lib        1
%endif
%if %{FILES_sbinfiles}
%global WANT_lib        1
%endif
%if %{FILES_libraries}
%global WANT_lib        1
%endif
%if %{FILES_lib32compat}
%global WANT_lib        1
%endif
%if %{FILES_perlmods}
%global WANT_lib        1
%endif
%if %{FILES_tcllibs}
%global WANT_lib        1
%endif
%if %{FILES_locales}
%global WANT_lib        1
%endif
%if %{FILES_gdmofiles}
%global WANT_lib        1
%endif
%if %{FILES_testfiles}
%global WANT_lib        1
%endif
%if %{FILES_test32files}
%global WANT_lib        1
%endif
%if %{FILES_snmpmods}
%global WANT_lib        1
%endif
%if %{FILES_snmp32mods}
%global WANT_lib        1
%endif

%if %{WANT_lib}
%global PACKAGE_lib     1
%else
%global PACKAGE_lib     0
%endif

# -----------------------

%if %{VIRT_devel}
%global WANT_devel      1
%global NEED_devel      1
%else
%global WANT_devel      0
%global NEED_devel      0
%endif

%if %{HAVE_includes}
%global NEED_devel      1
%endif
%if %{HAVE_libraries}
%global NEED_devel      1
%endif
%if %{HAVE_perlmods}
%global NEED_devel      1
%endif
%if %{HAVE_tcllibs}
%global NEED_devel      1
%endif

%if %{FILES_includes}
%global WANT_devel      1
%endif
%if %{FILES_libstatic}
%global WANT_devel      1
%endif
%if %{FILES_lib32static}
%global WANT_devel      1
%endif

%if %{WANT_devel}
%global PACKAGE_devel   1
%else
%global PACKAGE_devel   0
%endif

# -----------------------

%if %{VIRT_kmod}
%global WANT_kmod       1
%global NEED_kmod       1
%else
%global WANT_kmod       0
%global NEED_kmod       0
%endif

%if %{HAVE_modules}
%global NEED_kmod       1
%endif

%if %{FILES_modules}
%global WANT_kmod       1
%endif

%if %{WANT_kmod}
%global PACKAGE_kmod    1
%else
%global PACKAGE_kmod    0
%endif

# -----------------------

%if %{VIRT_kbug}
%global WANT_kbug       1
%global NEED_kbug       1
%else
%global WANT_kbug       0
%global NEED_kbug       0
%endif

%if %{HAVE_modules}
%global NEED_kbug       1
%endif

%if %{FILES_modules}
%global WANT_kbug       1
%endif

%if %{WANT_kbug}
%global PACKAGE_kbug    1
%else
%global PACKAGE_kbug    0
%endif

# -----------------------

%if %{VIRT_ksrc}
%global WANT_ksrc       1
%global NEED_ksrc       1
%else
%global WANT_ksrc       0
%global NEED_ksrc       0
%endif

%if %{HAVE_sourcefiles}
%global NEED_ksrc       1
%endif

%if %{FILES_sourcefiles}
%global WANT_ksrc       1
%endif

%if %{WANT_ksrc}
%global PACKAGE_ksrc    1
%else
%global PACKAGE_ksrc    0
%endif

# -----------------------

%if %{VIRT_java}
%global WANT_java       1
%global NEED_java       1
%else
%global WANT_java       0
%global NEED_java       0
%endif

%if %{HAVE_jarfiles}
%global NEED_java       1
%endif
%if %{HAVE_gcjlibs}
%global NEED_java       1
%endif
%if %{HAVE_gcjmaps}
%global NEED_java       1
%endif
%if %{HAVE_jnilibs}
%global NEED_java       1
%endif

%if %{FILES_jarfiles}
%global WANT_java       1
%endif
%if %{FILES_jnilibs}
%global WANT_java       1
%endif
%if %{FILES_gcjlibs}
%global WANT_java       1
%endif
%if %{FILES_gcjmaps}
%global WANT_java       1
%endif

%if %{WANT_java}
%global PACKAGE_java    1
%else
%global PACKAGE_java    0
%endif

# -----------------------

%if %{VIRT_jdoc}
%global WANT_jdoc       1
%global NEED_jdoc       1
%else
%global WANT_jdoc       0
%global NEED_jdoc       0
%endif

%if %{HAVE_javadoc}
%global NEED_jdoc       1
%endif

%if %{FILES_javadoc}
%global WANT_jdoc       1
%endif

%if %{WANT_jdoc}
%global PACKAGE_jdoc    1
%else
%global PACKAGE_jdoc    0
%endif

# ---------------------------------------------------------------------------

%if %{NEED_virt}
%global need_virt           %{nil}
%endif

%if %{NEED_base}
%global need_base           %{nil}
%endif

%if %{NEED_doc}
%global need_doc            %{nil}
%endif

%if %{NEED_lib}
%global need_lib            %{nil}
%endif

%if %{NEED_devel}
%global need_devel          %{nil}
%endif

%if %{NEED_kmod}
%global need_kmod           %{nil}
%endif

%if %{NEED_kbug}
%global need_kbug           %{nil}
%endif

# ---------------------------------------------------------------------------

%if %{FILES_binfiles}
%global files_binfiles      %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_sbinfiles}
%global files_sbinfiles     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_preloads}
%global files_preloads      %{nil}
%endif
%if %{FILES_modules}
%global files_modules       %{nil}
%endif
%if %{FILES_oldmods}
%global files_oldmods       %{nil}
%endif
%if %{FILES_newmods}
%global files_newmods       %{nil}
%endif
%if %{FILES_libraries}
%global files_libraries     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_libstatic}
%global files_libstatic     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_lib32compat}
%global files_lib32compat   %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_lib32static}
%global files_lib32static   %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_perlmods}
%global files_perlmods      %{nil}
%endif
%if %{FILES_tcllibs}
%global files_tcllibs       %{nil}
%endif
%if %{FILES_gcjlibs}
%global files_gcjlibs       %{nil}
%endif
%if %{FILES_gcjmaps}
%global files_gcjmaps       %{nil}
%endif
%if %{FILES_jarfiles}
%global files_jarfiles      %{nil}
%endif
%if %{FILES_jnilibs}
%global files_jnilibs       %{nil}
%endif
%if %{FILES_locales}
%global files_locales       %{nil}
%endif
%if %{FILES_tools}
%global files_tools         %{nil}
%endif
%if %{FILES_infofiles}
%global files_infofiles     %{nil}
%endif
%if %{FILES_txtfiles}
%global files_txtfiles      %{nil}
%endif
%if %{FILES_dvifiles}
%global files_dvifiles      %{nil}
%endif
%if %{FILES_psfiles}
%global files_psfiles       %{nil}
%endif
%if %{FILES_pdffiles}
%global files_pdffiles      %{nil}
%endif
%if %{FILES_htmlfiles}
%global files_htmlfiles     %{nil}
%endif
%if %{FILES_pngfiles}
%global files_pngfiles      %{nil}
%endif
%if %{FILES_cssfiles}
%global files_cssfiles      %{nil}
%endif
%if %{FILES_initscripts}
%global files_initscripts   %{nil}
%endif
%if %{FILES_devscripts}
%global files_devscripts    %{nil}
%endif
%if %{FILES_configfiles}
%global files_configfiles   %{nil}
%endif
%if %{FILES_testfiles}
%global files_testfiles     %{nil}
%endif
%if %{FILES_test32files}
%global files_test32files   %{nil}
%endif
%if %{FILES_testscripts}
%global files_testscripts   %{nil}
%endif
%if %{FILES_sendpr}
%global files_sendpr        %{nil}
%endif
%if %{FILES_mibfiles}
%global files_mibfiles      %{nil}
%endif
%if %{FILES_snmpmods}
%global files_snmpmods      %{nil}
%endif
%if %{FILES_snmp32mods}
%global files_snmp32mods      %{nil}
%endif
%if %{FILES_gdmofiles}
%global files_gdmofiles     %{nil}
%endif
%if %{FILES_netconfig}
%global files_netconfig     %{nil}
%endif
%if %{FILES_sock2path}
%global files_sock2path     %{nil}
%endif
%if %{FILES_javadoc}
%global files_javadoc       %{nil}
%endif
%if %{FILES_manrefs}
%global files_manrefs       %{nil}
%endif
%if %{FILES_manmacros}
%global files_manmacros     %{nil}
%endif
%if %{FILES_manpages}
%global files_manpages      %{nil}
%endif
%if %{FILES_snmpconf}
%global files_snmpconf      %{nil}
%endif
%if %{FILES_debugfiles}
%global files_debugfiles    %{nil}
%endif
%if %{FILES_kdebugfiles}
%global files_kdebugfiles   %{nil}
%endif
%if %{FILES_sourcefiles}
%global files_sourcefiles   %{nil}
%endif
%if %{FILES_docfiles}
%global files_docfiles      %{nil}
%endif
%if %{FILES_includes}
%global files_includes      %{nil}
%endif
%if %{FILES_symvers}
%global files_symvers       %{nil}
%global files_kinfo         %{nil}
%endif
%if %{FILES_mkvars}
%global files_mkvars        %{nil}
%global files_kinfo         %{nil}
%endif

# ---------------------------------------------------------------------------

#global _missing_build_ids_terminate_build 1
#global _unpackaged_files_terminate_build 0
#global _missing_doc_files_terminate_build 0
#global _use_internal_dependency_generator 0

%global __find_provides %{_builddir}/%{name}-%{version}/scripts/rpm/find-provides %{_builddir}/%{name}-%{version} %{buildroot}
%global __find_requires %{_builddir}/%{name}-%{version}/scripts/rpm/find-requires %{_builddir}/%{name}-%{version} %{buildroot}
%global __check_files   %{_builddir}/%{name}-%{version}/scripts/rpm/check-files %{buildroot}

# ---------------------------------------------------------------------------

# we have some more options that control configure for the build
%{?disturl:%{!?url:%{expand: %%global url %{disturl}}}}
%global rpmrelease @PACKAGE_RPMRELEASE@
%{?extrarelease:  %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@%%{extrarelease}}}
%{!?extrarelease: %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@}}
%{?extrarelease2:  %{expand: %%global fullrelease2 @PACKAGE_RPMRELEASE@%%{extrarelease2}}}
%{!?extrarelease2: %{expand: %%global fullrelease2 @PACKAGE_RPMRELEASE@}}

# a macro to [build] require one package of the same version as another (possibly virtual) package
# use the arguments [Build]Requires: package1 [>]= package2
%global requires_prov() %{expand: %(LANG= rpm -q --provides %3 --qf "%1 %2 %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|%1|')}%{nil}
%global version_of_or() %{expand: %(LANG= rpm -q --provides %1 --qf "= %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|>= %2|')}%{nil}

%global descripline %{title} provides Linux Fast-STREAMS for Linux.

%if %(test '%{_vendor}' = 'suse' && echo 1 || echo 0)
#global descriptail #(echo -en '\\n\\n\\nAuthors\\n-------\\n    Brian Bidulock, <bidulock@openss7.org>\\nDistribution: #{distribution} (#{_target_cpu})')
%global descriptail %(echo -en '\\n\\nAuthors:\\n--------\\n    Brian Bidulock, <bidulock@openss7.org>')
%else
%global descriptail %{nil}
%endif

Summary:        %{title} for Linux
Name:           @PACKAGE@
Epoch:          @PACKAGE_RPMEPOCH@
Version:        @VERSION@
Release:        %{rpmrelease}
License:        %{license}
Group:          System Environment/Kernel
%{?url:URL:     %{url}}
%{?_xpm_icon:Icon: %{_xpm_icon}}
%{?_gif_icon:Icon: %{_gif_icon}}
ExclusiveArch:  %{ix86} k6 x86_64 s390 s390x ppc ppciseries ppcpseries ppc64 arm armv4l sh mips mipsel noarch
ExclusiveOs:    Linux
#Source:         %{name}-%{version}.tar.bz2
Source:         http://www.openss7.org/tarballs/%{name}-%{version}.tar.bz2
%{!?buildroot:BuildRoot: %{_tmppath}/%{name}-%{version}-%{fullrelease}-root}
Autoreq:        true
Autoprov:       true

# duh!
#BuildRequires:    @RPM@
#BuildRequires:    @SED@
#BuildRequires:    @AWK@

%define newgcc %(if test `gcc -v 2>&1 | grep 'gcc version' | sed -e 's|gcc version ||;s| .*$||'` != '2.95.3' ; then echo 1 ; else echo 0 ; fi)

%ifarch s390 s390x
BuildRequires:    gcc >= 2.95.3
%else
%ifarch %all_ppc
BuildRequires:    gcc >= 2.96-75
%else
%if %newgcc
BuildRequires:    gcc >= 2.96-98
%else
BuildRequires:    gcc = 2.95.3
%endif
%endif
%endif
%if %newgcc
BuildRequires:    gcc >= 2.96
%else
BuildRequires:    gcc = 2.95.3
%endif

# TODO: FC4 wants kernel-devel not kernel-source
# older rpm can't handle nested ifs
%if %{kernel_fedora}
BuildRequires:    kernel-devel = %{kernel_source}
%endif
%if %{kernel_others}
BuildRequires:    kernel-source = %{kernel_source}
%endif
%if %{BUILD_modules}
BuildRequires:    modutils >= 2.4.12
%endif

%if %{HAVE_oldmods}
# to generate kernel symbols:
BuildRequires:    @GENKSYMS@
%endif

# We actually have a really big long list of BuildRequires here.  These are all of the utilities
# that the `configure' script is going to barf over if they are not present.  Also, several things
# that it will not (such as missing ctags which are still used by the check scripts).  We could get
# rather detailed here.  One of the problems is that not all programs are in the same place on all
# systems (and we would like to use one SRPM for all RPM architectures) and package names are
# different.  We can just let the `configure' script figure out for which things errors are worth
# generating.

# these are some needs of the configure script to manipulate manual pages:
BuildRequires:    @GROFF@
BuildRequires:    @SOELIM@
BuildRequires:    @REFER@
BuildRequires:    @TBL@
BuildRequires:    @PIC@
BuildRequires:    @GZIP_CMD@
BuildRequires:    @BZIP2_CMD@
#BuildRequires:    @MAKEWHATIS@

# these are for generating (non-java) documentation
#BuildRequires:    @BIBTEX@
#BuildRequires:    @CONVERT@
#BuildRequires:    @DVI2PS@
#BuildRequires:    @DVIPDF@
#BuildRequires:    @EPSTOPDF@
#BuildRequires:    @FIG2DEV@
#BuildRequires:    @GNUPLOT@
#BuildRequires:    @LATEX2HTML@
#BuildRequires:    @LATEX@
#BuildRequires:    @PDFLATEX@
#BuildRequires:    @PDFTEX@
#BuildRequires:    @PS2EPSI@
#BuildRequires:    @PS2PDF@
#BuildRequires:    @PSLATEX@
#BuildRequires:    @TEX@

# these are for compiling and generating java documentation
#BuildRequires:    /usr/bin/gcj
#BuildRequires:    @GCJDBTOOL@
#BuildRequires:    @GCJH@
#BuildRequires:    @JAR@
#BuildRequires:    @JARSIGNER@
#BuildRequires:    @JAVAC@
#BuildRequires:    @JAVADOC@
#BuildRequires:    @JAVAH@
#BuildRequires:    @KEYTOOL@
#BuildRequires:    @ZIP@

# these are for running check scripts
#BuildRequires:    /usr/bin/ctags
#BuildRequires:    @OBJDUMP@

# don't know about this: I thought swig intermediaries were distributed
#BuildRequires:    @SWIG@

# not for building, just for installing or removing
#BuildRequires:    @CHKCONFIG@
#BuildRequires:    @DEPMOD@
#BuildRequires:    @LDCONFIG@
#BuildRequires:    @LSMOD@
#BuildRequires:    @LSOF@
#BuildRequires:    @MODPROBE@

# just for building repos and releases I think
#BuildRequires:    @CREATEREPO@
#BuildRequires:    @DOXYGEN@
#BuildRequires:    @GPG@
#BuildRequires:    @LZMA_CMD@
#BuildRequires:    @MD5SUM@
#BuildRequires:    @SHA1SUM@
#BuildRequires:    @SHA256SUM@
#BuildRequires:    @XZ_CMD@

%if %{BUILD_snmp}
# when providing snmp agents, the following are required:
#BuildRequires:   lm_sensors-devel
#BuildRequires:   net-snmp-libs
#BuildRequires:   net-snmp-devel
%endif

# to build documentation
#BuildRequires:   transfig >= 3.2
#BuildRequires:   ImageMagick
#BuildRequires:   tetex >= 1.0
#BuildRequires:   ghostscript >= 6.51
# to install documentation
#BuildRequires:   texinfo >= 4.0

# This is a virtual package that we want to pull in all the necessary
# packages for a full run-time system.
%if %{NEED_kmod}
Requires:       %{name}-kernel  = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_lib}
Requires:       %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_base}
Requires:       %{name}-base    = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:       %{name} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name} = %{epoch}:%{version}-%{rpmrelease}

# ---------------------------------------------------------------------------
%description
%{descripline}
The %{name} package includes kernel modules, STREAMS drivers, modules,
libraries, utilities, test programs, daemons, and development
environment for the development and execution of %{title} drivers,
components and applications for the STREAMS environment.  This
distribution is currently applicable to 2.4 and 2.6 kernels and is
validated for ix86, x86_64, ppc and ppc64 architectures, but should
build and install well for other architectures.  This package includes
the following binary packages:

 - %{name}
   -- copyright info, change logs, virtual base package.
 - %{name}-base
   -- admin and user docs, man pages, manual, info files, devices, init
      scripts, configs, mibs, test utils.
 - %{name}-doc
   -- developer and programmer docs, man pages, papers, projects,
      manuals, info files, javadoc.
 - %{name}-lib
   -- shared libraries and utilities.
 - %{name}-devel
   -- headers, static libraries, debuginfo.
 - %{name}-kernel
   -- kernel modules for a specific kernel.
 - %{name}-devel-kernel
   -- kernel module info and debug info for a specific kernel.
 - %{name}-source-kernel
   -- source configured for a specific kernel.
 - %{name}-java
   -- JAIN java modules, JNI/CNI libraries, and native Java modules.
 - %{name}-javadoc
   -- Javadoc documentation for JAIN APIs and implementation.

The %{name} binary package provides documentation, device definitions,
Sys V init scripts and configuration files, SNMP MIB definitions, and
test suites.

Documentation includes text, html, info and pdf (texinfo) documentation
and manuals for the development of applications, modules and drivers, as
well as the installation and reference manual.  Also included are
extensive manual pages for the entire package, including manual pages
for commands, administrative utilities, user interfaces, and kernel
functions.

Device definitions are necessary to run applications programs and
utilities.  On older systems, this binary creates the devices
themselves.  On newer systems, this binary package includes the
executable for creating devices from init scripts.  Init scripts load
kernel modules, create devices, and apply system configuration
customizations at boot.

SNMP MIB defintions for managing the package with external SNMP
management tools.  Autotest validation testsuites are used for
validating and troubleshooting.  Also included is the send-pr script for
generating and submitting problem reports to @PACKAGE_BUGREPORT@.
%{descriptail}

%prep
# ---------------------------------------------------------------------------

%setup -q -n %{name}-%{version}

%build
# ---------------------------------------------------------------------------

preferred_cflags="%{optflags}"

%ifarch %ix86
preferred_cflags="$preferred_cflags -D__USE_STRING_INLINES -fstrict-aliasing"
%endif

%ifarch sparc
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparcv9
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparc64
preferred_cflags="$preferred_cflags -mvis -fcall-used-g7"
%endif

%ifnarch ia64 s390 s390x ppc ppciseries ppc64
if test "`gcc --version`" != '2.95.3' ; then
preferred_cflags="$preferred_cflags -freorder-blocks"
fi
%endif

%define cache_file %{_target_platform}-%{kernel_version}-config.cache
%define csite_file %{_target_platform}-config.site
%define mpost_file %{_target_platform}-%{kernel_version}-modpost.cache

%define enable()  %(echo "%1" | sed -e 's|^--with-|--enable-|')%{nil}
%define disable() %(echo "%1" | sed -e 's|^--without-|--disable-|')%{nil}

./configure \
    ${CC+CC="${CC}"} \
    CFLAGS="${CFLAGS:-$preferred_cflags}" \
    ${LDFLAGS+LDFLAGS="${LDFLAGS}"} \
    ${CPPFLAGS+CPPFLAGS="${CPPFLAGS}"} \
    ${CPP+CPP="${CPP}"} \
    ${CXX+CXX="${CXX:-$CC}"} \
    ${CXX-${CC+CXX="$CC"}} \
    CXXFLAGS="${CXXFLAGS:-$preferred_cflags}" \
    ${CXXCPP+CXXCPP="${CXXCPP:-$CPP}"} \
    ${CXXCPP-${CPP+CXXCPP="$CPP"}} \
    CONFIG_SITE="%{_builddir}/%{csite_file}" \
    MODPOST_CACHE="%{_builddir}/%{mpost_file}" \
    %{?_jnidir:jnidir=%{_jnidir}} \
    %{?_javadir:javadir=%{_javadir}} \
    %{?_javadocdir:javadocdir=%{_javadocdir}} \
    %{?_perldir:perldir=%{_perldir}} \
    %{?_tcllibdir:tcllibdir=%{_tcllibdir}} \
    %{?_tclsrcdir:tclsrcdir=%{_tclsrcdir}} \
    --cache-file="%{_builddir}/%{cache_file}" \
%ifnarch noarch
    --host=%{_target_platform} \
%endif
    --prefix=%{_prefix} \
    --exec-prefix=%{_exec_prefix} \
    --bindir=%{_bindir} \
    --sbindir=%{_sbindir} \
    --sysconfdir=%{_sysconfdir} \
    --datadir=%{_datadir} \
    --includedir=%{_includedir} \
    --libdir=%{_libdir} \
    --libexecdir=%{_libexecdir} \
    --localstatedir=%{_localstatedir} \
    --sharedstatedir=%{_sharedstatedir} \
    --mandir=%{_mandir} \
    --infodir=%{_infodir} \
    --datarootdir=%{_datarootdir} \
    --docdir=%{_docdir}/@PACKAGE@-@VERSION@ \
    --htmldir=%{_htmldir}/@PACKAGE@-@VERSION@ \
    --dvidir=%{_dvidir}/@PACKAGE@-@VERSION@ \
    --pdfdir=%{_pdfdir}/@PACKAGE@-@VERSION@ \
    --psdir=%{_psdir}/@PACKAGE@-@VERSION@ \
    --localedir=%{_localedir} \
    --disable-maintainer-mode \
    --with-k-release=%{kernel_version} \
    --with-k-modules=%{_kmoduledir} \
    %{?_with_dependency_tracking            '%enable %_with_dependency_tracking'} \
    %{?_without_dependency_tracking         '%disable %_without_dependency_tracking'} \
    %{?_with_silent_rules                   '%enable %_with_silent_rules'} \
    %{?_without_silent_rules                '%disable %_without_silent_rules'} \
    %{?_with_pkg_epoch:                     '%_with_pkg_epoch'} \
    %{?_without_pkg_epoch:                  '%_without_pkg_epoch'} \
    %{?_with_pkg_release:                   '%_with_pkg_release'} \
    %{?_without_pkg_release:                '%_without_pkg_release'} \
    %{?_with_pkg_patchlevel:                '%_with_pkg_patchlevel'} \
    %{?_without_pkg_patchlevel:             '%_without_pkg_patchlevel'} \
    %{?_with_rpm_epoch:                     '%_with_rpm_epoch'} \
    %{?_without_rpm_epoch:                  '%_without_rpm_epoch'} \
    %{?_with_rpm_release:                   '%_with_rpm_release'} \
    %{?_without_rpm_release:                '%_without_rpm_release'} \
    %{?_with_rpm_extra:                     '%_with_rpm_extra'} \
    %{?_without_rpm_extra:                  '%_without_rpm_extra'} \
    %{?_with_deb_epoch:                     '%_with_deb_epoch'} \
    %{?_without_deb_epoch:                  '%_without_deb_epoch'} \
    %{?_with_deb_release:                   '%_with_deb_release'} \
    %{?_without_deb_release:                '%_without_deb_release'} \
    %{?_with_arch:                          '%enable %_with_arch'} \
    %{?_without_arch:                       '%disable %_without_arch'} \
    %{?_with_indep:                         '%enable %_with_indep'} \
    %{?_without_indep:                      '%disable %_without_indep'} \
    %{?_with_checks:                        '%enable %_with_checks'} \
    %{?_without_checks:                     '%disable %_without_checks'} \
    %{?_with_autotest:                      '%enable %_with_autotest'} \
    %{?_without_autotest:                   '%disable %_without_autotest'} \
    %{?_with_cooked_manpages:               '%_with_cooked_manpages'} \
    %{?_without_cooked_manpages:            '%_without_cooked_manpages'} \
    %{?_with_public:                        '%enable %_with_public'} \
    %{?_without_public:                     '%disable %_without_public'} \
    %{?_with_k_package:                     '%enable %_with_k_package'} \
    %{?_without_k_package:                  '%disable %_without_k_package'} \
    %{?_with_k_optimize:                    '%_with_k_optimize'} \
    %{?_with_k_debug:                       '%enable %_with_k_debug'} \
    %{?_without_k_debug:                    '%disable %_without_k_debug'} \
    %{?_with_k_test:                        '%enable %_with_k_test'} \
    %{?_without_k_test:                     '%disable %_without_k_test'} \
    %{?_with_k_safe:                        '%enable %_with_k_safe'} \
    %{?_without_k_safe:                     '%disable %_without_k_safe'} \
    %{?_with_k_inline:                      '%enable %_with_k_inline'} \
    %{?_without_k_inline:                   '%disable %_without_k_inline'} \
    %{?_with_devel:                         '%enable %_with_devel'} \
    %{?_without_devel:                      '%disable %_without_devel'} \
    %{?_with_docs:                          '%enable %_with_docs'} \
    %{?_without_docs:                       '%disable %_without_docs'} \
    %{?_with_tools:                         '%enable %_with_tools'} \
    %{?_without_tools:                      '%disable %_without_tools'} \
    %{?_with_modules:                       '%enable %_with_modules'} \
    %{?_without_modules:                    '%disable %_without_modules'} \
    %{?_with_devfs:                         '%enable %_with_devfs'} \
    %{?_without_devfs:                      '%disable %_without_devfs'} \
    %{?_with_snmp_agent:                    '%_with_snmp_agent'} \
    %{?_without_snmp_agent:                 '%_without_snmp_agent'} \
    %{?_with_java:                          '%enable %_with_java'} \
    %{?_without_java:                       '%disable %_without_java'} \
    %{?_with_solaris_cmn_err:               '%_with_solaris_cmn_err'} \
    %{?_without_solaris_cmn_err:            '%_without_solaris_cmn_err'} \
    %{?_with_solaris_consts:                '%_with_solaris_consts'} \
    %{?_without_solaris_consts:             '%_without_solaris_consts'} \
    %{?_with_k_modversions:                 '%enable %_with_k_modversions'} \
    %{?_without_k_modversions:              '%disable %_without_k_modversions'} \
    %{?_with_k_cache:                       '%enable %_with_k_cache'} \
    %{?_without_k_cache:                    '%disable %_without_k_cache'} \
    %{?_with_k_timers:                      '%enable %_with_k_timers'} \
    %{?_without_k_timers:                   '%disable %_without_k_timers'} \
    %{?_with_broken_cpu_flags:              '%enable %_with_broken_cpu_flags'} \
    %{?_without_broken_cpu_flags:           '%disable %_without_broken_cpu_flags'} \
    %{?_with_atomic_stats:                  '%enable %_with_atomic_stats'} \
    %{?_without_atomic_stats:               '%disable %_without_atomic_stats'} \
    %{?_with_xns:                           '%_with_xns'} \
    %{?_without_xns:                        '%_without_xns'} \
    %{?_with_tli:                           '%_with_tli'} \
    %{?_without_tli:                        '%_without_tli'} \
    %{?_with_inet:                          '%_with_inet'} \
    %{?_without_inet:                       '%_without_inet'} \
    %{?_with_xnet:                          '%_with_xnet'} \
    %{?_without_xnet:                       '%_without_xnet'} \
    %{?_with_sock:                          '%_with_sock'} \
    %{?_without_sock:                       '%_without_sock'} \
    %{?_with_streams_syncqs:                '%enable %_with_streams_syncqs'} \
    %{?_without_streams_syncqs:             '%disable %_without_streams_syncqs'} \
    %{?_with_streams_kthreads:              '%enable %_with_streams_kthreads'} \
    %{?_without_streams_kthreads:           '%disable %_without_streams_kthreads'} \
    %{?_with_streams_utils:                 '%enable %_with_streams_utils'} \
    %{?_without_streams_utils:              '%disable %_without_streams_utils'} \
    %{?_with_big_compile:                   '%enable %_with_big_compile'} \
    %{?_without_big_compile:                '%disable %_without_big_compile'} \
    %{?_with_module_sth:                    '%enable %_with_module_sth'} \
    %{?_without_module_sth:                 '%disable %_without_module_sth'} \
    %{?_with_module_bufmod:                 '%enable %_with_module_bufmod'} \
    %{?_without_module_bufmod:              '%disable %_without_module_bufmod'} \
    %{?_with_module_nullmod:                '%enable %_with_module_nullmod'} \
    %{?_without_module_nullmod:             '%disable %_without_module_nullmod'} \
    %{?_with_module_pipemod:                '%enable %_with_module_pipemod'} \
    %{?_without_module_pipemod:             '%disable %_without_module_pipemod'} \
    %{?_with_module_connld:                 '%enable %_with_module_connld'} \
    %{?_without_module_connld:              '%disable %_without_module_connld'} \
    %{?_with_module_sc:                     '%enable %_with_module_sc'} \
    %{?_without_module_sc:                  '%disable %_without_module_sc'} \
    %{?_with_module_testmod:                '%enable %_with_module_testmod'} \
    %{?_without_module_testmod:             '%disable %_without_module_testmod'} \
    %{?_with_driver_clone:                  '%enable %_with_driver_clone'} \
    %{?_without_driver_clone:               '%disable %_without_driver_clone'} \
    %{?_with_driver_echo:                   '%enable %_with_driver_echo'} \
    %{?_without_driver_echo:                '%disable %_without_driver_echo'} \
    %{?_with_driver_fifo:                   '%enable %_with_driver_fifo'} \
    %{?_without_driver_fifo:                '%disable %_without_driver_fifo'} \
    %{?_with_driver_log:                    '%enable %_with_driver_log'} \
    %{?_without_driver_log:                 '%disable %_without_driver_log'} \
    %{?_with_driver_loop:                   '%enable %_with_driver_loop'} \
    %{?_without_driver_loop:                '%disable %_without_driver_loop'} \
    %{?_with_driver_nsdev:                  '%enable %_with_driver_nsdev'} \
    %{?_without_driver_nsdev:               '%disable %_without_driver_nsdev'} \
    %{?_with_driver_mux:                    '%enable %_with_driver_mux'} \
    %{?_without_driver_mux:                 '%disable %_without_driver_mux'} \
    %{?_with_driver_nuls:                   '%enable %_with_driver_nuls'} \
    %{?_without_driver_nuls:                '%disable %_without_driver_nuls'} \
    %{?_with_driver_pipe:                   '%enable %_with_driver_pipe'} \
    %{?_without_driver_pipe:                '%disable %_without_driver_pipe'} \
    %{?_with_driver_sad:                    '%enable %_with_driver_sad'} \
    %{?_without_driver_sad:                 '%disable %_without_driver_sad'} \
    %{?_with_driver_sfx:                    '%enable %_with_driver_sfx'} \
    %{?_without_driver_sfx:                 '%disable %_without_driver_sfx'} \
    %{?_with_driver_spx:                    '%enable %_with_driver_spx'} \
    %{?_without_driver_spx:                 '%disable %_without_driver_spx'} \
    %{?_with_streams_fifos:                 '%enable %_with_streams_fifos'} \
    %{?_without_streams_fifos:              '%disable %_without_streams_fifos'} \
    %{?_with_streams_bcm:                   '%enable %_with_streams_bcm'} \
    %{?_without_streams_bcm:                '%disable %_without_streams_bcm'} \
    %{?_with_compat_os7:                    '%enable %_with_compat_os7'} \
    %{?_without_compat_os7:                 '%disable %_without_compat_os7'} \
    %{?_with_compat_svr3:                   '%enable %_with_compat_svr3'} \
    %{?_without_compat_svr3:                '%disable %_without_compat_svr3'} \
    %{?_with_compat_svr4:                   '%enable %_with_compat_svr4'} \
    %{?_without_compat_svr4:                '%disable %_without_compat_svr4'} \
    %{?_with_compat_mps:                    '%enable %_with_compat_mps'} \
    %{?_without_compat_mps:                 '%disable %_without_compat_mps'} \
    %{?_with_compat_sol8:                   '%enable %_with_compat_sol8'} \
    %{?_without_compat_sol8:                '%disable %_without_compat_sol8'} \
    %{?_with_compat_uw7:                    '%enable %_with_compat_uw7'} \
    %{?_without_compat_uw7:                 '%disable %_without_compat_uw7'} \
    %{?_with_compat_osf:                    '%enable %_with_compat_osf'} \
    %{?_without_compat_osf:                 '%disable %_without_compat_osf'} \
    %{?_with_compat_aix:                    '%enable %_with_compat_aix'} \
    %{?_without_compat_aix:                 '%disable %_without_compat_aix'} \
    %{?_with_compat_hpux:                   '%enable %_with_compat_hpux'} \
    %{?_without_compat_hpux:                '%disable %_without_compat_hpux'} \
    %{?_with_compat_irix:                   '%enable %_with_compat_irix'} \
    %{?_without_compat_irix:                '%disable %_without_compat_irix'} \
    %{?_with_compat_mac:                    '%enable %_with_compat_mac'} \
    %{?_without_compat_mac:                 '%disable %_without_compat_mac'} \
    %{?_with_sctp_slow_verification:        '%enable %_with_sctp_slow_verification'} \
    %{?_without_sctp_slow_verification:     '%disable %_without_sctp_slow_verification'} \
    %{?_with_sctp_throttle_heartbeats:      '%enable %_with_sctp_throttle_heartbeats'} \
    %{?_without_sctp_throttle_heartbeats:   '%disable %_without_sctp_throttle_heartbeats'} \
    %{?_with_sctp_discard_ootb:             '%enable %_with_sctp_discard_ootb'} \
    %{?_without_sctp_discard_ootb:          '%disable %_without_sctp_discard_ootb'} \
    %{?_with_sctp_extended_ip_support:      '%enable %_with_sctp_extended_ip_support'} \
    %{?_without_sctp_extended_ip_support:   '%disable %_without_sctp_extended_ip_support'} \
    %{?_with_sctp_hmac_sha1:                '%enable %_with_sctp_hmac_sha1'} \
    %{?_without_sctp_hmac_sha1:             '%disable %_without_sctp_hmac_sha1'} \
    %{?_with_sctp_hmac_md5:                 '%enable %_with_sctp_hmac_md5'} \
    %{?_without_sctp_hmac_md5:              '%disable %_without_sctp_hmac_md5'} \
    %{?_with_sctp_adler32:                  '%enable %_with_sctp_adler32'} \
    %{?_without_sctp_adler32:               '%disable %_without_sctp_adler32'} \
    %{?_with_sctp_crc32c:                   '%enable %_with_sctp_crc32c'} \
    %{?_without_sctp_crc32c:                '%disable %_without_sctp_crc32c'} \
    %{?_with_sctp_throttle_passiveopens:    '%enable %_with_sctp_throttle_passiveopens'} \
    %{?_without_sctp_throttle_passiveopens: '%disable %_without_sctp_throttle_passiveopens'} \
    %{?_with_sctp_ecn:                      '%enable %_with_sctp_ecn'} \
    %{?_without_sctp_ecn:                   '%disable %_without_sctp_ecn'} \
    %{?_with_sctp_lifetimes:                '%enable %_with_sctp_lifetimes'} \
    %{?_without_sctp_lifetimes:             '%disable %_without_sctp_lifetimes'} \
    %{?_with_sctp_add_ip:                   '%enable %_with_sctp_add_ip'} \
    %{?_without_sctp_add_ip:                '%disable %_without_sctp_add_ip'} \
    %{?_with_sctp_adaptation_layer_info:    '%enable %_with_sctp_adaptation_layer_info'} \
    %{?_without_sctp_adaptation_layer_info: '%disable %_without_sctp_adaptation_layer_info'} \
    %{?_with_sctp_partial_reliability:      '%enable %_with_sctp_partial_reliability'} \
    %{?_without_sctp_partial_reliability:   '%disable %_without_sctp_partial_reliability'} \
    %{?_with_sctp_debug:                    '%enable %_with_sctp_debug'} \
    %{?_without_sctp_debug:                 '%disable %_without_sctp_debug'} \
    %{?_with_sctp_error_generator:          '%enable %_with_sctp_error_generator'} \
    %{?_without_sctp_error_generator:       '%disable %_without_sctp_error_generator'} \
    %{?_with_sctp:                          '%_with_sctp'} \
    %{?_without_sctp:                       '%_without_sctp'} \
    %{?_with_sctp2:                         '%_with_sctp2'} \
    %{?_without_sctp2:                      '%_without_sctp2'} \
    || { rm -f %{_builddir}/%{cache_file} ; exit 1 ; }

make
%{?files_txtfiles:make txt}
%{?files_dvifiles:make dvi}
%{?files_psfiles:make ps}
%{?files_pdffiles:make pdf}
%{?files_htmlfiles:make html}
#make check

%install
# ---------------------------------------------------------------------------

# in case it was not cleaned
[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot} || :

# if we are going to create debug packages, we need to install unstripped
# binaries; otherwise use libtoolized install-strip to strip binaries, modules,
# shared and static libraries.
make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" \
    %{!?_enable_debug_packages: install-strip} \
    %{?_enable_debug_packages: install}

%{?files_txtfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-txt}
%{?files_dvifiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-dvi}
%{?files_psfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-ps}
%{?files_pdffiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-pdf}
%{?files_htmlfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-html}

# copy out our devices list
# cp -pf %{mybuilddir}/%{makedev} .

# get the installed info directory out of the build root
[ -e "%{buildroot}/%{_infodir}/dir" ] && rm -f "%{buildroot}/%{_infodir}/dir" || :

package_source () {
# remove include2 symbolic link
    rm -fr include2
# punch rpm release to Custom
    echo '.Custom.1'  > .rpmextra
# create configured source directory for source package
    mkdir -p %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# tar and move the sources for source release
    tar cf - . | tar xf - -C %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# clean out binaries and auxilliary files
    ( cd %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease} ; make V=1 mostlyclean )
# create symbolic link
    ( cd %{buildroot}%{_usrsrc} ; ln -sf %{name}-%{version}-%{fullrelease} %{name} )
}

package_mkvars () {
    d=%{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}
# create kernel-specific info directory
    mkdir -p $d
# copy in makefile variables file
    cp -p Module.mkvars $d
# copy in autoconf site and cache files for reference
    cp -p %{_builddir}/%{csite_file} $d
    cp -p %{_builddir}/%{cache_file} $d
}

package_symvers () {
    d=%{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}
# create kernel-specific info directory
    mkdir -p $d
# copy in symbol versions file
    cp -p Module.symvers $d
    cp -p Modules.map $d
# copy in modpost cache file for reference
    cp -p %{_builddir}/%{mpost_file} $d
}

%if %{FILES_mkvars}
package_mkvars
%endif
%if %{FILES_symvers}
package_symvers
%endif
%if %{FILES_sourcefiles}
package_source
%endif

%if %{HAVE_manrefs}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{manrefs}"
#export EXCLUDE_FROM_COMPRESS
%endif
%if %{HAVE_manmacros}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{manmacros}"
#export EXCLUDE_FROM_COMPRESS
%endif

# stupid suse check compresses everything (including our macro files)
#{?suse_check: %{expand: %%define suse_check echo "SuSE Check skipped"}}

%clean
# ---------------------------------------------------------------------------

[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot} || :

%if %{PACKAGE_virt}
%files
# ---------------------------------------------------------------------------
# A big problem with using the %doc macro is that it cleans out _docdir before
# copying in the files.  We have all our openss7-doc package files in there so
# there is an error when the openss7-doc package tries to move its files.  So,
# we do not do that, but we still want a virtual package, so leave and empty
# files section.
# ---------------------------------------------------------------------------
%defattr(-,root,root)
#{?files_docfiles:%{?files_locales:%doc ABOUT-NLS}}
#{?files_docfiles:%doc AUTHORS BUGS ChangeLog COPYING INSTALL INSTALL-%{name} LICENSES LSM MANUAL NEWS PROBLEMS}
#{?files_docfiles:%doc README README-alpha README-cvs README-make THANKS TODO}
#{?files_docfiles:%doc %{name}-%{version}.lsm}
%endif

# ===========================================================================
%package base
# ---------------------------------------------------------------------------
# This package contains the init scripts, test scripts, maintenance scripts and
# configuration files that are architecture independent and are required for a
# usable run-time system.  It also contains maintenance and administration
# documentation.
# ---------------------------------------------------------------------------

Summary:            %{title} base support package.
Group:              System Environment/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_configfiles}
Prefix:             %{_sysconfdir}
%endif
%if %{FILES_mibfiles}
Prefix:             %{_snmpmibdir}
%endif
%if %{FILES_initscripts}
Prefix:             %{_configdir}
Prefix:             %{_initrddir}
%endif
%if %{FILES_devscripts}
Prefix:             %{_sbindir}
%endif
%if %{FILES_netconfig}
Prefix:             %{_sysconfdir}/netconfig.d
%endif
%if %{FILES_sock2path}
Prefix:             %{_sysconfdir}/sock2path.d
%endif
%if %{FILES_snmpconf}
Prefix:             %{_snmpconfdir}
%endif
%if %{FILES_oldmods}
Prefix:             %{_modutildir}
%endif
%if %{FILES_testscripts}
Prefix:             %{_pkglibexecdir}
%endif
%if %{FILES_sendpr}
Prefix:             %{_pkglibexecdir}
%endif
#if %{FILES_infofiles}
#refix:             %{_infodir}
#endif
%if %{FILES_manpages}
Prefix:             %{_mandir}
%endif

Conflicts:          texinfo < 3.11

%if %{USE_makedev}
Requires:           dev >= 3.3
%endif
%if %{NEED_kmod}
Requires:           %{name}-kernel  = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_lib}
Requires:           %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_virt}
Requires:           %{name}         = %{epoch}:%{version}-%{fullrelease}
Requires(pre):      %{name}         = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:           %{name}-base = %{epoch}:%{version}-%{fullrelease}
Provides:           %{name}-base = %{epoch}:%{version}-%{fullrelease2}
Provides:           %{name}-base = %{epoch}:%{version}-%{rpmrelease}

Release:            %{fullrelease}

# ---------------------------------------------------------------------------
%description base
%{descripline}
The %{name}-base binary package contains the init scripts, test scripts,
maintenance scripts and base system configuration files necessary for
the operation of the protocol suites contained in the %{name} package.
It contains user and administration documentation in INFO, PDF and HTML
formats as well as sections 1, 4, 5 and 8 of the manual pages.  This
binary package is required for any installation of the %{name} package.
%{descriptail}

%pre base
# ---------------------------------------------------------------------------
arg="$1"
%if %{HAVE_modules}
remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
%endif
# This is an initial installation of the init subpackage.  We need to check for non-rpm
# installations on the host and remove any entries that might later conflict with our entries.  We
# treat every fresh installation like an upgrade from non-deb/rpm install.
if [ $arg = 1 ] ; then : # fresh install
%if %{HAVE_modules}
    # When performing a fresh install we want to go looking for non-rpm installations of LiS or
    # STREAMS or supplementary packages and perform what would otherwise have been the preun or
    # postun actions.
    list="%{modules}" ; modl_mods=
    for dir in %{_kmoduledir}/../* ; do
        [ -d $dir ] || continue
        for m in `find $dir \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
                b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
                case " $list " in (*" $b "*) ;; (*) continue ;; esac
                echo "$m"
                modl_mods="${modl_mods:+$modl_mods }$m"
        done
        if [ -n "$modl_mods" -a -f $dir/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)     dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < $dir/modules.dep
            eval "$xtrace"
        fi
        conf_old=%_sysconfdir/modules.conf
        if [ -f $conf_old ] ; then
            conf_new=%_tmppath/modules.conf.new.$$
            conf_tmp=%_tmppath/modules.conf.tmp.$$
            cp -f -- $conf_old $conf_new
            # Unfortunately davem starting copying our install procedure, so we need to root out all
            # kinds of things from the modules.conf file, all prune statements, any if include
            # statements
            for suffix in %name %{nonrpmmods} ; do
                # This the old style /BEGIN LiS/,/END LiS/ enclosure in the modules.conf file.
                if ( grep -q -- "BEGIN $suffix" $conf_new && grep -q -- "END $suffix" $conf_new ) 2>/dev/null ; then
                    sed -e '\|BEGIN '$suffix'|,\|END '$suffix'|d'            $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer technique with a prune and an if statement in the modules.conf
                # file that was also used by davem in LiS-2.18.0.
                if [ -f $dir/modules.$suffix ] ; then
                    rm -f -- $dir/modules.$suffix
                    sed -e '\|^prune[[:space:]].*modules.'$suffix'|d'        $conf_new > $conf_tmp
                    sed -e '\|^if[[:space:]].*modules.'$suffix'|,\|^endif|d' $conf_tmp > $conf_new
                    sed -e '\|^include[[:space:]].*modules.'$suffix'|d'      $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer latest technique with only an include statement in modules.conf
                # and a modules.conf fragment in the debian update-modules directory _modutildir
                # that includes the prune and if statements.  That works both for RH-style and
                # Debian-style modules.conf.
                if [ -f %_modutildir/$suffix ] ; then
                    rm -f -- %_modutildir/$suffix
                    sed -e '\|^include[[:space:]].*%_modutildir/'$suffix'|d' $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
            done
            chmod --reference=$conf_old -- $conf_new
            cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
            rm -f -- $conf_new
        fi
    done
%endif
%if %{FILES_oldprel}
    # old-style preload file
    prel_old=%_sysconfdir/modules
%endif
%if %{FILES_newprel}
    # new-style preload file
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{FILES_preloads}
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        sed -e '\|^[[:space:]]*streams|d' $prel_new > $prel_tmp
        mv -f -- $prel_tmp $prel_new
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{FILES_initscripts}
    # Fresh install, go looking for non-rpm initscripts and remove them.
    list="%{initfiles}" ; for i in $list %{nonrpminit} ; do
        if [ -f %_initrddir/$i ] ; then
            # Find the best working init script removal tool
            [ -x /sbin/insserv             ] && /sbin/insserv -r          $i 2>&1 && continue || :
            [ -x /sbin/chkconfig           ] && /sbin/chkconfig --del     $i 2>&1 && continue || :
            [ -x /usr/lib/lsb/remove_initd ] && /usr/lib/lsb/remove_initd $i 2>&1 && continue || :
        fi
    done
%endif
%if %{HAVE_modules}
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
%endif
fi
if [ $arg = 2 ] ; then : # upgrade
    # Because we are doing an upgrade, the preun and postun scriplets for the old rpm are going to
    # be called.  Hopefully the old rpm can handle removal correctly.
fi

%post base
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{USE_mknods}
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    if [ -x "%{mknods}" ] ; then
        %{mknods} --create
    fi
%endif
%if %{HAVE_oldmods}
    # At the end of a fresh install we need to add our lines to the modules.conf file if it exists,
    # and it is necessary to use a modconf file (2.4 and pre 2.5.48 kernel), an even if the line is
    # already there (in which case we remove the existing line).
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{FILES_oldprel}
    # old-style preload file
    prel_old=%_sysconfdir/modules
%endif
%if %{FILES_newprel}
    # new-style preload file
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{FILES_preloads}
    # At the end of a fresh install we need to add our preloads to the modules or modprobe.preload
    # file, if it exists, and is necessary, and even if the lines are already there (in which case
    # we remove the existing line.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{FILES_netconfig}
    # At the end of a fresh install we need to rebuild the netconfig database, but only if the
    # netconfig database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{FILES_sock2path}
    # At the end of a fresh install we need to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{FILES_initscripts}
    # This is the end of a fresh install, add init scripts if we can
    list="%{initfiles}" ; for i in $list ; do
        # Find the best working init script installation tool
        [ -x /sbin/insserv              ] && /sbin/insserv              $i 2>&1 && continue || :
        [ -x /sbin/chkconfig            ] && /sbin/chkconfig --add      $i 2>&1 && continue || :
        [ -x /usr/lib/lsb/install_initd ] && /usr/lib/lsb/install_initd $i 2>&1 && continue || :
    done
%endif
#if %{FILES_manpages}
#   if type -p makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if type -p mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb -p %{_mandir} || :
#   fi
#endif
%if %{FILES_manrefs}
    [ ! -f %{_mandir}/%{manrefs}.gz    ] || gunzip  %{_mandir}/%{manrefs}.gz
    [ ! -f %{_mandir}/%{manrefs}.bz2   ] || bunzip2 %{_mandir}/%{manrefs}.bz2
%endif
%if %{FILES_manmacros}
    [ ! -f %{_mandir}/%{manmacros}.gz  ] || gunzip  %{_mandir}/%{manmacros}.gz
    [ ! -f %{_mandir}/%{manmacros}.bz2 ] || bunzip2 %{_mandir}/%{manmacros}.bz2
%endif
fi
if [ $1 = 2 ] ; then : # upgrade
%if %{HAVE_oldmods}
    # At the end of an upgrade we place our new lines in the modules.conf file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( cat $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{FILES_oldprel}
    # old-style preload file
    prel_old=%_sysconfdir/modules
%endif
%if %{FILES_newprel}
    # new-style preload file
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{FILES_preloads}
    # At the end of an upgrade we place just our preloads in the modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            ( cat $repl_new ; echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{FILES_netconfig}
    # At the end of an upgrade we need to rebuild the netconfig database, but only if the netconfig
    # database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{FILES_sock2path}
    # At the end of an upgrade we need to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{FILES_initscripts}
    # This is the end of an upgrade, add init scripts if we can
    list="%{initfiles}" ; for i in $list ; do
        # Find the best working init script installation tool
        [ -x /sbin/insserv              ] && /sbin/insserv              $i 2>&1 && continue || :
        [ -x /sbin/chkconfig            ] && /sbin/chkconfig --add      $i 2>&1 && continue || :
        [ -x /usr/lib/lsb/install_initd ] && /usr/lib/lsb/install_initd $i 2>&1 && continue || :
    done
%endif
fi

%preun base
# ---------------------------------------------------------------------------
if [ $1 = 0 ] ; then : # final removal
%if %{USE_rmnods}
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    if [ -x "%{mknods}" ] ; then
        %{rmnods}
    fi
%endif
%if %{HAVE_oldmods}
    # When we are going away altogether we want to remove any lines whatsoever from the modules.conf
    # file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{FILES_oldprel}
    # old-style preload file
    prel_old=%_sysconfdir/modules
%endif
%if %{FILES_newprel}
    # new-style preload file
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{FILES_preloads}
    # When we are going away altogether we want to remove any of our preloads whatsoever from the
    # modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $repl_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{FILES_netconfig}
    # After going away altogether, we want to rebuild the netconfig database, but only if the
    # netconfig database was built by use or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{FILES_sock2path}
    # After going away altogether, we want to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{FILES_initscripts}
    # Uninstalling for good, remove init scripts if we can
    reverse=
    list="%{initfiles}" ; for i in $list ; do
        reverse="$i${reverse:+ $reverse}"
    done
    for i in $reverse ; do
        if [ -f %_initrddir/$i ] ; then
            # Find the best working init script removal tool
            [ -x /sbin/insserv             ] && /sbin/insserv -r          $i 2>&1 && continue || :
            [ -x /sbin/chkconfig           ] && /sbin/chkconfig --del     $i 2>&1 && continue || :
            [ -x /usr/lib/lsb/remove_initd ] && /usr/lib/lsb/remove_initd $i 2>&1 && continue || :
        fi
    done
%endif
%if %{FILES_manrefs}
    rm -f -- %{_mandir}/%{manrefs}
%endif
%if %{FILES_manmacros}
    rm -f -- %{_mandir}/%{manmacros}
%endif
fi
if [ $1 = 1 ] ; then : # upgrade
%if %{HAVE_oldmods}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules.conf file that we placed in them in the post scriptlet.  We only adjust our line and
    # leave any lines added by the new package post scriptlet.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        # This groovy sed script just pulls out the first matching line and leaves the rest
        # untouched.
        sed -e '
\|^include[[:space:]].*%_modutildir/%base|!b
N
s|^include[[:space:]].*%_modutildir/%base.*\
||
: loop
n
b loop' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{FILES_oldprel}
    # old-style preload file
    prel_old=%_sysconfdir/modules
%endif
%if %{FILES_newprel}
    # new-style preload file
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{FILES_preloads}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules or modprobe.preloads file that we placed in them in the post scriptlet.  We only
    # adjust our lines and leave any lines added by the new package post scriptlet.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            # This groovy sed script just pulls out the first matching line and leaves the rest
            # untouched.
            sed -e '
\|^[[:space:]].*'"$m"'[[:space:]]*$|!b
N
s|^[[:space:]].*'"$m"'[[:space:]]*\
||
: loop
n
b loop' $prel_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{FILES_netconfig}
    # After going doing an upgrade we want to rebuild the netconfig database, but only if the
    # netconfig database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{FILES_sock2path}
    # After going doing an upgrade we want to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{FILES_manrefs}
    rm -f -- %{_mandir}/%{manrefs}
%endif
%if %{FILES_manmacros}
    rm -f -- %{_mandir}/%{manmacros}
%endif
fi

%postun base
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
#if %{FILES_manpages}
#   if type -p makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if type -p mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb -p %{_mandir} || :
#   fi
#endif
fi

%if %{PACKAGE_base}
%files base %{?devicesfile:%{devicesfile}}
# ---------------------------------------------------------------------------
%{?files_snmpconf:%config(noreplace) %{_snmpconfdir}/*}
%{?files_configfiles:%config(noreplace) %{_sysconfdir}/%{conffiles}}
#{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.xnsl}
%{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.d/%{netconfig}}
%{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path}
%{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path.d/%{sock2path}}
#{?files_oldmods:%config(noreplace) %{_modutildir}/*}
%{?files_initscripts:%config(noreplace) %{_configdir}/*}
%{?files_initscripts:%{_initrddir}/*}
%{?files_devscripts:%{_sbindir}/*}
%{?files_mibfiles:%{_snmpmibdir}/*}
%{?files_testscripts:%{_pkglibexecdir}/atlocal}
%{?files_testscripts:%{_pkglibexecdir}/testsuite*}
%{?files_sendpr:%{_pkglibexecdir}/send-pr}
%{?files_sendpr:%{_pkglibexecdir}/send-pr.config}
%{?files_manrefs:%{_mandir}/%{manrefs}*}
%{?files_manmacros:%{_mandir}/%{manmacros}*}
%{?files_manpages:%{_mandir}/man[1458]*/*}
%endif

# ===========================================================================
%package doc
# ---------------------------------------------------------------------------
# This package contains copious documentation.  It contains developer and
# programmer documentation, INFO, PDF and HTML developer documentation as well
# as sections 2 3 7 and 9 of the manual pages.
# ---------------------------------------------------------------------------

Summary:            %{title} developer and programmer documentation.
Group:              Development/System
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_infofiles}
Prefix:             %{_infodir}
%endif
%if %{FILES_txtfiles}
Prefix:             %{_docdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_dvifiles}
Prefix:             %{_dvidir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_psfiles}
Prefix:             %{_psdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_pdffiles}
Prefix:             %{_pdfdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_htmlfiles}
Prefix:             %{_htmldir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_manpages}
Prefix:             %{_mandir}
%endif

%if %{FILES_infofiles}
Requires(pre):      /sbin/install-info
Requires(post):     /sbin/install-info
Requires(preun):    /sbin/install-info
%endif
#if %{FILES_manpages}
#equires(pre):      /usr/sbin/makewhatis
#equires(post):     /usr/sbin/makewhatis
#equires(postun):   /usr/sbin/makewhatis
#endif

Conflicts:          texinfo < 3.11

# The %{name}-base package contains the man page references and macros
# and is required.  Other packages are unnecessary.
%if %{NEED_base}
Requires:           %{name}-base    = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:           %{name}-doc     = %{epoch}:%{version}-%{fullrelease}
Provides:           %{name}-doc     = %{epoch}:%{version}-%{fullrelease2}
Provides:           %{name}-doc     = %{epoch}:%{version}-%{rpmrelease}

Release:            %{fullrelease}

# ---------------------------------------------------------------------------
%description doc
%{descripline}
The %{name}-doc binary package contains the documentation used in the
development of applications and programs that use the package.  It
contains developer and programmmer manuals in info, pdf and html formats
as well as sections 2, 3, 7 and 9 of the manual pages and Javadoc HTML
documentation.  Install this binary package if you are interested in
developing STREAMS drivers or modules or applications programs for the
protocol suites contained in the %{name} package.  This package is
massive and is not normally necessary except on a development system.
%{descriptail}

%post doc
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
#if %{FILES_manpages}
#   if type -p makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if type -p mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb -p %{_mandir} || :
#   fi
#endif
fi

%preun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 ] ; then : # final removal
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
fi
if [ $1 = 1 ] ; then : # upgrade
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
fi

%postun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
#if %{FILES_manpages}
#   if type -p makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if type -p mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb %{_mandir} || :
#   fi
#endif
fi

%if %{PACKAGE_doc}
%files doc
# ---------------------------------------------------------------------------
%{?files_txtfiles:%{_docdir}/@PACKAGE@-@VERSION@/*.txt}
%{?files_dvifiles:%{_dvidir}/@PACKAGE@-@VERSION@/*.dvi}
%{?files_psfiles:%{_psdir}/@PACKAGE@-@VERSION@/*.ps}
%{?files_pdffiles:%{_pdfdir}/@PACKAGE@-@VERSION@/*.pdf}
%{?files_htmlfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.html}
%{?files_pngfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.png}
%{?files_cssfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.css}
%{?files_infofiles:%{_infodir}/*.info*}
#{?files_manrefs:%{_mandir}/%{manrefs}*}
#{?files_manmacros:%{_mandir}/%{manmacros}*}
%{?files_manpages:%{_mandir}/man[2379]*/*}
%endif

# ===========================================================================
%package lib
# ---------------------------------------------------------------------------
# This package contains the entire openss7 run-time that is architecture
# dependent.  This package does not include the SNMP utilities, agents or
# uilities: those are in a separate SNMP package.  Also, this package does not
# include the Java JAIN components: those are in a separate java package.
# ---------------------------------------------------------------------------

Summary:        %{title} run-time libraries and utilities.
Group:          System Environment/Libraries
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_binfiles}
Prefix:         %{_bindir}
%endif
%if %{FILES_sbinfiles}
Prefix:         %{_sbindir}
%endif
%if %{FILES_libraries}
Prefix:         %{_libdir}
%endif
%if %{FILES_lib32compat}
Prefix:         %{_lib32dir}
%endif
%if %{FILES_perlmods}
Prefix:         %{_perldir}
%endif
%if %{FILES_tcllibs}
Prefix:         %{_pkgtcllibdir}
%endif
%if %{FILES_testfiles}
Prefix:         %{_pkglibexecdir}
%endif
%if %{FILES_test32files}
Prefix:         %{_pkglibexec32dir}
%endif
%if %{FILES_snmpmods}
Prefix:         %{_snmpdlmoddir}
%endif
%if %{FILES_snmp32mods}
Prefix:         %{_snmpdlmod32dir}
%endif
%if %{FILES_locales}
Prefix:         %{_localedir}
%endif

Requires:       /sbin/ldconfig
Requires:       /usr/bin/tclsh

%if %{NEED_kmod}
Requires:       %{name}-kernel  = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_base}
Requires:       %{name}-base    = %{epoch}:%{version}-%{fullrelease}
Requires(pre):  %{name}-base    = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_virt}
Requires:           %{name}         = %{epoch}:%{version}-%{fullrelease}
Requires(pre):      %{name}         = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:       %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-lib     = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-lib     = %{epoch}:%{version}-%{rpmrelease}

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description lib
%{descripline}
The %{name}-lib binary package contains the run-time (shared object)
libraries necessary to run applications programs and utilities developed
for %{title}.  Also included are the libtool .la files describing the
shared object libraries.  The binary package also provides
administrative and configuration test utilities and commands associated
with the %{title} package.  Note that these utilities are needed for
running the validation test suites contained in the %{name} binary
package.
%{descriptail}

%pre lib
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{FILES_libraries}
    # See if there are any libraries hanging around from a non-rpm install.  If there are, just
    # delete them.
    libs="%{libraries}" ; for lib in $libs ; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            # Old libraries hanging around, delete them.
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs
        fi
    done
%endif
%if %{FILES_tools}
    # This is a fresh install, look for old non-rpm tools.
    tools="%{tools}" ; for tool in $tools ; do
        location="`which $tool 2>/dev/null`"
        while [ -n "$location" -a -x "$location" ] ; do
            eval "rm -f $location"
            location="`which $tool 2>/dev/null`"
            while [ -n "$location" -a -x "$location" ] ; do
                eval "rm -f $location"
                location="`which $tool 2>/dev/null`"
            done
        done
    done
%endif
fi

%post lib
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_libraries}
    # After a fresh install or upgrade, do a load config.
    /sbin/ldconfig
%endif
%if %{FILES_tcllibs}
    # After a fresh install, create package index files
    for d in `find %{_pkgtcllibdir} -mindepth 1 -maxdepth 1 -type d` ; do
        echo -e "pkg_mkIndex $d\\nexit" | tclsh
    done
%endif
fi

%postun lib
# ---------------------------------------------------------------------------
%if %{FILES_libraries}
if [ $1 = 0 -o $1 = 1 ] ; then
    # Whether complete removal or upgrade, do a load config.
    /sbin/ldconfig
fi
%endif

%if %{PACKAGE_lib}
%files lib
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_binfiles:%{_bindir}/*}
%{?files_sbinfiles:%{_sbindir}/*}
%{?files_libraries:%{_libdir}/*.so*}
%{?files_libraries:%{_libdir}/*.la}
%{?files_lib32compat:%{_lib32dir}/*.so*}
%{?files_lib32compat:%{_lib32dir}/*.la}
%{?files_perlmods:%dir %{_perldir}/auto/*}
%{?files_perlmods:%{_perldir}/auto/*}
%{?files_tcllibs:%dir %{_pkgtcllibdir}}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/xti}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/tcap}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/streams}
%{?files_tcllibs:%{_pkgtcllibdir}/pkgIndex.tcl}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.tcl}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.so}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.la}
%{?files_locales:%{_localedir}/*}
%{?files_gdmofiles:%{_pkglibexecdir}/gdmo}
%{?files_testfiles:%{_pkglibexecdir}/%{testfiles}}
%{?files_test32files:%{_pkglibexec32dir}/%{testfiles}}
%{?files_snmpmods:%{_snmpdlmoddir}/*}
%endif

# ===========================================================================
%package devel

Summary:        %{title} configured headers, static libraries and debug info.
Group:          Development/System
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_includes}
Prefix:         %{_includedir}/%{name}
%endif
%if %{FILES_libstatic}
Prefix:         %{_libdir}
%endif
%if %{FILES_lib32static}
Prefix:         %{_lib32dir}
%endif
%if %{FILES_debugfiles}
%{?files_binaries:Prefix:               %{_usrsrc}/debug}
%{?files_binaries:%{?_lib32dir:Prefix:  %{_lib32dir}/debug}}
%{?files_binaries:%{!?_lib32dir:Prefix: %{_libdir}/debug}}
%endif

#Requires:         /sbin/install-info

Conflicts:      texinfo < 3.11

%if %{NEED_lib}
Requires:       %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_kbug}
Requires:       %{name}-devel-kernel = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:       %{name}-devel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-devel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-devel = %{epoch}:%{version}-%{rpmrelease}

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description devel
%{descripline}
The %{name}-devel binary package contains library archives for static
compilation, and headers files to develop %{title} applications, modules
and drivers.  This also includes the header files and static libraries
required to compile %{title} applications programs.  This package
provides debug information for package %{name}.  Debug information is
useful when developing applications that use this package or when
debugging this package.

The package optionally contains the source code necessary for building
the %{name} release.  It also includes the autoconf configuration
utilities necessary to create and distribute this rpm.  However, to
develop on the package, it would be better to use the tarball release.

This binary package does not contain developer or programmer
documentation nor manual pages.  To obtain the developer and programmer
documentation, load the %{name}-doc package.
%{descriptail}

%if %{PACKAGE_devel}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_includes:%dir %{_includedir}/%{name}}
%{?files_includes:%{_includedir}/%{name}/*}
%{?files_libstatic:%{_libdir}/*.a}
%{?files_lib32static:%{_lib32dir}/*.a}
%{?files_debugfiles:%{?files_binaries: %{_usrsrc}/debug}}
%{?files_debugfiles:%{?files_binaries: %{?_lib32dir:%{_lib32dir}/debug}}}
%{?files_debugfiles:%{?files_binaries: %{!?_lib32dir:%{_libdir}/debug}}}
%endif

# ===========================================================================
%package -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
# Note that we should not call this just %{name}-%{_kversion}.  The package
# should be named for proper automatic kernel module package loading under
# various distros.  This varies fairly widely for Fedora, CentOS, RHEL, SLES,
# and others.  The Provides tags follow the naming conventions used by these
# various packages, but virtual package names don't seem to cut it.
# ---------------------------------------------------------------------------
# Autoupdating kernel modules when kernels are updated.  CentOS 5 approach:
# - name the kernel module package kmod-%{name}
# - give it version %{version}
# - provides: %{name}-kmod = %{version}
# - provides: kmod-%{name} = %{version}
# - provides: kernel-modules = %{_kversion}
# - require the kernel version (because symbol sets are screwed on both SLES
#   and RHEL due to broken scripts).
# ---------------------------------------------------------------------------

Summary:        %{title} kernel modules.
Group:          System Environment/Kernel
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_modules}
Prefix:         %{_kmoduledir}
%endif

Obsoletes:      %{name}-kernel
Obsoletes:      %{name}-kmp%{kernel_flavor}
Obsoletes:      kmod%{kernel_flavor}
Obsoletes:      kernel-module-%{name}%{kernel_flavor}
Obsoletes:      %{name}-kmod%{kernel_flavor}

# SuSE puts lsof in /usr/bin
Requires(pre):      lsof
Requires(preun):    lsof
Requires(postun):   lsof

# this is enough for the following
Requires:           modutils
Requires(pre):      modutils
Requires(post):     modutils
Requires(preun):    modutils
Requires(postun):   modutils

#Requires(pre):      @MODPROBE@
#Requires(pre):      @LSMOD@

#Requires(post):     @DEPMOD@

#Requires(preun):    @MODPROBE@
#Requires(preun):    @LSMOD@

#Requires(postun):   @MODPROBE@
#Requires(postun):   @LSMOD@

#Requires(postun):   @DEPMOD@
#Requires(postun):   @INSMOD@

%(LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n")

%if %{NEED_lib}
Requires:           %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
Requires(pre):      %{name}-lib     = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_base}
Requires:           %{name}-base    = %{epoch}:%{version}-%{fullrelease}
Requires(pre):      %{name}-base    = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_virt}
Requires:           %{name}         = %{epoch}:%{version}-%{fullrelease}
Requires(pre):      %{name}         = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:       kernel-modules = %{_kversion}
Provides:       %{name}-kernel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-kernel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-kernel = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{name}-%{_kversion} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-%{_kversion} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-%{_kversion} = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{name}-kmp%{kernel_flavor} = %{epoch}:%{version}_%{kernel_string}-%{fullrelease}
Provides:       %{name}-kmp%{kernel_flavor} = %{epoch}:%{version}_%{kernel_string}-%{fullrelease2}
Provides:       %{name}-kmp%{kernel_flavor} = %{epoch}:%{version}_%{kernel_string}-%{rpmrelease}
Provides:       kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}
Provides:       kmod-%{name} = %{epoch}:%{version}-%{fullrelease}
Provides:       kmod-%{name} = %{epoch}:%{version}-%{fullrelease2}
Provides:       kmod-%{name} = %{epoch}:%{version}-%{rpmrelease}

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description -n %{name}-%{_kversion}
%{descripline}
The %{_kversion} binary package contains the kernel modules that
provide the Linux kernel %{stitle} drivers and modules.  This includes
assorted drivers and modules for STREAMS and additional %{title}
protocol suite components.  This binary package also includes modprobe
configuration files for the associated kernel modules.  This package
is heavily tied to the kernel for which it and dependent components
were compiled.  This package applies to kernel %{kernel_version}
and requires dependent components compiled for the same kernel.  If
you cannot find a binary package that matches your kernel, rebuild
for your kernel from the %{name} package source rpm.
%{descriptail}

%if %{FILES_modules}
%pre -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
arg="$1"
remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
if [ $arg = 1 ] ; then : # fresh install
    # This is a fresh install of this version of kernel module.  Make sure that there are no non-rpm
    # installed kernel modules hanging around for this kernel version.
    list="%{modules}" ; modl_mods=
    if [ -d %{_kmoduledir} ] ; then
        for m in `find %{_kmoduledir} \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
                b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
                case " $list " in (*" $b "*) ;; (*) continue ;; esac
                echo "$m"
                modl_mods="${modl_mods:+$modl_mods }$m"
        done
        if [ -n "$modl_mods" -a -f %{_kmoduledir}/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)     dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < %{_kmoduledir}/modules.dep
            eval "$xtrace"
        fi
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
fi
if [ $arg = 1 -o $arg = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # If we are upgrading and the upgrade is for the running kernel, or we are installing new on
        # the running kernel, we have to worry about previous loaded modules for the old version or
        # a non-rpm version.
        mods="%{modules}" ; for m in $mods ; do
            if ( lsmod | grep -q "^$m" ) ; then
                # Module running, kick the stack.
                modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                if ( lsmod | grep -q "^$m" ) ; then
                    if [ -x /usr/sbin/fdetach ] ; then
                        /usr/sbin/fdetach -a 2>/dev/null
                    fi
                    modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( lsmod | grep -q "^$m" ) ; then
                        lsof | while read -a tokens; do
                            if [ :"${tokens[4]}" = :"CHR" ]; then
                                major=`echo "${tokens[5]}" | sed -e 's|,.*||'`
                                # FIXME: this test is insufficient
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -HUP ${tokens[1]}"
                                fi
                            fi
                        done
                        if [ -x /bin/sleep ] ; then
                            /bin/sleep 5 # wait for processes to die and close streams
                        fi
                        modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( lsmod | grep -q "^$m" ) ; then
                            echo "Cannot install or upgrade with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi
%endif

%if %{FILES_modules}
%post -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for the running
        # kernel.
        if [ -r /boot/System.map-%{kernel_version} ] ; then
            depmod -ae -F /boot/System.map-%{kernel_version} 2>&1 || :
        else
            depmod -ae 2>&1 || :
        fi
        # Running kernels do need init scripts run, but only when normally
        # started in the current runlevel.
        r=`runlevel | sed -e 's|.*[[:space:]]||'`
        list="%{initfiles}" ; for i in $list ; do
            if [ -f %_initrddir/$i ] ; then
                if [ -L %_initrddir/../rc${r}.d/S[0-9][0-9]$i -o \
                     -L %_initrddir/rc${r}.d/S[0-9][0-9]$i ] ; then
                    /sbin/service $i start 2>&1 || %_initrddir/$i start 2>&1 || :
                fi
            fi
        done
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot by depmod anyway, but
        # try one now.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
        # Non-running kernels do not need init scripts run.
    fi
fi
%endif

%if %{FILES_modules}
%preun -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        modprobe -r $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # We are about to uninstall for good on a running kernel then we have to worry about which
        # modules are running
        reboot='no'
        if [ -x /var/run/strace.pid ] ; then
            kill -TERM `cat /var/run/strace.pid` || :
        fi
        if [ -x /var/run/strerr.pid ] ; then
            kill -TERM `cat /var/run/strerr.pid` || :
        fi
        umount -a -t specfs || reboot='yes'
%if %{USE_rmnods}
        if [ -x "%{mknods}" ] ; then
            %{rmnods}
        fi
%endif
        if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
            if [ -x /usr/sbin/fdetach ] ; then
                /usr/sbin/fdetach -a 2>/dev/null || :
            fi
            for signal in TERM KILL ; do
                if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                    lsof | grep '\<STR\>' | \
                    while read -a fields ; do
                        if [ ":${fields[4]}" != ':CHR' ] ; then continue; fi
                        if [ ":${fields[7]}" != ':STR' ] ; then continue; fi
                        kill -$signal ${fields[1]} >/dev/null 2>&1 || :
                    done
                    sleep 5
                fi
            done
        fi
        lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
        remove_depends streams || reboot='yes'
        remove_depends specfs  || reboot='yes'
        [ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
    fi
fi
%endif

%if %{FILES_modules}
%postun -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        modprobe -r $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for.
        if [ -r /boot/System.map-%{kernel_version} ] ; then
            depmod -ae -F /boot/System.map-%{kernel_version} 2>&1 || :
        else
            depmod -ae 2>&1 || :
        fi
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot but depmod anyway.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
    fi
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # One more kick at killing any loaded modules on uninstall, last stage of the upgrade on a
        # running kernel for upgrade.
        reboot='no'
        if [ -x /var/run/strace.pid ] ; then
            kill -TERM `cat /var/run/strace.pid` || :
        fi
        if [ -x /var/run/strerr.pid ] ; then
            kill -TERM `cat /var/run/strerr.pid` || :
        fi
        umount -a -t specfs || reboot='yes'
%if %{USE_rmnods}
        if [ -x "%{mknods}" ] ; then
            %{rmnods}
        fi
%endif
        if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
            if [ -x /usr/sbin/fdetach ] ; then
                /usr/sbin/fdetach -a 2>/dev/null || :
            fi
            for signal in TERM KILL ; do
                if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                    lsof | grep '\<STR\>' | \
                    while read -a fields ; do
                        if [ ":${fields[4]}" != ':CHR' ] ; then continue; fi
                        if [ ":${fields[7]}" != ':STR' ] ; then continue; fi
                        kill -$signal ${fields[1]} >/dev/null 2>&1 || :
                    done
                    sleep 5
                fi
            done
        fi
        lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
        remove_depends streams || reboot='yes'
        remove_depends specfs  || reboot='yes'
        [ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
    fi
fi
%endif

%if %{PACKAGE_kmod}
%files -n %{name}-%{_kversion}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_modules:%dir %{_kmoduledir}/%{base}}
%{?files_oldmods:%attr(644,root,root) %{_kmoduledir}/modules.%{base}}
%{?files_oldmods:%{_kmoduledir}/%{base}/*.o*}
%{?files_newmods:%{_kmoduledir}/%{base}/*.ko*}
%endif

# ===========================================================================
%package -n %{name}-devel-%{_kversion}
# ---------------------------------------------------------------------------
# Note that we should not call this just %{name}-devel-%{_kversion}.  The
# package should be named for proper automatic kernel module package loading
# under various distros.  This varies fairly widely for Fedora, CentOS, RHEL,
# SLES, and others.  The Provides tags follow the naming conventions used by
# these various packages, but virtual package names don't seem to cut it.
# ---------------------------------------------------------------------------

Summary:        %{title} kernel module symbol versions and debug info.
Group:          Development/Kernel
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_modules}
Prefix:         %{_kmoduledir}
%endif
%if %{FILES_oldmods}
Prefix:         %{_includedir}/%{name}/%{kernel_version}
%endif

Obsoletes:      %{name}-devel-kernel
Obsoletes:      %{name}-kmp%{kernel_flavor}-devel
Obsoletes:      kmod%{kernel_flavor}-devel
Obsoletes:      kernel-module-%{name}-devel%{kernel_flavor}
Obsoletes:      %{name}-devel-kmod%{kernel_flavor}

%(LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n")

%if %{NEED_devel}
Requires:       %{name}-devel   = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_kmod}
Requires:       %{name}-%{_kversion} = %{epoch}:%{version}-%{fullrelease}
%endif

Provides:       kernel-modules = %{_kversion}
Provides:       %{name}-devel-kernel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-devel-kernel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-devel-kernel = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{name}-devel-%{_kversion} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-devel-%{_kversion} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-devel-%{_kversion} = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{name}-kmp%{kernel_flavor}-devel = %{epoch}:%{version}_%{kernel_string}-%{fullrelease}
Provides:       %{name}-kmp%{kernel_flavor}-devel = %{epoch}:%{version}_%{kernel_string}-%{fullrelease2}
Provides:       %{name}-kmp%{kernel_flavor}-devel = %{epoch}:%{version}_%{kernel_string}-%{rpmrelease}
Provides:       kmod%{kernel_flavor}-devel = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       kmod%{kernel_flavor}-devel = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       kmod%{kernel_flavor}-devel = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{fullrelease2}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{version}.%{kernel_release}-%{rpmrelease}

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description -n %{name}-devel-%{_kversion}
%{descripline}
The devel-%{_kversion} binary package contains the kernel modules
symbol information for development of additional STREAMS kernel modules
against the core kernel modules included in the %{_kversion} binary
package.  This package is heavily tied to the core kernel modules and
kernel for which it was compiled.  This package applies to core kernel
modules %{_kversion} for kernel version %{_kversion}.  This
package provides kernel debug information for package %{name}.  Kernel
debug information is useful when developing kernel modules that use
this package or when debugging kernel modules contained in the package.
%{descriptail}

%if %{PACKAGE_kbug}
%files -n %{name}-devel-%{_kversion}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_modules:%{?files_kdebugfiles:%{_usrsrc}/debug}}
%{?files_modules:%{?files_kdebugfiles:%{?_lib32dir:%{_lib32dir}/debug/lib/modules/%{kernel_version}}}}
%{?files_modules:%{?files_kdebugfiles:%{!?_lib32dir:%{_libdir}/debug/lib/modules/%{kernel_version}}}}
%{?files_oldmods:%dir %{_includedir}/%{name}/%{kernel_version}}
%{?files_oldmods:%{_includedir}/%{name}/%{kernel_version}/*}
#{?files_modules:%{_kmoduledir}/%{base}/Module*}
%{?files_kinfo:%dir %{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}}
%{?files_mkvars:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/Module.mkvars}
%{?files_mkvars:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/%{csite_file}}
%{?files_mkvars:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/%{cache_file}}
%{?files_symvers:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/Module.symvers}
%{?files_symvers:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/Modules.map}
%{?files_symvers:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/%{_kversion}/%{mpost_file}}
%endif

# =============================================================================
%package -n %{name}-source-%{_kversion}
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------

Summary:        %{title} source configured for kernel.
Group:          Development/Kernel
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       false

%if %{FILES_sourcefiles}
Prefix:         %{_usrsrc}/%{name}
Prefix:         %{_usrsrc}/%{name}-%{version}-%{fullrelease}
%endif

Obsoletes:      %{name}-source-kernel
Obsoletes:      %{name}-kmp%{kernel_flavor}-source
Obsoletes:      kmod%{kernel_flavor}-source
Obsoletes:      kernel-module-%{name}-source%{kernel_flavor}
Obsoletes:      %{name}-source-kmod%{kernel_flavor}

Provides:       %{name}-source-kernel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-source-kernel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-source-kernel = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{name}-source-%{_kversion} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-source-%{_kversion} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-source-%{_kversion} = %{epoch}:%{version}-%{rpmrelease}

Release:        %{fullrelease}

# -----------------------------------------------------------------------------
%description -n %{name}-source-%{_kversion}
%{descripline}
The %{name}-source-%{_kversion} binary package contains the
source code necessary for building the %{name} release for the kernel
version %{_kversion}.  It also includes the autoconf
configuration utilities necessary to create and distribute this rpm.
However, to develop on the package, it would be better to use the
tarball release.  Load this package if you need some files from the
build that are not present in the %{name}-devel-%{_kversion}
package.
%{descriptail}

%if %{PACKAGE_ksrc}
%files -n %{name}-source-%{_kversion}
# -----------------------------------------------------------------------------
%{?files_sourcefiles:%dir %{_usrsrc}/%{name}-%{version}-%{fullrelease}}
%{?files_sourcefiles:%{_usrsrc}/%{name}}
%{?files_sourcefiles:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/*}
%{?files_sourcefiles:%{_usrsrc}/%{name}-%{version}-%{fullrelease}/.[^.]*}
%endif

# =============================================================================
%package java

Summary:        %{title} Java modules and native libraries.
Group:          System Environment/Libraries
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_jnilibs}
Prefix:         %{_jnidir}
%endif
%if %{FILES_gcjlibs}
Prefix:         %{_pkggcjdir}
%endif
%if %{FILES_gcjmaps}
Prefix:         %{_pkggcjdir}
%endif
%if %{FILES_jarfiles}
Prefix:         %{_javadir}
%endif

%if %{FILES_jnilibs}
Requires:       /sbin/ldconfig
%endif
%if %{FILES_gcjmaps}
Requires:       /usr/bin/gcj-dbtool
%endif

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description java
%{descripline}
The %{name}-java binary package contains JAIN implementations for
%{title}.  It includes jar files, JNI and CNI libraries, and gcj native
compiled libraries.  It also includes SWIG implementations of Java
interfaces for %{title} API libraries.
%{descriptail}

%pre java
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{FILES_jnilibs}
    # Fresh install: look for non-rpm libraries and remove them
    libs="%{jnilibs}" ; for lib in $libs ; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            # Old libraries hanging around, delete them.
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs
        fi
    done
%endif
%if %{FILES_gcjlibs}
    # Fresh install: look for non-rpm libraries and remove then
%endif
%if %{FILES_gcjmaps}
    # Fresh install: look for non-rpm classmaps and remove then
%endif
%if %{FILES_jarfiles}
    # Fresh install: look for non-rpm archives and remove them
%endif
fi

%post java
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_jnilibs}
    # Fresh install or upgrade: do a load config.
%endif
%if %{FILES_gcjlibs}
    # Fresh install or upgrade: do nothing.
%endif
%if %{FILES_gcjmaps}
    # Fresh install or upgrade: rebuild classmap database.
    if [ -x /usr/bin/rebuild-gcj-db ] ; then
        /usr/bin/rebuild-gcj-db
    else
        # basically what rebuild-gcj-db does
        for base in /usr/lib* ; do
            db=`/usr/bin/gcj-dbtool -p $base`
            d=$base/gcj
            test -d $d || continue
            dirname $db | xargs mkdir -p
            /usr/bin/gcj-dbtool -n $db.tmp 64
            find $d -follow -name '*.db' -print0 | \
                xargs -0 /usr/bin/gcj-dbtool -m $db.tmp $db.tmp
            /bin/mv -f $db.tmp $db
        done
    fi
%endif
%if %{FILES_jarfiles}
    # Fresh install or upgrade: relink the jar files.
    if [ -x /usr/bin/rebuild-jar-repository ] ; then
        /usr/bin/rebuild-jar-repository %{_javadir}
    fi
%endif
fi

%postun java
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then
%if %{FILES_jnilibs}
    # Complete removal or upgrade: do a load config.
%endif
%if %{FILES_gcjlibs}
    # Complete removal or upgrade: do nothing.
%endif
%if %{FILES_gcjmaps}
    # Complete removal or upgrade: rebuild classmap database.
    if [ -x /usr/bin/rebuild-gcj-db ] ; then
        /usr/bin/rebuild-gcj-db
    else
        # basically what rebuild-gcj-db does
        for base in /usr/lib* ; do
            db=`/usr/bin/gcj-dbtool -p $base`
            d=$base/gcj
            test -d $d || continue
            dirname $db | xargs mkdir -p
            /usr/bin/gcj-dbtool -n $db.tmp 64
            find $d -follow -name '*.db' -print0 | \
                xargs -0 /usr/bin/gcj-dbtool -m $db.tmp $db.tmp
            /bin/mv -f $db.tmp $db
        done
    fi
%endif
%if %{FILES_jarfiles}
    # Complete removal or upgrade: relink the jar files.
    if [ -x /usr/bin/rebuild-jar-repository ] ; then
        /usr/bin/rebuild-jar-repository %{_javadir}
    fi
%endif
fi

%if %{PACKAGE_java}
%files java
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_jnilibs:%{_jnidir}/*}
%{?files_gcjlibs:%dir %{_pkggcjdir}}
%{?files_gcjlibs:%{_pkggcjdir}/*.so}
%{?files_gcjlibs:%{_pkggcjdir}/*.la}
%{?files_gcjmaps:%{_pkggcjdir}/*.db}
%{?files_jarfiles:%{_javadir}/*}
%endif

# =============================================================================
%package javadoc

Summary:        %{title} Javadoc.
Group:          Development/System
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_javadoc}
Prefix:         %{_pkgjavadocdir}
%endif

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description javadoc
%{descripline}
The %{name}-javadoc binary package contains Javadoc documentation for
%{title}.  Install this binary package if you are interested in
developing JAIN applications or resource adapters.  This package is
not normally required on other than a development system.
%{descriptail}

%if %{PACKAGE_jdoc}
%files javadoc
# -----------------------------------------------------------------------------
%{?files_javadoc:%dir %{_pkgjavadocdir}}
%{?files_javadoc:%{_pkgjavadocdir}/*}
%endif

# =============================================================================
%changelog
# -----------------------------------------------------------------------------
# $Log: openss7.spec.in,v $
# Revision 1.1.2.11  2011-02-07 04:48:31  brian
# - updated configure and build scripts
#
# Revision 1.1.2.10  2011-01-18 17:12:50  brian
# - rpm build updates
#
* Tue Sep  1 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.9  2009-09-01 09:09:45  brian
- added text image files

* Fri Jul 24 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.8  2009-07-24 13:49:43  brian
- updates for release build

* Thu Jul 23 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.7  2009-07-23 16:37:42  brian
- updates for release

* Tue Jul 21 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.6  2009-07-21 11:06:11  brian
- changes from release build

* Mon Jul 13 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.5  2009-07-13 07:13:26  brian
- changes for multiple distro build

* Sun Jul  5 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.4  2009-07-05 12:04:26  brian
- updates for release builds

* Sat Jul  4 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.3  2009-07-04 03:51:32  brian
- updates for release

* Mon Jun 29 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.2  2009-06-29 07:35:26  brian
- updated rpm spec and symvers

* Sun Jun 21 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.1  2009-06-21 10:25:07  brian
- added base files to new distro

# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
