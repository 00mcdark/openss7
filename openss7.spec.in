# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
# =============================================================================
# 
# @(#) $RCSfile: openss7.spec.in,v $ $Name:  $($Revision: 0.9.2.88 $) $Date: 2008-09-28 17:00:18 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>, or
# write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2008-09-28 17:00:18 $ by $Author: brian $
#
# =============================================================================

%global majbase     @STRCONF_MAJBASE@
%global makedev     @STRCONF_MAKEDEV@
#global mknods      /usr/sbin/inet_mkdev    # inet style install
#global rmnods      /usr/sbin/inet_rmdev    # inet style removal
%global mknods      /usr/sbin/@STRMAKENODES@
%global rmnods      /usr/sbin/@STRMAKENODES@ --remove
%global epoch       @PACKAGE_RPMEPOCH@
%global base        @PACKAGE_LCNAME@
%global title       @PACKAGE_TITLE@
%global stitle      @PACKAGE_SHORTTITLE@
%global virtual     STREAMS

#global binfiles    %{nil}
#global sbinfiles   %{nil}
#global modules     %{nil}
%global nonrpmmods  %{nil}
#global preloads    %{nil}
#global libraries   %{nil}
#global locales     %{nil}
#global tools       %{nil}
%global infofiles   %{name} ss
#global pngfiles    *.png
#global initfiles   %{nil}
%global nonrpminit  %{nil}
#global conffiles   %{nil}
#global testfiles   %{nil}
#global testscripts %{nil}
%global sendpr      %{nil}
#global mibfiles    *.mib
#global snmpmods    %{nil}
#global gdmos       %{nil}
#global netconfig   %{nil}
#global sock2path   %{nil}
%global manual      doc/manual
#global specs       doc/specs
#global drafts      doc/drafts
#global papers      doc/papers
%global projects    doc/projects
#global snmpconf    %{nil}
#global manrefs     %{base}.refs
#global manmacros   %{base}.macros
#global manpages    man*
#global includes    %{nil}
%global license     AGPLv3

%global NEED_streams    1
%global NEED_compat     1
%global NEED_xns        1
%global NEED_xnet       1
%global NEED_nsl        1
%global NEED_sock       1
%global NEED_inet       1
%global NEED_sctp       0
%global NEED_chan       0
%global NEED_x25        0
%global NEED_iso        0
%global NEED_isdn       0
%global NEED_ss7        0
%global NEED_sigtran    0

%global config_options  \\\
    --without-SCTP \\\
    --without-IPERF \\\
    --without-LIS \\\
    --without-STREAMS \\\
    --without-STRCOMPAT \\\
    --without-STRUTIL \\\
    --without-STRBCM \\\
    --without-STRTTY \\\
    --without-STRXNS \\\
    --without-STRXNET \\\
    --without-STRNSL \\\
    --without-STRSOCK \\\
    --without-STRINET \\\
    --without-STRSCTP \\\
    --without-STRCHAN \\\
    --without-STRX25 \\\
    --without-STRISO \\\
    --without-NETPERF \\\
    --without-STRISDN \\\
    --without-STACKS \\\
    --without-SIGTRAN \\\
    --without-STRVOIP \\\
    --without-OSR61 \\\
    %{nil}

%global VIRT_base       1
%global VIRT_devel      1
%global VIRT_kmod       1
%global VIRT_kbug       1

%{!?_enable_debug_packages:%{expand: %%global _enable_debug_packages 0}}

# there are three ways to pass kernel version to the build process:
#    global _kversion in /usr/lib/rpm/macros, /etc/rpm/macros or ~/.rpmmacros
#    global _kversion on the rpmbuild command line
#    global PACKAGE_KVERSION environment variable
#    just let it default to `uname -r`
#{!?_kversion: #{expand: ##global _kversion #(env | grep PACKAGE_KVERSION | sed -e 's,.*=,,')}}
%{!?_kversion: %{expand: %%global _kversion %(uname -r)}}

%global without_ko_modules %(echo %{_kversion} | sed -e 's,^2\.[56]\..*$,0,;s,^2\.4\..*$,1,')
%global kernel_version %{_kversion}
%global kernel_source %(echo %{_kversion} | sed -r -e 's,BOOT$,,;s,-?smp$,,;s,bigmem$,,;s,debug$,,;s,enterprise$,,;s,hugemem$,,;s,secure$,,;s,-i686-up-4GB$,,;s,-p3-smp-64GB$,,;s,-64GB-SMP,.SuSE,;s,-default$,,')
%global kernel_number %(echo %{_kversion} | sed -e 's,-.*$,,')
%global kernel_release %(echo %{_kversion} | sed -e 's,-,.,g')
%global kernel_string %(echo %{_kversion} | sed -e 's,-,_,g')
%global kernel_flavor %(echo %{_kversion} | sed -r -e 's,.*BOOT,-BOOT,;t;s,.*-?smp$,-smp,;t;s,.*bigmem$,-bigmem,;t;s,.*debug$,-debug,;t;s,.*kdump$,-kdump,;t;s,.*enterprise$,-enterprise,;t;s,.*hugemem$,-hugemem,;t;s,.*secure$,-secure,;t;s,.*-i686-up-4GB,-i686-up-4GB,;t;s,.*-p3-smp-4GB$,-p3-smp-4GB,;t;s,.*-64GB-SMP$,-64GB-SMP,;t;s,.*-default$,-default,;t;s,.*pae$,-pae,;t;s,.*PAE$,-PAE,;t;s,.*,,')

%global HAVE_devices        %{?majbase:     1}%{!?majbase:     0}
%global HAVE_makedev        %{?makedev:     1}%{!?makedev:     0}
%global HAVE_mknods         %{?mknods:      1}%{!?mknods:      0}
%global HAVE_rmnods         %{?rmnods:      1}%{!?rmnods:      0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_binfiles       %{?binfiles:    1}%{!?binfiles:    0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_preloads       %{?preloads:    1}%{!?preloads:    0}
%global HAVE_modules        %{?modules:     1}%{!?modules:     0}
%global HAVE_libraries      %{?libraries:   1}%{!?libraries:   0}
%global HAVE_locales        %{?locales:     1}%{!?locales:     0}
%global HAVE_tools          %{?tools:       1}%{!?tools:       0}
%global HAVE_infofiles      %{?infofiles:   1}%{!?infofiles:   0}
%global HAVE_pngfiles       %{?pngfiles:    1}%{!?pngfiles:    0}
%global HAVE_initscripts    %{?initfiles:   1}%{!?initfiles:   0}
%global HAVE_configfiles    %{?conffiles:   1}%{!?conffiles:   0}
%global HAVE_testfiles      %{?testfiles:   1}%{!?testfiles:   0}
%global HAVE_testscripts    %{?testscripts: 1}%{!?testscripts: 0}
%global HAVE_sendpr         %{?sendpr:      1}%{!?sendpr:      0}
%global HAVE_mibfiles       %{?mibfiles:    1}%{!?mibfiles:    0}
%global HAVE_snmpmods       %{?snmpmods:    1}%{!?snmpmods:    0}
%global HAVE_gdmofiles      %{?gdmos:       1}%{!?gdmos:       0}
%global HAVE_netconfig      %{?netconfig:   1}%{!?netconfig:   0}
%global HAVE_sock2path      %{?sock2path:   1}%{!?sock2path:   0}
%global HAVE_manual         %{?manual:      1}%{!?manual:      0}
%global HAVE_specs          %{?specs:       1}%{!?specs:       0}
%global HAVE_drafts         %{?drafts:      1}%{!?drafts:      0}
%global HAVE_papers         %{?papers:      1}%{!?papers:      0}
%global HAVE_projects       %{?projects:    1}%{!?projects:    0}
%global HAVE_manrefs        %{?manrefs:     1}%{!?manrefs:     0}
%global HAVE_manmacros      %{?manmacros:   1}%{!?manmacros:   0}
%global HAVE_manpages       %{?manpages:    1}%{!?manpages:    0}
%global HAVE_snmpconf       %{?snmpconf:    1}%{!?snmpconf:    0}
%global HAVE_debugfiles     %{_enable_debug_packages}
%global HAVE_kdebugfiles    %{_enable_debug_packages}
%global HAVE_sourcefiles    1
%global HAVE_docfiles       1
%global HAVE_includes       %{?includes:    1}%{!?includes:    0}

%if %{without_ko_modules}
%global HAVE_oldmods        %{HAVE_modules}
%global HAVE_newmods        0
%else
%global HAVE_oldmods        0
%global HAVE_newmods        %{HAVE_modules}
%endif

%ifarch x86_64 s390x sparc64 ppc64 ia64
%global HAVE_lib32compat    %{HAVE_libraries}
%else
%global HAVE_lib32compat    0
%endif

%if %{HAVE_devices}
%global USE_makedev         %{HAVE_makedev}
%global USE_mknods          %{HAVE_mknods}
%global USE_rmnods          %{HAVE_rmnods}
%else
%global USE_makedev         0
%global USE_mknods          0
%global USE_rmnods          0
%endif

%if %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%global USE_makedev         0
%endif

%if %{without_ko_modules}
%else
%global USE_makedev         0
%endif

%if %{USE_makedev}
%global USE_mknods          0
%global USE_rmnods          0
%global devicesfile         -f %{makedev}
%endif

%global FILES_binfiles      %{HAVE_binfiles}
%global FILES_sbinfiles     %{HAVE_sbinfiles}
%global FILES_preloads      %{HAVE_preloads}
%global FILES_modules       %{HAVE_modules}
%global FILES_oldmods       %{HAVE_oldmods}
%global FILES_newmods       %{HAVE_newmods}
%global FILES_libraries     %{HAVE_libraries}
%global FILES_libstatic     %{HAVE_libraries}
%global FILES_lib32compat   %{HAVE_lib32compat}
%global FILES_lib32static   %{HAVE_lib32compat}
%global FILES_locales       %{HAVE_locales}
%global FILES_tools         %{HAVE_tools}
%global FILES_infofiles     %{HAVE_infofiles}
%global FILES_pdffiles      %{HAVE_infofiles}
%global FILES_htmlfiles     %{HAVE_infofiles}
%global FILES_pngfiles      %{HAVE_pngfiles}
%global FILES_initscripts   %{HAVE_initscripts}
%global FILES_configfiles   %{HAVE_configfiles}
%global FILES_testfiles     %{HAVE_testfiles}
%global FILES_testscripts   %{HAVE_testscripts}
%global FILES_sendpr        %{HAVE_sendpr}
%global FILES_mibfiles      %{HAVE_mibfiles}
%global FILES_snmpmods      %{HAVE_snmpmods}
%global FILES_gdmofiles     %{HAVE_gdmofiles}
%global FILES_netconfig     %{HAVE_netconfig}
%global FILES_sock2path     %{HAVE_sock2path}
%global FILES_manual        %{HAVE_manual}
%global FILES_specs         %{HAVE_specs}
%global FILES_drafts        %{HAVE_drafts}
%global FILES_papers        %{HAVE_papers}
%global FILES_projects      %{HAVE_projects}
%global FILES_manrefs       %{HAVE_manrefs}
%global FILES_manmacros     %{HAVE_manmacros}
%global FILES_manpages      %{HAVE_manpages}
%global FILES_snmpconf      %{HAVE_snmpconf}
%global FILES_debugfiles    %{HAVE_debugfiles}
%global FILES_kdebugfiles   %{HAVE_kdebugfiles}
%global FILES_sourcefiles   %{HAVE_sourcefiles}
%global FILES_docfiles      %{HAVE_docfiles}
%global FILES_includes      %{HAVE_includes}

%if %{FILES_manual}
%global FILES_pdffiles      1
%global FILES_htmlfiles     1
%endif
%if %{FILES_specs}
%global FILES_pdffiles      1
%global FILES_htmlfiles     1
%endif
%if %{FILES_drafts}
%global FILES_pdffiles      1
%global FILES_htmlfiles     1
%endif
%if %{FILES_papers}
%global FILES_pdffiles      1
%global FILES_htmlfiles     1
%endif
%if %{FILES_projects}
%global FILES_pdffiles      1
%global FILES_htmlfiles     1
%endif

# These are the defaults for the WITH_zzz macros.  These
# defaults can be changed by passing --with-zzz or --without-zzz
# to the rpmbuild command.  The default is to build everything
# for LFS but source.
%global WITH_modules    1
%global WITH_devel      1
%global WITH_tools      1
%global WITH_noarch     1
%global WITH_arch       1
%global WITH_source     0
%global WITH_snmp       1
%global WITH_mibs       1
%global WITH_docs       1
%global WITH_manrefs    1
%global WITH_manmacros  1
%global WITH_lfs        1
%global WITH_lis        0
%global WITH_debug      %{_enable_debug_packages}

# Because we only need to build the tools binaries once for each
# architecture, but need to build the modules binaries once for
# each architecture and kernel vesion, we accept --with[out]-zzz
# options "modules" and "tools".  There are number of other
# options as well.
%{?_without_modules:         %{expand: %%global WITH_modules   0}}
%{?_with_modules:            %{expand: %%global WITH_modules   1}}
%{?_without_devel:           %{expand: %%global WITH_devel     0}}
%{?_with_devel:              %{expand: %%global WITH_devel     1}}
%{?_without_tools:           %{expand: %%global WITH_tools     0}}
%{?_with_tools:              %{expand: %%global WITH_tools     1}}
%{?_without_indep:           %{expand: %%global WITH_noarch    0}}
%{?_with_indep:              %{expand: %%global WITH_noarch    1}}
%{?_without_arch:            %{expand: %%global WITH_arch      0}}
%{?_with_arch:               %{expand: %%global WITH_arch      1}}
%{?_with_public:             %{expand: %%global WITH_source    1}}
%{?_with_k_package:          %{expand: %%global WITH_source    1}}
%{?_without_snmp_agent:      %{expand: %%global WITH_snmp      0}}
%{?_without_snmp_agent:      %{expand: %%global WITH_mibs      0}}
%{?_with_snmp_agent:         %{expand: %%global WITH_snmp      1}}
%{?_with_snmp_agent:         %{expand: %%global WITH_mibs      1}}
%{?_without_docs:            %{expand: %%global WITH_docs      0}}
%{?_with_docs:               %{expand: %%global WITH_docs      1}}
%{?_without_lis:             %{expand: %%global WITH_lis       0}}
%{?_without_lis:             %{expand: %%global WITH_lfs       1}}
%{?_with_lis:                %{expand: %%global WITH_lis       1}}
%{?_with_lis:                %{expand: %%global WITH_lfs       0}}
%{?_without_lfs:             %{expand: %%global WITH_lfs       0}}
%{?_without_lfs:             %{expand: %%global WITH_lis       1}}
%{?_with_lfs:                %{expand: %%global WITH_lfs       1}}
%{?_with_lfs:                %{expand: %%global WITH_lis       0}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manrefs   1}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manmacros 1}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manrefs   0}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manmacros 0}}

%global BUILD_modules   %{WITH_modules}
%global BUILD_devel     %{WITH_devel}
%global BUILD_tools     %{WITH_tools}
%global BUILD_noarch    %{WITH_noarch}
%global BUILD_arch      %{WITH_arch}
%global BUILD_source    %{WITH_source}
%global BUILD_snmp      %{WITH_snmp}
%global BUILD_mibs      %{WITH_mibs}
%global BUILD_docs      %{WITH_docs}
%global BUILD_manrefs   %{WITH_manrefs}
%global BUILD_manmacros %{WITH_manmacros}
%global BUILD_lfs       %{WITH_lfs}
%global BUILD_lis       %{WITH_lis}
%global BUILD_debug     %{WITH_debug}

%ifnarch noarch
%global BUILD_lfs       1
%endif

# define new autoconf 2.60, 2.61 stuff
%{!?_datarootdir:       %{expand: %%global _datarootdir     %%{_datadir}}}
%{!?_docdir:            %{expand: %%global _docdir          %%{_datarootdir}/doc/@PACKAGE@-@VERSION@}}
%{!?_htmldir:           %{expand: %%global _htmldir         %%{_docdir}}}
%{!?_dvidir:            %{expand: %%global _dvidir          %%{_docdir}}}
%{!?_pdfdir:            %{expand: %%global _pdfdir          %%{_docdir}}}
%{!?_psdir:             %{expand: %%global _psdir           %%{_docdir}}}
%{!?_localedir:         %{expand: %%global _localedir       %%{_datadir}/locale}}
%{!?_configdir:         %{expand: %%global _configdir       %%{_sysconfdir}/sysconfig}}
%{!?_modutildir:        %{expand: %%global _modutildir      %%{_sysconfdir}/modutils}}
%{!?_kmoduledir:        %{expand: %%global _kmoduledir      /lib/modules/%%{kernel_version}}}
%{!?_pkglibexecdir:     %{expand: %%global _pkglibexecdir   %%{_libexecdir}/%%{name}}}
%{!?_snmpmibdir:        %{expand: %%global _snmpmibdir      %%{_datarootdir}/snmp/mibs}}
%{!?_snmpdlmoddir:      %{expand: %%global _snmpdlmoddir    %%{_libdir}/snmp/dlmod}}
%{!?_snmpconfdir:       %{expand: %%global _snmpconfdir     %%{_sysconfdir}/snmp}}
%ifarch x86_64 ppc64 sparc64 ia64
%{!?_lib32dir:          %{expand: %%global _lib32dir        %%{_exec_prefix}/lib}}
%{!?_pkglibexec32dir:   %{expand: %%global _pkglibexec32dir %%{_pkglibexecdir}/lib32}}
%{!?_snmpdlmod32dir:    %{expand: %%global _snmpdlmod32dir  %%{_lib32dir}/snmp/dlmod}}
%endif

%global _STREAMS SVR 4.2
%global _streams %{virtual}
%global _ksubdir streams
%global _kmodext streams
%global _strextra -%{virtual}
%global _strother %{nil}
%if %{BUILD_lfs}
%global _STREAMS LfS
%global _streams streams
%global _ksubdir streams
%global _kmodext streams
%global _conflict LiS
%global _strextra %{nil}
%global _strother -LiS
%global _strvers @LFS_VERSION@
%global _with_lfs --with-lfs
%endif
%if %{BUILD_lis}
%global _STREAMS LiS
%global _streams LiS
%global _ksubdir lis
%global _kmodext lis
%global _conflict streams
%global _strextra -LiS
%global _strother %{nil}
%global _strvers @LIS_VERSION@
%global _with_lis --with-lis
%endif

%if %{NEED_streams}
%global _obsopkg %name-%_streams
%global _strmpkg %name%_strextra
%global _confpkg %name%_strother
%global _virtpkg %{name}-%{virtual}
%else
%global _obsopkg %_streams
%global _strmpkg %_streams
%global _confpkg %_conflict
%global _virtpkg %{virtual}
%endif

%global core_name   core-%{_kversion}
%global info_name   info-%{_kversion}

%global corename %_strmpkg-%_kversion
%global infoname %_strmpkg-devel-%_kversion
%global coreconf %_confpkg-%_kversion
%global infoconf %_confpkg-devel-%_kversion
%global corevirt %_virtpkg
%global infovirt %_virtpkg-devel
%global coreroot() %1-%{virtual}%{nil}
%global inforoot() %1-%{virtual}-devel%{nil}
%global kmodules_version @VERSION@

%if %(test '%_vendor' = 'suse' && echo 1 || echo 0)
%global corename openss7-%_strmpkg-kmp%kernel_flavor
%global infoname openss7-%_strmpkg-kmp%kernel_flavor-devel
%global coreconf openss7-%_confpkg-kmp%kernel_flavor
%global infoconf openss7-%_confpkg-kmp%kernel_flavor-devel
%global corevirt openss7-%_virtpkg-kmp%{nil}
%global infovirt openss7-%_virtpkg-kmp-devel%{nil}
%global coreroot() openss7-%1-%{virtual}-kmp%{nil}
%global inforoot() openss7-%1-%{virtual}-kmp-devel%{nil}
%global kmodules_version @VERSION@_%kernel_string
%endif

%if %(test '%_vendor' = 'redhat' && echo 1 || echo 0)
%global corename kmod-%_strmpkg%kernel_flavor
%global infoname kmod-%_strmpkg%kernel_flavor-devel
%global coreconf kmod-%_confpkg%kernel_flavor
%global infoconf kmod-%_confpkg%kernel_flavor-devel
%global corevirt kmod-%_virtpkg%{nil}
%global infovirt kmod-%_virtpkg-devel%{nil}
%global coreroot() kmod-%1-%{virtual}%{nil}
%global inforoot() kmod-%1-%{virtual}-devel%{nil}
%global kmodules_version @VERSION@.%kernel_release
%endif

# ---------------------------------------------------------------------------
# Calculate which files were not built (and are not included)
# ---------------------------------------------------------------------------

%global kernel_fedora       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,1,;t;s,.*\.fc[6789].*$,1,;t;s,.*\.EL[45]?.*$,1,;t;s,.*\.el5.*$,1,;t;s,.*$,0,')
%global kernel_others       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,0,;t;s,.*\.fc[6789].*$,0,;t;s,.*\.EL[45]?.*$,0,;t;s,.*\.el5.*$,0,;t;s,.*$,1,')

%{?!VIRT_base:
%global VIRT_base       0}
%{?!VIRT_lib:
%global VIRT_lib        0}
%{?!VIRT_devel:
%global VIRT_devel      0}
%{?!VIRT_kmod:
%global VIRT_kmod       0}
%{?!VIRT_kbug:
%global VIRT_kbug       0}

%if %{BUILD_modules}
%else
%global VIRT_kmod           0
%global VIRT_kbug           0
%global kernel_fedora       0
%global kernel_others       0
%global FILES_modules       0
%global FILES_oldmods       0
%global FILES_newmods       0
%global FILES_kdebugfiles   0
%endif

%if %{BUILD_devel}
%else
%global VIRT_devel          0
%global FILES_includes      0
%global FILES_libstatic     0
%global FILES_lib32static   0
%global FILES_sourcefiles   0
%global FILES_manual        0
%global FILES_specs         0
%global FILES_drafts        0
%global FILES_papers        0
%global FILES_projects      0
%global FILES_infofiles     0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_manpages      0
%global FILES_debugfiles    0
%global FILES_testscripts   0
%global FILES_sendpr        0
%endif

%if %{BUILD_tools}
%else
%global VIRT_lib            0
%global VIRT_devel          0
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_locales       0
%global FILES_testfiles     0
%global FILES_snmpmods      0
%global FILES_debugfiles    0
%endif

%if %{BUILD_noarch}
%else
%global VIRT_base           0
%global FILES_infofiles     0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_initscripts   0
%global FILES_configfiles   0
%global FILES_mibfiles      0
%global FILES_netconfig     0
%global FILES_sock2path     0
%global FILES_manual        0
%global FILES_specs         0
%global FILES_drafts        0
%global FILES_papers        0
%global FILES_projects      0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_snmpconf      0
%global FILES_sourcefiles   0
%global FILES_docfiles      0
%global FILES_testscripts   0
%global FILES_sendpr        0
%global FILES_manpages      0
%endif

%if %{BUILD_arch}
%else
%global VIRT_lib            0
%global VIRT_devel          0
%global VIRT_kmod           0
%global VIRT_kbug           0
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_modules       0
%global FILES_oldmods       0
%global FILES_newmods       0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_locales       0
%global FILES_tools         0
%global FILES_gdmofiles     0
%global FILES_testfiles     0
%global FILES_snmpmods      0
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%endif

%if %{BUILD_source}
%else
%global FILES_sourcefiles   0
%endif

%if %{BUILD_snmp}
%else
%global FILES_snmpconf      0
%global FILES_snmpmods      0
%global FILES_mibfiles      0
%endif

%if %{BUILD_mibs}
%else
%global FILES_mibfiles      0
%endif

%if %{BUILD_docs}
%else
%global FILES_manual        0
%global FILES_specs         0
%global FILES_drafts        0
%global FILES_papers        0
%global FILES_projects      0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_manpages      0
%endif

%if %{BUILD_manrefs}
%else
%global FILES_manrefs       0
%endif

%if %{BUILD_manmacros}
%else
%global FILES_manmacros     0
%endif

%if %{BUILD_lfs}
%else
%endif

%if %{BUILD_lis}
%else
%endif

%if %{BUILD_debug}
%else
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%endif

# ---------------------------------------------------------------------------
# Calculate whether we want to build debugging information.
# ---------------------------------------------------------------------------

%global WANT_debug          0

%if %{HAVE_debugfiles}
%global WANT_debug          1
%endif
%if %{HAVE_kdebugfiles}
%global WANT_debug          1
%endif

%if %{WANT_debug}
%global __debug_package     1
%else
%global __debug_package     0
%endif

%global debug_package       %{nil}

# ---------------------------------------------------------------------------
# Calculate which packages we want (and don't want).
# ---------------------------------------------------------------------------

%if %{VIRT_base}
%global WANT_base       1
%else
%global WANT_base       0
%endif

%if %{FILES_docfiles}
%global WANT_base       1
%endif
%if %{FILES_snmpconf}
%global WANT_base       1
%endif
%if %{FILES_configfiles}
%global WANT_base       1
%endif
%if %{FILES_netconfig}
%global WANT_base       1
%endif
%if %{FILES_sock2path}
%global WANT_base       1
%endif
%if %{FILES_oldmods}
%global WANT_base       1
%endif
%if %{FILES_initscripts}
%global WANT_base       1
%endif
%if %{FILES_mibfiles}
%global WANT_base       1
%endif
%if %{FILES_testscripts}
%global WANT_base       1
%endif
%if %{FILES_sendpr}
%global WANT_base       1
%endif
%if %{FILES_manual}
%global WANT_base       1
%endif
%if %{FILES_specs}
%global WANT_base       1
%endif
%if %{FILES_drafts}
%global WANT_base       1
%endif
%if %{FILES_papers}
%global WANT_base       1
%endif
%if %{FILES_projects}
%global WANT_base       1
%endif
%if %{FILES_infofiles}
%global WANT_base       1
%endif
%if %{FILES_pdffiles}
%global WANT_base       1
%endif
%if %{FILES_htmlfiles}
%global WANT_base       1
%endif
%if %{FILES_pngfiles}
%global WANT_base       1
%endif
%if %{FILES_manrefs}
%global WANT_base       1
%endif
%if %{FILES_manmacros}
%global WANT_base       1
%endif
%if %{FILES_manpages}
%global WANT_base       1
%endif

%if %{WANT_base}
%global PACKAGE_base    1
%else
%global PACKAGE_base    0
%endif

# -----------------------

%if %{VIRT_lib}
%global WANT_lib        1
%else
%global WANT_lib        0
%endif

%if %{FILES_binfiles}
%global WANT_lib        1
%endif
%if %{FILES_sbinfiles}
%global WANT_lib        1
%endif
%if %{FILES_libraries}
%global WANT_lib        1
%endif
%if %{FILES_lib32compat}
%global WANT_lib        1
%endif
%if %{FILES_locales}
%global WANT_lib        1
%endif
%if %{FILES_gdmofiles}
%global WANT_lib        1
%endif
%if %{FILES_testfiles}
%global WANT_lib        1
%endif
%if %{FILES_snmpmods}
%global WANT_lib        1
%endif

%if %{WANT_lib}
%global PACKAGE_lib     1
%else
%global PACKAGE_lib     0
%endif

# -----------------------

%if %{VIRT_devel}
%global WANT_devel      1
%else
%global WANT_devel      0
%endif

%if %{FILES_includes}
%global WANT_devel      1
%endif
%if %{FILES_libstatic}
%global WANT_devel      1
%endif
%if %{FILES_lib32static}
%global WANT_devel      1
%endif
%if %{FILES_sourcefiles}
%global WANT_devel      1
%endif

%if %{WANT_devel}
%global PACKAGE_devel   1
%else
%global PACKAGE_devel   0
%endif

# -----------------------

%if %{VIRT_kmod}
%global WANT_kmod       1
%else
%global WANT_kmod       0
%endif

%if %{FILES_modules}
%global WANT_kmod       1
%endif

%if %{WANT_kmod}
%global PACKAGE_kmod    1
%else
%global PACKAGE_kmod    0
%endif

# -----------------------

%if %{VIRT_kbug}
%global WANT_kbug       1
%else
%global WANT_kbug       0
%endif

%if %{FILES_modules}
%global WANT_kbug       1
%endif

%if %{WANT_kbug}
%global PACKAGE_kbug    1
%else
%global PACKAGE_kbug    0
%endif

# ---------------------------------------------------------------------------

%if %{NEED_streams}
%global need_streams        %{nil}
%endif
%if %{NEED_compat}
%global need_compat         %{nil}
%endif
%if %{NEED_xns}
%global need_xns            %{nil}
%endif
%if %{NEED_xnet}
%global need_xnet           %{nil}
%endif
%if %{NEED_nsl}
%global need_nsl            %{nil}
%endif
%if %{NEED_sock}
%global need_sock           %{nil}
%endif
%if %{NEED_inet}
%global need_inet           %{nil}
%endif
%if %{NEED_sctp}
%global need_sctp           %{nil}
%endif
%if %{NEED_chan}
%global need_chan           %{nil}
%endif
%if %{NEED_x25}
%global need_x25            %{nil}
%endif
%if %{NEED_iso}
%global need_iso            %{nil}
%endif
%if %{NEED_isdn}
%global need_isdn           %{nil}
%endif
%if %{NEED_ss7}
%global need_ss7            %{nil}
%endif
%if %{NEED_sigtran}
%global need_sigtran        %{nil}
%endif

# ---------------------------------------------------------------------------

%if %{FILES_binfiles}
%global files_binfiles      %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_sbinfiles}
%global files_sbinfiles     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_preloads}
%global files_preloads      %{nil}
%endif
%if %{FILES_modules}
%global files_modules       %{nil}
%endif
%if %{FILES_oldmods}
%global files_oldmods       %{nil}
%endif
%if %{FILES_newmods}
%global files_newmods       %{nil}
%endif
%if %{FILES_libraries}
%global files_libraries     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_libstatic}
%global files_libstatic     %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_lib32compat}
%global files_lib32compat   %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_lib32static}
%global files_lib32static   %{nil}
%global files_binaries      %{nil}
%endif
%if %{FILES_locales}
%global files_locales       %{nil}
%endif
%if %{FILES_tools}
%global files_tools         %{nil}
%endif
%if %{FILES_infofiles}
%global files_infofiles     %{nil}
%endif
%if %{FILES_pdffiles}
%global files_pdffiles      %{nil}
%endif
%if %{FILES_htmlfiles}
%global files_htmlfiles     %{nil}
%endif
%if %{FILES_pngfiles}
%global files_pngfiles      %{nil}
%endif
%if %{FILES_initscripts}
%global files_initscripts   %{nil}
%endif
%if %{FILES_configfiles}
%global files_configfiles   %{nil}
%endif
%if %{FILES_testfiles}
%global files_testfiles     %{nil}
%endif
%if %{FILES_testscripts}
%global files_testscripts   %{nil}
%endif
%if %{FILES_sendpr}
%global files_sendpr        %{nil}
%endif
%if %{FILES_mibfiles}
%global files_mibfiles      %{nil}
%endif
%if %{FILES_snmpmods}
%global files_snmpmods      %{nil}
%endif
%if %{FILES_gdmofiles}
%global files_gdmofiles     %{nil}
%endif
%if %{FILES_netconfig}
%global files_netconfig     %{nil}
%endif
%if %{FILES_sock2path}
%global files_sock2path     %{nil}
%endif
%if %{FILES_manual}
%global files_manual        %{nil}
%endif
%if %{FILES_specs}
%global files_specs         %{nil}
%endif
%if %{FILES_drafts}
%global files_drafts        %{nil}
%endif
%if %{FILES_papers}
%global files_papers        %{nil}
%endif
%if %{FILES_projects}
%global files_projects      %{nil}
%endif
%if %{FILES_manrefs}
%global files_manrefs       %{nil}
%endif
%if %{FILES_manmacros}
%global files_manmacros     %{nil}
%endif
%if %{FILES_manpages}
%global files_manpages      %{nil}
%endif
%if %{FILES_snmpconf}
%global files_snmpconf      %{nil}
%endif
%if %{FILES_debugfiles}
%global files_debugfiles    %{nil}
%endif
%if %{FILES_kdebugfiles}
%global files_kdebugfiles   %{nil}
%endif
%if %{FILES_sourcefiles}
%global files_sourcefiles   %{nil}
%endif
%if %{FILES_docfiles}
%global files_docfiles      %{nil}
%endif
%if %{FILES_includes}
%global files_includes      %{nil}
%endif

# ---------------------------------------------------------------------------

# we have some more options that control configure for the build
%{?disturl:%{!?url:%{expand: %%global url %{disturl}}}}
%global rpmrelease @PACKAGE_RPMRELEASE@
%{?extrarelease:  %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@%%{extrarelease}}}
%{!?extrarelease: %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@}}
%{?extrarelease2:  %{expand: %%global fullrelease2 @PACKAGE_RPMRELEASE@%%{extrarelease2}}}
%{!?extrarelease2: %{expand: %%global fullrelease2 @PACKAGE_RPMRELEASE@}}

# a macro to [build] require one package of the same version as another (possibly virtual) package
# use the arguments [Build]Requires: package1 [>]= package2
%global requires_prov() %{expand: %(LANG= rpm -q --provides %3 --qf "%1 %2 %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|%1|')}%{nil}
%global version_of_or() %{expand: %(LANG= rpm -q --provides %1 --qf "= %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|>= %2|')}%{nil}

%global descripline %{title} provides %{stitle} for Linux.

%if %(test '%{_vendor}' = 'suse' && echo 1 || echo 0)
%global descriptail %(echo -en '\n\n\nAuthors\n-------\n    Brian Bidulock, <bidulock@openss7.org>\nDistribution: %{distribution} (%{_target_cpu})')
%else
%global descriptail %{nil}
%endif

Summary:        %{title} for Linux.
Name:           @PACKAGE@
Epoch:          @PACKAGE_RPMEPOCH@
Version:        @VERSION@
Release:        %{rpmrelease}
License:        %{license}
Group:          System Environment/Kernel
%{?url:
URL:            %{url}}
%{?_xpm_icon:
Icon:           %{_xpm_icon}}
%{?_gif_icon:
Icon:           %{_gif_icon}}
ExclusiveArch:  %{ix86} k6 x86_64 s390 s390x ppc ppciseries ppcpseries ppc64 arm armv4l sh mips mipsel noarch
ExclusiveOs:    Linux
#Source:         %{name}-%{version}.tar.bz2
Source:         http://www.openss7.org/tarballs/%{name}-%{version}.tar.bz2
%{!?buildroot:
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{fullrelease}-root}
Autoreq:        true
Autoprov:       true

%define newgcc %(if test `gcc -v 2>&1 | grep 'gcc version' | sed -e 's|gcc version ||;s| .*$||'` != '2.95.3' ; then echo 1 ; else echo 0 ; fi)

%ifarch s390 s390x
BuildRequires:  gcc >= 2.95.3
%else
%ifarch %all_ppc
BuildRequires:  gcc >= 2.96-75
%else
%if %newgcc
BuildRequires:  gcc >= 2.96-98
%else
BuildRequires:  gcc = 2.95.3
%endif
%endif
%endif
%if %newgcc
BuildRequires:  gcc >= 2.96
%else
BuildRequires:  gcc = 2.95.3
%endif

# TODO: FC4 wants kernel-devel not kernel-source
# older rpm can't handle nested ifs
%if %{kernel_fedora}
BuildRequires:  kernel-devel = %{kernel_source}
%endif
%if %{kernel_others}
BuildRequires:  kernel-source = %{kernel_source}
%endif
%if %{BUILD_modules}
BuildRequires:  modutils >= 2.4.12
%endif

%if %{without_ko_modules}
# to generate kernel symbols:
BuildRequires:  /sbin/genksyms
%endif

# these are some needs of the configure script
# to manipulate manual pages:
BuildRequires:  /usr/bin/groff
BuildRequires:  /usr/bin/soelim
BuildRequires:  /usr/bin/refer
BuildRequires:  /usr/bin/tbl
BuildRequires:  /usr/bin/pic
BuildRequires:  /usr/bin/gzip

%if %{BUILD_snmp}
# when providing snmp agents, the following are required:
#BuildRequires: lm_sensors-devel
#BuildRequires: net-snmp-libs
#BuildRequires: net-snmp-devel
%endif

# to build documentation
#BuildRequires: transfig >= 3.2
#BuildRequires: ImageMagick
#BuildRequires: tetex >= 1.0
#BuildRequires: ghostscript >= 6.51
# to install documentation
#BuildRequires: texinfo >= 4.0

%{?files_configfiles:
Prefix:         %{_sysconfdir}}
%{?files_mibfiles:
Prefix:         %{_snmpmibdir}}
%{?files_initscripts:
Prefix:         %{_configdir}
Prefix:         %{_initrddir}}
%{?files_netconfig:
Prefix:         %{_sysconfdir}/netconfig.d}
%{?files_sock2path:
Prefix:         %{_sysconfdir}/sock2path.d}
%{?files_snmpmods:
Prefix:         %{_snmpconfdir}}
%{?files_oldmods:
Prefix:         %{_modutildir}}
%{?files_testscripts:
Prefix:         %{_pkglibexecdir}}
%{?files_sendpr:
Prefix:         %{_pkglibexecdir}}
%{?files_docfiles:
Prefix:         %{_docdir}}
%{?files_infofiles:
Prefix:         %{_infodir}}
%{?files_pdffiles:
Prefix:         %{_pdfdir}}
%{?files_htmlfiles:
Prefix:         %{_htmldir}}
%{?files_manpages:
Prefix:         %{_mandir}}

#Prereq:         /sbin/install-info

Conflicts:      texinfo < 3.11

Obsoletes:      %{name}-mib
Obsoletes:      %{name}-mibs
Obsoletes:      %{name}-init
Obsoletes:      %{name}-inits
Obsoletes:      %{name}-dev
Obsoletes:      %{name}-devs
Obsoletes:      %{name}-test
Obsoletes:      %{name}-doc
Obsoletes:      %{name}-docs
%if %{NEED_streams}
Obsoletes:      %{_obsopkg}-mib
Obsoletes:      %{_obsopkg}-mibs
Obsoletes:      %{_obsopkg}-init
Obsoletes:      %{_obsopkg}-inits
Obsoletes:      %{_obsopkg}-dev
Obsoletes:      %{_obsopkg}-devs
Obsoletes:      %{_obsopkg}-test
Obsoletes:      %{_obsopkg}-doc
Obsoletes:      %{_obsopkg}-docs
%endif

%if %{USE_makedev}
Requires:       dev >= 3.3
%endif
Requires:       %{name}-lib = %{epoch}:%{version}-%{rpmrelease}
Requires:       %{_virtpkg} = %{epoch}:%{version}-%{rpmrelease}
Requires:       %{corevirt} >= @VERSION@
%{?need_streams:
Requires:       %{virtual}}
%{?need_compat:
Requires:       strcompat}
%{?need_xns:
Requires:       strxns}
%{?need_xnet:
Requires:       strxnet}
%{?need_nsl:
Requires:       strnsl}
%{?need_sock:
Requires:       strsock}
%{?need_inet:
Requires:       strinet}
%{?need_sctp:
Requires:       strsctp}
%{?need_chan:
Requires:       strchan}
%{?need_x25:
Requires:       strx25}
%{?need_iso:
Requires:       striso}
%{?need_isdn:
Requires:       strisdn}
%{?need_ss7:
Requires:       strss7}
%{?need_sigtran:
Requires:       sigtran}

Conflicts:      %{_confpkg}

Provides:       %{name} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name} = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{_virtpkg} = %{epoch}:%{version}-%{fullrelease}
Provides:       %{_virtpkg} = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{_virtpkg} = %{epoch}:%{version}-%{rpmrelease}

# ---------------------------------------------------------------------------
%description
%{descripline}
The %{name} package includes kernel modules, STREAMS
drivers, modules, libraries, utilities, test programs, daemons,
and development environment for the development and execution of
%{title} drivers, components
and applications for the STREAMS environment.
This distribution is currently applicable to 2.4 and 2.6 kernels
and is validated for ix86, x86_64, ppc and ppc64 architectures,
but should build and install well for other architectures.
This package includes the following binary packages:

 - %{name}
   -- docs, man pages, manual, info files, devices, init
      scripts, configs, mibs, test utils.
 - %{name}-lib
   -- shared libraries and utilities.
 - %{corevirt}
   -- kernel modules.
 - %{name}-devel
   -- headers, static libraries, source, debuginfo.
 - %{infovirt}
   -- kernel module info and debug info.

The %{name} binary package provides documentation, device
definitions, Sys V init scripts and configuration files, SNMP
MIB definitions, and test suites.

Documentation includes text, html, info and pdf (texinfo)
documentation and manuals for the development of applications,
modules and drivers, as well as the installation and reference
manual.  Also included are extensive manual pages for the entire
package, including manual pages for commands, administrative
utilities, user interfaces, and kernel functions.

Device definitions are necessary to run applications programs
and utilities.  On older systems, this binary creates the
devices themselves.  On newer systems, this binary package
includes the executable for creating devices from init scripts.
Init scripts load kernel modules, create devices, and apply
system configuration customizations at boot.

SNMP MIB defintions for managing the package with external SNMP
management tools.  Autotest validation testsuites are used for
validating and troubleshooting.  Also included is the send-pr
script for generating and submitting problem reports to
@PACKAGE_BUGREPORT@.
%{descriptail}

%prep
# ---------------------------------------------------------------------------

%setup -q -n %{name}-%{version}

%build
# ---------------------------------------------------------------------------

preferred_cflags="%{optflags}"

%ifarch %ix86
preferred_cflags="$preferred_cflags -D__USE_STRING_INLINES -fstrict-aliasing"
%endif

%ifarch sparc
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparcv9
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparc64
preferred_cflags="$preferred_cflags -mvis -fcall-used-g7"
%endif

%ifnarch ia64 s390 s390x ppc ppciseries ppc64
if test "`gcc --version`" != '2.95.3' ; then
preferred_cflags="$preferred_cflags -freorder-blocks"
fi
%endif

%define cache_file %{_builddir}/%{_target_platform}-%{kernel_version}-config.cache
%define csite_file %{_builddir}/%{_target_platform}-config.site
%define mpost_file %{_builddir}/%{_target_platform}-%{kernel_version}-modpost.cache

%define enable()  %(echo "%1" | sed -e 's|^--with-|--enable-|')%{nil}
%define disable() %(echo "%1" | sed -e 's|^--without-|--disable-|')%{nil}

./configure \
    ${CC+CC="${CC}"} \
    CFLAGS="${CFLAGS:-$preferred_cflags}" \
    ${LDFLAGS+LDFLAGS="${LDFLAGS}"} \
    ${CPPFLAGS+CPPFLAGS="${CPPFLAGS}"} \
    ${CPP+CPP="${CPP}"} \
    ${CXX+CXX="${CXX:-$CC}"} \
    ${CXX-${CC+CXX="$CC"}} \
    CXXFLAGS="${CXXFLAGS:-$preferred_cflags}" \
    ${CXXCPP+CXXCPP="${CXXCPP:-$CPP}"} \
    ${CXXCPP-${CPP+CXXCPP="$CPP"}} \
    CONFIG_SITE="%{csite_file}" \
    MODPOST_CACHE="%{mpost_file}" \
    --cache-file="%{cache_file}" \
%ifnarch noarch
    --host=%{_target_platform} \
%endif
    --prefix=%{_prefix} \
    --exec-prefix=%{_exec_prefix} \
    --bindir=%{_bindir} \
    --sbindir=%{_sbindir} \
    --sysconfdir=%{_sysconfdir} \
    --datadir=%{_datadir} \
    --includedir=%{_includedir} \
    --libdir=%{_libdir} \
    --libexecdir=%{_libexecdir} \
    --localstatedir=%{_localstatedir} \
    --sharedstatedir=%{_sharedstatedir} \
    --mandir=%{_mandir} \
    --infodir=%{_infodir} \
    --datarootdir=%{_datarootdir} \
    --docdir=%{_docdir} \
    --htmldir=%{_htmldir} \
    --dvidir=%{_dvidir} \
    --pdfdir=%{_pdfdir} \
    --psdir=%{_psdir} \
    --localedir=%{_localedir} \
    --disable-maintainer-mode \
    --disable-dependency-tracking \
    --with-gnu-ld \
    --with-k-release=%{kernel_version} \
    --with-k-modules=%{_kmoduledir} \
    --with-base-major=%{majbase} \
    %{?_with_pkg_epoch:          '%_with_pkg_epoch'} \
    %{?_without_pkg_epoch:       '%_without_pkg_epoch'} \
    %{?_with_pkg_release:        '%_with_pkg_release'} \
    %{?_without_pkg_release:     '%_without_pkg_release'} \
    %{?_with_pkg_patchlevel:     '%_with_pkg_patchlevel'} \
    %{?_without_pkg_patchlevel:  '%_without_pkg_patchlevel'} \
    %{?_with_rpm_epoch:          '%_with_rpm_epoch'} \
    %{?_without_rpm_epoch:       '%_without_rpm_epoch'} \
    %{?_with_rpm_release:        '%_with_rpm_release'} \
    %{?_without_rpm_release:     '%_without_rpm_release'} \
    %{?_with_rpm_extra:          '%_with_rpm_extra'} \
    %{?_without_rpm_extra:       '%_without_rpm_extra'} \
    %{?_with_deb_epoch:          '%_with_deb_epoch'} \
    %{?_without_deb_epoch:       '%_without_deb_epoch'} \
    %{?_with_deb_release:        '%_with_deb_release'} \
    %{?_without_deb_release:     '%_without_deb_release'} \
    %{?_with_arch:               '%enable %_with_arch'} \
    %{?_without_arch:            '%disable %_without_arch'} \
    %{?_with_indep:              '%enable %_with_indep'} \
    %{?_without_indep:           '%disable %_without_indep'} \
    %{?_with_checks:             '%enable %_with_checks'} \
    %{?_without_checks:          '%disable %_without_checks'} \
    %{?_with_autotest:           '%enable %_with_autotest'} \
    %{?_without_autotest:        '%disable %_without_autotest'} \
    %{?_with_cooked_manpages:    '%_with_cooked_manpages'} \
    %{?_without_cooked_manpages: '%_without_cooked_manpages'} \
    %{?_with_public:             '%enable %_with_public'} \
    %{?_without_public:          '%disable %_without_public'} \
    %{?_with_k_package:          '%enable %_with_k_package'} \
    %{?_without_k_package:       '%disable %_without_k_package'} \
    %{?_with_k_optimize:         '%_with_k_optimize'} \
    %{?_with_k_debug:            '%enable %_with_k_debug'} \
    %{?_without_k_debug:         '%disable %_without_k_debug'} \
    %{?_with_k_test:             '%enable %_with_k_test'} \
    %{?_without_k_test:          '%disable %_without_k_test'} \
    %{?_with_k_safe:             '%enable %_with_k_safe'} \
    %{?_without_k_safe:          '%disable %_without_k_safe'} \
    %{?_with_k_inline:           '%enable %_with_k_inline'} \
    %{?_without_k_inline:        '%disable %_without_k_inline'} \
    %{?_with_devfs:              '%enable %_with_devfs'} \
    %{?_without_devfs:           '%disable %_without_devfs'} \
    %{?_with_devel:              '%enable %_with_devel'} \
    %{?_without_devel:           '%disable %_without_devel'} \
    %{?_with_tools:              '%enable %_with_tools'} \
    %{?_without_tools:           '%disable %_without_tools'} \
    %{?_with_snmp_agent:         '%_with_snmp_agent'} \
    %{?_without_snmp_agent:      '%_without_snmp_agent'} \
    %{?_with_modules:            '%enable %_with_modules'} \
    %{?_without_modules:         '%disable %_without_modules'} \
    %{expand: %config_options} \
    || { rm -f %{cache_file} ; exit 1 ; }

make
%{?files_pdffiles: make pdf}
%{?files_htmlfiles:make html}
make check

%install
# ---------------------------------------------------------------------------

# in case it was not cleaned
[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot}

# if we are going to create debug packages, we need to install unstripped
# binaries; otherwise use libtoolized install-strip to strip binaries, modules,
# shared and static libraries.
make DESTDIR="%{buildroot}" DOCDIR="%{_docdir}" \
    %{!?_enable_debug_packages: install-strip} \
    %{?_enable_debug_packages: install} \
    %{?files_pdffiles: install-pdf} \
    %{?files_htmlfiles: install-html}

# copy out our devices list
# cp -pf %{mybuilddir}/%{makedev} .

# get the installed info directory out of the build root
[ -e "%{buildroot}/%{_infodir}/dir" ] && rm -f "%{buildroot}/%{_infodir}/dir"

function package_source() {
# remove include2 symbolic link
    rm -fr include2
# punch rpm release to Custom
    echo '.Custom.1'  > .rpmextra
# create configured source directory for source package
    mkdir -p %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# tar and move the sources for source release
    tar cf - . | tar xf - -C %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# clean out binaries and auxilliary files
    ( cd %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease} ; make mostlyclean )
# create symbolic link
    ( cd %{buildroot}%{_usrsrc} ; ln -sf %{name}-%{version}-%{fullrelease} %{name} )
}

%if %{FILES_sourcefiles}
package_source
%endif

%if %{HAVE_manrefs}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{base}.refs"
#export EXCLUDE_FROM_COMPRESS
%endif
%if %{HAVE_manmacros}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{base}.macros"
#export EXCLUDE_FROM_COMPRESS
%endif

# stupid suse check compresses everything (including our macro files)
#{?suse_check: %{expand: %%define suse_check echo "SuSE Check skipped"}}

%clean
# ---------------------------------------------------------------------------

[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot}

%pre
# ---------------------------------------------------------------------------
arg="$1"
%if %{HAVE_modules}
function remove_depmods() {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
%endif
# This is an initial installation of the init subpackage.  We need to check for non-rpm
# installations on the host and remove any entries that might later conflict with our entries.  We
# treat every fresh installation like an upgrade from non-deb/rpm install.
if [ $arg = 1 ] ; then : # fresh install
%if %{HAVE_modules}
    # When performing a fresh install we want to go looking for non-rpm installations of LiS or
    # STREAMS or supplementary packages and perform what would otherwise have been the preun or
    # postun actions.
    list="%{modules}" ; modl_mods=
    for dir in %{_kmoduledir}/../* ; do
        [ -d $dir ] || continue
        for m in `find $dir \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
                b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
                case " $list " in (*" $b "*) ;; (*) continue ;; esac
                echo "$m"
                modl_mods="${modl_mods:+$modl_mods }$m"
        done
        if [ -n "$modl_mods" -a -f $dir/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)     dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < $dir/modules.dep
            eval "$xtrace"
        fi
        conf_old=%_sysconfdir/modules.conf
        if [ -f $conf_old ] ; then
            conf_new=%_tmppath/modules.conf.new.$$
            conf_tmp=%_tmppath/modules.conf.tmp.$$
            cp -f -- $conf_old $conf_new
            # Unfortunately davem starting copying our install procedure, so we need to root out all
            # kinds of things from the modules.conf file, all prune statements, any if include
            # statements
            for suffix in %name %{nonrpmmods} ; do
                # This the old style /BEGIN LiS/,/END LiS/ enclosure in the modules.conf file.
                if ( grep -q -- "BEGIN $suffix" $conf_new && grep -q -- "END $suffix" $conf_new ) 2>/dev/null ; then
                    sed -e '\|BEGIN '$suffix'|,\|END '$suffix'|d'            $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer technique with a prune and an if statement in the modules.conf
                # file that was also used by davem in LiS-2.18.0.
                if [ -f $dir/modules.$suffix ] ; then
                    rm -f -- $dir/modules.$suffix
                    sed -e '\|^prune[[:space:]].*modules.'$suffix'|d'        $conf_new > $conf_tmp
                    sed -e '\|^if[[:space:]].*modules.'$suffix'|,\|^endif|d' $conf_tmp > $conf_new
                    sed -e '\|^include[[:space:]].*modules.'$suffix'|d'      $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer latest technique with only an include statement in modules.conf
                # and a modules.conf fragment in the debian update-modules directory _modutildir
                # that includes the prune and if statements.  That works both for RH-style and
                # Debian-style modules.conf.
                if [ -f %_modutildir/$suffix ] ; then
                    rm -f -- %_modutildir/$suffix
                    sed -e '\|^include[[:space:]].*%_modutildir/'$suffix'|d' $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
            done
            chmod --reference=$conf_old -- $conf_new
            cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
            rm -f -- $conf_new
        fi
    done
%endif
%if %{HAVE_oldmods}
    prel_old=%_sysconfdir/modules
%endif
%if %{HAVE_newmods}
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{HAVE_modules}
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        sed -e '\|^[[:space:]]*streams|d' $prel_new > $prel_tmp
        mv -f -- $prel_tmp $prel_new
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{HAVE_initscripts}
    # Fresh install, go looking for non-rpm initscripts and remove them.
    list="%{initfiles}" ; for i in $list %{nonrpminit} ; do
        if [ -f %_initrddir/$i ] ; then
            # Find the best working init script removal tool
            [ -x /sbin/insserv             ] && /sbin/insserv -r          $i 2>&1 && continue
            [ -x /sbin/chkconfig           ] && /sbin/chkconfig --del     $i 2>&1 && continue
            [ -x /usr/lib/lsb/remove_initd ] && /usr/lib/lsb/remove_initd $i 2>&1 && continue
        fi
    done
%endif
%if %{HAVE_modules}
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
%endif
%if %{NEED_streams}
%else
%if %{HAVE_manpages}
    # Old non-rpm distro puts some man pages in the wrong place, clean them out.
    if [ -f /usr/man/man3/fattach.3 ] ; then
        rm -f /usr/man/man3/fattach.3 2>/dev/null
        rm -f /usr/man/man3/detach.3 2>/dev/null
        rm -f /usr/man/man3/isastream.3 2>/dev/null
        rmdir -p /usr/man/man3 2>/dev/null || :
        rm -f /usr/man/man8/fattach.8 2>/dev/null
        rm -f /usr/man/man8/fdetach.8 2>/dev/null
        rmdir -p /usr/man/man8 2>/dev/null || :
        rm -f /usr/man/man9/connld.9 2>/dev/null
        rm -f /usr/man/man9/fifo.9 2>/dev/null
        rm -f /usr/man/man9/pipemod.9 2>/dev/null
        rmdir -p /usr/man/man9 2>/dev/null || :
        rmdir -p /usr/man 2>/dev/null || :
    fi
%endif
%endif
fi
if [ $arg = 2 ] ; then : # upgrade
    # Because we are doing an upgrade, the preun and postun scriplets for the old rpm are going to
    # be called.  Hopefully the old rpm can handle removal correctly.
fi

%post
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{USE_mknods}
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    %{mknods}
%endif
%if %{HAVE_oldmods}
    # At the end of a fresh install we need to add our lines to the modules.conf file if it exists,
    # and it is necessary to use a modconf file (2.4 and pre 2.5.48 kernel), an even if the line is
    # already there (in which case we remove the existing line).
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{HAVE_oldmods}
    prel_old=%_sysconfdir/modules
%endif
%if %{HAVE_newmods}
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{HAVE_preloads}
    # At the end of a fresh install we need to add our preloads to the modules or modprobe.preload
    # file, if it exists, and is necessary, and even if the lines are already there (in which case
    # we remove the existing line.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{HAVE_netconfig}
    # At the end of a fresh install we need to rebuild the netconfig database, but only if the
    # netconfig database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{HAVE_sock2path}
    # At the end of a fresh install we need to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{HAVE_initscripts}
    # This is the end of a fresh install, add init scripts if we can
    list="%{initfiles}" ; for i in $list ; do
        # Find the best working init script installation tool
        [ -x /sbin/insserv              ] && /sbin/insserv              $i 2>&1 && continue
        [ -x /sbin/chkconfig            ] && /sbin/chkconfig --add      $i 2>&1 && continue
        [ -x /usr/lib/lsb/install_initd ] && /usr/lib/lsb/install_initd $i 2>&1 && continue
    done
%endif
%if %{HAVE_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{infofiles} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.gz
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.bz2
            fi
        done
    fi
%endif
%if %{HAVE_manpages}
    if [ -x /usr/sbin/makewhatis ] ; then
        LANGUAGE= LANG= /usr/sbin/makewhatis -v -u %{_mandir} 2>&1 || :
    fi
%endif
%if %{HAVE_manrefs}
    [ ! -f %{_mandir}/%{base}.refs.gz    ] || gunzip  %{_mandir}/%{base}.refs.gz
    [ ! -f %{_mandir}/%{base}.refs.bz2   ] || bunzip2 %{_mandir}/%{base}.refs.bz2
%endif
%if %{HAVE_manmacros}
    [ ! -f %{_mandir}/%{base}.macros.gz  ] || gunzip  %{_mandir}/%{base}.macros.gz
    [ ! -f %{_mandir}/%{base}.macros.bz2 ] || bunzip2 %{_mandir}/%{base}.macros.bz2
%endif
fi
if [ $1 = 2 ] ; then : # upgrade
%if %{HAVE_oldmods}
    # At the end of an upgrade we place our new lines in the modules.conf file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( cat $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{HAVE_oldmods}
    prel_old=%_sysconfdir/modules
%endif
%if %{HAVE_newmods}
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{HAVE_preloads}
    # At the end of an upgrade we place just our preloads in the modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            ( cat $repl_new ; echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{HAVE_netconfig}
    # At the end of an upgrade we need to rebuild the netconfig database, but only if the netconfig
    # database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{HAVE_sock2path}
    # At the end of an upgrade we need to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{HAVE_initscripts}
    # This is the end of an upgrade, add init scripts if we can
    list="%{initfiles}" ; for i in $list ; do
        # Find the best working init script installation tool
        [ -x /sbin/insserv              ] && /sbin/insserv              $i 2>&1 && continue
        [ -x /sbin/chkconfig            ] && /sbin/chkconfig --add      $i 2>&1 && continue
        [ -x /usr/lib/lsb/install_initd ] && /usr/lib/lsb/install_initd $i 2>&1 && continue
    done
%endif
fi

%preun
# ---------------------------------------------------------------------------
if [ $1 = 0 ] ; then : # final removal
%if %{USE_rmnods}
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    %{rmnods}
%endif
%if %{HAVE_oldmods}
    # When we are going away altogether we want to remove any lines whatsoever from the modules.conf
    # file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{HAVE_oldmods}
    prel_old=%_sysconfdir/modules
%endif
%if %{HAVE_newmods}
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{HAVE_preloads}
    # When we are going away altogether we want to remove any of our preloads whatsoever from the
    # modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $repl_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{HAVE_netconfig}
    # After going away altogether, we want to rebuild the netconfig database, but only if the
    # netconfig database was built by use or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{HAVE_sock2path}
    # After going away altogether, we want to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{HAVE_initscripts}
    # Uninstalling for good, remove init scripts if we can
    list="%{initfiles}" ; for i in $list ; do
        if [ -f %_initrddir/$i ] ; then
            # rpm is not too good about the order of removal
            /sbin/service $i stop 2>&1 || %_initrddir/$i stop 2>&1 || :
            # Find the best working init script removal tool
            [ -x /sbin/insserv             ] && /sbin/insserv -r          $i 2>&1 && continue
            [ -x /sbin/chkconfig           ] && /sbin/chkconfig --del     $i 2>&1 && continue
            [ -x /usr/lib/lsb/remove_initd ] && /usr/lib/lsb/remove_initd $i 2>&1 && continue
        fi
    done
%endif
%if %{HAVE_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{infofiles} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2
            fi
        done
    fi
%endif
%if %{HAVE_manrefs}
    rm -f -- %{_mandir}/%{base}.refs
%endif
%if %{HAVE_manmacros}
    rm -f -- %{_mandir}/%{base}.macros
%endif
fi
if [ $1 = 1 ] ; then : # upgrade
%if %{HAVE_oldmods}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules.conf file that we placed in them in the post scriptlet.  We only adjust our line and
    # leave any lines added by the new package post scriptlet.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        # This groovy sed script just pulls out the first matching line and leaves the rest
        # untouched.
        sed -e '
\|^include[[:space:]].*%_modutildir/%base|!b
N
s|^include[[:space:]].*%_modutildir/%base.*\
||
: loop
n
b loop' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{HAVE_oldmods}
    prel_old=%_sysconfdir/modules
%endif
%if %{HAVE_newmods}
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{HAVE_preloads}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules or modprobe.preloads file that we placed in them in the post scriptlet.  We only
    # adjust our lines and leave any lines added by the new package post scriptlet.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="%{preloads}" ; for m in $mods ; do
            # This groovy sed script just pulls out the first matching line and leaves the rest
            # untouched.
            sed -e '
\|^[[:space:]].*'"$m"'[[:space:]]*$|!b
N
s|^[[:space:]].*'"$m"'[[:space:]]*\
||
: loop
n
b loop' $prel_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{HAVE_netconfig}
    # After going doing an upgrade we want to rebuild the netconfig database, but only if the
    # netconfig database was built by us or does not exist.
    t="%_sysconfdir/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
%endif
%if %{HAVE_sock2path}
    # After going doing an upgrade we want to rebuild the sock2path database.
    t="%_sysconfdir/sock2path"
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
%endif
%if %{HAVE_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{infofiles} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2
            fi
        done
    fi
%endif
%if %{HAVE_manrefs}
    rm -f -- %{_mandir}/%{base}.refs
%endif
%if %{HAVE_manmacros}
    rm -f -- %{_mandir}/%{base}.macros
%endif
fi

%postun
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
%if %{HAVE_manpages}
    if [ -x /usr/sbin/makewhatis ] ; then
        LANGUAGE= LANG= /usr/sbin/makewhatis -v -u %{_mandir} 2>&1 || :
    fi
%endif
fi

%if %{PACKAGE_base}
%files %{?devicesfile:%{devicesfile}}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_docfiles:
%{?files_locales:
%doc ABOUT-NLS}
%doc AUTHORS BUGS ChangeLog COPYING INSTALL INSTALL-%{name} LSM MANUAL NEWS PROBLEMS
%doc README README-alpha README-cvs README-make THANKS TODO
%doc %{name}-%{version}.lsm}
#{?files_manual:
#doc %{manual}}
#{?files_specs:
#doc %{specs}}
#{?files_drafts:
#doc %{drafts}}
#{?files_papers:
#doc %{papers}}
#{?files_projects:
#doc %{projects}}
%{?files_snmpconf:
%config(noreplace) %{_snmpconfdir}/*}
%{?files_configfiles:
%config(noreplace) %{_sysconfdir}/%{conffiles}}
%{?files_netconfig:
%config(noreplace) %{_sysconfdir}/netconfig.xnsl}
%{?files_netconfig:
%config(noreplace) %{_sysconfdir}/netconfig.d/%{netconfig}}
%{?files_sock2path:
%config(noreplace) %{_sysconfdir}/sock2path.d/%{sock2path}}
%{?files_oldmods:
%config(noreplace) %{_modutildir}/*}
%{?files_initscripts:
%config(noreplace) %{_configdir}/*}
%{?files_initscripts:
%{_initrddir}/*}
%{?files_mibfiles:
%{_snmpmibdir}/*}
%{?files_testscripts:
%{_pkglibexecdir}/atlocal
%{_pkglibexecdir}/testsuite*}
%{?files_sendpr:
%{_pkglibexecdir}/send-pr
%{_pkglibexecdir}/send-pr.config}
%{?files_pdffiles:
%{_pdfdir}/*.pdf}
%{?files_htmlfiles:
%{_htmldir}/*.html}
%{?files_pngfiles:
%{_htmldir}/*.png}
%{?files_infofiles:
%{_infodir}/*.info*}
%{?files_manrefs:
%{_mandir}/%{base}.refs*}
%{?files_manmacros:
%{_mandir}/%{base}.macros*}
%{?files_manpages:
%{_mandir}/man*/*}
%endif

# ===========================================================================
%package lib

Summary:        %{title} run-time libraries and utilities.
Group:          System Environment/Libraries
Version:        @VERSION@
%{?_xpm:
Icon:           %_xpm}
%{?_gif:
Icon:           %_gif}
Autoreq:        true
Autoprov:       true

%{?files_binfiles:
Prefix:         %{_bindir}}
%{?files_sbinfiles:
Prefix:         %{_sbindir}}
%{?files_libraries:
Prefix:         %{_libdir}}
%{?files_lib32compat:
Prefix:         %{_lib32dir}}
%{?files_testfiles:
Prefix:         %{_pkglibexecdir}
%{?files_lib32compat:
Prefix: %{_pkglibexec32dir}}}
%{?files_snmpmods:
Prefix:         %{_snmpdlmoddir}
%{?files_lib32compat:
Prefix:         %{_snmpdlmod32dir}}}
%{?files_locales:
Prefix:         %{_localedir}}

Obsoletes:      %{name}-libs
Obsoletes:      %{name}-util
Obsoletes:      %{name}-utils
%if %{NEED_streams}
Obsoletes:      %{_obsopkg}-libs
Obsoletes:      %{_obsopkg}-util
Obsoletes:      %{_obsopkg}-utils
%endif

Prereq:         /sbin/ldconfig

Requires:       %{_virtpkg}
%{?need_streams:
Requires:       %{virtual}-lib}
%{?need_compat:
Requires:       strcompat-lib}
%{?need_xns:
Requires:       strxns-lib}
%{?need_xnet:
Requires:       strxnet-lib}
%{?need_nsl:
Requires:       strnsl-lib}
%{?need_sock:
Requires:       strsock-lib}
%{?need_inet:
Requires:       strinet-lib}
%{?need_sctp:
Requires:       strsctp-lib}
%{?need_chan:
Requires:       strchan-lib}
%{?need_x25:
Requires:       strx25-lib}
%{?need_iso:
Requires:       striso-lib}
%{?need_isdn:
Requires:       strisdn-lib}
%{?need_ss7:
Requires:       strss7-lib}
%{?need_sigtran:
Requires:       sigtran-lib}

Provides:       %{name}-lib = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-lib = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-lib = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{_virtpkg}-lib = %{epoch}:%{version}-%{fullrelease}
Provides:       %{_virtpkg}-lib = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{_virtpkg}-lib = %{epoch}:%{version}-%{rpmrelease}

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description lib
%{descripline}
The %{name}-lib binary package contains the run-time (shared
object) libraries necessary to run applications programs and
utilities developed for %{title}.
Also included are the libtool .la files describing the shared
object libraries.  The binary package also provides
administrative and configuration test utilities and commands
associated with the %{title}
package.  Note that these utilities are needed for running the
validation test suites contained in the %{name} binary package.
%{descriptail}

%pre lib
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{HAVE_libraries}
    # See if there are any libraries hanging around from a non-rpm install.  If there are, just
    # delete them.
    libs="%{libraries}" ; for lib in $libs ; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            # Old libraries hanging around, delete them.
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs
        fi
    done
%endif
%if %{HAVE_tools}
    # This is a fresh install, look for old non-rpm tools.
    tools="%{tools}" ; for tool in $tools ; do
        location="`which $tool 2>/dev/null`"
        while [ -n "$location" -a -x "$location" ] ; do
            eval "rm -f $location"
            location="`which $tool 2>/dev/null`"
            while [ -n "$location" -a -x "$location" ] ; do
                eval "rm -f $location"
                location="`which $tool 2>/dev/null`"
            done
        done
    done
%endif
fi

%post lib
# ---------------------------------------------------------------------------
%if %{HAVE_libraries}
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    # After a fresh install or upgrade, do a load config.
    /sbin/ldconfig
fi
%endif

%postun lib
# ---------------------------------------------------------------------------
%if %{HAVE_libraries}
if [ $1 = 0 -o $1 = 1 ] ; then
    # Whether complete removal or upgrade, do a load config.
    /sbin/ldconfig
fi
%endif

%if %{PACKAGE_lib}
%files lib
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_binfiles:
%{_bindir}/*}
%{?files_sbinfiles:
%{_sbindir}/*}
%{?files_libraries:
%{_libdir}/*.so*}
%{?files_libraries:
%{_libdir}/*.la}
%{?files_lib32compat:
%{_lib32dir}/*.so*}
%{?files_lib32compat:
%{_lib32dir}/*.la}
%{?files_locales:
%{_localedir}/*}
%{?files_gdmofiles:
%{_pkglibexecdir}/gdmo}
%{?files_testfiles:
%{_pkglibexecdir}/%{testfiles}
%{?files_lib32compat:
%{_pkglibexec32dir}/%{testfiles}}}
%{?files_snmpmods:
%{_snmpdlmoddir}/*}
%endif

# ===========================================================================
%package devel

Summary:        %{title} configured headers, static libraries and debug info.
Group:          Development/System
Version:        @VERSION@
%{?_xpm:
Icon:           %_xpm}
%{?_gif:
Icon:           %_gif}
Autoreq:        true
Autoprov:       true

%{?files_includes:
Prefix:         %{_includedir}/%{name}}
%{?files_libstatic:
Prefix:         %{_libdir}
%{?files_lib32static:
Prefix:         %{_lib32dir}}}

#Prereq:         /sbin/install-info

Conflicts:      texinfo < 3.11
Conflicts:      %{_confpkg}-devel

Requires:       %{name} = %{epoch}:%{version}-%{rpmrelease}
Requires:       %{infovirt} >= @VERSION@
%{?need_streams:
Requires:       %{virtual}-devel}
%{?need_compat:
Requires:       strcompat-devel}
%{?need_xns:
Requires:       strxns-devel}
%{?need_xnet:
Requires:       strxnet-devel}
%{?need_nsl:
Requires:       strnsl-devel}
%{?need_sock:
Requires:       strsock-devel}
%{?need_inet:
Requires:       strinet-devel}
%{?need_sctp:
Requires:       strsctp-devel}
%{?need_chan:
Requires:       strchan-devel}
%{?need_x25:
Requires:       strx25-devel}
%{?need_iso:
Requires:       striso-devel}
%{?need_isdn:
Requires:       strisdn-devel}
%{?need_ss7:
Requires:       strss7-devel}
%{?need_sigtran:
Requires:       sigtran-devel}

Provides:       %{name}-devel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-devel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{name}-devel = %{epoch}:%{version}-%{rpmrelease}
Provides:       %{_virtpkg}-devel = %{epoch}:%{version}-%{fullrelease}
Provides:       %{_virtpkg}-devel = %{epoch}:%{version}-%{fullrelease2}
Provides:       %{_virtpkg}-devel = %{epoch}:%{version}-%{rpmrelease}

Obsoletes:      %{name}-doc
Obsoletes:      %{name}-docs
%if %{NEED_streams}
Obsoletes:      %{_obsopkg}-doc
Obsoletes:      %{_obsopkg}-docs
%endif

Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description devel
%{descripline}
The %{name}-devel binary package contains library archives
for static compilation, and headers files to develop
%{title} applications, modules and drivers.
This also includes the header files and static libraries required
to compile %{title} applications programs.
This package provides debug information for package %{name}.
Debug information is useful when developing applications that
use this package or when debugging this package.
%{HAVE_source:
The package optionally contains the source code necessary for
building the %{name} release.  It also includes the autoconf
configuration utilities necessary to create and distribute this
rpm.  To develop on the package, it would be better to use the
tarball or source rpm release.}
%{descriptail}

%if %{PACKAGE_devel}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_includes:
%dir %{_includedir}/%{name}
%{_includedir}/%{name}/*}
%{?files_libstatic:
%{_libdir}/*.a
%{?files_lib32static:
%{_lib32dir}/*.a}}
%{?files_debugfiles:
%{?files_binaries:
%{_usrsrc}/debug
%{?_lib32dir:
%{_lib32dir}/debug}
%{!?_lib32dir:
%{_libdir}/debug}}}
%{?files_sourcefiles:
%dir %{_usrsrc}/%{name}-%{version}-%{fullrelease}}
%{?files_sourcefiles:
%{_usrsrc}/%{name}}
%{?files_sourcefiles:
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/*}
%{?files_sourcefiles:
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/.[^.]*}
%endif

# ===========================================================================
%package -n %{corename}

Summary:        %{title} kernel modules.
Group:          System Environment/Kernel
%{?_xpm:
Icon:           %_xpm}
%{?_gif:
Icon:           %_gif}
Autoreq:        true
Autoprov:       true

%{?files_modules:
Prefix:         %{_kmoduledir}}

Conflicts:      %{coreconf}

Obsoletes:      %{name}-core < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{name}-%{core_name} < %{epoch}:%{version}-%{rpmrelease}
%if %{NEED_streams}
Obsoletes:      %{_obsopkg}-core < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{_obsopkg}-%{core_name} < %{epoch}:%{version}-%{rpmrelease}
%endif

#Prereq:         /sbin/depmod
#Prereq:         /sbin/lsmod
#Prereq:         /sbin/insmod
#Prereq:         /sbin/modprobe
# SuSE puts lsof in /usr/bin
Prereq:         lsof

Requires:       %(LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "%{NAME} = %{VERSION}-%{RELEASE}\\n")

Requires:       %{name} = %{epoch}:@VERSION@-%{rpmrelease}
%{?need_streams:
Requires:       %{_streams}-%{_kversion}}
%{?need_compat:
Requires:       %{coreroot strcompat}}
%{?need_xns:
Requires:       %{coreroot strxns}}
%{?need_xnet:
Requires:       %{coreroot strxnet}}
%{?need_nsl:
#equires:       %{coreroot strnsl}}
%{?need_sock:
#equires:       %{coreroot strsock}}
%{?need_inet:
Requires:       %{coreroot strinet}}
%{?need_sctp:
Requires:       %{coreroot strsctp}}
%{?need_chan:
Requires:       %{coreroot strchan}}
%{?need_x25:
Requires:       %{coreroot strx25}}
%{?need_iso:
Requires:       %{coreroot striso}}
%{?need_isdn:
Requires:       %{coreroot strisdn}}
%{?need_ss7:
Requires:       %{coreroot strss7}}
%{?need_sigtran:
Requires:       %{coreroot sigtran}}

Provides:       kernel-modules = %{_kversion}
Provides:       %{corename} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{corename} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{corename} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{corevirt} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{corevirt} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{corevirt} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       kernel-module-%{name}%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{name}-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{_strmpkg}-%{_kversion} = %{epoch}:@VERSION@-%{fullrelease}
Provides:       %{_strmpkg}-%{_kversion} = %{epoch}:@VERSION@-%{fullrelease2}
Provides:       %{_strmpkg}-%{_kversion} = %{epoch}:@VERSION@-%{rpmrelease}

Version:        %{kmodules_version}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description -n %{corename}
%{descripline}
The %{corename} binary package contains
the kernel modules that provide the Linux kernel
%{stitle} drivers and modules.
This includes assorted drivers and modules for additional
%{title} components.
This binary package also includes modprobe configuration files
for the associated kernel modules.  This package is heavily tied
to the kernel for which it and dependent components were
compiled.  This package applies to kernel version
%{kernel_version} and requires dependent components compiled for
the same kernel.  If you cannot find a binary package that
matches your kernel, rebuild from the source rpm.
%{descriptail}

%if %{HAVE_modules}
%pre -n %{corename}
# ---------------------------------------------------------------------------
arg="$1"
function remove_depmods() {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
if [ $arg = 1 ] ; then : # fresh install
    # This is a fresh install of this version of kernel module.  Make sure that there are no non-rpm
    # installed kernel modules hanging around for this kernel version.
    list="%{modules}" ; modl_mods=
    if [ -d %{_kmoduledir} ] ; then
        for m in `find %{_kmoduledir} \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
                b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
                case " $list " in (*" $b "*) ;; (*) continue ;; esac
                echo "$m"
                modl_mods="${modl_mods:+$modl_mods }$m"
        done
        if [ -n "$modl_mods" -a -f %{_kmoduledir}/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)	    dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < %{_kmoduledir}/modules.dep
            eval "$xtrace"
        fi
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
fi
if [ $arg = 1 -o $arg = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # If we are upgrading and the upgrade is for the running kernel, or we are installing new on
        # the running kernel, we have to worry about previous loaded modules for the old version or
        # a non-rpm version.
        mods="%{modules}" ; for m in $mods ; do
            if ( lsmod | grep -q "^$m" ) ; then
                # Module running, kick the stack.
                modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                if ( lsmod | grep -q "^$m" ) ; then
                    fdetach -a 2>/dev/null
                    modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( lsmod | grep -q "^$m" ) ; then
                        lsof | while read -a tokens; do
                            if [ :"${tokens[4]}" = :"CHR" ]; then
                                major=`echo "${tokens[5]}" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -HUP ${tokens[1]}"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( lsmod | grep -q "^$m" ) ; then
                            echo "Cannot install or upgrade with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi
%endif

%if %{HAVE_modules}
%post -n %{corename}
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for the running
        # kernel.
        depmod -ae 2>&1 || :
%if %{HAVE_initscripts}
        # Running kernels do need init scripts run.
        list="%{initfiles}" ; for i in $list ; do
            if [ -f %_initrddir/$i ] ; then
                /sbin/service $i start 2>&1 || %_initrddir/$i start 2>&1 || :
            fi
        done
%endif
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot by depmod anyway, but
        # try one now.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
        # Non-running kernels do not need init scripts run.
    fi
fi
%endif

%if %{HAVE_modules}
%preun -n %{corename}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # We are about to uninstall for good on a running kernel then we have to worry about which
        # modules are running
%if %{HAVE_initscripts}
        # First lets try shutting down using any init script first in reverse order
        list="%{initfiles}" ; for i in $list ; do
            reverse="$i${reverse:+ $reverse}"
        done
        for i in $reverse ; do
            if [ -f %_initrddir/$i ] ; then
                /sbin/service $i stop 2>&1 || %_initrddir/$i stop 2>&1 || :
            fi
        done
%endif
        mods="%{modules}" ; for m in $mods ; do
            if ( lsmod | grep -q "^$m" ) ; then
                # modules running, kick the stack
                modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                if ( lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( lsmod | grep -q "^$m" ) ; then
                        lsof | while read -a tokens; do
                            if [ :"${tokens[4]}" = :"CHR" ]; then
                                major=`echo "${tokens[5]}" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -KILL ${tokens[1]}"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( lsmod | grep -q "^$m" ) ; then
                            echo "Cannot uninstall with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi
%endif

%if %{HAVE_modules}
%postun -n %{corename}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for.
        depmod -ae 2>&1 || :
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot but depmod anyway.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
    fi
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # One more kick at killing any loaded modules on uninstall, last stage of the upgrade on a
        # running kernel for upgrade.
        reboot='no'
        mods="%{modules}" ; for m in $mods ; do
            if ( lsmod | grep -q "^$m" ) ; then
                # Modules running, kick the stack.
                modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                if ( lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( lsmod | grep -q "^$m" ) ; then
                        insmod -ar "$m"
                        lsof | while read -a tokens; do
                            if [ :"${tokens[4]}" = :"CHR" ]; then
                                major=`echo "${tokens[5]}" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    if [ $1 = 0 ] ; then
                                        # Extreme prejudice for removal.
                                        eval "kill -KILL ${tokens[1]}"
                                    else
                                        # Try to get them to reload for upgrade.
                                        eval "kill -HUP ${tokens[1]}"
                                    fi
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        modprobe -r `lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( lsmod | grep -q "^$m" ) ; then
                            echo "Error: modules may be still loaded" >&2
                            lsmod | grep "^$m" >&2
                            reboot='yes'
                        fi
                    fi
                fi
            fi
        done
        if [ "$reboot" = 'yes' ]; then
            echo "you may have to reboot" >&2
            exit 1
        fi
    fi
fi
%endif

%if %{PACKAGE_kmod}
%files -n %{corename}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_modules:
%dir %{_kmoduledir}/%{base}
%{?files_oldmods:
%attr(644,root,root) %{_kmoduledir}/modules.%{base}}
%{?files_oldmods:
%{_kmoduledir}/%{base}/*.o*}
%{?files_newmods:
%{_kmoduledir}/%{base}/*.ko*}}
%endif

# ===========================================================================
%package -n %{infoname}

Summary:        %{title} kernel module symbol versions and debug info.
Group:          Development/Kernel
%{?_xpm:
Icon:           %_xpm}
%{?_gif:
Icon:           %_gif}
Autoreq:        true
Autoprov:       true

%{?files_modules:
Prefix:         %{_kmoduledir}}
%{?files_oldmods:
Prefix:         %{_includedir}/%{name}/%{kernel_version}}

Conflicts:      %{infoconf}

Obsoletes:      %{name}-core < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{name}-%{core_name} < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{name}-info < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{name}-%{info_name} < %{epoch}:%{version}-%{rpmrelease}
%if %{NEED_streams}
Obsoletes:      %{_obsopkg}-core < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{_obsopkg}-%{core_name} < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{_obsopkg}-info < %{epoch}:%{version}-%{rpmrelease}
Obsoletes:      %{_obsopkg}-%{info_name} < %{epoch}:%{version}-%{rpmrelease}
%endif

Requires:       %(LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "%{NAME} = %{VERSION}-%{RELEASE}\\n")

Requires:       %{name}-devel = %{epoch}:@VERSION@-%{fullrelease}
Requires:       %{corename} = %{epoch}:%{kmodules_version}-%{fullrelease}
%{?need_streams:
Requires:       %{_streams}-devel-%{_kversion}}
%{?need_compat:
Requires:       %{inforoot strcompat}}
%{?need_xns:
Requires:       %{inforoot strxns}}
%{?need_xnet:
Requires:       %{inforoot strxnet}}
#{?need_nsl:
#equires:       %{inforoot strnsl}}
#{?need_sock:
#equires:       %{inforoot strsock}}
%{?need_inet:
Requires:       %{inforoot strinet}}
%{?need_sctp:
Requires:       %{inforoot strsctp}}
%{?need_chan:
Requires:       %{inforoot strchan}}
%{?need_x25:
Requires:       %{inforoot strx25}}
%{?need_iso:
Requires:       %{inforoot striso}}
%{?need_isdn:
Requires:       %{inforoot strisdn}}
%{?need_ss7:
Requires:       %{inforoot strss7}}
%{?need_sigtran:
Requires:       %{inforoot sigtran}}

Provides:       kernel-modules = %{_kversion}
Provides:       %{infoname} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{infoname} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{infoname} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{infovirt} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{infovirt} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{infovirt} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       kernel-module-%{name}-devel%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{fullrelease2}
Provides:       %{name}-devel-kmod%{kernel_flavor} = %{epoch}:%{kmodules_version}-%{rpmrelease}
Provides:       %{_strmpkg}-devel-%{_kversion} = %{epoch}:@VERSION@-%{fullrelease}
Provides:       %{_strmpkg}-devel-%{_kversion} = %{epoch}:@VERSION@-%{fullrelease2}
Provides:       %{_strmpkg}-devel-%{_kversion} = %{epoch}:@VERSION@-%{rpmrelease}

Version:        %{kmodules_version}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description -n %{infoname}
%{descripline}
The %{infoname} binary package
contains the kernel modules symbol information for development
of additional %{_STREAMS} kernel modules against the core kernel
modules included in the %{corename} binary
package.  This package is heavily tied to the core kernel
modules and kernel for which it was compiled.  This package
applies to core kernel modules %{corename}
for kernel version %{_kversion}.
This package provides debug information for package %{name}.
Debug information is useful when developing applications that
use this package or when debugging this package.
%{descriptail}

%if %{PACKAGE_kbug}
%files -n %{infoname}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_modules:
%{?files_kdebugfiles:
%{_usrsrc}/debug
%{?_lib32dir:
%{_lib32dir}/debug/lib/modules/%{kernel_version}}
%{!?_lib32dir:
%{_libdir}/debug/lib/modules/%{kernel_version}}}
%{?files_oldmods:
%dir %{_includedir}/%{name}/%{kernel_version}
%{_includedir}/%{name}/%{kernel_version}/*}
%{_kmoduledir}/%{base}/Module*}
%endif

# ===========================================================================
%changelog
# ---------------------------------------------------------------------------
# $Log: openss7.spec.in,v $
# Revision 0.9.2.88  2008-09-28 17:00:18  brian
# - updated spec files
#

* Fri Sep 26 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.87  2008-09-26 08:48:04  brian
- sync spec files before rework

* Mon Sep 22 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.86  2008-09-22 17:37:22  brian
- build and release updates

* Sun Sep 21 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.85  2008-09-21 10:55:11  brian
- update spec files

* Sat Sep 20 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.84  2008-09-20 11:01:00  brian
- corrections to requires

* Tue Sep 16 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.83  2008-09-16 10:00:18  brian
- support autoupdating kernel modules for various distros

* Wed Sep 10 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.82  2008-09-10 20:46:08  brian
- install init scripts on fresh install

* Wed Sep 10 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.81  2008-09-10 17:44:40  brian
- correct list macro quotation

* Thu Aug 28 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.80  2008-08-28 02:38:50  brian
- updates for release

* Wed Aug 20 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.79  2008-08-20 10:26:56  brian
- updates to common files from newnet

* Sun May  4 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.78  2008-05-04 16:16:29  brian
- changes and corrections for release

* Mon Apr 28 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.77  2008-04-28 07:41:02  brian
- updates for release

* Sun Apr 13 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.76  2008-04-13 08:02:39  brian
- prepare for doc/papers

* Thu Apr 10 2008 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.75  2008-04-10 11:12:56  brian
- remove deprecated Nexusware support

* Wed Aug 15 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.74  2007/08/15 04:53:57  brian
- GPLv3 updates

* Sun Jun 24 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.73  2007/06/24 12:10:03  brian
- recognize EL4 and EL5 for kernel-develop

* Wed Jun 20 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.72  2007/06/20 09:27:12  brian
- recognize Fedora 7 kernels

* Sat May 19 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.71  2007/05/19 02:26:51  brian
- corrected array subscripting syntax error

* Sun May  6 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.70  2007/05/06 07:47:18  brian
- make GPL version obvious

* Wed Mar  7 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.69  2007/03/07 11:35:23  brian
- make source package optional

* Sun Mar  4 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.68  2007/03/04 09:59:38  brian
- updates for release, do not propagate empty flags, build improvements

* Mon Feb 12 2007 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.67  2007/02/12 16:55:44  brian
- more autoconf 2.61 support

* Fri Sep 29 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.66  2006/09/29 11:49:56  brian
- libtool library tweaks in Makefile.am
- better rpm spec handling in *.spec.in
- added AC_LIBTOOL_DLOPEN to configure.ac
- updated some copyright headers
- rationalized item in two packages
- added manual pages, drivers and modules to new strtty package

* Mon Sep 18 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.65  2006/09/18 01:23:00  brian
- added FC5 and lib32 compatibility files

* Wed Aug 16 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.64  2006/08/16 07:38:05  brian
- get kernel_source right for SuSE -smp kernel

* Fri Jul  7 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.63  2006/07/07 21:08:44  brian
- place all header files in development subpackage

* Mon May  8 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.62  2006/05/08 03:34:14  brian
- updated headers, corrected init scrip removal

* Fri Mar 24 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.61  2006/03/24 10:02:35  brian
- added send-pr to %package test description

* Fri Mar 24 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.60  2006/03/24 00:03:26  brian
- added send-pr files to distribution

* Mon Mar 20 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.59  2006/03/20 11:54:37  brian
- tied in --disable-devel flag

* Tue Mar 14 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.58  2006/03/14 21:09:46  brian
- two levels of distro specific rpm extra tags

* Fri Mar 10 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.57  2006/03/10 12:03:11  brian
- updated descriptions and headers

* Mon Feb 20 2006 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.56  2006/02/20 10:06:57  brian
- changes for 64 bit distributions

* Fri Dec 23 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.55  2005/12/23 20:28:20  brian
- use lsb initd last

* Fri Dec 23 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.54  2005/12/23 05:23:27  brian
- corrections

* Thu Dec 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.53  2005/12/22 15:16:15  brian
- different approach to compressed marco files

* Thu Dec 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.52  2005/12/22 13:51:21  brian
- tough build for RH 7.3

* Thu Dec 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.51  2005/12/22 10:26:02  brian
- a little overzealous when deleting from modules.conf and modutildir

* Thu Dec 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.50  2005/12/22 07:26:42  brian
- make command location a little more portable

* Wed Dec 21 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.49  2005/12/21 10:31:23  brian
- cleaning up dependencies and conflicts

* Wed Dec 21 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.48  2005/12/21 08:48:56  brian
- add extraversion to dependencies

* Wed Dec 21 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.47  2005/12/21 06:07:10  brian
- cleaned up versioning for RPM builds

* Mon Dec 19 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.46  2005/12/19 12:42:29  brian
- locking down for release

* Fri Dec 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.45  2005/12/16 12:13:49  brian
- build does not require texinfo

* Fri Dec 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.44  2005/12/16 09:23:59  brian
- updated to support SuSE/UL and LSB init scripts

* Wed Dec 14 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.43  2005/12/14 16:31:43  brian
- updates

* Wed Dec 14 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.42  2005/12/14 11:41:17  brian
- quiet rpm -ihv output

* Tue Dec 13 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.41  2005/12/13 13:42:12  brian
- corrected nested ifs unusable by rpm

* Sun Nov 13 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.40  2005/11/13 23:04:51  brian
- first stab at kernel-devel dependency

* Sun Nov  6 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.39  2005/11/06 10:59:02  brian
- updates

* Wed Sep 14 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.38  2005/09/14 23:40:47  brian
- bumped release numbers and change logs

* Fri Jul  8 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.37  2005/07/08 13:14:23  brian
- corrections to versioning

* Thu Jul  7 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.36  2005/07/07 20:28:27  brian
- changes for release

* Sat Jun 25 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.35  2005/06/25 07:01:47  brian
- more efficient dependency checking

* Fri Jun 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.34  2005/06/24 13:40:40  brian
- some install/erase script corrections

* Fri Jun 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.33  2005/06/24 09:00:31  brian
- init package must be installed first because it cleans
  out any non-rpm modules and other things before the first
  fresh RPM install
- this wasn't happending on 2.6 systems

* Tue May 31 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.32  2005/05/31 05:10:39  brian
- correct case on modutildir filename

* Sun May 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.31  2005/05/29 11:28:24  brian
- better approach to mostlyclean

* Sun May 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.30  2005/05/29 07:49:20  brian
- updates and corrections for SuSE 9.2 build

* Sat May 14 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.29  2005/05/14 08:36:11  brian
- copyright header correction

* Wed May 11 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.28  2005/05/11 07:58:49  brian
- add mention of 2.6 kernel support

* Sat Apr  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.27  2005/04/09 09:35:35  brian
- update spec files

* Tue Apr  5 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.26  2005/04/05 01:57:04  brian
- more robust sed

* Sat Apr  2 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.25  2005/04/02 16:24:56  brian
- more adjustments to arch indep build

* Tue Mar 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.24  2005/03/29 17:16:22  brian
- Updated lsms and added LSM to distribution.

* Mon Mar 28 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.23  2005/03/28 07:42:27  brian
- better debian build

* Thu Mar 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.22  2005/03/24 05:18:53  brian
- always include sysconfdir in util package

* Tue Mar 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.21  2005/03/22 19:44:12  brian
- do not need symbolic link in prep anymore

* Thu Mar 17 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.20  2005/03/17 11:22:33  brian
- Updated change logs.

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.19  2005/03/16 11:58:15  brian
- enhance devfs support

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.18  2005/03/16 10:48:31  brian
- straighten out devfs and get source urls correct

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.17  2005/03/16 05:46:31  brian
- correction to chkconfig arguments

* Tue Mar 15 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.16  2005/03/15 10:41:49  brian
- Updated changelog and a few inconsistencies.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.15  2005/03/09 12:14:20  brian
- Corrected problematic conditionals.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.14  2005/03/09 08:00:22  brian
- Updated revision numbering.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.13  2005/03/09 03:40:46  brian
- Major revision number changes.

* Mon Mar  7 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.12  2005/03/07 06:09:25  brian
- More spec changes for 2.6.

* Fri Feb 25 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.11  2005/02/25 10:56:39  brian
- Don't specify build architecture.

* Tue Feb 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.10  2005/02/22 08:32:02  brian
- spec changes for updated makefile fragments

* Sat Feb 19 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.9  2005/02/19 12:06:38  brian
- rpm-epoch to pkg-epoch, rpm-release to pkg-release
- proper quotation of configure options

* Tue Feb 15 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.8  2005/02/15 14:15:12  brian
- Remove link before linking.

- Revision 0.9.2.7  2005/02/07 22:22:54  brian
- Updated changelog.

* Thu Feb  3 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.6  2005/02/03 12:34:52  brian
- Spec file grand rework.

* Tue Feb  1 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.5  2005/02/01 18:58:37  brian
- Working up master build.

* Sat Jan 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.4  2005/01/29 11:23:05  brian
- Have master build working well.

* Thu Jan 27 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.3  2005/01/27 08:23:20  brian
- Remove conflicts and double files entry.

* Thu Jan 27 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.2  2005/01/27 07:20:01  brian
- First cut at master spec file.

# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
