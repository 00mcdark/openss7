# vim: ft=spec sw=4 et
# =============================================================================
# 
# @(#) $RCSfile: openss7.spec.in,v $ $Name:  $($Revision: 0.9.2.35 $) $Date: 2005/06/25 07:01:47 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2005/06/25 07:01:47 $ by $Author: brian $
#
# =============================================================================

# default is to build kernel modules and tools
# conditional builds of binary rpms relies on the sneaky spec trick that
# rpmbuild will not build a binary rpm when it has no %files section
%global BUILD_modules 1
%global BUILD_tools   1
%global BUILD_libs    1
%global BUILD_noarch  1
%global BUILD_arch    1
%global BUILD_source  1
%global BUILD_test    0
%global BUILD_devs    1
%global MAKE_devs     0
%global BUILD_lis     1
%global BUILD_lfs     0

# there are three ways to pass kernel version to the build process:
#    global _kversion in /usr/lib/rpm/macros, /etc/rpm/macros or ~/.rpmmacros
#    global _kversion on the rpmbuild command line
#    global PACKAGE_KVERSION environment variable
#    just let it default to `uname -r`
#{!?_kversion: #{expand: ##global _kversion #(env | grep PACKAGE_KVERSION | sed -e 's|.*=||')}}
%{!?_kversion: %{expand: %%global _kversion %(uname -r)}}

%global kernel_version %{_kversion}
%global kernel_source %(echo %{_kversion} | sed -e 's|BOOT$||;s|smp$||;s|bigmem$||;s|debug$||;s|enterprise$||;s|hugemem$||;s|secure$||;s|-i686-up-4GB$||;s|-p3-smp-64GB$||;s|-64GB-SMP|.SuSE|;s|-default||')
%global kernel_number %(echo %{_kversion} | sed -e 's|-.*$||')
%global kernel_release %(echo %{_kversion} | sed -e 's|-|.|g')
%global core_name   core-%{_kversion}
%global info_name   info-%{_kversion}
%global majbase     @STRCONF_MAJBASE@
%global makedev     @STRCONF_MAKEDEV@
%global epoch       @PACKAGE_RPMEPOCH@
%global base        @PACKAGE_LCNAME@
%global title       @PACKAGE_TITLE@
%global stitle      @PACKAGE_SHORTTITLE@

#global modules     
#global preloads    
%global libraries   streams LiS xnet sockets
%global tools       ldltest strtst thrtst timetst fattach fdetach ldlconfig oc pafd psfd rwf streams strmakenodes strxnet_mknod test-xnet test-xnet_thr
%global infofiles   %{name} STREAMS SPG porting libxnet
#global initfiles

%{expand: %%global without_ko_modules %(echo %{_kversion} | sed -e 's|^2\.[56]\..*$|0|;s|^2\.4\..*$|1|')}
%{expand: %%global have_libraries   %{?libraries:1}%{!?libraries:0}}
%{expand: %%global have_preloads    %{?preloads: 1}%{!?preloads: 0}}
%{expand: %%global have_initscripts %{?initfiles:1}%{!?initfiles:0}}

%if %{without_ko_modules}
# assume devs for older kernels
%global NEED_devs     1
%global NEED_init     1
%else
# assume no devs for newer kernels
%global NEED_devs     0
%global NEED_init     0
%endif

%{!?_configdir:      %{expand: %%global _configdir    %%{_sysconfdir}/sysconfig}}
%{!?_modutildir:     %{expand: %%global _modutildir   %%{_sysconfdir}/modutils}}
%{!?_kmoduledir:     %{expand: %%global _kmoduledir   %%{_lib}/modules/%%{kernel_version}}}

# because we only need to build the tools binaries once for each architecture,
# but need to build the modules binaries once for each architecture and kernel
# version, we accept the --with[out] options "modules" and "tools"
%{?_without_modules: %{expand: %%global BUILD_modules 0}}
%{?_without_tools:   %{expand: %%global BUILD_tools   0}}
%{?_without_indep:   %{expand: %%global BUILD_noarch  0}}
%{?_without_arch:    %{expand: %%global BUILD_arch    0}}
%{?_without_public:  %{expand: %%global BUILD_source  0}}
%{?_without_lis:     %{expand: %%global BUILD_lis     0}}
%{?_without_lis:     %{expand: %%global BUILD_lfs     1}}
%{?_without_lfs:     %{expand: %%global BUILD_lfs     0}}
%{?_without_lfs:     %{expand: %%global BUILD_lis     1}}

%{?_with_devfs:      %{expand: %%global NEED_devs     0}}
%{?_with_modules:    %{expand: %%global BUILD_modules 1}}
%{?_with_tools:      %{expand: %%global BUILD_tools   1}}
%{?_with_indep:      %{expand: %%global BUILD_noarch  1}}
%{?_with_arch:       %{expand: %%global BUILD_arch    1}}
%{?_with_public:     %{expand: %%global BUILD_source  1}}
%{?_with_lis:        %{expand: %%global BUILD_lis     1}}
%{?_with_lis:        %{expand: %%global BUILD_lfs     0}}
%{?_with_lfs:        %{expand: %%global BUILD_lfs     1}}
%{?_with_lfs:        %{expand: %%global BUILD_lis     0}}

%define oldrpm %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%define newrpm %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 1 ; else echo 0; fi)

%if %{BUILD_arch}
%global BUILD_source  0
%endif

%if %{NEED_devs}
%{expand: %%global BUILD_devs    %newrpm}
%{expand: %%global MAKE_devs     %oldrpm}
%else
%global BUILD_devs    0
%global MAKE_devs     0
%endif

%if %{BUILD_tools}
%else
%global BUILD_libs    0
%global BUILD_devs    0
%global MAKE_devs     0
%global BUILD_source  0
%endif

%global _streams lis
%global _ksubdir lis
%global _kmodext lis
%if %{BUILD_lfs}
%global _STREAMS LfS
%global _streams streams
%global _strvers 0.7a
%global _ksubdir streams
%global _kmodext streams
%global _conflict LiS
%endif
%if %{BUILD_lis}
%global _STREAMS LiS
%global _streams LiS
%global _strvers 0:2.18.1
%global _ksubdir lis
%global _kmodext lis
%global _conflict streams
%endif

%if %{BUILD_modules}
%global FILES_modules       1
%global FILES_ko_modules    1
%else
%global FILES_modules       0
%global FILES_ko_modules    0
%endif

%if %{BUILD_tools}
%global FILES_libs          1
%global FILES_nolibs        1
%global FILES_tools         1
%global FILES_makedev       1
%global FILES_builddev      1
%global FILES_test          %{BUILD_test}
%global FILES_doc           1
%global FILES_doclibs       1
%global FILES_source        %{BUILD_source}
%global FILES_init          1
%global FILES_ko_init       1
%global FILES_noinit        1
%global FILES_ko_noinit     1
%else
%global FILES_libs          0
%global FILES_nolibs        0
%global FILES_tools         0
%global FILES_makedev       0
%global FILES_builddev      0
%global FILES_test          0
%global FILES_doc           0
%global FILES_doclibs       0
%global FILES_source        0
%global FILES_init          0
%global FILES_ko_init       0
%global FILES_noinit        0
%global FILES_ko_noinit     0
%endif

%if %{BUILD_arch}
%else
%global FILES_modules       0
%global FILES_ko_modules    0
%global FILES_libs          0
%global FILES_nolibs        0
%global FILES_tools         0
%endif

%if %{BUILD_noarch}
%else
%global FILES_makedev       0
%global FILES_builddev      0
%global FILES_test          0
%global FILES_doc           0
%global FILES_doclibs       0
%global FILES_source        0
%global FILES_ko_init       0
%global FILES_init          0
%global FILES_ko_noinit     0
%global FILES_noinit        0
%endif

%if %{BUILD_libs}
%global FILES_nolibs        0
%global FILES_doc           0
%else
%global FILES_libs          0
%global FILES_doclibs       0
%endif

%if %{without_ko_modules}
%global FILES_ko_modules    0
%global FILES_ko_init       0
%global FILES_ko_noinit     0
%else
%global FILES_modules       0
%global FILES_init          0
%global FILES_noinit        0
%global FILES_makedev       0
%global FILES_builddev      0
%endif

%if %{BUILD_devs}
%global FILES_makedev       0
%else
%global FILES_builddev      0
%endif

%if %{have_initscripts}
%global FILES_ko_noinit     0
%global FILES_noinit        0
%global NEED_init           1
%else
%global FILES_ko_init       0
%global FILES_init          0
%endif


# we have some more options that control configure for the build
%{?disturl:%{!?url:%{expand: %%global url %{disturl}}}}
%{?extrarelease:  %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@%%{extrarelease}}}
%{!?extrarelease: %{expand: %%global fullrelease @PACKAGE_RPMRELEASE@}}

# a macro to build require one package of the same version as another
%define buildreq_prov() %(LANG_ALL="C" rpm -q --provides `rpm -q --whatprovides %2` | grep '%2' | grep -v "is not" | head -1 | sed -e 's|%2.*=|BuildRequires: %1 =|')
%define requires_prov() %(LANG_ALL="C" rpm -q --provides `rpm -q --whatprovides %2` | grep '%2' | grep -v "is not" | head -1 | sed -e 's|%2.*=|Requires: %1 =|')

Summary:        %{title} for Linux
Name:           @PACKAGE@
Epoch:          @PACKAGE_RPMEPOCH@
Version:        @VERSION@
Release:        @PACKAGE_RPMRELEASE@
License:        GPL
Group:          System Environment/Kernel
%{?url:URL:            %{url}}
%{?_xpm_icon:Icon:           %{_xpm_icon}}
%{?_gif_icon:Icon:           %{_gif_icon}}
ExclusiveArch:  %{ix86} k6 x86_64 s390 s390x ppc ppciseries ppcpseries ppc64 arm armv4l sh mips mipsel noarch
ExclusiveOs:    Linux
#Source:         %{name}-%{version}.tar.bz2
Source:         http://www.openss7.org/%{name}-%{version}.tar.bz2
%{!?buildroot:BuildRoot:      %{_tmppath}/%{name}-%{version}-%{fullrelease}-root}
%if %{BUILD_modules}
BuildRequires:  kernel-source = %{kernel_source}
BuildRequires:  modutils >= 2.4.12
%endif

%define newgcc %(if test `gcc -v 2>&1 | grep 'gcc version' | sed -e 's|gcc version ||;s| .*$||'` != '2.95.3' ; then echo 1 ; else echo 0 ; fi)

%ifarch s390 s390x
BuildRequires:  gcc >= 2.95.3
%else
%ifarch %all_ppc
BuildRequires:  gcc >= 2.96-75
%else
%if %newgcc
BuildRequires:  gcc >= 2.96-98
%else
BuildRequires:  gcc = 2.95.3
%endif
%endif
%endif
%if %newgcc
BuildRequires:  gcc >= 2.96
%else
BuildRequires:  gcc = 2.95.3
%endif

# these are some needs of the configure script
# to manipulate manual pages:
BuildRequires:  /usr/bin/groff
BuildRequires:  /usr/bin/soelim
BuildRequires:  /usr/bin/refer
BuildRequires:  /usr/bin/tbl
BuildRequires:  /usr/bin/pic
BuildRequires:  /usr/bin/gzip

%if %{without_ko_modules}
# to generate kernel symbols:
BuildRequires:  /sbin/genksyms
%endif

# to build documentation
#BuildRequires: transfig >= 3.2
#BuildRequires: ImageMagick
#BuildRequires: tetex >= 1.0
#BuildRequires: ghostscript >= 6.51
# to install documentation
BuildRequires: texinfo >= 4.0
# find the rest automagically
Autoreq:        true

# ---------------------------------------------------------------------------
%description
The %{name} package includes kernel modules, libraries, utilities and
development environment for the development and execution of System V
Release 4.2 MP STREAMS modules and drivers developed for Linux.  In
addition (source) compatibility modules are provided for AIX, HP-UX,
LiS, OSF, Solaris, SVR 4 and UnixWare 7.
This distribution is currently applicable to 2.4 and 2.6 kernels and was
targetted at ix86 and ppc architectures, but should build and install
for other architectures as well.

%prep
# ---------------------------------------------------------------------------

%setup -q -n %{name}-%{version}

%build
# ---------------------------------------------------------------------------

preferred_cflags="%{optflags}"

%ifarch %ix86
preferred_cflags="$preferred_cflags -D__USE_STRING_INLINES -fstrict-aliasing"
%endif

%ifarch sparc
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparcv9
preferred_cflags="$preferred_cflags -fcall-used-g7"
%endif

%ifarch sparc64
preferred_cflags="$preferred_cflags -mvis -fcall-used-g7"
%endif

%ifnarch ia64 s390 s390x ppc ppciseries ppc64
if test "`gcc --version`" != '2.95.3' ; then
preferred_cflags="$preferred_cflags -freorder-blocks"
fi
%endif

%define cache_file %{_builddir}/%{_target_platform}-%{kernel_version}-config.cache
%define csite_file %{_builddir}/%{_target_platform}-config.site
%define mpost_file %{_builddir}/%{_target_platform}-%{kernel_version}-modpost.cache

%define enable()  %(echo "%1" | sed -e 's|^--with-|--enable-|')
%define disable() %(echo "%1" | sed -e 's|^--without-|--disable-|')

./configure \
    CC="${CC}" \
    CFLAGS="${CFLAGS:-$preferred_cflags}" \
    LDFLAGS="${LDFLAGS}" \
    CPPFLAGS="${CPPFLAGS}" \
    CPP="${CPP}" \
    CXX="${CXX:-$CC}" \
    CXXFLAGS="${CXXFLAGS:-$preferred_cflags}" \
    CXXCPP="${CXXCPP:-$CPP}" \
    CONFIG_SITE="%{csite_file}" \
    MODPOST_CACHE="%{mpost_file}" \
    --cache-file="%{cache_file}" \
%ifnarch noarch
    --host=%{_target_platform} \
%endif
    --prefix=%{_prefix} \
    --exec-prefix=%{_exec_prefix} \
    --bindir=%{_bindir} \
    --sbindir=%{_sbindir} \
    --sysconfdir=%{_sysconfdir} \
    --datadir=%{_datadir} \
    --includedir=%{_includedir} \
    --libdir=%{_libdir} \
    --libexecdir=%{_libexecdir} \
    --localstatedir=%{_localstatedir} \
    --sharedstatedir=%{_sharedstatedir} \
    --mandir=%{_mandir} \
    --infodir=%{_infodir} \
    --disable-maintainer-mode \
    --disable-dependency-tracking \
    --with-gnu-ld \
    --with-k-release=%{kernel_version} \
    --with-k-modules=/%{_lib}/modules/%{kernel_version} \
    --with-base-major=%{majbase} \
    %{?_with_arch:               '%enable %_with_arch'} \
    %{?_without_arch:            '%disable %_without_arch'} \
    %{?_with_indep:              '%enable %_with_indep'} \
    %{?_without_indep:           '%disable %_without_indep'} \
    %{?_with_checks:             '%enable %_with_checks'} \
    %{?_without_checks:          '%disable %_without_checks'} \
    %{?_with_autotest:           '%enable %_with_autotest'} \
    %{?_without_autotest:        '%disable %_without_autotest'} \
    %{?_with_cooked_manpages:    '%_with_cooked_manpages'} \
    %{?_without_cooked_manpages: '%_without_cooked_manpages'} \
    %{?_with_public:             '%enable %_with_public'} \
    %{?_without_public:          '%disable %_without_public'} \
    %{?_with_k_optimize:         '%_with_k_optimize'} \
    %{?_with_k_debug:            '%enable %_with_k_debug'} \
    %{?_without_k_debug:         '%disable %_without_k_debug'} \
    %{?_with_k_test:             '%enable %_with_k_test'} \
    %{?_without_k_test:          '%disable %_without_k_test'} \
    %{?_with_k_safe:             '%enable %_with_k_safe'} \
    %{?_without_k_safe:          '%disable %_without_k_safe'} \
    %{?_with_k_inline:           '%enable %_with_k_inline'} \
    %{?_without_k_inline:        '%disable %_without_k_inline'} \
    %{?_with_devfs:              '%enable %_with_devfs'} \
    %{?_without_devfs:           '%disable %_without_devfs'} \
    %{?_with_tools:              '%enable %_with_tools'} \
    %{?_without_tools:           '%disable %_without_tools'} \
    %{?_with_modules:            '%enable %_with_modules'} \
    %{?_without_modules:         '%disable %_without_modules'} \
    %{?_with_lis:                '%_with_lis'} \
    %{?_with_lfs:                '%_with_lfs'} \
    || { rm -f %{cache_file} ; exit 1 ; }

make
make check

%install
# ---------------------------------------------------------------------------

# in case it was not cleaned
[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot}

# if we are going to create debug packages, we need to install unstripped
# binaries; otherwise use libtoolized install-strip to strip binaries, modules,
# shared and static libraries.
make DESTDIR="%{buildroot}" DOCDIR="%{_docdir}" \
    %{!?_enable_debug_packages: install-strip} \
    %{?_enable_debug_packages: install}

# copy out our devices list
# cp -pf %{mybuilddir}/%{makedev} .

# get the installed info directory out of the build root
[ -e "%{buildroot}/%{_infodir}/dir" ] && rm -f "%{buildroot}/%{_infodir}/dir"

function package_source() {
# remove include2 symbolic link
    rm -fr include2
# punch rpm release to Custom
    echo '.Custom.1'  > .rpmextra
# create configured source directory for source package
    mkdir -p %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# tar and move the sources for source release
    tar cf - . | tar xf - -C %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease}
# clean out binaries and auxilliary files
    ( cd %{buildroot}%{_usrsrc}/%{name}-%{version}-%{fullrelease} ; make mostlyclean )
# create symbolic link
    ln -sf %{name}-%{version}-%{fullrelease} %{buildroot}%{_usrsrc}/%{name}
}

%if %{BUILD_source}
package_source
%endif

# stupid mandrake spec-helper will compress our macros files otherwise
@COOKED_MANPAGES_FALSE@export EXCLUDE_FROM_COMPRESS="sctp.refs sctp.macros
@COOKED_MANPAGES_FALSE@                              iperf.refs iperf.macros
@COOKED_MANPAGES_FALSE@                              lis.refs lis.macros
@COOKED_MANPAGES_FALSE@                              streams.refs streams.macros
@COOKED_MANPAGES_FALSE@                              strxns.refs strxns.macros
@COOKED_MANPAGES_FALSE@                              strxnet.refs strxnet.macros
@COOKED_MANPAGES_FALSE@                              strinet.refs strinet.macros
@COOKED_MANPAGES_FALSE@                              strsctp.refs strsctp.macros
@COOKED_MANPAGES_FALSE@                              netperf.refs netperf.macros
@COOKED_MANPAGES_FALSE@                              strss7.refs strss7.macros"

# stupid suse check compresses everything (including our macro files)
%{?suse_check: %{expand: %%define suse_check echo "SuSE Check skipped"}}

%clean
# ---------------------------------------------------------------------------

[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot}

# ===========================================================================
%package %{_streams}-%{core_name}

Summary:        OpenSS7 %{_STREAMS} STREAMS %{stitle} kernel modules.
Group:          System Environment/Kernel
Prefix:         /%{_lib}/modules/%{kernel_version}
Requires:       %(LANG_ALL="C" rpm -q --whatprovides /lib/modules/%{kernel_version}/kernel --qf "%{NAME} = %{VERSION}-%{RELEASE}\n")
%if %{NEED_init}
Requires:       %{name}-init = %{epoch}:%{version}-%{fullrelease}
%endif
%if %{NEED_devs}
Requires:       %{name}-dev = %{epoch}:%{version}-%{fullrelease}
%endif
#Conflicts:      %{_conflict}-%{core_name}
Prereq:         /sbin/depmod
Prereq:         /sbin/lsmod
Prereq:         /sbin/insmod
Prereq:         /sbin/modprobe
Prereq:         /usr/sbin/lsof
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Provides:       %{name}-core = %{epoch}:%{version}-%{fullrelease}
Provides:       %{name}-%{_streams}-core = %{epoch}:%{version}-%{fullrelease}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description %{_streams}-%{core_name}
The %{name}-%{_streams}-%{core_name} package contains the kernel modules
that provide the Linux kernel %{stitle} %{_STREAMS} STREAMS drivers and modules.
This also includes assorted drivers and modules for additional protocol stacks
such as XNET.  This package is heavily tied to the kernel for which it and the
%{_STREAMS} STREAMS facility was compiled.  This package applies to kernel
version %{kernel_version} and requires a %{_STREAMS} STREAMS package compiled
for the same kernel.

%pre %{_streams}-%{core_name}
# ---------------------------------------------------------------------------
arg="$1"
function remove_depmods() {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
if [ $arg = 1 ] ; then : # fresh install
    # This is a fresh install of this version of kernel module.  Make sure that there are no non-rpm
    # installed kernel modules hanging around for this kernel version.
    list="%{modules}" ; modl_mods=
    if [ -d %{_kmoduledir} ] ; then
	for m in `find %{_kmoduledir} \( -name '*.o' -o -name '*.ko' -o -name '*.o.gz' -o -name '*.ko.gz' \) 2>/dev/null` ; do
		b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
		case " $list " in (*" $b "*) ;; (*) continue ;; esac
		echo "$m"
		modl_mods="${modl_mods:+$modl_mods }$m"
	done
        if [ -f %{_kmoduledir}/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)	    dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < %{_kmoduledir}/modules.dep
            eval "$xtrace"
        fi
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
fi
if [ $arg = 1 -o $arg = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # If we are upgrading and the upgrade is for the running kernel, or we are installing new on
        # the running kernel, we have to worry about previous loaded modules for the old version or
        # a non-rpm version.
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # Module running, kick the stack.
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a 2>/dev/null
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -HUP $tokens[1]"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Cannot install or upgrade with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi

%post %{_streams}-%{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # This is a running kernel, do a /sbin/depmod on the modules directory for the running
        # kernel.
        /sbin/depmod -ae
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a /sbin/depmod will be performed on boot by /sbin/depmod anyway, but
        # try one now.
        UNAME_MACHINE=%{_target_cpu} \
        /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
    fi
fi

%preun %{_streams}-%{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # We are about to uninstall for good on a running kernel then we have to worry about which
        # modules are running
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # modules running, kick the stack
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -KILL $tokens[1]"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Cannot uninstall with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi

%postun %{_streams}-%{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # This is a running kernel, do a /sbin/depmod on the modules directory for.
        /sbin/depmod -ae
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a /sbin/depmod will be performed on boot but /sbin/depmod anyway.
        UNAME_MACHINE=%{_target_cpu} \
        /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
    fi
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # One more kick at killing any loaded modules on uninstall, last stage of the upgrade on a
        # running kernel for upgrade.
        reboot='no'
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # Modules running, kick the stack.
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /sbin/insmod -ar "$m"
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    if [ $1 = 0 ] ; then
                                        # Extreme prejudice for removal.
                                        eval "kill -KILL $tokens[1]"
                                    else
                                        # Try to get them to reload for upgrade.
                                        eval "kill -HUP $tokens[1]"
                                    fi
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Error: modules may be still loaded" >&2
                            /sbin/lsmod | grep "^$m" >&2
                            reboot='yes'
                        fi
                    fi
                fi
            fi
        done
        if [ "$reboot" = 'yes' ]; then
            echo "you may have to reboot" >&2
            exit 1
        fi
    fi
fi

%if %{BUILD_modules}
%files %{_streams}-%{core_name}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir /%{_lib}/modules/%{kernel_version}/%{_ksubdir}
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.%{_ksubdir}
/%{_lib}/modules/%{kernel_version}/%{_ksubdir}/*
%dir /%{_lib}/modules/%{kernel_version}/strxns
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.strxns
/%{_lib}/modules/%{kernel_version}/strxns/*
%dir /%{_lib}/modules/%{kernel_version}/strxnet
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.strxnet
/%{_lib}/modules/%{kernel_version}/strxnet/*
%dir /%{_lib}/modules/%{kernel_version}/strinet
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.strinet
/%{_lib}/modules/%{kernel_version}/strinet/*
%dir /%{_lib}/modules/%{kernel_version}/strsctp
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.strsctp
/%{_lib}/modules/%{kernel_version}/strsctp/*
%dir /%{_lib}/modules/%{kernel_version}/strss7
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.strss7
/%{_lib}/modules/%{kernel_version}/strss7/*
%endif

# ===========================================================================
%package %{core_name}

Summary:        %{title} core kernel modules.
Group:          System Environment/Kernel
Prefix:         /%{_lib}/modules/%{kernel_version}
Requires:       %(LANG_ALL="C" rpm -q --whatprovides /lib/modules/%{kernel_version}/kernel --qf "%{NAME} = %{VERSION}-%{RELEASE}\n")
Prereq:         /sbin/depmod
Prereq:         /sbin/lsmod
Prereq:         /sbin/insmod
Prereq:         /sbin/modprobe
Prereq:         /usr/sbin/lsof
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Provides:       %{name}-core = %{epoch}:%{version}-%{fullrelease}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description %{core_name}
The %{name}-%{core_name} package contains the kernel modules that provide the
Linux kernel SVR 4.2 MP STREAMS facility.  This also includes assorted basic
STREAMS drivers and modules such as pipes, fifos, echo, etc.  This package is
heavily tied to the kernel for which it was compiled.  This package applies to
kernel version %{kernel_version}.

%pre %{core_name}
# ---------------------------------------------------------------------------
arg="$1"
function remove_depmods() {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
if [ $arg = 1 ] ; then : # fresh install
    # This is a fresh install of this version of kernel module.  Make sure that there are no non-rpm
    # installed kernel modules hanging around for this kernel version.
    list="%{modules}" ; modl_mods=
    if [ -d %{_kmoduledir} ] ; then
	for m in `find %{_kmoduledir} \( -name '*.o' -o -name '*.ko' -o -name '*.o.gz' -o -name '*.ko.gz' \) 2>/dev/null` ; do
		b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
		case " $list " in (*" $b "*) ;; (*) continue ;; esac
		echo "$m"
		modl_mods="${modl_mods:+$modl_mods }$m"
	done
        if [ -n "$modl_mods" -a -f %{_kmoduledir}/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)	    dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < %{_kmoduledir}/modules.dep
            eval "$xtrace"
        fi
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
fi
if [ $arg = 1 -o $arg = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # If we are upgrading and the upgrade is for the running kernel, or we are installing new on
        # the running kernel, we have to worry about previous loaded modules for the old version or
        # a non-rpm version.
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # Module running, kick the stack.
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a 2>/dev/null
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -HUP $tokens[1]"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Cannot install or upgrade with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi

%post %{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # This is a running kernel, do a /sbin/depmod on the modules directory for the running
        # kernel.
        /sbin/depmod -ae
%if %{have_initscripts}
        # Running kernels do need init scripts run.
        if [ -x /sbin/service ] ; then
            list="%{initfiles}" ; for i in $list ; do
                if [ -f %_initrddir/$i ] ; then
                    /sbin/service $i start || :
                fi
            done
        fi
%endif
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a /sbin/depmod will be performed on boot by /sbin/depmod anyway, but
        # try one now.
        UNAME_MACHINE=%{_target_cpu} \
        /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
        # Non-running kernels do not need init scripts run.
    fi
fi

%preun %{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # We are about to uninstall for good on a running kernel then we have to worry about which
        # modules are running
%if %{have_initscripts}
        # First lets try shutting down using any init script first in reverse order
        if [ -x /sbin/service ] ; then
            list="%{initfiles}" ; for i in $list ; do
                reverse="$i${reverse:+ $reverse}"
            done
            for i in $reverse ; do
                if [ -f %_initrddir/$i ] ; then
                    /sbin/service $i stop || :
                fi
            done
        fi
%endif
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # modules running, kick the stack
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    eval "kill -KILL $tokens[1]"
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Cannot uninstall with $m module running." >&2
                            exit 1
                        fi
                    fi
                fi
            fi
        done
    fi
fi

%postun %{core_name}
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # This is a running kernel, do a /sbin/depmod on the modules directory for.
        /sbin/depmod -ae
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a /sbin/depmod will be performed on boot but /sbin/depmod anyway.
        UNAME_MACHINE=%{_target_cpu} \
        /sbin/depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version}
    fi
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # One more kick at killing any loaded modules on uninstall, last stage of the upgrade on a
        # running kernel for upgrade.
        reboot='no'
        mods="%{modules}" ; for m in $mods ; do
            if ( /sbin/lsmod | grep -q "^$m" ) ; then
                # Modules running, kick the stack.
                /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                if ( /sbin/lsmod | grep -q "^$m" ) ; then
                    fdetach -a
                    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                    if ( /sbin/lsmod | grep -q "^$m" ) ; then
                        /sbin/insmod -ar "$m"
                        /usr/sbin/lsof | while read -a tokens; do
                            if [ :"$tokens[4]" = :"CHR" ]; then
                                major=`echo "$tokens[5]" | sed -e 's|,.*||'`
                                if [ $major -eq %{majbase} ]; then
                                    if [ $1 = 0 ] ; then
                                        # Extreme prejudice for removal.
                                        eval "kill -KILL $tokens[1]"
                                    else
                                        # Try to get them to reload for upgrade.
                                        eval "kill -HUP $tokens[1]"
                                    fi
                                fi
                            fi
                        done
                        /sbin/sleep 5 # wait for processes to die and close streams
                        /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
                        if ( /sbin/lsmod | grep -q "^$m" ) ; then
                            echo "Error: modules may be still loaded" >&2
                            /sbin/lsmod | grep "^$m" >&2
                            reboot='yes'
                        fi
                    fi
                fi
            fi
        done
        if [ "$reboot" = 'yes' ]; then
            echo "you may have to reboot" >&2
            exit 1
        fi
    fi
fi

%if %{FILES_modules}
%files %{core_name}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir /%{_lib}/modules/%{kernel_version}/%{base}
%attr(644,root,root) /%{_lib}/modules/%{kernel_version}/modules.%{base}
/%{_lib}/modules/%{kernel_version}/%{base}/*
%endif

%if %{FILES_ko_modules}
%files %{core_name}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir /%{_lib}/modules/%{kernel_version}/%{base}
/%{_lib}/modules/%{kernel_version}/%{base}/*
%endif

# ===========================================================================
%package %{info_name}

Summary:        %{title} core kernel module symbol versions.
Group:          System Environment/Kernel
Prefix:         %{_includedir}/%{name}/%{kernel_version}
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Provides:       %{name}-info = %{epoch}:%{version}-%{fullrelease}
Obsoletes:      %{name}-core < %{epoch}:%{version}-%{fullrelease}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description %{info_name}
The %{name}-%{info_name} package contains the kernel modules symbol
information for development of kernel modules against the core kernel modules
included in the %{name}-core package.  This package is tied to the core kernel
modules and kernel for which they were compiled.  This package applies to core
kernel modules %{name}-%{core_name} for kernel version %{_kversion}.

%if %{FILES_modules}
%files %{info_name}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir %{_includedir}/%{name}/%{kernel_version}
%{_includedir}/%{name}/%{kernel_version}/*
%endif

# don't include package for FILES_ko_modules

# ===========================================================================
%package lib

Summary:        %{title} run-time libraries.
Group:          System Environment/Libraries
Prefix:         %{_libdir}
Prefix:         %{_datadir}/locale
Obsoletes:      %{name}-libs
Prereq:         /sbin/ldconfig
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description lib
The %{name}-lib package contains the run-time shared libraries
necessary to run applications programs and utilities developed for
%{title}.

%if %{have_libraries}
%pre lib
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
    # See if there are any libraries hanging around from a non-rpm install.  If there are, just
    # delete them.
    libs="%{libraries}" ; for lib in $libs ; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            # Old libraries hanging around, delete them.
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs
        fi
    done
fi
%endif

%post lib
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    # After a fresh install or upgrade, do a load config.
    /sbin/ldconfig
fi

%postun lib
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then
    # Whether complete removal or upgrade, do a load config.
    /sbin/ldconfig
fi

%if %{FILES_libs}
%files lib
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_libdir}/*.so*
%{_libdir}/*.la
%{_datadir}/locale/*
%endif

# ===========================================================================
%package devel

Summary:        %{title} headers, libs and docs.
Group:          Development/System
Prefix:         %{_libdir}
Prefix:         %{_includedir}/%{name}
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description devel
The %{name}-devel package contains library archives for static compilation,
and headers files to develop %{title} modules and drivers.  This
also includes the header files and static libraries required to compile
%{title} applications programs.  In addition it contains all of the
manual pages necessary for developing %{title} application programs.

%if %{FILES_libs}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_libdir}/*.a
%dir %{_includedir}/%{name}
%{_includedir}/%{name}/*.h
%{_includedir}/%{name}/sys/*
%endif

%if %{FILES_nolibs}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir %{_includedir}/%{name}
%{_includedir}/%{name}/*.h
%{_includedir}/%{name}/sys/*
%endif

# ===========================================================================
%package util

Summary:        %{title} admin utilities.
Group:          System Environment/Base
Prefix:         %{_bindir}
Prefix:         %{_sbindir}
Prefix:         %{_libexecdir}
Prefix:         %{_sysconfdir}
Requires:       %{name}-lib = %{epoch}:%{version}-%{fullrelease}
Obsoletes:      %{name}-utils
Conflicts:      %{_conflict}-util
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description util
The %{name}-util package provides administrative and configuration test
utilities and commands associated with the %{title} package.

%pre util
# ---------------------------------------------------------------------------
if [ $1 = 1 ]; then : # fresh install
    # This is a fresh install, look for old non-rpm tools.
    tools="%{tools}" ; for tool in $tools ; do
        location="`which $tool 2>/dev/null`"
        while [ -n "$location" -a -x "$location" ] ; do
            eval "rm -f $location"
            location="`which $tool 2>/dev/null`"
            while [ -n "$location" -a -x "$location" ] ; do
                eval "rm -f $location"
                location="`which $tool 2>/dev/null`"
            done
        done
    done
    # Old non-rpm distro puts some man pages in the wrong place, clean them out.
    if [ -f /usr/man/man3/fattach.3 ] ; then
        rm -f /usr/man/man3/fattach.3 2>/dev/null
        rm -f /usr/man/man3/detach.3 2>/dev/null
        rm -f /usr/man/man3/isastream.3 2>/dev/null
        rmdir -p /usr/man/man3 2>/dev/null || :
        rm -f /usr/man/man8/fattach.8 2>/dev/null
        rm -f /usr/man/man8/fdetach.8 2>/dev/null
        rmdir -p /usr/man/man8 2>/dev/null || :
        rm -f /usr/man/man9/connld.9 2>/dev/null
        rm -f /usr/man/man9/fifo.9 2>/dev/null
        rm -f /usr/man/man9/pipemod.9 2>/dev/null
        rmdir -p /usr/man/man9 2>/dev/null || :
        rmdir -p /usr/man 2>/dev/null || :
    fi
fi

%if %{FILES_tools}
%files util
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_bindir}/*
%{_sbindir}/*
%{_libexecdir}/*test*
#{_libexecdir}/*tst
%config %{_sysconfdir}/*
%endif

# ===========================================================================
%package dev

Summary:        %{title} devices.
Group:          System Environment/Base
Conflicts:      %{_conflict}-dev
Requires:       dev >= 3.3
Obsoletes:      %{name}-devs
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description dev
The %{name}-dev package contains the device definitions necessary to run
applications programs and utilities developed for %{title}.
The package is not required for devfs based systems.

%if %{MAKE_devs}
%post dev
if [ $1 = 1 ] ; then : # fresh install
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    /usr/sbin/@STRMAKENODES@
fi

%preun dev
if [ $1 = 0 ] ; then : # final removal
    # Older rpm versions < 4.0 (such as those used by SuSE) are not capable of doing rootless builds
    # because they have no %%dev macro, so in that case we just run the makenodes program that was
    # generated in the build to create devices.
    /usr/sbin/@STRMAKENODES@ --remove
fi
%endif

%if %{FILES_makedev}
%files dev
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%endif

%if %{FILES_builddev}
%files dev -f %{makedev}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%endif

# ===========================================================================
%package test

Summary:        %{title} test utilities.
Group:          System Environment/Base
Prefix:         %{_libexecdir}/%{name}
Requires:       %{name}-%{_streams}-util = %{epoch}:%{version}-%{fullrelease}
Obsoletes:      %{name}-tests
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description test
The %{name}-test package provides testsuites used for troubleshooting
the %{title} package.

%if %{FILES_test}
%files test
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_libexecdir}/%{name}/atlocal
%{_libexecdir}/%{name}/testsuite*
%endif

# ===========================================================================
%package doc

Summary:        %{title} manpages, manuals and docs.
Group:          Documentation
Prefix:         %{_docdir}
Prefix:         %{_infodir}
Prefix:         %{_mandir}
Conflicts:      texinfo < 3.11
Obsoletes:      %{name}-docs
Prereq:         /sbin/install-info
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description doc
The %{name}-doc package contains html documentation for the development of
%{title} applications, modules and drivers.

%post doc
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{infofiles} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.gz
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.bz2
            fi
        done
    fi
    if [ -x /usr/sbin/makewhatis ] ; then
        LANGUAGE= LANG= /usr/sbin/makewhatis -v -u %{_mandir} || :
    fi
fi

%preun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{infofiles} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2
            fi
        done
    fi
fi

%postun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ -x /usr/sbin/makewhatis ] ; then
        LANGUAGE= LANG= /usr/sbin/makewhatis -v -u %{_mandir} || :
    fi
fi

%if %{FILES_doclibs}
%files doc
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%doc ABOUT-NLS
%doc AUTHORS ChangeLog COPYING INSTALL NEWS README THANKS doc/manual
%doc LSM %{name}-%{version}.lsm
%{_infodir}/*
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.refs
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.macros
%{_mandir}/man*/*
%endif

%if %{FILES_doc}
%files doc
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%doc AUTHORS ChangeLog COPYING INSTALL NEWS README THANKS doc/manual
%doc LSM %{name}-%{version}.lsm
%{_infodir}/*
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.refs
@COOKED_MANPAGES_FALSE@%{_mandir}/%{base}.macros
%{_mandir}/man*/*
%endif

# ===========================================================================
%package source

Summary:        %{title} source package.
Group:          Development/System
Prefix:         %{_usrsrc}
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description source
The %{name}-source package contains the source code necessary for building the
%{name} release.  It includes the autoconf configuration utilities necessary
to create and distribute this rpm.

%if %{FILES_source}
%files source
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%dir %{_usrsrc}/%{name}-%{version}-%{fullrelease}
%{_usrsrc}/%{name}
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/*
%{_usrsrc}/%{name}-%{version}-%{fullrelease}/.[^.]*
%endif

# ===========================================================================
%package init

Summary:    %{title} init scripts and config files
Group:      System Environment/Base
Prefix:     %{_configdir}
Prefix:     %{_initrddir}
%if %{without_ko_modules}
Prefix:     %{_modutildir}
%endif
Obsoletes:  %{name}-inits
Conflicts:  %{_conflict}-init
Autoreq:        true
%{?_xpm:Icon: %_xpm}
%{?_gif:Icon: %_gif}
Release:        %{fullrelease}

# ---------------------------------------------------------------------------
%description init
The %{name}-init package provides init scripts and configuration files
associated with the %{title} package.

%pre init
# ---------------------------------------------------------------------------
arg="$1"
function remove_depmods() {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
        prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
        eval "remove_depmods \$$prereq"
    done
}
# This is an initial installation of the init subpackage.  We need to check for non-rpm
# installations on the host and remove any entries that might later conflict with our entries.  We
# treat every fresh installation like an upgrade from non-deb/rpm install.
if [ $arg = 1 ] ; then : # fresh install
    # When performing a fresh install we want to go looking for non-rpm installations of LiS or
    # STREAMS or supplementary packages and perform what would otherwise have been the preun or
    # postun actions.
    list="%{modules}" ; modl_mods=
    for dir in %{_kmoduledir}/../* ; do
        [ -d $dir ] || continue
	for m in `find $dir \( -name '*.o' -o -name '*.ko' -o -name '*.o.gz' -o -name '*.ko.gz' \) 2>/dev/null` ; do
		b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
		case " $list " in (*" $b "*) ;; (*) continue ;; esac
		echo "$m"
		modl_mods="${modl_mods:+$modl_mods }$m"
	done
        if [ -n "$modl_mods" -a -f $dir/modules.dep ] ; then
            # First we can build a dependency tree from every dependency expression that can be
            # found in the modules.dep file.
            xtrace=`shopt -p -o | grep xtrace` ; set +x
            dep= ; while read line ; do
                case $line in
                    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
                            dep="${dep:+$dep }$line" ; continue ;;
                    (*)	    dep="${dep:+$dep }$line" ;;
                esac
                [ -n "$dep" ] || continue;
                set dummy $dep
                if [ "${3+set}" = "set" ] ; then
                    t=`echo $2 | sed -e 's|:$||'`
                    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                    shift 2
                    for p in $@ ; do
                        prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
                        eval "$prereq=\"\${$prereq:+\$$prereq }$t\""
                        eval "$target=\"\${$target:+\$$target }$p\""
                    done
                fi
                dep=
            done < $dir/modules.dep
            eval "$xtrace"
        fi
        conf_old=%_sysconfdir/modules.conf
        if [ -f $conf_old ] ; then
            conf_new=%_tmppath/modules.conf.new.$$
            conf_tmp=%_tmppath/modules.conf.tmp.$$
            cp -f -- $conf_old $conf_new
            # Unfortunately davem starting copying our install procedure, so we need to root out all
            # kinds of things from the modules.conf file, all prune statements, any if include
            # statements
            for suffix in %name LiS lis streams STREAMS strxns strxnet strinet strsctp strss7 ; do
                # This the old style /BEGIN LiS/,/END LiS/ enclosure in the modules.conf file.
                if ( grep -q -- "BEGIN $suffix" $conf_new && grep -q -- "END $suffix" $conf_new ) 2>/dev/null ; then
                    sed -e '\|BEGIN '$suffix'|,\|END '$suffix'|d'            $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer technique with a prune and an if statement in the modules.conf
                # file that was also used by davem in LiS-2.18.0.
                if [ -f $dir/modules.$suffix ] ; then
                    rm -f -- $dir/modules.$suffix
                    sed -e '\|^prune[[:space:]].*modules.'$suffix'|d'        $conf_new > $conf_tmp
                    sed -e '\|^if[[:space:]].*modules.'$suffix'|,\|^endif|d' $conf_tmp > $conf_new
                    sed -e '\|^include[[:space:]].*modules.'$suffix'|d'      $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
                # This is my newer latest technique with only an include statement in modules.conf
                # and a modules.conf fragment in the debian update-modules directory _modutildir
                # that includes the prune and if statements.  That works both for RH-style and
                # Debian-style modules.conf.
                if [ -f %_modutildir/$suffix ] ; then
                    rm -f -- %_modutildir/$suffix
                    sed -e '\|^include[[:space:]].*%_modutildir/'$suffix'|d' $conf_new > $conf_tmp
                    mv -f -- $conf_tmp $conf_new
                fi
            done
            chmod --reference=$conf_old -- $conf_new
            cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
            rm -f -- $conf_new
        fi
    done
%if %{without_ko_modules}
    prel_old=%_sysconfdir/modules
%else
    prel_old=%_sysconfdir/modprobe.preload
%endif
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        sed -e '\|^[[:space:]]*streams|d' $prel_new > $prel_tmp
        mv -f -- $prel_tmp $prel_new
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
    # Fresh install, go looking for non-rpm initscripts and remove them.
    if [ -x /sbin/chkconfig ] ; then
        for i in specfs streams strerr strace strms_up strms_dn ; do
            if [ -f %_initrddir/$i ] ; then
                /sbin/chkconfig --del $i || :
            fi
        done
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
        rm -f -- $modl_mods
        for m in $list ; do
            prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
            eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
            [ -n "$modl_deps" ] || continue
            rm -f -- $modl_deps
        done
    fi
fi
if [ $arg = 2 ] ; then : # upgrade
    # Because we are doing an upgrade, the preun and postun scriplets for the old rpm are going to
    # be called.  Hopefully the old rpm can handle removal correctly.
fi

%post init
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{without_ko_modules}
    # At the end of a fresh install we need to add our lines to the modules.conf file if it exists,
    # and it is necessary to use a modconf file (2.4 and pre 2.5.48 kernel), an even if the line is
    # already there (in which case we remove the existing line).
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{without_ko_modules}
    prel_old=%_sysconfdir/modules
%else
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{have_preloads}
    # At the end of a fresh install we need to add our preloads to the modules or modprobe.preload
    # file, if it exists, and is necessary, and even if the lines are already there (in which case
    # we remove the existing line.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods='%{preloads}' ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
fi
if [ $1 = 2 ] ; then : # upgrade
%if %{without_ko_modules}
    # At the end of an upgrade we place our new lines in the modules.conf file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( cat $conf_new
          echo "include %_modutildir/%base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{without_ko_modules}
    prel_old=%_sysconfdir/modules
%else
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{have_preloads}
    # At the end of an upgrade we place just our preloads in the modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods='%{preloads}' ; for m in $mods ; do
            ( cat $repl_new ; echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{have_initscripts}
    # This is the end of a fresh install, add init scripts if we have chkconfig.
    if which chkconfig >/dev/null 2>&1 ; then
        list='%{initfiles}' ; for i in $list ; do
            chkconfig --add $i || :
        done
    fi
%endif
fi

%preun init
# ---------------------------------------------------------------------------
if [ $1 = 0 ] ; then : # final removal
%if %{without_ko_modules}
    # When we are going away altogether we want to remove any lines whatsoever from the modules.conf
    # file.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        sed -e '\|^include[[:space:]].*%_modutildir/%base|d' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        echo "include %_modutildir/%base" >> $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{without_ko_modules}
    prel_old=%_sysconfdir/modules
%else
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{have_preloads}
    # When we are going away altogether we want to remove any of our preloads whatsoever from the
    # modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods='%{preloads}' ; for m in $mods ; do
            sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $repl_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
%if %{have_initscripts}
    # Uninstalling for good, remove init scripts if we have chkconfig
    if which chkconfig >/dev/null 2>&1 ; then
        list='%{initfiles}' ; for i in $list ; do
            if [ -f %_initrddir/$i ] ; then
                # rpm is not too good about the order of removal
                [ -x /sbin/service ] && /sbin/service $i stop || :
                chkconfig --del $i || :
            fi
        done
    fi
%endif
fi
if [ $1 = 1 ] ; then : # upgrade
%if %{without_ko_modules}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules.conf file that we placed in them in the post scriptlet.  We only adjust our line and
    # leave any lines added by the new package post scriptlet.
    conf_old=%_sysconfdir/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        # This groovy sed script just pulls out the first matching line and leaves the rest
        # untouched.
        sed -e '
\|^include[[:space:]].*%_modutildir/%base|!b
N
s|^include[[:space:]].*%_modutildir/%base.*\
||
: loop
n
b loop' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
%endif
%if %{without_ko_modules}
    prel_old=%_sysconfdir/modules
%else
    prel_old=%_sysconfdir/modprobe.preload
%endif
%if %{have_preloads}
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove our lines from the
    # modules or modprobe.preloads file that we placed in them in the post scriptlet.  We only
    # adjust our lines and leave any lines added by the new package post scriptlet.
    if [ -f $prel_old ] ; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods='%{preloads}' ; for m in $mods ; do
            # This groovy sed script just pulls out the first matching line and leaves the rest
            # untouched.
            sed -e '
\|^[[:space:]].*'"$m"'[[:space:]]*$|!b
N
s|^[[:space:]].*'"$m"'[[:space:]]*\
||
: loop
n
b loop' $prel_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
%endif
fi

%if %{FILES_init}
%files init
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_sysconfdir}/streams.conf
%{_initrddir}/../*
%{_configdir}/*
%{_modutildir}/*
%endif

%if %{FILES_ko_init}
%files init
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_sysconfdir}/streams.conf
%{_initrddir}/../*
%{_configdir}/*
%endif

%if %{FILES_noinit}
%files init
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{_modutildir}/*
%endif

%if %{FILES_ko_noinit}
%files init
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%endif

# ===========================================================================
%changelog
# ---------------------------------------------------------------------------
# $Log: openss7.spec.in,v $
# Revision 0.9.2.35  2005/06/25 07:01:47  brian
# - more efficient dependency checking
#

* Fri Jun 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.34  2005/06/24 13:40:40  brian
- some install/erase script corrections

* Fri Jun 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.33  2005/06/24 09:00:31  brian
- init package must be installed first because it cleans
  out any non-rpm modules and other things before the first
  fresh RPM install
- this wasn't happending on 2.6 systems

* Tue May 31 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.32  2005/05/31 05:10:39  brian
- correct case on modutildir filename

* Sun May 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.31  2005/05/29 11:28:24  brian
- better approach to mostlyclean

* Sun May 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.30  2005/05/29 07:49:20  brian
- updates and corrections for SuSE 9.2 build

* Sat May 14 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.29  2005/05/14 08:36:11  brian
- copyright header correction

* Wed May 11 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.28  2005/05/11 07:58:49  brian
- add mention of 2.6 kernel support

* Sat Apr  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.27  2005/04/09 09:35:35  brian
- update spec files

* Tue Apr  5 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.26  2005/04/05 01:57:04  brian
- more robust sed

* Sat Apr  2 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.25  2005/04/02 16:24:56  brian
- more adjustments to arch indep build

* Tue Mar 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.24  2005/03/29 17:16:22  brian
- Updated lsms and added LSM to distribution.

* Mon Mar 28 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.23  2005/03/28 07:42:27  brian
- better debian build

* Thu Mar 24 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.22  2005/03/24 05:18:53  brian
- always include sysconfdir in util package

* Tue Mar 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.21  2005/03/22 19:44:12  brian
- do not need symbolic link in prep anymore

* Thu Mar 17 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.20  2005/03/17 11:22:33  brian
- Updated change logs.

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.19  2005/03/16 11:58:15  brian
- enhance devfs support

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.18  2005/03/16 10:48:31  brian
- straighten out devfs and get source urls correct

* Wed Mar 16 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.17  2005/03/16 05:46:31  brian
- correction to chkconfig arguments

* Tue Mar 15 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.16  2005/03/15 10:41:49  brian
- Updated changelog and a few inconsistencies.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.15  2005/03/09 12:14:20  brian
- Corrected problematic conditionals.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.14  2005/03/09 08:00:22  brian
- Updated revision numbering.

* Wed Mar  9 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.13  2005/03/09 03:40:46  brian
- Major revision number changes.

* Mon Mar  7 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.12  2005/03/07 06:09:25  brian
- More spec changes for 2.6.

* Fri Feb 25 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.11  2005/02/25 10:56:39  brian
- Don't specify build architecture.

* Tue Feb 22 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.10  2005/02/22 08:32:02  brian
- spec changes for updated makefile fragments

* Sat Feb 19 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.9  2005/02/19 12:06:38  brian
- rpm-epoch to pkg-epoch, rpm-release to pkg-release
- proper quotation of configure options

* Tue Feb 15 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.8  2005/02/15 14:15:12  brian
- Remove link before linking.

- Revision 0.9.2.7  2005/02/07 22:22:54  brian
- Updated changelog.

* Thu Feb  3 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.6  2005/02/03 12:34:52  brian
- Spec file grand rework.

* Tue Feb  1 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.5  2005/02/01 18:58:37  brian
- Working up master build.

* Sat Jan 29 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.4  2005/01/29 11:23:05  brian
- Have master build working well.

* Thu Jan 27 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.3  2005/01/27 08:23:20  brian
- Remove conflicts and double files entry.

* Thu Jan 27 2005 Brian Bidulock <bidulock@openss7.org>
- Revision 0.9.2.2  2005/01/27 07:20:01  brian
- First cut at master spec file.

#
# vim: ft=spec sw=4 et
