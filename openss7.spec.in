# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
# =============================================================================
#
# @(#) $RCSfile: openss7.spec.in,v $ $Name:  $($Revision: 1.1.2.24 $) $Date: 2011-04-12 06:33:26 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2011-04-12 06:33:26 $ by $Author: brian $
#
# =============================================================================

# Note: we have way too many devices to make traditional device nodes
# any more, so these are commented out.  Only the traditional UNIX ABI
# inet devices are created.  Use the /dev/streams directory for the rest.

%global majbase     @STRCONF_MAJBASE@
#global makedev     @STRCONF_MAKEDEV@
#global mknods      /usr/sbin/inet_mkdev    # inet style install
#global rmnods      /usr/sbin/inet_rmdev    # inet style removal
%global mknods      /usr/sbin/@STRCONF_DEVICES@
%global rmnods      /usr/sbin/@STRCONF_DEVICES@ --remove
# all creation and removal of devices is now performed by init script
%global epoch       @PACKAGE_RPMEPOCH@
%global base        @PACKAGE_LCNAME@
%global title       @PACKAGE_TITLE@
%global stitle      @PACKAGE_SHORTTITLE@
%global virtual     STREAMS

%global binfiles    %{nil}
%global sbinfiles   %{nil}
%global wrapper     wrapper
%global modules     specfs streams streams-aixcompat streams-clone streams-connld streams-echo streams-fifo streams-hpuxcompat streams-log streams-nsdev streams-nuls streams-osfcompat streams-pipe streams-pipemod streams-sad streams-sc streams-sth streams-suncompat streams-svr4compat streams-uw7compat
%global nonrpmmods  LiS lis streams STREAMS strbcm strcompat strutil strtty strchan strxns strxnet strnsl strsock strinet strsctp strisdn strvoip strss7 sigtran stratm
%global preloads    specfs streams
%global libraries   streams
%global perlmods    %{nil}
%global tcllibs     %{nil}
%global gcjlibs     %{nil}
%global gcjmaps     %{nil}
%global jarfiles    %{nil}
%global jnilibs     %{nil}
%global javadoc     %{nil}
%global locales     %{nil}
%global tools       ldltest strtst thrtst timetst fattach fdetach ldlconfig oc pafd psfd rwf streams strmakenodes mkfifo
%global manuals     openss7 ATM carrier cci cdi chi cnam dlpi dlpi_porting FR hlr INET ISDN lab libxnet libxnsl lli mapi MG mg mtpi mxi nli npi npi_mtp npi_sccp OSI PHYS porting sbc sccpi sdli sdti sg sgp SIGTRAN sli SPG2 SPG SS7 ssg ss STREAMS_FAQ STREAMS tci tpi tpi_sccp tri TTY VOIP voip wan X25 x25_porting x400p xcc xmap XNS xti_sccp
%global pngfiles    *.png
%global cssfiles    *.css
%global initfiles   specfs streams strerr strace %{base}
%global nonrpminit  strms_up strms_dn
%global conffiles   *.conf
%global testfiles   *test*
%global testscripts testsuite
%global sendpr      %{nil}
%global mibfiles    *.mib
%global snmpmods    strMIB
#global gdmos       %{nil}
%global netconfig   %{base}
%global sock2path   %{base}
%global snmpconf    strMIB.conf
%global manrefs     %{base}.refs
%global manmacros   %{base}.macros
%global manpages    man*
%global includes    %{nil}
%global license     AGPLv3

%global NEED_streams    0

%{!?_enable_debug_packages:%{expand: %%global _enable_debug_packages 0}}

# there are three ways to pass kernel version to the build process:
#    global _kversion in /usr/lib/rpm/macros, /etc/rpm/macros or ~/.rpmmacros
#    global _kversion on the rpmbuild command line
#    global PACKAGE_KVERSION environment variable
#    just let it default to `uname -r`
#{!?_kversion: #{expand: ##global _kversion #(env | grep PACKAGE_KVERSION | sed -e 's,.*=,,')}}
%{!?_kversion: %{expand: %%global _kversion %(uname -r)}}

%global without_ko_modules %(echo %{_kversion} | sed -e 's,^2\.[56]\..*$,0,;s,^2\.4\..*$,1,')
%global kernel_version %{_kversion}
%global kernel_source %(echo %{_kversion} | sed -r -e 's,BOOT$,,;s,-?smp$,,;s,bigmem$,,;s,debug$,,;s,enterprise$,,;s,hugemem$,,;s,secure$,,;s,-i686-up-4GB$,,;s,-p3-smp-64GB$,,;s,-64GB-SMP,.SuSE,;s,-default$,,')
%global kernel_number %(echo %{_kversion} | sed -e 's,-.*$,,')
%global kernel_flavor %(echo %{_kversion} | sed -r -e 's,.*BOOT,-BOOT,;t;s,.*-?smp$,-smp,;t;s,.*bigmem$,-bigmem,;t;s,.*debug$,-debug,;t;s,.*kdump$,-kdump,;t;s,.*enterprise$,-enterprise,;t;s,.*hugemem$,-hugemem,;t;s,.*secure$,-secure,;t;s,.*-i686-up-4GB,-i686-up-4GB,;t;s,.*-p3-smp-4GB$,-p3-smp-4GB,;t;s,.*-64GB-SMP$,-64GB-SMP,;t;s,.*-default$,-default,;t;s,.*pae$,-pae,;t;s,.*PAE$,-PAE,;t;s,.*,,')
%global kernel_symsets symsets-%{_kversion}.tar.gz

%global HAVE_devices        %{?majbase:     1}%{!?majbase:     0}
%global HAVE_makedev        %{?makedev:     1}%{!?makedev:     0}
%global HAVE_mknods         %{?mknods:      1}%{!?mknods:      0}
%global HAVE_rmnods         %{?rmnods:      1}%{!?rmnods:      0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_binfiles       %{?binfiles:    1}%{!?binfiles:    0}
%global HAVE_sbinfiles      %{?sbinfiles:   1}%{!?sbinfiles:   0}
%global HAVE_preloads       %{?preloads:    1}%{!?preloads:    0}
%global HAVE_wrapper        %{?wrapper:     1}%{!?wrapper:     0}
%global HAVE_modules        %{?modules:     1}%{!?modules:     0}
%global HAVE_libraries      %{?libraries:   1}%{!?libraries:   0}
%global HAVE_perlmods       %{?perlmods:    1}%{!?perlmods:    0}
%global HAVE_tcllibs        %{?tcllibs:     1}%{!?tcllibs:     0}
%global HAVE_gcjlibs        %{?gcjlibs:     1}%{!?gcjlibs:     0}
%global HAVE_gcjmaps        %{?gcjmaps:     1}%{!?gcjmaps:     0}
%global HAVE_jarfiles       %{?jarfiles:    1}%{!?jarfiles:    0}
%global HAVE_jnilibs        %{?jnilibs:     1}%{!?jnilibs:     0}
%global HAVE_javadoc        %{?javadoc:     1}%{!?javadoc:     0}
%global HAVE_locales        %{?locales:     1}%{!?locales:     0}
%global HAVE_tools          %{?tools:       1}%{!?tools:       0}
%global HAVE_manuals        %{?manuals:     1}%{!?manuals:     0}
%global HAVE_pngfiles       %{?pngfiles:    1}%{!?pngfiles:    0}
%global HAVE_cssfiles       %{?cssfiles:    1}%{!?cssfiles:    0}
%global HAVE_initscripts    %{?initfiles:   1}%{!?initfiles:   0}
%global HAVE_configfiles    %{?conffiles:   1}%{!?conffiles:   0}
%global HAVE_testfiles      %{?testfiles:   1}%{!?testfiles:   0}
%global HAVE_testscripts    %{?testscripts: 1}%{!?testscripts: 0}
%global HAVE_sendpr         %{?sendpr:      1}%{!?sendpr:      0}
%global HAVE_mibfiles       %{?mibfiles:    1}%{!?mibfiles:    0}
%global HAVE_snmpmods       %{?snmpmods:    1}%{!?snmpmods:    0}
%global HAVE_gdmofiles      %{?gdmos:       1}%{!?gdmos:       0}
%global HAVE_netconfig      %{?netconfig:   1}%{!?netconfig:   0}
%global HAVE_sock2path      %{?sock2path:   1}%{!?sock2path:   0}
%global HAVE_manrefs        %{?manrefs:     1}%{!?manrefs:     0}
%global HAVE_manmacros      %{?manmacros:   1}%{!?manmacros:   0}
%global HAVE_manpages       %{?manpages:    1}%{!?manpages:    0}
%global HAVE_snmpconf       %{?snmpconf:    1}%{!?snmpconf:    0}
%global HAVE_debugfiles     %{_enable_debug_packages}
%global HAVE_kdebugfiles    %{_enable_debug_packages}
%global HAVE_sourcefiles    1
%global HAVE_docfiles       1
%global HAVE_includes       %{?includes:    1}%{!?includes:    0}
%global HAVE_mkvars         1

%if %{?_with_wrapper_module:1}0
%global HAVE_wrapper        %{?wrapper:     1}%{!?wrapper:     0}
%else
%global HAVE_wrapper        0
%endif


%global HAVE_yumrepo        %(if (rpm -q --whatprovides yum >/dev/null 2>&1) ; then echo 1; else echo 0; fi)
%global HAVE_zypprepo       %(if (rpm -q --whatprovides zypper >/dev/null 2>&1) ; then echo 1; else echo 0; fi)
# when _rpmsubdir is not defined we cannot build a repo package
%{!?_rpmsubdir:             %{expand: %%global HAVE_yumrepo 0}}

%global HAVE_devscripts     0
%if %{HAVE_mknods}
%global HAVE_devscripts     1
%endif
%if %{HAVE_rmnods}
%global HAVE_devscripts     1
%endif

%global HAVE_infofiles      1
%global HAVE_txtfiles       1
%global HAVE_dvifiles       1
%global HAVE_psfiles        1
%global HAVE_pdffiles       1
%global HAVE_htmlfiles      1
%global HAVE_pngfiles       1
%global HAVE_cssfiles       1

%global HAVE_lib32compat    0
%global HAVE_test32files    0
%global HAVE_snmp32mods     0

%if %(test "%{_build_arch}" = "x86_64" && echo 1 || echo 0)
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%endif
%if %(test "%{_build_arch}" = "s390x" && echo 1 || echo 0)
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%endif
%if %(test "%{_build_arch}" = "sparc64" && echo 1 || echo 0)
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%endif
%if %(test "%{_build_arch}" = "ppc64" && echo 1 || echo 0)
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%endif
%if %(test "%{_build_arch}" = "ia64" && echo 1 || echo 0)
%global HAVE_lib32compat    %{HAVE_libraries}
%global HAVE_test32files    %{HAVE_testfiles}
%global HAVE_snmp32mods     %{HAVE_snmpmods}
%endif

%if %{HAVE_devices}
%global USE_makedev         %{HAVE_makedev}
%global USE_mknods          %{HAVE_mknods}
%global USE_rmnods          %{HAVE_rmnods}
%else
%global USE_makedev         0
%global USE_mknods          0
%global USE_rmnods          0
%endif

%if %(if (rpm -q --whatprovides /usr/bin/gcj-dbtool >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%global HAVE_gcjmaps        0
%endif

%if %(if (rpm --version|grep 'RPM version 4' >/dev/null 2>&1) ; then echo 0 ; else echo 1; fi)
%global USE_makedev         0
%endif

%if %(if (echo "%{_kversion}" | grep '^2\.4\.' >/dev/null 2>&1) ; then echo 1 ; else echo 0; fi)
%global HAVE_oldmods        %{HAVE_modules}
%global HAVE_oldprel        %{HAVE_preloads}
%global HAVE_newmods        0
%global HAVE_newprel        0
%global HAVE_symvers        0
%global NEED_symvers        0
%global HAVE_weakmods       0
%global HAVE_kupdate        0
%global HAVE_wmscripts      0
%global _ksubdir            %{base}
%else
%global HAVE_preloads       0
%global HAVE_oldmods        0
%global HAVE_oldprel        0
%global HAVE_newmods        %{HAVE_modules}
%global HAVE_newprel        %{HAVE_preloads}
%global HAVE_symvers        %{HAVE_modules}
%global NEED_symvers        1
%global HAVE_weakmods       %{HAVE_modules}
%global HAVE_kupdate        %{HAVE_modules}
%global HAVE_wmscripts      %{HAVE_modules}
%global _ksubdir            extra/%{base}
%endif

%if %(if test -d /etc/kernel ; then echo 0 ; else echo 1 ; fi)
%global HAVE_kupdate        0
%endif

%if %(if test -x /sbin/weak-modules -o -x /usr/lib/module-init-tools/weak-modules -o -x /usr/lib/module-init-tools/weak-modules2; then echo 0; else echo 1; fi)
%global _ksubdir            %{base}
%endif

%if %(if test -x /usr/lib/module-init-tools/weak-modules -a ! -x /usr/lib/module-init-tools/weak-modules2; then echo 1; else echo 0; fi)
%global _ksubdir            updates/%{base}
%endif

%if %{HAVE_weakmods}
%global target_kernel %((LANG_ALL="C" rpm -q --whatprovides /boot/symvers-%{_kversion}.gz --qf "%%{NAME}\\n" | grep -v 'not owned' | tail -1) 2>/dev/null)
%else
%global target_kernel %((LANG_ALL="C" rpm -q --whatprovides /boot/symvers-%{_kversion}.gz --qf "%%{NAME} = %%{VERSION}-%%{RELEASE}\\n" | grep -v 'not owned' | tail -1) 2>/dev/null)
%endif
%global target_kdevel %((LANG_ALL="C" rpm -q --whatprovides `(cd %{_kmoduledir}/build; /bin/pwd)` --qf "%%{NAME} = %%{VERSION}-%%{RELEASE}\\n" | grep -v 'not owned' | tail -1) 2>/dev/null)


%if %(if (rpm -q --whatprovides /boot/symvers-%{_kversion}.gz >/dev/null 2>&1) ; then echo 1; else echo 0; fi)
%global NEED_symvers        0
%endif

%if %{HAVE_newmods}
%global USE_makedev         0
%endif

%if %{USE_makedev}
%global USE_mknods          0
%global USE_rmnods          0
%global devicesfile         -f %{makedev}
%endif

%global HAVE_binaries       0
%if %{HAVE_binfiles}
%global HAVE_binaries       1
%endif
%if %{HAVE_sbinfiles}
%global HAVE_binaries       1
%endif
%if %{HAVE_libraries}
%global HAVE_binaries       1
%endif
%if %{HAVE_lib32compat}
%global HAVE_binaries       1
%endif
%if %{HAVE_testfiles}
%global HAVE_binaries       1
%endif
%if %{HAVE_test32files}
%global HAVE_binaries       1
%endif
%if %{HAVE_snmpmods}
%global HAVE_binaries       1
%endif
%if %{HAVE_snmp32mods}
%global HAVE_binaries       1
%endif

%global FILES_binfiles      %{HAVE_binfiles}
%global FILES_sbinfiles     %{HAVE_sbinfiles}
%global FILES_preloads      %{HAVE_preloads}
%global FILES_oldprel       %{HAVE_oldprel}
%global FILES_newprel       %{HAVE_newprel}
%global FILES_wrapper       %{HAVE_wrapper}
%global FILES_modules       %{HAVE_modules}
%global FILES_kupdate       %{HAVE_kupdate}
%global FILES_wmscripts     %{HAVE_wmscripts}
%global FILES_oldmods       %{HAVE_oldmods}
%global FILES_newmods       %{HAVE_newmods}
%global FILES_libraries     %{HAVE_libraries}
%global FILES_libstatic     %{HAVE_libraries}
%global FILES_lib32compat   %{HAVE_lib32compat}
%global FILES_lib32static   %{HAVE_lib32compat}
%global FILES_perlmods      %{HAVE_perlmods}
%global FILES_tcllibs       %{HAVE_tcllibs}
%global FILES_gcjlibs       %{HAVE_gcjlibs}
%global FILES_gcjmaps       %{HAVE_gcjmaps}
%global FILES_jarfiles      %{HAVE_jarfiles}
%global FILES_jnilibs       %{HAVE_jnilibs}
%global FILES_javadoc       %{HAVE_javadoc}
%global FILES_locales       %{HAVE_locales}
%global FILES_tools         %{HAVE_tools}
%global FILES_initscripts   %{HAVE_initscripts}
%global FILES_devscripts    %{HAVE_devscripts}
%global FILES_configfiles   %{HAVE_configfiles}
%global FILES_testfiles     %{HAVE_testfiles}
%global FILES_test32files   %{HAVE_test32files}
%global FILES_testscripts   %{HAVE_testscripts}
%global FILES_sendpr        %{HAVE_sendpr}
%global FILES_mibfiles      %{HAVE_mibfiles}
%global FILES_snmpmods      %{HAVE_snmpmods}
%global FILES_snmp32mods    %{HAVE_snmp32mods}
%global FILES_gdmofiles     %{HAVE_gdmofiles}
%global FILES_netconfig     %{HAVE_netconfig}
%global FILES_sock2path     %{HAVE_sock2path}
%global FILES_manrefs       %{HAVE_manrefs}
%global FILES_manmacros     %{HAVE_manmacros}
%global FILES_manpages      %{HAVE_manpages}
%global FILES_snmpconf      %{HAVE_snmpconf}
%global FILES_debugfiles    %{HAVE_debugfiles}
%global FILES_kdebugfiles   %{HAVE_kdebugfiles}
%global FILES_sourcefiles   %{HAVE_sourcefiles}
%global FILES_docfiles      %{HAVE_docfiles}
%global FILES_includes      %{HAVE_includes}
%global FILES_symvers       %{HAVE_symvers}
%global FILES_weakmods      %{HAVE_weakmods}
%global FILES_mkvars        %{HAVE_mkvars}
%global FILES_yumrepo       %{HAVE_yumrepo}
%global FILES_zypprepo      %{HAVE_zypprepo}
%global FILES_repo          0
%if %{FILES_yumrepo}
%global FILES_repo          1
%endif
%if %{FILES_zypprepo}
%global FILES_repo          1
%endif

# Try to reduce the side of the -doc package: skip txt, dvi and ps.
%global FILES_infofiles     %{HAVE_manuals}
#global FILES_txtfiles      %{HAVE_manuals}
#global FILES_dvifiles      %{HAVE_manuals}
#global FILES_psfiles       %{HAVE_manuals}
# FIXME: Skip documentation for texting
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
#global FILES_pdffiles      %{HAVE_manuals}
#global FILES_htmlfiles     %{HAVE_manuals}
#global FILES_pngfiles      %{HAVE_pngfiles}
#global FILES_cssfiles      %{HAVE_cssfiles}

# These are the defaults for the WITH_zzz macros.  These
# defaults can be changed by passing --with-zzz or --without-zzz
# to the rpmbuild command.  The default is to build almost
# everything.
%global WITH_modules        1
%global WITH_devel          1
%global WITH_tools          1
%global WITH_noarch         1
%global WITH_arch           1
%global WITH_source         1
%global WITH_snmp           1
%global WITH_java           1
%global WITH_mibs           1
%global WITH_docs           1
%global WITH_manrefs        1
%global WITH_manmacros      1
%global WITH_debug          %{_enable_debug_packages}
%global WITH_texinfo        1
%global WITH_texinfo_html   1
%global WITH_texinfo_print  1
%global WITH_papers         1
%global WITH_papers_html    1
%global WITH_papers_print   1
%global WITH_drafts         1
%global WITH_drafts_html    0
%global WITH_drafts_print   1

# Because we only need to build the tools binaries once for each
# architecture, but need to build the modules binaries once for
# each architecture and kernel vesion, we accept --with[out]-zzz
# options "modules" and "tools".  There are number of other
# options as well.
%{?_without_wrapper_module:  %{expand: %%global WITH_wrapper        0}}
%{?_with_wrapper_module:     %{expand: %%global WITH_wrapper        1}}
%{?_without_modules:         %{expand: %%global WITH_modules        0}}
%{?_with_modules:            %{expand: %%global WITH_modules        1}}
%{?_without_devel:           %{expand: %%global WITH_devel          0}}
%{?_with_devel:              %{expand: %%global WITH_devel          1}}
%{?_without_tools:           %{expand: %%global WITH_tools          0}}
%{?_with_tools:              %{expand: %%global WITH_tools          1}}
%{?_without_indep:           %{expand: %%global WITH_noarch         0}}
%{?_with_indep:              %{expand: %%global WITH_noarch         1}}
%{?_without_arch:            %{expand: %%global WITH_arch           0}}
%{?_with_arch:               %{expand: %%global WITH_arch           1}}
%{?_with_public:             %{expand: %%global WITH_source         1}}
%{?_with_k_package:          %{expand: %%global WITH_source         1}}
%{?_without_snmp_agent:      %{expand: %%global WITH_snmp           0}}
%{?_without_snmp_agent:      %{expand: %%global WITH_mibs           0}}
%{?_with_snmp_agent:         %{expand: %%global WITH_snmp           1}}
%{?_with_snmp_agent:         %{expand: %%global WITH_mibs           1}}
%{?_without_docs:            %{expand: %%global WITH_docs           0}}
%{?_with_docs:               %{expand: %%global WITH_docs           1}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manrefs        1}}
%{?_without_cooked_manpages: %{expand: %%global WITH_manmacros      1}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manrefs        0}}
%{?_with_cooked_manpages:    %{expand: %%global WITH_manmacros      0}}
%{?_with_java:               %{expand: %%global WITH_java           1}}
%{?_without_java:            %{expand: %%global WITH_java           0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo        0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo_html   0}}
%{?_without_texinfo:         %{expand: %%global WITH_texinfo_print  0}}
%{?_without_texinfo_html:    %{expand: %%global WITH_texinfo_html   0}}
%{?_without_texinfo_print:   %{expand: %%global WITH_texinfo_print  0}}
%{?_without_papers:          %{expand: %%global WITH_papers         0}}
%{?_without_papers:          %{expand: %%global WITH_papers_html    0}}
%{?_without_papers:          %{expand: %%global WITH_papers_print   0}}
%{?_without_papers_html:     %{expand: %%global WITH_papers_html    0}}
%{?_without_papers_print:    %{expand: %%global WITH_papers_print   0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts         0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts_html    0}}
%{?_without_drafts:          %{expand: %%global WITH_drafts_print   0}}
%{?_without_drafts_html:     %{expand: %%global WITH_drafts_html    0}}
%{?_without_drafts_print:    %{expand: %%global WITH_drafts_print   0}}

%if %{WITH_texinfo}
%else
%global HAVE_infofiles  0
%global FILES_infofiles 0
%endif

%global WITH_txtfiles   0
%if %{WITH_texinfo}
%global WITH_txtfiles   1
%endif
%if %{WITH_drafts}
%global WITH_txtfiles   1
%endif

%if %{WITH_txtfiles}
%else
%global HAVE_txtfiles   0
%global FILES_txtfiles  0
%endif

%global WITH_htmlfiles  0
%global WITH_cssfiles   0
%if %{WITH_texinfo_html}
%global WITH_htmlfiles  1
%endif
%if %{WITH_papers_html}
%global WITH_htmlfiles  1
%global WITH_cssfiles   1
%endif
%if %{WITH_drafts_html}
%global WITH_htmlfiles  1
%endif

%if %{WITH_htmlfiles}
%else
%global HAVE_htmlfiles  0
%global HAVE_pngfiles   0
%global HAVE_cssfiles   0
%global FILES_htmlfiles 0
%global FILES_pngfiles  0
%global FILES_cssfiles  0
%endif

%global WITH_printfiles 0
%if %{WITH_texinfo_print}
%global WITH_printfiles 1
%endif
%if %{WITH_papers_print}
%global WITH_printfiles 1
%endif
%if %{WITH_drafts_print}
%global WITH_printfiles 1
%endif

%if %{WITH_printfiles}
%else
%global HAVE_dvifiles   0
%global HAVE_psfiles    0
%global HAVE_pdffiles   0
%global FILES_dvifiles  0
%global FILES_psfiles   0
%global FILES_pdffiles  0
%endif

%global BUILD_modules   %{WITH_modules}
%global BUILD_devel     %{WITH_devel}
%global BUILD_tools     %{WITH_tools}
%global BUILD_noarch    %{WITH_noarch}
%global BUILD_arch      %{WITH_arch}
%global BUILD_source    %{WITH_source}
%global BUILD_snmp      %{WITH_snmp}
%global BUILD_java      %{WITH_java}
%global BUILD_mibs      %{WITH_mibs}
%global BUILD_docs      %{WITH_docs}
%global BUILD_manrefs   %{WITH_manrefs}
%global BUILD_manmacros %{WITH_manmacros}
%global BUILD_debug     %{WITH_debug}

# define new autoconf 2.60, 2.61 stuff
%{!?_datarootdir:       %{expand: %%global _datarootdir     %%{_datadir}}}
%{!?_docdir:            %{expand: %%global _docdir          %%{_datarootdir}/doc}}
%{!?_htmldir:           %{expand: %%global _htmldir         %%{_docdir}}}
%{!?_dvidir:            %{expand: %%global _dvidir          %%{_docdir}}}
%{!?_pdfdir:            %{expand: %%global _pdfdir          %%{_docdir}}}
%{!?_psdir:             %{expand: %%global _psdir           %%{_docdir}}}
%{!?_localedir:         %{expand: %%global _localedir       %%{_datadir}/locale}}
%{!?_configdir:         %{expand: %%global _configdir       %%{_sysconfdir}/sysconfig}}
%{!?_modutildir:        %{expand: %%global _modutildir      %%{_sysconfdir}/modutils}}
%{!?_kmoduledir:        %{expand: %%global _kmoduledir      /lib/modules/%%{kernel_version}}}
%{!?_pkglibexecdir:     %{expand: %%global _pkglibexecdir   %%{_libexecdir}/%%{name}}}
%{!?_snmpmibdir:        %{expand: %%global _snmpmibdir      %%{_datarootdir}/snmp/mibs}}
%{!?_snmpdlmoddir:      %{expand: %%global _snmpdlmoddir    %%{_libdir}/snmp/dlmod}}
%{!?_snmpconfdir:       %{expand: %%global _snmpconfdir     %%{_sysconfdir}/snmp}}
%{!?_lib32dir:          %{expand: %%global _lib32dir        %%{_exec_prefix}/lib}}
%{!?_pkglibexec32dir:   %{expand: %%global _pkglibexec32dir %%{_pkglibexecdir}/lib32}}
%{!?_snmpdlmod32dir:    %{expand: %%global _snmpdlmod32dir  %%{_lib32dir}/snmp/dlmod}}
%{!?_gcjdir:            %{expand: %%global _gcjdir          %%{_libdir}/gcj}}
%{!?_pkggcjdir:         %{expand: %%global _pkggcjdir       %%{_gcjdir}/%%{name}}}
%{!?_jnidir:            %{expand: %%global _jnidir          %%{_libdir}/java}}
%{!?_javadir:           %{expand: %%global _javadir         %%{_datadir}/java}}
%{!?_javadocdir:        %{expand: %%global _javadocdir      %%{_datadir}/javadoc}}
%{!?_pkgjavadocdir:     %{expand: %%global _pkgjavadocdir   %%{_javadocdir}/%%{name}}}
%{!?_tcllibdir:         %{expand: %%global _tcllibdir       %%{_libdir}}}
%{!?_tclsrcdir:         %{expand: %%global _tclsrcdir       %%{_datadir}}}
%{!?_pkgtcllibdir:      %{expand: %%global _pkgtcllibdir    %%{_tcllibdir}/@PACKAGE_NAME@@PACKAGE_VERSION@}}
%{!?_perldir:           %{expand: %%global _perldir         %(eval "`perl -V:installvendorarch`"; echo $installvendorarch | sed -e 's,//*$,,')}}
%{!?_yumrepodir:        %{expand: %%global _yumrepodir      %%{_sysconfdir}/yum.repos.d}}
%{!?_yumplugdir:        %{expand: %%global _yumplugdir      %%{_libdir}/yum-plugins}}
%{!?_yumdir:            %{expand: %%global _yumdir          %%{_sysconfdir}/yum}}
%{!?_yumconfdir:        %{expand: %%global _yumconfdir      %%{_sysconfdir}/yum/pluginconf.d}}
%{!?_zypprepodir:       %{expand: %%global _zypprepodir     %%{_sysconfdir}/zypp/repos.d}}
%{!?_zyppcreddir:       %{expand: %%global _zyppcreddir     %%{_sysconfdir}/zypp/credentials.d}}
%{!?_zyppservdir:       %{expand: %%global _zyppservdir     %%{_sysconfdir}/zypp/services.d}}
%{!?_rpmgpgdir:         %{expand: %%global _rpmgpgdir       %%{_sysconfdir}/pki/rpm-gpg}}

%{!?_repobase:          %{expand: %%global _repobase        @repobase@}}
%{!?_reporoot:          %{expand: %%global _reporoot        @reporoot@}}
%{!?_reposerv:          %{expand: %%global _reposerv        @reposerv@}}

# ---------------------------------------------------------------------------
# Calculate which files were not built (and are not included)
# ---------------------------------------------------------------------------

%global kernel_fedora       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,1,;t;s,.*\.fc[1]?[1-9].*$,1,;t;s,.*\.EL[45]?.*$,1,;t;s,.*\.el[56].*$,1,;t;s,.*$,0,')
%global kernel_others       %(echo %{_kversion} | sed -r -e 's,.*FC[456].*$,0,;t;s,.*\.fc[1]?[1-9].*$,0,;t;s,.*\.EL[45]?.*$,0,;t;s,.*\.el[56].*$,0,;t;s,.*$,1,')

%{!?VIRT_virt:  %{expand: %%global VIRT_virt       0}}
%{!?VIRT_repo:  %{expand: %%global VIRT_repo       0}}
%{!?VIRT_base:  %{expand: %%global VIRT_base       0}}
%{!?VIRT_doc:   %{expand: %%global VIRT_doc        0}}
%{!?VIRT_lib:   %{expand: %%global VIRT_lib        0}}
%{!?VIRT_compat:%{expand: %%global VIRT_compat     0}}
%{!?VIRT_devel: %{expand: %%global VIRT_devel      0}}
%{!?VIRT_debug: %{expand: %%global VIRT_debug      0}}
%{!?VIRT_wrap:  %{expand: %%global VIRT_wrap       0}}
%{!?VIRT_kmod:  %{expand: %%global VIRT_kmod       0}}
%{!?VIRT_kdev:  %{expand: %%global VIRT_kdev       0}}
%{!?VIRT_kbug:  %{expand: %%global VIRT_kbug       0}}
%{!?VIRT_ksrc:  %{expand: %%global VIRT_ksrc       0}}
%{!?VIRT_java:  %{expand: %%global VIRT_java       0}}
%{!?VIRT_jdoc:  %{expand: %%global VIRT_jdoc       0}}

%if %{BUILD_modules}
%else
%global VIRT_ksrc           0
%global kernel_fedora       0
%global kernel_others       0
%global FILES_wrapper       0
%global FILES_modules       0
%global FILES_kdebugfiles   0
%global FILES_symvers       0
%global FILES_weakmods      0
%global FILES_mkvars        0
%global FILES_sourcefiles   0
%endif

%if %{BUILD_devel}
%else
%global FILES_includes      0
%global FILES_libstatic     0
%global FILES_lib32static   0
%global FILES_javadoc       0
%global FILES_infofiles     0
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_manpages      0
%global FILES_debugfiles    0
%global FILES_testscripts   0
%global FILES_sendpr        0
%endif

%if %{BUILD_tools}
%else
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_perlmods      0
%global FILES_tcllibs       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%global FILES_locales       0
%global FILES_tools         0
%global FILES_gdmofiles     0
%global FILES_testfiles     0
%global FILES_test32files   0
%global FILES_snmpconf      0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_debugfiles    0
%endif

%if %{BUILD_noarch}
%else
%global VIRT_base           0
%global VIRT_jdoc           0
%global FILES_infofiles     0
%global FILES_txtfiles      0
%global FILES_dvifiles      0
%global FILES_psfiles       0
%global FILES_pdffiles      0
%global FILES_htmlfiles     0
%global FILES_pngfiles      0
%global FILES_cssfiles      0
%global FILES_initscripts   0
%global FILES_devscripts    0
%global FILES_configfiles   0
%global FILES_mibfiles      0
%global FILES_javadoc       0
%global FILES_manrefs       0
%global FILES_manmacros     0
%global FILES_docfiles      0
%global FILES_testscripts   0
%global FILES_sendpr        0
%global FILES_manpages      0
%global FILES_yumrepo       0
%global FILES_zypprepo      0
%global FILES_repo          0
%global FILES_kupdate       0
%global FILES_wmscripts     0
%endif

%if %{BUILD_arch}
%else
%global FILES_binfiles      0
%global FILES_sbinfiles     0
%global FILES_wrapper       0
%global FILES_modules       0
%global FILES_includes      0
%global FILES_libraries     0
%global FILES_libstatic     0
%global FILES_lib32compat   0
%global FILES_lib32static   0
%global FILES_netconfig     0
%global FILES_sock2path     0
%global FILES_perlmods      0
%global FILES_tcllibs       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%global FILES_locales       0
%global FILES_tools         0
%global FILES_gdmofiles     0
%global FILES_testfiles     0
%global FILES_test32files   0
%global FILES_snmpconf      0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%global FILES_symvers       0
%global FILES_weakmods      0
%global FILES_mkvars        0
%global FILES_sourcefiles   0
%endif

%if %{BUILD_source}
%else
%global FILES_sourcefiles   0
%endif

%if %{BUILD_snmp}
%else
%global FILES_snmpconf      0
%global FILES_snmpmods      0
%global FILES_snmp32mods    0
%global FILES_mibfiles      0
%endif

%if %{BUILD_mibs}
%else
%global FILES_mibfiles      0
%endif

%if %{BUILD_docs}
%else
%global FILES_javadoc       0
%endif

%if %{BUILD_java}
%else
%global FILES_javadoc       0
%global FILES_gcjlibs       0
%global FILES_gcjmaps       0
%global FILES_jarfiles      0
%global FILES_jnilibs       0
%endif

%if %{BUILD_manrefs}
%else
%global FILES_manrefs       0
%endif

%if %{BUILD_manmacros}
%else
%global FILES_manmacros     0
%endif

%if %{BUILD_debug}
%global __debug_package     1
%else
%global FILES_debugfiles    0
%global FILES_kdebugfiles   0
%endif

%global debug_package       %{nil}

# ---------------------------------------------------------------------------
# Determine whether we are building binaries.
# ---------------------------------------------------------------------------

%global FILES_binaries      0

%if %{FILES_binfiles}
%global FILES_binaries      1
%endif
%if %{FILES_sbinfiles}
%global FILES_binaries      1
%endif
%if %{FILES_libraries}
%global FILES_binaries      1
%endif
%if %{FILES_libstatic}
%global FILES_binaries      1
%endif
%if %{FILES_lib32compat}
%global FILES_binaries      1
%endif
%if %{FILES_lib32static}
%global FILES_binaries      1
%endif
%if %{FILES_testfiles}
%global FILES_binaries      1
%endif
%if %{FILES_test32files}
%global FILES_binaries      1
%endif
%if %{FILES_snmpmods}
%global FILES_binaries      1
%endif
%if %{FILES_snmp32mods}
%global FILES_binaries      1
%endif

# ---------------------------------------------------------------------------
# Calculate which packages we want (and don't want).
# ---------------------------------------------------------------------------

%if %{VIRT_virt}
%global WANT_virt       1
%global NEED_virt       1
%else
%global WANT_virt       0
%global NEED_virt       0
%endif

%if %{HAVE_docfiles}
%global NEED_virt       1
%endif

%if %{FILES_docfiles}
%global WANT_virt       1
%endif

%if %{WANT_virt}
%global PACKAGE_virt    1
%else
%global PACKAGE_virt    0
%endif

# -----------------------

%if %{VIRT_repo}
%global WANT_repo       1
%global NEED_repo       1
%else
%global WANT_repo       0
%global NEED_repo       0
%endif

%if %{HAVE_yumrepo}
%global NEED_repo       1
%endif
%if %{HAVE_zypprepo}
%global NEED_repo       1
%endif

%if %{FILES_yumrepo}
%global WANT_repo       1
%endif
%if %{FILES_zypprepo}
%global WANT_repo       1
%endif

%if %{WANT_repo}
%global PACKAGE_repo    1
%else
%global PACKAGE_repo    0
%endif

# -----------------------

%if %{VIRT_base}
%global WANT_base       1
%global NEED_base       1
%else
%global WANT_base       0
%global NEED_base       0
%endif

%if %{HAVE_configfiles}
%global NEED_base       1
%endif
#if %{HAVE_netconfig}
#global NEED_base       1
#endif
#if %{HAVE_sock2path}
#global NEED_base       1
#endif
%if %{HAVE_oldmods}
%global NEED_base       1
%endif
%if %{HAVE_initscripts}
%global NEED_base       1
%endif
%if %{HAVE_mibfiles}
%global NEED_base       1
%endif
%if %{HAVE_testscripts}
%global NEED_base       1
%endif
%if %{HAVE_sendpr}
%global NEED_base       1
%endif
%if %{HAVE_pngfiles}
%global NEED_base       1
%endif
%if %{HAVE_cssfiles}
%global NEED_base       1
%endif
%if %{HAVE_manrefs}
%global NEED_base       1
%endif
%if %{HAVE_manmacros}
%global NEED_base       1
%endif
%if %{HAVE_manpages}
%global NEED_base       1
%endif
%if %{HAVE_kupdate}
%global NEED_base       1
%endif
%if %{HAVE_wmscripts}
%global NEED_base       1
%endif

%if %{FILES_configfiles}
%global WANT_base       1
%endif
#if %{FILES_netconfig}
#global WANT_base       1
#endif
#if %{FILES_sock2path}
#global WANT_base       1
#endif
%if %{FILES_oldprel}
%global WANT_base       1
%endif
%if %{FILES_initscripts}
%global WANT_base       1
%endif
%if %{FILES_devscripts}
%global WANT_base       1
%endif
%if %{FILES_mibfiles}
%global WANT_base       1
%endif
%if %{FILES_testscripts}
%global WANT_base       1
%endif
%if %{FILES_sendpr}
%global WANT_base       1
%endif
%if %{FILES_manrefs}
%global WANT_base       1
%endif
%if %{FILES_manmacros}
%global WANT_base       1
%endif
%if %{FILES_manpages}
%global WANT_base       1
%endif
%if %{FILES_kupdate}
%global WANT_base       1
%endif
%if %{FILES_wmscripts}
%global WANT_base       1
%endif

%if %{WANT_base}
%global PACKAGE_base    1
%else
%global PACKAGE_base    0
%endif

# -----------------------

%if %{VIRT_doc}
%global WANT_doc        1
%global NEED_doc        1
%else
%global WANT_doc        0
%global NEED_doc        0
%endif

%if %{HAVE_infofiles}
%global NEED_doc        1
%endif
%if %{HAVE_txtfiles}
%global NEED_doc        1
%endif
%if %{HAVE_dvifiles}
%global NEED_doc        1
%endif
%if %{HAVE_psfiles}
%global NEED_doc        1
%endif
%if %{HAVE_pdffiles}
%global NEED_doc        1
%endif
%if %{HAVE_htmlfiles}
%global NEED_doc        1
%endif
%if %{HAVE_pngfiles}
%global NEED_doc        1
%endif
%if %{HAVE_cssfiles}
%global NEED_doc        1
%endif
%if %{HAVE_manpages}
%global NEED_doc        1
%endif

%if %{FILES_infofiles}
%global WANT_doc        1
%endif
%if %{FILES_txtfiles}
%global WANT_doc        1
%endif
%if %{FILES_dvifiles}
%global WANT_doc        1
%endif
%if %{FILES_psfiles}
%global WANT_doc        1
%endif
%if %{FILES_pdffiles}
%global WANT_doc        1
%endif
%if %{FILES_htmlfiles}
%global WANT_doc        1
%endif
%if %{FILES_pngfiles}
%global WANT_doc        1
%endif
%if %{FILES_cssfiles}
%global WANT_doc        1
%endif
%if %{FILES_manpages}
%global WANT_doc        1
%endif

%if %{WANT_doc}
%global PACKAGE_doc     1
%else
%global PACKAGE_doc     0
%endif

# -----------------------

%if %{VIRT_lib}
%global WANT_lib        1
%global NEED_lib        1
%else
%global WANT_lib        0
%global NEED_lib        0
%endif

%if %{HAVE_binfiles}
%global NEED_lib        1
%endif
%if %{HAVE_sbinfiles}
%global NEED_lib        1
%endif
%if %{HAVE_libraries}
%global NEED_lib        1
%endif
#if %{HAVE_lib32compat}
#global NEED_lib        1
#endif
%if %{HAVE_netconfig}
%global NEED_lib        1
%endif
%if %{HAVE_sock2path}
%global NEED_lib        1
%endif
%if %{HAVE_perlmods}
%global NEED_lib        1
%endif
%if %{HAVE_tcllibs}
%global NEED_lib        1
%endif
%if %{HAVE_locales}
%global NEED_lib        1
%endif
%if %{HAVE_gdmofiles}
%global NEED_lib        1
%endif
%if %{HAVE_testfiles}
%global NEED_lib        1
%endif
#if %{HAVE_test32files}
#global NEED_lib        1
#endif
%if %{HAVE_snmpconf}
%global NEED_lib        1
%endif
%if %{HAVE_snmpmods}
%global NEED_lib        1
%endif
#if %{HAVE_snmp32mods}
#global NEED_lib        1
#endif

%if %{FILES_binfiles}
%global WANT_lib        1
%endif
%if %{FILES_sbinfiles}
%global WANT_lib        1
%endif
%if %{FILES_libraries}
%global WANT_lib        1
%endif
#if %{FILES_lib32compat}
#global WANT_lib        1
#endif
%if %{FILES_netconfig}
%global WANT_lib        1
%endif
%if %{FILES_sock2path}
%global WANT_lib        1
%endif
%if %{FILES_perlmods}
%global WANT_lib        1
%endif
%if %{FILES_tcllibs}
%global WANT_lib        1
%endif
%if %{FILES_locales}
%global WANT_lib        1
%endif
%if %{FILES_gdmofiles}
%global WANT_lib        1
%endif
%if %{FILES_testfiles}
%global WANT_lib        1
%endif
#if %{FILES_test32files}
#global WANT_lib        1
#endif
%if %{FILES_snmpconf}
%global WANT_lib        1
%endif
%if %{FILES_snmpmods}
%global WANT_lib        1
%endif
#if %{FILES_snmp32mods}
#global WANT_lib        1
#endif

%if %{WANT_lib}
%global PACKAGE_lib     1
%else
%global PACKAGE_lib     0
%endif

# -----------------------

%if %{VIRT_compat}
%global WANT_compat     1
%global NEED_compat     1
%else
%global WANT_compat     0
%global NEED_compat     0
%endif

%if %{HAVE_lib32compat}
%global NEED_compat     1
%endif
%if %{HAVE_test32files}
%global NEED_compat     1
%endif
%if %{HAVE_snmp32mods}
%global NEED_compat     1
%endif

%if %{FILES_lib32compat}
%global WANT_compat     1
%endif
%if %{FILES_test32files}
%global WANT_compat     1
%endif
%if %{FILES_snmp32mods}
%global WANT_compat     1
%endif

%if %{WANT_compat}
%global PACKAGE_compat  1
%else
%global PACKAGE_compat  0
%endif

# -----------------------

%if %{VIRT_devel}
%global WANT_devel      1
%global NEED_devel      1
%else
%global WANT_devel      0
%global NEED_devel      0
%endif

%if %{HAVE_includes}
%global NEED_devel      1
%endif
%if %{HAVE_libraries}
%global NEED_devel      1
%endif
%if %{HAVE_perlmods}
%global NEED_devel      1
%endif
%if %{HAVE_tcllibs}
%global NEED_devel      1
%endif

%if %{FILES_includes}
%global WANT_devel      1
%endif
%if %{FILES_libstatic}
%global WANT_devel      1
%endif
%if %{FILES_lib32static}
%global WANT_devel      1
%endif

%if %{WANT_devel}
%global PACKAGE_devel   1
%else
%global PACKAGE_devel   0
%endif

# -----------------------

%if %{VIRT_debug}
%global WANT_debug      1
%global NEED_debug      1
%else
%global WANT_debug      0
%global NEED_debug      0
%endif

%if %{HAVE_binaries}
%global NEED_debug      %{HAVE_debugfiles}
%endif

%if %{FILES_binaries}
%global WANT_debug      %{FILES_debugfiles}
%endif

%if %{WANT_debug}
%global PACKAGE_debug   1
%else
%global PACKAGE_debug   0
%endif

# -----------------------

%if %{VIRT_wrap}
%global WANT_wrap       1
%global NEED_wrap       1
%else
%global WANT_wrap       0
%global NEED_wrap       0
%endif

%if %{HAVE_wrapper}
%global NEED_wrap       1
%endif

%if %{FILES_wrapper}
%global WANT_wrap       1
%endif

%if %{WANT_wrap}
%global PACKAGE_wrap    1
%else
%global PACKAGE_wrap    0
%endif

# -----------------------

%if %{VIRT_kmod}
%global WANT_kmod       1
%global NEED_kmod       1
%else
%global WANT_kmod       0
%global NEED_kmod       0
%endif

%if %{HAVE_modules}
%global NEED_kmod       1
%endif

%if %{FILES_modules}
%global WANT_kmod       1
%endif

%if %{WANT_kmod}
%global PACKAGE_kmod    1
%else
%global PACKAGE_kmod    0
%endif

# -----------------------

%if %{VIRT_kdev}
%global WANT_kdev       1
%global NEED_kdev       1
%else
%global WANT_kdev       0
%global NEED_kdev       0
%endif

%if %{HAVE_wrapper}
%global NEED_kdev       1
%endif
%if %{HAVE_modules}
%global NEED_kdev       1
%endif

%if %{FILES_wrapper}
%global WANT_kdev       1
%endif
%if %{FILES_modules}
%global WANT_kdev       1
%endif

%if %{WANT_kdev}
%global PACKAGE_kdev    1
%else
%global PACKAGE_kdev    0
%endif

# -----------------------

%if %{VIRT_kbug}
%global WANT_kbug       1
%global NEED_kbug       1
%else
%global WANT_kbug       0
%global NEED_kbug       0
%endif

%if %{HAVE_wrapper}
%global NEED_kbug       %{HAVE_kdebugfiles}
%endif
%if %{HAVE_modules}
%global NEED_kbug       %{HAVE_kdebugfiles}
%endif

%if %{FILES_wrapper}
%global WANT_kbug       %{FILES_kdebugfiles}
%endif
%if %{FILES_modules}
%global WANT_kbug       %{FILES_kdebugfiles}
%endif

%if %{WANT_kbug}
%global PACKAGE_kbug    1
%else
%global PACKAGE_kbug    0
%endif

# -----------------------

%if %{VIRT_ksrc}
%global WANT_ksrc       1
%global NEED_ksrc       1
%else
%global WANT_ksrc       0
%global NEED_ksrc       0
%endif

%if %{HAVE_sourcefiles}
%global NEED_ksrc       1
%endif

%if %{FILES_sourcefiles}
%global WANT_ksrc       1
%endif

%if %{WANT_ksrc}
%global PACKAGE_ksrc    1
%else
%global PACKAGE_ksrc    0
%endif

# -----------------------

%if %{VIRT_java}
%global WANT_java       1
%global NEED_java       1
%else
%global WANT_java       0
%global NEED_java       0
%endif

%if %{HAVE_jarfiles}
%global NEED_java       1
%endif
%if %{HAVE_gcjlibs}
%global NEED_java       1
%endif
%if %{HAVE_gcjmaps}
%global NEED_java       1
%endif
%if %{HAVE_jnilibs}
%global NEED_java       1
%endif

%if %{FILES_jarfiles}
%global WANT_java       1
%endif
%if %{FILES_jnilibs}
%global WANT_java       1
%endif
%if %{FILES_gcjlibs}
%global WANT_java       1
%endif
%if %{FILES_gcjmaps}
%global WANT_java       1
%endif

%if %{WANT_java}
%global PACKAGE_java    1
%else
%global PACKAGE_java    0
%endif

# -----------------------

%if %{VIRT_jdoc}
%global WANT_jdoc       1
%global NEED_jdoc       1
%else
%global WANT_jdoc       0
%global NEED_jdoc       0
%endif

%if %{HAVE_javadoc}
%global NEED_jdoc       1
%endif

%if %{FILES_javadoc}
%global WANT_jdoc       1
%endif

%if %{WANT_jdoc}
%global PACKAGE_jdoc    1
%else
%global PACKAGE_jdoc    0
%endif

# ---------------------------------------------------------------------------

%if %{NEED_virt}
%global need_virt           %{nil}
%endif

%if %{NEED_repo}
%global need_repo           %{nil}
%endif

%if %{NEED_base}
%global need_base           %{nil}
%endif

%if %{NEED_doc}
%global need_doc            %{nil}
%endif

%if %{NEED_lib}
%global need_lib            %{nil}
%endif

%if %{NEED_devel}
%global need_devel          %{nil}
%endif

%if %{NEED_debug}
%global need_debug          %{nil}
%endif

%if %{NEED_wrap}
%global need_wrap           %{nil}
%endif

%if %{NEED_kmod}
%global need_kmod           %{nil}
%endif

%if %{NEED_kdev}
%global need_kdev           %{nil}
%endif

%if %{NEED_kbug}
%global need_kbug           %{nil}
%endif

%if %{NEED_ksrc}
%global need_ksrc           %{nil}
%endif

%if %{NEED_java}
%global need_java           %{nil}
%endif

%if %{NEED_jdoc}
%global need_jdoc           %{nil}
%endif

# ---------------------------------------------------------------------------

%if %{FILES_binaries}
%global files_binaries      %{nil}
%endif
%if %{FILES_binfiles}
%global files_binfiles      %{nil}
%endif
%if %{FILES_sbinfiles}
%global files_sbinfiles     %{nil}
%endif
%if %{FILES_preloads}
%global files_preloads      %{nil}
%endif
%if %{FILES_wrapper}
%global files_wrapper       %{nil}
%endif
%if %{FILES_modules}
%global files_modules       %{nil}
%endif
%if %{FILES_oldmods}
%global files_oldmods       %{nil}
%endif
%if %{FILES_newmods}
%global files_newmods       %{nil}
%endif
%if %{FILES_libraries}
%global files_libraries     %{nil}
%endif
%if %{FILES_libstatic}
%global files_libstatic     %{nil}
%endif
%if %{FILES_lib32compat}
%global files_lib32compat   %{nil}
%endif
%if %{FILES_lib32static}
%global files_lib32static   %{nil}
%endif
%if %{FILES_perlmods}
%global files_perlmods      %{nil}
%endif
%if %{FILES_tcllibs}
%global files_tcllibs       %{nil}
%endif
%if %{FILES_gcjlibs}
%global files_gcjlibs       %{nil}
%endif
%if %{FILES_gcjmaps}
%global files_gcjmaps       %{nil}
%endif
%if %{FILES_jarfiles}
%global files_jarfiles      %{nil}
%endif
%if %{FILES_jnilibs}
%global files_jnilibs       %{nil}
%endif
%if %{FILES_locales}
%global files_locales       %{nil}
%endif
%if %{FILES_tools}
%global files_tools         %{nil}
%endif
%if %{FILES_infofiles}
%global files_infofiles     %{nil}
%endif
%if %{FILES_txtfiles}
%global files_txtfiles      %{nil}
%endif
%if %{FILES_dvifiles}
%global files_dvifiles      %{nil}
%endif
%if %{FILES_psfiles}
%global files_psfiles       %{nil}
%endif
%if %{FILES_pdffiles}
%global files_pdffiles      %{nil}
%endif
%if %{FILES_htmlfiles}
%global files_htmlfiles     %{nil}
%endif
%if %{FILES_pngfiles}
%global files_pngfiles      %{nil}
%endif
%if %{FILES_cssfiles}
%global files_cssfiles      %{nil}
%endif
%if %{FILES_initscripts}
%global files_initscripts   %{nil}
%endif
%if %{FILES_devscripts}
%global files_devscripts    %{nil}
%endif
%if %{FILES_configfiles}
%global files_configfiles   %{nil}
%endif
%if %{FILES_testfiles}
%global files_testfiles     %{nil}
%endif
%if %{FILES_test32files}
%global files_test32files   %{nil}
%endif
%if %{FILES_testscripts}
%global files_testscripts   %{nil}
%endif
%if %{FILES_sendpr}
%global files_sendpr        %{nil}
%endif
%if %{FILES_mibfiles}
%global files_mibfiles      %{nil}
%endif
%if %{FILES_snmpmods}
%global files_snmpmods      %{nil}
%endif
%if %{FILES_snmp32mods}
%global files_snmp32mods      %{nil}
%endif
%if %{FILES_gdmofiles}
%global files_gdmofiles     %{nil}
%endif
%if %{FILES_netconfig}
%global files_netconfig     %{nil}
%endif
%if %{FILES_sock2path}
%global files_sock2path     %{nil}
%endif
%if %{FILES_javadoc}
%global files_javadoc       %{nil}
%endif
%if %{FILES_manrefs}
%global files_manrefs       %{nil}
%endif
%if %{FILES_manmacros}
%global files_manmacros     %{nil}
%endif
%if %{FILES_manpages}
%global files_manpages      %{nil}
%endif
%if %{FILES_snmpconf}
%global files_snmpconf      %{nil}
%endif
%if %{FILES_debugfiles}
%global files_debugfiles    %{nil}
%endif
%if %{FILES_kdebugfiles}
%global files_kdebugfiles   %{nil}
%endif
%if %{FILES_sourcefiles}
%global files_sourcefiles   %{nil}
%endif
%if %{FILES_docfiles}
%global files_docfiles      %{nil}
%endif
%if %{FILES_includes}
%global files_includes      %{nil}
%endif
%if %{FILES_symvers}
%global files_symvers       %{nil}
%global files_kinfo         %{nil}
%endif
%if %{FILES_weakmods}
%global files_weakmods      %{nil}
%endif
%if %{FILES_kupdate}
%global files_kupdate       %{nil}
%endif
%if %{FILES_wmscripts}
%global files_wmscripts     %{nil}
%endif
%if %{FILES_mkvars}
%global files_mkvars        %{nil}
%global files_kinfo         %{nil}
%endif
%if %{FILES_yumrepo}
%global files_yumrepo       %{nil}
%endif
%if %{FILES_zypprepo}
%global files_zypprepo      %{nil}
%endif
%if %{FILES_repo}
%global files_repo          %{nil}
%endif

# ---------------------------------------------------------------------------

#global _missing_build_ids_terminate_build 1
#global _unpackaged_files_terminate_build 0
#global _missing_doc_files_terminate_build 0
#global _use_internal_dependency_generator 0

%global basearch    %{_arch}
%global baseversion @VERSION@

%global __find_provides %{_builddir}/%{name}-%{baseversion}/scripts/rpm/find-provides %{_builddir}/%{name}-%{baseversion} %{buildroot} %{_kversion}
%global __find_requires %{_builddir}/%{name}-%{baseversion}/scripts/rpm/find-requires %{_builddir}/%{name}-%{baseversion} %{buildroot} %{_kversion}
%global __check_files   %{_builddir}/%{name}-%{baseversion}/scripts/rpm/check-files %{buildroot}

# ---------------------------------------------------------------------------

# we have some more options that control configure for the build
%{?disturl:%{!?url:%{expand: %%global url %{disturl}}}}
%global rpmrelease @PACKAGE_RPMRELEASE@
# specrelease is the specific release (e.g. 1.centos5)
%{?extrarelease:  %{expand: %%global specrelease @PACKAGE_RPMRELEASE@%%{extrarelease}}}
%{!?extrarelease: %{expand: %%global specrelease @PACKAGE_RPMRELEASE@}}
# basrelease is the base release (e.g. 1.el5)
%{?extrarelease2:  %{expand: %%global baserelease @PACKAGE_RPMRELEASE@%%{extrarelease2}}}
%{!?extrarelease2: %{expand: %%global baserelease @PACKAGE_RPMRELEASE@}}

%global HAVE_susekmps 0
%global HAVE_rhatkmps %{HAVE_weakmods}
%if %{HAVE_zypprepo}
%global HAVE_susekmps %{HAVE_weakmods}
%global HAVE_rhatkmps 0
%endif
%if %(test '%{_vendor}' = 'suse' && echo 1 || echo 0)
%global HAVE_susekmps %{HAVE_weakmods}
%global HAVE_rhatkmps 0
%endif


%global kspecrelease %{baserelease}
# RedHat adds a mogrified kernel version string to the kmp release (or commonly not at all).
%if %{HAVE_rhatkmps}
%global kbaserelease %{rpmrelease}%(echo '.%{_kversion}' | sed -e 'y,-,.,')
%global krelsrequire %{nil}
%else
%global kbaserelease %{baserelease}
%global krelsrequire -%{baserelease}
%endif

# SuSE adds a mogrified kernel version string to the kmp version.
%if %{HAVE_susekmps}
%global kbaseversion %{baseversion}%(echo '_%{kernel_source}' | sed -r -e 'y,-,_,;s,^(2\.6\.2[0-9]+)_,\\1.0_,')
%global kspecversion %{baseversion}
%global kversrequire %{nil}
%else
%global kbaseversion %{baseversion}
%global kspecversion %{baseversion}
%global kversrequire = %{epoch}:%{baseversion}%{krelsrequire}
%endif

%if %{HAVE_weakmods}
%if %{HAVE_rhatkmps}
%global kernel_package %{name}-kmod%{kernel_flavor}
%global kernel_buginfo %{name}-kmod%{kernel_flavor}-debuginfo
%global kernel_bugsrce %{name}-kmod%{kernel_flavor}-debugsource
%global kernel_develop %{name}-kmod%{kernel_flavor}-devel
%global kernel_sourcep %{name}-kmod%{kernel_flavor}-source
%endif
%if %{HAVE_susekmps}
%global kernel_package %{name}-kmp%{kernel_flavor}
%global kernel_buginfo %{name}-kmp%{kernel_flavor}-debuginfo
%global kernel_bugsrce %{name}-kmp%{kernel_flavor}-debugsource
%global kernel_develop %{name}-kmp%{kernel_flavor}-devel
%global kernel_sourcep %{name}-kmp%{kernel_flavor}-source
%endif
%else
%global kernel_package %{name}-%{_kversion}
%global kernel_buginfo %{name}-debuginfo-%{_kversion}
%global kernel_bugsrce %{name}-debugsource-%{_kversion}
%global kernel_develop %{name}-devel-%{_kversion}
%global kernel_sourcep %{name}-source-%{_kversion}
%endif

# a macro to [build] require one package of the same version as another (possibly virtual) package
# use the arguments [Build]Requires: package1 [>]= package2
%global requires_prov() %{expand: %(LANG= rpm -q --provides %3 --qf "%1 %2 %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|%1|')}%{nil}
%global version_of_or() %{expand: %(LANG= rpm -q --provides %1 --qf "= %%{EPOCH}:%%{VERSION}-%%{RELEASE}\\n" | tail -1 | sed -e 's|.*is not.*$|>= %2|')}%{nil}

%global descripline %{title} provides Linux Fast-STREAMS for Linux.

%if %(test '%{_vendor}' = 'suse' && echo 1 || echo 0)
#global descriptail #(echo -en '\\n\\n\\nAuthors\\n-------\\n    Brian Bidulock, <bidulock@openss7.org>\\nDistribution: #{distribution} (#{_target_cpu})')
%global descriptail %(echo -en '\\n\\nAuthors:\\n--------\\n    Brian Bidulock, <bidulock@openss7.org>')
%else
%global descriptail %{nil}
%endif

Summary:        %{title} for Linux
Name:           @PACKAGE@
Epoch:          @PACKAGE_RPMEPOCH@
Version:        @VERSION@
Release:        %{rpmrelease}
License:        %{license}
Group:          System Environment/Kernel
%{?url:URL:     %{url}}
%{?_xpm_icon:Icon: %{_xpm_icon}}
%{?_gif_icon:Icon: %{_gif_icon}}
ExclusiveArch:  %{ix86} k6 x86_64 s390 s390x ppc ppciseries ppcpseries ppc64 arm armv4l sh mips mipsel noarch
ExclusiveOs:    Linux
#Source:         %{name}-%{baseversion}.tar.bz2
Source:         http://www.openss7.org/tarballs/%{name}-%{baseversion}.tar.bz2
%{!?buildroot:BuildRoot: %{_tmppath}/%{name}-%{baseversion}-%{specrelease}-root}
Autoreq:        true
Autoprov:       true

# duh!
#BuildRequires:    @RPM@
#BuildRequires:    @SED@
#BuildRequires:    @AWK@

%global newgcc %(if test `gcc -v 2>&1 | grep 'gcc version' | sed -e 's|gcc version ||;s| .*$||'` != '2.95.3' ; then echo 1 ; else echo 0 ; fi)

%ifnarch noarch
%ifarch s390 s390x
BuildRequires:    gcc >= 2.95.3
%else
%ifarch %all_ppc
BuildRequires:    gcc >= 2.96-75
%else
%if %newgcc
BuildRequires:    gcc >= 2.96-98
%else
BuildRequires:    gcc = 2.95.3
%endif
%endif
%endif
%if %newgcc
BuildRequires:    gcc >= 2.96
%else
BuildRequires:    gcc = 2.95.3
%endif
%endif

# TODO: FC4 wants kernel-devel not kernel-source
# older rpm can't handle nested ifs
%if %{kernel_fedora}
BuildRequires:    kernel-devel = %{kernel_source}
%endif
%if %{kernel_others}
BuildRequires:    kernel-source = %{kernel_source}
%endif
%if %{BUILD_modules}
BuildRequires:    modutils >= 2.4.12
%endif

%if %{HAVE_oldmods}
# to generate kernel symbols:
BuildRequires:    @GENKSYMS@
%endif

# We actually have a really big long list of BuildRequires here.  These are all of the utilities
# that the `configure' script is going to barf over if they are not present.  Also, several things
# that it will not (such as missing ctags which are still used by the check scripts).  We could get
# rather detailed here.  One of the problems is that not all programs are in the same place on all
# systems (and we would like to use one SRPM for all RPM architectures) and package names are
# different.  We can just let the `configure' script figure out for which things errors are worth
# generating.

# these are some needs of the configure script to manipulate manual pages:
BuildRequires:    @GROFF@
BuildRequires:    @SOELIM@
BuildRequires:    @REFER@
BuildRequires:    @TBL@
BuildRequires:    @PIC@
BuildRequires:    @GZIP_CMD@
BuildRequires:    @BZIP2_CMD@
#BuildRequires:    @MAKEWHATIS@

# these are for generating (non-java) documentation
#BuildRequires:    @BIBTEX@
#BuildRequires:    @CONVERT@
#BuildRequires:    @DVI2PS@
#BuildRequires:    @DVIPDF@
#BuildRequires:    @EPSTOPDF@
#BuildRequires:    @FIG2DEV@
#BuildRequires:    @GNUPLOT@
#BuildRequires:    @LATEX2HTML@
#BuildRequires:    @LATEX@
#BuildRequires:    @PDFLATEX@
#BuildRequires:    @PDFTEX@
#BuildRequires:    @PS2EPSI@
#BuildRequires:    @PS2PDF@
#BuildRequires:    @PSLATEX@
#BuildRequires:    @TEX@

# these are for compiling and generating java documentation
#BuildRequires:    /usr/bin/gcj
#BuildRequires:    @GCJDBTOOL@
#BuildRequires:    @GCJH@
#BuildRequires:    @JAR@
#BuildRequires:    @JARSIGNER@
#BuildRequires:    @JAVAC@
#BuildRequires:    @JAVADOC@
#BuildRequires:    @JAVAH@
#BuildRequires:    @KEYTOOL@
#BuildRequires:    @ZIP@

# these are for running check scripts
#BuildRequires:    /usr/bin/ctags
#BuildRequires:    @OBJDUMP@

# don't know about this: I thought swig intermediaries were distributed
#BuildRequires:    @SWIG@

# not for building, just for installing or removing
#BuildRequires:    @CHKCONFIG@
#BuildRequires:    @DEPMOD@
#BuildRequires:    @LDCONFIG@
#BuildRequires:    @LSMOD@
#BuildRequires:    @LSOF@
#BuildRequires:    @MODPROBE@

# just for building repos and releases I think
#BuildRequires:    @CREATEREPO@
#BuildRequires:    @DOXYGEN@
#BuildRequires:    @GPG@
#BuildRequires:    @LZMA_CMD@
#BuildRequires:    @MD5SUM@
#BuildRequires:    @SHA1SUM@
#BuildRequires:    @SHA256SUM@
#BuildRequires:    @XZ_CMD@

%if %{BUILD_snmp}
# when providing snmp agents, the following are required:
#BuildRequires:   lm_sensors-devel
#BuildRequires:   net-snmp-libs
#BuildRequires:   net-snmp-devel
%endif

# to build documentation
#BuildRequires:   transfig >= 3.2
#BuildRequires:   ImageMagick
#BuildRequires:   tetex >= 1.0
#BuildRequires:   ghostscript >= 6.51
# to install documentation
#BuildRequires:   texinfo >= 4.0

# This is a virtual package that we want to pull in all the necessary
# packages for a full run-time system.
%if %{NEED_repo}
Requires:           %{name}-repo
%endif
%if %{NEED_base}
Requires:           %{name}-base    = %{epoch}:%{baseversion}
%endif

Provides:           %{name} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name} = %{epoch}:%{baseversion}-%{rpmrelease}

# ---------------------------------------------------------------------------
%description
%{descripline}
The %{name} package includes kernel modules, STREAMS drivers, modules,
libraries, utilities, test programs, daemons, and development
environment for the development and execution of %{title} drivers,
components and applications for the STREAMS environment.  This
distribution is currently applicable to 2.4 and 2.6 kernels and is
validated for ix86, x86_64, ppc and ppc64 architectures, but should
build and install well for other architectures.  This package includes
the following binary packages:

%{?need_virt: - %{name}}
%{?need_virt:   -- copyright info, change logs, virtual base package.}
%{?need_repo: - %{name}-repo}
%{?need_repo:   -- yum or zypper repository source definitions.}
%{?need_base: - %{name}-base}
%{?need_base:   -- admin and user docs, man pages, manual, info files, devices, init}
%{?need_base:      scripts, configs, mibs, test utils.}
%{?need_doc: - %{name}-doc}
%{?need_doc:   -- developer and programmer docs, man pages, papers, projects,}
%{?need_doc:      manuals, info files, javadoc.}
%{?need_lib: - %{name}-lib}
%{?need_lib:   -- shared libraries and utilities.}
%{?need_devel: - %{name}-devel}
%{?need_devel:   -- headers, static libraries.}
%{?need_debug: - %{name}-debuginfo}
%{?need_debug:   -- binary application and library debug info.}
%{?need_debug: - %{name}-debugsource}
%{?need_debug:   -- binary application and library debug source.}
%{?need_kmod: - %{kernel_package}}
%{?need_kmod:   -- kernel modules.}
%{?need_kdev: - %{kernel_develop}}
%{?need_kdev:   -- kernel module info.}
%{?need_kbug: - %{kernel_buginfo}}
%{?need_kbug:   -- kernel module debug info.}
%{?need_kbug: - %{kernel_bugsrce}}
%{?need_kbug:   -- kernel module debug source.}
%{?need_ksrc: - %{kernel_sourcep}}
%{?need_ksrc:   -- configured source.}
%{?need_java: - %{name}-java}
%{?need_java:   -- JAIN java modules, JNI/CNI libraries, and native Java modules.}
%{?need_jdoc: - %{name}-javadoc}
%{?need_jdoc:   -- Javadoc documentation for JAIN APIs and implementation.}

The %{name} binary package provides documentation, device definitions,
Sys V init scripts and configuration files, SNMP MIB definitions, and
test suites.

Documentation includes text, html, info and pdf (texinfo) documentation
and manuals for the development of applications, modules and drivers, as
well as the installation and reference manual.  Also included are
extensive manual pages for the entire package, including manual pages
for commands, administrative utilities, user interfaces, and kernel
functions.

Device definitions are necessary to run applications programs and
utilities.  On older systems, this binary creates the devices
themselves.  On newer systems, this binary package includes the
executable for creating devices from init scripts.  Init scripts load
kernel modules, create devices, and apply system configuration
customizations at boot.

SNMP MIB defintions for managing the package with external SNMP
management tools.  Autotest validation testsuites are used for
validating and troubleshooting.  Also included is the send-pr script for
generating and submitting problem reports to @PACKAGE_BUGREPORT@.
%{descriptail}

%prep
# ---------------------------------------------------------------------------

%setup -q -n %{name}-%{baseversion}

%build
# ---------------------------------------------------------------------------

%global cache_file %{_host}-%{kernel_version}-config.cache
%global csite_file %{_host}-config.site
%global mpost_file %{_host}-%{kernel_version}-modpost.cache

%define enable()  %(echo "%1" | sed -e 's|^--with-|--enable-|')%{nil}
%define disable() %(echo "%1" | sed -e 's|^--without-|--disable-|')%{nil}

./configure \
    ${CC+CC="${CC}"} \
    ${CFLAGS+CFLAGS="${CFLAGS}"} \
    ${LD+LD="${LD}"} \
    ${LDFLAGS+LDFLAGS="${LDFLAGS}"} \
    ${CPPFLAGS+CPPFLAGS="${CPPFLAGS}"} \
    ${CPP+CPP="${CPP}"} \
    ${CXX+CXX="${CXX:-$CC}"} \
    ${CXX-${CC+CXX="$CC"}} \
    ${CXXFLAGS+CXXFLAGS="${CXXFLAGS}"} \
    ${CXXFLAGS-${CFLAGS+CXXFLAGS="$CFLAGS"}} \
    ${CXXCPP+CXXCPP="${CXXCPP:-$CPP}"} \
    ${CXXCPP-${CPP+CXXCPP="$CPP"}} \
    CONFIG_SITE="%{_builddir}/%{csite_file}" \
    MODPOST_CACHE="%{_builddir}/%{mpost_file}" \
    %{?_jnidir:jnidir=%{_jnidir}} \
    %{?_javadir:javadir=%{_javadir}} \
    %{?_javadocdir:javadocdir=%{_javadocdir}} \
    %{?_perldir:perldir=%{_perldir}} \
    %{?_tcllibdir:tcllibdir=%{_tcllibdir}} \
    %{?_tclsrcdir:tclsrcdir=%{_tclsrcdir}} \
    --cache-file="%{_builddir}/%{cache_file}" \
    --prefix=%{_prefix} \
    --build=%{_build} \
    --host=%{_host} \
    --exec-prefix=%{_exec_prefix} \
    --bindir=%{_bindir} \
    --sbindir=%{_sbindir} \
    --sysconfdir=%{_sysconfdir} \
    --datadir=%{_datadir} \
    --includedir=%{_includedir} \
    --libdir=%{_libdir} \
    --libexecdir=%{_libexecdir} \
    --localstatedir=%{_localstatedir} \
    --sharedstatedir=%{_sharedstatedir} \
    --mandir=%{_mandir} \
    --infodir=%{_infodir} \
    --datarootdir=%{_datarootdir} \
    --docdir=%{_docdir}/@PACKAGE@-@VERSION@ \
    --htmldir=%{_htmldir}/@PACKAGE@-@VERSION@ \
    --dvidir=%{_dvidir}/@PACKAGE@-@VERSION@ \
    --pdfdir=%{_pdfdir}/@PACKAGE@-@VERSION@ \
    --psdir=%{_psdir}/@PACKAGE@-@VERSION@ \
    --localedir=%{_localedir} \
    --disable-maintainer-mode \
    --with-k-release=%{kernel_version} \
    --with-k-modules=%{_kmoduledir} \
    --with-k-subdir=%{_ksubdir} \
    %{?_with_dependency_tracking            '%enable %_with_dependency_tracking'} \
    %{?_without_dependency_tracking         '%disable %_without_dependency_tracking'} \
    %{?_with_silent_rules                   '%enable %_with_silent_rules'} \
    %{?_without_silent_rules                '%disable %_without_silent_rules'} \
    %{?_with_pkg_epoch:                     '%_with_pkg_epoch'} \
    %{?_without_pkg_epoch:                  '%_without_pkg_epoch'} \
    %{?_with_pkg_release:                   '%_with_pkg_release'} \
    %{?_without_pkg_release:                '%_without_pkg_release'} \
    %{?_with_pkg_patchlevel:                '%_with_pkg_patchlevel'} \
    %{?_without_pkg_patchlevel:             '%_without_pkg_patchlevel'} \
    %{?_with_rpm_epoch:                     '%_with_rpm_epoch'} \
    %{?_without_rpm_epoch:                  '%_without_rpm_epoch'} \
    %{?_with_rpm_release:                   '%_with_rpm_release'} \
    %{?_without_rpm_release:                '%_without_rpm_release'} \
    %{?_with_rpm_extra:                     '%_with_rpm_extra'} \
    %{?_without_rpm_extra:                  '%_without_rpm_extra'} \
    %{?_with_deb_epoch:                     '%_with_deb_epoch'} \
    %{?_without_deb_epoch:                  '%_without_deb_epoch'} \
    %{?_with_deb_release:                   '%_with_deb_release'} \
    %{?_without_deb_release:                '%_without_deb_release'} \
    %{?_with_arch:                          '%enable %_with_arch'} \
    %{?_without_arch:                       '%disable %_without_arch'} \
    %{?_with_indep:                         '%enable %_with_indep'} \
    %{?_without_indep:                      '%disable %_without_indep'} \
    %{?_with_checks:                        '%enable %_with_checks'} \
    %{?_without_checks:                     '%disable %_without_checks'} \
    %{?_with_autotest:                      '%enable %_with_autotest'} \
    %{?_without_autotest:                   '%disable %_without_autotest'} \
    %{?_with_cooked_manpages:               '%_with_cooked_manpages'} \
    %{?_without_cooked_manpages:            '%_without_cooked_manpages'} \
    %{?_with_public:                        '%enable %_with_public'} \
    %{?_without_public:                     '%disable %_without_public'} \
    %{?_with_k_package:                     '%enable %_with_k_package'} \
    %{?_without_k_package:                  '%disable %_without_k_package'} \
    %{?_with_k_optimize:                    '%_with_k_optimize'} \
    %{?_with_k_debug:                       '%enable %_with_k_debug'} \
    %{?_without_k_debug:                    '%disable %_without_k_debug'} \
    %{?_with_k_test:                        '%enable %_with_k_test'} \
    %{?_without_k_test:                     '%disable %_without_k_test'} \
    %{?_with_k_safe:                        '%enable %_with_k_safe'} \
    %{?_without_k_safe:                     '%disable %_without_k_safe'} \
    %{?_with_k_inline:                      '%enable %_with_k_inline'} \
    %{?_without_k_inline:                   '%disable %_without_k_inline'} \
    %{?_with_devel:                         '%enable %_with_devel'} \
    %{?_without_devel:                      '%disable %_without_devel'} \
    %{?_with_docs:                          '%enable %_with_docs'} \
    %{?_without_docs:                       '%disable %_without_docs'} \
    %{?_with_tools:                         '%enable %_with_tools'} \
    %{?_without_tools:                      '%disable %_without_tools'} \
    %{?_with_modules:                       '%enable %_with_modules'} \
    %{?_without_modules:                    '%disable %_without_modules'} \
    %{?_with_devfs:                         '%enable %_with_devfs'} \
    %{?_without_devfs:                      '%disable %_without_devfs'} \
    %{?_with_snmp_agent:                    '%_with_snmp_agent'} \
    %{?_without_snmp_agent:                 '%_without_snmp_agent'} \
    %{?_with_java:                          '%enable %_with_java'} \
    %{?_without_java:                       '%disable %_without_java'} \
    %{?_with_solaris_cmn_err:               '%_with_solaris_cmn_err'} \
    %{?_without_solaris_cmn_err:            '%_without_solaris_cmn_err'} \
    %{?_with_solaris_consts:                '%_with_solaris_consts'} \
    %{?_without_solaris_consts:             '%_without_solaris_consts'} \
    %{?_with_k_modversions:                 '%enable %_with_k_modversions'} \
    %{?_without_k_modversions:              '%disable %_without_k_modversions'} \
    %{?_with_k_cache:                       '%enable %_with_k_cache'} \
    %{?_without_k_cache:                    '%disable %_without_k_cache'} \
    %{?_with_k_timers:                      '%enable %_with_k_timers'} \
    %{?_without_k_timers:                   '%disable %_without_k_timers'} \
    %{?_with_broken_cpu_flags:              '%enable %_with_broken_cpu_flags'} \
    %{?_without_broken_cpu_flags:           '%disable %_without_broken_cpu_flags'} \
    %{?_with_atomic_stats:                  '%enable %_with_atomic_stats'} \
    %{?_without_atomic_stats:               '%disable %_without_atomic_stats'} \
    %{?_with_xns:                           '%_with_xns'} \
    %{?_without_xns:                        '%_without_xns'} \
    %{?_with_tli:                           '%_with_tli'} \
    %{?_without_tli:                        '%_without_tli'} \
    %{?_with_inet:                          '%_with_inet'} \
    %{?_without_inet:                       '%_without_inet'} \
    %{?_with_xnet:                          '%_with_xnet'} \
    %{?_without_xnet:                       '%_without_xnet'} \
    %{?_with_sock:                          '%_with_sock'} \
    %{?_without_sock:                       '%_without_sock'} \
    %{?_with_streams_syncqs:                '%enable %_with_streams_syncqs'} \
    %{?_without_streams_syncqs:             '%disable %_without_streams_syncqs'} \
    %{?_with_streams_kthreads:              '%enable %_with_streams_kthreads'} \
    %{?_without_streams_kthreads:           '%disable %_without_streams_kthreads'} \
    %{?_with_streams_utils:                 '%enable %_with_streams_utils'} \
    %{?_without_streams_utils:              '%disable %_without_streams_utils'} \
    %{?_with_big_compile:                   '%enable %_with_big_compile'} \
    %{?_without_big_compile:                '%disable %_without_big_compile'} \
    %{?_with_wrapper_module:                '%enable %_with_wrapper_module'} \
    %{?_without_wrapper_module:             '%disable %_without_wrapper_module'} \
    %{?_with_module_sth:                    '%enable %_with_module_sth'} \
    %{?_without_module_sth:                 '%disable %_without_module_sth'} \
    %{?_with_module_bufmod:                 '%enable %_with_module_bufmod'} \
    %{?_without_module_bufmod:              '%disable %_without_module_bufmod'} \
    %{?_with_module_nullmod:                '%enable %_with_module_nullmod'} \
    %{?_without_module_nullmod:             '%disable %_without_module_nullmod'} \
    %{?_with_module_pipemod:                '%enable %_with_module_pipemod'} \
    %{?_without_module_pipemod:             '%disable %_without_module_pipemod'} \
    %{?_with_module_connld:                 '%enable %_with_module_connld'} \
    %{?_without_module_connld:              '%disable %_without_module_connld'} \
    %{?_with_module_sc:                     '%enable %_with_module_sc'} \
    %{?_without_module_sc:                  '%disable %_without_module_sc'} \
    %{?_with_module_testmod:                '%enable %_with_module_testmod'} \
    %{?_without_module_testmod:             '%disable %_without_module_testmod'} \
    %{?_with_driver_clone:                  '%enable %_with_driver_clone'} \
    %{?_without_driver_clone:               '%disable %_without_driver_clone'} \
    %{?_with_driver_echo:                   '%enable %_with_driver_echo'} \
    %{?_without_driver_echo:                '%disable %_without_driver_echo'} \
    %{?_with_driver_fifo:                   '%enable %_with_driver_fifo'} \
    %{?_without_driver_fifo:                '%disable %_without_driver_fifo'} \
    %{?_with_driver_log:                    '%enable %_with_driver_log'} \
    %{?_without_driver_log:                 '%disable %_without_driver_log'} \
    %{?_with_driver_loop:                   '%enable %_with_driver_loop'} \
    %{?_without_driver_loop:                '%disable %_without_driver_loop'} \
    %{?_with_driver_nsdev:                  '%enable %_with_driver_nsdev'} \
    %{?_without_driver_nsdev:               '%disable %_without_driver_nsdev'} \
    %{?_with_driver_mux:                    '%enable %_with_driver_mux'} \
    %{?_without_driver_mux:                 '%disable %_without_driver_mux'} \
    %{?_with_driver_nuls:                   '%enable %_with_driver_nuls'} \
    %{?_without_driver_nuls:                '%disable %_without_driver_nuls'} \
    %{?_with_driver_pipe:                   '%enable %_with_driver_pipe'} \
    %{?_without_driver_pipe:                '%disable %_without_driver_pipe'} \
    %{?_with_driver_sad:                    '%enable %_with_driver_sad'} \
    %{?_without_driver_sad:                 '%disable %_without_driver_sad'} \
    %{?_with_driver_sfx:                    '%enable %_with_driver_sfx'} \
    %{?_without_driver_sfx:                 '%disable %_without_driver_sfx'} \
    %{?_with_driver_spx:                    '%enable %_with_driver_spx'} \
    %{?_without_driver_spx:                 '%disable %_without_driver_spx'} \
    %{?_with_streams_fifos:                 '%enable %_with_streams_fifos'} \
    %{?_without_streams_fifos:              '%disable %_without_streams_fifos'} \
    %{?_with_streams_bcm:                   '%enable %_with_streams_bcm'} \
    %{?_without_streams_bcm:                '%disable %_without_streams_bcm'} \
    %{?_with_compat_os7:                    '%enable %_with_compat_os7'} \
    %{?_without_compat_os7:                 '%disable %_without_compat_os7'} \
    %{?_with_compat_svr3:                   '%enable %_with_compat_svr3'} \
    %{?_without_compat_svr3:                '%disable %_without_compat_svr3'} \
    %{?_with_compat_svr4:                   '%enable %_with_compat_svr4'} \
    %{?_without_compat_svr4:                '%disable %_without_compat_svr4'} \
    %{?_with_compat_mps:                    '%enable %_with_compat_mps'} \
    %{?_without_compat_mps:                 '%disable %_without_compat_mps'} \
    %{?_with_compat_sol8:                   '%enable %_with_compat_sol8'} \
    %{?_without_compat_sol8:                '%disable %_without_compat_sol8'} \
    %{?_with_compat_uw7:                    '%enable %_with_compat_uw7'} \
    %{?_without_compat_uw7:                 '%disable %_without_compat_uw7'} \
    %{?_with_compat_osf:                    '%enable %_with_compat_osf'} \
    %{?_without_compat_osf:                 '%disable %_without_compat_osf'} \
    %{?_with_compat_aix:                    '%enable %_with_compat_aix'} \
    %{?_without_compat_aix:                 '%disable %_without_compat_aix'} \
    %{?_with_compat_hpux:                   '%enable %_with_compat_hpux'} \
    %{?_without_compat_hpux:                '%disable %_without_compat_hpux'} \
    %{?_with_compat_irix:                   '%enable %_with_compat_irix'} \
    %{?_without_compat_irix:                '%disable %_without_compat_irix'} \
    %{?_with_compat_mac:                    '%enable %_with_compat_mac'} \
    %{?_without_compat_mac:                 '%disable %_without_compat_mac'} \
    %{?_with_sctp_slow_verification:        '%enable %_with_sctp_slow_verification'} \
    %{?_without_sctp_slow_verification:     '%disable %_without_sctp_slow_verification'} \
    %{?_with_sctp_throttle_heartbeats:      '%enable %_with_sctp_throttle_heartbeats'} \
    %{?_without_sctp_throttle_heartbeats:   '%disable %_without_sctp_throttle_heartbeats'} \
    %{?_with_sctp_discard_ootb:             '%enable %_with_sctp_discard_ootb'} \
    %{?_without_sctp_discard_ootb:          '%disable %_without_sctp_discard_ootb'} \
    %{?_with_sctp_extended_ip_support:      '%enable %_with_sctp_extended_ip_support'} \
    %{?_without_sctp_extended_ip_support:   '%disable %_without_sctp_extended_ip_support'} \
    %{?_with_sctp_hmac_sha1:                '%enable %_with_sctp_hmac_sha1'} \
    %{?_without_sctp_hmac_sha1:             '%disable %_without_sctp_hmac_sha1'} \
    %{?_with_sctp_hmac_md5:                 '%enable %_with_sctp_hmac_md5'} \
    %{?_without_sctp_hmac_md5:              '%disable %_without_sctp_hmac_md5'} \
    %{?_with_sctp_adler32:                  '%enable %_with_sctp_adler32'} \
    %{?_without_sctp_adler32:               '%disable %_without_sctp_adler32'} \
    %{?_with_sctp_crc32c:                   '%enable %_with_sctp_crc32c'} \
    %{?_without_sctp_crc32c:                '%disable %_without_sctp_crc32c'} \
    %{?_with_sctp_throttle_passiveopens:    '%enable %_with_sctp_throttle_passiveopens'} \
    %{?_without_sctp_throttle_passiveopens: '%disable %_without_sctp_throttle_passiveopens'} \
    %{?_with_sctp_ecn:                      '%enable %_with_sctp_ecn'} \
    %{?_without_sctp_ecn:                   '%disable %_without_sctp_ecn'} \
    %{?_with_sctp_lifetimes:                '%enable %_with_sctp_lifetimes'} \
    %{?_without_sctp_lifetimes:             '%disable %_without_sctp_lifetimes'} \
    %{?_with_sctp_add_ip:                   '%enable %_with_sctp_add_ip'} \
    %{?_without_sctp_add_ip:                '%disable %_without_sctp_add_ip'} \
    %{?_with_sctp_adaptation_layer_info:    '%enable %_with_sctp_adaptation_layer_info'} \
    %{?_without_sctp_adaptation_layer_info: '%disable %_without_sctp_adaptation_layer_info'} \
    %{?_with_sctp_partial_reliability:      '%enable %_with_sctp_partial_reliability'} \
    %{?_without_sctp_partial_reliability:   '%disable %_without_sctp_partial_reliability'} \
    %{?_with_sctp_debug:                    '%enable %_with_sctp_debug'} \
    %{?_without_sctp_debug:                 '%disable %_without_sctp_debug'} \
    %{?_with_sctp_error_generator:          '%enable %_with_sctp_error_generator'} \
    %{?_without_sctp_error_generator:       '%disable %_without_sctp_error_generator'} \
    %{?_with_sctp:                          '%_with_sctp'} \
    %{?_without_sctp:                       '%_without_sctp'} \
    %{?_with_sctp2:                         '%_with_sctp2'} \
    %{?_without_sctp2:                      '%_without_sctp2'} \
    || { rm -f %{_builddir}/%{cache_file} ; exit 1 ; }

make
%{?files_txtfiles:make txt}
%{?files_dvifiles:make dvi}
%{?files_psfiles:make ps}
%{?files_pdffiles:make pdf}
%{?files_htmlfiles:make html}
#make check

%install
# ---------------------------------------------------------------------------

# in case it was not cleaned
[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot} || :

# if we are going to create debug packages, we need to install unstripped
# binaries; otherwise use libtoolized install-strip to strip binaries, modules,
# shared and static libraries.
make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" \
    %{!?_enable_debug_packages: install-strip} \
    %{?_enable_debug_packages: install}

%{?files_txtfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-txt}
%{?files_dvifiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-dvi}
%{?files_psfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-ps}
%{?files_pdffiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-pdf}
%{?files_htmlfiles:make DESTDIR="%{buildroot}" RPM_BUILD_ROOT="%{buildroot}" install-html}

# copy out our devices list
# cp -pf %{mybuilddir}/%{makedev} .

# get the installed info directory out of the build root
[ -e "%{buildroot}/%{_infodir}/dir" ] && rm -f "%{buildroot}/%{_infodir}/dir" || :

package_source () {
# remove include2 symbolic link
    rm -fr include2
# punch rpm release to Custom
    echo '.Custom.1'  > .rpmextra
# create configured source directory for source package
    mkdir -p %{buildroot}%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}
# tar and move the sources for source release
    tar cf - . | tar xf - -C %{buildroot}%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}
# clean out binaries and auxilliary files
    ( cd %{buildroot}%{_usrsrc}/%{name}-%{baseversion}-%{specrelease} ; make V=1 mostlyclean )
# create symbolic link
    ( cd %{buildroot}%{_usrsrc} ; ln -sf %{name}-%{baseversion}-%{specrelease} %{name} )
}

# should not be necessary except for the cache files
package_mkvars () {
    d=%{buildroot}%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}
# create kernel-specific info directory
    mkdir -p $d
# copy in makefile variables file
    cp -p Module.mkvars $d
# copy in autoconf site and cache files for reference
    cp -p %{_builddir}/%{csite_file} $d
    cp -p %{_builddir}/%{cache_file} $d
}

# should not be necessary except for the cache files
package_symvers () {
    d=%{buildroot}%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}
# create kernel-specific info directory
    mkdir -p $d
# copy in symbol versions file
    cp -p System.symvers $d
    cp -p Module.symvers $d
    cp -p Modules.map $d
# create symbol versions file
    cat System.symvers Module.symvers | gzip > $d/symvers-%{_kversion}.gz
# copy in symbol sets file
    cp -p %{kernel_symsets} $d
# copy in symbol sets file to boot directory as well
#   mkdir -p %{buildroot}/boot
#   cp -p %{kernel_symsets} %{buildroot}/boot
# copy in modpost cache file for reference
    cp -p %{_builddir}/%{mpost_file} $d
}

package_yumplugin () {
    d=%{buildroot}%{_yumplugdir}
    mkdir -p $d
    cp -p src/python/yum-plugins/*.py* $d
    d=%{buildroot}%{_yumconfdir}
    mkdir -p $d
    cp -p src/python/yum-plugins/*.conf $d
}

%if %{FILES_mkvars}
package_mkvars
%endif
%if %{FILES_symvers}
package_symvers
%endif
%if %{FILES_sourcefiles}
package_source
%endif
%if %{FILES_yumrepo}
package_yumplugin
%endif

%if %{HAVE_manrefs}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{manrefs}"
#export EXCLUDE_FROM_COMPRESS
%endif
%if %{HAVE_manmacros}
# stupid mandrake spec-helper will compress our macros files otherwise
#EXCLUDE_FROM_COMPRESS="${EXCLUDE_FROM_COMPRESS:+$EXCLUDE_FROM_COMPRESS }%{manmacros}"
#export EXCLUDE_FROM_COMPRESS
%endif

# stupid suse check compresses everything (including our macro files)
#{?suse_check: %{expand: %%define suse_check echo "SuSE Check skipped"}}

%clean
# ---------------------------------------------------------------------------

[ -n "%{buildroot}" -a "%{buildroot}" != / ] && rm -rf %{buildroot} || :

%if %{PACKAGE_virt}
%files
# ---------------------------------------------------------------------------
# A big problem with using the %doc macro is that it cleans out _docdir before
# copying in the files.  We have all our openss7-doc package files in there so
# there is an error when the openss7-doc package tries to move its files.  So,
# we do not do that, but we still want a virtual package, so leave and empty
# files section.
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_docfiles:%docdir %{_docdir}}
%{?files_docfiles:%{?locales:%{_docdir}/@PACKAGE@-@VERSION@/ABOUT-NLS}}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/AUTHORS}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/BUGS}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/COPYING}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/ChangeLog}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/INSTALL}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/INSTALL-%{name}}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/LICENSES}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/LSM}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/MANUAL}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NEWS}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.cos53}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.kmod}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.kmp}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.ksyms}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.repo}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.rpm}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/NOTES.sles}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/PROBLEMS}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/README}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/README-alpha}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/README-cvs}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/README-make}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/THANKS}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/TODO}
%{?files_docfiles:%{_docdir}/@PACKAGE@-@VERSION@/%{name}-%{baseversion}.lsm}
%endif

# ===========================================================================
%package repo
# ---------------------------------------------------------------------------
# This package contains the repository definitions for yum or zypper
# repositories and the scripts necessary to ensure that the kernel pinning
# options and multiversioning are correct.
# ---------------------------------------------------------------------------

Summary:            %{title} repository setup package.
Group:              System Environment/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_yumrepo}
#refix:             %{_yumrepodir}
#refix:             %{_rpmgpgdir}
Prefix:             %{_yumplugdir}
Prefix:             %{_yumconfdir}
%endif

%if %{FILES_zypprepo}
#refix:             %{_zypprepodir}
%endif

%if %{FILES_yumrepo}
Requires:           yum
Requires(prereq):   yum
#equires(pre):      yum
#equires(preun):    yum
#equires(post):     yum
#equires(postun):   yum
#equires(post):     yum-kmod
%endif

%if %{FILES_zypprepo}
Requires:           zypper
Requires(prereq):   zypper
#equires(pre):      zypper
#equires(preun):    zypper
#equires(post):     zypper
#equires(postun):   zypper
%endif

%if %{FILES_repo}
Requires(prereq):   wget
Requires(pre):      %(which wget)
Requires(pre):      %(which sed)
Requires(pre):      %(which awk)
%endif

Provides:           %{name}-repo    = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-repo    = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-repo    = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description repo
The %{name}-repo binary package contains the repostory source and
package updater information necessary to properly establish the
OpenSS7 repository definitions for installing the other packages
in the set.
%{descriptail}

%pre repo
# ---------------------------------------------------------------------------
# This is an initial installation or upgrade of the repo subpackage.  We do
# not need to check for legacy or non-rpm installations, because the non-rpm
# installs do not create repository definitions.  We do need to check,
# however, whether we have some machine credentials lying around from a
# previous install/remove/upgrade cycle.
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_yumrepo}
    (
        cd '%{_yumrepodir}'
        un=; pw=; oldfile=; file='@PACKAGE@.repo'
        for s in '' '.rpmsave' '.rpmnew' ; do
            oldfile="$file$s"
            if test -e $oldfile ; then
                un=`sed -n -r 's,^.*baseurl[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$,\1,p;t end;b;: end q' $oldfile`
                pw=`sed -n -r 's,^.*baseurl[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$,\3,p;t end;b;: end q' $oldfile`
                [ -n "$un" -a -n "$pw" ] || continue
                break
            fi
        done
        [ ":$oldfile" != ":$file" ] || mv -f -- $file $file.rpmsave
        ext="?hn=`hostname -f`&ip=`hostname -i | sed 'y/ /,/'`${un:+'&un='}${un}${pw:+'&pw='}${pw}"
        ext="$ext"`echo '/%{_rpmsubdir}' | sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'`
	key=; [ -z "$un" ] || key="${un}${pw:+':'}${pw}@"
        url='%{_reposerv}://'"${key}"'%{_repobase}/%{_reporoot}/rpms/repodata/'"$file$ext"
        rm -f -- $file
        if ! echo "$url" | wget -i - -O $file 2>/dev/null ; then
            if echo "$url" | wget -i - -O /dev/null 2>&1 | grep '401 Authorization Required' >/dev/null 2>&1 ; then
                echo 'Authorization required for repository access.' >/dev/tty
                u='anonymous'; p=
                read -e  -p 'Username: ' u </dev/tty >/dev/tty; u=${u:-'anonymous'}
                if [ "$u" != 'anonymous' ] ; then
                read -es -p 'Password: ' p </dev/tty >/dev/tty
                echo '' >/dev/tty
                fi
		key=; [ -z "$u" ] || key="${u}:${p}@"
                url='%{_reposerv}://'"${key}"'%{_repobase}/%{_reporoot}/rpms/repodata/'"$file$ext"
                rm -f -- $file
                if ! echo "$url" | wget -i - -O $file 2>/dev/null ; then
                    [ ":$oldfile" != ":$file" ] || mv -f -- $file.rpmsave $file
                    echo 'Authorization failed.' >/dev/tty
                    exit 1
                fi
            fi
        fi
        if [ ! -e $file ] ; then
            [ ":$oldfile" != ":$file" ] || mv -f -- $file.rpmsave $file
            exit 1
        fi
    ) || exit 1
%endif
%if %{FILES_zypprepo}
    (
        cd '%{_zyppcreddir}'
        un=; pw=; oldfile=; file='@PACKAGE_UCNAME@credentials'
        for s in '@PACKAGE_UCNAME@' 'NCC' ; do
            oldfile="${s}credentials"
            if [ -e $oldfile ] ; then
                un=`awk 'BEGIN{FS="="}{if($1~/^username$/){print$2;exit}}' $file`
                pw=`awk 'BEGIN{FS="="}{if($1~/^password$/){print$2;exit}}' $file`
                [ -n "$un" -a -n "$pw" ] || continue
                break
            fi
        done
        [ ":$oldfile" != ":$file" ] || mv -f -- $file $file.rpmsave
        ext="?hn=`hostname -f`&ip=`hostname -i | sed 'y/ /,/'`${un:+&un=$un}${pw:+&pw=$pw}"
        ext="$ext"`echo '/%{_rpmsubdir}' | sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'`
        url='%{_reposerv}://'"${un:+$un${pw:+:$pw}@}"'%{_repobase}/%{_reporoot}/'"$file$ext"
        rm -f -- $file
        if ! echo "$url" | wget -i - -O $file 2>/dev/null ; then
            if echo "$url" | wget -i - -O /dev/null 2>&1 | grep '401 Authorization Required' >/dev/null 2>&1 ; then
                echo 'Authorization required for repository access.' >/dev/tty
                u='anonymous'; p=
                read -e  -p 'Username: ' u </dev/tty >/dev/tty; u=${u:-anonymous}
                if [ "$u" != 'anonymous' ] ; then
                read -es -p 'Password: ' p </dev/tty >/dev/tty
                echo '' >/dev/tty
                fi
                url='%{_reposerv}://'"${u:+$u:$p@}"'%{_repobase}/%{_reporoot}/'"$file$ext"
                rm -f -- $file
                if ! echo "$url" | wget -i - -O $file 2>/dev/null ; then
                    [ ":$oldfile" != ":$file" ] || mv -f -- $file.rpmsave $file
                    echo 'Authorization failed.' >/dev/tty
                    exit 1
                fi
            fi
        fi
        if [ -e $file ] ; then chmod go-rw $file; else
            [ ":$oldfile" != ":$file" ] || mv -f -- $file.rpmsave $file
            exit 1
        fi
    ) || exit 1
    (
        cd '%{_zyppcreddir}'
        un=; pw=; file='@PACKAGE_UCNAME@credentials'
        if [ -e $file ] ; then
            un=`awk 'BEGIN{FS="="}{if($1~/^username$/){print$2;exit}}' $file`
            pw=`awk 'BEGIN{FS="="}{if($1~/^password$/){print$2;exit}}' $file`
        fi
        [ -n "$un" -a -n "$pw" ] || exit 1
        cd '%{_zyppservdir}'
        file='OPENSS7.service';
        [ ! -e $file ] || mv -f -- $file $file.rpmsave
        url='%{_reposerv}://'"${un:+$un${pw:+:$pw}@}"'%{_repobase}/%{_reporoot}/'"$file"
        rm -f -- $file
        if ! echo "$url" | wget -i - -O $file 2>/dev/null ; then
            [ ! -e $file.rpmsave ] || mv -f -- $file.rpmsave $file
            exit 1
        fi
        if [ ! -e $file ] ; then
            [ ! -e $file.rpmsave ] || mv -f -- $file.rpmsave $file
            exit 1
        fi
    ) || exit 1
%endif
fi

%post repo
# ---------------------------------------------------------------------------
# After we install this repository package, we need to adjust whatever
# definitions are required in either the /etc/yum/yum-plugins.d/kmod.conf or
# /etc/zypp/zypp.conf files.
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_yumrepo}
    d="%{_sysconfdir}/yum/pluginconf.d"
    for f in kmod.conf fedorakmod.conf ; do f="$d/$f"
        if [ -f $f ] ; then
            mv -f -- $f $f.rpmsave
            sed -r -e 's,^pinkernels.*$,pinkernels = 1,;s,^installforallkernels.*$,installforallkernels = 1,' $f.rpmsave >$f
            if diff $f.rpmsave $f >/dev/null 2>&1 ; then
                mv -f -- $f.rpmsave $f
            fi
        fi
    done
%endif
%if %{FILES_zypprepo}
    d="%{_sysconfdir}/zypp"
    for f in zypp.conf ; do f="$d/$f"
        if [ -f $f ] ; then
            mv -f -- $f $f.rpmsave
            sed -r -e 's,^multiversion.*$,multiversion = provides:multiversion(kernel),' $f.rpmsave >$f
            if diff $f.rpmsave $f >/dev/null 2>&1 ; then
                mv -f -- $f.rpmsave $f
            fi
        fi
    done
%endif
fi

%preun repo
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
%if %{FILES_yumrepo}
    f='%{_yumrepodir}/@PACKAGE@.repo'
    if [ -r $f ] ; then
        sed 's,^enabled[[:space:]]*=[[:space:]]*1[[:space:]]*$,enabled = 0,' $f >$f.rpmsave
        mv -f -- $f.rpmsave $f
    fi
%endif
%if %{FILES_zypprepo}
    rm -f -- %{_zyppservdir}/@PACKAGE_UCNAME@.service
    rm -f -- %{_zypprepodir}/@PACKAGE_UCNAME@\:@PACKAGE@*.repo
    rm -rf -- %{_localstatedir}/cache/zypp/packages/@PACKAGE_UCNAME@\:@PACKAGE@*
    rm -rf -- %{_localstatedir}/cache/zypp/raw/@PACKAGE_UCNAME@\:@PACKAGE@*
    rm -rf -- %{_localstatedir}/cache/zypp/solv/@PACKAGE_UCNAME@\:@PACKAGE@*
%endif
fi

%postun repo
# ---------------------------------------------------------------------------
# After we remove this repository package, we need to adjust whatever
# definitions are required in configuration files.  When we changed them on
# installation, we save an original copy in $f.rpmsave.  Therefore, if
# $f.rpmsave exists, copy it back.
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
%if %{FILES_yumrepo}
    d="%{_sysconfdir}/yum/pluginconf.d"
    for f in kmod.conf fedorakmod.conf ; do f="$d/$f"
        if [ -f $f -a -f $f.rpmsave ] ; then
            if ! diff $f $f.rpmsave >/dev/null 2>&1 ; then
                mv -f -- $f.rpmsave $f
            fi
        fi
        rm -f -- $f.rpmsave
    done
%endif
%if %{FILES_zypprepo}
    d="%{_sysconfdir}/zypp"
    for f in zypp.conf ; do f="$d/$f"
        if [ -f $f -a -f $f.rpmsave ] ; then
            if ! diff $f $f.rpmsave >/dev/null 2>&1 ; then
                mv -f -- $f.rpmsave $f
            fi
        fi
        rm -f -- $f.rpmsave
    done
%endif
fi

%if %{PACKAGE_repo}
%files repo
# ---------------------------------------------------------------------------
%defattr(-,root,root)
#{?files_yumrepo:%config(noreplace) %{_yumrepodir}/*}
#{?files_yumrepo:%{_rpmgpgdir}/*}
#{?files_zypprepo:%config(noreplace) %{_zypprepodir}/*}
%{?files_yumrepo:%{_yumplugdir}/*.py*}
%{?files_yumrepo:%config(noreplace) %{_yumconfdir}/*.conf}
%endif

# ===========================================================================
%package base
# ---------------------------------------------------------------------------
# This package contains the init scripts, test scripts, maintenance scripts and
# configuration files that are architecture independent and are required for a
# usable run-time system.  It also contains maintenance and administration
# documentation.
# ---------------------------------------------------------------------------

Summary:            %{title} base support package.
Group:              System Environment/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_configfiles}
Prefix:             %{_sysconfdir}
%endif
%if %{FILES_mibfiles}
Prefix:             %{_snmpmibdir}
%endif
%if %{FILES_initscripts}
Prefix:             %{_configdir}
Prefix:             %{_initrddir}
%endif
%if %{FILES_devscripts}
Prefix:             %{_sbindir}
%endif
#if %{FILES_netconfig}
#refix:             %{_sysconfdir}/netconfig.d
#endif
#if %{FILES_sock2path}
#refix:             %{_sysconfdir}/sock2path.d
#endif
#if %{FILES_snmpconf}
#refix:             %{_snmpconfdir}
#endif
%if %{FILES_oldmods}
Prefix:             %{_modutildir}
%endif
%if %{FILES_testscripts}
Prefix:             %{_pkglibexecdir}
%endif
%if %{FILES_sendpr}
Prefix:             %{_pkglibexecdir}
%endif
#if %{FILES_infofiles}
#refix:             %{_infodir}
#endif
%if %{FILES_manpages}
Prefix:             %{_mandir}
%endif
%if %{FILES_kupdate}
Prefix:             %{_sysconfdir}/kernel/postinst.d
Prefix:             %{_sysconfdir}/kernel/postrm.d
%endif

Conflicts:          texinfo < 3.11

%if %{USE_makedev}
Requires:           dev >= 3.3
%endif
#if %{FILES_manpages}
#equires(post):     /usr/sbin/makewhatis
#equires(postun):   /usr/sbin/makewhatis
#endif

%if %{HAVE_testfiles}
Requires:           %{_pkglibexecdir}/test-streams
%endif
#if %{NEED_lib}
#equires:           %{name}-lib     = %{epoch}:%{baseversion}-%{baserelease}
#endif
%if %{HAVE_test32files}
Requires:           %{_pkglibexec32dir}/test-streams
%endif
#if %{NEED_compat}
#equires:           %{name}-compat  = %{epoch}:%{baseversion}-%{baserelease}
#endif

Provides:           %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-base = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-base = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description base
%{descripline}
The %{name}-base binary package contains the init scripts, test scripts,
maintenance scripts and base system configuration files necessary for
the operation of the protocol suites contained in the %{name} package.
It contains user and administration documentation in INFO, PDF and HTML
formats as well as sections 1, 4, 5 and 8 of the manual pages.  This
binary package is required for any installation of the %{name} package.
%{descriptail}

%pre base
# ---------------------------------------------------------------------------
# This is an initial installation or upgrade of the base subpackage.  On
# initial installation, we need to check for non-rpm installations on the host
# and remove any entries that might later conflict with our entries.  We treat
# every fresh installation like an upgrade from non-rpm install.
# ---------------------------------------------------------------------------
%if %{FILES_initscripts}
#
# pre_initscripts_install() - On a fresh install, go looking for non-rpm initscripts
#   and remove them.  Stop them first.
#
pre_initscripts_install () {
    local reverse= list="%{initfiles} %{nonrpminit}" i
    for i in $list; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse; do
        if [ -f %_initrddir/$i ]; then
	    [ -x "`which service     2>/dev/null`" ] && { service     $i stop && continue || true }
	    [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i stop && continue || true }
	    [ -x "%_initrddir/$i"                  ] && { %_initrddir/$i stop && continue || true }
        fi
    done
    for i in $reverse; do
        if [ -f %_initrddir/$i ]; then
	    [ -x /sbin/insserv             ] && { /sbin/insserv -r          $i        && continue || true }
	    [ -x /sbin/chkconfig           ] && { /sbin/chkconfig --del     $i        && continue || true }
	    [ -x /usr/lib/lsb/remove_initd ] && { /usr/lib/lsb/remove_initd $i        && continue || true }
	    [ -x /usr/sbin/update-rc.d     ] && { /usr/bin/update-rc.d      $i remove && continue || true }
        fi
    done
}
#
# pre_initscripts_upgrade() - On an upgrade, simply remove the old initscripts
#   without stopping them.  Note that the new initscripts will be installed in
#   post, and started when the old version initscripts were not running.  Note
#   that these are the init scripts from the old version.  Because our old
#   versions have the same init scripts as the new version (for now), this is
#   simply removing our regular list of init scripts.  To be non-disruptive
#   during upgrades, we do not stop the scripts first.
#
pre_initscripts_upgrade () {
    local reverse= list="%{initfiles}" i
    for i in $list; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse; do
        if [ -f %_initrddir/$i ]; then
	    [ -x /sbin/insserv             ] && { /sbin/insserv -r          $i        && continue || true }
	    [ -x /sbin/chkconfig           ] && { /sbin/chkconfig --del     $i        && continue || true }
	    [ -x /usr/lib/lsb/remove_initd ] && { /usr/lib/lsb/remove_initd $i        && continue || true }
	    [ -x /usr/sbin/update-rc.d     ] && { /usr/bin/update-rc.d      $i remove && continue || true }
        fi
    done
}
%endif
#
# remove_depmods() - A little recursive function to delete all modules dependent
#   on an initial module set (in our case "streams.o").  The function echos the
#   list of modules to remove to stdout.
#
remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
	prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	eval "remove_depmods \$$prereq"
    done
}
#
# pre_modules() - When performing a fresh install we want to go looking for
#   non-rpm installations of LiS or STREAMS or supplementary packages and
#   perform what would otherwise have been the preun or postun actions.  Build a
#   dependency tree from every dependency expression that can be found in each
#   modules.dep file and remove all conflicting modules and their dependents.
#
pre_modules () { :
    for dir in /lib/modules/2.[456].* /lib/modules/preferred /lib/modules/default /lib/modules/boot
    do
	[ -d $dir ] || continue
	for m in `find $dir \( -name '*.o' -o -name '*.ko' -o -name '*.o.gz' -o -name '*.ko.gz' \) 2>/dev/null`
        do
	    b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)? | |'`
	    case " $modules " in (*" $b "*) modl_mods="${modl_mods:+$modl_mods }$m" ;; (*) continue ;; esac
	done
	if [ -f $dir/modules.dep ] ; then
	    dep= ; while read line ; do
		case $line in
		    *\\) line="`echo $line | sed -e 's|\\$||'`"
			dep="${dep}${dep:+ }$line" ; continue ;;
		    *)  dep="${dep}${dep:+ }$line" ;;
		esac
		set -- $dep
		if [ $# -ge 2 ] ; then
		    t=`echo $1 | sed -e 's|:$||'`
		    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
		    shift
		    for p in $@ ; do
			prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
			eval "$prereq=\"\${$prereq}\${$prereq:+ }$t\""
			eval "$target=\"\${$target}\${$target:+ }$p\""
		    done
		fi
		dep=
		continue
	    done < $dir/modules.dep
	fi
    done
    if [ -n "$modl_mods" ] ; then
	rm -f -- $modl_mods
	for m in $modules ; do
	    prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	    eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
	    [ -n "$modl_deps" ] || continue
	    rm -f -- $modl_deps
	done
    fi
}
%if %{FILES_preloads}
#
# pre_preloads() - On a fresh install, go looking for non-rpm or legacy preloads
#   and remove them.  This includes all preload techniques: modprobe.preload and
#   modules or modules-%_kversion files.
#
pre_preloads () { :
    local prel_fil prel_tmp prel_new
    for prel_fil in %_sysconfdir/modprobe.preload %_sysconfdir/modules %_sysconfdir/modules-*
    do
	if [ -f $prel_fil ]; then
	    prel_tmp=%_tmppath/modprobe.preload.tmp.$$
	    prel_new=%_tmppath/modprobe.preload.new.$$
	    cp -f -- $prel_fil $prel_new
	    sed -e '\|^[[:space:]]*(specfs|streams)|d' $prel_new > $prel_tmp
	    mv -f -- $prel_tmp $prel_new
	    if diff $prel_new $prel_fil >/dev/null 2>&1; then
		chmod --reference=$prel_fil -- $prel_new
		cp -f -b --suffix=.rpmorig -- $prel_new $prel_fil
	    fi
	    rm -f -- $prel_new
	fi
    done
    :
}
%endif
%if %{HAVE_oldmods}
#
# pre_oldmods() - For a fresh install make sure that there are no entries from a
#   non-rpm installation in the modules directories nor in the modules.conf file
#   that will interfere with our entries.  Especially older LiS entries.
#
#   Unfortunately davem starting copying our install procedure, so we need to
#   root out all kinds of things from the modules.conf file, all prune
#   statements, any if include statements.  The old style /BEGIN LiS/,/END LiS/
#   enclosure in the modules.conf file.  My newer technique with a prune and an
#   if statement in the modules.conf file that was also used by davem in
#   LiS-2.18.0.  Also, my newer latest technique with only an include statement
#   in modules.conf and a modules.conf fragment in the debian update-modules
#   directory %_modutildir that includes the prune and if statements.  That
#   works both for RH-style and Debian-style modules.conf.
#
#   Again, unfortunately, recent non-autoconf/dpkg releases of LiS have chosen
#   to install their modconf files in a similar fashion to ours and in a similar
#   location.  It even uses the prune modules line that we normally use,
#   however, on Debian their modules.conf edits will be lost because the
#   modules.conf file is generated from the modules/conf.d directory.
#
pre_oldmods () {
    local conf_old conf_tmp conf_new suffix dir
    conf_old="%_sysconfdir/modules.conf"
    if [ -f $conf_old ]; then
	conf_tmp=%_tmppath/modules.conf.tmp.$$
	conf_new=%_tmppath/modules.conf.new.$$
	cp -f -- $conf_old $conf_new
	for suffix in $name LiS lis streams STREAMS strcompat strtty strxns strxnet strsock strinet strsctp strchan strx25 striso strisdn strss7 sigtran strvoip osr61
	do
	    if ( grep -q -- "BEGIN $suffix" $conf_new && grep -q -- "END $suffix" $conf_new ) 2>/dev/null
	    then
		sed -e '\|BEGIN '$suffix'|,\|END '$suffix'|d' $conf_new > $conf_tmp
		mv -f -- $conf_tmp $conf_new
	    fi
	    for dir in /lib/modules/2.[456].* /lib/modules/preferred /lib/modules/default /lib/modules/boot
	    do
		[ -d $dir ] || continue
		if [ -f $dir/modules.$suffix ] ; then
		    rm -f -- $dir/modules.$suffix
		    sed -e '\|^prune[[:space:]].*modules.'$suffix'|d'        $conf_new > $conf_tmp
		    sed -e '\|^if[[:space:]].*modules.'$suffix'|,\|^endif|d' $conf_tmp > $conf_new
		    sed -e '\|^include[[:space:]].*modules.'$suffix'|d'      $conf_new > $conf_tmp
		    mv -f -- $conf_tmp $conf_new
		fi
	    done
	done
	for suffix in $name LiS lis streams STREAMS strcompat strtty strxns strxnet strsock strinet strsctp strchan strx25 striso strisdn strss7 sigtran strvoip osr61 ; do
	    if [ -f %_modutildir/$suffix ] ; then
		rm -f -- %_modutildir/$suffix
		sed -e '\|^include[[:space:]].*'"%_modutildir"'/'$suffix'|d' $conf_new > $conf_tmp
		mv -f -- $conf_tmp $conf_new
	    fi
	done
	if diff $conf_old $conf_new >/dev/null 2>&1; then
	    chmod --reference=$conf_old -- $conf_new
	    cp -f -b --suffix=.dpkg-orig -- $conf_new $conf_old
	fi
        rm -f -- $conf_new
    fi
    :
}
%endif
# ---------------------------------------------------------------------------
pre_install () { :
%if %{FILES_initscripts}
    pre_initscripts_install || :
%endif
    pre_modules || :
%if %{HAVE_oldmods}
    pre_oldmods || :
%endif
%if %{FILES_preloads}
    pre_preloads || :
%endif
}
pre_upgrade () { :
%if %{FILES_initscripts}
    pre_initscripts_upgrade || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 1 ]; then : # fresh install
    pre_install || :
fi
if [ $1 -ge 2 ]; then : # upgrade
    pre_upgrade || :
fi
# ---------------------------------------------------------------------------
#pre base
# ---------------------------------------------------------------------------

%post base
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
%if %{HAVE_oldmods}
#
# post_oldmods() - Whether installing or upgrading, add our line to the
#   modules.conf file if it is not already present.  Note that the old version
#   is expected to not remove this line in the upgrade case.  Note also that
#   modules.conf entries are only installed for 2.4 module systems.  Note that
#   we do not handle upgrades from 2.4 to 2.6 at all.
#
post_oldmods () {
    local conf_fil=%_sysconfdir/modules.conf conf_tmp conf_new
    if [ -f $conf_fil ]; then
        conf_tmp=%_sysconfdir/modules.conf.tmp.$$
        conf_new=%_sysconfdir/modules.conf.new.$$
        cp -f -- $conf_fil $conf_new
        ( sed -e '\|^include[[:space:]]*%_modutildir/%base|d' $conf_new
          echo "include %_modutildir/%base" ) >$conf_tmp
        mv -f -- $conf_tmp $conf_new
        if diff $conf_new $conf_fil >/dev/null 2>&1; then
            chmod --reference=$conf_fil $conf_new
            cp -f -b --suffix=.rpmsave -- $conf_new $conf_fil
        fi
        rm -f -- $conf_new
    fi
}
%endif
%if %{FILES_preloads}
#
# post_preloads() - Whether installing or upgrading, add our preloads to the
#   appropriate preloads files.  Note that the old version is expected to not
#   remove its preloads in the upgrade case.  Note also that preloads are only
#   installed for 2.4 module systems.
#
post_preloads () {
    local preloads="%{preloads}" prel_fil prel_tmp prel_new p preloads
    for prel_fil in %_sysconfdir/modules %_sysconfdir/modprobe.preload; do
        if [ -f $prel_fil ]; then
            prel_tmp=%_tmppath/modprobe.preload.tmp.$$
            prel_new=%_tmppath/modprobe.preload.new.$$
            cp -f -- $prel_fil $prel_new
            for p in $preloads; do
                ( sed -e '\|^[[:space:]]*'"$p"'[[:space:]]*$|d' $prel_new
                  echo "$p" ) >$prel_tmp
                mv -f -- $prel_tmp $prel_new
            done
            if diff $prel_new $prel_fil >/dev/null 2>&1; then
                chmod --reference=$prel_fil -- $prel_new
                cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
            fi
            rm -f -- $prel_new
        fi
    done
}
%endif
%if %{FILES_initscripts}
#
# post_initscripts() - When installing fresh, start initscripts when they are
#   not already running and would normally be started for the current
#   run-level.  Note that if rpm has neglected to install a kernel module
#   package, or the library package, or if there is no solution for the
#   running kernel, starting some or all of these scripts will fail, so we
#   exit on the first failure.  Another attempt will be made when the lib or
#   kernel modules sub-packages are installed fresh.
#
#   When this is performed as part of an upgrade and the subsystems are
#   already running, this has no effect.  If the upgrade has just provided a
#   solution at this point, it will succeed.
#
post_initscripts () {
    local list="%{initfiles}" i args r l start
    for i in $list; do
        if [ -f %_initrddir/$i ]; then
            [ -x /sbin/insserv              ] && { /sbin/insserv              $i       && continue || true }
            [ -x /sbin/chkconfig            ] && { /sbin/chkconfig --add      $i       && continue || true }
            [ -x /usr/lib/lsb/install_initd ] && { /usr/lib/lsb/install_initd $i       && continue || true }
	    args="`grep '^#[[:space:]]*update-rc.d:' %_initrddir/$i | sed -e 's,#[[:space:]]*update-rc.d:[[:space:]]*,,'`"
	    [ -x /usr/sbin/update-rc.d      ] && { /usr/sbin/update-rc.d      $i $args && continue || true }
        fi
    done
    r="`runlevel | awk '{print$2}'`"
    for i in list; do
        [ -f %_initrddir/$i ] || continue
        [ ! -e /var/lock/subsys/$i ] || continue
        start=no
        for l in %_initrddir/../rc$r.d/S[0-9][0-9]$i %_initrddir/rc$r.d/S[0-9][0-9]$i; do
            if [ -L $l ]; then start=yes; break; fi
        done
        [ $start = yes ] || continue
        [ -x "`which service     2>/dev/null`" ] && { service     $i start && continue || break }
        [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i start && continue || break }
        [ -x "%_initrddir/$i"                  ] && { %_initrddir/$i start && continue || break }
    done
}
%endif
%if %{FILES_manrefs}
post_manrefs () {
    [ ! -f %{_mandir}/%{manrefs}.gz    ] || gunzip  %{_mandir}/%{manrefs}.gz
    [ ! -f %{_mandir}/%{manrefs}.bz2   ] || bunzip2 %{_mandir}/%{manrefs}.bz2
}
%endif
%if %{FILES_manmacros}
post_manmacros () {
    [ ! -f %{_mandir}/%{manmacros}.gz  ] || gunzip  %{_mandir}/%{manmacros}.gz
    [ ! -f %{_mandir}/%{manmacros}.bz2 ] || bunzip2 %{_mandir}/%{manmacros}.bz2
}
%endif
%if %{FILES_manpages}
#
# post_manpages() - Update the manual pages aprospros database.  This is quite
#   a lengthly process.  If it is not performed, most systems will update on
#   cron job anyway.  We should be able to background this task in nice mode
#   somehow.  Defeat it for now 'cause it just plain take too long.
#
post_manpages () { :; return
    if [ -x "`which makewhatis 2>/dev/null`" ]; then
        LANGUAGE= LANG= makewhatis -u %{_mandir} || :
    fi
    if [ -x "`which mandb      2>/dev/null`" ]; then
        LANGUAGE= LANG= mandb      -p %{_mandir} || :
    fi
}
%endif
# ---------------------------------------------------------------------------
#
# post_install() - This is a fresh installation of the base sub-package.  For
#   a 2.6 module system install where manrefs and manmacros are properly
#   exempt from compression, the only actions performed are to register and
#   attempt to start initscripts, and possibly attempt to rebuild the
#   aprospros database.  Weak updating modules is handled by trigger script.
#
post_install () { :
%if %{HAVE_oldmods}
    post_oldmods || :
%endif
%if %{FILES_preloads}
    post_preloads || :
%endif
%if %{FILES_initscripts}
    post_initscripts || :
%endif
%if %{FILES_manrefs}
    post_manrefs || :
%endif
%if %{FILES_manmacros}
    post_manmacros || :
%endif
%if %{FILES_manpages}
    post_manpages || :
%endif
}
#
# post_upgrade() - This is an upgrade of the base sub-package.
#
#   Note that the manual pages aprospros database is not updated here on an
#   upgrade: it is the responsibility of the old version's postun to do the
#   manual page aprospros database update.
#
#   For a 2.6 module system upgrade where manrefs and manmacros are properly
#   exempt from compression, the only actions performed are to register and
#   attempt to start initscripts.  Weak updating modules is handled by trigger
#   script.
#
post_upgrade () { :
%if %{HAVE_oldmods}
    post_oldmods || :
%endif
%if %{FILES_preloads}
    post_preloads || :
%endif
%if %{FILES_initscripts}
    post_initscripts || :
%endif
%if %{FILES_manrefs}
    post_manrefs || :
%endif
%if %{FILES_manmacros}
    post_manmacros || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 1 ] ; then : # fresh install
    post_install || :
fi
if [ $1 -ge 2 ] ; then : # upgrade
    post_upgrade || :
fi
# ---------------------------------------------------------------------------
#post base
# ---------------------------------------------------------------------------

%if %{HAVE_weakmods}
%triggerin base -- %{target_kernel}
# ---------------------------------------------------------------------------
#
# triggerin_weakmodules() - When the base package is being upgraded with
#   kernels present (always the case when the base package is being upgraded),
#   or when a kernel is being installed or upgraded when the base package is
#   present, perform a weak-update on all of the kernels.  We would perform a
#   weak-update for just one kernel, however, the trigger parameters simply do
#   not tell us the version of the kernel being installed or upgraded.
#
triggerin_weakmodules () { :
    if [ -x %_sbindir/openss7-modules ]; then
        %_sbindir/openss7-modules -- -q -e --update-kernels || :
    fi
}
# ---------------------------------------------------------------------------
if [ $1 -ge 2 ] ; then : # base is being upgraded with kernels present
    triggerin_weakmodules || :
fi
if [ $1 -eq 1 ] ; then : # kernel is being installed or upgraded with base present
    triggerin_weakmodules || :
fi
# ---------------------------------------------------------------------------
#triggerin base -- %{target_kernel}
# ---------------------------------------------------------------------------
%endif

%triggerin base -- %{name}-lib
# ---------------------------------------------------------------------------
# triggerin_initscripts() - The base and library subpackages are installed,
#   attempt to start init scripts.
triggerin_initscripts () {
}
# ---------------------------------------------------------------------------
# triggerin_base_lib() - The base sub-package is being installed while the lib
#   sub-package is already installed or visa-versa.
triggerin_base_lib () { :
}
# ---------------------------------------------------------------------------
if [ $1 -ge 2 ] ; then : # base is being upgraded with lib present
    # nothing to do, %pre and %post will do the work
fi
if [ $2 -ge 2 ] ; then : # lib is being upgraded with base present
    # nothing to do, %pre and %post will do the work
fi
if [ $1 -eq 1 -a $2 -eq 1 ] ; then : # base or lib installed other present
    triggerin_base_lib || :
fi
# ---------------------------------------------------------------------------

%if %{HAVE_weakmods}
%triggerin base -- %{kernel_package} %{kversrequire}
# ---------------------------------------------------------------------------
if [ -x %{_sbindir}/%{name}-modules ] ; then
    %{_sbindir}/%{name}-modules -- -v --update-modules || :
    # It is necessary to check whether this operation altered the module links
    # for the running kernel.  If it did, and any of the modules that were
    # altered are resident in the kernel, a restart message should be given.
    # If modules were added that were not in the kernel before (particularly
    # specfs and streams), consider starting the STREAMS subsystem if it is
    # set to start on boot.  If modules were removed that are resident in the
    # kernel (esp. specfs and streams), consider shutting down the STREAMS
    # subsystem, or issuing a warning to that effect.  We can either have
    # openss7-modules issue the appropriate warnings, or we can have it file
    # some information in /var/run and then examine it after the run.
else
    echo "WARNING: %triggerin base -- %{kernel_package} ($1,$2) no update script" >&2
fi
%endif

%triggerun base -- %{name}-lib = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # base is being removed with lib present
fi
if [ $2 -eq 0 ] ; then : # lib is being removed with base present
fi
if [ $1 -ge 1 -a $2 -ge 1 ] ; then : # base or lib upgraded with other present
fi
# ---------------------------------------------------------------------------

%preun base
# ---------------------------------------------------------------------------
# This is either a final removal of, or an upgrade from, this base subpackage.
# ---------------------------------------------------------------------------
#
# preun_stop_scripts() - Before removing or upgrading a package, stop the init
#   scripts.  This is fine for 2.4 module systems, but it is a little too
#   disruptive for weak-module updates in the 2.6 module system.  Because this
#   is too disruptive for weak-updated systems, we disable the debhelper
#   scriplets and only stop init scripts when not performing weak updates, and
#   even then, only when the updates are for the running kernel.
#
preun_stop_scripts () {
    local reverse= list="%{initfiles}" i
    for i in $list ; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse ; do
	if [ -f "%_initrddir/$i" ]; then tried=0
	    [ -x "`which service     2>/dev/null`" ] && { service     $i stop && continue || return $? }
	    [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i stop && continue || return $? }
	    [ -x "%_initrddir/$i"                  ] && { %_initrddir/$i stop && continue || return $? }
	fi
    done
    return 0
}
#
# preun_kill_daemons() - Kill daemons with prejudice.  Stopping init scripts
#   should have stopped these daemons already.  One situation is where init
#   scripts have been removed already (or not fully installed) without stopping
#   them.
#
preun_kill_daemons () {
    local reverse= list="%{initfiles}" i n
    for i in $list ; do
	reverse="${i}${reverse:+ }${reverse}"
    done
    for i in $reverse ; do
	n=`echo "$i" | sed -e 's,\.sh$,,'`
	if [ -r /var/run/${n}.pid ] ; then
	    kill -TERM `cat /var/run/${n}.pid` || :
	    rm -f /var/run/${n}.pid || :
	    rm -f /var/lock/subsys/${n} || :
	    rm -f /var/lock/subsys/${n}.init || :
	fi
    done
}
#
# preun_umount_specfs() - Unmount the Special Shadow Filesystem, making device
#  nodes in the /dev/streams directory no longer available.  Note that this
#  should succeed even while kernel modules are loaded.
#
preun_umount_specfs () {
    local retval=0 device mountpoint fstype options
    while read device mountpoint fstype options
    do
	if [ ":$fstype" = ":specfs" ]
	then
	    umount -t specfs -- $mountpoint || retval=$?
	fi
    done </etc/mtab
    return $retval
}
#
# preun_rmnods() - Remove device nodes in the /dev directory.
#
preun_rmnods () { :
%if %{USE_rmnods}
    if [ -x "%{mknods}" ] ; then
        %{rmnods}
    fi
%endif
}
#
# preun_kill_streams() - Uses lsof to determine which processes are holding
#   opens STREAMS drivers and sends those processes a TERM signal followed five
#   seconds later by a KILL signal if the process still exists.  This ensures
#   that all STREAMS drivers are closed.  When the specfs is unmounted and
#   STREAMS devices removed before this operation is performed, killed processes
#   that respawn will be unable to reopen the STREAMS drivers because the device
#   nodes no longer exist.  Note that this is not infalable: when STREAMS are
#   permanently linked beneath a multiplexing driver, it may still be impossible
#   to remove all STREAMS kernel modules.
#
preun_kill_streams () {
    local fields ind val signal
    if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
	if [ -x "`which fdetach 2>/dev/null`" ] ; then
	    fdetach -a 2>/dev/null || :
	fi
        for signal in TERM KILL ; do
            if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                lsof | grep '\<STR\>' | \
                while read fields ; do
                    set -- $fields
                    if [ ":$5" != ':CHR' ] ; then continue; fi
                    ind=`expr $# - 1`
                    eval "val=\"\${$ind}\""
                    if [ ":$val" != ':STR' ] ; then continue; fi
                    kill -$signal $2 >/dev/null 2>&1 || :
                done
                sleep 5
            fi
        done
    fi
    lsof | grep '\<STR\>' >/dev/null 2>&1 && false || true
    return $?
}
#
# remove_depends() - A recursive function that peforms a depth first traversal
#   of the dependency graph rooted at the kernel module supplied as an argument,
#   removing modules that have no dependents.  This is so that entire kernel
#   module stacks can be removed.
#
remove_depends () {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
#
# preun_shutdown() - Shutdown the STREAMS subsystem with prejudice.  First
#   attempt to shutdown using init scripts.  If that suceeds fully, all other
#   steps reduce to null operations.  When it does not succeed, the other steps
#   are largely what the initscripts would do shutting down anyway, but we can
#   determine whether a reboot will be required.
#
preun_shutdown () {
    local reboot='no'
    preun_stop_scripts      || :
    preun_kill_daemons      || :
    preun_umount_specfs     || reboot='yes'
    preun_rmnods	    || :
    preun_kill_streams      || reboot='yes'
    remove_depends streams  || reboot='yes'
    remove_depends specfs   || reboot='yes'
    if [ ":$reboot" = ':yes' ] ; then
	echo "warning: reboot required." >&2
    fi
    :
    return 0
}
#
# preun_running() - Shutdown STREAMS on the running kernel if the running
#   kernel is the same as the version of the modules we are installing or
#   upgrading.  If streams does not happen to be running on the running kernel,
#   this reduces to a null operation.
#
preun_running () {
    if [ "%_kversion" = "`uname -r`" ]; then
	preun_shutdown || :
    fi
}
#
# preun_remove_scripts() - When removing the package, remove the symbolic
#   links associated with the initscripts before the scripts themselves are
#   removed.
#
preun_remove_scripts () {
    local reverse= list="%{initfiles}" i
    for i in $list; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse; do
        if [ -f "%_initrddir/$i" ]; then
            [ -x /sbin/insserv             ] && { /sbin/insserv -r          $i        2>&1 && continue || : }
            [ -x /sbin/chkconfig           ] && { /sbin/chkconfig --del     $i        2>&1 && continue || : }
            [ -x /usr/lib/lsb/remove_initd ] && { /usr/lib/lsb/remove_initd $i        2>&1 && continue || : }
            [ -x /usr/sbin/update-rc.d     ] && { /usr/bin/update-rc.d      $i remove 2>&1 && continue || : }
        fi
    done
}
#
# preun_oldmods() - The -base sub-package is going away for good: remove our
#   lines from the modules.conf file.  Note that %triggerun scriplets for each
#   of the kernel module packages has already run if they were not already
#   removed.  That scriptlet removed the corresponding modules.%base files.
#
preun_oldmods () { :
}
#
# preun_preloads() -
#
preun_preloads () { :
}
#
# preun_manrefs() - RPM might not know anything about the manrefs file because
#   it was erroneously compressed and we uncompressed it.  Remove it in any
#   case.
#
preun_manrefs () {
    rm -f -- %{_mandir}/%{manrefs} || :
}
#
# preun_manmacros() - RPM might not know anything about the manmacros file
#   because it was erroneously compressed and we uncompressed it.  Remove it
#   in any case.
#
preun_manmacros () {
    rm -f -- %{_mandir}/%{manmacros} || :
}
# ---------------------------------------------------------------------------
#
# preun_remove() - We are removing the base package for good.  Because all
#   other packages depend on the base package, and the base package contains
#   the initscripts, we preform all system-wide preun actions for removal
#   here.  RPM is really, really poor on scriplet sequencing, so be careful.
#   Kernel-specific actions that need to be performed because the base package
#   is being removed are performed in %triggerun scriplets attached to the
#   kernel modules subpackage and triggered on this base package.
#
#   Actions to perform before removing the base package are: Shut down the
#   subsystems; remove our line from the modules.conf file; remove our
#   preloads from the system-wide preloads files; unregister the init scripts.
#
preun_remove () { :
%if %{FILES_initscripts}
    preun_shutdown || :
%endif
%if %{HAVE_oldmods}
    preun_oldmods || :
%endif
%if %{FILES_preloads}
    preun_preloads || :
%endif
%if %{FILES_initscripts}
    preun_remove_scripts || :
%endif
%if %{FILES_manrefs}
    preun_manrefs || :
%endif
%if %{FILES_manmacros}
    preun_manmacros || :
%endif
}
#
# preun_upgrade() - There are not too many actions to perform here.  On
#   upgrade %pre and %post have already run and the new package's files have
#   overwritten the old ones.  The new package's %pre or %post should have
#   addressed any lingering old version files.
#
preun_upgrade () { :
}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # final removal
    preun_remove || :
fi
if [ $1 -ge 1 ] ; then : # upgrade
    preun_upgrade || :
fi
# ---------------------------------------------------------------------------
#preun base
# ---------------------------------------------------------------------------

%postun base
# ---------------------------------------------------------------------------
%if %{FILES_preloads}
#
# postun_preloads() - When removing for good, make sure that the preload
#   modules are no longer included in the preloads file for 2.4 module
#   systems.  Note that removing lines from the /etc/modules-@kversion@ file
#   is the repsonibility of the -kernel subpackage.
#
postun_preloads () {
    local prel_old prel_tmp prel_new included modules m
    for prel_old in %_sysconfdir/modules %_sysconfdir/modprobe.preload; do
        if [ -f $prel_old ]; then
            prel_tmp=%_tmppath/modprobe.preload.tmp.$$
            prel_new=%_tmppath/modprobe.preload.new.$$
            cp -f -- $prel_old $prel_new
            included=no
            modules="%{modules}"
            for m in $modules; do
                if grep '^[[:space:]]*'"$m"'[[:space:]]*$' $prel_new >/dev/null 2>&1; then
                    included=yes
                fi
            done
            if [ "$included" = yes ]; then
                for m in $modules; do
                    grep -v '^[[:space:]]*'"$m"'[[:space:]]*$' $prel_new >$prel_tmp
                    mv -f -- $prel_tmp $prel_new
                done
                chmod --reference=$prel_old -- $prel_new
                cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
            fi
            rm -f -- $prel_new || :
        fi
    done
}
%endif
%if %{FILES_oldmods}
#
# postun_oldmods() - As the sub-package is being purged, remove the line from
#   the modules.conf file that points at the /etc/modutils/%name file that
#   in turn includes the /lib/modules/%_kversion/modules.openss7 file when it
#   exists.  Note that the files themselves referenced from the modules.conf
#   files are removed as a normal part of the course of removing the files in
#   the -kernel sub-packages.
#
postun_oldmods () {
    local conf_old=%_sysconfdir/modules.conf conf_tmp conf_new
    if [ -f $conf_old ]; then
        conf_tmp=%_tmppath/modules.conf.tmp.$$
        conf_new=%_tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        if grep '^include[[:space:]].*%{_modutildir}/%{base}' $conf_new >/dev/null 2>&1; then
            sed -e '\|^include[[:space:]].*%{_modutildir}/%{base}|d' $conf_new >$conf_tmp
            mv -f -- $conf_tmp $conf_new
            chmod --reference=$conf_old $conf_new
            cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        fi
        rm -f -- $conf_new
    fi
}
%endif
%if %{FILES_manpages}
#
# postun_manpages() - Update the manual pages aprospros database.  This is
#   quite a lengthly process.  If it is not performed, most systems will
#   update on cron job anyway.
#
postun_manpages () {
    if [ -x "`which makewhatis 2>/dev/null`" ]; then
        LANGUAGE= LANG= makewhatis -u %{_mandir} || :
    fi
    if [ -x "`which mandb      2>/dev/null`" ]; then
        LANGUAGE= LANG= mandb      -p %{_mandir} || :
    fi
}
%endif
# ---------------------------------------------------------------------------
#
# postun_remove() - This is the final removal of the base package.  Due to
#   dependencies this means that all sub-packages will be removed with the
#   exception of the -repo subpackage.  Perform removal actions that cannot be
#   discerned by rpm because they involve scripting.
#
postun_remove () { :
%if %{FILES_preloads}
    postun_preloads
%endif
%if %{FILES_oldmods}
    postun_oldmods
%endif
%if %{FILES_manpages}
    postun_manpages || :
%endif
}
#
# postun_upgrade() - This is the removal of the remnants of the old base
#   package on upgrade.  Perform whatever actions need to be performed only
#   after the remnants have been removed.  This consists solely of rebuilding
#   the aprospros database so that any manual pages removed from the old
#   package are removed from the apropros list and the caches are updated
#   appropriately with the new files.
#
postun_upgrade () { :
%if %{FILES_manpages}
    postun_manpages || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ]; then : # final removal
    postun_remove || :
fi
if [ $1 -ge 1 ]; then : # upgrade
    postun_upgrade || :
fi
# ---------------------------------------------------------------------------
#postun base
# ---------------------------------------------------------------------------

%triggerpostun base -- %{name}-lib = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
if [ $2 -eq 0 ] ; then : # lib was removed with base present
fi
if [ $2 -ge 1 ] ; then : # lib or base upgraded with other present
fi
# ---------------------------------------------------------------------------

%if %{HAVE_weakmods}
%triggerpostun base -- %{kernel_package} %{kversrequire}
# ---------------------------------------------------------------------------
if [ -x %{_sbindir}/%{name}-modules ] ; then
    %{_sbindir}/%{name}-modules -- -v --update-modules || :
    # It is necessary to check whether this operation altered the module links
    # for the running kernel.  If it did, and any of the modules that were
    # altered are resident in the kernel, a restart message should be given.
    # If modules were added that were not in the kernel before (particularly
    # specfs and streams), consider starting the STREAMS subsystem if it is
    # set to start on boot.  If modules were removed that are resident in the
    # kernel (esp. specfs and streams), consider shutting down the STREAMS
    # subsystem, or issuing a warning to that effect.  We can either have
    # openss7-modules issue the appropriate warnings, or we can have it file
    # some information in /var/run and then examine it after the run.
else
    echo "WARNING: %triggerpostun base -- %{kernel_package} ($1,$2) no update script" >&2
fi
%endif


%if %{HAVE_weakmods}
%triggerpostun base -- %{target_kernel}
# ---------------------------------------------------------------------------
# This trigger results from the removal or upgrade of a kernel.  Note that the
# kernel removal or upgrade is complete.  This never runs when the base
# package is removed.  Unfortunately, rpm does not tell us what version of the
# kernel is being removed or upgraded.  Also, it does not distinguish whether
# the kernel is being removed or upgraded.  So, we consider all kernels using
# the --update-kernels flag.
# ---------------------------------------------------------------------------
if [ -x %_sbindir/openss7-modules ]; then
    %_sbindir/openss7-modules -- -q -e --update-kernels || :
fi
# ---------------------------------------------------------------------------
#triggerpostun base -- %{target_kernel}
# ---------------------------------------------------------------------------
%endif

%if %{PACKAGE_base}
%files base %{?devicesfile:%{devicesfile}}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
#{?files_snmpconf:%config(noreplace) %{_snmpconfdir}/*}
%{?files_configfiles:%config(noreplace) %{_sysconfdir}/%{conffiles}}
##{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.xnsl}
#{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.d/%{netconfig}}
#{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path}
#{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path.d/%{sock2path}}
#{?files_oldmods:%config(noreplace) %{_modutildir}/*}
%{?files_initscripts:%config(noreplace) %{_configdir}/*}
%{?files_initscripts:%{_initrddir}/*}
%{?files_devscripts:%{_sbindir}/@STRCONF_DEVICES@}
%{?files_mibfiles:%{_snmpmibdir}/*}
%{?files_testscripts:%{_pkglibexecdir}/atlocal}
%{?files_testscripts:%{_pkglibexecdir}/testsuite*}
%{?files_sendpr:%{_pkglibexecdir}/send-pr}
%{?files_sendpr:%{_pkglibexecdir}/send-pr.config}
%{?files_manrefs:%{_mandir}/%{manrefs}*}
%{?files_manmacros:%{_mandir}/%{manmacros}*}
%{?files_manpages:%{_mandir}/man[1458]*/*}
%{?files_kupdate:%{_sysconfdir}/kernel/postinst.d/%{name}-update}
%{?files_kupdate:%{_sysconfdir}/kernel/postrm.d/%{name}-update}
%{?files_wmscripts:%{_sbindir}/%{name}-modules}
%{?files_wmscripts:%{_sbindir}/%{name}-update}
%endif

# ===========================================================================
%package doc
# ---------------------------------------------------------------------------
# This package contains copious documentation.  It contains developer and
# programmer documentation, INFO, PDF and HTML developer documentation as well
# as sections 2 3 7 and 9 of the manual pages.
# ---------------------------------------------------------------------------

Summary:            %{title} developer and programmer documentation.
Group:              Development/System
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_infofiles}
Prefix:             %{_infodir}
%endif
%if %{FILES_txtfiles}
Prefix:             %{_docdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_dvifiles}
Prefix:             %{_dvidir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_psfiles}
Prefix:             %{_psdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_pdffiles}
Prefix:             %{_pdfdir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_htmlfiles}
Prefix:             %{_htmldir}/@PACKAGE@-@VERSION@
%endif
%if %{FILES_manpages}
Prefix:             %{_mandir}
%endif

%if %{FILES_infofiles}
Requires(post):     /sbin/install-info
Requires(preun):    /sbin/install-info
%endif
#if %{FILES_manpages}
#equires(post):     /usr/sbin/makewhatis
#equires(postun):   /usr/sbin/makewhatis
#endif

Conflicts:          texinfo < 3.11

# The %{name}-base package contains the man page references and macros
# and is required.  Other packages are unnecessary.
%if %{HAVE_manmacros}
Requires:           %{_mandir}/%{manmacros}
%endif
%if %{HAVE_manrefs}
Requires:           %{_mandir}/%{manrefs}
%endif

Provides:           %{name}-doc     = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-doc     = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-doc     = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description doc
%{descripline}
The %{name}-doc binary package contains the documentation used in the
development of applications and programs that use the package.  It
contains developer and programmmer manuals in info, pdf and html formats
as well as sections 2, 3, 7 and 9 of the manual pages and Javadoc HTML
documentation.  Install this binary package if you are interested in
developing STREAMS drivers or modules or applications programs for the
protocol suites contained in the %{name} package.  This package is
massive and is not normally necessary except on a development system.
%{descriptail}

%post doc
# ---------------------------------------------------------------------------
if [ $1 = 1 ] ; then : # fresh install
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
#if %{FILES_manpages}
#   if which makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if which mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb -p %{_mandir} || :
#   fi
#endif
fi

%preun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 ] ; then : # final removal
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
fi
if [ $1 = 1 ] ; then : # upgrade
%if %{FILES_infofiles}
    if [ -x /sbin/install-info ] ; then
        # Older rpm versions do not compress info files.
        for n in %{manuals} ; do
            if [ -f %{_infodir}/$n.info ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info || :
            elif [ -f %{_infodir}/$n.info.gz ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.gz || :
            elif [ -f %{_infodir}/$n.info.bz2 ] ; then
                /sbin/install-info --delete --info-dir=%{_infodir} %{_infodir}/$n.info.bz2 || :
            fi
        done
    fi
%endif
fi

%postun doc
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
#if %{FILES_manpages}
#   if which makewhatis >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= makewhatis -u %{_mandir} || :
#   fi
#   if which mandb >/dev/null 2>&1 ; then
#       LANGUAGE= LANG= mandb %{_mandir} || :
#   fi
#endif
fi

%if %{PACKAGE_doc}
%files doc
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_txtfiles:%docdir %{_docdir}/@PACKAGE@-@VERSION@}
%{?files_txtfiles:%{_docdir}/@PACKAGE@-@VERSION@/*.txt}
%{?files_dvifiles:%docdir %{_dvidir}/@PACKAGE@-@VERSION@}
%{?files_dvifiles:%{_dvidir}/@PACKAGE@-@VERSION@/*.dvi}
%{?files_psfiles:%docdir %{_psdir}/@PACKAGE@-@VERSION@}
%{?files_psfiles:%{_psdir}/@PACKAGE@-@VERSION@/*.ps}
%{?files_pdffiles:%docdir %{_pdfdir}/@PACKAGE@-@VERSION@}
%{?files_pdffiles:%{_pdfdir}/@PACKAGE@-@VERSION@/*.pdf}
%{?files_htmlfiles:%docdir %{_htmldir}/@PACKAGE@-@VERSION@}
%{?files_htmlfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.html}
%{?files_pngfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.png}
%{?files_cssfiles:%{_htmldir}/@PACKAGE@-@VERSION@/*.css}
%{?files_infofiles:%docdir %{_infodir}}
%{?files_infofiles:%{_infodir}/*.info*}
#{?files_manrefs:%{_mandir}/%{manrefs}*}
#{?files_manmacros:%{_mandir}/%{manmacros}*}
%{?files_manpages:%docdir %{_mandir}}
%{?files_manpages:%{_mandir}/man[2379]*/*}
%endif

# ===========================================================================
%package lib
# ---------------------------------------------------------------------------
# This package contains the entire openss7 run-time that is architecture
# dependent.  This package does not include the SNMP utilities, agents or
# uilities: those are in a separate SNMP package.  Also, this package does not
# include the Java JAIN components: those are in a separate java package.
# ---------------------------------------------------------------------------

Summary:            %{title} run-time libraries and utilities.
Group:              System Environment/Libraries
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_binfiles}
Prefix:             %{_bindir}
%endif
%if %{FILES_sbinfiles}
Prefix:             %{_sbindir}
%endif
%if %{FILES_libraries}
Prefix:             %{_libdir}
%endif
#if %{FILES_lib32compat}
#refix:             %{_lib32dir}
#endif
%if %{FILES_netconfig}
Prefix:             %{_sysconfdir}/netconfig.d
%endif
%if %{FILES_sock2path}
Prefix:             %{_sysconfdir}/sock2path.d
%endif
%if %{FILES_perlmods}
Prefix:             %{_perldir}
%endif
%if %{FILES_tcllibs}
Prefix:             %{_pkgtcllibdir}
%endif
%if %{FILES_testfiles}
Prefix:             %{_pkglibexecdir}
%endif
#if %{FILES_test32files}
#refix:             %{_pkglibexec32dir}
#endif
%if %{FILES_snmpconf}
Prefix:             %{_snmpconfdir}
%endif
%if %{FILES_snmpmods}
Prefix:             %{_snmpdlmoddir}
%endif
#if %{FILES_snmp32mods}
#refix:             %{_snmpdlmod32dir}
#endif
%if %{FILES_locales}
Prefix:             %{_localedir}
%endif

Requires(pre):      /sbin/ldconfig
Requires(post):     /sbin/ldconfig
Requires(postun):   /sbin/ldconfig
Requires(post):     %(which tclsh)

# these libraries need some kernel modules to be useful
%if %{NEED_kmod}
Requires:           %{name}-kernel  = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-lib     = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-lib     = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-lib     = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description lib
%{descripline}
The %{name}-lib binary package contains the run-time (shared object)
libraries necessary to run applications programs and utilities developed
for %{title}.  Also included are the libtool .la files describing the
shared object libraries.  The binary package also provides
administrative and configuration test utilities and commands associated
with the %{title} package.  Note that these utilities are needed for
running the validation test suites contained in the %{name} binary
package.
%{descriptail}

%pre lib
# ---------------------------------------------------------------------------
# This is an initial installation or upgrade of the lib subpackage.  On fresh
# install, we need to check for legacy and non-rpm installations on the host
# and remove any entries that might later conflict with the subpackage's
# entries.  We treat every fresh installation like an upgrade from non-rpm
# install.
# ---------------------------------------------------------------------------
%if %{FILES_libraries}
#
# pre_libraries() - On a fresh installation, look for an remove any non-rpm or
#   old tarball release libraries.  On reinstallations this step can (and
#   should) be skipped.  Unfortunately, non-autoconf releases of LiS placed
#   libraries all over the place.  On an initial installation, this checks for
#   other libraries with the same name and deletes them.
#
pre_libraries () {
    local libraries="%{libraries}" old_libs
    for lib in $libraries ; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs || :
        fi
    done
}
%endif
%if %{FILES_tools}
#
# pre_tools() - On a fresh installation, look for and remove any non-deb or old
#   tarball release tools.  On reinstallations this step can (and should) be
#   skipped.
#
pre_tools () {
    local tool location tools="%{tools}"
    for tool in $tools ; do
        location="`which $tool 2>/dev/null`"
        while [ -n "$location" -a -x "$location" ] ; do
	    echo "warning: Deleting old non-rpm tool $location" >&2
            rm -f -- $location || :
            location="`which $tool 2>/dev/null`"
        done
    done
}
%endif
pre_install () { :
%if %{FILES_libraries}
    pre_libraries || :
%endif
%if %{FILES_tools}
    pre_tools || :
%endif
}
pre_upgrade () { :
}
if [ ":$1" = :1 ] ; then : # fresh install
    pre_install || :
fi
if [ ":$1" = :2 ] ; then : # upgrade
    pre_upgrade || :
fi

%post lib
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
%if %{FILES_libraries}
#
# post_libraries() - Do a ldconfig and update the linker-loader's library
#   cache files.
#
post_libraries () { :
    if [ -x "`which ldconfig 2>/dev/null`" ]; then
        ldconfig || :
    fi
}
%endif
%if %{FILES_netconfig}
#
# post_netconfig() - Rebuild the netconfig database.
#
post_netconfig () { :
    netc_fil="%_sysconfdir/netconfig"
    netc_alt="%_sysconfdir/netconfig.xnsl"
    netc_dir="%_sysconfdir/netconfig.d"
    [ ! -r $netc_fil -o -r $netc_alt ] || return 0
    [ -d $netc_dir ] || return 0
    if [ -r $netc_fil ]; then
        if ! grep '^# Generated from netconfig.d' $netc_fil >/dev/null 2>&1; then
            netc_fil=$netc_alt
        fi
    else
        if [ -r $netc_alt ]; then
            netc_fil=$netc_alt
        fi
    fi
    netc_tmp=%_tmppath/netconfig.tmp.$$
    (
        echo '# Generated from netconfig.d by @PACKAGE_LCNAME@'
        found=no; files="$netc_dir/*"
        for f in $files; do
            if [ -f $f -a $f = "$netc_dir/strnsl" ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
        for f in $files; do
            if [ -f $f -a $f != "$netc_dir/strnsl" ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
    ) >$netc_tmp
    if [ $found = no ]; then
        rm -f -- $netc_fil
        rmdir $netc_dir 2>/dev/null || :
    else
        if diff $netc_tmp $netc_fil >/dev/null 2>&1; then
            chmod --reference=$netc_fil -- $netc_tmp
            cp -f -b --suffix=.rpmsave -- $netc_tmp $netc_fil
        fi
    fi
    rm -f -- $netc_tmp || :
    if [ $netc_fil != $netc_alt ]; then
        rm -f -- $netc_alt || :
    fi
}
%endif
%if %{FILES_sock2path}
#
# post_sock2path() - Rebuild the sock2path database.
#
post_sock2path () { :
    s2pa_fil="%_sysconfdir/sock2path"
    s2pa_dir="%_sysconfdir/sock2path.d"
    s2pa_tmp="%_tmppath/sock2path.tmp.$$"
    (
        echo '# Generated from sock2path.d by @PACKAGE_LCNAME@'
        found=no; files="$s2pa_dir/*"
        for f in $files; do
            if [ -r $f ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
    ) >$s2pa_tmp
    if [ $found = no ]; then
        rm -f -- $s2pa_fil
        rmdir $s2pa_dir 2>/dev/null || :
    else
        if diff $s2pa_tmp $s2pa_fil >/dev/null 2>&1; then
            chmod --reference=$s2pa_fil -- $s2pa_tmp
            cp -f -b --suffix=.rpmsave -- $s2pa_tmp $s2pa_fil
        fi
    fi
    rm -f -- $s2pa_tmp || :
}
%endif
%if %{FILES_snmpconf}
#
# post_snmpconf() - Rebuild the snmp configuration database.
#
post_snmpconf () { :
    snmp_fil="%_snmpconfdir/snmpd.local.conf"
    snmp_dir="%_snmpconfdir/snmp.d"
    snmp_lcl="$snmp_dir/00local"
    [ -d "%_snmpconfdir/snmp.d" ] || return 0
    can_overwrite_local=no
    if [ -e $snmp_fil ]; then
        if grep '^# Generated from snmp.d' $snmp_fil >/dev/null 2>&1; then
            can_overwrite_local=yes
        fi
    fi
    [ $can_overwrite_local = yes ] || return 0
    wrote_one=no
    snmp_tmp="%_tmppath/`basename $snmp_fil`.tmp.$$"
    (
        echo '# Generated from snmp.d by @PACKAGE_LCNAME@ '`date -uI`
        echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
        echo '# EDIT THE FILES IN THE snpm.d DIRECTORY INSTEAD.'
        files="$snmp_dir/*"
        for f in $files; do
            if [ -f $f -a $f = $snmp_lcl ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*)
                        echo '# Generated from snmp.d/'`basename $f`
                        echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
                        echo '# EDIT THE FILE IN snmp.d/'`basename $f`' INSTEAD.'
                        sed '/^[[:space:]]*##/d;/^[[:space:]]*$$/d' $f
                        ;;
                esac
            fi
        done
	for f in $files ; do
	    if [ -f $f -a $f != $snmp_lcl ]; then
		case $f in
		    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
		    (*)
			echo '# Generated from snmp.d/'`basename $f`
			echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
			echo '# EDIT THE FILE IN snmp.d/'`basename $f`' INSTEAD.'
			sed '/^[[:space:]]*##/d;/^[[:space:]]*$$/d' $f
                        wrote_one=yes
                        ;;
		esac
	    fi
	done
    ) >$snmp_tmp
    if [ $wrote_one = yes ]; then
        mv -f -- $snmp_tmp $snmp_fil
    elif [ -f $snmp_lcl ]; then
        mv -f -- $snmp_lcl $snmp_fil
        rm -f -- $snmp_tmp
        rmdir $snmp_dir 2>/dev/null || :
    else
        rm -f -- $snmp_tmp $snmp_fil
        rmdir $snmp_dir 2>/dev/null || :
    fi
}
%endif
%if %{FILES_perlmods}
#
# post_perlmods() -
#
post_perlmods () { :
}
%endif
%if %{FILES_tcllibs}
#
# post_tcllibs() - Rebuild tcl module index files.
#
post_tcllibs () { :
    if [ -x "`which tclsh 2>/dev/null`" ]; then
        for d in `find %{_pkgtcllibdir} -mindepth 1 -maxdepth 1 -type d` ; do
            echo -e "pkg_mkIndex $d\\nexit" | tclsh || :
        done
    fi
}
%endif
%if %{HAVE_initscripts}
#
# post_initscripts() - In the event that the base subpackage is already
#   installed, try to start init scripts.  This would have failed partially
#   when the base subpackage was installed because the tools for strerr and
#   strace scripts were not present.  When the base subpackage is not yet
#   installed, the init scripts should not be present.  If the base subpackage
#   is present but no kernel module solution is present for the running
#   kernel, starting the init scripts will fail, in which case we return
#   immediately.  Note that we only attempt to start init scripts when they
#   are not already running and they would normally be started for the current
#   run level.  Another attempt will be made when the base or kernel modules
#   sub-packages are installed fresh.
#
#   When this is performed as part of an upgrade and the subsystems are
#   already running, this has no effect.  If the upgrade has just provided a
#   solution at this point, it will succeed.
#
post_initscripts () {
    local list="%{initfiles}" r i l start
    r="`runlevel | awk '{print$2}'`"
    for i in list; do
        [ -f %_initrddir/$i ] || continue
        [ ! -e /var/lock/subsys/$i ] || continue
        start=no
        for l in %_initrddir/../rc$r.d/S[0-9][0-9]$i %_initrddir/rc$r.d/S[0-9][0-9]$i; do
            if [ -L $l ]; then start=yes; break; fi
        done
        [ $start = yes ] || continue
        [ -x "`which service     2>/dev/null`" ] && { service     $i start && continue || break }
        [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i start && continue || break }
        [ -x "%_initrddir/$i"                  ] && { %_initrddir/$i start && continue || break }
    done
}
%endif
#
# post_install() - When a fresh installation of the library package is
#   performed, add the database and index entries associated with the
#   installed components.
#
post_install () { :
%if %{FILES_libraries}
    post_libraries || :
%endif
%if %{FILES_netconfig}
    post_netconfig || :
%endif
%if %{FILES_sock2path}
    post_sock2path || :
%endif
%if %{FILES_snmpconf}
    post_snmpconf || :
%endif
%if %{FILES_perlmods}
    post_perlmods || :
%endif
%if %{FILES_tcllibs}
    post_tcllibs || :
%endif
%if %{HAVE_initscripts}
    post_initscripts || :
%endif
}
#
# post_upgrade() - When upgrading, the new package post scripts must consider
#   that there may be old version files which are yet to be removed from the
#   core that were not overwritten by the new version files.  When the file
#   lists match and all old version files are overwritten by the new version,
#   similar actions to those performed on fresh installation can be used for
#   upgrade as well.
#
post_upgrade () { :
%if %{HAVE_initscripts}
    post_initscripts || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 1 ] ; then : # fresh install
    post_install || :
fi
if [ $1 -eq 2 ] ; then : # upgrade
    post_upgrade || :
fi
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_libraries}
    # After a fresh install or upgrade, do a load config.
    /sbin/ldconfig
%endif
%if %{FILES_tcllibs}
    # After a fresh install, create package index files
    for d in `find %{_pkgtcllibdir} -mindepth 1 -maxdepth 1 -type d` ; do
        echo -e "pkg_mkIndex $d\\nexit" | tclsh
    done
%endif
%if %{HAVE_initscripts}
    # Start init scripts when they have already been installed.
    r=`runlevel | sed -e 's|.*[[:space:]]||'`
    list="%{initfiles}" ; for i in $list ; do
        if [ -f %_initrddir/$i ] ; then
            if [ -L %_initrddir/../rc${r}.d/S[0-9][0-9]$i -o \
                 -L %_initrddir/rc${r}.d/S[0-9][0-9]$i ] ; then
                 /sbin/service $i start >/dev/null 2>&1 || %_initrddir/$i start >/dev/null 2>&1 || :
            fi
        fi
    done
%endif
fi

%triggerin lib -- %{name}-base
# ---------------------------------------------------------------------------
# triggerin_lib_base() - The base sub-package is being installed while the lib
#   sub-package is already installed or visa-versa.
triggerin_lib_base () { :
}
# ---------------------------------------------------------------------------
if [ $1 -ge 2 ] ; then : # lib is being upgraded with base present
    # nothing to do, %pre and %post will do the work
fi
if [ $2 -ge 2 ] ; then : # base is being upgraded with lib present
    # nothing to do, %pre and %post will do the work
fi
if [ $1 -eq 1 -a $2 -eq 1 ] ; then : # lib or base installed while other present
    triggerin_lib_base || :
fi
# ---------------------------------------------------------------------------

%triggerun lib -- %{name}-base
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # lib is being removed with base present
fi
if [ $2 -eq 0 ] ; then : # base is being removed with lib present
fi
if [ $1 -ge 1 -a $2 -ge 1 ] ; then : # lib or base upgraded with other present
fi
# ---------------------------------------------------------------------------

%preun lib
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
if [ $1 = 0 -o $1 = 1 ] ; then # final removal or upgrade
%if %{HAVE_initscripts}
    # Stop init scripts when they are still hanging around.
    reverse=
    list="%{initfiles}" ; for i in $list ; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse ; do
        if [ -f %_initrddir/$i ] ; then
            /sbin/service $i stop >/dev/null 2>&1 || %_initrddir/$i stop >/dev/null 2>&1 || :
        fi
    done
%endif
    # do it with extreme prejudice in case init scripts have been removed
    reboot='no'
    if [ -r /var/run/strace.pid ] ; then
        kill -TERM `cat /var/run/strace.pid` || :
        rm -f /var/run/strace.pid
        rm -f /var/lock/subsys/strace
        rm -f /var/lock/subsys/strace.init
    fi
    if [ -r /var/run/strerr.pid ] ; then
        kill -TERM `cat /var/run/strerr.pid` || :
        rm -f /var/run/strerr.pid
        rm -f /var/lock/subsys/strerr
        rm -f /var/lock/subsys/strerr.init
    fi
    umount -a -t specfs || reboot='yes'
%if %{USE_rmnods}
    if [ -x "%{mknods}" ] ; then
        %{rmnods}
    fi
%endif
    if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
        if [ -x %{_sbindir}/fdetach ] ; then
            %{_sbindir}/fdetach -a 2>/dev/null || :
        fi
        for signal in TERM KILL ; do
            if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                lsof | grep '\<STR\>' | \
                while read fields ; do
                    set -- $fields
                    if [ ":$5" != ':CHR' ] ; then continue; fi
                    ind=`expr $# - 1`
                    eval "val=\"\${$ind}\""
                    if [ ":$val" != ':STR' ] ; then continue; fi
                    kill -$signal $2 >/dev/null 2>&1 || :
                done
                sleep 5
            fi
        done
    fi
    lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
    remove_depends streams || reboot='yes'
    remove_depends specfs  || reboot='yes'
    [ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
fi

%postun lib
# ---------------------------------------------------------------------------
# ---------------------------------------------------------------------------
%if %{FILES_libraries}
#
# postun_libraries() - On final removal of any shared object libraries,
#   perform a ldconfig to update the linker-loader cache.
#
postun_libraries () { :
    if [ -x "`which ldconfig 2>/dev/null`" ]; then
        ldconfig || :
    fi
}
%endif
%if %{FILES_netconfig}
#
# postun_netconfig() - On final removal of xnsl libraries, rebuild the
#   netconfig database, most likely removing the entire associated
#   directories.
#
postun_netconfig () { :
    netc_fil="%_sysconfdir/netconfig"
    netc_alt="%_sysconfdir/netconfig.xnsl"
    netc_dir="%_sysconfdir/netconfig.d"
    [ ! -r $netc_file -o -r $netc_alt ] || return 0
    [ -d $netc_dir ] || return 0
    if [ -r $netc_fil ]; then
        if ! grep '^# Generated from netconfig.d' $netc_fil >/dev/null 2>&1; then
            netc_fil=$netc_alt
        fi
    else
        if [ -r $netc_alt ]; then
            netc_fil=$netc_alt
        fi
    fi
    netc_tmp=%_tmppath/netconfig.tmp.$$
    (
        echo '# Generated from netconfig.d by @PACKAGE_LCNAME@'
        found=no; files="$netc_dir/*"
        for f in $files; do
            if [ -f $f -a $f = "$netc_dir/strnsl" ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
        for f in $files; do
            if [ -f $f -a $f != "$netc_dir/strnsl" ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
    ) >$netc_tmp
    if [ $found = no ]; then
        rm -f -- $netc_fil
        rmdir $netc_dir 2>/dev/null || :
    else
        if diff $netc_tmp $netc_fil >/dev/null 2>&1; then
            chmod --reference=$netc_fil -- $netc_tmp
            cp -f -b --suffix=.rpmsave -- $netc_tmp $netc_fil
        fi
    fi
    rm -f -- $netc_tmp || :
    if [ $netc_fil != $netc_alt ]; then
        rm -f -- $netc_alt || :
    fi
}
%endif
%if %{FILES_snmpconf}
#
# postun_sock2path() - On final removal of socket libraries, rebuild the
#   sock2path database, most likely removing the entire associated
#   directories.
#
postun_sock2path () { :
    s2pa_fil="%_sysconfdir/sock2path"
    s2pa_dir="%_sysconfdir/sock2path.d"
    s2pa_tmp="%_tmppath/sock2path.tmp.$$"
    (
        echo '# Generated from sock2path.d by @PACKAGE_LCNAME@'
        found=no; files="$s2pa_dir/*"
        for f in $files; do
            if [ -r $f ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*) sed '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f
                        found=yes ;;
                esac
            fi
        done
    ) >$s2pa_tmp
    if [ $found = no ]; then
        rm -f -- $s2pa_fil
        rmdir $s2pa_dir 2>/dev/null || :
    else
        if diff $s2pa_tmp $s2pa_fil >/dev/null 2>&1; then
            chmod --reference=$s2pa_fil -- $s2pa_tmp
            cp -f -b --suffix=.rpmsave -- $s2pa_tmp $s2pa_fil
        fi
    fi
    rm -f -- $s2pa_tmp || :
}
%endif
%if %{FILES_snmpconf}
#
# postun_snmpconf() - On final removal of SNMP modules, rebuild the snmp
#   configuration database, most likely removing the entire associated
#   directories.
#
postun_snmpconf () { :
    snmp_fil="%_snmpconfdir/snmpd.local.conf"
    snmp_dir="%_snmpconfdir/snmp.d"
    snmp_lcl="$snmp_dir/00local"
    [ -d "%_snmpconfdir/snmp.d" ] || return 0
    can_overwrite_local=no
    if [ -e $snmp_fil ]; then
        if grep '^# Generated from snmp.d' $snmp_fil >/dev/null 2>&1; then
            can_overwrite_local=yes
        fi
    fi
    [ $can_overwrite_local = yes ] || return 0
    wrote_one=no
    snmp_tmp="%_tmppath/`basename $snmp_fil`.tmp.$$"
    (
        echo '# Generated from snmp.d by @PACKAGE_LCNAME@ '`date -uI`
        echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
        echo '# EDIT THE FILES IN THE snpm.d DIRECTORY INSTEAD.'
        files="$snmp_dir/*"
        for f in $files; do
            if [ -f $f -a $f = $snmp_lcl ]; then
                case $f in
                    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                    (*)
                        echo '# Generated from snmp.d/'`basename $f`
                        echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
                        echo '# EDIT THE FILE IN snmp.d/'`basename $f`' INSTEAD.'
                        sed '/^[[:space:]]*##/d;/^[[:space:]]*$$/d' $f
                        ;;
                esac
            fi
        done
	for f in $files ; do
	    if [ -f $f -a $f != $snmp_lcl ]; then
		case $f in
		    (*.rpmsave|*.rpmnew|*.rpmorig) ;;
		    (*)
			echo '# Generated from snmp.d/'`basename $f`
			echo '# DO NOT EDIT THIS FILE: ALL EDITS WILL BE LOST!'
			echo '# EDIT THE FILE IN snmp.d/'`basename $f`' INSTEAD.'
			sed '/^[[:space:]]*##/d;/^[[:space:]]*$$/d' $f
                        wrote_one=yes
                        ;;
		esac
	    fi
	done
    ) >$snmp_tmp
    if [ $wrote_one = yes ]; then
        mv -f -- $snmp_tmp $snmp_fil
    elif [ -f $snmp_lcl ]; then
        mv -f -- $snmp_lcl $snmp_fil
        rm -f -- $snmp_tmp
        rmdir $snmp_dir 2>/dev/null || :
    else
        rm -f -- $snmp_tmp $snmp_fil
        rmdir $snmp_dir 2>/dev/null || :
    fi
}
%if %{FILES_perlmods}
postun_perlmods () { :
}
%endif
%if %{FILES_tcllibs}
postun_tcllibs () { :
}
%endif
#
# postun_remove() - When a final removal of the library package is performed,
#   remove the database and index entries associated with the removed
#   components.
#
postun_remove () { :
%if %{FILES_libraries}
    postun_libraries || :
%endif
%if %{FILES_netconfig}
    postun_netconfig || :
%endif
%if %{FILES_sock2path}
    postun_sock2path || :
%endif
%if %{FILES_snmpconf}
    postun_snmpconf  || :
%endif
%if %{FILES_perlmods}
    postun_perlmods  || :
%endif
%if %{FILES_tcllibs}
    postun_tcllibs   || :
%endif
}
#
# postun_upgrade() - RPM runs upgrade scripts in the order: %pretrans, %pre,
#   %post, %triggerin, %triggerun, %preun, %postun, triggerpostun, %posttrans;
#   therefore, on upgrade the %preun and %postun scripts should not perform
#   any actions whatsovever.  Consideration of any old package files that will
#   not be retained in the new package should be performed in the %pre of the
#   new package.  Similarly, rebuilding of databases and the like should be
#   performed in the %post of the new package and must be left untouched by
#   the old package.  Therefore, this %postun only peforms actions on removal
#   and then only the actions that are required after the removed package
#   files have been removed.
#
postun_upgrade () { :
}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # complete removal
    postun_remove
fi
if [ $1 -ge 1 ] ; then : # upgrade
    postun_upgrade
fi
# ---------------------------------------------------------------------------

%triggerpostun lib -- %{name}-base
# ---------------------------------------------------------------------------
if [ $2 -eq 0 ] ; then : # base removed while lib present
fi
if [ $2 -eq 1 ] ; then : # base or lib upgraded with other present
fi
# ---------------------------------------------------------------------------

%if %{PACKAGE_lib}
%files lib
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_binfiles:%{_bindir}/*}
%{?files_sbinfiles:%{_sbindir}/*}
%{?files_libraries:%{_libdir}/*.so*}
%{?files_libraries:%{_libdir}/*.la}
#{?files_lib32compat:%{_lib32dir}/*.so*}
#{?files_lib32compat:%{_lib32dir}/*.la}
#{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.xnsl}
%{?files_netconfig:%config(noreplace) %{_sysconfdir}/netconfig.d/%{netconfig}}
%{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path}
%{?files_sock2path:%config(noreplace) %{_sysconfdir}/sock2path.d/%{sock2path}}
%{?files_perlmods:%dir %{_perldir}/auto/Xti}
%{?files_perlmods:%{_perldir}/auto/Xti/*}
%{?files_tcllibs:%dir %{_pkgtcllibdir}}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/xti}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/tcap}
%{?files_tcllibs:%dir %{_pkgtcllibdir}/streams}
%{?files_tcllibs:%{_pkgtcllibdir}/pkgIndex.tcl}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.tcl}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.so}
%{?files_tcllibs:%{_pkgtcllibdir}/*/*.la}
%{?files_locales:%{_localedir}/*}
%{?files_gdmofiles:%{_pkglibexecdir}/gdmo}
%{?files_testfiles:%{_pkglibexecdir}/%{testfiles}}
#{?files_test32files:%{_pkglibexec32dir}/%{testfiles}}
%{?files_snmpconf:%config(noreplace) %{_snmpconfdir}/*}
%{?files_snmpmods:%{_snmpdlmoddir}/*}
%endif

# ===========================================================================
%package compat
# ---------------------------------------------------------------------------
# This package contains the 32-bit compatability binaries.
# ---------------------------------------------------------------------------

Summary:            %{title} 32-bit run-time libraries and utilities.
Group:              System Environment/Libraries
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_lib32compat}
Prefix:             %{_lib32dir}
%endif
%if %{FILES_test32files}
Prefix:             %{_pkglibexec32dir}
%endif
%if %{FILES_snmp32mods}
Prefix:             %{_snmpdlmod32dir}
%endif

Requires(pre):      /sbin/ldconfig
Requires(post):     /sbin/ldconfig
Requires(postun):   /sbin/ldconfig

# these libraries need some kernel modules to be useful
%if %{NEED_kmod}
Requires:           %{name}-kernel  = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-compat  = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-compat  = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-compat  = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description compat
%{descripline}
The %{name}-compat binary package contains the 32-bit run-time (shared
object) libraries necessary to run 32-bit applications programs and utilities
developed for %{title}.  Also included are 32-bit test utilities for the
%{title} package.  Note that these utilities are needed for running the
32-bit validation test suites contained in the %{name} binary package.
%{descriptail}

%post compat
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_lib32compat}
    # After a fresh install or upgrade, do a load config.
    /sbin/ldconfig
%endif
fi

%postun compat
# ---------------------------------------------------------------------------
%if %{FILES_lib32compat}
if [ $1 = 0 -o $1 = 1 ] ; then
    # Whether complete removal or upgrade, do a load config.
    /sbin/ldconfig
fi
%endif

%if %{PACKAGE_compat}
%files compat
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_lib32compat:%{_lib32dir}/*.so*}
%{?files_lib32compat:%{_lib32dir}/*.la}
%{?files_test32files:%{_pkglibexec32dir}/%{testfiles}}
%endif

# ===========================================================================
%package devel

Summary:            %{title} configured headers, static libraries and debug info.
Group:              Development/System
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_includes}
Prefix:             %{_includedir}/%{name}
%endif
%if %{FILES_libstatic}
Prefix:             %{_libdir}
%endif
%if %{FILES_lib32static}
Prefix:             %{_lib32dir}
%endif
#if %{FILES_debugfiles}
#{?files_binaries:Prefix:               %{_usrsrc}/debug}
#{?files_binaries:%{?_lib32dir:Prefix:  %{_lib32dir}/debug}}
#{?files_binaries:%{!?_lib32dir:Prefix: %{_libdir}/debug}}
#endif

#Requires:         /sbin/install-info

Conflicts:          texinfo < 3.11

# development info is somewhat useless without kernel module develoment info
%if %{NEED_kdev}
Requires:           %{name}-kernel-devel = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-devel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-devel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-devel = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description devel
%{descripline}
The %{name}-devel binary package contains library archives for static
compilation, and header files to develop %{title} applications, modules
and drivers.  This also includes the header files and static libraries
required to compile %{title} applications programs.  This package
provides debug information for package %{name}.  Debug information is
useful when developing applications that use this package or when
debugging this package.

The package optionally contains the source code necessary for building
the %{name} release.  It also includes the autoconf configuration
utilities necessary to create and distribute this rpm.  However, to
develop on the package, it would be better to use the tarball release.

This binary package does not contain developer or programmer
documentation nor manual pages.  To obtain the developer and programmer
documentation, load the %{name}-doc package.
%{descriptail}

%if %{PACKAGE_devel}
%files devel
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_includes:%dir %{_includedir}/%{name}}
%{?files_includes:%{_includedir}/%{name}/*}
%{?files_libstatic:%{_libdir}/*.a}
%{?files_lib32static:%{_lib32dir}/*.a}
#{?files_debugfiles:%{?files_binaries: %{_usrsrc}/debug}}
#{?files_debugfiles:%{?files_binaries: %{?_lib32dir:%{_lib32dir}/debug}}}
#{?files_debugfiles:%{?files_binaries: %{!?_lib32dir:%{_libdir}/debug}}}
%endif

# ===========================================================================
%package debuginfo

Summary:            %{title} debugging symbols.
Group:              Development/System
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_debugfiles}
%{?files_binaries:%{?_lib32dir:Prefix:  %{_lib32dir}/debug}}
%{?files_binaries:%{!?_lib32dir:Prefix: %{_libdir}/debug}}
%endif

# debugging info is somewhat useless without kernel module debugging info
%if %{NEED_kbug}
Requires:           %{name}-kernel-debuginfo = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-debuginfo = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debuginfo = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debuginfo = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description debuginfo
%{descripline}
The %{name}-debuginfo binary package contains debugging symbols for
libraries and applications programs.  This package provides debug
information for package %{name}-lib.  Debug information is useful when
developing applications that use this package or when debugging this
package.

%if %{PACKAGE_debug}
%files debuginfo
%{?files_debugfiles:%{?files_binaries: %{?_lib32dir:%{_lib32dir}/debug}}}
%{?files_debugfiles:%{?files_binaries: %{!?_lib32dir:%{_libdir}/debug}}}
%endif

# ===========================================================================
%package debugsource

Summary:            %{title} debugging source.
Group:              Development/System
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_debugfiles}
%{?files_binaries:Prefix:               %{_usrsrc}/debug}
%endif

# debugging source is uesless without debugging info
Requires:           %{name}-debuginfo = %{epoch}:%{baseversion}-%{baserelease}
# debugging source is somewhat useless without kernel module debugging source
%if %{NEED_kbug}
Requires:           %{name}-kernel-debugsource = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-debugsource = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debugsource = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debugsource = %{epoch}:%{baseversion}-%{rpmrelease}

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description debugsource
%{descripline}
The %{name}-debugsource binary package contains source code for
debugging libraries and applications programs.  This package provides
debug information for package %{name}-lib.  Debug information is useful
when developing applications that use this package or when debugging
this package.

%if %{PACKAGE_debug}
%files debugsource
%{?files_debugfiles:%{?files_binaries: %{_usrsrc}/debug}}
%endif

# ===========================================================================
%package -n %{kernel_package}
# ---------------------------------------------------------------------------
# Note that we should not call this just %{name}-%{_kversion}.  The package
# should be named for proper automatic kernel module package loading under
# various distros.  This varies fairly widely for Fedora, CentOS, RHEL, SLES,
# and others.  The Provides tags follow the naming conventions used by these
# various packages, but virtual package names don't seem to cut it.
# ---------------------------------------------------------------------------
# Autoupdating kernel modules when kernels are updated.  CentOS 5 approach:
# - name the kernel module package kmod-%{name}
# - give it version %{baseversion}
# - provides: %{name}-kmod = %{baseversion}
# - provides: kmod-%{name} = %{baseversion}
# - provides: kernel-modules = %{_kversion}
# - require the kernel version (because symbol sets are screwed on both SLES
#   and RHEL due to broken scripts).
# ---------------------------------------------------------------------------
# Autoupdating kernel modules when kernel are updated. SUSE approach:
# - name the kernel module package %{name}-kmp%{kernel_flavor} (note that
#   %{kernel_flavor} includes a dash.)
# - give it version %{baseversion}%{kernel_string}, where %{kernel_string} is the
#   version of the kernel, without the flavor, with underscores substitued
#   for dashes (and possibly .0 added to the kernel version), prefixed by _.
# - give it release %{release}
# - Provides: %{name}-kmp%{kernel_flavor} (This might work instead of renaming.)
# - Provides: %{name}-kmp = %{baseversion}%{kernel_string} (note no flavor)
# - Provides: multiversion(kernel)  (But maybe not, because this might trigger
#   trying to adapt kernel modules to a new kernel.)
# - Requires: coreutils grep
# - Enhances: kernel%{kernel_flavor}  (Note that this is problematic because
#   only some recent rpms support the Enhances: keyword.)
# - Requires: kernel%{kernel_flavor}  (This is the only way without the
#   Enchances keyword, but has to be done.)
#

Summary:            %{title} kernel modules.
Group:              System Environment/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_modules}
Prefix:             %{_kmoduledir}/%{_ksubdir}
%endif

Obsoletes:          %{name}-kernel
Obsoletes:          %{name}-kmp%{kernel_flavor}
Obsoletes:          kmod%{kernel_flavor}
Obsoletes:          kernel-module-%{name}%{kernel_flavor}
Obsoletes:          %{name}-kmod%{kernel_flavor}

# SuSE puts lsof in /usr/bin
Requires(pre):      lsof
Requires(preun):    lsof
Requires(postun):   lsof

# this is enough for the following
Requires:           modutils
Requires(pre):      modutils
Requires(post):     modutils
Requires(preun):    modutils
Requires(postun):   modutils

#Requires(pre):      @MODPROBE@
#Requires(pre):      @LSMOD@

#Requires(post):     @DEPMOD@

#Requires(preun):    @MODPROBE@
#Requires(preun):    @LSMOD@

#Requires(postun):   @MODPROBE@
#Requires(postun):   @LSMOD@

#Requires(postun):   @DEPMOD@
#Requires(postun):   @INSMOD@

%if %{HAVE_weakmods}
%if %{HAVE_rhatkmps}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}-%{ARCH}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%if %{HAVE_susekmps}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}_%{ARCH}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}\\n" | grep -v 'not owned') 2>/dev/null)
%endif
%endif
%else
%if %{HAVE_yumrepo}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}-%{ARCH} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%if %{HAVE_zypprepo}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}_%{ARCH} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%endif
%endif
%endif

%if %{NEED_base}
Requires(prereq):   %{name}-base    = %{epoch}:%{baseversion}-%{baserelease}
Requires(pre):      %{name}-base    = %{epoch}:%{baseversion}-%{baserelease}
Requires(post):     %{name}-base    = %{epoch}:%{baseversion}-%{baserelease}
Requires(preun):    %{name}-base    = %{epoch}:%{baseversion}-%{baserelease}
Requires(postun):   %{name}-base    = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-kernel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-kernel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-kernel = %{epoch}:%{baseversion}-%{rpmrelease}
Provides:           %{name}-%{_kversion} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-%{_kversion} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-%{_kversion} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-%{_kversion} = %{epoch}:%{baseversion}-%{rpmrelease}

%if %{HAVE_rhatkmps}
Provides:           kernel-modules = %{_kversion}
Provides:           kmod-%{name} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-kmod = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

%if %{HAVE_susekmps}
Provides:           multiversion(kernel)
Provides:           %{name}-kmp%{kernel_flavor} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-kmp = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Version:            %{kbaseversion}
Release:            %{kbaserelease}

# ---------------------------------------------------------------------------
%description -n %{kernel_package}
%{descripline}
The %{kernel_package} binary package contains the kernel modules that
provide the Linux kernel %{stitle} drivers and modules.  This includes
assorted drivers and modules for STREAMS and additional %{title}
protocol suite components.  This binary package also includes modprobe
configuration files for the associated kernel modules.  This package
is weakly tied to the kernel for which it and dependent components
were compiled.  This package applies to kernel %{kernel_version}
and requires dependent components compiled for a similar kernel.  If
you cannot find a binary package that matches your kernel, rebuild
for your kernel from the %{name} package source rpm.
%{descriptail}

%if %{FILES_modules}
%pre -n %{kernel_package}
# ---------------------------------------------------------------------------
# This is an initial installation of the kernel subpackage.  We need to check
# for legacy and non-rpm installations on the host and remove any entries that
# might later conflict with our entries.  We treat every fresh installation
# like an upgrade from non-rpm install.  Note that whether we detect an
# install or upgrade depends on the naming convention for %{kernel_package}.
# When the name includes the kernel version, then install or upgrade only
# applies to one kernel version.  When the kernel version is in the version or
# release strings, install or upgrade applies to the entire system.  To avoid
# issues associated with system pre-installation cleanup of legacy and non-rpm
# packages, we perform most system pre-installation cleanup to the -base
# package, where we are guaranteed that an install is a system-wide rpm
# install.  The scope of actions here are kept to the kerne; for which the
# modules were compiled.
# ---------------------------------------------------------------------------
#
# remove_depmods() - A little recursive function to delete all modules dependent
#   on an initial module set (in our case "streams.o").  The function echos the
#   list of modules to remove to stdout.
#
remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
	prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	eval "remove_depmods \$$prereq"
    done
}
#
# pre_modules() - This is a fresh install of this version of kernel module.
#   Make sure that there are no tarball installed kernel modules hanging around
#   for this kernel version.  Because kernel module packages are named
#   differently for different kernels, it is important that this function not be
#   too zealous and remove kernel modules from our other installed packages.
#
pre_modules () { :
    local list m b modl_mods line dep
    list="%{modules}" ; modl_mods=
    if [ -d %_kmoduledir ] ; then
	for m in `find %_kmoduledir \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
		b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
		case " $list " in (*" $b "*) ;; (*) continue ;; esac
		echo "$m"
		modl_mods="$modl_mods${modl_mods:+ }$m"
	done
	if [ -n "$modl_mods" -a -f %_kmoduledir/modules.dep ] ; then
#	    First we can build a dependency tree from every dependency
#	    expression that can be found in the modules.dep file.
	    xtrace=`set -o | sed -n 's,xtrace[[:space:]]*on,set +o xtrace,p;t;s,xtrace[[:space:]]*off,set -o xtrace,p;t'`
	    set +x
	    dep= ; while read line ; do
		case $line in
		    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
			    dep="$dep${dep:+ }$line"; continue ;;
		    (*)     dep="$dep${dep:+ }$line" ;;
		esac
		[ -n "$dep" ] || continue;
		set -- $dep
		if [ $# -ge 2 ] ; then
		    t=`echo $1 | sed -e 's|:$||'`
		    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
		    shift
		    for p in $@ ; do
			prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
			eval "$prereq=\"\$$prereq\${$prereq:+ }$t\""
			eval "$target=\"\$$target\${$target:+ }$p\""
		    done
		fi
		dep=
	    done < %_kmoduledir/modules.dep
	    eval "$xtrace"
	fi
    fi
#   remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
	rm -f -- $modl_mods
	for m in $list ; do
	    prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	    eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
	    [ -n "$modl_deps" ] || continue
	    rm -f -- $modl_deps
	done
    fi
    :
    return 0
}
#
# pre_stop_scripts() - Stop init scripts when they are still hanging around.
#   Note that when the init scripts are already stopped this has no (negative)
#   effect.  Note that our previous practice of stopping init scripts when
#   removing or upgrading modules is questionable and possibly too disruptive to
#   a running system.  Instead of stopping scripts, the user should be warned
#   that restarting the subsystem might be required.  Under debian we can use
#   debconf for this purpose too.
#
pre_stop_scripts () {
    local reverse= list="%{initfiles}" i tried=1
    for i in $list ; do
        reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse ; do
	if [ -f "%_initrddir/$i" ]; then tried=0
	    [ -x "`which service     2>/dev/null`" ] && service     $i stop && continue || :
	    [ -x "`which invoke-rc.d 2>/dev/null`" ] && invoke-rc.d $i stop && continue || :
	    [ -x "%_initrddir/$i"                  ] && %_initrddir/$i stop && continue || :
	fi
    done
    return $tried
}
#
# pre_kill_daemons() - Kill daemons with prejudice.  Stopping init scripts
#   should have stopped these daemons already.  One situation is where init
#   scripts have been removed already (or not fully installed) without stopping
#   them.
#
pre_kill_daemons () {
    local reverse= list="%{initfiles}" i n
    for i in $list ; do
	reverse="${i}${reverse:+ }${reverse}"
    done
    for i in $reverse ; do
	n=`echo "$i" | sed -e 's,\.sh$,,'`
	if [ -r /var/run/${n}.pid ] ; then
	    kill -TERM `cat /var/run/${n}.pid` || :
	    rm -f /var/run/${n}.pid || :
	    rm -f /var/lock/subsys/${n} || :
	    rm -f /var/lock/subsys/${n}.init || :
	fi
    done
}
#
# pre_umount_specfs() - Unmount the Special Shadow Filesystem, making device
#  nodes in the /dev/streams directory no longer available.  Note that this
#  should succeed even while kernel modules are loaded.
#
pre_umount_specfs () {
    local retval=0 device mountpoint fstype options
    while read device mountpoint fstype options
    do
	if [ ":$fstype" = ":specfs" ]
	then
	    umount -t specfs -- $mountpoint || retval=$?
	fi
    done </etc/mtab
    return $retval
}
#
# pre_rmnods() - Remove device nodes in the /dev directory.
#
pre_rmnods () { :
%if %{USE_rmnods}
    if [ -x "%{mknods}" ] ; then
        %{rmnods}
    fi
%endif
}
#
# pre_kill_streams() - Uses lsof to determine which processes are holding
#   opens STREAMS drivers and sends those processes a TERM signal followed five
#   seconds later by a KILL signal if the process still exists.  This ensures
#   that all STREAMS drivers are closed.  When the specfs is unmounted and
#   STREAMS devices removed before this operation is performed, killed processes
#   that respawn will be unable to reopen the STREAMS drivers because the device
#   nodes no longer exist.  Note that this is not infalable: when STREAMS are
#   permanently linked beneath a multiplexing driver, it may still be impossible
#   to remove all STREAMS kernel modules.
#
pre_kill_streams () {
    local fields ind val signal
    if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
	if [ -x "`which fdetach 2>/dev/null`" ] ; then
	    fdetach -a 2>/dev/null || :
	fi
        for signal in TERM KILL ; do
            if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                lsof | grep '\<STR\>' | \
                while read fields ; do
                    set -- $fields
                    if [ ":$5" != ':CHR' ] ; then continue; fi
                    ind=`expr $# - 1`
                    eval "val=\"\${$ind}\""
                    if [ ":$val" != ':STR' ] ; then continue; fi
                    kill -$signal $2 >/dev/null 2>&1 || :
                done
                sleep 5
            fi
        done
    fi
    lsof | grep '\<STR\>' >/dev/null 2>&1 && false || true
    return $?
}
#
# remove_depends() - A recursive function that peforms a depth first traversal
#   of the dependency graph rooted at the kernel module supplied as an argument,
#   removing modules that have no dependents.  This is so that entire kernel
#   module stacks can be removed.
#
remove_depends () {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
#
# pre_shutdown() - Shutdown the STREAMS subsystem with prejudice.  First
#   attempt to shutdown using init scripts.  If that suceeds fully, all other
#   steps reduce to null operations.  When it does not succeed, the other steps
#   are largely what the initscripts would do shutting down anyway, but we can
#   determine whether a reboot will be required.
#
pre_shutdown () {
    local reboot='no'
    pre_stop_scripts        || :
    pre_kill_daemons        || :
    pre_umount_specfs       || reboot='yes'
    pre_rmnods	            || :
    pre_kill_streams        || reboot='yes'
    remove_depends streams  || reboot='yes'
    remove_depends specfs   || reboot='yes'
    if [ ":$reboot" = ':yes' ] ; then
	echo "warning: reboot required." >&2
    fi
    :
    return 0
}
#
# pre_running() - Shutdown STREAMS on the running kernel if the running
#   kernel is the same as the version of the modules we are installing or
#   upgrading.  If streams does not happen to be running on the running kernel,
#   this reduces to a null operation.
#
pre_running () {
    if [ "%_kversion" = "`uname -r`" ]; then
	pre_shutdown || :
    fi
}
#
# pre_install() - For a fresh installation of a kernel module package we want
#   to make sure that there are no legacy or non-rpm installed kernel modules
#   lying around and to stop any legacy or non-rpm subsystems.  These actions
#   can only be performed for %_kversion because kernel module packages are
#   named differently for their kernels.
#
pre_install () { :
    pre_modules || :
    pre_running || :
}
#
# pre_upgrade() - Before upgrading, for a 2.4 modules system, and when the
#   package being upgraded applies to the running kernel, then we stop the
#   STREAMS subsystems before installing.
#
pre_upgrade () { :
%if %{HAVE_oldmods}
    pre_running || :
%endif
}
if [ $1 -eq 1 ]; then : # fresh install
    pre_install || :
fi
if [ $1 -ge 2 ]; then : # upgrade
    pre_upgrade || :
fi
%endif

%if %{FILES_modules}
%post -n %{kernel_package}
# ---------------------------------------------------------------------------
%if %{HAVE_weakmods}
#
# post_weakmodules() - In the event that the base subpackage is already
#   installed, try to weak-update kernel modules.  Note that on an upgrade,
#   as rpm is stupid, this can likely cause the old version's openss7-modules
#   script to be run instead of the new version's (because the base package
#   has not been updated yet).
#
%endif
%if %{HAVE_initscripts}
#
# post_initscripts() - In the event that the base subpackage is already
#   installed, try to start init scripts.  This might have failed utterly when
#   the base subpackage was installed because the kernel modules might not
#   have been present for the running kernel.  If the base subpackage is not
#   yet install, the init scripts should not be present and this scriptlet
#   then does nothing.  If the base subpackage is installed and a solution is
#   generated for the running kernel, the scripts should succeed.  When the
#   base package is installed and there is no solution for the running kernel,
#   starting the init scripts will fail, in which case we return immediately.
#   Note that we only attempt to start init scripts when they are not already
#   running and they would normally be started for the current run level.
#   Another attempt to start init scripts will be made when the base or lib
#   sub-packages are installed fresh.
#
#   When this is performed as part of an upgrade and the subsystems are
#   already running, this has no effect.  If the upgrade has just provided a
#   solution at this point, it will succeed.
#
post_initscripts () { :
    local list="%{initfiles}" r i l start
    r="`runlevel | awk '{print$2}'`"
    for i in list; do
        [ -f %_initrddir/$i ] || continue
        [ ! -e /var/lock/subsys/$i ] || continue
        start=no
        for l in %_initrddir/../rc$r.d/S[0-9][0-9]$i %_initrddir/rc$r.d/S[0-9][0-9]$i; do
            if [ -L $l ]; then start=yes; break; fi
        done
        [ $start = yes ] || continue
        [ -x "`which service     2>/dev/null`" ] && { service     $i start && continue || break }
        [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i start && continue || break }
        [ -x "%_initrddir/$i"                  ] && { %_initrddir/$i start && continue || break }
    done
}
%endif
# ---------------------------------------------------------------------------
# post_install() - This is a fresh install of this kernel modules sub-package.
post_install () { :
%if %{HAVE_initscripts}
    post_initscripts || :
%endif
}
# post_upgrade() - This is an upgrade of this kernel modules sub-package.
post_upgrade () { :
%if %{HAVE_initscripts}
    post_initscripts || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 1 ] ; then : # fresh install
    post_install || :
fi
if [ $1 -ge 2 ] ; then : # upgrade
    post_upgrade || :
fi
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for the
        # running kernel.
        if [ -r /boot/System.map-%{kernel_version} ] ; then
            depmod -ae -F /boot/System.map-%{kernel_version} 2>&1 || :
        else
            depmod -ae 2>&1 || :
        fi
%if %{HAVE_initscripts}
        # Running kernels do need init scripts run, but only when normally
        # started in the current runlevel.
        r=`runlevel | sed -e 's|.*[[:space:]]||'`
        list="%{initfiles}" ; for i in $list ; do
            if [ -f %_initrddir/$i ] ; then
                if [ -L %_initrddir/../rc${r}.d/S[0-9][0-9]$i -o \
                     -L %_initrddir/rc${r}.d/S[0-9][0-9]$i ] ; then
                    /sbin/service $i start >/dev/null 2>&1 || %_initrddir/$i start >/dev/null 2>&1 || :
                fi
            fi
        done
%endif
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot by depmod
        # anyway, but try one now.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
        # Non-running kernels do not need init scripts run.
    fi
%if %{NEED_symvers}
    f=%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/System.symvers
    if [ ! -r /boot/symvers-%{kernel_version}.gz -a -r $f ] ; then
        gzip -c $f > /boot/symvers-%{kernel_version}.gz
    fi
%endif
fi
%endif

%triggerin -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
#
# triggerin_weakmodules() - When the kernel modules are updated with the
#   appropriate base package installed, or the appropriate base package is
#   updated with the kernel modules installed, or when kernel modules are
#   installed with the appropriate base package present, or the appropriate
#   base package is installed with kernel modules present, perform a weak
#   update on the modules.
#
triggerin_weakmodules () {
    if [ -x %_sbindir/openss7-modules ]; then
        %_sbindir/openss7-modules -- -q -e \
            --update-modules %_kversion || :
    fi
}
# ---------------------------------------------------------------------------
if [ $1 -ge 2 ] ; then : # base updated with kernel modules present
    triggerin_weakmodules || :
fi
if [ $2 -ge 2 ] ; then : # kernel modules updated with base present
    triggerin_weakmodules || :
fi
if [ $1 -eq 1 -a $2 -eq 1 ] ; then : # kernel modules or base install other present
    triggerin_weakmodules || :
fi
# ---------------------------------------------------------------------------
#triggerin -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------

%if %{FILES_weakmods}
%triggerin -n %{kernel_package} -- %{target_kernel}
# ---------------------------------------------------------------------------
if [ -x %{_sbindir}/%{name}-modules ] ; then
    kernels=`ls /lib/modules`
    %{_sbindir}/%{name}-modules -- -v --update-kernel $kernels || :
    # It is necessary to check whether this operation altered the module links
    # for the running kernel.  If it did, and any of the modules that were
    # altered are resident in the kernel, a restart message should be given.
    # If modules were added that were not in the kernel before (particularly
    # specfs and streams), consider starting the STREAMS subsystem if it is
    # set to start on boot.  If modules were removed that are resident in the
    # kernel (esp. specfs and streams), consider shutting down the STREAMS
    # subsystem, or issuing a warning to that effect.  We can either have
    # openss7-modules issue the appropriate warnings, or we can have it file
    # some information in /var/run and then examine it after the run.
else
    echo "WARNING: %triggerin -n %{kernel_package} -- %{target_kernel} ($1,$2) no update script" >&2
fi
%endif

%triggerun -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
%if %{HAVE_weakmods}
#
# triggerun_update() -
#
triggerun_update () { :
    if [ -x %_sbindir/%base-modules ]; then
        %_sbindir/%base-modules -- -q -e${1:+ }$1 \
            --remove-modules @kversion@ || :
    fi
}
%endif
%if %{HAVE_oldmods}
#
# triggerun_oldmods() - The -base sub-package is going away for good, but this
#   kernel modules package is still installed.  Because the %preun of the
#   -base sub-package is about to remove the modules.conf line that includes
#   and ignores the modules.%base entry, this modules.%base entry must be
#   removed before the base %preun runs.
#
triggerun_oldmods () { :
    rm -f -- %_kmoduledir/modules.%base || :
}
%endif
#
# triggerun_mods_remove() - The %{kernel_package} sub-package is being removed
#   (for good) while the -base sub-package is present.  This is a proper
#   ordering.  Use the openss7-modules from the base package to remove kernel
#   module weak links without actually removing the kernel modules.  Note that
#   rpm will eventually delete the actual kernel modules.
#
triggerun_mods_remove () { :
%if %{HAVE_weakmods}
    triggerun_update --delete-modules || :
%endif
}
#
# triggerun_base_remove() - The -base sub-package is being removed (for good)
#   while the kernel modules are present.  This is a misordering that only rpm
#   designers could misconceive.  Because the base package has the openss7-
#   modules script, removal of weak links need to be performed before the
#   script goes away.  Note that this will be performed for each and every
#   kernel module package that is still installed.
#
triggerun_base_remove () { :
%if %{HAVE_weakmods}
    triggerun_update || :
%endif
%if %{HAVE_oldmods}
    triggerun_oldmods || :
%endif
}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # kernel modules being removed with base present
    triggerun_mods_remove || :
fi
if [ $2 -eq 0 ] ; then : # base being removed with kernel modules present
    triggerun_base_remove || :
fi
if [ $1 -ge 1 -a $2 -ge 1 ] ; then : # base or kernel upgraded with other present
    # nothing to do
fi
# ---------------------------------------------------------------------------
#triggerun -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------

%triggerun -n %{kernel_package} -- %{name}-lib = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
if [ $1 -eq 0 ] ; then : # kernel modules being removed with lib present
fi
if [ $2 -eq 0 ] ; then : # lib being removed with kernel modules present
fi
if [ $1 -ge 1 -a $2 -ge 1 ] ; then : # lib or kernel upgraded with other present
fi
# ---------------------------------------------------------------------------

%if %{FILES_modules}
%preun -n %{kernel_package}
# ---------------------------------------------------------------------------
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    # save a file list of our kernel modules
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
        # We are about to uninstall for good on a running kernel then we have to
        # worry about which modules are running
%if %{HAVE_initscripts}
        # Try using init scripts to shutdown if they exist.
        reverse=
        list="%{initfiles}" ; for i in $list ; do
            reverse="$i${reverse:+ }$reverse"
        done
        for i in $reverse ; do
            if [ -f %_initrddir/$i ] ; then
                /sbin/service $i stop >/dev/null 2>&1 || %_initrddir/$i stop >/dev/null 2>&1 || :
            fi
        done
%endif
        # do it with extreme prejudice in case init scripts have been removed
        reboot='no'
        if [ -r /var/run/strace.pid ] ; then
            kill -TERM `cat /var/run/strace.pid` || :
            rm -f /var/run/strace.pid
            rm -f /var/lock/subsys/strace
            rm -f /var/lock/subsys/strace.init
        fi
        if [ -r /var/run/strerr.pid ] ; then
            kill -TERM `cat /var/run/strerr.pid` || :
            rm -f /var/run/strerr.pid
            rm -f /var/lock/subsys/strerr
            rm -f /var/lock/subsys/strerr.init
        fi
        umount -a -t specfs || reboot='yes'
%if %{USE_rmnods}
        if [ -x "%{mknods}" ] ; then
            %{rmnods}
        fi
%endif
        if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
            if [ -x /usr/sbin/fdetach ] ; then
                /usr/sbin/fdetach -a 2>/dev/null || :
            fi
            for signal in TERM KILL ; do
                if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                    lsof | grep '\<STR\>' | \
                    while read fields ; do
                        set -- $fields
                        if [ ":$5" != ':CHR' ] ; then continue; fi
                        ind=`expr $# - 1`
                        eval "val=\"\${$ind}\""
                        if [ ":$val" != ':STR' ] ; then continue; fi
                        kill -$signal $2 >/dev/null 2>&1 || :
                    done
                    sleep 5
                fi
            done
        fi
        lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
        remove_depends streams || reboot='yes'
        remove_depends specfs  || reboot='yes'
        [ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
    fi
fi
%endif

%if %{FILES_modules}
%postun -n %{kernel_package}
# ---------------------------------------------------------------------------
#
# postun_preloads() - When removing for good, make sure that the
#   modules are no longer included in the kernel-specific preloads file for
#   2.4 module system. Note that removing lines from /etc/modules and
#   /etc/modprobe.preload is the responsibility of the -base subpackage.
#
postun_preloads () {
    local prel_old prel_tmp prel_new included modules m
    prel_old=%_sysconfdir/modules-%_kversion
    if [ -f $prel_old ]; then
        prel_tmp=%_tmppath/modprobe.preload.tmp.$$
        prel_new=%_tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        included=no
        modules="%{modules}"
        for m in $modules; do
            if grep '^[[:space:]]*'"$m"'[[:space:]]*$' $prel_new >/dev/null 2>&1; then
                included=yes
            fi
        done
        if [ "$included" = yes ]; then
            for m in $modules; do
                grep -v '^[[:space:]]*'"$m"'[[:space:]]*$' $prel_new >$prel_tmp
                mv -f -- $prel_tmp $prel_new
            done
            chmod --reference=$prel_old -- $prel_new
            cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        fi
        rm -f -- $prel_new || :
    fi
}
#
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
if [ $1 = 0 -o $1 = 1 ] ; then : # final removal or upgrade
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # This is a running kernel, do a depmod on the modules directory for.
        if [ -r /boot/System.map-%{kernel_version} ] ; then
            depmod -ae -F /boot/System.map-%{kernel_version} 2>&1 || :
        else
            depmod -ae 2>&1 || :
        fi
    elif [ -r /boot/System.map-%{kernel_version} ] ; then
        # Non-running kernels a depmod will be performed on boot but depmod
        # anyway.
        UNAME_MACHINE=%{_target_cpu} \
        depmod -ae -F /boot/System.map-%{kernel_version} %{kernel_version} 2>&1 || :
    fi
    if [ :"%{kernel_version}" = :"`uname -r`" ] ; then
        # One more kick at killing any loaded modules on uninstall, last stage
        # of the upgrade on a running kernel for upgrade.
        reboot='no'
        if [ -r /var/run/strace.pid ] ; then
            kill -TERM `cat /var/run/strace.pid` || :
            rm -f /var/run/strace.pid
            rm -f /var/lock/subsys/strace
            rm -f /var/lock/subsys/strace.init
        fi
        if [ -r /var/run/strerr.pid ] ; then
            kill -TERM `cat /var/run/strerr.pid` || :
            rm -f /var/run/strerr.pid
            rm -f /var/lock/subsys/strerr
            rm -f /var/lock/subsys/strerr.init
        fi
        umount -a -t specfs || reboot='yes'
%if %{USE_rmnods}
        if [ -x "%{mknods}" ] ; then
            %{rmnods}
        fi
%endif
        if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
            if [ -x /usr/sbin/fdetach ] ; then
                /usr/sbin/fdetach -a 2>/dev/null || :
            fi
            for signal in TERM KILL ; do
                if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                    lsof | grep '\<STR\>' | \
                    while read fields ; do
                        set -- $fields
                        if [ ":$5" != ':CHR' ] ; then continue; fi
                        ind=`expr $# - 1`
                        eval "val=\"\${$ind}\""
                        if [ ":$val" != ':STR' ] ; then continue; fi
                        kill -$signal $2 >/dev/null 2>&1 || :
                    done
                    sleep 5
                fi
            done
        fi
        lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
        remove_depends streams || reboot='yes'
        remove_depends specfs  || reboot='yes'
        [ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
    fi
fi
%endif

%triggerpostun -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
# triggerpostun_base_remove() - The base subpackage was removed while the
#   kernel modules were present.
#
# triggerpostun_base_upgrade()
# ---------------------------------------------------------------------------
if [ $2 -eq 0 ] ; then : # base removed while kernel modules present
    triggerpostun_base_remove || :
fi
if [ $2 -ge 1 ] ; then : # base upgraded while kernel modules present
    triggerpostun_base_upgrade || :
fi
# ---------------------------------------------------------------------------
#triggerpostun -n %{kernel_package} -- %{name}-base = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------

%triggerpostun -n {%kernel_package} -- %{name}-lib = %{epoch}:%{baseversion}-%{specrelease}
# ---------------------------------------------------------------------------
if [ $2 -eq 0 ] ; then : # lib removed while kernel modules present
fi
if [ $2 -ge 1 ] ; then : # lib upgraded while kernel modules present
fi
# ---------------------------------------------------------------------------


%if %{FILES_weakmods}
%triggerpostun -n %{kernel_package} -- %{target_kernel}
# ---------------------------------------------------------------------------
if [ -x %{_sbindir}/%{name}-modules ] ; then
    kernels=`ls /lib/modules`
    %{_sbindir}/%{name}-modules -- -v --update-kernel $kernels || :
    # It is necessary to check whether this operation altered the module links
    # for the running kernel.  If it did, and any of the modules that were
    # altered are resident in the kernel, a restart message should be given.
    # If modules were added that were not in the kernel before (particularly
    # specfs and streams), consider starting the STREAMS subsystem if it is
    # set to start on boot.  If modules were removed that are resident in the
    # kernel (esp. specfs and streams), consider shutting down the STREAMS
    # subsystem, or issuing a warning to that effect.  We can either have
    # openss7-modules issue the appropriate warnings, or we can have it file
    # some information in /var/run and then examine it after the run.
else
    echo "WARNING: %triggerpostun -n %{kernel_package} -- %{target_kernel} ($1,$2) no update script" >&2
fi
%endif

%if %{PACKAGE_kmod}
%files -n %{kernel_package}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_modules:%dir %{_kmoduledir}/%{_ksubdir}}
%{?files_oldmods:%attr(644,root,root) %{_kmoduledir}/modules.%{base}}
%{?files_oldmods:%{_kmoduledir}/%{_ksubdir}/*.o*}
%{?files_newmods:%{_kmoduledir}/%{_ksubdir}/*.ko*}
%{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/System.symvers}
%{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/Module.symvers}
%endif

# ===========================================================================
%package -n %{kernel_develop}
# ---------------------------------------------------------------------------

Summary:            %{title} kernel module symbol versions and debug info.
Group:              Development/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

#if %{FILES_modules}
#refix:             %{_kmoduledir}
#endif
%if %{FILES_oldmods}
Prefix:             %{_includedir}/%{name}/%{kernel_version}
%endif
#if %{FILES_kdebugfiles}
#{?files_modules:Prefix:               %{_usrsrc}/debug}
#{?files_modules:%{?_lib32dir:Prefix:  %{_lib32dir}/debug}}
#{?files_modules:%{!?_lib32dir:Prefix: %{_libdir}/debug}}
#endif

Obsoletes:          %{name}-devel-kernel
Obsoletes:          %{name}-kmp%{kernel_flavor}-devel
Obsoletes:          kmod%{kernel_flavor}-devel
Obsoletes:          kernel-module-%{name}-devel%{kernel_flavor}
Obsoletes:          %{name}-devel-kmod%{kernel_flavor}

# The development package requires that the actual kernel be installed so that
# /boot/System.map-%{_kversion} is available.  Also, the specific kernel
# development package is also required.
%if %{HAVE_rhatkmps}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}-%{ARCH} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%if %{HAVE_susekmps}
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME}_%{ARCH} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%else
%((LANG_ALL="C" rpm -q --whatprovides %{_kmoduledir}/kernel --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)
%endif
%endif
%((LANG_ALL="C" rpm -q --whatprovides `(cd %{_kmoduledir}/build; /bin/pwd)` --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)

# kernel develoment needs the kernel (it defines the symbols necessary for development)
%if %{NEED_kmod}
Requires:           %{name}-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Provides:           %{name}-devel-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-devel-kernel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-devel-kernel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-devel-kernel = %{epoch}:%{baseversion}-%{rpmrelease}
Provides:           %{name}-devel-%{_kversion} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-devel-%{_kversion} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-devel-%{_kversion} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-devel-%{_kversion} = %{epoch}:%{baseversion}-%{rpmrelease}

%if %{HAVE_rhatkmps}
Provides:           kernel-devel = %{_kversion}
Provides:           kmod-%{name}-devel = %{epoch}:%{kspecversion}-%{kspecrelease}
Provides:           %{name}-devel-kmod = %{epoch}:%{kspecversion}-%{kspecrelease}
%endif

%if %{HAVE_susekmps}
Provides:           multiversion(kernel)
Provides:           %{name}-devel-kmp%{kernel_flavor} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-devel-kmp = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Version:            %{kspecversion}
Release:            %{kspecrelease}

%if %{FILES_symvers}
%triggerin -n %{kernel_develop} -- %{target_kdevel}
# ---------------------------------------------------------------------------
# This trigger script runs after we are installed and there is already a
# development kernel at the same version level, or after a development kernel at
# the same version level is installed and we are already installed.
# ---------------------------------------------------------------------------
# SuSE and RedHat are different here.  SuSE places a symsets archive in /boot
# and also has one in /lib/modules/%{_kversion}/build.  RedHat only has a
# symsets archive in /lib/modules/%{_kversion}/build, but find-requires.ksyms
# checks both /boot and /usr/src/kernels/* (where /lib/modules/*/build points).
# ---------------------------------------------------------------------------
d=%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}
f=symsets-%{_kversion}.tar.gz
if [ -r $d/$f ] then
    cp -f -- $d/$f /boot/$f
fi
%endif

%if %{FILES_symvers}
# ---------------------------------------------------------------------------
%postun -n %{kernel_develop}
if [ $1 = 0 ] ; then # we were removed for good
    f=symsets-%{_kversion}.tar.gz
    d=/lib/modules/%{_kversion}/build
    if [ -r $d/$f ] ; then
        cp -f -- $d/$f /boot/$f || :
    else
        rm -f -- /boot/$f || :
    fi
fi
%endif

# ---------------------------------------------------------------------------
%description -n %{kernel_develop}
%{descripline}
The %{kernel_develop} binary package contains the kernel modules
symbol information for development of additional STREAMS kernel modules
against the core kernel modules included in the %{_kversion} binary
package.  This package is weakly tied to the core kernel modules and
kernel for which it was compiled.  This package applies to core kernel
modules %{_kversion} for kernel version %{_kversion}.  This
package provides kernel debug information for package %{name}.  Kernel
debug information is useful when developing kernel modules that use
this package or when debugging kernel modules contained in the package.
%{descriptail}

%if %{PACKAGE_kdev}
%files -n %{kernel_develop}
# ---------------------------------------------------------------------------
%defattr(-,root,root)
#{?files_modules:%{?files_kdebugfiles:%{_usrsrc}/debug}}
#{?files_modules:%{?files_kdebugfiles:%{?_lib32dir:%{_lib32dir}/debug}}}
#{?files_modules:%{?files_kdebugfiles:%{!?_lib32dir:%{_libdir}/debug}}}
%{?files_oldmods:%dir %{_includedir}/%{name}/%{kernel_version}}
%{?files_oldmods:%{_includedir}/%{name}/%{kernel_version}/*}
#{?files_modules:%{_kmoduledir}/%{base}/Module*}
%{?files_kinfo:%dir %{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}}
%{?files_mkvars:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/Module.mkvars}
%{?files_mkvars:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/%{csite_file}}
%{?files_mkvars:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/%{cache_file}}
#{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/System.symvers}
#{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/Module.symvers}
#{?files_symvers:/boot/%{kernel_symsets}}
%{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/%{kernel_symsets}}
%{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/Modules.map}
%{?files_symvers:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/%{_kversion}/%{mpost_file}}
%endif

# =============================================================================
%package -n %{kernel_buginfo}

Summary:            %{title} kernel module debugging information.
Group:              Development/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_kdebugfiles}
%{?files_modules:%{?_lib32dir:Prefix:  %{_lib32dir}/debug}}
%{?files_modules:%{!?_lib32dir:Prefix: %{_libdir}/debug}}
%endif

# kernel debug info is useless without the kernel modules it debugs
%if %{NEED_kmod}
Requires:           %{name}-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Provides:           %{name}-debuginfo-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debuginfo-kernel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debuginfo-kernel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debuginfo-kernel = %{epoch}:%{baseversion}-%{rpmrelease}
Provides:           %{name}-debuginfo-%{_kversion} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debuginfo-%{_kversion} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debuginfo-%{_kversion} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debuginfo-%{_kversion} = %{epoch}:%{baseversion}-%{rpmrelease}

%if %{HAVE_rhatkmps}
Provides:           kernel-debug = %{_kversion}
Provides:           kmod-%{name}-debuginfo = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debuginfo-kmod = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

%if %{HAVE_susekmps}
Provides:           multiversion(kernel)
Provides:           %{name}-debuginfo-kmp%{kernel_flavor} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debuginfo-kmp = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Version:            %{kbaseversion}
Release:            %{kbaserelease}

# ---------------------------------------------------------------------------
%description -n %{kernel_buginfo}
%{descripline}
The %{kernel_buginfo} binary package contains
debugging symbols for kernel modules.  This package provides debug
information for package %{kernel_package}.  Debug
information is useful when developing kernel modules that use this
package or when debugging this package.

%if %{PACKAGE_kbug}
%files -n %{kernel_buginfo}
# ---------------------------------------------------------------------------
%{?files_modules:%{?files_kdebugfiles:%{?_lib32dir:%{_lib32dir}/debug}}}
%{?files_modules:%{?files_kdebugfiles:%{!?_lib32dir:%{_libdir}/debug}}}
%endif

# =============================================================================
%package -n %{kernel_bugsrce}

Summary:            %{title} kernel module debugging source.
Group:              Development/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_kdebugfiles}
%{?files_modules:Prefix:               %{_usrsrc}/debug}
%endif

# kernel debug source is useless without the kernel debug info
Requires:           %{name}-debuginfo-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}

Provides:           %{name}-debugsource-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debugsource-kernel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debugsource-kernel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debugsource-kernel = %{epoch}:%{baseversion}-%{rpmrelease}
Provides:           %{name}-debugsource-%{_kversion} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debugsource-%{_kversion} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-debugsource-%{_kversion} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-debugsource-%{_kversion} = %{epoch}:%{baseversion}-%{rpmrelease}

%if %{HAVE_rhatkmps}
Provides:           kernel-debug = %{_kversion}
Provides:           kmod-%{name}-debugsource = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debugsource-kmod = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

%if %{HAVE_susekmps}
Provides:           multiversion(kernel)
Provides:           %{name}-debugsource-kmp%{kernel_flavor} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-debugsource-kmp = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Version:            %{kbaseversion}
Release:            %{kbaserelease}

# ---------------------------------------------------------------------------
%description -n %{kernel_bugsrce}
%{descripline}
The %{kernel_bugsrce} binary package contains
source code for debugging kernel modules.  This package provides debug
information for package %{kernel_package}.  Debug
information is useful when developing kernel modules that use this
package or when debugging this package.

%if %{PACKAGE_kbug}
%files -n %{kernel_bugsrce}
# ---------------------------------------------------------------------------
%{?files_modules:%{?files_kdebugfiles:%{_usrsrc}/debug}}
%endif

# =============================================================================
%package -n %{kernel_sourcep}
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------

Summary:            %{title} source configured for kernel.
Group:              Development/Kernel
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           false

%if %{FILES_sourcefiles}
Prefix:             %{_usrsrc}/%{name}
Prefix:             %{_usrsrc}/%{name}-%{baseversion}-%{specrelease}
%endif

Obsoletes:          %{name}-source-kernel
Obsoletes:          %{name}-kmp%{kernel_flavor}-source
Obsoletes:          kmod%{kernel_flavor}-source
Obsoletes:          kernel-module-%{name}-source%{kernel_flavor}
Obsoletes:          %{name}-source-kmod%{kernel_flavor}

%((LANG_ALL="C" rpm -q --whatprovides `(cd %{_kmoduledir}/build; /bin/pwd)` --qf "Requires: %{NAME} = %{VERSION}-%{RELEASE}\\n" | grep -v 'not owned') 2>/dev/null)

%if %{NEED_virt}
Requires:           %{name} = %{epoch}:%{baseversion}-%{baserelease}
%endif

Provides:           %{name}-source-kernel = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-source-kernel = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-source-kernel = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-source-kernel = %{epoch}:%{baseversion}-%{rpmrelease}
Provides:           %{name}-source-%{_kversion} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-source-%{_kversion} = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-source-%{_kversion} = %{epoch}:%{baseversion}-%{baserelease}
Provides:           %{name}-source-%{_kversion} = %{epoch}:%{baseversion}-%{rpmrelease}

%if %{HAVE_rhatkmps}
Provides:           kernel-source = %{_kversion}
Provides:           kmod-%{name}-source = %{epoch}:%{baseversion}-%{specrelease}
Provides:           %{name}-source-kmod = %{epoch}:%{baseversion}-%{specrelease}
%endif

%if %{HAVE_susekmps}
Provides:           multiversion(kernel)
Provides:           %{name}-source-kmp%{kernel_flavor} = %{epoch}:%{kbaseversion}-%{kbaserelease}
Provides:           %{name}-source-kmp = %{epoch}:%{kbaseversion}-%{kbaserelease}
%endif

Version:            %{kspecversion}
Release:            %{kspecrelease}

# -----------------------------------------------------------------------------
%description -n %{kernel_sourcep}
%{descripline}
The %{kernel_sourcep} binary package contains the source code
necessary for building the %{name} release for the kernel version
%{_kversion}.  It also includes the autoconf configuration
utilities necessary to create and distribute this rpm.  However,
to develop on the package, it would be better to use the tarball
release.  Load this package if you need some files from the build
that are not present in the %{name}-devel-kernel package.
%{descriptail}

%if %{PACKAGE_ksrc}
%files -n %{kernel_sourcep}
# -----------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_sourcefiles:%dir %{_usrsrc}/%{name}-%{baseversion}-%{specrelease}}
%{?files_sourcefiles:%{_usrsrc}/%{name}}
%{?files_sourcefiles:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/*}
%{?files_sourcefiles:%{_usrsrc}/%{name}-%{baseversion}-%{specrelease}/.[^.]*}
%endif

# =============================================================================
%package java

Summary:            %{title} Java modules and native libraries.
Group:              System Environment/Libraries
%{?_xpm:Icon:       %_xpm}
%{?_gif:Icon:       %_gif}
Autoreq:            true
Autoprov:           true

%if %{FILES_jnilibs}
Prefix:             %{_jnidir}
%endif
%if %{FILES_gcjlibs}
Prefix:             %{_pkggcjdir}
%endif
%if %{FILES_gcjmaps}
Prefix:             %{_pkggcjdir}
%endif
%if %{FILES_jarfiles}
Prefix:             %{_javadir}
%endif

%if %{FILES_jnilibs}
Requires:           /sbin/ldconfig
%endif
%if %{FILES_gcjmaps}
Requires(post):     /usr/bin/gcj-dbtool
Requires(post):     /usr/bin/rebuild-gcj-db
Requires(postun):   /usr/bin/gcj-dbtool
Requires(postun):   /usr/bin/rebuild-gcj-db
%endif

# Requirements will be automatic.
#if %{NEED_lib}
#equires:           %{name}-lib     = %{epoch}:%{baseversion}-%{baserelease}
#endif

Release:            %{specrelease}

# ---------------------------------------------------------------------------
%description java
%{descripline}
The %{name}-java binary package contains JAIN implementations for
%{title}.  It includes jar files, JNI and CNI libraries, and gcj native
compiled libraries.  It also includes SWIG implementations of Java
interfaces for %{title} API libraries.
%{descriptail}

%pre java
# ---------------------------------------------------------------------------
# This is an initial installation of the java subpackage.  We need to check
# for legacy and non-rpm installations on the host and remove any entries that
# might later conflict with out entries.  We treat every fresh installation
# like an upgrade from non-rpm install.
# ---------------------------------------------------------------------------
%if %{FILES_jnilibs}
#
# pre_jnilibs() - On a fresh installation, look for an remove any non-deb or old tarball release
#   libraries.  On reinstallations this step can (and should) be skipped.  Unfortunately,
#   non-autoconf releases of LiS placed libraries all over the place.  On an initial installation,
#   this checks for other libraries with the same name and deletes them.
#
pre_jnilibs () { :
    libs="%jnilibs"; for lib in $libs; do
        old_libs="`( /sbin/ldconfig -p | grep '\<lib'$lib'\>' | cut '-d ' -f4 ) 2>/dev/null`"
        if [ -n "$old_libs" ] ; then
            echo "warning: Deleting old non-rpm libraries $old_libs" >&2
            rm -f $old_libs || true
        fi
    done
}
%endif
%if %{FILES_gcjlibs}
pre_gcjlibs () { :
}
%endif
%if %{FILES_gcjmaps}
#
# pre_gcjmaps() - On fresh install, look for non-deb libraries and remove
#   them.  This is not necessary as the gcj map will simply be rebuilt once the
#   new libraries have been installed.
#
pre_gcjmaps () { :
}
%endif
%if %{FILES_jarfiles}
#
# pre_jarfiles() - On fresh install, look for non-deb jarfiles and remove
#   them.  This is not necessary as the jar repository will simply be rebuild
#   once the new files have been installed.
#
pre_jarfiles () { :
}
%endif
#
# pre_java() - On fresh install, go looking for conflicting things and
#   removing them.  Currently this is only some libraries with the same name.
#   This is only done on fresh install.  If this operation breaks some package,
#   it can be reinstalled after the first installation of this package.
#
pre_java () { :
%if %{FILES_jnilibs}
    pre_jnilibs || :
%endif
%if %{FILES_gcjlibs}
    pre_gcjlibs || :
%endif
%if %{FILES_gcjmaps}
    pre_gcjmaps || :
%endif
%if %{FILES_jarfiles}
    pre_jarfiles || :
%endif
}
if [ $1 -eq 1 ] ; then : # fresh install
    pre_install || :
fi
if [ $1 -eq 2 ] ; then : # upgrade
    pre_upgrade || :
fi

%post java
# ---------------------------------------------------------------------------
if [ $1 = 1 -o $1 = 2 ] ; then : # fresh install or upgrade
%if %{FILES_jnilibs}
    # Fresh install or upgrade: do a load config.
%endif
%if %{FILES_gcjlibs}
    # Fresh install or upgrade: do nothing.
%endif
%if %{FILES_gcjmaps}
    # Fresh install or upgrade: rebuild classmap database.
    if [ -x /usr/bin/rebuild-gcj-db ] ; then
        /usr/bin/rebuild-gcj-db
    else
        # basically what rebuild-gcj-db does
        for base in /usr/lib* ; do
            db=`/usr/bin/gcj-dbtool -p $base`
            d=$base/gcj
            test -d $d || continue
            dirname $db | xargs mkdir -p
            /usr/bin/gcj-dbtool -n $db.tmp 64
            find $d -follow -name '*.db' -print0 | \
                xargs -0 /usr/bin/gcj-dbtool -m $db.tmp $db.tmp
            /bin/mv -f $db.tmp $db
        done
    fi
%endif
%if %{FILES_jarfiles}
    # Fresh install or upgrade: relink the jar files.
    if [ -x /usr/bin/rebuild-jar-repository ] ; then
        /usr/bin/rebuild-jar-repository %{_javadir}
    fi
%endif
fi

%postun java
# ---------------------------------------------------------------------------
if [ $1 = 0 -o $1 = 1 ] ; then
%if %{FILES_jnilibs}
    # Complete removal or upgrade: do a load config.
%endif
%if %{FILES_gcjlibs}
    # Complete removal or upgrade: do nothing.
%endif
%if %{FILES_gcjmaps}
    # Complete removal or upgrade: rebuild classmap database.
    if [ -x /usr/bin/rebuild-gcj-db ] ; then
        /usr/bin/rebuild-gcj-db
    else
        # basically what rebuild-gcj-db does
        for base in /usr/lib* ; do
            db=`/usr/bin/gcj-dbtool -p $base`
            d=$base/gcj
            test -d $d || continue
            dirname $db | xargs mkdir -p
            /usr/bin/gcj-dbtool -n $db.tmp 64
            find $d -follow -name '*.db' -print0 | \
                xargs -0 /usr/bin/gcj-dbtool -m $db.tmp $db.tmp
            /bin/mv -f $db.tmp $db
        done
    fi
%endif
%if %{FILES_jarfiles}
    # Complete removal or upgrade: relink the jar files.
    if [ -x /usr/bin/rebuild-jar-repository ] ; then
        /usr/bin/rebuild-jar-repository %{_javadir}
    fi
%endif
fi

%if %{PACKAGE_java}
%files java
# ---------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_jnilibs:%{_jnidir}/*}
%{?files_gcjlibs:%dir %{_pkggcjdir}}
%{?files_gcjlibs:%{_pkggcjdir}/*.so}
%{?files_gcjlibs:%{_pkggcjdir}/*.la}
%{?files_gcjmaps:%{_pkggcjdir}/*.db}
%{?files_jarfiles:%{_javadir}/*}
%endif

# =============================================================================
%package javadoc

Summary:        %{title} Javadoc.
Group:          Development/System
%{?_xpm:Icon:   %_xpm}
%{?_gif:Icon:   %_gif}
Autoreq:        true
Autoprov:       true

%if %{FILES_javadoc}
Prefix:         %{_pkgjavadocdir}
%endif

%if %{NEED_virt}
Requires:           %{name}         = %{epoch}:%{baseversion}-%{baserelease}
%endif

Release:        %{specrelease}

# ---------------------------------------------------------------------------
%description javadoc
%{descripline}
The %{name}-javadoc binary package contains Javadoc documentation for
%{title}.  Install this binary package if you are interested in
developing JAIN applications or resource adapters.  This package is
not normally required on other than a development system.
%{descriptail}

%if %{PACKAGE_jdoc}
%files javadoc
# -----------------------------------------------------------------------------
%defattr(-,root,root)
%{?files_javadoc:%docdir %{_pkgjavadocdir}}
%{?files_javadoc:%dir %{_pkgjavadocdir}}
%{?files_javadoc:%{_pkgjavadocdir}/*}
%endif

# =============================================================================
%changelog
# -----------------------------------------------------------------------------
# $Log: openss7.spec.in,v $

* Tue Apr 12 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.24  2011-04-12 06:33:26  brian
- passes distcheck

* Mon Apr 11 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.23  2011-04-11 06:13:41  brian
- working up weak updates

* Sat Mar 26 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.22  2011-03-26 04:28:44  brian
- updates to build process

* Thu Mar 17 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.21  2011-03-17 07:01:27  brian
- build and repo system improvements

* Wed Mar  9 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.20  2011-03-09 23:06:05  brian
- more repo workup

* Wed Mar  9 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.19  2011-03-09 10:29:34  brian
- better repo rpm

* Sun Mar  6 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.18  2011-03-06 16:13:46  brian
- better repo install handling

* Sun Mar  6 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.17  2011-03-06 08:57:19  brian
- repository updates

* Mon Feb 28 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.16  2011-02-28 19:51:28  brian
- better repository build

* Thu Feb 17 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.15  2011-02-17 18:34:09  brian
- repository and rpm build updates

* Thu Feb 10 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.14  2011-02-10 17:29:45  brian
- repo updates

* Wed Feb  9 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.13  2011-02-09 17:59:27  brian
- repository and rpm updates for suse

* Tue Feb  8 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.12  2011-02-08 23:39:01  brian
- last minute release updates

* Mon Feb  7 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.11  2011-02-07 04:48:31  brian
- updated configure and build scripts

* Tue Jan 18 2011 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.10  2011-01-18 17:12:50  brian
- rpm build updates

* Tue Sep  1 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.9  2009-09-01 09:09:45  brian
- added text image files

* Fri Jul 24 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.8  2009-07-24 13:49:43  brian
- updates for release build

* Thu Jul 23 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.7  2009-07-23 16:37:42  brian
- updates for release

* Tue Jul 21 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.6  2009-07-21 11:06:11  brian
- changes from release build

* Mon Jul 13 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.5  2009-07-13 07:13:26  brian
- changes for multiple distro build

* Sun Jul  5 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.4  2009-07-05 12:04:26  brian
- updates for release builds

* Sat Jul  4 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.3  2009-07-04 03:51:32  brian
- updates for release

* Mon Jun 29 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.2  2009-06-29 07:35:26  brian
- updated rpm spec and symvers

* Sun Jun 21 2009 Brian Bidulock <bidulock@openss7.org>
- Revision 1.1.2.1  2009-06-21 10:25:07  brian
- added base files to new distro

# vim: ft=spec sw=4 et tw=78 com=b\:#,fb\:- fo+=tcqlorn nocin nosi
