## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
## =============================================================================
## 
# @(#) $RCSfile$ $Name$($Revision$) $Date$
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
## Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
## Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by the Free
## Software Foundation; version 3 of the License.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
## details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>, or
## write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
## 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date$ by $Author$
##
## =============================================================================

##
## These are the rules that I use for building ArchLinux source and binary packages using automake.
## As a maintainer I need to package releases using makepkg.  The following rules accomplish that
## for all packages.
##

if MAINTAINER_MODE
## MAINTAINER_MODE

##
## For better speed when building package binaries, we skip these rules to invoke package building.
## There is not (yet) a need to build packages when building packages...  We use maintainer mode to
## distinguish whether these rules are necessary or not.
##

if BUILD_PKGS
## BUILD_PKGS

##
## ArchLinux builds are a little different from rpm and deb builds.  We use the same bootstrapping
## as we do for RPM and DPKG in that a distributed tarball has all of the targets necessary for
## building .src.tar.gz and .pkg.tar.gz built in, however, the PKGBUILD file does not have the
## powerful macro capabilities of an RPM spec file.  Therefore, one ArchLinux source package cannot
## be used for building all binary packages as we do for RPM.  The ArchLinux build process here
## consists of unpacking the distribution and configuring it.  Then the .src.tar.gz and .pkg.tar.gz
## packages are built from the already configured source.
##

## Because we *are* the upstream source, we always use version @PACKAGE_PACRELEASE@ and pack the
## release number onto the upstream version.
##
mpkgpkg			= $(PACKAGE_LCNAME)-$(VERSION)-$(PACKAGE_PACRELEASE)
mpkg_srcdir		= $(mpkgsourcedir)/$(PACKAGE_LCNAME)-$(VERSION)
mpkg_blddir		= $(mpkgbuilddir)/$(PACKAGE_LCNAME)-$(VERSION)
mpkg_insdir		= $(mpkginstalldir)/$(PACKAGE_LCNAME)-$(VERSION)

mpkg_base_file		= $(mpkgpkg).pkg.tar.gz

pkg_build_file		= arch/PKGBUILD
pkg_source_files	= arch/$(PACKAGE)-$(VERSION).tar.gz

archpkg			= $(PACKAGE)-$(VERSION)
pkg_dir			= $(mpkgtopdir)/$(PACKAGE)-$(VERSION)
pkg_dir_stamp		= $(mpkgtopdir)/stamp-$(PACKAGE)-$(VERSION)
pkg_cache_files		= $(mpkgtopdir)/*config.cache \
			  $(mpkgtopdir)/*config.site \
			  $(mpkgtopdir)/*modpost.cache

pkg_base_file		= $(PACKAGE)-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_devl_file		= $(PACKAGE)-devel-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_kern_file		= $(PACKAGE)-*-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_kdev_file		= $(PACKAGE)-*-devel-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_java_file		= $(PACKAGE)-java-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz

pkg_base_file_sig	= $(PACKAGE)-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_devl_file_sig	= $(PACKAGE)-devel-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_kern_file_sig	= $(PACKAGE)-*-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_kdev_file_sig	= $(PACKAGE)-*-devel-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz
pkg_java_file_sig	= $(PACKAGE)-java-$(VERSION)-$(PACKAGE_PACRELEASE)-$(target_cpu).pkg.tar.xz

pkg_tar_file		= $(mpkgtopdir)/$(archpkg).tar.gz
pkg_sig_file		= $(mpkgtopdir)/$(archpkg).tar.gz.sig
pkg_source_files	= $(pkg_tar_file) $(pkg_sig_file)
pkg_update_files	= $(mpkgtopdir)/$(pkg_kern_file) \
			  $(mpkgtopdir)/$(pkg_kern_file_sig) \
			  $(mpkgtopdir)/$(pkg_kdev_file) \
			  $(mpkgtopdir)/$(pkg_kdev_file_sig)
pkg_binary_files	= $(mpkgtopdir)/$(pkg_base_file) \
			  $(mpkgtopdir)/$(pkg_base_file_sig) \
			  $(mpkgtopdir)/$(pkg_devl_file) \
			  $(mpkgtopdir)/$(pkg_devl_file_sig) \
			  $(mpkgtopdir)/$(pkg_java_file) \
			  $(mpkgtopdir)/$(pkg_java_file_sig) \
			  $(pkg_update_files)

pkgtop_tar_file		= $(pacdir)/source/$(archpkg).tar.gz
pkgtop_sig_file		= $(pacdir)/source/$(archpkg).tar.gz.sig
pkgtop_source_files	= $(pkgtop_tar_file) $(pkgtop_sig_file)
pkgtop_update_files	= $(pacdir)/*/$(pkg_kern_file) \
			  $(pacdir)/*/$(pkg_kern_file_sig) \
			  $(pacdir)/*/$(pkg_kdev_file) \
			  $(pacdir)/*/$(pkg_kdev_file_sig)
pkgtop_binary_files	= $(pacdir)/*/$(pkg_base_file) \
			  $(pacdir)/*/$(pkg_base_file_sig) \
			  $(pacdir)/*/$(pkg_devl_file) \
			  $(pacdir)/*/$(pkg_devl_file_sig) \
			  $(pacdir)/*/$(pkg_java_file) \
			  $(pacdir)/*/$(pkg_java_file_sig) \
			  $(pkgtop_update_files)

checksummed-PKGBUILD: $(pkg_build_file)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	$(AM_V_GEN)\
	grep md5sums $< >/dev/null 2>&1 || \
	(cd $(mpkgtopdir); $(MAKEPKG) -g >>$<)

MY_PHONY		+= checksummed-PKGBUILD

#!
#! ArchLinux Build Targets:
#! ------------------------
#!
#! On ArchLinux systems, or systems sporting pacman packaging tools, the
#! following targets are used to generate archlinux release packages.  The
#! release number can be controlled in the contents of the .pacrelease file, or
#! with the --with-pac-release=RELEASENUMBER option to 'configure'.  See
#! 'configure --help' for more information on options.
#!
each-pkg: checksummed-PKGBUILD $(pkg_source_files)
	[ -d $(mpkgtopdir) ] || $(MAKE) $(AM_MAKEFLAGS) -- $(mpkgtopdir)
	( \
		cd $(mpkgtopdir); \
		case ' $(AM_PKGBOPTS) ' in \
			(*" --without-arch "*) \
				packages= ;; \
			(*" --without-indep "*) \
				case ' $(AM_PKGXOPTS) ' in \
					(*" --without-modules "*) \
						packages="$(PACKAGE) $(PACKAGE)-devel" ;; \
					(*" --without-tools "*) \
						packages="$(PACKAGE)-$(kversion) $(PACKAGE)-$(kversion)-devel" ;; \
				esac ;; \
		esac ; \
		BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS) $(AM_PKGBOPTS) $(AM_PKGXOPTS)' \
			kversion='$(kversion)' \
			$(MAKEPKG) -A -f -L --check -pkg "$$packages"; \
	)

noa-pkg: AM_PKGBOPTS = --without-arch
noa-pkg: each-pkg

one-pkg: AM_PKGBOPTS = --without-indep
one-pkg: each-pkg

one-t-pkg: AM_PKGXOPTS = --without-modules
one-t-pkg: one-pkg

one-k-pkg: AM_PKGXOPTS = --without-tools
one-k-pkg: one-pkg

all-pkg: AM_PKGBOPTS =
all-pkg: each-pkg

#! pkgs:
#!      This target is responsible for generating all of the package binary
#!      txzs for the architecture.  The binary txzs will be named:
#!
#!          @PACKAGE@-*@VERSION@-@PACKAGE_PACRELEASE@.*.pkg.txz
#!
#!      Where the stars indicate the subpackage and the architecture.  Both
#!      the architecture specific subpackages (binary objects) and the
#!      architecture independent (.any.) subpackages will be build unless the
#!      former was disabled with the option `--disable-arch', or the later
#!      with the option `--disable-indep', passed to `configure'.
#!
pkgs:
	@$(ECHO) "D: $@: rebuild noarch"; \
	$(MAKE) $(AM_MAKEFLAGS) PKGXOPTS='$(PKGXOPTS)' kversion='$(kversion)' PKGTARGET="any" noa-pkg || :
	@$(ECHO) "D: $@: rebuild $(kversion)"; \
	$(MAKE) $(AM_MAKEFLAGS) PKGXOPTS='$(PKGXOPTS)' kversion='$(kversion)' PKGTARGET="$(PKGTARGET)" one-k-pkg || :
	@$(ECHO) "D: $@: rebuild $(PKGTARGET)"; \
	$(MAKE) $(AM_MAKEFLAGS) PKGXOPTS='$(PKGXOPTS)' kversion='$(kversion)' PKGTARGET="$(PKGTARGET)" one-t-pkg || :


$(pkg_sigs): %.sig: %
	$(AM_V_GEN)\
	user="$(GNUPGUSER)"; user="$${user:+ -u }$$user"; \
	home="$(GNUPGHOME)"; home="$${home:+ --homedir }$$home"; \
	pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
	pipe="$(GNUPGPASS)"; pipe="$${pipe:+$(ECHO) $$pipe |}"; \
	$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< >$@ 2>/dev/null"; \
	eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< >$@ 2>/dev/null"


## Because the build directory is in the autoconf top build directory on the local machine, it needs
## to be cleaned when a distclean is performed.  We use makepkg to do this for us, and makepkg will
## complain if the directory does not exist, so we ignore errors.  The PKGBUILD file must still
## exist for use to do this too.  The same is true for build files.
##
distclean-pkg:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@if test -f $(pkg_build_file); then \
		echo '(cd $(mpkgtopdir); $(MAKEPKG) -c)'; \
		(cd $(mpkgtopdir); $(MAKEPKG) -c); \
	fi

DISTCLEAN_LOCAL		+= distclean-pkg
DISTCLEANFILES		+= $(pkg_cache_files) \
			   $(pkg_dir_stamp) \
			   $(pkg_source_files) \
			   $(pkg_binary_files)



release-clean-pkg: distclean-pkg

RELEASE_DIRECTORIES	+= $(pacdir) $(pacfulldir) $(pacmaindir) $(pacdebgdir) $(pacdevldir) $(packsrcsdir)
RELEASE			+= all-pkgs


repo-pacman: $(RELEASE_DIRECTORIES) $(pacman_files)

repo-sign-pacman: $(RELEASE_DIRECTORIES) $(pacman_signs) $(pacman_keys)

repo-clean-pacman:

REPO_DIRECTORIES	+= $(pacmandirs)
#REPO_LINKS		+=
REPO			+= repo-pacman
REPO_SIGN		+= repo-sign-pacman
REPO_CLEAN		+= repo-clean-pacman
REPOCLEANFILES		+= $(pacman_files) $(pacman_signs) $(pacman_keys)

UPDATE_DIRECTORIES	+= $(pacmandirs)
#UPDATE_LINKS		+=
UPDATE			+= repo-pacman
UPDATE_SIGN		+= repo-sign-pacman
UPDATE_CLEAN_LOCAL	+= repo-clean-pacman
UPDATECLEANFILES	+=




## BUILD_PKGS
endif

## MAINTAINER_MODE
endif

## =============================================================================
##
## $Log$
## =============================================================================
## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
