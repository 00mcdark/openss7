# =============================================================================
# 
# @(#) $RCSfile: kernel.am,v $ $Name:  $($Revision: 0.9.2.1 $) $Date: 2004/04/07 08:38:55 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2004  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2004/04/07 08:38:55 $ by $Author: brian $
#
# =============================================================================

all-am: $(KERNEL_MODULES)

#STRIP_KERNEL_MODULES		= $(STRIP) --strip-debug -X -x

install-modules: $(KERNEL_MODULES) $(KERNEL_MODCONF)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)
	@list='$(KERNEL_MODULES)'; \
	for p in $$list; do \
		if test -f $$p; then \
			f="`echo $$p | sed -e 's|^.*/||;s|lib.*_a|streams|'`" ; \
			echo "$(LIBTOOL) --mode=install $(INSTALL) -m 644 $$p $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$f" ; \
			$(LIBTOOL) --mode=install $(INSTALL) -m 644 $$p $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$f ; \
			if test -n "$(INSTALL_STRIP_FLAG)" -a -n "$(STRIP_KERNEL_MODULE)" ; then \
				echo "$(STRIP_KERNEL_MODULES) $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$f" ; \
				$(STRIP_KERNEL_MODULES) $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$f ; \
			fi ; \
		else :; fi ; \
	done
	@if test -n "$(KERNEL_MODCONF)" ; then \
		echo "$(INSTALL) -m 600 $(KERNEL_MODCONF) $(DESTDIR)$(kmoduledir)/modules.$(KMODCONF_EXT)" ; \
		$(INSTALL) -m 600 $(KERNEL_MODCONF) $(DESTDIR)$(kmoduledir)/modules.$(KMODCONF_EXT) ; \
	fi

install-exec-local: install-modules

#
# This is equivalent to the kernel modules package rpm %post scriptlet.  It is
# only executed when the install directory is fully configured for kernel
# modules.  That is, this does not run when building an rpm because the binaries
# are install in a temporary, unconfigured directory.  Autoconf has no
# post-install targets, so we hook this into the install target with
# install-exec-hook that runs after install-exec has completed.
#
# Some explanaion is in order: the post-modules target checks for a fully
# configured install directory by checking for the existence of the
# /etc/modules.conf file in the target install directory.  If it exists, then we
# are doing a non-rpm install and need to configure /etc/modules.conf in the
# target directory.  First we check if modules.conf has already been inserted by
# us by looking for our include statement.  If we have already patched up the
# modules.conf file, we just leave it.  If an adjustment needs to be made, we
# next check for an older non-rpm LiS distribution by checking for the tell-tale
# 'BEGIN LiS' string in modules.conf.  If there is an older non-rpm LiS, we
# remove any reference to any of our installable modules that may have
# previously been referenced in the modules.conf by LiS before proceeding.  We
# also need to force remove any kernel modules left by LiS in the misc modules
# subdirectory.  Next, if there is an older LiS autoconf installation that
# included these drivers and modules, we need to remove references to them from
# the modules.streams file and the streams subdirectory.  Lastly, we add our
# prune and include lines to the modules.conf file.  If we have a usable system
# map file and an executable depmod, we perform the depmod.  Finally we invoke
# installation of any necessary devices.
#
post-modules:
	@if test -r $(DESTDIR)$(krootdir)/etc/modules.conf ; then \
		conf_old='$(DESTDIR)$(krootdir)/etc/modules.conf' ; \
		if ( grep -q 'include.*modules.$(KMODCONF_EXT)' $$conf_old ) ; then :; else \
			conf_new='$(DESTDIR)$(krootdir)/etc/modules.conf.new.$$$$' ; \
			cp -f $$conf_old $$conf_new ; \
			if ( grep -q 'BEGIN LiS' $$conf_old ) ; then \
				conf_tmp='$(DESTDIR)$(krootdir)/etc/modules.conf.tmp.$$$$' ; \
				list='$(KERNEL_MODULES)'; for p in $$list; do \
					m="`echo $$p | sed -e 's|^.*/||;s|lib.*_a|streams|;s|\.o||'`" ; \
					sed -e '/alias.*\<'$$m'\>/d' $$conf_new > $$conf_tmp ; \
					mv -f $$conf_tmp $$conf_new ; \
					rm -f $(DESTDIR)$(kmoduledir)/misc/$$m.o ; \
				done ; \
			fi ; \
			streams_dir='$(DESTDIR)$(kmoduledir)/streams' ; \
			streams_old='$(DESTDIR)$(kmoduledir)/modules.streams' ; \
			if test -f $$streams_old -a -d $$streams_dir ; then \
				streams_new='$(DESTDIR)$(kmoduledir)/modules.streams.new.$$$$' ; \
				streams_tmp='$(DESTDIR)$(kmoduledir)/modules.streams.tmp.$$$$' ; \
				cp -f $$streams_old $$streams_new ; \
				list='$(KERNEL_MODULES)'; for p in $$list; do \
					m="`echo $$p | sed -e 's|^.*/||;s|lib.*_a|streams|;s|\.o||'`" ; \
					sed -e '/alias.*\<'$$m'\>/d' $$streams_new > $$streams_tmp ; \
					mv -f $$streams_tmp $$streams_new ; \
					rm -f $$streams_dir/$$m.o ; \
				done ; \
				chmod --reference=$$streams_old $$streams_new ; \
				cp -fb --suffix=.$(KMODCONF_EXT).bak $$streams_new $$streams_old ; \
				rm -f $$streams_new ; \
			fi ; \
			echo 'prune modules.$(KMODCONF_EXT)' >> $$conf_new ; \
			echo 'if -f /lib/modules/`uname -r`/modules.$(KMODCONF_EXT)' >> $$conf_new ; \
			echo 'include /lib/modules/`uname -r`/modules.$(KMODCONF_EXT)' >> $$conf_new ; \
			echo 'endif' >> $$conf_new ; \
			chmod --reference=$$conf_old $$conf_new ; \
			cp -fb --suffix=.$(KMODCONF_EXT).bak $$conf_new $$conf_old ; \
			rm -f $$conf_new ; \
		fi ; \
		sysmap='$(DESTDIR)$(krootdir)/boot/System.map-$(kversion)' ; \
		if test -r $$sysmap -a -x /sbin/depmod ; then \
			echo "UNAME_MACHINE=$(target_cpu) /sbin/depmod -ae -b $(DESTDIR)$(krootdir)/ -C $$conf_old -F $$sysmap $(kversion)" ; \
			UNAME_MACHINE=$(target_cpu) /sbin/depmod -ae -b $(DESTDIR)$(krootdir)/ -C $$conf_old -F $$sysmap $(kversion) ; \
		fi ; \
		$(MAKE) $(AM_MAKEFLAGS) DESTDIR=$(DESTDIR) install-devices ; \
	fi

install-exec-hook: post-modules

uninstall-modules:
	@$(NORMAL_UNINSTALL)
	@list='$(KERNEL_MODULES)'; for p in $$list; do \
		p="`echo $$p | sed -e 's|^.*/||;s|lib.*_a|streams|'`" ; \
		echo "$(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$p" ; \
		$(LIBTOOL) --mode=uninstall rm -f $(DESTDIR)$(kmoduledir)/$(KERNEL_SUBDIR)/$$p ; \
	done
	rm -f $(DESTDIR)$(kmoduledir)/modules.$(KMODCONF_EXT)

uninstall-local: uninstall-modules

#
# This is equivalent to the kernel modules package rpm %postun scriptlet.  It
# is only executed when the uninstall directory is fully configured for kernel
# modules.  That is, this does not run when building an rpm because the
# binaries are not uninstalled (they are usually just removed wholesale).
# Autoconf has no post-uninstall targets, so we hook this into the
# uninstall-hook that runs after uninstall has completed.
#
postun-modules:
	@if test -r $(DESTDIR)$(krootdir)/etc/modules.conf ; then \
		r=yes ; \
		for f in $(DESTDIR)$(krootdir)/lib/modules/*/modules.$(KMODCONF_EXT) ; do \
			if test -f $$f ; then r=no ; break ; fi ; \
		done ; \
		conf_old='$(DESTDIR)$(krootdir)/etc/modules.conf' ; \
		if test ":$$r" = :yes ; then \
			conf_new='$(DESTDIR)$(krootdir)/etc/modules.conf.new.$$$$' ; \
			sed -e '/prune modules.$(KMODCONF_EXT)/,/endif/d' $$conf_old > $$conf_new ; \
			chmod --reference=$$conf_old $$conf_new ; \
			cp -fb --suffix=.$(KMODCONF_EXT).bak $$conf_new $$conf_old ; \
			rm -f $$conf_new ; \
		fi ; \
		sysmap='$(DESTDIR)$(krootdir)/boot/System.map-$(kversion)' ; \
		if test -r $$sysmap -a -x /sbin/depmod ; then \
			echo "UNAME_MACHINE=$(target_cpu) /sbin/depmod -ae -b $(DESTDIR)$(krootdir)/ -C $$conf_old -F $$sysmap $(kversion)" ; \
			UNAME_MACHINE=$(target_cpu) /sbin/depmod -ae -b $(DESTDIR)$(krootdir)/ -C $$conf_old -F $$sysmap $(kversion) ; \
		fi ; \
		$(MAKE) $(AM_MAKEFLAGS) DESTDIR=$(DESTDIR) uninstall-devices ; \
	fi

#
# The uninstall-hook target is run after the files have been removed.  It is
# essentially equivalent to the rpm %postun, but it is only executed when the
# uninstall directory is fully configured for kernel modules.  (That is, this
# does not run when building an rpm, because the binaries are installed in a
# temporary, unconfigured directory.)  This is for alien systems and embedded
# targets that cannot build from packages.
#
uninstall-hook: postun-modules

#.PHONY: install-modules post-modules uninstall-modules postun-modules

# vim: ft=automake
