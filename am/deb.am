## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
## =============================================================================
## 
# @(#) $RCSfile: deb.am,v $ $Name:  $($Revision: 1.1.2.3 $) $Date: 2011-01-18 17:09:52 $
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
## Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
## Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by the Free
## Software Foundation; version 3 of the License.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
## details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>, or
## write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
## 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date: 2011-01-18 17:09:52 $ by $Author: brian $
##
## =============================================================================

##
## These are the rules that I use for build debian source and binary packages using automake.  As a
## maintainer I need to package releases using dpkg.  The following rules accomplish that for all
## most packages.
##

##
## For better speed when building package binaries, we skip these rules to invoke package building.
## There is not (yet) a need to build packages when building packages...  We use maintainer mode to
## distinguish whether these rules are necessary or not.
##

if BUILD_DPKG
## BUILD_DPKG

if MAINTAINER_MODE
## MAINTAINER_MODE

##
## Debian builds are a little different from rpm builds.  We use the same bootstrapping as we do for
## RPM in that a distributed tarball has all of the targets necessary for building dsc and deb
## packages built in, however, the debian control file does not have the powerful macro capabilities
## of an RPM spec file.  Therefore, one debian source package cannot be used for building all binary
## packages as we do with RPM.  The Debian build process here consists of unpacking the distribution
## and configuring it.  Then the .dsc and .deb packages are built from the already configured source.
##

##
# Because we *are* the upstream source, we always use debian version @PACKAGE_DEBRELEASE@ and pack
# the RPM release number onto the upstream version, but with a period instead of a dash to suppress
# warnings from dpkg-source.
##
debianpkg		= $(PACKAGE_LCNAME)_$(VERSION)-$(PACKAGE_DEBRELEASE)
debian_dir		= $(debbuilddir)/$(PACKAGE_LCNAME)-$(VERSION)
debian_dir_stamp	= $(debbuilddir)/stamp-$(PACKAGE_LCNAME)-$(VERSION)
debian_cache_files	= $(debbuilddir)/*config.cache \
			  $(debbuilddir)/*config.site \
			  $(debbuilddir)/*modpost.cache

debian_tar_file		= $(debbuilddir)/$(debianpkg).tar.gz
debian_dsc_file		= $(debbuilddir)/$(debianpkg).dsc
debian_sig_file		= $(debbuilddir)/$(debianpkg).dsc.sig
debian_source_files	= $(debian_tar_file) $(debian_dsc_file) $(debian_sig_file)
debian_change_files	= $(debbuilddir)/$(debianpkg)_*.changes $(debbuilddir)/$(debianpkg)_*.changes.asc
debian_binary_files	= $(debbuilddir)/$(PACKAGE_LCNAME)*_$(VERSION)-$(PACKAGE_DEBRELEASE)_*[ud.]deb \
			  $(debbuilddir)/$(PACKAGE_LCNAME)*-$(VERSION)_$(krelease)_*[ud.]deb

debtop_tar_file		= $(debdir)/$(debianpkg).tar.gz
debtop_dsc_file		= $(debdir)/$(debianpkg).dsc
debtop_sig_file		= $(debdir)/$(debianpkg).dsc.sig
debtop_source_files	= $(debtop_tar_file) $(debtop_dsc_file) $(debtop_sig_file)
debtop_change_files	= $(debdir)/$(debianpkg)_*.changes $(debdir)/$(debianpkg)_*.changes.asc
debtop_binary_files	= $(debdir)/$(PACKAGE_LCNAME)*_$(VERSION)-$(PACKAGE_DEBRELEASE)_*[ud.]deb \
			  $(debdir)/$(PACKAGE_LCNAME)*-$(VERSION)_$(krelease)_*[ud.]deb

RELEASE_DIRECTORIES	+= $(debdir)
UPDATE_DIRECTORIES	+= $(debdir)

##
# For the master build package it is sometime necessary to pass extra options down to configured
# subdirectories for a master build.  These options will contain the passed down options from the
# environment in that case.  See the recursive build targets below.
##
AM_DEBXOPTS	= -d

#!
#! Debian Build Targets:
#! ---------------------
#!
#! On debian systems, or systems sporting debian packaging tools, the following
#! targets are used to generate debian release packages.  The release number can
#! be controlled by the contents of the .debrelease file, or with the
#! --with-debrelease=RELEASENUMBER option to 'configure'.  See 'configure
#! --help' for more information on options.
#!
$(debian_dir):: $(debian_dir_stamp)
$(debian_dir_stamp): $(tardir)/$(PACKAGE)-$(VERSION).tar.bz2
	rm -rf $(debbuilddir)/$(PACKAGE)-$(VERSION) $(debian_dir)
	$(mkdir_p) $(debbuilddir)/$(PACKAGE)-$(VERSION)
	$(BZIP2_CMD) -dc $< | tar xf - -C $(debbuilddir)
	@if test "$(debbuilddir)/$(PACKAGE)-$(VERSION)" != "$(debian_dir)"; then \
		$(ECHO) "$(am__mv) -- $(debbuilddir)/$(PACKAGE)-$(VERSION) $(debian_dir)"; \
		$(am__mv) -- $(debbuilddir)/$(PACKAGE)-$(VERSION) $(debian_dir); \
	fi
	touch $(debian_dir_stamp)

##
# Approach to signing dsc files taken from dpkg-buildpackage:  A signed .dsc file is merely a signed
# cleartext armoured version of the original .dsc file with the same filename.  The tar file is not
# signed.  As there is an md5 checksum in the signed .dsc file, the signature verifies the tar file
# as well.  We use a little trick to allow GPGPASSWD to be exported by the user to permit automated
# builds that including signing.  If you don't like the security issues that raises, dont use it and
# you will be prompted for a passphrase with each signature.
##
$(debian_dsc_file) $(debian_tar_file):: $(debian_dir_stamp)
	[ -d $(debian_dir) ] || $(MAKE) $(AM_MAKEFLAGS) -- $(debian_dir)
	( cd $(debian_dir); DH_COMPAT=8 DH_VERBOSE=1 BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' $(DPKG_BUILDPACKAGE) -S -rfakeroot -us -uc $(AM_DEBXOPTS) )
#	(cd "$(debbuilddir)"; $(DPKG_SOURCE) -b -sn $(debian_dir))

$(debtop_dsc_file) $(debtop_tar_file)::
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@f=`$(ECHO) "$@" | sed 's|^$(debdir)/|$(debbuilddir)/|'`; \
	test ":$(FORCE)" != :force -a \( -f "$@" -o -f "$$f" \) || { \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGES) -- $$f"; \
		$(MAKE) $(AM_MAKEFLAGES) -- $$f; }; \
	test ! \( "$@" -ef "$$f" \) || exit 0; \
	d=; test -f $$f || d='$(srcdir)/'; \
	test ":$(FORCE)" != :force -a -f "$@" || { \
		$(ECHO) "cp -f -- $$d$$f $@"; \
		cp -f -- $$d$$f $@; }

$(debtop_sig_file): $(debtop_dsc_file)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@\
	user="$(GNUPGUSER)"; user="$${user:+ -u $$user}"; \
	home="$(GNUPGHOME)"; home="$${home:+ --homedir $$home}"; \
	pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
	pipe="$(GNUPGPASS)"; pipe="$${pipe:+ $(ECHO) "$$pipe" |}"; \
	$(ECHO) "rm -f -- $@"; \
	rm -f -- $@; \
	$(ECHO) "$(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@"; \
	eval "$$pipe $(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@" || { rm -f -- $< $@; exit 1; }
	cp -fp $@ $<
	touch $@

#! dsc:
#!     This target will build the debian source change package (.dsc file).  We
#!     use release number 0 so that the entire tarball is included in the dsc
#!     file.  You can use release number 1 for the same purposes.  Release
#!     numbers above 1 will not include the entire tarball.  The .dsc file will
#!     be named: @PACKAGE_LCNAME@_@VERSION@-@PACKAGE_DEBRELEASE@.dsc
#!
dsc: $(debtop_dsc_file) $(debtop_tar_file)

#! sigs:
#!     This target signs the .deb files.  You will be prompted for a password,
#!     unless to specify it to make with the GNUPGPASS variable.
#!
sigs: $(debtop_sig_file)

AM_BINARY_TARGET = binary-arch

##
# This is the type of thing that needs to be included in the master makefile to build debs for the
# current target, we also build any defined AM_DEBTARGETS
##
each-deb: $(debian_dir_stamp)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	[ -d $(debian_dir) ] || $(MAKE) $(AM_MAKEFLAGS) -- $(debian_dir)
	( cd $(debian_dir); DH_COMPAT=8 DH_VERBOSE=1 BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS) $(BUILD_MOREOPTIONS)' kversion='$(kversion)' debbuilddir='$(debbuilddir)' $(DPKG_BUILDPACKAGE) $(AM_DEBBOPTS) -rfakeroot -uc $(AM_DEBXOPTS) -nc )
#	( cd $(debian_dir); dpkg-architecture -c fakeroot $(MAKE) $(AM_MAKEFLAGS) -f debian/rules -- "BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)'" DH_COMPAT=8 DH_VERBOSE=1 $(AM_BINARY_TARGET) )

noa-deb: AM_DEBBOPTS = -A
noa-deb: AM_DEBXOPTS = -d
noa-deb: BUILD_CFGOPTIONS = --disable-arch
noa-deb: AM_BINARY_TARGET = binary-indep
noa-deb: each-deb

one-deb: AM_DEBBOPTS = -B
one-deb: AM_DEBXOPTS = -d
one-deb: BUILD_CFGOPTIONS = --disable-indep
one-deb: AM_BINARY_TARGET = binary-arch
one-deb: each-deb

one-t-deb: BUILD_MOREOPTIONS = --without-modules
one-t-deb: one-deb

one-k-deb: BUILD_MOREOPTIONS = --without-tools
one-k-deb: one-deb

all-deb: AM_DEBBOPTS = -b
all-deb: AM_DEBXOPTS = -d
all-deb: BUILD_CFGOPTIONS =
all-deb: AM_BINARY_TARGET = binary
all-deb: each-deb

chg-deb:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@if test "$(debdir)" != "$(debbuilddir)"; then \
		list="$(debian_binary_files) $(debian_change_files)"; for f in $$list; do \
			test -f $$f || continue; \
			t=`echo $$f | sed 's|^$(debbuilddir)/|$(debdir)/|'`; \
			if test ":$(FORCE)" = :force -o ! -f "$$t"; then \
				$(ECHO) "cp -f -- $$f $$t"; \
				cp -f -- $$f $$t; \
			fi; \
		done; \
	fi

#! debs:
#!     This target will build the debian binary package (.deb file) from the
#!     .dsc created above.  (This target will also create the .dsc if it has not
#!     been created already.)  The subpackage .deb files will be named:
#!     @PACKAGE_LCNAME@*_@VERSION@-@PACKAGE_DEBRELEASE@_*[ud.]deb, where the stars indicate the subpackage and
#!     the architecture.
#!
debs: all-deb chg-deb

# Another sneaky trick
all-one-k-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-one-t-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-one-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-noa-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-all-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-chg-deb:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-dsc:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-debs:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-sigs:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'
all-csig:	ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)' BUILD_MOREOPTIONS='$(BUILD_MOREOPTIONS)'

#! csig:
#!     This target signs the .dsc file.  You will be prompted for a password,
#!     unless to specify it to make with the GNUPGPASS variable.
#!
csig:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@list="$(debtop_change_files)"; for f in $$list; do \
		test -f $$f || continue; \
		t=`echo $$f | sed -r -e 's|\.changes(\.asc)?$$|.changes.asc|'`; \
		if test ! -f $$t -o $$t -ot $$f; then \
			user="$(GNUPGUSER)"; user="$${user:+ -u $$user}"; \
			home="$(GNUPGHOME)"; home="$${home:+ --homedir $$home}"; \
			pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
			pipe="$(GNUPGPASS)"; pipe="$${pipe:+ $(ECHO) "$$pipe" |}"; \
			$(ECHO) "rm -f -- $$t"; \
			rm -f -- $$t; \
			$(ECHO) "$(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $$f > $$t"; \
			eval "$$pipe $(GPG) --clearsign -a --passphrase-fd 0$$user$$home$$pass -o- -- $$f > $$t" || { rm -f -- $$f $$t; exit 1; }; \
			cp -fp $$t $$f; \
			touch $$t; \
		fi; \
	done

#! reupload:
#!	This target searches out a list of kernel names from the
#!	@DESTDIR@/lib/modules directory and builds debs for those kernels and
#!	for each of a set of architectures given in the AM_DEBTARGETS variable
#!	to make.  This is a convenience target for building a group of debs on a
#!	given build machine.
#!
reupload: ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)'
reupload:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@debs="`find $(debdir) -name '$(PACKAGE_LCNAME)*_$(VERSION)-$(PACKAGE_DEBRELEASE)_all.*deb' 2>/dev/null`"; \
	if test -z "$$debs" -o -n '$(FORCE)'; then \
		$(ECHO) "D: $@: rebuild noarch"; \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH=\"noarch\" noa-deb"; \
		$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH="noarch" noa-deb || :; \
	else \
		$(ECHO) "D: $@: skipped noarch"; \
	fi; \
	targets="$(ARCH) $(AM_DEBTARGETS)"; for t in $$targets;  do \
		a=`$(ECHO) "$$t" | sed 's,-.*$$,,'`; \
		test \( "$$a" != 'noarch' -a "$$a" != 'all' \) || continue; \
		kernels="`( find $(DESTDIR)$(rootdir)/lib/modules -type d -name '2\.[46]\.*' | sort -r ) 2>/dev/null`"; \
		for k in $$kernels; do \
			k=`basename $$k`; \
			test -f $(DESTDIR)$(rootdir)/lib/modules/$$k/build || continue; \
			if test -z '$(DESTDIR)'; then \
				if ! $(DPKG) -S /lib/modules/$$k/build >/dev/null 2>&1; then \
					continue; \
				fi; \
			fi; \
			ks=`echo $$k | sed 's,-,.,g;s,_,.,g'`; \
			debs="`find $(debdir)/binary-$$a -name '$(PACKAGE_LCNAME)*-$(VERSION)_$(krelease)_$$a.*deb' 2>/dev/null`"; \
			if test -z "$$debs" -o -n '$(FORCE)'; then \
				$(ECHO) "D: $@: rebuild $$k"; \
				$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' kversion=\"$$k\" ARCH=\"$$t\" one-deb"; \
				$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' kversion="$$k" ARCH="$$t" one-deb || :; \
			else \
				$(ECHO) "D: $@: skipped $$k"; \
			fi; \
		done; \
		debs="`find $(debdir)/binary-$$a -name '$(PACKAGE_LCNAME)*_$(VERSION)-$(PACKAGE_DEBRELEASE)_$$a.*deb' 2>/dev/null`"; \
		if test -z "$$debs" -o -n '$(FORCE)'; then \
			$(ECHO) "D: $@: rebuild $$a"; \
			$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH=\"$$t\" one-deb"; \
			$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH="$$t" one-deb|| :; \
		else \
			$(ECHO) "D: $@: skipped $$a"; \
		fi; \
	done; \
	if test -z "$$debs" -o -n '$(FORCE)'; then \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' chg-deb"; \
		$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' chg-deb || :; \
	fi

distclean-deb:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	rm -rf $(debian_dir)

DISTCLEAN_LOCAL		+= distclean-deb
DISTCLEANFILES		+= $(debian_cache_files) \
			   $(debian_dir_stamp) \
			   $(debian_source_files) \
			   $(debian_change_files) \
			   $(debian_binary_files)

release-clean-deb: distclean-deb

RELEASE			+= all-dsc all-all-deb all-chg-deb
RELEASE_SIGN		+= all-sigs all-csig
RELEASE_DIRECTORIES	+= 
RELEASE_CLEAN_LOCAL	+= release-clean-deb
RELEASECLEANFILES	+= $(debian_dir_stamp) \
			   $(debian_source_files) \
			   $(debian_change_files) \
			   $(debian_binary_files) \
			   $(debtop_source_files) \
			   $(debtop_change_files) \
			   $(debtop_binary_files)

MY_PHONY		+= dsc debs each-deb one-t-deb one-k-deb one-deb noa-deb all-deb sigs csig reupload
ALL_RECURSIVE_TARGETS	+= all-dsc all-debs all-one-t-deb all-one-k-deb all-one-deb all-noa-deb all-all-deb all-chg-deb all-sigs all-csig all-reupload

update-clean-deb:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	rm -rf $(debian_dir)
	@list="$(debtop_source_files) $(debtop_change_files) $(debtop_binary_files)"; \
	for f in $$list; do \
		if test -e $$f -a \( ! -f '$(USTAMP)' -o $$f -nt '$(USTAMP)' \); then \
			echo "$$f"; \
		fi; \
	done | $(am__base_remove)

UPDATE			+= all-update-dscs all-update-debs all-update-chgs
UPDATE_SIGN		+= all-update-csig all-update-sigs
UPDATE_DIRECTORIES	+=
UPDATE_CLEAN_LOCAL	+= update-clean-deb
UPDATECLEANFILES	+= $(debian_dir_stamp) \
			   $(debian_source_files) \
			   $(debian_change_files) \
			   $(debian_binary_files)

##
## Provide updates to debian source packages.
##
## If the DSC does not exist, create it.  If the DSC exists, was created after
## the update stamp, and force is applied, remove and recreate the DSC.
##
update-dscs:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@list="$(debtop_dsc_file)"; for f in $$list; do \
		if test ! -e "$$f" -o \( -n '$(FORCE)' -a \( ! -e '$(USTAMP)' -o "$$f" -nt '$(USTAMP)' \); then \
			g=`$(ECHO) "$$f" | sed 's,^$(debdir),$(debian_dir),'`; \
			$(ECHO) "rm -f -- \"$$f\" \"$$g\""; rm -f -- "$$f" "$$g"; \
			$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- \"$$f\""; \
			$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- "$$f"; \
		fi; \
	done

##
## Provide updates to debian binary packages.
##
## If the DEBs in the set do not exist, create them.  If the DEBSs in the set
## exist, were created after the update stamp, and force is applied, recreate
## the DEB set.
##
update-debs: ALL_EXPORT_OPTS = AM_DEBXOPTS='$(AM_DEBXOPTS)' BUILD_CFGOPTIONS='$(BUILD_CFGOPTIONS)'
update-debs:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@rebuild=yes; rebuilt=no; \
	debs=`(find $(debdir) -name '$(deb_binary_files)' | grep '_all\.deb') 2>/dev/null`; \
	for f in $$debs; do \
		if test -z '$(FORCE)' -o \( -e '$(USTAMP)' -a '$(USTAMP)' -nt "$$f" \); then \
			$(ECHO) "D: $@: leaving $$f"; \
			rebuild=no; \
		fi; \
	done; \
	if test ":$$rebuild" = :yes; then \
		$(ECHO) "D: $@: rebuild noarch"; \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH=\"noarch\" noa-deb"; \
		$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH="noarch" noa-deb || :; \
		rebuilt=yes; \
	else \
		$(ECHO) "D: $@: skipped noarch"; \
	fi; \
	targets="$(ARCH) $(AM_DEBTARGETS)"; \
	for t in $$targets; do \
		a=`$(ECHO) "$$t" | sed 's,-.*$$,,'`; \
		test \( "$$a" != 'noarch' -a "$$a" != 'all' \) || continue; \
		kernels="`( find $(DESTDIR)$(rootdir)/lib/modules -type d -name '2\.[46]\.*' | sort -r ) 2>/dev/null`"; \
		for k in $$kernels; do \
			k=`basename $$k`; \
			test -f $(DESTDIR)$(rootdir)/lib/modules/$$k/build/Makefile || continue; \
			if test -z '$(DESTDIR)'; then \
				if ! $(DPKG) -S /lib/modules/$$k/build >/dev/null 2>&1; then \
					continue; \
				fi; \
			fi; \
			ks=`echo $$k | sed 's,-,.,g;s,_,.,g'`; \
			rebuild=yes; \
			debs=`(find $(debdir) -name '$(deb_binary_files)' | grep '_$(krelease)_$$a\..*deb') 2>/dev/null`; \
			for f in $$debs; do \
				if test -z '$(FORCE)' -o \( -e '$(USTAMP)' -a '$(USTAMP)' -nt "$$f" \); then \
					$(ECHO) "D: $@: leaving $$f"; \
					rebuild=no; \
				fi; \
			done; \
			if test ":$$rebuild" = :yes; then \
				$(ECHO) "D: $@: rebuild $$k"; \
				$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' kversion=\"$$k\" ARCH=\"$$t\" one-deb"; \
				$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' kversion="$$k" ARCH="$$t" one-deb || :; \
				rebuilt=yes; \
			else \
				$(ECHO) "D: $@: skipped $$k"; \
			fi; \
		done; \
		rebuild=yes; \
		debs=`(find $(debdir) -name '$(deb_binary_files)' | grep '_$$a\..*deb') 2>/dev/null`; \
		for f in $$debs; do \
			if test -z '$(FORCE)' -o \( -e '$(USTAMP)' -a '$(USTAMP)' -nt "$$f" \); then \
				$(ECHO) "D: $@: leaving $$f"; \
				rebuild=no; \
			fi; \
		done; \
		if test ":$$rebuild" = :yes; then \
			$(ECHO) "D: $@: rebuild $$a"; \
			$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH=\"$$t\" one-deb"; \
			$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' ARCH="$$t" one-deb|| :; \
			rebuilt=yes; \
		else \
			$(ECHO) "D: $@: skipped $$a"; \
		fi; \
	done; \
	if test ":$$rebuilt" = :yes; then \
		$(ECHO) "D: $@: rebuild changes"; \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' chg-deb"; \
		$(MAKE) $(AM_MAKEFLAGS) AM_DEBXOPTS='$(AM_DEBXOPTS) $(BUILD_CFGOPTIONS)' chg-deb || :; \
	else \
		$(ECHO) "D: $@: skipped changes"; \
	fi


##
## Provide updates to debian source package signatures.
##
update-sigs:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@list="$(debtop_sig_file)"; for f in $$list; do \
		s=`echo $$f | sed -r -e 's|\.dsc(\.sig)?$$|.dsc.sig|'`; \
		if test ! -e "$$f" -o \( -n '$(FORCE)' -a \( ! -e '$(USTAMP)' -o "$$f" -nt '$(USTAMP)' \) \); then \
			$(ECHO) "D: $@: removed $$f"; \
			$(ECHO) "D: $@: removed $$s"; \
			$(ECHO) "rm -f -- \"$$f\" \"$$s\""; rm -f -- "$$f" "$$s"; \
			$(ECHO) "D: $@: rebuild $$f"; \
			$(ECHO) "D: $@: rebuild $$s"; \
			$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- \"$$f\" \"$$s\""; \
			$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- "$$f" "$$s"; \
		fi; \
	done

## Provide updates to debian binary package signatures.
##
update-csig:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@list="$(debtop_change_files)"; for f in $$list; do \
		s=`echo $$f | sed -r -e 's|\.changes(\.asc)?$$|.changes.asc|'`; \
		if test ! -e "$$f" -o \( -n '$(FORCE)' -a \( ! -e '$(USTAMP)' -o "$$f" -nt '$(USTAMP)' \) \); then \
			$(ECHO) "D: $@: removed $$f"; \
			$(ECHO) "D: $@: removed $$s"; \
			$(ECHO) "rm -f -- \"$$f\" \"$$s\""; rm -f -- "$$f" "$$s"; \
			$(ECHO) "D: $@: rebuild $$f"; \
			$(ECHO) "D: $@: rebuild $$s"; \
			$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- \"$$f\" \"$$s\""; \
			$(MAKE) $(AM_MAKEFLAGS) $(ALL_EXPORT_OPTS) -- "$$f" "$$s"; \
		fi; \
	done

## Provide updates to debian binary package changes.
##
update-chgs:

MY_PHONY		+= update-dscs update-debs update-chgs update-csig update-sigs
ALL_RECURSIVE_TARGETS	+= all-update-dscs all-update-debs all-update-chgs all-update-csig all-update-sigs

if BUILD_REPO_APT
## BUILD_REPO_APT

##
## The following builds apt repositories.
##

apt_nonrel_files	= $(aptdir)/Packages \
			  $(aptdir)/Sources \
			  $(aptdir)/Contents \
			  $(aptdir)/Packages.gz \
			  $(aptdir)/Sources.gz \
			  $(aptdir)/Contents.gz \
			  $(aptdir)/Packages.bz2 \
			  $(aptdir)/Sources.bz2 \
			  $(aptdir)/Contents.bz2 \
			  $(aptdir)/md5sum.txt

apt_release_file	= $(aptdir)/Release \
			  $(aptdir)/Release.gz \
			  $(aptdir)/Release.bz2

apt_files		= $(apt_nonrel_files) \
			  $(apt_release_file)

#!
#! APT Build Targets:
#! ------------------
#!
#! On dpkg systems, or systems supporting dpkg packaging tools and apt
#! repository metadata creation tools, the following targets are used to manage
#! apt source repository meta data files.
#!
$(aptdir)/Packages:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	$(APT_FTPARCHIVE) packages $(aptdir) | sed 's, $(aptdir)/, ,' > $@

$(aptdir)/Sources:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	$(APT_FTPARCHIVE) sources $(aptdir) | sed 's, $(aptdir)/, ,' > $@

$(aptdir)/Contents:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	$(APT_FTPARCHIVE) contents $(aptdir) | sed 's, $(aptdir)/, ,' > $@

$(aptdir)/Packages.gz $(aptdir)/Sources.gz $(aptdir)/Contents.gz $(aptdir)/Release.gz: %.gz : %
	@$(ECHO_V) "D: Making $@ in `pwd`"
	cat $< | gzip -c > $@

$(aptdir)/Packages.bz2 $(aptdir)/Sources.bz2 $(aptdir)/Contents.bz2 $(aptdir)/Release.bz2: %.bz2 : %
	@$(ECHO_V) "D: Making $@ in `pwd`"
	cat $< | bzip2 -c > $@

$(aptdir)/md5sum.txt:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	find $(aptdir) -type f | egrep -v '(md5sum.txt|Release.gz)' | xargs $(MD5SUM) | sed 's, $(aptdir)/, ,' > $@

$(aptdir)/Release: $(apt_nonrel_files)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	$(APT_FTPARCHIVE) release $(aptdir) | sed 's, $(aptdir)/, ,' > $@

#! repo-apt:
#!     Create (or recreate) the meta data files for an APT repository in the
#!     package distribution directory, @aptdir@/.
#!     When executed with root privilege, it will also place a local
#!     installation source for use by apt on the build system.
#!
repo-apt: $(apt_files)

#! repo-clean-apt:
#! 	Cleans the metadata files for an APT repository from the package
#! 	distribution directory, @aptdir@/.
#!
repo-clean-apt:

REPO			+= repo-apt
REPO_SIGN		+= repo-sign-apt
REPO_CLEAN		+= repo-clean-apt
REPOCLEANFILES		+= $(apt_files)

MY_PHONY		+= repo-apt repo-clean-apt

RELEASE			+= repo-apt
RELEASE_SIGN		+= repo-sign-apt
RELEASE_CLEAN_LOCAL	+= repo-clean-apt
RELEASECLEANFILES	+= $(apt_files)

UPDATE			+= repo-apt
UPDATE_SIGN		+= repo-sign-apt
UPDATE_CLEAN_LOCAL	+= repo-apt repo-sign-apt
UPDATECLEANFILES	+=

## BUILD_REPO_APT
endif

## MAINTAINER_MODE
endif

if PKG_BUILD_INDEP
## PKG_BUILD_INDEP

dist_doc_DATA		+= debian/README.Debian \
			   debian/TODO.Debian
## PKG_BUILD_INDEP
endif

## BUILD_DPKG
endif

EXTRA_DIST		+= debian/changelog \
			   debian/control \
			   debian/rules \
			   debian/copyright \
			   .debrelease \
			   .debepoch

## =============================================================================
##
## $Log: deb.am,v $
## Revision 1.1.2.3  2011-01-18 17:09:52  brian
## - always expand bz2 archive
##
## Revision 1.1.2.2  2009-06-29 07:35:35  brian
## - improvements to build process
##
## Revision 1.1.2.1  2009-06-21 10:26:00  brian
## - added files to new distro
##
## =============================================================================
## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
