## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
## =============================================================================
## 
# @(#) $RCSfile: repo.am,v $ $Name:  $($Revision: 1.1.2.3 $) $Date: 2011-03-06 08:57:19 $
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
## Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
## Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by the Free
## Software Foundation; version 3 of the License.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
## details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>, or
## write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
## 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date: 2011-03-06 08:57:19 $ by $Author: brian $
##
## =============================================================================

if PKG_BUILD_INDEP

if WITH_YUM_SOURCE

$(PACKAGE).yum.repo: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	if test "$$rb" = 'Base' ; then rlist='Base Updates Extras Testing' ; else rlist="$$rb" ; fi ; \
	for branch in $$rlist ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		for repo in '' 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			$(ECHO) '[$(PACKAGE)'$${b:+-$$b}$${r:+-$$r}']' ; \
			if test \( "$$branch" = 'Base' -o "$$branch" = 'Updates' \) -a \( -z "$$repo" -o "$$repo" = 'Main' \) ; then \
				$(ECHO) 'enabled = 1'; else $(ECHO) 'enabled = 0'; fi ; \
			$(ECHO) 'name = $(PACKAGE_TITLE)'$${branch:+ $$branch}$${repo:+ $$repo}' ($(target_distos))'; \
			$(ECHO) 'baseurl = $(reposerv)://$(repobase)/$(reporoot)/rpms/$(reposubdir)'$${b:+/$$b}$${d:+/$$d}; \
			$(ECHO) 'gpgkey = $(reposerv)://$(repobase)/$(reporoot)/tarballs/OPENSS7-GPG-KEY'; \
			$(ECHO) 'gpgcheck = 1'; \
			$(ECHO) ''; \
		done ; \
	done >$@

INSTALL_YUM_REPOS = $(PACKAGE).yum.repo

if MAINTAINER_MODE

$(PACKAGE)-local.yum.repo: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	repodir='$(rpmdistdir)'; test '$(REPODIR)' = '$(DISTDIR)' || repodir=`echo '$(rpmdistdir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
	tardir='$(tardir)'; test '$(REPODIR)' = '$(DISTDIR)' || tardir=`echo '$(tardir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
	for branch in $$rb ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		if test -n '$(repobranch)' -a '$(rpmdistdir)' = '$(topdir)' ; then \
			test "$$b" = '$(repobranch)' -o "/$$b" = '$(repobranch)' || continue ; s= ; else s="$$b" ; fi ; \
		for repo in '' 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			$(ECHO) '[$(PACKAGE)-local'$${b:+-$$b}$${r:+-$$r}']' ; \
			if test \( "$$branch" = 'Base' -o "$$branch" = 'Updates' \) -a \( -z "$$repo" -o "$$repo" = 'Main' -o -n '$(repobranch)' \) ; then \
				$(ECHO) 'enabled = 1'; else $(ECHO) 'enabled = 0'; fi ; \
			$(ECHO) 'name = $(PACKAGE_TITLE) Local'$${branch:+ $$branch}$${repo:+ $$repo}' ($(target_distos))'; \
			$(ECHO) 'baseurl = file://'$${repodir}$${b:+/$$b}$${d:+/$$d}; \
			$(ECHO) 'gpgkey = file://'$${tardir}'/OPENSS7-GPG-KEY'; \
			$(ECHO) 'gpgcheck = 1'; \
			$(ECHO) ''; \
		done ; \
	done >$@

INSTALL_YUM_REPOS += $(PACKAGE)-local.yum.repo

## MAINTAINER_MODE
endif

install-yum: $(INSTALL_YUM_REPOS)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_INSTALL)
	@if test -n "$(yumrepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(yumrepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(yumrepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE).yum.repo '$(DESTDIR)$(yumrepodir)/$(PACKAGE).repo'" ; \
		$(INSTALL_DATA) $(PACKAGE).yum.repo "$(DESTDIR)$(yumrepodir)/$(PACKAGE).repo" ; \
	fi
	@if test -n "$(rpmgpgdir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(rpmgpgdir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(rpmgpgdir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(srcdir)/scripts/OPENSS7-GPG-KEY '$(DESTDIR)$(rpmgpgdir)/RPM-GPG-KEY-$(PACKAGE)'" ; \
		$(INSTALL_DATA) $(srcdir)/scripts/OPENSS7-GPG-KEY "$(DESTDIR)$(rpmgpgdir)/RPM-GPG-KEY-$(PACKAGE)" ; \
	fi
if MAINTAINER_MODE
	@if test -n "$(yumrepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(yumrepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(yumrepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE)-local.yum.repo '$(DESTDIR)$(yumrepodir)/$(PACKAGE)-local.repo'" ; \
		$(INSTALL_DATA) $(PACKAGE)-local.yum.repo "$(DESTDIR)$(yumrepodir)/$(PACKAGE)-local.repo" ; \
	fi
endif

uninstall-yum:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_UNINSTALL)
	rm -f -- $(DESTDIR)$(yumrepodir)/$(PACKAGE).repo
	rm -f -- $(DESTDIR)$(rpmgpgpdir)/RPM-GPG-KEY-$(PACKAGE)
if MAINTAINER_MODE
	rm -f -- $(DESTDIR)$(yumrepodir)/$(PACKAGE)-local.repo
endif

##
# When the stuff is installed go looking for the configuration file for the
# yum-kmod or yum-fedorakmod plugin and change the 'pinkernels' and
# 'installforallkernels' options.
##
post-yum:
	if test -n "$(yumkmodconf)" -a -f "$(DESTDIR)/$(yumkmodconf)" ; then \
		sed -r -e 's/^[[:space:]]*pinkernels.*$$/pinkernels = 1/;s/^[[:space:]]*installforallkernels.*$$/installforallkernels = 1/' \
			"$(DESTDIR)/$(yumkmodconf)" ; \
		yum makecache ; \
	fi

#ALL_LOCAL			+= $(PACKAGE).yum.repo
#INSTALL_DATA_LOCAL		+= install-yum
#UNINSTALL_LOCAL		+= uninstall-yum
#CLEANFILES			+= $(PACKAGE).yum.repo
#POST_INSTALL_AM		+= post-yum

MY_PHONY			+= install-yum uninstall-yum post-zypp

##
# Install a yum installation source for both remote and local repositories.  This involves
# downloading the @PACKAGE@.repo file, installing the @PACKAGE@-local.repo file, and performing yum
# makecache.
##
repo-install-yum:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@if test ! -d '$(DESTDIR)$(yumrepodir)' ; then \
		$(ECHO) "$(MKDIR_P) $(DESTDIR)$(yumrepodir)" ; \
		$(MKDIR_P) $(DESTDIR)$(yumrepodir) ; \
	fi
	@( \
		cd '$(DESTDIR)$(yumrepodir)' ; \
		un=; pw=; o=; f='$(PACKAGE).repo' ; \
		for s in '' '.rpmsave' '.rpmnew' ; do  \
			o="$$f$$s" ; \
			if test -e $$o ; then \
				un=`sed -n -r 's,^.*baseurl[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$$,\1,p;t end;b;: end q' $$o` ; \
				pw=`sed -n -r 's,^.*baseurl[[:space:]]*=[[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$$,\3,p;t end;b;: end q' $$o` ; \
				test -n "$$un" -a -n "$$pw" || continue ; \
				break ; \
			fi ; \
		done ; \
		if test "$$o" != "$$f" ; then \
			$(ECHO) "mv -f -- $$f $$f.rpmsave" ; \
			mv -f -- $$f $$f.rpmsave || : ; \
		fi ; \
		ext="?hn=`hostname -f`&ip=`hostname -i | sed 'y/ /,/'`$${un:+&un=}$${un}$${pw:+&pw=}$${pw}" ; \
		ext="$$ext"`echo '/$(reposubdir)' | sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'` ; \
		key=; test -z "$$un" || key="$${un}$${pw:+:}$${pw}@" ; \
		url='$(reposerv)://'"$${key}"'$(repobase)/$(reporoot)/rpms/repodata/'"$$f$$ext" ; \
		$(ECHO) "rm -f -- $$f" ; \
		rm -f -- $$f ; \
		if ! echo "$$url" | wget -i - -O $$f 2>/dev/null ; then \
			if echo "$$url" | wget -i - -O /dev/null 2>&1 | grep '401 Authorization Required' >/dev/null 2>&1 ; then \
				echo 'Authorization required for repository access.' >/dev/tty ; \
				u='anonymous'; p= ; \
				read -e  -p 'Username: ' u </dev/tty >/dev/tty; u=$${u:-anonymous} ; \
				if test "$$u" != 'anonymous' ; then \
				read -es -p 'Password: ' p </dev/tty >/dev/tty ; \
				echo '' >/dev/tty ; \
				fi ; \
				key=; test -z "$$u" || key="$${u}:$${p}@" ; \
				url='$(reposerv)://'"$${key}"'$(repobase)/$(reporoot)/rpms/repodata/'"$$f$$ext" ; \
				$(ECHO) "rm -f -- $$f" ; \
				rm -f -- $$f ; \
				if ! echo "$$url" | wget -i - -O $$f 2>/dev/null ; then \
					test ":$$o" != ":$$f" || mv -f -- $$f.rpmsave $$f ; \
					echo 'Authorization failed.' >/dev/tty ; \
					exit 1 ; \
				fi ; \
			fi ; \
		fi ; \
		if test ! -e $$f ; then \
			if test ":$$o" != ":$$f" ; then \
				$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
				mv -f -- $$f.rpmsave $$f ; \
			fi ; \
			exit 1 ; \
		fi ; \
		rpmdistdir='$(rpmdistdir)' ; test '$(DISTDIR)' = '$(REPODIR)' || rpmdistdir=`echo '$(rpmdistdir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
		tardir='$(tardir)' ; test '$(DISTDIR)' = '$(REPODIR)' || tardir=`echo '$(tardir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
		( \
			$(ECHO) '[$(PACKAGE)]-local]' ; \
			$(ECHO) 'enabled = 1' ; \
			$(ECHO) 'name = $(PACKAGE_TITLE) Local Repository' ; \
			$(ECHO) 'baseurl = file://'$${rpmdistdir} ; \
			$(ECHO) 'gpgkey = file://'$${tardir}'/OPENSS7-GPG-KEY' ; \
			$(ECHO) 'gpgcheck = 1' ; \
			$(ECHO) 'repo_gpgcheck = 0' \
		) >$(PACKAGE)-local.repo \
	) || exit 1
	@f='$(DESTDIR)$(yumkmodconf)' ; \
	if test -f $$f ; then \
		$(ECHO) "mv -f -- $$f $$f.rpmsave" ; \
		mv -f -- $$f $$f.rpmsave ; \
		$(ECHO) "sed -r 's,^pinkernels.*$$,pinkernels = 1,;s,^installforallkernels.*$$,installforallkernels = 1,' $$f.rpmsave >$$f" ; \
		sed -r 's,^pinkernels.*$$,pinkernels = 1,;s,^installforallkernels.*$$,installforallkernels = 1,' $$f.rpmsave >$$f ; \
		if diff $$f.rpmsave $$f >/dev/null 2>&1 ; then \
			$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
			mv -f -- $$f.rpmsave $$f ; \
		fi ; \
	fi
	@if test -z '$(DESTDIR)$(rootdir)' ; then \
		$(ECHO) "yum makecache" ; \
		yum makecache || : ; \
	fi

##
## To remove a yum install source, first remove any changes that were made to the (fedora)kmod.conf
## file.  The original (fedora)kmod.conf file is saved before changes in (fedora)kmod.conf.rpmsave
## (when changes were actually made).  Restore (fedora)kmod.conf.rpmsave to (fedora)kmod.conf.
## Disable and copy the @PACKAGE@.repo file to @PACKAGE@.repo.rpmsave so that the credentials will
## be maintained even when the repository has been removed.  Next remove the @PACKAGE@.repo and
## @PACKAGE@-local.repo repositories and rebuild the yum cache.
##
repo-uninstall-yum:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@f='$(DESTDIR)$(yumkmodconf)' ; \
	if test -f $$f.rpmsave ; then \
		if test -f $$f ; then \
			if ! diff $$f $$f.rpmsave >/dev/null 2.&1 ; then \
				$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
				mv -f -- $$f.rpmsave $$f ; \
			fi ; \
		fi ; \
		$(ECHO) "rm -f -- $$f.rpmsave" ; \
		rm -f -- $$f.rpmsave ; \
	fi
	@f='$(DESTDIR)$(yumrepodir)/$(PACKAGE).repo' ; \
	if test -f $$f ; then \
		$(ECHO) "sed 's,^enabled[[:space:]]*=[[:space:]]*1[[:space:]]*$$,enabled = 0,' $$f >$$f.rpmsave" ; \
		sed 's,^enabled[[:space:]]*=[[:space:]]*1[[:space:]]*$$,enabled = 0,' $$f >$$f.rpmsave ; \
	fi
	@for s in '' '-local' ; do \
		f='$(DESTDIR)$(yumrepodir)/$(PACKAGE)'$$s'.repo' ; \
		if test -f $$f ; then \
			$(ECHO) "rm -f -- $$f" ; \
			rm -f -- $$f ; \
		fi ; \
	done
	@$(ECHO) "yum makecache" ; \
	yum makecache || :

REPO_INSTALL			+= repo-install-yum
REPO_UNINSTALL			+= repo-uninstall-yum

## WITH_YUM_SOURCE
endif

if WITH_ZYPP_SOURCE

$(PACKAGE_UCNAME).zypp.credentials: Makefile
	( \
	: ) >$@

$(PACKAGE).zypp.service: Makefile
	( \
		$(ECHO) '[$(PACKAGE)]' ; \
		$(ECHO) 'name=$(PACKAGE)' ; \
		$(ECHO) 'enabled=1' ; \
		$(ECHO) 'autorefresh=1' ; \
		$(ECHO) 'url = $(reposerv)://$(repobase)/?credentials=$(PACKAGE_UCNAME)credentials' ; \
		$(ECHO) 'type = ris' ; \
	) >$@

$(PACKAGE).zypp.repo: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	if test "$$rb" = 'Base' ; then rlist='Base Updates Extras Testing' ; else rlist="$$rb" ; fi ; \
	for branch in $$rlist ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		for repo in '' 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			$(ECHO) '[$(PACKAGE)'$${b:+-$$b}$${r:+-$$r}']' ; \
			$(ECHO) 'name=$(PACKAGE_TITLE)'$${branch:+ $$branch}$${repo:+ $$repo}' ($(target_distos))'; \
			if test \( "$$branch" = 'Base' -o "$$branch" = 'Updates' \) -a \( -z "$$repo" -o "$$repo" = 'Main' \) ; then \
				$(ECHO) 'enabled=1'; else $(ECHO) 'enabled=0'; fi ; \
			$(ECHO) 'autorefresh=1'; \
			$(ECHO) 'baseurl=$(reposerv)://$(repobase)/$(reporoot)/rpms/$(reposubdir)'$${b:+/$$b}$${d:+/$$d}; \
			$(ECHO) 'type=rpm-md'; \
			$(ECHO) 'gpgcheck=1'; \
			$(ECHO) 'gpgkey=$(reposerv)://$(repobase)/pubkey.asc'; \
			$(ECHO) 'keeppackages=0'; \
			$(ECHO) ''; \
		done ; \
	done >$@

INSTALL_ZYPP_REPOS = $(PACKAGE).zypp.repo

if MAINTAINER_MODE

##
## The only purpose for making this file in the build directory before installing it is for
## debugging.  This data really needs to be split into 3 files for them to be installed directly
## into /etc/zypp/repos.d/.  Otherwise, they really need to be formatted identical to a yum .repo
## file so that zypper can be used to import them.
##
$(PACKAGE)-local.zypp.repo: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	repodir='$(rpmdistdir)'; test '$(REPODIR)' = '$(DISTDIR)' || repodir=`echo '$(rpmdistdir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
	tardir='$(tardir)'; test '$(REPODIR)' = '$(DISTDIR)' || tardir=`echo '$(tardir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
	for branch in $$rb ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		if test -n '$(repobranch)' -a '$(rpmdistdir)' = '$(topdir)' ; then \
			test "$$b" = '$(repobranch)' -o "/$$b" = '$(repobranch)' || continue ; s= ; else s="$$b" ; fi ; \
		test -d '$(rpmdistdir}'"$${s:+/$$s}" || continue ; \
		for repo in '' 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,' ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,SRPMS,' ; \
			$(ECHO) '[$(PACKAGE)-local'$${b:+-$$b}$${r:+-$$r}']' ; \
			$(ECHO) 'name=$(PACKAGE_TITLE) Local'$${branch:+ $$branch}$${repo:+ $$repo}' ($(target_distos))'; \
			if test \( "$$branch" = 'Base' -o "$$branch" = 'Updates' \) -a \( -z "$$repo" -o "$$repo" = 'Main' -o -n '$(repobranch)' \) ; then \
				$(ECHO) 'enabled=1'; else $(ECHO) 'enabled=0'; fi ; \
			$(ECHO) 'autorefresh=0'; \
			$(ECHO) 'baseurl = file://'$${repodir}$${b:+/$$b}$${d:+/$$d}; \
			$(ECHO) 'gpgcheck=1'; \
			$(ECHO) 'gpgkey = file://'$${tardir}'/OPENSS7-GPG-KEY'; \
			$(ECHO) 'keeppackages=0'; \
			$(ECHO) ''; \
		done ; \
	done >$@

INSTALL_ZYPP_REPOS += $(PACKAGE)-local.zypp.repo

## MAINTAINER_MODE
endif

install-zypp: $(INSTALL_ZYPP_REPOS)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_INSTALL)
	@if test -n "$(zypprepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(zypprepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(zypprepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE).zypp.repo '$(DESTDIR)$(zypprepodir)/$(PACKAGE).repo'" ; \
		$(INSTALL_DATA) $(PACKAGE).zypp.repo "$(DESTDIR)$(zypprepodir)/$(PACKAGE).repo" ; \
	fi
if MAINTAINER_MODE
	@if test -n "$(zypprepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(zypprepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(zypprepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE)-local.zypp.repo '$(DESTDIR)$(zypprepodir)/$(PACKAGE)-local.repo'" ; \
		$(INSTALL_DATA) $(PACKAGE)-local.zypp.repo "$(DESTDIR)$(zypprepodir)/$(PACKAGE)-local.repo" ; \
	fi
endif

uninstall-zypp:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_UNINSTALL)
	rm -f -- $(DESTDIR)$(zypprepodir)/$(PACKAGE).repo
if MAINTAINER_MODE
	rm -f -- $(DESTDIR)$(zypprepodir)/$(PACKAGE)-local.repo
endif

##
# When multiversion is set in the zypp.conf file, we need to make sure that it is set to
# multiversion = provides:multiversion(kernel).
##
post-zypp:
	if test -n "$(zyppconfig)" - a -f "$(DESTDIR)/$(zyppconfig)" ; then \
		sed -r -e 's/^[[:space:]]*multiversion.*$$/mulversion = provides:multiversion(kernel)/' \
			"$(DESTDIR)/$(zyppconfig)" ; \
		zypper refresh ; \
	fi


#ALL_LOCAL			+= $(PACKAGE).zypp.repo
#INSTALL_DATA_LOCAL		+= install-zypp
#UNINSTALL_LOCAL		+= uninstall-zypp
#CLEANFILES			+= $(PACKAGE).zypp.repo
#POST_INSTALL_AM		+= post-zypp

MY_PHONY			+= install-zypp uninstall-zypp post-zypp

##
## Install zypp installation sources for both remote and local repositories.
## Install a zypp installation source for both remote and local repositories.
## This involves downloading the @PACKAGE_UCNAME@credentials file, activating the
## @PACKAGE@ service, and creating the @PACKAGE@-local.repo file.  Aside from the
## credentials file, this can be accomplished with zypper commands alone.
##
repo-install-zypp:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@if test ! -d '$(DESTDIR)$(zyppcreddir)' ; then \
		$(ECHO) "$(MKDIR_P) $(DESTDIR)$(zyppcreddir)" ; \
		$(MKDIR_P) $(DESTDIR)$(zyppcreddir) ; \
	fi
	@(
		cd '$(DESTDIR)$(zyppcreddir)' ; \
		un=; pw=; o=; f='$(PACKAGE_UCNAME)credentials' ; \
		for s in '$(PACKAGE_UCNAME)' 'NCC' ; do ; \
			o="$${s}credentials" ; \
			if test -e $$o ; then \
				un=`awk 'BEGIN{FS="="}{if($$1~/^username$$/){print$$2;exit}}' $$f` ; \
				pw=`awk 'BEGIN{FS="="}{if($$1~/^password$$/){print$$2;exit}}' $$f` ; \
				test -n "$$un" -a -n "$$pw" || continue ; \
				break ; \
			fi ; \
		done ; \
		if test "$$o" != "$$f" ; then \
			$(ECHO) "mv -f -- $$f $$f.rpmsave" ; \
			mv -f -- $$f $$f.rpmsave ; \
		fi ; \
		ext="?hn=`hostname -f`&ip=`hostname -i | sed 'y/ /,/'`$${un:+&un=$$un}$${pw:+&pw=$$pw}" ; \
		ext="$$ext"`echo '/$(reposubdir)' | sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'` ; \
		url='$(reposerv)://'"$${un:+$$un$${pw:+:$$pw}@}"'$(repobase)/$(reporoot)/'"$$f$$ext" ;  \
		$(ECHO) "rm -f -- $$f" ; \
		rm -f -- $$f ; \
		if ! echo "$$url" | wget -i - -O $$f 2>/dev/null ; then \
			if echo "$$url" | wget -i - -O /dev/null 2>&1 | grep '401 Authorization Required' >/dev/null 2>&1 ; then \
				echo 'Authorization required for repository access.' >/dev/tty ; \
				u='anonymous'; p= ; \
				read -e  -p 'Username: ' u </dev/tty >/dev/tty; u=$${u:-anonymous} ; \
				if test "$$u" != 'anonymous' ; then \
				read -es -p 'Password: ' p </dev/tty >/dev/tty ; \
				echo '' >/dev/tty ; \
				fi ; \
				url='$(reposerv)://'"$${u:+$$u:$$p@}"'$(repobase)/$(reporoot)/'"$$f$$ext" ; \
				$(ECHO) "rm -f -- $$f" ; \
				rm -f -- $$f ; \
				if ! echo "$$url" | wget -i - -O $$f 2>/dev/null ; then \
					if test "$$o" != "$$f" ; then \
						$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
						mv -f -- $$f.rpmsave $$f ; \
					fi ; \
					echo 'Authorization failed.' >/dev/tty ; \
					exit 1 ; \
				fi ; \
			fi ; \
		fi ; \
		if test -e $$f ; then chmod go-rw $$f; else \
			if test "$$o" != "$$f" ; then \
				$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
				mv -f -- $$f.rpmsave $$f ; \
			fi ; \
			exit 1 ; \
		fi ; \
	) || exit 1
	@f='$(DESTDIR)$(zyppconfig)' ; \
	if test -f $$f ; then \
		$(ECHO) "mv -f -- $$f $$f.rpmsave" ; \
		mv -f -- $$f $$f.rpmsave ; \
		$(ECHO) "sed -r 's,^multiversion.*$$,multiversion = provides:multiversion(kernel),' $$f.rpmsave >$$f" ; \
		sed -r 's,^multiversion.*$$,multiversion = provides:multiversion(kernel),' $$f.rpmsave >$$f ; \
		if ! diff $$f.rpmsave $$f >/dev/null 2>&1 ; then \
			$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
			mv -f -- $$f.rpmsave $$f ; \
		fi ; \
	fi
	@if test -z '$(DESTDIR)$(rootdir)' ; then \
		$(ECHO) "zypper addservice -t ris -n '$(PACKAGE_UCNAME)-service' \
			'$(reposerv)://$(repobase)/?credentials=$(PACKAGE_UCNAME)credentials' \
			'$(PACKAGE_UCNAME)-service'" ; \
		zypper addservice -t ris -n '$(PACKAGE_UCNAME)-service' \
			'$(reposerv)://$(repobase)/?credentials=$(PACKAGE_UCNAME)credentials' \
			'$(PACKAGE_UCNAME)-service' ; \
		$(ECHO) "zypper modifyservice -r -i -e '$(PACKAGE_UCNAME)-service'" ; \
		zypper modifyservice -r -i -e '$(PACKAGE_UCNAME)-service' ; \
		if test :$$(basename '$(REPODIR)') = ':repo' ; then \
			$(ECHO) "zypper addservice -t ris -n '$(PACKAGE_UCNAME)-local-service' \
				\"file://`dirname '$(REPODIR)'`\" \
				'$(PACKAGE_UCNAME)-local-service'" ; \
			zypper addservice -t ris -n '$(PACKAGE_UCNAME)-local-service' \
				"file://`dirname '$(REPODIR)'`" \
				'$(PACKAGE_UCNAME)-local-service' ; \
			$(ECHO) "zypper modifyservice -r -i -e '$(PACKAGE_UCNAME)-local-service'" ; \
			zypper modifyservice -r -i -e '$(PACKAGE_UCNAME)-local-service' ; \
		fi ; \
		$(ECHO) "zypper refresh" ; \
		zypper refresh || : ; \
	fi

##
## To remove a zypper install source, first remove any changes that we made to the zypp.conf file.
## The original zypp.conf file is saved before making changes in zypp.conf.rpmsave (when changes
## were actually made).  Restore zypp.conf.rpmsave to zypp.conf.  Copy the
## @PACKAGE_UCNAME@credentials file to @PACKAGE_UCNAME@credentials.rpmsave so that the credentials
## will be maintained even when the services have been removed.  Next remove the
## @PACKAGE_UCNAME@-service and @PACKAGE_UCNAME@-local-service services and refresh zypper.
##
repo-uninstall-zypp:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@f='$(DESTDIR)$(zyppconfig)' ; \
	if test -f $$f.rpmsave ; then \
		if test -f $$f ; then \
			if ! diff $$f $$f.rpmsave >/dev/null 2>&1 ; then \
				$(ECHO) "mv -f -- $$f.rpmsave $$f" ; \
				mv -f -- $$f.rpmsave $$f ; \
			fi ; \
		fi ; \
		$(ECHO) "rm -f -- $$f.rpmsave" ; \
		rm -f -- $$f.rpmsave ; \
	fi
	zypper removeservice --loose-auth --loose-query '$(PACKAGE_UCNAME)-service'
	zypper removeservice --loose-auth --loose-query '$(PACKAGE_UCNAME)-local-service'
	@$(ECHO) "zypper refresh" ; \
	zypper refresh || :

REPO_INSTALL			+= repo-install-zypp
REPO_UNINSTALL			+= repo-uninstall-zypp

## WITH_ZYPP_SOURCE
endif

if WITH_APT_SOURCE

$(PACKAGE).sources.list: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	if test "$$rb" = 'Base' ; then rlist='Base Updates Extras Testing' ; else rlist="$$rb" ; fi ; \
	for branch in $$rlist ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		for repo in 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			if test \( "$$branch" = 'Base' -o "$$branch" = 'Updates' \) -a \( -z "$$repo" -o "$$repo" = 'Main' \) ; then \
				$(ECHO) $(ECHO_N) ''; else $(ECHO) $(ECHO_N) '#'; fi ; \
			$(ECHO) 'deb $(reposerv)://$(repobase)/$(reporoot)/debs/$(reposubdir)'$${b:+/$$b}$${d:+/$$d}' /' ; \
			if test "$$repo" = 'Source' ; then \
				$(ECHO) '#deb-src $(reposerv)://$(repobase)/$(reporoot)/debs/$(reposubdir)'$${b:+/$$b}$${d:+/$$d}' /' ; \
			fi ; \
		done ; \
	done >$@

INSTALL_APT_SRCES = $(PACKAGE).sources.list

if MAINTAINER_MODE

$(PACKAGE)-local.sources.list: Makefile
	rb=`echo '$(repobranch)' | sed -r 's,^[/]?$$,Base,;t;s,[/]?base,Base,;t;s,[/]?updates,Updates,;t;s,[/]?extras,Extras,;t;s,[/]?testing,Testing,;t;s,^[/]?,,;y,/, ,'` ; \
	debdistdir='$(debdistdir)'; test '$(REPODIR)' = '$(DISTDIR)' || debdistdir=`echo '$(debdistdir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
	for branch in $$rb ; do \
		b=`echo "$$branch" | sed 's,Base,,;t;s,Updates,updates,;t;s,Extras,extras,;t;s,Testing,testing,'` ; \
		if test -n '$(repobranch)' -a '$(debdistdir)' = '$(debdir)' ; then \
			test "$$b" = '$(repobranch)' -o "/$$b" = '$(repobranch)' || continue ; s= ; else s="$$b" ; fi ; \
		for repo in 'Main' 'Debug' 'Devel' 'Source' ; do \
			r=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			d=`echo "$$repo" | sed 's,Main,main,;t;s,Debug,debug,;t;s,Devel,devel,;t;s,Source,source,'` ; \
			$(ECHO) 'deb file://'$${debdistdir}$${b:+/$$b}$${d:+/$$d}' /' ; \
			if test "$$repo" = 'Source' ; then \
				$(ECHO) 'deb-src file://'$${debdistdir}$${b:+/$$b}$${d:+/$$d}' /' ; \
			fi ; \
		done ; \
	done >$@

INSTALL_APT_SRCES += $(PACKAGE)-local.sources.list

## MAINTAINER_MODE
endif

install-apt: $(INSTALL_APT_SRCES)
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_INSTALL)
	@if test -n "$(aptrepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(aptrepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(aptrepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE).sources.list '$(DESTDIR)$(aptrepodir)/$(PACKAGE).list'" ; \
		$(INSTALL_DATA) $(PACKAGE).sources.list "$(DESTDIR)$(aptrepodir)/$(PACKAGE).list" ; \
	fi
	@if test -n "$(aptgpgdir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(aptgpgdir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(aptgpgdir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(srcdir)/scripts/OPENSS7-GPG-KEY '$(DESTDIR)$(aptgpgdir)/gpg-pubkey-$(PACKAGE).asc'" ; \
		$(INSTALL_DATA) $(srcdir)/scripts/OPENSS7-GPG-KEY "$(DESTDIR)$(aptgpgdir)/gpg-pubkey-$(PACKAGE).asc" ; \
	fi
if MAINTAINER_MODE
	@if test -n "$(aptrepodir)" ; then \
		$(ECHO) " $(MKDIR_P) '$(DESTDIR)$(aptrepodir)'" ; \
		$(MKDIR_P) "$(DESTDIR)$(aptrepodir)" ; \
		$(ECHO) " $(INSTALL_DATA) $(PACKAGE)-local.sources.list '$(DESTDIR)$(aptrepodir)/$(PACKAGE)-local.list'" ; \
		$(INSTALL_DATA) $(PACKAGE)-local.sources.list "$(DESTDIR)$(aptrepodir)/$(PACKAGE)-local.list" ; \
	fi
endif

uninstall-apt:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@$(NORMAL_UNINSTALL)
	rm -f -- $(DESTDIR)$(aptgpgdir)/gpg-pubkey-$(PACKAGE).asc
	rm -f -- $(DESTDIR)$(aptrepodir)/$(PACKAGE).list
if MAINTAINER_MODE
	rm -f -- $(DESTDIR)$(aptrepodir)/$(PACKAGE)-local.list
endif

post-apt:
	aptitude refresh

#ALL_LOCAL			+= $(PACKAGE).sources.list
#INSTALL_DATA_LOCAL		+= install-apt
#UNINSTALL_LOCAL		+= uninstall-apt
#CLEANFILES			+= $(PACKAGE).sources.list
#POST_INSTALL_AM		+= post-apt

MY_PHONY			+= install-apt uninstall-apt post-apt

##
# Install an apt installation source for both remote and local repositories.  This involves
# downloading the @PACKAGE@.list file, installing the @PACKAGE@-local.list file, and performing
# aptitude refresh.
##
repo-install-apt:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@if test ! -d '$(DESTDIR)$(aptrepodir)' ; then \
		$(ECHO) "$(MKDIR_P) $(DESTDIR)$(aptrepodir)" ; \
		$(MKDIR_P) $(DESTDIR)$(aptrepodir) ; \
	fi
	@test "$V" -ne 1 || set -x; \
	( \
		cd $(DESTDIR)$(aptrepodir) ; \
		un=; pw=; o=; f='$(PACKAGE).list' ; \
		for s in '' '.dpkg-new' '.dpkg-old' ; do \
			o="$$f$$s" ; \
			if test -e $$o ; then \
				un=`sed -n -r 's,^[#]?deb(-src)?[[:space:]][[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$$,\2,p;t end;b;: end q' $$o` ; \
				pw=`sed -n -r 's,^[#]?deb(-src)?[[:space:]][[:space:]]*http[s]?://([^@:]*)(:([^@]*))@.*$$,\4,p;t end;b;: end q' $$o` ; \
				test -n "$$un" -a -n "$$pw" || continue ; \
				break ; \
			fi ; \
		done ; \
		if test -f "$$f" -a "$$o" != "$$f" ; then \
			$(ECHO) "mv -f -- $$f $$f.dpkg-old" ; \
			mv -f -- $$f $$f.dpkg-old || : ; \
		fi ; \
		ext="?hn=`hostname -f`&ip=`hostname -i | sed 'y/ /,/'`$${un:+&un=}$${un}$${pw:+&pw=}$${pw}" ; \
		ext="$$ext"`echo '/$(reposubdir)' | sed 's,//,/,g;s,/,\&distro=,;s,/,\&relver=,;s,/,\&osarch=,'` ; \
		key=; test -z "$$un" || key="$${un}$${pw:+:}$${pw}@" ; \
		url='$(reposerv)://'"$${key}"'$(repobase)/$(reporoot)/'"$$f$$ext" ; \
		$(ECHO) "rm -f -- $$f" ; \
		rm -f -- $$f ; \
		if ! echo "$$url" | wget -i - -O $$f >/dev/null ; then \
			if echo "$$url" | wget -i - -O /dev/null 2>&1 | grep '401 Authorization Required' >/dev/null 2>&1 ; then \
				echo 'Authorization required for repository access.' >/dev/tty ; \
				u='anonymous'; p= ; \
				read -e  -p 'Username: ' u </dev/tty >/dev/tty; u=$${u:-anonymous} ; \
				if test "$$u" != 'anonymous' ; then \
				read -es -p 'Password: ' p </dev/tty >/dev/tty ; \
				echo '' >/dev/tty ; \
				fi ; \
				key=; test -z "$$u" || key="$${u}:$${p}@" ; \
				url='$(reposerv)://'"$${key}"'$(repobase)/$(reporoot)/'"$$f$$ext" ; \
				$(ECHO) "rm -f -- $$f" ; \
				rm -f -- $$f ; \
				if ! echo "$$url" | wget -i - -O $$f 2>/dev/null ; then \
					test ":$$o" != ":$$f" || mv -f -- $$f.dpkg-old $$f ; \
					echo 'Authorization failed.' >/dev/tty ; \
					exit 1 ; \
				fi ; \
			fi ; \
		fi ; \
		if test ! -e $$f ; then \
			if test ":$$o" != ":$$f" ; then \
				$(ECHO) "mv -f -- $$f.dpkg-old $$f" ; \
				mv -f -- $$f.dpkg-old $$f ; \
			fi ; \
			exit 1 ; \
		fi ; \
		debdistdir='$(debdistdir)' ; test '$(DISTDIR)' = '$(REPODIR)' || debdistdir=`echo '$(debdistdir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
		tardir='$(tardir)' ; test '$(DISTDIR)' = '$(REPODIR)' || tardir=`echo '$(tardir)' | sed -e 's,^$(DISTDIR),$(REPODIR),'` ; \
		( \
			rb='$(repobranch)'; case "$${rb:-base}" in (base|updates|extras|testing) rb=;; esac ; \
			for b in '' updates extras testing $$rb ; do \
				d="$${debdistdir}$${b:+/$$b}" ; \
				for r in main debug devel source '' ; do \
					d="$${debdistdir}$${b:+/$$b}$${r:+/$$r}" ; \
					if test ! -f $$d/Packages ; then $(ECHO) $(ECHO_N) '#'; fi ; $(ECHO) 'deb     file://'$$d' /' ; \
					if test -z "$$r" -o "$$r" = 'source'; then \
					if test ! -f $$d/Sources  ; then $(ECHO) $(ECHO_N) '#'; fi ; $(ECHO) 'deb-src file://'$$d' /' ; \
					fi ; \
				done ; \
			done \
		) >$(PACKAGE)-local.list \
	) || exit 1

##
## To remove an apt install source, disable and copy the @PACKAGE@.list file to
## @PACKAGE@.list.dpkg-old so that the credentials will be maintained even when the repository has
## been removed.  Next remove the @PACKAGE@.list and @PACKAGE@-local.list repositories and refresh
## aptitude.
##
repo-uninstall-apt:
	@$(ECHO_V) "D: Making $@ in `pwd`"
	@f='$(DESTDIR)$(aptrepodir)/$(PACKAGE).list' ; \
	if test -f $$f ; then \
	$(ECHO) "sed 's,^deb,#deb,' $$f >$$f.dpkg-old" ; \
	sed 's,^deb,#deb,' $$f >$$f.dpkg-old
	@for s in '' '-local' ; do \
		f='$(DESTDIR)$(aptrepodir)/$(PACKAGE)'$$s'.list' ; \
		if test -f $$f ; then \
			$(ECHO) "rm -f -- $$f" ; \
			rm -f -- $$f ; \
		fi ; \
	done
	@$(ECHO) "aptitude refresh" ; \
	aptitude refresh || :

REPO_INSTALL			+= repo-install-apt
REPO_UNINSTALL			+= repo-uninistall-apt

## WITH_APT_SOURCE
endif

## PKG_BUILD_INDEP
endif

EXTRA_DIST += scripts/OPENSS7-GPG-KEY

## =============================================================================
##
## $Log: repo.am,v $
## Revision 1.1.2.3  2011-03-06 08:57:19  brian
## - repository updates
##
## Revision 1.1.2.2  2011-02-28 19:51:29  brian
## - better repository build
##
## Revision 1.1.2.1  2011-02-17 18:34:10  brian
## - repository and rpm build updates
##
## =============================================================================
## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
