% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
% =========================================================================
%
% @(#) $Id: mxi.texi,v 0.9.2.2 2008-12-06 09:03:38 brian Exp $
%
% =========================================================================
%
% Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2008-12-06 09:03:38 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*- texinfo -*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=100
@c %**start of header
@setfilename mxi.info
@include texi/args.texi
@set MANUAL_TITLE Multiplex Interface (MXI)
@set MANUAL_TYPE Specification
@settitle @value{MANUAL_TITLE}
@c %**end of header

@dircategory OpenSS7
@direntry
* MXI: (mxi).			    Multiplex Interface
@end direntry

@include texi/args.texi
@set MANUAL_TITLE Multiplex Interface (MXI)
@set MANUAL_TYPE Specification

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file documents the OpenSS7 @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
published by @uref{http://www.openss7.com/,OpenSS7 Corporation}.


Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}


All Rights Reserved.

Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@ignore
Permission is granted to process this file through Tex and print the results, provided the printed
document carries copying permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
OpenSS7 Corporation disclaims all warranties with regard to this documentation including all implied
warranties of merchantability, fitness for a particular purpose, non-infringement, or title; that
the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.

OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Multiplex Interface (MXI)
@set MANUAL_TYPE Specification

@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2008  OpenSS7 Corporation
@subtitle All Rights Reserved.
@sp 4
@quotation
@subheading Abstract
This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the
signalling data link interface to these components as well as providing a basis for signalling data
link control for other signalling data link protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

@noindent
All Rights Reserved.

@subsubheading Published by:
@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@ignore
@noindent
This software and related documentation is protected by copyright and distributed under licenses
restricting its use, copying, distribution and decompilation.  No part of this software or related
documentation may be reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the recipient will protect
this information and keep it confidential, and will not disclose the information contained in this
document without the written permission of its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.
@end ignore

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of OpenSS7 Corporation not be used in
advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@subsubheading Notice:

@noindent
@b{OpenSS7 Corporation disclaims all warranties with regard to this documentation including all
implied warranties of merchantability, fitness for a particular purpose, non-infringement, or title;
that the contents of the document are suitable for any purpose, or that the implementation of such
contents will not infringe on any third party patents, copyrights, trademarks or other rights..  In
no event shall OpenSS7 Corporation be liable for any direct, indirect, special or consequential
damages or any damages whatsoever resulting from loss of use, data or profits, whether in an action
of contract, negligence or other tortious action, arising out of or in connection with any use of
this document or the performance or implementation of the contents thereof.}

@sp 1

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation for any reason,
including but not limited to, conformity with standards promulgated by various agencies, utilization
of advances in the state of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.  OpenSS7 Corporation is under
no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of primitive error values
@defcodeindex pe
@c Define an index of protocol states
@defcodeindex st
@c Define an index of input-output controls
@defcodeindex ct
@c Define an index of manual pages.
@defcodeindex mp

@c frags out automake
@c @ifnottex
@c @c concatenate indices for text, html and info
@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex pe cp
@syncodeindex st cp
@syncodeindex mp cp
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex ct cp
@c @end ifnottex

@include texi/macros.texi
@include texi/versions.texi

@iftex

@macro prim{name}
@code{\name\}@prindex \name\
@end macro

@macro pval{name}
@code{\name\}@pvindex \name\
@end macro

@macro perr{name}
@code{\name\}@peindex \name\
@end macro

@macro psta{name}
@code{\name\}@stindex \name\
@end macro

@macro parm{name}
@code{\name\}@vrindex \name\
@end macro

@macro pioc{name}
@code{\name\}@ctindex \name\
@end macro

@end iftex

@ifnottex
@c skip deep indexing for plain text, html and info
@c it messes up column with maximums (texinfo bug)

@macro prim{name}
@code{\name\}
@end macro

@macro pval{name}
@code{\name\}
@end macro

@macro perr{name}
@code{\name\}
@end macro

@macro psta{name}
@code{\name\}
@end macro

@macro parm{name}
@code{\name\}
@end macro

@macro pioc{name}
@code{\name\}
@end macro

@end ifnottex

@ifnottex
@node Top
@top Multiplex Interface
@end ifnottex

@menu
* Preface::
* Introduction::
* The Multiplex Layer::
* MXI Services Definition::
* MXI Service Primitives::
* MXI Input-Output Controls::
* MXI Management::
@c * Addendum for ITU-T Q.703 Conformance::
@c * Addendum for ANSI T1.111.3 Conformance::
@c * Addendum for ETSI Conformance::
@c * Mapping of SDLI Primitives to ITU-T Q.703::
@c * Mapping of SDLI Primitives to ANSI T1.111.3::
@c * State/Event Tables::
@c * Primitive Precedence Tables::
* MXI Header Files::
* MXI Drivers and Modules::
* MXI Applications::
* MXI Utilities::
* MXI File Formats::
* MXI Compatibility and Porting::
* Licenses::
* Glossary::
* Acronyms::
* References::
@c @iftex
@c * Indices::
@c @end iftex
@c @ifnottex
* Index::
@c @end ifnottex
@end menu

@iftex
@c insert list of figures and tables for printed manuals
@page
@heading List of Figures
@listoffloats Figure
@page
@heading List of Tables
@listoffloats Table
@end iftex

@node Preface
@unnumbered Preface

@section Security Warning

@noindent
Permission to use, copy and distribute this documentation without modification, for any purpose and
without fee or royalty is hereby granted, provided that both the above copyright notice and this
permission notice appears in all copies and that the name of @cite{OpenSS7 Corporation} not be used
in advertising or publicity pertaining to distribution of this documentation or its contents without
specific, written prior permission.  @cite{OpenSS7 Corporation} makes no representation about the
suitability of this documentation for any purpose.  It is provided ``as is'' without express or
implied warranty.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} disclaims all warranties with regard to this
documentation including all implied warranties of merchantability, fitness for a particular purpose,
non-infringement, or title; that the contents of the document are suitable for any purpose, or that
the implementation of such contents will not infringe on any third party patents, copyrights,
trademarks or other rights.  In no event shall @cite{OpenSS7 Corporation} be liable for any direct,
indirect, special or consequential damages or any damages whatsoever resulting from loss of use,
data or profits, whether in an action of contract, negligence or other tortious action, arising out
of or in connection with any use of this document or the performance or implementation of the
contents thereof.

@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} is making this documentation available as a
reference point for the industry.  While @cite{OpenSS7 Corporation} believes that these interfaces
are well defined in this release of the document, minor changes may be made prior to products
conforming to the interfaces being made available.

@section Abstract

This document is a @value{MANUAL_TYPE} containing technical details concerning the implementation of
the @value{MANUAL_TITLE} for OpenSS7.  It contains recommendations on software architecture as well
as platform and system applicability of the @value{MANUAL_TITLE}.

@noindent
This document specifies a @value{MANUAL_TITLE} Specification in support of the OpenSS7 Multiplex
(MX) protocol stacks.  It provides abstraction of the multiplex interface to
these components as well as providing a basis for multiplex control for other multiplex
control protocols.

@section Purpose

The purpose of this document is to provide technical documentation of the @value{MANUAL_TITLE}.
This document is intended to be included with the OpenSS7 @cite{STREAMS} software package released
by @cite{OpenSS7 Corporation}.  It is intended to assist software developers, maintainers and users
of the @value{MANUAL_TITLE} with understanding the software architecture and technical interfaces
that are made available in the software package.

@section Intent

It is the intent of this document that it act as the primary source of information concerning the
@value{MANUAL_TITLE}.  This document is intended to provide information for writers of OpenSS7
@value{MANUAL_TITLE} applications as well as writers of OpenSS7 @value{MANUAL_TITLE} Users.

@section Audience

The audience for this document is software developers, maintainers and users and integrators of the
@value{MANUAL_TITLE}.  The target audience is developers and users of the OpenSS7 SS7 stack.

@section Disclaimer

Although the author has attempted to ensure that the information in this document is complete and
correct, neither the Author nor OpenSS7 Corporation will take any responsibility in it.

@section Revision History

Take care that you are working with a current version of this documentation: you will not be
notified of updates.  To ensure that you are working with a current version, check the
@uref{http://www.openss7.org/,OpenSS7 Project} website for a current version.

Only the texinfo or roff source is controlled.  A printed (or postscript) version of this document
is an @strong{UNCONTROLLED VERSION}.

@smallexample
@verbatim
$Log: mxi.texi,v $
Revision 0.9.2.2  2008-12-06 09:03:38  brian
- corrections and updates

Revision 0.9.2.1  2008-12-02 08:24:43  brian
- document MXI

Revision 0.9.2.1  2008-12-02 06:51:29  brian
- document MXI

@end verbatim
@end smallexample

@node Introduction
@chapter Introduction

This document specifies a @cite{STREAMS}-based kernel-level instantiation of the
@value{MANUAL_TITLE} definition.  The @value{MANUAL_TITLE} enables the user of a  multiplex
service to access and use any of a variety of conforming multiplex providers without
specific knowledge of the provider's protocol.  The service interface is designed to support any
network multiplex protocol.  This interface only
specifies access to multiplex service providers, and does not address issues concerning
multiplex management, protocol performance, and performance analysis tools.

This specification assumes that the reader is familiar with ITU-T state machines and multiplex
interface (e.g. G.703, G.704), and @cite{STREAMS}.

@section Related Documentation

@itemize ---
@item @strong{ITU-T Recommendation G.703 (White Book)}
@item @strong{ITU-T Recommendation G.704 (White Book)}
@item @strong{ANSI T1}
@item @strong{System V Interface Definition, Issue 2 - Volume 3}
@end itemize

@subsection Role

This document specifies an interface that supports the services provided by the @dfn{Multiplex} for
ITU-T, ANSI and ETSI applications as described in ITU-T Recommendation G.703 and ITU-T
Recommendation G.704.  These specifications are
targeted for use by developers and testers of protocol modules that require multiplex
service.

@section Definitions, Acronyms, Abbreviations

@table @dfn
@item LM
Local Management.
@item LMS
Local Management Service.
@item LMS User
A user of Local Management Services.
@item LMS Provider
A provider of Local Management Services.
@item ISO
International Organization for Standardization
@item OSI
Open Systems Interconnection
@item QOS
Quality of Service
@item STREAMS
A communication services development facility first available with UNIX System V Release 3.
@end table

@node The Multiplex Layer
@chapter The Multiplex Layer

@menu
* Model of the MXI::
* MXI Services::
* Purpose of the MXI::
* Multiplex Addressing::
* Multiplex Parameters::
@end menu

The Multiplex Layer provides the means to manage the association of MX-Users info
connections.  It is responsible for the routing and management of data to and from multiplex
connections between MX-user entities.

@node Model of the MXI
@section Model of the MXI


The MXI defines the services provided by the multiplex layer to the multiplex
user at the boundary between the multiplex provider and the multiplex user
entity.  The interface consists of a set of primitives defined as @cite{STREAMS} messages that
provide access to the multiplex layer services, and are transferred between the MXS user
entity and the MXS provider.  These primitives are of two types; ones that originate from the MXS
user, and others that originate from the MXS provider.  The primitives that originate from the MXS
user make requests to the MXS provider, or respond to an indication of an event of the MXS
provider.  The primitives that originate from the MXS provider are either confirmations of a
request or are indications to the MXS user that an event has occurred.  @figref{1} show the model
of the MXI.

@figuresized{mxi01,1,Model of the MXI,3.0in}

The MXI allows the MXS provider to be configured with any multiplex layer user (such as
a signalling data terminal application) that also conforms to the MXI.  A multiplex
layer user can also be a user program that conforms to the MXI and accesses the MXS provider via
@command{@b{putmsg}(2s)} and @command{@b{getmsg}(2s)} system calls.  The typical configuration,
however, is to place a signalling data terminal module above the multiplex layer.

@node MXI Services
@section MXI Services

The features of the MXI are defined in terms of the services provided by the MXS provider, and the
individual primitives that may flow between the MXS user and the MXS provider.

The MXI Services are broken into two groups: local management services and protocol services.
Local management services are responsible for the local management of Streams, assignment of Streams
to physical points of attachment, enabling and disabling of Streams, management of options
associated with a Stream, and general acknowledgement and event reporting for the Stream.  Protocol
services consist of connecting a Stream to a medium, exchanging bits with the medium, and
disconnecting the Stream from the medium.

@subsection Local Management

Local management services are listed in @tabref{1}.

@tabfig{mxit01,1,Local Management Services}

The local management services interface is described in @ref{Local Management Services}, and the
primitives are detailed in @ref{Local Management Service Primitives}.  The local management services
interface is defined by the @file{sys/mxi.h} header file (@pxref{MXI Header Files}).

@subsection Protocol

Protocol services are listed in @tabref{2}.

@tabfig{mxit02,2,Protocol Services}

The protocol services interface is described in @ref{Protocol Services}, and the primitives are
detailed in @ref{Protocol Service Primitives}.  The protocol services interface is defined by the
@file{sys/mxi.h} header file (@pxref{MXI Header Files}).

@node Purpose of the MXI
@section Purpose of the MXI

The MXI is typically implemented as a device driver controlling a TDM (Time Division Mutliplexing)
device that provides access to multiplexes.  The purpose behind exposing this low level interface is
that almost all communications multiplex devices can be placed into a @emph{raw} mode, where a bit
stream can be exchanged between the driver and the medium.  The MXI provides an interface that, once
implemented as a driver for a new device, can provide complete and verified data link
capabilities by pushing generic HDLC (High Level Data Link Control) and LAPB (Link Access Procedure Balanced) modules over
an open device Stream.

This allows CDI and DLPI modules to be verified independently for correct operation and then simply
used for all manner of new device drivers that can implement the MXI interface.

@node Multiplex Addressing
@section Multiplex Addressing

Each use of MXI must establish an identity to communicate with other multiplex users.  The MXS user
must identify the physical medium over which it wil communicate.  This is particularly evident on
system that are attached to multiple physical media.  @figref{17} illustrates the identification
approach, which is explained below.

@figuresized{mxi17,17,Multiplex Addressing Components,3.5in}

@subsection Physical Attachment Identification

The physical point of attachment (PPA in @figref{17}) is the point at which a system interface
attaches itself to a physical communications medium (a channel, facility or network interface).  All
communication on that physical medium funnels through the PPA associated with that physical medium.
On systems where a MXS provider supports more than on physical medium, the MXS user must identify
the medium through which it will communicate.  A PPA is identified by a unique PPA identifier.

For media that supports physical layer multiplexing of multiple channels over a single physical
medium (such as the B and D channels of ISDN), the PPA identifier must identify the specific
channel(s) over which communication will occur.  See also @ref{Multiplex Media}.

Unlike the Data Link Provider Interface (DLPI), which also uses the concept of a PPA, MXI does not
define a SAP for a MXS user.

Once a Stream has been associated with a PPA, all messages received on that medium are delivered to
the attached MXS user.  Only one major/minor device number combination (Stream head) can be
associated with a given PPA and active for a range of channels at any point in time.

@subsection MXS Provider Styles

Two styles of MXS provider are defined by MXI, distinguished by the way they enable a MXS user to
choose a particular PPA.

@subsubsection Style 1 MXS Provider

The @dfn{Style 1} provider assigns a PPA based on the major/minor device the MXS user opened.  One
possible implementation of a @dfn{Style 1} driver would reserve a major device for each PPA the
multiplex device driver would support.  This would allos the @cite{STREAMS} clone open feature to be
used for each PPA configured.  This style of provider is appropriate when few PPAs will be
supported.

For example, a CPI card that supports two V.35 ports could assign a major device number to the card
diver and a minor device number to each of the ports on each card in the system.  To establish a
Stream to a MXS provider for a given port, the minor device number @samp{1} or @samp{2} could be
opened for port @samp{1} or @samp{2} on card @samp{1}, minor device number @samp{3} or @samp{4}
could be opened for port @samp{1} or @samp{2} on card @samp{2}, and so on.  One major device number
for the driver could easily support 127 cards in a system, which is not possible for typical PCI
systems and, therefore, is ample.

@dfn{Style 1} providers do not user the @prim{MX_ATTACH_REQ} and @prim{MX_DETACH_REQ} primitives and
when freshly opened are in the @psta{MXS_ATTACHED} state.  That is, as illustrated in @figref{17},
the @dfn{Style 1} MXS provider associates the Stream with the PPA during the @manref{open(2)} system
call.

@subsubsection Style 2 MXS Provider

If the number of PPAs as MXS provider will support is large, a @dfn{Style 2} provider implementation
is more suitable.  The @dfn{Style 2} provider requires a MXS user to explicitly identify the desired
PPA using a special attach service primitive.  For a @dfn{Style 2} driver, the @manref{open(2)}
system call creates a Stream between the MXS user and MXS provider, and the attach primitive then
associated a particular PPA with that Stream.  The format of the PPA identifier is specific to the
MXS provider, and should be described in the provider-specific addendum documentation.

The MXS user uses the support primitvies(@prim{MX_ATTACH_REQ}, @prim{MX_ENABLE_REQ}) to associate a
Stream with a given Physical Point of Appearance.  @dfn{Style 2} MXS providers, when freshly opened,
are in the @psta{MXS_DETACHED} state.  That is, the @dfn{Style 2} MXS provider does not associate
the Stream with the PPA during the @manref{open(2)} call, but only later when the
@prim{MX_ATTACH_REQ} primitive is issued by the MXS user.

@subsection Multiplex Media
@anchor{Multiplex Media}

To accommodate multiplexed media and multi-media channels, there are three kinds of PPA address:

@enumerate

@item A discrete PPA that specifies a non-multiplexed medium.

This is the normal case of a @dfn{Style 1} or @dfn{Style 2} MXS provider supporting access to a
non-multiplexed medium.  An example is a MXS provider supporting access to a V.35 interface.

@item A specific PPA that specifies a single channel to a multiplexed medium.

This is again the normal case of a @dfn{Style 1} or @dfn{Style 2} MXS provider supporting access to
a specific channel in a multiplexed medium.  An example is a MXS provider supporting access to
channel 16 of a E1 interface.

@item A general PPA that specifies a channel group for a multiplexed medium.

This is th case of a @dfn{Style 1} or @dfn{Style 2} MXS provider supporting access to multiple
channels in a multiplexed medium.  An example is a MXS provider supporting statistically multiplexed
channel access to a full or fractional T1 facilitiy.  Another example is access to the left and
right channels of a stereo program.

@end enumerate

In the case of a general PPA, as enumerated in @dfn{3} above, some additional information is
required to identify which slots in the group of channle forming the multiplex are associatedw the
the MXS user Stream.  This additional information is provided using the @parm{mx_slot} parameter to
the @prim{MX_CONNECT_REQ}, @prim{MX_CONNECT_CON}, @prim{MX_DATA_REQ}, @prim{MX_DATA_IND},
@prim{MX_EVENT_IND}, @prim{MX_DISCONNECT_REQ}, @prim{MX_DISCONNECT_CON} and @prim{MX_DISCONNECT_IND}
primitives.@footnote{Note that it is the ability of the Multiplex Interface to support fractional
E1/T1 that distinguishes it from similar interfaces such as the SDLI and CDI.}

@node Multiplex Parameters
@section Multiplex Parameters


@node MXI Services Definition
@chapter MXI Services Definition

@menu
* Local Management Services::
* Protocol Services::
@end menu

@node Local Management Services
@section Local Management Services

@menu
* Acknowledgement Service::
* Information Reporting Service::
* Physical Point of Attachment Service::
* Initialization Service::
* Options Management Service::
* Error Reporting Service::
* Statistics Reporting Service::
* Event Reporting Service::
@end menu

@node Acknowledgement Service
@subsection Acknowledgement Service

The acknowledgement service provides the MXS user with the ability to receive positive and negative
acknowledgements regarding the successful or unsuccessful completion of services.

@itemize @bullet

@item @b{@prim{MX_OK_ACK}}:
The @prim{MX_OK_ACK} message is used by the MXS provider to indicate successful receipt and
completion of a service primitive request that requires positive acknowledgement.

@item @b{@prim{MX_ERROR_ACK}}:
The @prim{MX_ERROR_ACK} message is used by the MXS provider to indicate successful receipt and
failure to complete a service primitive request that requires negative acknowledgement.

@end itemize

A successful invocation of the acknowledgement service is illustrated in @figref{15}.

@figuresized{mxi15,15,Message Flow: Successful Acknowledgement Service,4.0in}

As illustrated in @figref{15}, the
service primitives for which a positive acknowledgement may be returned are the
@prim{MX_ATTACH_REQ} and @prim{MX_DETACH_REQ}.

An unsuccessful invocation of the acknowledgement service is illustrated in @figref{16}.

@figuresized{mxi16,16,Message Flow: Unsuccessful Acknowledgement Service,4.0in}

As illustrated in @figref{16}, the service primitives for which a negative acknowledgement may be
returned are the @prim{MX_INFO_REQ}, @prim{MX_ATTACH_REQ}, @prim{MX_DETACH_REQ},
@prim{MX_ENABLE_REQ}, @prim{MX_DISABLE_REQ} and @prim{MX_OPTMGMT_REQ} messages.

@node Information Reporting Service
@subsection Information Reporting Service

The information reporting service provides the MXS user with the ability to elicit information from
the MXS provider.

@itemize @bullet

@item @b{@prim{MX_INFO_REQ}}:
The @prim{MX_INFO_REQ} message is used by the MXS user to request information about the MXS
provider.

@item @b{@prim{MX_INFO_ACK}}:
The @prim{MX_INFO_ACK} message is issued by the MXS provider to provide requested information about
the MXS provider.

@end itemize

A successful invocation of the information reporting service is illustrated in @figref{2}.

@figuresized{mxi02,2,Message Flow: Successful Information Reporting Service,4.0in}

@node Physical Point of Attachment Service
@subsection Physical Point of Attachment Service

The local management interface provides the MXS user with the ability to associate a Stream to a
physical point of appearance (@dfn{PPA}) or to disassociate a Stream from a PPA.  The local
management interface provides for two styles of MXS provider:@footnote{See also @ref{Multiplex
Addressing}.}

@subsubheading Style 1 MXS Provider

A @dfn{Style 1} MXS provider is a provider that associates a Stream with a PPA at the time of the
first @manref{open(2)} call for the device, and disassociates a Stream from a PPA at the time of the
last @manref{close(2)} call for the device.

Physical points of attachment (PPA) are assigned to major and minor device number combinations.
When the major and minor device number combination is opened, the opened Stream is automatically
associated with the PPA for the major and minor device number combination.  The last close of the
device disassociates the PPA from the Stream.

Freshly opened @dfn{Style 1} MXS provider Streams start life in the @psta{MX_DISABLED} state.

This approach is suitable for MXS providers implemented as real or pseudo-device drivers and is
applicable when the number of minor devices is small and static.

@subsubheading Style 2 MXS Provider

A @dfn{Style 2} MXS provider is a provider that associates a Stream with a PPA at the time that the
MXS user issues the @prim{MX_ATTACH_REQ} message.  Freshly opened Streams are not associated with
any PPA.  The @dfn{Style 2} MXS provider Stream is disassociated from a PPA when the Stream is
closed or when the MXS user issues the @prim{MX_DETACH_REQ} message.

Freshly opened @dfn{Style 2} MXS provider Streams start life in the @psta{MX_UNATTACHED} state.

This approach is suitable for MXS providers implemented as clone real or pseudo-device drivers  and
is applicable when the number of minor devices is large or dynamic.

@menu
* PPA Attachment Service::
* PPA Detachment Service::
@end menu

@node PPA Attachment Service
@subsubsection PPA Attachment Service

The PPA attachment service provides the MXS user with the ability to attach a @dfn{Style 2} MXS
provider Stream to a physical point of appearance (PPA).

@itemize @bullet

@item @b{@prim{MX_ATTACH_REQ}}:
The @prim{MX_ATTACH_REQ} message is issued by the MXS user to request that a @dfn{Style 2} MXS
provider Stream be attached to a specified physical point of appearance (PPA).

@item @b{@prim{MX_OK_ACK}}:
Upon successful receipt and processing of the @prim{MX_ATTACH_REQ} message, the MXS provider
acknowledges the success of the service completion with a @prim{MX_OK_ACK} message.

@item @b{@prim{MX_ERROR_ACK}}:
Upon successful receipt but failure to process the @prim{MX_ATTACH_REQ} message, the MXS provider
acknowledges the failure of the service completion with a @prim{MX_ERROR_ACK} message.

@end itemize

A successful invocation of the attachment service is illustrated in @figref{3}.

@figuresized{mxi03,3,Message Flow: Successful Attachment Service,4.0in}


@node PPA Detachment Service
@subsubsection PPA Detachment Service

The PPA detachment service provides the MXS user with the ability to detach a @dfn{Style 2} MXS
provider Stream from a physical point of attachment (PPA).

@itemize @bullet

@item @b{@prim{MX_DETACH_REQ}}:
The @prim{MX_DETACH_REQ} message is issued by the MXS user to request that a @dfn{Style 2} MXS
provider Stream be detached from the attached physical point of appearance (PPA).

@item @b{@prim{MX_OK_ACK}}:
Upon successful receipt and processing of the @prim{MX_DETACH_REQ} message, the MXS provider
acknowledges the success of the service completion with a @prim{MX_OK_ACK} message.

@item @b{@prim{MX_ERROR_ACK}}:
Upon successful receipt but failure to process the @prim{MX_DETACH_REQ} message, the MXS provider
acknowledges the failure of the service completion with a @prim{MX_ERROR_ACK} message.

@end itemize

A successful invocation of the detachment service is illustrated in @figref{4}.

@figuresized{mxi04,4,Message Flow: Successful Detachment Service,4.0in}

@node Initialization Service
@subsection Initialization Service

The initialization service provides the MXS user with the abilty to enable and disable the Stream
for the associated PPA.

@menu
* Interface Enable Service::
* Interface Disable Service::
@end menu

@node Interface Enable Service
@subsubsection Interface Enable Service

The interface enable service provides the MXS user with the ability to enable an MXS provider
Stream that is associated with a PPA.  Enabling the interface permits the MXS user to exchange
protocol service interface messages with the MXS provider.

@itemize @bullet

@item @b{@prim{MX_ENABLE_REQ}}:
The @prim{MX_ENABLE_REQ} message is issued by the MXS user to request that the protocol service
interface be enabled.

@item @b{@prim{MX_ENABLE_CON}}:
Upon successful enabling of the protocol service interface, the MXS provider acknowledges successful
completion of the service by issuing a @prim{MX_ENABLE_CON} message to the MXS user.

@item @b{@prim{MX_ERRORK_ACK}}:
Upon unsuccessful enabling of the protocol service interface, the MXS provider acknowledges the
failure to complete the service by issuing an @prim{MX_ERROR_ACK} message to the MXS user.

@end itemize

A successful invocation of the enable service is illustrated in @figref{5}.

@figuresized{mxi05,5,Message Flow: Successful Enable Service,4.0in}

@node Interface Disable Service
@subsubsection Interface Disable Service

The interface disable service provides the MXS user with the ability to disable an MXS provider
Stream that is associated with a PPA.  Disabling the interface withdraws the MXS user's ability to
exchange protocol service interface messages with the MXS provider.

@itemize @bullet

@item @b{@prim{MX_DISABLE_REQ}}:
The @prim{MX_DISABLE_REQ} message is issued by the MXS user to request that the protocol service
interface be disabled.

@item @b{@prim{MX_DISABLE_CON}}:
Upon successful disabling of the protocol service interface, the MXS provider acknowledges
successful completion of the service by issuing a @prim{MX_DISABLE_CON} message to the MXS user.

@item @b{@prim{MX_ERRORK_ACK}}:
Upon unsuccessful disabling of the protocol service interface, the MXS provider acknowledges the
failure to complete the service by issuing an @prim{MX_ERROR_ACK} message to the MXS user.

@item @b{@prim{MX_DISABLE_IND}}:
The @prim{MX_DISABLE_IND} message is used by the MXS provider to indicate to the MXS user that the
Stream has been autonomously disabled and the cause of the autonomous disabling.

@end itemize

A successful invocation of the disable service is illustrated in @figref{6}.

@figuresized{mxi06,6,Message Flow: Successful Disable Service,4.0in}

@node Options Management Service
@subsection Options Management Service

The options management service provides the MXS user with the ability to control and affect various
generic and provider-specific options associated with the MXS provider.

@itemize @bullet

@item @b{@prim{MX_OPTMGMT_REQ}}:
The MXS user issues a @prim{MX_OPTMGMT_REQ} message when it wishes to interrogate or affect the
setting of various generic or provider-specific options associated with the MXS provider for the
Stream upon which the message is issued.

@item @b{@prim{MX_OPTMGMT_ACK}}:
Upon successful receipt of the @prim{MX_OPTMGMT_REQ} message, and successful options processing, the
MXS provider acknowledges the successful completion of the service with an @prim{MX_OPTMGMT_ACK}
message.

@item @b{@prim{MX_ERROR_ACK}}:
Upon successful receipt of the @prim{MX_OPTMGMT_REQ} message, and unsuccessful options processing, the
MXS provider acknowledges the failure to complete the service by issuing an @prim{MX_ERROR_ACK}
message to the MXS user.

@end itemize

A successful invocation of the options management service is illustrated in @figref{7}.

@figuresized{mxi07,7,Message Flow: Successful Options Management Service,4.0in}

@node Error Reporting Service
@subsection Error Reporting Service

The error reporting service provides the MXS provider with the ability to indicate asynchronous
errors to the MXS user.

@itemize @bullet

@item @b{@prim{MX_ERROR_IND}}:
The MXS provider issues the @prim{MX_ERROR_IND} message to the MXS user when it needs to indicate an
asynchronous error (such as the unusability of the communications medium).

@end itemize

A successful invocation of the error reporting service is illustrated in @figref{8}.

@figuresized{mxi08,8,Message Flow: Successful Error Reporting Service,4.0in}

@node Statistics Reporting Service
@subsection Statistics Reporting Service

@itemize @bullet

@item @b{@prim{MX_STATS_IND}}:

@end itemize

A successful invocation of the statistics reporting service is illustrated in @figref{9}.

@figuresized{mxi09,9,Message Flow: Successful Statistics Reporting Service,4.0in}

@node Event Reporting Service
@subsection Event Reporting Service

The event reporting service provides the MXS provider with the ability to indicate specific
asynchronous management events to the MXS user.

@itemize @bullet

@item @b{@prim{MX_EVENT_IND}}:
The MXS provider issues the @prim{MX_EVENT_IND} message to the MXS user when it wishes to indicate
an asynchronous (management) event to the MXS user.

@end itemize

A successful invocation of the event reporting service is illustrated in @figref{10}.

@figuresized{mxi10,10,Message Flow: Successful Event Reporting Service,4.0in}

@node Protocol Services
@section Protocol Services

Protocol services are specific to the Multiplex interface.  These services consist of
connection services that permit the transmit and receive directions to be connected to or
disconnected from the medium, and data transfer services that permit the exchange of bits between MXS
users.

The service primitives that implement the protocol services are described in detail in @ref{Protocol
Service Primitives}.

@menu
* Connection Service::
* Data Transfer Service::
* Disconnection Service::
@end menu

@node Connection Service
@subsection Connection Service

The connection service provides the ability for the MXS user to connect to the medium for the
purpose of transmitting bits, receiving bits, or both.  In the OSI model, this is a Layer 1 function, possibly
the responsibility of multiplex or digital cross-connect switch.

@itemize @bullet

@item @b{@prim{MX_CONNECT_REQ}}:
The @prim{MX_CONNECT_REQ} message is used by the MXS user to request that the Stream be connected to
the medium.  Connection to the medium might require some switching or other mechanism to prepare the
Stream for data transmission and reception.  Connections can be formed for the receive direction or
the transmit direction independently.

@item @b{@prim{MX_CONNECT_CON}}:
The @prim{MX_CONNECT_CON} message is used by the MXS provider to confirm that the Stream has been
connected to the medium.  Connection to the medium may have required some switching or other
mechanism to prepare the Stream for data transmission and receptoin.  Connection can be confirmed
for the receive or transmit directions independently.

@end itemize

A successful invocation of the connection service is illustrated in @figref{11}.

@figuresized{mxi11,11,Message Flow: Successful Connection Service,4.0in}

@node Data Transfer Service
@subsection Data Transfer Service

The data transfer service provides the MXS user with the ability to request that bits be
transmitted on the medium, and the MXS provider with the ability to indicate bits that have been
received from the medium.

@itemize @bullet

@item @b{@prim{MX_DATA_REQ}}:
The @prim{MX_DATA_REQ} message is used by the MXS user to place raw bits onto
the medium.  The Stream must have first been successfully activated in the transmit direction using
the @prim{MX_CONNECT_REQ} message.

@item @b{@prim{MX_DATA_IND}}:
The @prim{MX_DATA_IND} message is issued by the MXS provider when activated for the
receive direction with the @prim{MX_CONNECT_REQ} message, to indicate bits received on the medium.

@end itemize

A successful invocation of the data transfer service is illustrated in @figref{12}.

@figuresized{mxi12,12,Message Flow: Successful Data Transfer Service,4.0in}

@node Disconnection Service
@subsection Disconnection Service

The disconnection service provides the ability for the MXS user to disconnect from the medium,
withdrawing from the purpose of transmitting bits, receiving bits, or both.  It allows the
MXS provider to autonomously indicate that the medium has been disconnected from the Stream.  In
OSI, this is a Layer 1 function, possibly the responsibilyt of a multiplex or digital cross-connect
switch.

@itemize @bullet

@item @b{@prim{MX_DISCONNECT_REQ}}:
The @prim{MX_DISCONNECT_REQ} message is used by the MXS user to request that the Stream be
disconnected from the medium.  Disconnection from the medium might require some switching or other
mechanism.  Disconnection can be performed for the receive direction or the transmit direction
independently.

@item @b{@prim{MX_DISCONNECT_CON}}:
The @prim{MX_DISCONNECT_CON} message is used by the MXS provider to confirm that the Stream has been
disconnected from the medium.  Disconnect from the medium might require some switching or other
mechanism.  Disconnection can be confirmed for the receive or transmit directions independently.

@item @b{@prim{MX_DISCONNECT_IND}}:
The @prim{MX_DISCONNECT_IND} message is used by the MXS provider to indicate to the MXS user
that the Stream has been disconnected from the medium.  Disconnection is indicated for both the
receive and transmit directions.

@end itemize

A successful invocation of the disconnection service by the MXS user is illustrated in @figref{13}.

@figuresized{mxi13,13,Message Flow: Successful Disconnection Service by SDLS User,4.0in}

A successful invocation of the disconnection service by  the MXS provider is illustrated in @figref{14}.

@figuresized{mxi14,14,Message Flow: Successful Disconnection Service by SDLS Provider,4.0in}

@node MXI Service Primitives
@chapter MXI Service Primitives

@menu
* Local Management Service Primitives::
* Protocol Service Primitives::
* Diagnostics Requirements::
@end menu

@node Local Management Service Primitives
@section Local Management Service Primitives

These service primitives implement the local management services (@pxref{Local Management
Services}).

@menu
* Acknowledgement Service Primitives::
* Information Reporting Service Primitives::
* Physical Point of Attachment Service Primitives::
* Initialization Service Primitives::
* Options Management Service Primitives::
* Event Reporting Service Primitives::
@end menu

@node Acknowledgement Service Primitives
@subsection Acknowledgement Service Primitives

These service primitives implement the acknowledgement service (@pxref{Acknowledgement Service}).

@menu
* MX_OK_ACK::
* MX_ERROR_ACK::
@end menu

@node MX_OK_ACK
@subsubsection MX_OK_ACK

@subsubheading Description

This primitive is used to acknowledge receipt and successful service completion for
primitives requiring acknowledgement that have no confirmation primitive.

@subsubheading Format
@tpindex MX_ok_ack

This primitive consists of one @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_ok_ack {
    mx_ulong mx_primitive;
    mx_ulong mx_correct_prim;
    mx_ulong mx_state;
} MX_ok_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_OK_ACK}.

@item mx_correct_prim
Indicates the service primitive that was received and serviced correctly.  This field can be one of
the following values:

@multitable @columnfractions .25 .75
@ignore
@item @prim{MX_INFO_REQ} @tab Information request.
@item @prim{MX_OPTMGMT_REQ} @tab Options management request.
@end ignore
@item @prim{MX_ATTACH_REQ} @tab Attach request.
@item @prim{MX_ENABLE_REQ} @tab Enable request.
@item @prim{MX_CONNECT_REQ} @tab Connect request.
@ignore
@item @prim{MX_DATA_REQ} @tab Data request.
@end ignore
@item @prim{MX_DISCONNECT_REQ} @tab Disconnect request.
@item @prim{MX_DISABLE_REQ} @tab Disable request.
@item @prim{MX_DETACH_REQ} @tab Detach Request.
@ignore
@item @prim{MX_INFO_ACK} @tab Information acknowledgement.
@item @prim{MX_OPTMGMT_ACK} @tab Options Management acknowledgement.
@item @prim{MX_OK_ACK} @tab Successful receipt acknolwedgement.
@item @prim{MX_ERROR_ACK} @tab Error acknowledgement.
@item @prim{MX_ENABLE_CON} @tab Enable confirmation.
@item @prim{MX_CONNECT_CON} @tab Connect confirmation.
@item @prim{MX_DATA_IND} @tab Data indication.
@item @prim{MX_DISCONNECT_IND} @tab Disconnect indication.
@item @prim{MX_DISCONNECT_CON} @tab Disconnect confirmation.
@item @prim{MX_DISABLE_IND} @tab Disable indication.
@item @prim{MX_DISABLE_CON} @tab Disable confirmation.
@item @prim{MX_EVENT_IND} @tab Event indication.
@end ignore
@end multitable

@item mx_state

Indicates the current state of the MXS provider at the time that the primitive was issued.
This field can be one of the following values;

@multitable @columnfractions .2 .8
@item @psta{MXS_UNINIT} @tab Unitialized.
@item @psta{MXS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MXS_DETACHED} @tab No PPA attached, awaiting @prim{MX_ATTACH_REQ}.
@ignore
@item @psta{MXS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MXS_WACK_UREQ} @tab Waiting for detach.
@end ignore
@item @psta{MXS_ATTACHED} @tab PPA attached, awaiting @prim{MX_ENABLE_REQ}.
@ignore
@c @item @psta{MXS_WACK_EREQ} @tab Waiting acknolwedgement of @prim{MX_ENABLE_REQ}.
@end ignore
@item @psta{MXS_WCON_EREQ} @tab Waiting to send @prim{MX_ENABLE_CON}.
@ignore
@c @item @psta{MXS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MX_DISABLE_REQ}.
@end ignore
@item @psta{MXS_WCON_RREQ} @tab Waiting to send @prim{MX_DISABLE_CON}.
@item @psta{MXS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@ignore
@item @psta{MXS_WACK_CREQ} @tab Waiting acknolwedgement of @prim{MX_CONNECT_REQ}.
@end ignore
@item @psta{MXS_WCON_CREQ} @tab Waiting to send @prim{MX_CONNECT_CON}.
@ignore
@item @psta{MXS_WACK_DREQ} @tab Waiting acknolwedgement of @prim{MX_DISCONNECT_REQ}.
@end ignore
@item @psta{MXS_WCON_DREQ} @tab Waiting to send @prim{MX_DISCONNECT_CON}.
@item @psta{MXS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive is issued by the MXS provider in the @psta{MXS_WACK_AREQ}, @psta{MXS_WACK_UREQ},
@psta{MXS_WACK_CREQ} or @psta{MXS_WACK_DREQ} state.

@subsubheading New State

The new state is @psta{MXS_DETACHED}, @psta{MXS_ATTACHED}, @psta{MXS_ENABLED} or @psta{MXS_CONNECTED}, depending on the primitive to
which the message is responding.

@page
@node MX_ERROR_ACK
@subsubsection MX_ERROR_ACK

@subsubheading Description

The error acknowledgement primitive is used to acknowledge receipt and unsuccessful service
completion for primitives requiring acknowledgement.

@subsubheading Format
@tpindex MX_error_ack

The error acknowledgement primitive consists of one @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_error_ack {
    mx_ulong mx_primtive;
    mx_ulong mx_error_primitive;
    mx_ulong mx_error_type;
    mx_ulong mx_unix_error;
    mx_ulong mx_state;
} MX_error_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The error acknowledgement primitive contains the following parameters:

@table @parm

@item mx_primitive

Indicates the primitive type.  Always @prim{MX_ERROR_ACK}.

@item mx_error_type

Indicates the MX error number.
This field can have one of the following values:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@item mx_unix_error

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{mx_error_type} field
is @perr{MXSYSERR}, the @parm{mx_unix_error} field is the UNIX error number as described in
@manref{errno(3)}.

@item mx_error_primitive

Indicates the primitive that was in error.
This field can have one of the following values:

@multitable @columnfractions .25 .75
@item @prim{MX_INFO_REQ} @tab Information request.
@item @prim{MX_OPTMGMT_REQ} @tab Options management request.
@item @prim{MX_ATTACH_REQ} @tab Attach request.
@item @prim{MX_ENABLE_REQ} @tab Enable request.
@item @prim{MX_CONNECT_REQ} @tab Connect request.
@item @prim{MX_DATA_REQ} @tab Data request.
@item @prim{MX_DISCONNECT_REQ} @tab Disconnect request.
@item @prim{MX_DISABLE_REQ} @tab Disable request.
@item @prim{MX_DETACH_REQ} @tab Detach Request.
@item @prim{MX_INFO_ACK} @tab Information acknowledgement.
@item @prim{MX_OPTMGMT_ACK} @tab Options Management acknowledgement.
@item @prim{MX_OK_ACK} @tab Successful receipt acknolwedgement.
@item @prim{MX_ERROR_ACK} @tab Error acknowledgement.
@item @prim{MX_ENABLE_CON} @tab Enable confirmation.
@item @prim{MX_CONNECT_CON} @tab Connect confirmation.
@item @prim{MX_DATA_IND} @tab Data indication.
@item @prim{MX_DISCONNECT_IND} @tab Disconnect indication.
@item @prim{MX_DISCONNECT_CON} @tab Disconnect confirmation.
@item @prim{MX_DISABLE_IND} @tab Disable indication.
@item @prim{MX_DISABLE_CON} @tab Disable confirmation.
@item @prim{MX_EVENT_IND} @tab Event indication.
@end multitable

@item mx_state

Indicates the state of the MXS provider at the time that the primitive was issued.  This field can
have one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MXS_UNINIT} @tab Unitialized.
@item @psta{MXS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MXS_DETACHED} @tab No PPA attached, awaiting @prim{MX_ATTACH_REQ}.
@item @psta{MXS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MXS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MXS_ATTACHED} @tab PPA attached, awaiting @prim{MX_ENABLE_REQ}.
@c @item @psta{MXS_WACK_EREQ} @tab Waiting acknolwedgement of @prim{MX_ENABLE_REQ}.
@item @psta{MXS_WCON_EREQ} @tab Waiting to send @prim{MX_ENABLE_CON}.
@c @item @psta{MXS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MX_DISABLE_REQ}.
@item @psta{MXS_WCON_RREQ} @tab Waiting to send @prim{MX_DISABLE_CON}.
@item @psta{MXS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MXS_WACK_CREQ} @tab Waiting acknolwedgement of @prim{MX_CONNECT_REQ}.
@item @psta{MXS_WCON_CREQ} @tab Waiting to send @prim{MX_CONNECT_CON}.
@item @psta{MXS_WACK_DREQ} @tab Waiting acknolwedgement of @prim{MX_DISCONNECT_REQ}.
@item @psta{MXS_WCON_DREQ} @tab Waiting to send @prim{MX_DISCONNECT_CON}.
@item @psta{MXS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
MXS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node Information Reporting Service Primitives
@subsection Information Reporting Service Primitives

These service primitives implement the information reporting service (@pxref{Information Reporting
Service}).

@menu
* MX_INFO_REQ::
* MX_INFO_ACK::
@end menu

@node MX_INFO_REQ
@subsubsection MX_INFO_REQ

@subsubheading Description

This MXS user originated primitive is issued by the MXS user to request that the MXS provider
return information concerning the capabilities and state of the MXS provider.

@subsubheading Format
@tpindex MX_info_req

The primitive consists of one @msg{M_PROTO} or @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_info_req {
    mx_ulong mx_primitive;
} MX_info_req_t;
@end verbatim
@end display

@subsubheading Parameters

This primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the primitive type.  Always @prim{MX_INFO_REQ}.

@end table

@subsubheading State

This primitive may be issued in any state but only when a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

This primitive requires the MXS provider to acknowledge receipt of the primitive as follows:

@itemize @minus

@item @b{Successful}:
The MXS provider is required to acknowledge receipt of the primitive and provide the requested
information using the @prim{MX_INFO_ACK} primitive.

@item @b{Unsuccessful (non-fatal errors)}:
The MXS provider is required to negatively acknowledge the primtive using the @prim{MX_ERROR_ACK}
primitive, and include the reason for failure in the primitive.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}: applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_INFO_ACK
@subsubsection MX_INFO_ACK

@subsubheading Description

This MXS provider originated primitive acknowledges receipt and successful processing of the
@prim{MX_INFO_REQ} primitive and provides the requested information concerning the MXS provider.

@subsubheading Format
@tpindex MX_info_ack

This message is formatted a one @msg{M_PROTO} or @msg{M_PCPROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_info_ack {
    mx_ulong mx_primitive;    /* always MX_INFO_ACK */
    mx_ulong mx_addr_length;  /* multiplex address length */
    mx_ulong mx_addr_offset;  /* multiplex address offset */
    mx_ulong mx_parm_length;  /* multiplex paramters length */
    mx_ulong mx_parm_offset;  /* multiplex paramters offset */
    mx_ulong mx_prov_flags;   /* provider options flags */
    mx_ulong mx_prov_class;   /* provider class */
    mx_ulong mx_style;        /* provider style */
    mx_ulong mx_version;      /* multiplex interface version */
    mx_ulong mx_state;        /* multiplex state */
} MX_info_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The information acknowledgement service primitive has the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_INFO_ACK}.

@item mx_addr_length
Indicates the length of the PPA address to which the provider is attached.  When in states
@psta{MXS_DETACHED} or @psta{MXS_WACK_AREQ}, this value will be zero (@samp{0}).

@item mx_addr_offset
Indicates the offset, beginning from the start of the @msg{M_PCPROTO} message block of the
PPA address associated with the provider.
When the @parm{mx_addr_length} field is zero, this field is also zero (@samp{0}).

@item mx_parm_length
Indicates the length of the parameters associated with the provider.

@item mx_parm_offset
Indicates the offset, beginning from the start of the @msg{M_PCPROTO} message block, of the
parameters associated with the provider.
When the @parm{mx_parm_length} field is zero, this field is also zero (@samp{0}).

@item mx_prov_flags
Indicates the options flags associated with the provider.  This is a bitwise OR of zero or more of
the following flags:

@item mx_prov_class
Indicates the provider class.  This can be one of the following values:

@multitable @columnfractions .2 .6
@item @pval{MX_CIRCUIT} @tab Circuit provider class.
@end multitable

@item mx_addr_length
This is a variable length field.  The length of the field is determined by the length
attribute.

For a @dfn{Style 2} driver, when @parm{mx_style} is @pval{MX_STYLE2}, and when in an attached state,
this field provides the current PPA associated with the Stream; the length is typically 4 bytes.

For a @dfn{Style 1} driver, when @parm{mx_ppa_stype} is @pval{MX_STYLE1}, the length is 0 bytes.

@item mx_style
Indicates the PPA style of the MXS provider.  This value can be one of the following values;

@multitable @columnfractions .15 .65
@item @pval{MX_STYLE1} @tab PPA is implicitly attached by @manref{open(2)}.
@item @pval{MX_STYLE2} @tab PPA must be explicitly attached using @prim{MX_ATTACH_REQ}.
@end multitable

@item mx_version
The version of the interface.  This version is @pval{MX_VERSION_1_1}.

@multitable @columnfractions .2 .6
@item @pval{MX_VERSION_1_0} @tab Version 1.0 of interface.
@item @pval{MX_VERSION_1_1} @tab Version 1.1 of interface.
@item @pval{MX_VERSION} @tab Always the current version of the header file.
@end multitable

@item mx_state
Indicates the state of the MXS provider at the time that the information acknolwedgement service
primitive wsa issued.  This field can be one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MXS_UNINIT} @tab Unitialized.
@item @psta{MXS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MXS_DETACHED} @tab No PPA attached, awaiting @prim{MX_ATTACH_REQ}.
@item @psta{MXS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MXS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MXS_ATTACHED} @tab PPA attached, awaiting @prim{MX_ENABLE_REQ}.
@c @item @psta{MXS_WACK_EREQ} @tab Waiting acknolwedgement of @prim{MX_ENABLE_REQ}.
@item @psta{MXS_WCON_EREQ} @tab Waiting to send @prim{MX_ENABLE_CON}.
@c @item @psta{MXS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MX_DISABLE_REQ}.
@item @psta{MXS_WCON_RREQ} @tab Waiting to send @prim{MX_DISABLE_CON}.
@item @psta{MXS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MXS_WACK_CREQ} @tab Waiting acknolwedgement of @prim{MX_CONNECT_REQ}.
@item @psta{MXS_WCON_CREQ} @tab Waiting to send @prim{MX_CONNECT_CON}.
@item @psta{MXS_WACK_DREQ} @tab Waiting acknolwedgement of @prim{MX_DISCONNECT_REQ}.
@item @psta{MXS_WCON_DREQ} @tab Waiting to send @prim{MX_DISCONNECT_CON}.
@item @psta{MXS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node Physical Point of Attachment Service Primitives
@subsection Physical Point of Attachment Service Primitives

These service primitives implement the physical point of attachment service (@pxref{Physical Point
of Attachment Service}).

@menu
* MX_ATTACH_REQ::
* MX_DETACH_REQ::
@end menu

@node MX_ATTACH_REQ
@subsubsection MX_ATTACH_REQ

@subsubheading Description

This MXS user originated primitive requests that the Stream upon which the primitive is issued be
associated with the specified Physical Point of Attachment (PPA).  This primitive is only applicable
to @dfn{Style 2} MXS provider Streams, that is, Streams that return @pval{MX_STYLE2} in the
@parm{mx_style} field of the @prim{MX_INFO_ACK}.

@subsubheading Format
@tpindex MX_attach_req

This primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef MX_attach_req {
    mx_ulong mx_primitive;
    mx_ulong mx_addr_length;
    mx_ulong mx_addr_offset;
    mx_ulong mx_flags;
} MX_attach_req_t;
@end verbatim
@end display

@subsubheading Parameters

The attach request primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_ATTACH_REQ}.

@item mx_addr_length
Specifies the Physical Point of Attachment (PPA) to which to associate the @dfn{Style 2} Stream.
This is a variable length identifier whose length is determined by the @parm{mx_addr_length} value.
Specifies the length of the Physical Point of Attachment (PPA) address.  The form of the PPA address
is provider-specific.

@item mx_addr_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
Physical Point of Attachment (PPA) address.

@item mx_flags
Specifies the options flags for attachment.  Options flags are provider-specific.

@end table

@subsubheading State

This primitive is only valid in state @psta{MXS_DETACHED} and when a local acknowledgement is not
pending.

@subsubheading New State

Upon success, the new state is @psta{MXS_WACK_AREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The attach request service primitive requires that the MXS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The MXS provider acknowledges receipt of the primitive and successful outcome of the attach service
with a @prim{MX_OK_ACK} primitive.  The new state is @psta{MXS_ATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The MXS provider acknowledges receipt of the primitive and failure of the attach service with a
@prim{MX_ERROR_ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_DETACH_REQ
@subsubsection MX_DETACH_REQ

@subsubheading Description

This MXS user originated primitive requests that the Stream upon which the primitive is issued be
disassociated from the Physical Point of Appearance (PPA) to which it is currently attached.  This
primitive is only applicable to @dfn{Style 2} MXS provider Streams, that is, Streams that return
@pval{MX_STYLE2} in the @parm{mx_style} field of the @prim{MX_INFO_ACK}.

@subsubheading Format
@tpindex MX_detach_req

The detach request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_detach_req {
    mx_ulong mx_primitive;
} MX_detach_req_t;
@end verbatim
@end display

@subsubheading Parameters

The detach request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_DETACH_REQ}.

@end table

@subsubheading State

This primitive is valid in the @psta{MXS_ATTACHED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{MXS_WACK_UREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The detach request service primitive requires that the MXS provider respond as follows:

@itemize @minus

@item @b{Successful}:
The MXS provider acknowledges receipt of the primitive and successful outcome of the detach service
with a @prim{MX_OK_ACK} primitive.  The new state is @psta{MXS_DETACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
The MXS provider acknowledges receipt of the primitive and failure of the detach service with a
@prim{MX_ERROR_ACK} primitive containing the reason for failure.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node Initialization Service Primitives
@subsection Initialization Service Primitives

Initialization service primitives allow the MXS user to enable or disable the protocol service
interface.  Enabling the protocol service interface may require that some action be taken to prepare
the protocol service interface for use or to remove it from use.  For example, where the PPA
corresponds to a multiplex identifier as defined in G.703, it may be necessary to perform
switching to connect or disconnect the circuit identification code associated with the multiplex
identifier.

These service primitives implement the initialization service (@pxref{Initialization Service}).

@menu
* MX_ENABLE_REQ::
* MX_ENABLE_CON::
* MX_DISABLE_REQ::
* MX_DISABLE_CON::
* MX_DISABLE_IND::
@end menu

@node MX_ENABLE_REQ
@subsubsection MX_ENABLE_REQ

@subsubheading Description

This MXS user originated primitive requests that the MXS provider perform the actions necessary to
enable the protocol service interface and confirm that it is enabled.  This primitive is applicable
to both styles of PPA.

@subsubheading Format
@tpindex MX_enable_req

The enable request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_enable_req {
    mx_ulong mx_primitive;
    mx_ulong mx_addr_length;
    mx_ulong mx_addr_offset;
    mx_ulong mx_flags;
} MX_enable_req_t;
@end verbatim
@end display

@subsubheading Parameters

The enable request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_ENABLE_REQ}.

@item mx_addr_length
Specifies a remote address to which to connect the PPA.  The need for and form of this address is
provider-specific.  The length of the field is determined by the value of this field.
This remote address could be a circuit identification code, an IP address, or some other
form of circuit or multiplex identifier.

@item mx_addr_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
remote address.

@item mx_flags
Specifies the options flags associated with the enable request.  Options flags are
provider-specific.

@end table

@subsubheading State

This primitive is valid in the @psta{MXS_ATTACHED} state and when no local acknowledgement is pending.

@subsubheading New State

Upon success the new state is @psta{MXS_WCON_EREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The enable request service primitive requires that the MXS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MXS provider acknowledges successful completion of the enable service with a
@prim{MX_ENABLE_CON} primitive.  The new state is @psta{MXS_ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MXS provider acknowledges the failure of the enable service with a
@prim{MX_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_ENABLE_CON
@subsubsection MX_ENABLE_CON

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to confirm the successful
completion of the enable service.

@subsubheading Format
@tpindex MX_enable_con

The enable confirmation service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MX_enable_con {
    mx_ulong mx_primitive;
    mx_ulong mx_addr_length;
    mx_ulong mx_addr_offset;
    mx_ulong mx_flags;
} MX_enable_con_t;
@end verbatim
@end display

@subsubheading Parameters

The enable confirmation service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_ENABLE_CON}.

@item mx_addr_length
Confirms the length of the remote address to which the enable is confirmed.

@item mx_addr_offset
Confirms the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the
remote address.

@item mx_flags
Confirms the options flags associated with the enable confirmation.  Options flags are
provider-specific.

@end table

@subsubheading State

This primitive is issued by the MXS provider in the @psta{MXS_WCON_EREQ} state.

@subsubheading New State

The new state is @psta{MXS_ENABLED}.

@page
@node MX_DISABLE_REQ
@subsubsection MX_DISABLE_REQ

@subsubheading Description

This MXS user originated primitive requests that the MXS provider perform the actions necessary to
disable the protocol service interface and confirm that it is disabled.  The primitive is applicable
to both styles of PPA.

@subsubheading Format
@tpindex MX_disable_req

The disable request service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_disable_req {
    mx_ulong mx_primitive;
} MX_disable_req_t;
@end verbatim
@end display

@subsubheading Parameters

The disable request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_DISABLE_REQ}.

@end table

@subsubheading State

The disable request service primitive is valid in the @psta{MXS_ENABLED} state and when no local
acknowledgement is pending.

@subsubheading New State

Upon success, the new state is @psta{MXS_WCON_RREQ}.  Upon failure, the state remains unchanged.

@subsubheading Response

The disable request service primitive requires the MXS provider to acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MXS provider acknowledges successful completion of the disable service with an
@prim{MX_DISABLE_CON} primitive.  The new state is @psta{MXS_ATTACHED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MXS provider acknowledges the failure of the disable service with a
@prim{MX_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_DISABLE_CON
@subsubsection MX_DISABLE_CON

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to confirm the successful
completion of the disable service.

@subsubheading Format
@tpindex MX_disable_con

The disable confirmation service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MX_disable_con {
    mx_ulong mx_primitive;
} MX_disable_con_t;
@end verbatim
@end display

@subsubheading Parameters

The disable confirmation service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_DISABLE_CON}.



@end table

@subsubheading State

This primitive is issued by the MXS provider in the @psta{MXS_WCON_RREQ} state.

@subsubheading New State

The new state is @psta{MXS_ATTACHED}.

@page
@node MX_DISABLE_IND
@subsubsection MX_DISABLE_IND

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider, if an autonomous event results
in the disabling of the MXS use Stream without an explicity MXS user request.

@subsubheading Format
@tpindex MX_disable_ind

The disable indication primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_disable_ind {
    mx_ulong mx_primitive;
    mx_ulong mx_cause;
} MX_disable_ind_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_DISABLE_IND}.

@item mx_cause
Indicates the cause of the autonomous disabling of the MXS user Stream.

@end table

@subsubheading State

This primitive will only be issued by the MXS provider in the @psta{MXS_ENABLED} state.

@subsubheading New State

The new state is @psta{MXS_ATTACHED}.

@page
@node Options Management Service Primitives
@subsection Options Management Service Primitives

The options management service primitives allow the MXS user to negotiate options with the MXS
provider, retrieve the current and default values of options, and check that values specified for
options are correct.

The options management service primitive implement the options management service (@pxref{Options
Management Service}).

@menu
* MX_OPTMGMT_REQ::
* MX_OPTMGMT_ACK::
@end menu

@node MX_OPTMGMT_REQ
@subsubsection MX_OPTMGMT_REQ

@subsubheading Description

This MXS user originated primitive requests that MXS provider options be managed.

@subsubheading Format
@tpindex MX_optmgmt_req

The option management request service primitive consists of one @msg{M_PROTO} or @msg{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct MX_optmgmt_req {
    mx_ulong mx_primitive;
    mx_ulong mx_opt_length;
    mx_ulong mx_opt_offset;
    mx_ulong mx_mgmt_flags;
} MX_optmgmt_req_t;
@end verbatim
@end display

@subsubheading Parameters

The option management request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_OPTMGMT_REQ}.

@item mx_opt_length
Specifies the length of the options.

@item mx_opt_offset
Specifies the offset, from the beginning of the @msg{M_PROTO} message block, of the start of the options.

@item mx_mgmt_flags
Specifies the management flags that determine what operation the MXS provider is expected to
perform on the specified options.  This field can assume one of the following values:

@table @pval

@item MX_NEGOTIATE
Negotiate the specified value of each specified option and return the negotiated value.

@item MX_CHECK
Check the validity of the specified value of each specified option and return the result.  Do not
alter the current value assumed by the MXS provider.

@item MX_DEFAULT
Return the default value for the specified options (or all options).  Do not alter the current value
assumed by the MXS provider.

@item MX_CURRENT
Return the current value for the specified options (or all options).  Do not alter the current value
assumed by the MXS provider.

@end table

@end table

@subsubheading State

This primitive is valid in any state where a local acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@subsubheading Response

The option management request service primitive requires the MXS provider to acknowledge receipt of
the primitive as follows:

@itemize @minus

@item @b{Successful}:
Upon success, the MXS provider acknolwedges receipt of the service primitive and successful
completion of the options management service with an @prim{MX_OPTMGMT_ACK} primitive containing the
options management result.  The state remains unchanged.

@item @b{Unsuccessful (non-fatal errors)}:
Upon failure, the MXS provider acknowledges receipt of the service primitive and failure to
complete the options management service with an @prim{MX_ERROR_ACK} primitive containing the error.
The state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_OPTMGMT_ACK
@subsubsection MX_OPTMGMT_ACK

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider upon successful completion of
the options management service.  It indicates the outcome of the options management operation
requested by the MXS user in a @prim{MX_OPTMGMT_REQ} primitive.

@subsubheading Format
@tpindex MX_optmgmt_ack

The option management acknowledgement service primitive consists of one @msg{M_PCPROTO} message block,
structured as follows:

@display
@verbatim
typedef struct MX_optmgmt_ack {
    mx_ulong mx_primitive;
    mx_ulong mx_opt_length;
    mx_ulong mx_opt_offset;
    mx_ulong mx_mgmt_flags;
} MX_optmgmt_ack_t;
@end verbatim
@end display

@subsubheading Parameters

The option management acknowledgement service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_OPTMGMT_ACK}.

@item mx_opt_length
Indicates the length of the returned options.

@item mx_opt_offset
Indicates the offset of the returned options from the start of the @msg{M_PCPROTO} message block.

@item mx_mgmt_flags
Indicates the returned management flags.  These flags indicate the overall success of the options
management service.  This field can assume one of the following values:

@table @pval

@item MX_SUCCESS
The MXS provider succeeded in negotiating or returning all of the options specified by the MXS
user in the @prim{MX_OPTMGMT_REQ} primitive.

@item MX_FAILURE
The MXS provider failed to negotiate one or more of the options specified by the MXS user.

@item MX_PARTSUCCESS
The MXS provider negotiated a value of lower quality for one or more of the options specified by
the MXS user.

@item MX_READONLY
The MXS provider failed to negotiate one or more of the options specified by the MXS user because
the option is treated as read-only by the MXS provider.

@item MX_NOTSUPPORT
The MXS provider failed to recognize one or more of the options specified by the MXS user.

@end table

@end table

@subsubheading State

This primitive is issued by the MXS provider in direct response to a @prim{MX_OPTMGMT_REQ} primitive.

@subsubheading New State

The new state remains unchangted.

@subsubheading Rules

The MXS provider observes the following rules when processing option management service requests:

@itemize ---

@item
When the @parm{mx_mgmt_flags} field in the @prim{MX_OPTMGMT_REQ} primitive is set to @pval{MX_NEGOTIATE},
the MXS provider will attempt to negotiate a value for each of the options specified in the
request.

@item
When the flags are @pval{MX_DEFAULT}, the MXS provider will return the default values of the specified
options, or the default values of all options known to the MXS provider if no options were
specified.

@item
When the flags are @pval{MX_CURRENT}, the MXS provider will return the current values of the specified
options, or all options.

@item
When the flags are @pval{MX_CHECK}, the MXS provider will attempt to negotiate a value for each of the
options specified in the request and return the resulg of the negotiation, but will not affect the
current value of the option.

@end itemize

@page
@node Event Reporting Service Primitives
@subsection Event Reporting Service Primitives

The event reporting service primitives allow the MXS provider to indicate asynchronous errors,
events and statistics collection to the MXS user.

These service primitives implement the event reporting service (@pxref{Event Reporting Service}).

@menu
* MX_ERROR_IND::
* MX_STATS_IND::
* MX_EVENT_IND::
@end menu

@node MX_ERROR_IND
@subsubsection MX_ERROR_IND

@subsubheading Description

This MXS provider originated service primitive is issued by the MXS provider when it detects and
asynchronous error event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MX_error_ind

The error indication service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_error_ind {
    mx_ulong mx_primitive;
    mx_ulong mx_error_type;
    mx_ulong mx_unix_error;
    mx_ulong mx_state;
} MX_error_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The error indication service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_ERROR_IND}.

@item MX_error_type
Indicates the MXI error number describing the error.  This field can have one of the following
values:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@item mx_unix_error

Indicates the reason for failure.  This field is protocol-specific.  When the @parm{mx_error_type} field
is @perr{MXSYSERR}, the @parm{mx_unix_error} field is the UNIX error number as described in
@manref{errno(3)}.

@item mx_state

Indicates the state of the MXS provider at the time that the primitive was issued.
This field can have one of the following values:

@multitable @columnfractions .2 .8
@item @psta{MXS_UNINIT} @tab Unitialized.
@item @psta{MXS_UNUSABLE} @tab Device cannot be used, Stream in hung state.
@item @psta{MXS_DETACHED} @tab No PPA attached, awaiting @prim{MX_ATTACH_REQ}.
@item @psta{MXS_WACK_AREQ} @tab Waiting for attach.
@item @psta{MXS_WACK_UREQ} @tab Waiting for detach.
@item @psta{MXS_ATTACHED} @tab PPA attached, awaiting @prim{MX_ENABLE_REQ}.
@c @item @psta{MXS_WACK_EREQ} @tab Waiting acknolwedgement of @prim{MX_ENABLE_REQ}.
@item @psta{MXS_WCON_EREQ} @tab Waiting to send @prim{MX_ENABLE_CON}.
@c @item @psta{MXS_WACK_RREQ} @tab Waiting acknowledgement of @prim{MX_DISABLE_REQ}.
@item @psta{MXS_WCON_RREQ} @tab Waiting to send @prim{MX_DISABLE_CON}.
@item @psta{MXS_ENABLED} @tab Ready for use, awaiting primitive exchange.
@item @psta{MXS_WACK_CREQ} @tab Waiting acknolwedgement of @prim{MX_CONNECT_REQ}.
@item @psta{MXS_WCON_CREQ} @tab Waiting to send @prim{MX_CONNECT_CON}.
@item @psta{MXS_WACK_DREQ} @tab Waiting acknolwedgement of @prim{MX_DISCONNECT_REQ}.
@item @psta{MXS_WCON_DREQ} @tab Waiting to send @prim{MX_DISCONNECT_CON}.
@item @psta{MXS_CONNECTED} @tab Connected, active data transfer.
@end multitable

@end table

@subsubheading State

This primitive can be issued in any state for which a local acknowledgement is not pending.  The
MXS provider state at the time that the primitive was issued is indicated in the primitive.

@subsubheading New State

The new state remains unchanged.

@page
@node MX_STATS_IND
@subsubsection MX_STATS_IND

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to indicate a periodic
statistics collection event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MX_stats_ind

The statistics indication service primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MX_stats_ind {
    mx_ulong mx_primitive;
    mx_ulong mx_interval;
    mx_ulong mx_timestamp;
} MX_stats_ind_t;
@end verbatim
@end display

Following this structure within the @msg{M_PROTO} message block is the provider-specific statistics.

@subsubheading Parameters

The statistics indication service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_STATS_IND}.

@item mx_interval
Indicates the statistics collection interval to which the statistics apply.  This interval is
specified in milliseconds.

@item mx_timestamp
Indicates the UNIX time (from epoch) at which statistics were collected.  The timestamp is given in
milliseconds from epoch.

@end table

@subsubheading State

This service primitive may be issued by the MXS provider in any state in which a local
acknowledgement is not pending.

@subsubheading New State

The new state remains unchanged.

@page
@node MX_EVENT_IND
@subsubsection MX_EVENT_IND

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to indicate an asynchronous
event.  The service primitive is applicable to all styles of PPA.

@subsubheading Format
@tpindex MX_event_ind

The event indication service primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_event_ind {
    mx_ulong mx_primitive;
    mx_ulong mx_event;
    mx_ulong mx_slot;
} MX_event_ind_t;
@end verbatim
@end display

Following this structure within the @msg{M_PROTO} message block is the provider-specific event
information.

@subsubheading Parameters

THe event indication service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_EVENT_IND}.

@item mx_event
Indicates the provider-specific event that has occured.

@multitable @columnfractions .3 .7
@item @pval{MXF_EVT_DCD_ASSERT} @tab Data carrier detect lead asserted.
@item @pval{MXF_EVT_DCD_DEASSERT} @tab Data carrier detect lead deasserted.
@item @pval{MXF_EVT_DSR_ASSERT} @tab Data set ready lead asserted.
@item @pval{MXF_EVT_DSR_DEASSERT} @tab Data set ready lead deasserted.
@item @pval{MXF_EVT_DTR_ASSERT} @tab Data terminal ready lead asserted.
@item @pval{MXF_EVT_DTR_DEASSERT} @tab Data terminal ready lead deasserted.
@item @pval{MXF_EVT_RTS_ASSERT} @tab Request to send lead asserted.
@item @pval{MXF_EVT_RTS_DEASSERT} @tab Request to send lead deasserted.
@item @pval{MXF_EVT_CTS_ASSERT} @tab Clear to send lead asserted.
@item @pval{MXF_EVT_CTS_DEASSERT} @tab Clear to send lead deasserted.
@item @pval{MXF_EVT_RI_ASSERT} @tab Ring indicator asserted.
@item @pval{MXF_EVT_RI_DEASSERT} @tab Ring indicator deasserted.
@item @pval{MXF_EVT_YEL_ALARM} @tab Yellow alarm condition.
@item @pval{MXF_EVT_BLU_ALARM} @tab Blue alarm condition.
@item @pval{MXF_EVT_RED_ALARM} @tab Red alarm condition.
@item @pval{MXF_EVT_NO_ALARM} @tab Alarm recovery condition.
@end multitable

@ignore
@item mx_timestamp
Indicates the UNIX time from epoch (in milliseconds).

@item mx_severity
Indicates the provider-specific severity of the event.
@end ignore

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media to which the event corresponds.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This service primitive can be issued by the MXS provider in any state where a local
acknowledgement is not pending.  Normally the MXS provider must be in the @psta{MXS_ENABLED} state for
event reporting to occur.

@subsubheading New State

The new state remains unchanged.

@page
@node Protocol Service Primitives
@section Protocol Service Primitives

Protocol service primitives implement the Multiplex Interface protocol.  Protocol service
primitives provide the MXS user with the ability to connect transmission or reception directions of
the bit stream, pass bits for transmission and accept received bits.

These service primitives implement the protocol services (@pxref{Protocol Services}).

@menu
* Connection Service Primitives::
* Data Transfer Service Primitives::
* Disconnection Service Primitives::
@end menu

@node Connection Service Primitives
@subsection Connection Service Primitives

The connection service primitives permit the MXS user to establish a connection between the line
(circuit or channel) and the MXS user in the transmit, receive, or both, directions.

These service primitives implement the connection service (@pxref{Connection Service}).

@menu
* MX_CONNECT_REQ::
* MX_CONNECT_CON::
@end menu

@node MX_CONNECT_REQ
@subsubsection MX_CONNECT_REQ

@subsubheading Description

This MXS user originated service primitive allows the MXS user to connect the user Stream to the
medium in the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MX_connect_req

The connect request primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_connect_req {
    mx_ulong mx_primitive;
    mx_ulong mx_conn_flags;
    mx_ulong mx_slot;
} MX_connect_req_t;
@end verbatim
@end display

@subsubheading Parameters

The connect request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_CONNECT_REQ}.

@item mx_conn_flags
Specifies the direction in which to connect.  This field can contain a bitwise OR of one or more of
the following flags:

@multitable @columnfractions .15 .65
@item @pval{MXF_RX_DIR} @tab Specifies that the MXS user Stream is to be connected to the medium in the receive direction.
@item @pval{MXF_TX_DIR} @tab Specifies that the MXS user Stream is to be connected to the medium in the transmit direction.
@item @pval{MXF_MONITOR} @tab Specifies that the MXS user Stream is to be connected to the medium in monitoring (tap) mode.
@end multitable

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media to be connected to the MXS User Stream.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This service primitive is only valid in the @psta{MXS_ENABLED} state.

@subsubheading New State

The new state is the @psta{MXS_WACK_CREQ} state.

@subsubheading Response

The connect request service primitive requires that the MXS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MXS provider acknolwedges successful completion of the connect service wtih a
@prim{MX_OK_ACK} primitive.  The new state is @psta{MXS_WCON_CREQ}.  When the MXS provider
eventually completes the connection, it confirms the connection with a @prim{MX_CONNECT_CON}
primitive and the new state is then @psta{MXS_CONNECTED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MXS provider acknowledges the failure of the connect service with a
@prim{MX_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_CONNECT_CON
@subsubsection MX_CONNECT_CON

@subsubheading Description

This MXS provider originated service primitive allows the MXS provider to confirm the succesful
completion of the connect servivce with the connection of the user Stream to the medium in the
transmit, receive, or both, directions.

@subsubheading Format
@tpindex MX_connect_con

The connect confirmation primitive consists of one @msg{M_PROTO} message block, structured as
follows:

@display
@verbatim
typedef struct MX_connect_con {
    mx_ulong mx_primitive;
    mx_ulong mx_conn_flags;
    mx_ulong mx_slot;
} MX_connect_con_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_CONNECT_CON}.

@item mx_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MXF_RX_DIR} @tab Confirms that the MXS user Stream was connected to the medium in the receive direction.
@item @pval{MXF_TX_DIR} @tab Confirms that the MXS user Stream was connected to the medium in the transmit direction.
@item @pval{MXF_MONITOR} @tab Confirms that the MXS user Stream was connected to the medium in monitoring (tap) mode.
@end multitable

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media that are confirmed connected to the MXS user Stream.  The form of the slot
specification is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This primitive will only be issued by the MXS provider in the @psta{MXS_WCON_CREQ} state.

@subsubheading New State

The new state of the interface is the @psta{MXS_CONNECTED} state.

@page
@node Data Transfer Service Primitives
@subsection Data Transfer Service Primitives

The data transfer service primitives permit the MXS user to pass bits for transmission to the MXS
provider and accept received bits from the MXS provider.

These service primitives implement the data transfer service (@pxref{Data Transfer Service}).

@menu
* MX_DATA_REQ::
* MX_DATA_IND::
@end menu

@node MX_DATA_REQ
@subsubsection MX_DATA_REQ

@subsubheading Description

This MXS user originated primitive allows the MXS user to specify bits for transmission on the
medium.

@subsubheading Format
@tpindex MX_data_req

The transmission request service primitive consists of one optional @msg{M_PROTO} message block followed
by one or more @msg{M_DATA} message blocks containing the bits for transmission.  The @msg{M_PROTO} message
block is structured as follows:

@display
@verbatim
typedef struct MX_data_req {
    mx_ulong mx_primitive;
    mx_ulong mx_slot;
} MX_data_req_t;
@end verbatim
@end display

@subsubheading Parameters

The transmission request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_DATA_REQ}.

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media upon which the user data is to be transmitted.  The form of the slot
specification is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This primitive is only valid in the @psta{MXS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node MX_DATA_IND
@subsubsection MX_DATA_IND

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to indicate bits that were
received on the medium.

@subsubheading Format
@tpindex MX_data_ind

The receive indication service primitive consists of one optional @msg{M_PROTO} message block followed by
one or more @msg{M_DATA} message blocks containing the received bits.  The @msg{M_PROTO} message block is
structured as follows:

@display
@verbatim
typedef struct MX_data_ind {
    mx_ulong mx_primitive;
    mx_ulong mx_slot;
} MX_data_ind_t;
@end verbatim
@end display

@subsubheading Parameters

The receive indication service primitive contains the following parameters:

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_DATA_IND}.

@item mx_slot
Where the PPA corresponds to a multiplexed media, this parameter specifies to which of the media
streams the data indicated corresponds.  The form of the slot specification is provider- and
media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This primitive is only issued by the MXS provider in the @psta{MXS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response
@subsubheading Reasons for Failure

@page
@node Disconnection Service Primitives
@subsection Disconnection Service Primitives

The disconnection service primitives permit the MXS user to disconnect the Stream from the line
(circuit or channel) for the transmit, receive, or both, directions.  They also allow the MXS
provider to indicate that a disconnection has occured outside of MXS user control.

These service primitives implement the disconnection service (@pxref{Disconnection Service}).

@menu
* MX_DISCONNECT_REQ::
* MX_DISCONNECT_CON::
* MX_DISCONNECT_IND::
@end menu

@node MX_DISCONNECT_REQ
@subsubsection MX_DISCONNECT_REQ

@subsubheading Description

This MXS user originated service primitive allows the MXS user to disconnect the MXS user Stream
from the bit-stream in the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MX_disconnect_req

The disconnect request primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_disconnect_req {
    mx_ulong mx_primitive;   /* always MX_DISCONNECT_REQ */
    mx_ulong mx_conn_flags;  /* direction to disconnect */
    mx_ulong mx_slot;        /* slot within multiplex */
} MX_disconnect_req_t;
@end verbatim
@end display

@subsubheading Parameters

The disconnect request service primitive contains the following parameters:

@table @parm

@item mx_primitive
Specifies the service primitive type.  Always @prim{MX_DISCONNECT_REQ}.

@item mx_conn_flags
Specifies the direction from which to disconnect.  This field can be a bitwise OR of one or more of
the following flags:

@multitable @columnfractions .15 .65
@item @pval{MXF_RX_DIR} @tab Specifies that the MXS user Stream is to be disconnected from the medium in the receive direction.
@item @pval{MXF_TX_DIR} @tab Specifies that the MXS user Stream is to be disconnected from the medium in the transmit direction.
@item @pval{MXF_MONITOR} @tab Specifies that the MXS user Stream is to be discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter specifies the slots within
the mutliplexed media that have been autonomouosly disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This service primitive is only valid in the @psta{MXS_CONNECTED} state.

@subsubheading New State

The state remains unchanged.

@subsubheading Response

The disconnect request service primitive requires that the MXS provider acknowledge receipt of the
primitive as follows:

@itemize @minus

@item @b{Successful}:
When successful, the MXS provider acknolwedges successful completion of the connect service wtih a
@prim{MX_OK_ACK} primitive.  The new state is @psta{MXS_WCON_DREQ}.  When the MXS provider
eventually completes the disconnection, it confirms the disconnect with a @prim{MX_DISCONNECT_CON}
primitive and the new state is then @psta{MXS_ENABLED}.

@item @b{Unsuccessful (non-fatal errors)}:
When unsuccessful, the MXS provider acknowledges the failure of the connect service with a
@prim{MX_ERROR_ACK} primitive containing the error.  The new state remains unchanged.

@end itemize

@subsubheading Reasons for Failure

@b{Non-Fatal Errors}:  applicable non-fatal errors are as follows:

@multitable @columnfractions .2 .8
@item @perr{MXSYSERR} @tab UNIX system error.
@item @perr{MXBADADDR} @tab Bad address format or content.
@item @perr{MXOUTSTATE} @tab Interface out of state.
@item @perr{MXBADOPT} @tab Bad options format or content.
@item @perr{MXBADPARM} @tab Bad parameter format or content.
@item @perr{MXBADPARMTYPE} @tab Bad paramater structure type.
@item @perr{MXBADFLAG} @tab Bad flag.
@item @perr{MXBADPRIM} @tab Bad primitive.
@item @perr{MXNOTSUPP} @tab Primitive not supported.
@item @perr{MXBADSLOT} @tab Bad multplex slot.
@end multitable

@page
@node MX_DISCONNECT_CON
@subsubsection MX_DISCONNECT_CON

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider to confirm the successful
completion of the disconnect service with the disconnection of the user Stream from the medium in
the transmit, receive, or both, directions.

@subsubheading Format
@tpindex MX_disconnect_con

@display
@verbatim
typedef struct MX_disconnect_con {
    mx_ulong mx_primitive;
    mx_ulong mx_conn_flags;
    mx_ulong mx_slot;
} MX_disconnect_con_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_DISCONNECT_CON}.

@item mx_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MXF_RX_DIR} @tab Confirms that the MXS user Stream was disconnected from the medium in the receive direction.
@item @pval{MXF_TX_DIR} @tab Confirms that the MXS user Stream was disconnected from the medium in the transmit direction.
@item @pval{MXF_MONITOR} @tab Confirms that the MXS user Stream was discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media that are confirmed as disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This primitive will only be issued by the MXS provider in the @psta{MXS_WCON_DREQ} state.

@subsubheading New State

The new state of the interface is the @psta{MXS_ENABLED} state.

@page
@node MX_DISCONNECT_IND
@subsubsection MX_DISCONNECT_IND

@subsubheading Description

This MXS provider originated primitive is issued by the MXS provider if an autonomous event
results in the disconnection of the transmit and receive bit-streams from the MXS user without
an explicit MXS user request.

@subsubheading Format
@tpindex MX_disconnect_ind

The disconnect indication primitive consists of one @msg{M_PROTO} message block, structured as follows:

@display
@verbatim
typedef struct MX_disconnect_ind {
    mx_ulong mx_primitive;   /* always MX_DISCONNECT_IND */
    mx_ulong mx_conn_flags;  /* direction disconnected */
    mx_ulong mx_cause;       /* cause for disconnection */
    mx_ulong mx_slot;        /* slot within multiplex */
} MX_disconnect_ind_t;
@end verbatim
@end display

@subsubheading Parameters

@table @parm

@item mx_primitive
Indicates the service primitive type.  Always @prim{MX_DISCONNECT_IND}.

@item mx_conn_flags
Indicates the connect flags.  This field is a bitwise OR of zero or more of the following flags:

@multitable @columnfractions .15 .65
@item @pval{MXF_RX_DIR} @tab Indicates that the MXS user Stream disconnected from the medium in the receive direction.
@item @pval{MXF_TX_DIR} @tab Indicates that the MXS user Stream disconnected from the medium in the transmit direction.
@item @pval{MXF_MONITOR} @tab Indicates that the MXS user Stream discconnected from the medium in monitoring (tap) mode.
@end multitable

@item mx_cause
Indicates the cause of the autonomous disconnect.

@item mx_slot
Where the PPA is associated with a multiplexed medium, this parameter indicates the slots within
the mutliplexed media that have autonomously disconnected.  The form of the slot specification
is provider- and media-specific.  See also @ref{Multiplex Media}.

Where the PPA specifies a single channel for a medium, this parameter is set to zero (@samp{0}) by
the MXS provider on MXS provider originated primitives and is ignored by the MXS provider on MXS
user originated primitives.

@end table

@subsubheading State

This primtiive will only be issued by the MXS provider in the @psta{MXS_CONNECTED} state.

@subsubheading New State

The new state is @psta{MXS_ENABLED}.

@node Diagnostics Requirements
@section Diagnostics Requirements

Two error handling facilities should be provided to the MXS user: one to handle non-fatal errors,
and the other to handle fatal errors.

@subsection Non-Fatal Error Handling Facility

These are errors that do not change the state of the MXS interface as seen by the MXS user and
provide the user with the option of reissuing the MX primitive with the corrected options
specification.  The non-fatal error handling is provided only to those primitives that require
acknowledgements, and uses the @prim{MX_ERROR_ACK} to report these errors.  These errors retain the
state of the MXS interface the same as it was before the SDL provider received the primitive that
was in error.  Syntax errors and rule violations are reported via the non-fatal error handling
facility.

@subsection Fatal Error Handling Facility

These errors are issued by the MX provider when it detects errors that are not correctable by the
MX user, or if it is unable to report a correctible error to the MX user.  Fatal errors are
indicated via the STREAMS message type @msg{M_ERROR} with the UNIX system error @errno{EPROTO}.  The
@msg{M_ERROR} STREAMS message type will result in the failure of all the UNIX system calls on the
Stream.  The MXS user can recover from a fatal error by having all the processes close the files
associated with the Stream, and then reopening them for processing.




@node MXI Input-Output Controls
@chapter MXI Input-Output Controls

These input-output controls can be used to interrogate, negotiate, reset, collect and manage a given
channel or group of channels.  When issued on a MXS user Stream, they can only be used to affect the
channel or channels associated with the MXS user Stream.  Deattached @dfn{Style 2} Streams have no
associated channels.  When issued on a management Stream, they can be used to affect the
configuration of any channel or channels accessible to the management Stream (i.e.  provided by the
same driver, or temporarily linked from the control Stream).

Channels can have characteristics at the channel level, as well as characteristics at the channel
group level.  For example, the channel may not be looped back at the channel, but might be looped
back at the channel group (span).  Where the channel represents a channel within a multiplexed
medium (such as a PCM TDM facility), the MXI input-output controls can be used to interrogate,
negotiate and otherwise manage the channel group characteristics providing that the MXS user has
sufficient privilege to do so.

Note that these input-output controls are not normally issued on the global management Stream by
user processes.  Rather the Management Agent (SNMP Agent) for the driver is normally responsible for
managing channels within the driver using these input-output controls.  Nomally these input-output
controls would only be issued by user processes to affect the channel or channels associated with
the attached MXS user Stream. 

@menu
* MXI Configuration::
* MXI Options::
* MXI State::
* MXI Statistics::
* MXI Events::
* MXI Commands::
@end menu

@node MXI Configuration
@section MXI Configuration

These input-output controls can be used to interrogate or negotiate the configuration of a given
channel or group of channels.

@menu
* MXI Get Configuration::
* MXI Set Configuration::
* MXI Test Configuration::
* MXI Commit Configuration::
@end menu

@display
@verbatim
typedef struct mx_config {
    mx_ulong type;         /* unused */
    mx_ulong encoding;     /* encoding */
    mx_ulong block_size;   /* data block size (bits) */
    mx_ulong samples;      /* samples per block */
    mx_ulong sample_size;  /* sample size (bits) */
    mx_ulong rate;         /* clock rate (samples/second) */
    mx_ulong tx_channels;  /* number of tx channels */
    mx_ulong rx_channels;  /* number of rx channels */
    mx_ulong opt_flags;    /* options flags */
} mx_config_t;
@end verbatim
@end display

The multiplex configuration structure, @type{mx_config_t}, contains the following members:

@table @member
@item type
This member is only to maintain alignment with the equivalient parameter structure as defined in the
MXI and unused in the input-output control.
@item encoding
Indicates or specifies the encoding associated with the multiplex.  When the multiplex is used for any
form of data, @pval{MX_ENCODING_NONE} will be indicated and should be specified.  @member{encoding}
can be one of the following values:
@multitable @columnfractions .3 .5
@item @pval{MX_ENCODING_NONE} @tab No encoding.  Used for data or other clear channel information.
@item @pval{MX_ENCODING_CN} @tab CN.
@item @pval{MX_ENCODING_DVI4} @tab DVI4.
@item @pval{MX_ENCODING_FS1015} @tab FIPS FS 1015 LPC.
@item @pval{MX_ENCODING_FS1016} @tab FIPS FS 1016 LPC.
@item @pval{MX_ENCODING_G711_PCM_A} @tab G.711 PCM A-law.
@item @pval{MX_ENCODING_G711_PCM_L} @tab G.711 PCM Linear.
@item @pval{MX_ENCODING_G711_PCM_U} @tab G.711 PCM Mu-law.
@item @pval{MX_ENCODING_G721} @tab G.721.
@item @pval{MX_ENCODING_G722} @tab G.722.
@item @pval{MX_ENCODING_G723} @tab G.723.
@item @pval{MX_ENCODING_G726} @tab G.726.
@item @pval{MX_ENCODING_G728} @tab G.728.
@item @pval{MX_ENCODING_G729} @tab G.729.
@item @pval{MX_ENCODING_GSM} @tab GSM.
@item @pval{MX_ENCODING_GSM_EFR} @tab GSM Extended Full-Rate.
@item @pval{MX_ENCODING_GSM_HR} @tab GSM Half-Rate.
@item @pval{MX_ENCODING_LPC} @tab LPC.
@item @pval{MX_ENCODING_MPA} @tab MPA.
@item @pval{MX_ENCODING_QCELP} @tab QCELP.
@item @pval{MX_ENCODING_RED} @tab RED.
@item @pval{MX_ENCODING_S16_BE} @tab Signed 16-bit Big-Endian.
@item @pval{MX_ENCODING_S16_LE} @tab Signed 16-bit Little-Endian.
@item @pval{MX_ENCODING_S8} @tab Sign 8-bit.
@item @pval{MX_ENCODING_U16_BE} @tab Unsigned 16-bit Big-Endian.
@item @pval{MX_ENCODING_U16_LE} @tab Unsigned 16-bit Little-Endian.
@item @pval{MX_ENCODING_U8} @tab Unsigned 8-bit.
@item @pval{MX_ENCODING_VDVI} @tab DVI.
@end multitable
@item block_size
Specifies or indicates the block size associated with the multiplex.  The block size is the number of
samples that are written or read at one time.  If this value is less than the size of a STREAMS fast
buffer, @pval{FASTBUF}, then a @pval{FASTBUF} of samples will be read or written at once.
@item samples
Specifies or indicates the number of samples (from the same timeslot) in a block.
@item sample_size
Specifies or indicates the sample size in bits.  This can normally be 3, 4, 5, 7, 8, 12, 14 or 16.
@item rate
Specifies or indicates the rate of the multiplex.  This is the rate in samples per second.
@member{rate} can be one of the following values:
@multitable @columnfractions .3 .5
@item @pval{MX_RATE_VARIABLE} @tab The rate is variable.
@item @pval{MX_RATE_8000} @tab 56kbps or 64kbps.
@item @pval{MX_RATE_11025} @tab 11kHz Audio.
@item @pval{MX_RATE_16000} @tab 16kHz Audio.
@item @pval{MX_RATE_22050} @tab 22kHz Audio.
@item @pval{MX_RATE_44100} @tab 44kHz Audio.
@item @pval{MX_RATE_90000} @tab 90kHz Audio.
@item @pval{MX_RATE_184000} @tab 23B.
@item @pval{MX_RATE_192000} @tab T1 (24B).
@item @pval{MX_RATE_240000} @tab 30B.
@item @pval{MX_RATE_248000} @tab E1 (31B).
@end multitable
@item tx_channels
Specifies or indicates the number of transmit channels available.  For the MX interface, this value
is either 0 or 1.
@item rx_channels
Specifies or indicates the number of receive channels available.  For the MX interface, this value
is either 0, 1, or 2.  (The value of 2 is used for monitoring mode where two receive channels exists
and zero transmit channels.)
@item opt_flags
Specifies or indicates the options associated with the MX provider.  MX provider options are
provider specific and no generic options have yet been defined.
@end table

@node MXI Get Configuration
@subsection MXI Get Configuration
@subsubheading @pioc{MX_IOCGCONFIG}

Gets the multiplex configuration.  Upon success, the multiplex configuration is written to the memory
extent indicated by the pointer argument to the @manref{ioctl(2)} call.

@node MXI Set Configuration
@subsection MXI Set Configuration
@subsubheading @pioc{MX_IOCSCONFIG}

Set the multiplex configuration.  Upon success, the multiplex configuration is read from the memory
extent specified by the pointer argument tot he @manref{ioctl(2)} call.

@node MXI Test Configuration
@subsection MXI Test Configuration
@subsubheading @pioc{MX_IOCTCONFIG}

Test the multiplex configuration.  Upon success, the multiplex configuration is read from the memory
extent specified by the pointer argument to the @manref{ioctl(2)} call, values adjusted according to
the rules for configuration, and the resulting configuraiton written back to the memory extent
specified by the pointer argumnet to the @manref{ioctl(2)} call.  Actual configuration is not
changed.

@node MXI Commit Configuration
@subsection MXI Commit Configuration
@subsubheading @pioc{MX_IOCCCONFIG}

Confirms the multiplex configuration.  Upon success, the multiplex configuration is read from the memory
extent specified by the pointer argument to the @manref{ioctl(2)} call, values adjusted according to
the rules for configuration, the configuration applied, and then the resulting configuration written
back to the memory extent specified by the pointer argument to the @manref{ioctl(2)} call.

Normally, the argument to the @pioc{MX_IOCCCONFIG} call is the same as to an immediately preceding
@pioc{MX_IOCTCONFIG} call.

@node MXI Options
@section MXI Options

These input-output controls can used to interrogate or negotiate the options associated with a
given channel or group of channels.

@node MXI State
@section MXI State

These input-output controls can be used to interrotate or reset the state associated with a channel
or a group of channels.

State input-output controls all take an argument containing a poitner to a @type{mx_statem_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mx_statem {
    mx_ulong index;
    mx_ulong type;
    mx_ulong rate;
    mx_ulong mode;
    mx_ulong admin_state;
    mx_ulong usage_state;
    mx_ulong avail_status;
    mx_ulong ctrl_status;
} mx_statem_t;
@end verbatim
@end display

The multiplex state structure, @type{mx_statem_t}, contains the following members:

@table @member
@item index
Provides  time slot index for the channel.  For T1 and J1 spans, the time slots @samp{1} through
@samp{24} index the corresponding time slot in the span.  For E1 spans, the time slot indices
@samp{1} throught @samp{31} index the corresponding time slot in the span.  For E1 operation, TS0 is
unusable.  For E1 CAS operation (where any channel in the span is configured for CAS), TS16 is not
available to users for payload.  For V.35 and other discrete synchronous channels, this index is
@samp{1}.
@item type
Specifies or indicates whether the channel (or channels) has channel associated signalling or common
channel signalling.  This field can have one of the following values:
@table @pval
@item MX_TYPE_NONE
For non-trunk channels, no type is necessary.
@item MX_TYPE_CAS
For T1 and J1 span, channel associated signalling implies 56kbps DS0A operation for data within the
channel.
@item MX_TYPE_CCS
For E1, T1 or J1 spans, common channel signalling implies 64kbps DS0 oepration within the channel is
indicated.  For E1, CCS operation for the entire span implies that channel 17 (timeslot 16) is used
for common channel signalling or is also available for payload.  This is why it is typical on
non-CAS E1 spans to place the signalling channel in timeslot 16 (e.g.  the D-channel of a primary
rate interface).
@end table
@item rate
Specifies or indicates the bit rate of the channel in a single-rate channel, or of each channel in a
multi-rate channel, or of each channel in a full-rate channel.  Channels @samp{1} through @samp{24}
for T1 and J1 can be 56kbps or 64kbps.  Channels @samp{1} through @samp{31} for E1 are 64kbps but
can be forced into 56kbps mode.  The default is 64kbps for E1 CCS and CAS channels and T1 CCS
channels; 56kbps for T1 CAS channels.
@item mode
Specifies or indicates the channel mode.  This is bitwise OR of zero or more of the following
values:
@table @pval
@item MX_MODE_REMLOOP
The receive data in the channel is looped back to replace the transmit data for the channel.  This
may either be accomplished within the host or using the per-channel loopback capability of some chip
sets.
@item MX_MODE_LOCLOOP
The transmit data for the channel is looped back to replace the receive data for the channel.  This
may be accomplished within the host.
@item MX_MODE_TEST
The channel is marked for BERT testing.  When BERT testing for the span is enabled on a channel
basis, this channel will be included in the channels upon which the BERT test pattern is
transmitted.
@end table
Because tests are disruptive, no value can be added to this set unless the channel has a control
status of ``subject to test'' or ``reserved for test''.
@item admin_state
Specifies or indicates the administrative state of the channel.  The administrative state can be one
of the following values:
@table @pval
@item MX_ADMIN_LOCKED
The administrative state is ``locked''.  The channel is administratively prohibited from providing
service to users.
@item MX_ADMIN_UNLOCKED
The administrative state is ``unlocked''.  The channel is administratively permitted to provide
service to users.
@item MX_ADMIN_SHUTDOWN
The administrative state is ``shutting down''.  The channel will continue to provide service to
existing users but will reject new users: once there are no more users of the channel, the channel
will move to the ``locked'' state.
@end table
@item usage_state
Specifies or indicates the usage state of the channel.  The usage state can be one of the following
values:
@table @pval
@item MX_USAGE_IDLE
The channel is ``idle''.  The channel is not currently in use.
@item MX_USAGE_ACTIVE
The channel is ``active''.  The channel is in use and has sufficient operating capacity to provide
for additional users simultaneously (e.g. a half-channel is used).
@item MX_USAGE_BUSY
The channel is ``busy''.  The channel is in use and has no spare capacity (i.e. the full channs is
in use).
@end table
If partial channels are not supported, only the values ``idle'' and ``busy'' are allowed.
@item avail_status
Specifies or indicates the availabiltiy status of the channel.  The availablity status is a bitwise
OR of zero or more of the following values:
@table @pval
@item MX_AVAIL_INTEST
The channel is ``in test''.  The channel is undergoing a test procedure.  The administrative state
is ``locked'' and the operational state is ``disabled''.  This condition exists while the span is in
test in a manner disruptive to the channel, or when the channel is in loopback or test modes.
@item MX_AVAIL_FAILED
The channel has ``failed''.  The channel has an internal fault that prevents it from operating.  The
operational state is ``disabled''.  This value is present when the same value is present in the span
availability status.
@item MX_AVAIL_POWEROFF
The channel has ``power off''.  The channl requires power to be applied and is not powered on.  For
example, power management may have removed power from the device.  This value is present when the
same value is present in the span availablity status.
@item MX_AVAIL_OFFLINE
The channel is ``off line''.  The channel requires a outing operation to be performed to place it
online and make it available for use.  The operation may be manul or automatic, or both.  The
operational state is ``disabled''.  This value is present when the same value is present in the span
availability status.
@item MX_AVAIL_OFFDUTY
The channel is ``off duty''.  The channel has been made inactive by an internal control process in
accordance with a predetermined time schedule.  Under normal conditions, the control process can be
expected to reactivate the channel at some scheduled time.
@item MX_AVAIL_DEPEND
The channel has a ``dependency''.  The channel cannot operate because some other resource on which
it depends is unavailable (e.g. the span).
@item MX_AVAIL_DEGRADED
The channel is ``degraded''.  The channel is operating with degraded peformance.  This value is
present when the same value is present in the span availability status.
@item MX_AVAIL_MISSING
The channel is ``not installed''.  The channel is not present in the system or is incomplete.
@item MX_AVAIL_LOGFULL
Not used.
@end table
@item ctrl_status
Specifies or indicates the control status of the channel.  The control status is a bitwise OR of
zero or more of the following values:
@table @pval
@item MX_CTRL_CANTEST
The channel is ``subject to test''.  The channel is available to normal users but tests may be
conducted on it simultaneously at unpredicatable times, which may cause it to exhibit unusual
characteristics to users.
@item MX_CTRL_PARTLOCK
The channel is ``part of services locked''.  A manager has adminstratively locked some part of the
channel.
@item MX_CTRL_RESERVED
The channel is ``reserved for test''.  The channel is undergoing a test procedure and is unavailable
to users.
@item MX_CTRL_SUSPENDED
The channel is ``suspended''.  The channel service has been administratively suspended to users.
@end table
@end table

@subsection MXI Get State
@subsubheading @pioc{MX_IOCGSTATEM}

Requests that the state information be obtained and written to the @type{mx_statem_t} structure
pointed to by the argument to the input-output control.

@subsection MXI Reset State
@subsubheading @pioc{MX_IOCCMRESET}

Request that the state associated with the multiplex be reset.  This input-output control takes no
argument.

@node MXI Statistics
@section MXI Statistics

These input-output controls can be used to collect statistics or set staticstics collection intervals
associated with a channel or group of channels.

Statistics input-output controls all take an argument containing a pointer to a @type{mx_stats_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mx_stats {
    mx_ulong header;
    mx_ulong rx_octets;
    mx_ulong tx_octets;
    mx_ulong rx_overruns;
    mx_ulong tx_underruns;
    mx_ulong rx_buffer_overflows;
    mx_ulong tx_buffer_overflows;
    mx_ulong lead_cts_lost;
    mx_ulong lead_dcd_lost;
    mx_ulong carrier_lost;
    mx_ulong errored_seconds;
    mx_ulong severely_errored_seconds;
    mx_ulong severely_errored_framing_seconds;
    mx_ulong unavailable_seconds;
    mx_ulong controlled_slip_seconds;
    mx_ulong path_coding_violations;
    mx_ulong line_errored_seconds;
    mx_ulong bursty_errored_seconds;
    mx_ulong degraded_minutes;
    mx_ulong line_coding_violations;
} mx_stats_t;
@end verbatim
@end display

The multiplex statistics structure, @type{mx_stats_t}, contains the following members:

@table @member
@item header
Specifies or indicates the statistics period header associated with the multiplex.  This header is a
statistics collection period in milliseconds.
@item rx_octets
Indicates the number of octets received during the collection interval.  This does not include
octets for which there was a receiver overrun condition.
@item tx_octets
Indicates the number of octets transmitted during the collection interval.  This does not include
octets for which there was a transmitter underrun condition.
@item rx_overruns
Indicates the number of receive overrun conditions that occurred during the collection interval.
When the overrun condition spans interval boundaries, the condition is counted in the interval
during which the overrun condition began.
@item tx_underruns
Indicates the number of transmitter underrun conditions that occurred during the collection
interval.  When the underrun condition spans interval boundaries, the condition is counted in the
interval during which the underrun condition began.
@item rx_buffer_overflows
Indicates the number of receive buffer overflows that occured during the collection interval.
Receive buffer overflow conditions occur when the driver is unable to allocate a message block or
buffer for received bits, resulting in the discard of the received bits.
@item tx_buffer_overflows
Indicates the number of transmit buffer overflows that occured during the collection interval.
Transmit buffer overflow conditions occur when the driver is unable to allocate a message block or
buffer for transmit bits, resulting in the discard of the bits to be transmitted.
@item lead_cts_lost
Indicates the number of Clear To Send leads lost.  That is, the number of times that the Clear To
Send lead transitioned from asserted to deasserted.
@item lead_dcd_lost
Indicates the number of Data Carrier Detect leads lost.  That is, the number of times that the Data
Carrier Detect lead trasitioned from asserted to deasserted.
@item carrier_lost
Indicates the number of Carrier lost conditions.  That is, the number of times that an alarm or lead
indicated that the facility carrier was lost.
@item errored_seconds
The number of errored seconds (ESs) in the current interval.  An errored second has one or more path
code violations, one or more out of frame defects, one or more controlled slip events, or a detected
alarm indication signal (AIS) defect.
@item severely_errored_seconds
The number of severely errored seconds (SESs) in the current interval.
@item severely_errored_framing_seconds
The number of severely errored framing seconds (SEFSs) in the current interval.  A severely errored
framing second has one or more out of frame defects or a detected AIS defect.
@item unavailable_seconds
The number of unavailable seconds in the current interval.
@item controlled_slip_seconds
The number of controlled slip seconds (CSSs) in the current interval.  A controlled slip second has
one or more controlled slip events.
@item path_coding_violations
The number of path coding violations (PCVs) in the current interval.  A path coding violation is a
fram synchronization bit error in the D4  and E1 no-CRC4 formats, or a CRC or frame synchronization
bit error in the ESF and E1 CRC4 formats.
@item line_errored_seconds
The number of line errored seconds (LESs) in the current interval.  A line errored second is a
second in which one or more line code violation error events are detected.
@item bursty_errored_seconds
The number of bursty errroed seconds (BESs) in the current interval.  A bursty errored second has 2
to 319 path coding violation error events, no severely errored frame defects, and no detected
inocming AIS defects.
@item degraded_minutes
The number of degraded minutes (DMs) in the current interval.
@item line_coding_violations
The number of line coding violations (LCVs) in the current interval.  An LCV is the occurence of a
bipolar violation (BPV) or excessive zeroes (EXZ) error event.
@end table

@node MXI Events
@section MXI Events

These input-output controls can be used to specify the events that will be reported by a channel or
channels.

Notification input-output controls all take an argument containing a pointer to a @type{mx_notify_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mx_notify {
    mx_ulong events;
} mx_notify_t;
@end verbatim
@end display

The multiplex events structure, @type{mx_notify_t}, contains the following members:

@table @member
@item events
Specifies or indicates a bitwise OR of the events associated wtih the multiplex.  When a bit is set,
it specifies that event reporting for the specific event is enabled for the multiplex; when clear,
that the event reporting is disabled.
@end table

@subsection MXI Get Notify
@subsubheading @pioc{MX_IOCGNOTIFY}

Requests that the events associated with the multiplex be obtained and written to the
@type{mx_notify_t} structure pointed to by the argument to the input-output control.

@subsection MXI Set Notify
@subsubheading @pioc{MX_IOCSNOTIFY}

Requests that the events associated with the multiplex be read from the @type{mx_notify_t} structure
pointed to by the argument to the input-output control and set for the multiplex.  Each bit set in the
@member{events} member specifies an event for which notification is to be set.

@subsection MXI Clear Notify
@subsubheading @pioc{MX_IOCCNOTIFY}

Reqeust that the events associated with the multiplex be read from the @type{mx_notify_t} structure
pointed to by the argument to the input-output control and cleared for the multiplex.  Each bit set in
the @member{events} member specifies an event for which notification is to be cleared.

@node MXI Commands
@section MXI Commands

These input-output controls can be used to manage a channel or channels.

Management input-output controls all take an argument containing a pointer to a @type{mx_mgmt_t}
structure, formatted as follows:

@display
@verbatim
typedef struct mx_mgmt {
    mx_ulong cmd;
} mx_mgmt_t;
@end verbatim
@end display

The multiplex management structure, @type{mx_mgmt_t}, contains the following members:

@table @member
@item cmd
Specifies the management command to be performed by the MXS provider.
This member can have one of the following values:
@table @pval
@item MX_CMD_REMLOOP
Place the multiplex in remote loopback.  The administrative state of
the multiplex must be ``locked'' for this command to be successfull.  Once complete, the control
status of the multiplex will contain ``reserved for test'' and the availability status of the
multiplex
will contain ``in test''.
@item MX_CMD_LOCLOOP
Place the multiplex in local loopback.  The administrative state of
the multiplex must be ``locked'' for this command to be successfull.  Once complete, the control
status of the multiplex will contain ``reserved for test'' and the availabiltiy status of the
multiplex
will contain ``in test''.
@item MX_CMD_FORTEST
Reserve the multiplex for BERT testing.  The administrative state of
the multiplex must be ``locked'' for this command to be successful.  Once complete, the control status
of the multiplex will contain ``reserved for test'' and the availability status of the multiplex will
contain ``in test'' while BERT testing is actively being performed.
@item MX_CMD_LOCK
Place the multiplex in the ``locked'' administrative state.  If the
multiplex is in the ``unlocked'' or ``shutting down'' states and the usage state is ``busy'', this
will result in the removal from service of the multiplex while it is in use.
@item MX_CMD_UNLOCK
Place the multiplex in the ``unlocked'' administrative state.  This
makes the multiplex adminstratively available for use.
@item MX_CMD_SHUTDOWN
Place the multiplex in the ``shutting down'' administrative state.
If the multiplex has a usage state of ``idle'' the multiplex will be placed immediately into the
``locked'' administrative state.  If the usage state is ``busy'', then the administrative state will
be set to ``shutting down'' and the driver will wait until the multiplex is released before it is
placed in the ``locked'' administrative state.
@end table
@end table

@subsection MXI Command
@subsubheading @pioc{MX_IOCCMGMT}

Request that the management command be read from the @type{mx_mgmt_t} structure pointed to by the
argument to the input-output control and acted upon for the multiplex.

@node MXI Management
@chapter MXI Management

@ignore
@node Addendum for ITU-T Q.703 Conformance
@unnumbered Addendum for ITU-T Q.703 Conformance

@node Addendum for ANSI T1.111.3 Conformance
@unnumbered Addendum for ANSI T1.111.3 Conformance

@node Addendum for ETSI Conformance
@unnumbered Addendum for ETSI Conformance

@node Mapping of SDLI Primitives to ITU-T Q.703
@appendix Mapping of SDLI Primitives to ITU-T Q.703

@node Mapping of SDLI Primitives to ANSI T1.111.3
@appendix Mapping of SDLI Primitives to ANSI T1.111.3

@node State/Event Tables
@appendix State/Event Tables

@node Primitive Precedence Tables
@appendix Primitive Precedence Tables
@end ignore

@node MXI Header Files
@appendix MXI Header Files

@node MXI Header File Listing
@section MXI Header File Listing

@noindent
@smallformat
@verbatiminclude mxi.h
@end smallformat

@node MXI Input-Output Controls Header File Listing
@section MXI Input-Output Controls Header File Listing

@noindent
@smallformat
@verbatiminclude mxi_ioctl.h
@end smallformat

@node MXI Drivers and Modules
@appendix MXI Drivers and Modules

There are a number of standard drivers and modules provided by the @cite{OpenSS7 Project} the
provide capabilities uilizing the Multiplex Interface.

@menu
* MXI Drivers::		MXI Modules provided by the OpenSS7 Project.
* MXI Modules::		MXI Drivers provided by the OpenSS7 Project.
@end menu

@node MXI Drivers
@section MXI Drivers

Drivers that provide the MXI interace fall into two categories:

@subsection MXI Pseudo-device Drivers

Pseudo-device drivers that accept or provide the MXI interface for the purpose of providing or
controlling access the multiplexed facilities available on a system.

@subsubsection Multiplexing Driver---@code{mx}

The @file{mx} driver is a pseudo-device multiplexing driver that provides simple multiplexing
services between MXI Streams at the lower service interface to MXI Streams at the upper service
interface.
This multiplexing driver is a simplified form of the @file{matrix} or @file{mxmux} drivers.

@subsubsection Multiplexing Driver---@code{mxmux}

The @file{mxmux} driver is a pseudo-device multiplexing driver that provides simple multiplexing
services between MXI Streams at the upper service interface and MXI Streams at the lower service
interface.  It performs interconnection of MXS user Streams to spans, but does not perform switching
between lower service interfaces.
This multiplexing driver is a simplified form of the @file{matrix} driver and super-sets the
functionality of the @file{mx} driver.

@subsubsection Switching Matrix Multiplexing Driver---@code{matrix}

The @file{matrix} driver is a pseudo-device multiplexing driver that provides complete switching
matrix and multiplexing services between CHI or MXI Streams at the upper service interface and CHI
or MXI Streams at the lower service interface.  It performs forward and inverse multiplexing of
channels to spans, and performs pseudo-digital cross-connect and dynamic switching of single-,
multi- and full-rate channels within the switching matrix.  This driver super-sets the functionality
of the @file{chmux} and @file{mxmux} drivers.

@subsection MXI Device Drivers

Real device drivers that provide the MXI interface for the purpose of accessing multiplexed channels
available on a hardware device (e.g. a T1 interface card driver).  The MXI interface provides a full
abstraction of the underlying device driver.  The MXI interface is one of the best ways of
developing a device driver in support of a multiplexed medium where discrete channels multiplexed
into the medium share common timing and syncrhonization.  The hardware example is T1, J1 or E1 spans
(or even channelized DS3, E3, or SDH VTs).  The software example is RTP, PWE2E, G

@subsubsection Device Driver---@code{v401p}

The @manref{v401p(4)} driver is a real device driver that provides access to 4 T1, J1 or E1
interfaces.  It is used primarily by the @cite{OpenSS7 Project} as a G.703/G.704 interface for SS7,
BSC, SDLC, HDLC, X.21, or voice.

@page
@node MXI Modules
@section MXI Modules

@cite{STREAMS} pushable modules are an excellent way of adapting a MXS user Stream that conforms to
the general concept of a communications multiplex into a complex communications protocol.  They are
also excellent for providing media conversion.
For example, it is possible to push a conversion module onto a MXS user Stream correspondin to a
mu-law compressed voice channel and convert the media stream to an A-law compressed voice channel.

@subsection Modules that convert MXI

The modules (described in the subsections that follow) convert between a MXI interface at the lower
service boundary and a MXI interface at the upper service boundary.  Conversion is performed on the
media stream rather than between service interfaces.

@subsubsection Compression Conversion---@code{mx-conv}

The @file{mx-conv} module converts one MXI interface to another MXI interface, performing conversion
on the media stream in the process.  The module is capable of converting between 14-bit signed or
unsigned linear, G.711 A-law compressed PCM and G.711 mu-law compressed PCM.

@subsection Modules that convert from MXI

The modules (described in the subsections that follow) convert between a MXI interface at the lower
service boundary and another interface at the upper service boundary.  Conversion is performed
between the service interfaces and might or might not include conversion of the bit stream.

@subsection Modules that convert to MXI

The modules (described in the subsections that follow) conver between another interface at the lower
service boundary and the MXI interface at the upper service boundary.  Conversion is performed
between the service interfaces and might or might not include conversion of the bit stream.

@subsubsection Real-Time Protocol Module---@code{rtp}

@node MXI Applications
@appendix MXI Applications

The multiplex interface is a rather important lowest layer component of a number of @cite{OpenSS7
Project} protocol stacks.

@menu
* MXI in Switch Matrix::
* MXI in SS7 Stack::
* MXI in ISDN Stack::
* MXI in X.25 Stack::
* MXI in Media Gateway::
@end menu

@node MXI in Switch Matrix
@section MXI in Switch Matrix

As illustrated in @figref{B-5}, the MXI interface provides support for access to the @cite{OpenSS7}
soft switching matrix.@footnote{A interesting observation is that in @figref{B-5}, any of the
channels that are used for SS7 signalling links, X.25 or OSI links, Frame Relay links or ISDN
D-Channel links, can themselves be ISDN B-Channels, E-Channels, H-Channels, or ISUP single-rate or
multi-rate IMTs, or even Frame Relay PVCs.}

@figuresized{mxib5,B-5,Switch Matrix,5.75in}

The MXI interface is responsible for providing access to communications channels (single-rate,
multi-rate and full-rate) necessary for implementing the synchronous communications channels
necessaary for implementing data communications links.  Use of the @cite{OpenSS7} software switch
matrix at the lowest level, as illustrated in @figref{B-5}, provides a mechanism whereby any
synchronous communications channel available to the host can be used as a data communications link,
or directly as a voice (or other media) channel.

The switching matrix supports syncrhonous channels using the MXI interface that are one of:
single-rate channels, multi-rate channels (statistically multiplexed fractional spans), or full-rate
channels (statistically multiplexed full spans).  It provides a central point for management of
facilities and switching within an @cite{OpenSS7} host and provides for SNMP configuration,
monitoring, operational measurements, alarms, events, maintenance access, and other OAM&P functions.

Note also that the MXI interface has the capability of passing synchronous modem lead information to
applications as well as Circuit Associated Signalling (A and B bit) and group carrier alarms (Blue,
Yellow, Red) for those applications that require them.@footnote{Note that detection of local alarm
conditions on carrier facilities is normally required for CAS, ISDN and SS7 ISUP applications where
intermediate digital multiplex equipment (i.e. DCCS) can cause distrupt the transparent passing of
carrier alarm information between endpoints.}

@node MXI in Zaptel Driver
@section MXI in Zaptel Driver

@node MXI in Y.1453 TDM-IP Module
@section MXI in Y.1453 TDM-IP Module

This is a ITU-T Recommendation Y.1453 TDM-IP module.  It pushes over a UDP Stream that provides
connectivity to the peer TDM-IP system.  The upper boundary service interface is the MXI interface.
The lower boundary service interface is the UDP-TPI interface.

In general, the UDP Stream may be opened, options configured, bound to a local IP address and port
number, and connected to a remote IP address and port number.  This module can then be pushed.
Pushing the module will flush the Stream and any data messages received on the Stream will be
discarded until the Stream is configured, enabled and connected.

Once the module is pushed, the MXI Stream can be linked beneath the MATRIX multiplexing driver and
the channels available and the multiplex facility will be made available to the switching matrix.

@node MXI in IAX Module
@section MXI in IAX Module

This is an IAX module.  It pushes over a UDP Stream that provides connectivity to the peer IAX
system.  The upper boundary service interface is the MXI interface.  The lower boundary service
interface is the UDP-TPI interface.

In general, the UDP Stream may be opened, options configured, bound to a local IP address and port
number, and connected to a remote IP address and port number.  This module can then be pushed.
Pushing the module will flush the Stream and any data messages received on the Stream will be
discarded until the Stream is configured, enabled and connected.

Once the module is pushed, the MXI Stream can be linked beneath the MATRIX multiplexing driver and
the channels available and the multiplex facility will be made available to the switching matrix.

@node MXI in SS7 Stack
@section MXI in SS7 Stack

@figref{B-1} illustrates the use of the MXI interface specification in the formation of the SS7
(Signalling System No. 7) protocol stack.

The MXI interface is responsible for providing access to communications channels necessary for
implementing signalling data link, signalling terminals and signalling links in accordance with
Q.702 and Q.703 as well as similar national standards.

Use of the @cite{OpenSS7} softswitch matrix at the lowest level, as illustrated in @figref{B-1},
provides a mechanism whereby any communications channel available to the host can be used as an SS7
link.

Before @cite{Linux Fast-STREAMS}, the @cite{OpenSS7 Project} was using the now deprecated
@cite{LiS}.  As a result of @cite{LiS}' poor performance (and the relatively powerless CPUs at the
time), it was not possible to break the SS7 stack at lower levels.  Therefore, drivers such as the
@manref{x400p-sl(4)} driver implemented the SLI (Signalling Link Interface) directly.  The major
difficulties experienced with such an integrated driver are as follows:

@itemize @minus
@item Because the driver is so closely integrated, it is difficult to use the driver for anything
other than SS7 signalling.
@item The driver becomes too specific to SS7.
@item It becomes difficult to use the devices under this driver approach for voice and switching.
@item It becomes difficult to share the device with other applications.
@item The SDLI interface does not support fractional (E1/T1) spans.
@end itemize

With the advent of the high-performance @cite{Linux Fast-STREAMS} as well as extremely powerful COTS
processors, it is easily possible to separate the protocol levels.@footnote{As it turns out,
@cite{Linux Fast-STREAMS} has such high performance that higher levels of performance can be
acheived by splitting functions into narrowly defined modules that can use STREAMS flow control to
keep code path scortching hot.}  Thus, the drivers can provide the generic Multiplex Interface (MXI)
that provides direct access to multiplexed spans, or the generic Multiplex Interface (MXI) to provide
direct access to non-multiplexed discrete channel devices, and these generic driver interfaces can
be linked under the switching matrix multiplexing driver so that a single upper MXI user Stream can
provide access to any channel, span, or fractional span within the entire host.

@figuresized{mxib1,B-1,SS7 Protocol Stack,5.75in}

In previous arrangements, the MTP manager opened a Stream on the X400P-SL driver and attached it to
a PPA corresponding to either a single-rate channel (Q.703) or a full-rate span (Q.703 Annex B) and
linked it beneath the MTP multiplexing driver.  This management is not disrupted by the shift to the
Software Switching Matrix.  A minor device number on the software switching matrix is defined with
an autopush specification for the @file{sdl}, @file{sdt} and @file{sl} modules.  Opening this minor
device number, as before, results in an unattached SL Stream.  The MTP manager attaches the Stream
as before and links it under the MTP multiplexing driver.  This is illustrated in @figref{B-1}.

@node MXI in ISDN Stack
@section MXI in ISDN Stack

@figuresized{mxib2,B-2,ISDN Protocol Stack,5.75in}

@figref{B-2} illustrates the use of the MXI interface specification in the formation of the ISDN
(Integrated Services Digital Network) protocol stack.  The MXI interface provides two primary
categories of access necessary for the ISDN protocol stack:
@itemize @minus
@item Access to multiplexed D channels on the physical medium (either BRI or PRI) for use with HDLC
and LAPB protocol modules to form the ISDN signalling link.
@item Access to multiplexed B channels on the physical medium (either BPI or PRI) for use with the
software switchin matrix @manref{matrix(4)} of media gateway @manref{mg(4)} components.  The MXI is
also able to provide access to the B-channel provided by CAPI devices.
@end itemize

The MXI interface is responsible for providing switched and permanent access to communications
channels necessary for implementing D-channels (HDLC and LAPD) and B-channels (direct access).

Use of the @cite{OpenSS7} softswitch matrix at the lowest level, as illustrated in @figref{B-2},
provides a mechanism whereby any available communications channel available to the host can be used
as a D-channel, and any communications channel available to the host can be used as a B-channel.

@node MXI in X.25 Stack
@section MXI in X.25 Stack

@figuresized{mxib3,B-3,X.25 Protocol Stack,5.75in}

@figref{B-3} illustrates the use of the MXI interface specification in the ofrmation of the X.25
protocol stack.  The MXI interface provides several primary categories of access necessary for the
X.25 protocol stack:
@itemize @minus
@item Access to asyncrhonous modems for dial access to X.25 public or private data networks.
@item Access to syncrhonous modems for permanent connections to X.25 public or private data networks.
@item Access to ISDN B-channels for switched connections to X.25 public or private data networks.
@item Access to channelized, fractional and unchannelized carrier facilities.
@end itemize

The MXI interface is responsible for providing the full and fractional carrier access necessary to
perform HDLC and LAPB protocol functions for X.25 and OSI.

Use of the @cite{OpenSS7} softswitch matrix at the lowest level, as illustrated in @figref{B-3},
provides a mechanism whereby any available communications channel available to the host (including
ISDN B-channels) can be used as a LAPB or ISO data link.

@node MXI in Frame Relay Stack
@section MXI in Frame Relay Stack

As illustrated in @figref{B-3}, the MXI interface provides support for access to
transmission facilities in support of the @cite{OpenSS7} Frame Relay Stack.  The MXI interface is
responsible for providing the full and fractional carrier access necessary to provide HDLC and LAPF
protocol functions for Frame Relay.

@figuresized{mxib4,B-4,Frame Relay Protocol Stack,5.75in}

Use of the @cite{OpenSS7} softswitch matrix at the lowest level, as illustrated in @figref{B-4},
provides a mechanism whereby any available communications channel available to the host (including
ISDN B-channels) can be used as a Frame Relay data link.

@node MXI in Media Gateway
@section MXI in Media Gateway

@figuresized{mxib6,B-6,Media Gateway,5.75in}

@node MXI Utilities
@appendix MXI Utilities

@node MXI File Formats
@appendix MXI File Formats

@node MXI Compatibility and Porting
@appendix MXI Compatibility and Porting

@node Licenses
@unnumbered Licenses

@menu
* GNU Affero General Public License::
* GNU Free Documentation License::
@end menu

@include texi/agpl3.texi
@page
@include texi/fdl13.texi

@node Glossary
@unnumbered Glossary

@table @emph

@item Signalling Data Link Service Data Unit

A grouping of SDL user data whose boundaries are preserved from one end of the signalling data link
connection to the other.

@item Data transfer

The phase in connection and connectionless modes that supports the transfer of data between to
signalling data link users.

@item SDL provider

The signalling data link layer protocol that provides the services of the signalling data link
interface.

@item SDL user

The user-level application or user-level or kernel-level protocol that accesses the services of the
signalling data link layer.

@item Local management

The phase in connection and connectionless modes in which a SDL user initializes a Stream and
attaches a PPA address to the Stream.  Primitives in this phase generate local operations only.

@item PPA

The point at which a system attaches itself to a physical communications medium.

@item PPA identifier

An identifier of a particular physical medium over which communication transpires.
@end table

@node Acronyms
@unnumbered Acronyms

@multitable {MXS Provider}{International Telecommunication Union - Telecom Sector}
@item AERM @tab Alignment Error Rate Monitor
@item CC @tab Congestion Control
@item DAEDR @tab Delimitation Alignment and Error Detection (Receive)
@item DAEDT @tab Delimitation Alignment and Error Detection (Transmit)
@item EIM @tab Errored Interval Monitor
@item IAC @tab Initial Alignment Control
@item ITU-T @tab International Telecommunications Union - Telecom Sector
@item LMS Provider @tab A provider of Local Management Services
@item LMS @tab Local Management Service
@item LMS User @tab A user of Local Management Services
@item LM @tab Local Management
@item LSC @tab Link State Control
@item PPA @tab Physical Point of Attachment
@item RC @tab Reception Control
@item SDLI @tab Signalling Data Link Interface
@item SDL SDU @tab Signalling Data Link Service Data Unit
@item SDLS @tab Signalling Data Link Service
@item SDL @tab Signalling Data Link
@item SDTI @tab Signalling Data Terminal Interface
@item SDTS @tab Signalling Data Terminal Service
@item SDT @tab Signalling Data Terminal
@item SLI @tab Signalling Link Interface
@item SLS @tab Signalling Link Service
@item SL @tab Signalling Link
@item SL @tab Signalling Link
@item SS7 @tab Signalling System No. 7
@item TXC @tab Transmission Control
@end multitable

@node References
@unnumbered References

@multitable {000}{Geoffrey Gerrien, ``CDI - Application Program Interface Guide,'' Gcom, Inc., March 1999.}
@item [1] @anchor{Q.700} @tab @uref{http://www.itu.int/rec/T-REC-Q.700/,ITU-T Recommendation Q.700},
@cite{Introduction to CCITT Signalling System No. 7},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [2] @anchor{Q.701} @tab @uref{http://www.itu.int/rec/T-REC-Q.701/,ITU-T Recommendation Q.701},
@cite{Functional Description of the Message Transfer Part (MTP) of Signalling System No. 7},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [3] @anchor{Q.702} @tab @uref{http://www.itu.int/rec/T-REC-Q.702/,ITU-T Recommendation Q.702},
@cite{Signalling System No. 7---Signalling Data Link},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [4] @anchor{Q.703} @tab @uref{http://www.itu.int/rec/T-REC-Q.703/,ITU-T Recommendation Q.703},
@cite{Signalling System No. 7---Signalling Link},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [5] @anchor{Q.704} @tab @uref{http://www.itu.int/rec/T-REC-Q.704/,ITU-T Recommendation Q.704},
@cite{Message Transfer Part---Signalling Network Functions and Messages},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@item [6] @anchor{CDIAPI} @tab
Geoffrey Gerrietts; Dave Grothe, Mikel Matthews, Dave Healy,
@cite{CDI---Application Program Interface Guide},
March 1999,
(Savoy, IL),
GCOM, Inc.
@item [7] @anchor{Q.771} @tab @uref{http://www.itu.int/rec/T-REC-Q.771/,ITU-T Recommendation Q.771},
@cite{Signalling System No. 7---Functional Description of Transaction Capabilities},
March 1993, (Geneva), ITU,
@uref{http://www.itu.int/,,ITU-T Telecommunication Standardization Sector of ITU}, 
(Previously ``CCITT Recommendation'').
@end multitable

@ifnotplaintext
@c skip indexes for plain text (regex search works better)
@c @iftex
@c @node Indices
@c @unnumbered Indices
@c @end iftex

@c @ifnottex
@c @c concatenate indices for html and info
@node Index
@unnumbered Index
@printindex cp
@c @end ifnottex

@c @iftex
@c @menu
@c * Concept Index::
@c * Protocol State Index::
@c * Primitive Index::
@c * Primitive Structure and Type Index::
@c * Primitive Structure Field Index::
@c * Primitive Values Index::
@c * Primitive Error Values Index::
@c * Input-Output Control Index::
@c * Manual Page Index::
@c @end menu
@c 
@c @node Concept Index
@c @section Concept Index
@c @printindex cp
@c 
@c @page
@c @node Protocol State Index
@c @section Protocol State Index
@c @printindex st
@c 
@c @page
@c @node Primitive Index
@c @section Primitive Index
@c @printindex pr
@c 
@c @page
@c @node Primitive Structure and Type Index
@c @section Primitive Structure and Type Index
@c @printindex tp
@c 
@c @page
@c @node Primitive Structure Field Index
@c @section Primitive Structure Field Index
@c @printindex vr
@c 
@c @page
@c @node Primitive Values Index
@c @section Primitive Values Index
@c @printindex pv
@c 
@c @page
@c @node Primitive Error Values Index
@c @section Primitive Error Values Index
@c @printindex pe
@c 
@c @page
@c @node Input-Output Control Index
@c @section Input-Output Control Index
@c @printindex ct
@c 
@c @page
@c @node Manual Page Index
@c @section Manual Page Index
@c @printindex mp
@c @end iftex
@end ifnotplaintext

@page
@shortcontents
@page
@contents
@bye

