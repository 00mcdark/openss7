/*****************************************************************************

 @(#) $Id: x400pMIB.h,v 0.9.2.7 2009-01-02 15:04:19 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacom Limited <http://www.monavacom.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-01-02 15:04:19 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: x400pMIB.h,v $
 Revision 0.9.2.7  2009-01-02 15:04:19  brian
 - updated agents

 Revision 0.9.2.6  2008-12-31 16:04:51  brian
 - updated mibs

 Revision 0.9.2.5  2008-12-24 13:40:57  brian
 - updated mibs

 Revision 0.9.2.4  2008-07-31 17:40:17  brian
 - SNMP updates

 Revision 0.9.2.3  2008-04-28 23:39:59  brian
 - updated headers for release

 Revision 0.9.2.2  2008/01/14 19:55:03  brian
 - updated stub files

 Revision 0.9.2.1  2008/01/01 13:59:38  brian
 - added new mibs

 *****************************************************************************/

#ifndef __LOCAL_X400PMIB_H__
#define __LOCAL_X400PMIB_H__

#ident "@(#) $RCSfile: x400pMIB.h,v $ $Name:  $($Revision: 0.9.2.7 $) Copyright (c) 2008-2009 Monavacom Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct x400pMIB_data {
	uint x400pMIB_request;
	ulong x400pCardNextIndex;
};
struct x400pSyncTable_data {
	uint x400pSyncTable_request;
	uint x400pSyncTable_refs;
	long x400pSyncGroup;
	long x400pSyncIndex;
	uint8_t *x400pSyncSpanId;
	size_t x400pSyncSpanIdLen;
	long x400pSyncRowStatus;
};
struct x400pCardTable_data {
	uint x400pCardTable_request;
	uint x400pCardTable_refs;
	long x400pCardIndex;
	long x400pCardType;
	long x400pCardIdentifier;
	uint8_t *x400pCardRevision;
	size_t x400pCardRevisionLen;
	long x400pCardChipType;
	uint8_t *x400pCardChipRevision;
	size_t x400pCardChipRevisionLen;
	long x400pCardPciBus;
	long x400pCardPciSlot;
	long x400pCardPciIrq;
	long x400pCardSpanType;
	uint8_t *x400pCardMode;
	size_t x400pCardModeLen;
	long x400pCardSyncMaster;
	long x400pCardSyncSource;
	long x400pCardSyncGroup;
	long x400pCardAdministrativeState;
	long x400pCardOperationalState;
	long x400pCardUsageState;
	uint8_t *x400pCardAlarmStatus;
	size_t x400pCardAlarmStatusLen;
	uint8_t *x400pCardProceduralStatus;
	size_t x400pCardProceduralStatusLen;
	uint8_t *x400pCardAvailabilityStatus;
	size_t x400pCardAvailabilityStatusLen;
	uint8_t *x400pCardControlStatus;
	size_t x400pCardControlStatusLen;
	long x400pCardUnknownStatus;
	long x400pCardStandbyStatus;
	uint8_t *x400pCardSyncSpanId;
	size_t x400pCardSyncSpanIdLen;
	long x400pCardSyncTransitions;
	uint8_t *x400pCardName;
	size_t x400pCardNameLen;
	long x400pCardStatus;
};

/* storage declarations */
extern struct x400pMIB_data *x400pMIBStorage;
extern struct header_complex_index *x400pSyncTableStorage;
extern struct header_complex_index *x400pCardTableStorage;

/* enum definitions from the covered mib sections */

#define X400PCARDTYPE_NONE                       0
#define X400PCARDTYPE_PLX9030                    1
#define X400PCARDTYPE_PLXDEVBRD                  2
#define X400PCARDTYPE_X400P                      3
#define X400PCARDTYPE_E400P                      4
#define X400PCARDTYPE_T400P                      5
#define X400PCARDTYPE_X400PSS7                   6
#define X400PCARDTYPE_E400PSS7                   7
#define X400PCARDTYPE_T400PSS7                   8
#define X400PCARDTYPE_V400P                      9
#define X400PCARDTYPE_V400PE                     10
#define X400PCARDTYPE_V400PT                     11
#define X400PCARDTYPE_V401PE                     12
#define X400PCARDTYPE_V401PT                     13

#define X400PCARDCHIPTYPE_NONE                   0
#define X400PCARDCHIPTYPE_DS2152                 1
#define X400PCARDCHIPTYPE_DS21352                2
#define X400PCARDCHIPTYPE_DS21552                3
#define X400PCARDCHIPTYPE_DS2154                 4
#define X400PCARDCHIPTYPE_DS21354                5
#define X400PCARDCHIPTYPE_DS21554                6
#define X400PCARDCHIPTYPE_DS2155                 7
#define X400PCARDCHIPTYPE_DS2156                 8

#define X400PCARDSPANTYPE_NONE                   1
#define X400PCARDSPANTYPE_T1                     2
#define X400PCARDSPANTYPE_E1                     3
#define X400PCARDSPANTYPE_J1                     4

#define X400PCARDMODE_REMOTELOOPBACK             0
#define X400PCARDMODE_LOCALLOOPBACK              1

#define X400PCARDSYNCMASTER_SLAVE                0
#define X400PCARDSYNCMASTER_MASTER               1

#define X400PCARDSYNCSOURCE_SYNCSELF             0
#define X400PCARDSYNCSOURCE_SYNC1                1
#define X400PCARDSYNCSOURCE_SYNC2                2
#define X400PCARDSYNCSOURCE_SYNC3                3
#define X400PCARDSYNCSOURCE_SYNC4                4
#define X400PCARDSYNCSOURCE_SYNCEXTERN           5
#define X400PCARDSYNCSOURCE_SYNCAUTO             6

#define X400PCARDADMINISTRATIVESTATE_LOCKED      0
#define X400PCARDADMINISTRATIVESTATE_UNLOCKED    1
#define X400PCARDADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define X400PCARDOPERATIONALSTATE_DISABLED       0
#define X400PCARDOPERATIONALSTATE_ENABLED        1

#define X400PCARDUSAGESTATE_IDLE                 0
#define X400PCARDUSAGESTATE_ACTIVE               1
#define X400PCARDUSAGESTATE_BUSY                 2

#define X400PCARDALARMSTATUS_UNDERREPAIR         0
#define X400PCARDALARMSTATUS_CRITICAL            1
#define X400PCARDALARMSTATUS_MAJOR               2
#define X400PCARDALARMSTATUS_MINOR               3
#define X400PCARDALARMSTATUS_ALARMOUTSTANDING    4

#define X400PCARDPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define X400PCARDPROCEDURALSTATUS_NOTINITIALIZED 1
#define X400PCARDPROCEDURALSTATUS_INITIALIZING   2
#define X400PCARDPROCEDURALSTATUS_REPORTING      3
#define X400PCARDPROCEDURALSTATUS_TERMINATING    4

#define X400PCARDAVAILABILITYSTATUS_INTEST       0
#define X400PCARDAVAILABILITYSTATUS_FAILED       1
#define X400PCARDAVAILABILITYSTATUS_POWEROFF     2
#define X400PCARDAVAILABILITYSTATUS_OFFLINE      3
#define X400PCARDAVAILABILITYSTATUS_OFFDUTY      4
#define X400PCARDAVAILABILITYSTATUS_DEPENDENCY   5
#define X400PCARDAVAILABILITYSTATUS_DEGRADED     6
#define X400PCARDAVAILABILITYSTATUS_NOTINSTALLED 7
#define X400PCARDAVAILABILITYSTATUS_LOGFULL      8

#define X400PCARDCONTROLSTATUS_SUBJECTTOTEST     0
#define X400PCARDCONTROLSTATUS_PARTOFSERVICESLOCKED 1
#define X400PCARDCONTROLSTATUS_RESERVEDFORTEST   2
#define X400PCARDCONTROLSTATUS_SUSPENDED         3

#define X400PCARDUNKNOWNSTATUS_FALSE             0
#define X400PCARDUNKNOWNSTATUS_TRUE              1

#define X400PCARDSTANDBYSTATUS_HOTSTANDBY        0
#define X400PCARDSTANDBYSTATUS_COLDSTANDBY       1
#define X400PCARDSTANDBYSTATUS_PROVIDINGSERVICE  2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */
extern oid x400pCardTypePLX9030_oid[12];
extern oid x400pCardTypePLXDevelopmentBoard_oid[12];
extern oid x400pCardTypeX400P_oid[12];
extern oid x400pCardTypeE400P_oid[13];
extern oid x400pCardTypeT400P_oid[13];
extern oid x400pCardTypeX400P_SS7_oid[12];
extern oid x400pCardTypeE400P_SS7_oid[13];
extern oid x400pCardTypeT400P_SS7_oid[13];
extern oid x400PCardTypeV400P_oid[12];
extern oid x400PCardTypeV400PE_oid[13];
extern oid x400PCardTypeV400PT_oid[13];
extern oid x400PCardTypeV401PE_oid[12];
extern oid x400PCardTypeV401PT_oid[12];
extern oid x400pBasicCompliance_oid[11];

/* function prototypes */
void init_x400pMIB(void);
void deinit_x400pMIB(void);
int term_x400pMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_x400pMIB;
void parse_x400pMIB(const char *, char *);
SNMPCallback store_x400pMIB;
void refresh_x400pMIB(void);
FindVarMethod var_x400pSyncTable;
struct x400pSyncTable_data *x400pSyncTable_create(void);
int x400pSyncTable_destroy(struct x400pSyncTable_data **);
int x400pSyncTable_add(struct x400pSyncTable_data *);
int x400pSyncTable_del(struct x400pSyncTable_data *);
void parse_x400pSyncTable(const char *, char *);
SNMPCallback store_x400pSyncTable;
void refresh_x400pSyncTable(void);
FindVarMethod var_x400pCardTable;
struct x400pCardTable_data *x400pCardTable_create(void);
int x400pCardTable_destroy(struct x400pCardTable_data **);
int x400pCardTable_add(struct x400pCardTable_data *);
int x400pCardTable_del(struct x400pCardTable_data *);
void parse_x400pCardTable(const char *, char *);
SNMPCallback store_x400pCardTable;
void refresh_x400pCardTable(void);

WriteMethod write_x400pSyncSpanId;
WriteMethod write_x400pSyncRowStatus;
WriteMethod write_x400pCardSpanType;
WriteMethod write_x400pCardMode;
WriteMethod write_x400pCardSyncMaster;
WriteMethod write_x400pCardSyncSource;
WriteMethod write_x400pCardSyncGroup;
WriteMethod write_x400pCardAdministrativeState;
WriteMethod write_x400pCardAlarmStatus;
WriteMethod write_x400pCardControlStatus;
#endif				/* __LOCAL_X400PMIB_H__ */
