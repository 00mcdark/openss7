% -*- texinfo -*- vim: ft=texinfo
% vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
% =========================================================================
%
% @(#) $Id: nli.texi,v 0.9.2.3 2008-07-01 12:31:07 brian Exp $
%
% =========================================================================
%
% Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2008-07-01 12:31:07 $ by $Author: brian $
%
% =========================================================================
\input texinfo @c -*-texinfo-*-
@c vim: ft=texinfo nosmartindent nocindent noautoindent tw=120
@c %**start of header
@setfilename nli.info
@include texi/args.texi
@set MANUAL_TITLE Network Layer Interface
@set MANUAL_TYPE Specification
@settitle @value{MANUAL_TITLE}
@c %**end of header

@dircategory OpenSS7
@direntry
* NLI: (nli).			Network Layer Interface Specification
@end direntry

@include texi/args.texi
@set MANUAL_TITLE Network Layer Interface
@set MANUAL_TYPE Specification

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file documents the SpiderX.25 Network Layer Interface.

This is Edition @value{PACKAGE_VERSION}, last updated @value{PACKAGE_DATE}, for
@value{PACKAGE_TITLE} version @value{PACKAGE_VERSION} release
@value{PACKAGE_RELEASE} published by @uref{http://www.openss7.com/,OpenSS7
Corporation}.  This specification was originally published by NRC Compten.

Copyright @copyright{} 2001-2007  @uref{http://www.openss7.com/,OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org,Brian F. G. Bidulock} @*

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed document carries copying permission notice identical to
this one except for the removal of this paragraph (this paragraph not being
relevant to the printed manual).

@end ignore
Permission to use, copy, modify, and distribute this documentation for any
purpose and without fee is hereby granted, provided that the above copyright
notice appears in all copies and that both that copyright notice and this
permission notice appear in supporting documentation, and that the name OpenSS7
Corporation not be use in advertising or publicity pertaining to distribution
of the software without specific, written prior permission.  OpenSS7 Corporation
makes no representations about the suitability of this documentation for any
purpose.  It is provided ``as is'' without express or implied warranty.

Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE Network Layer Interface
@set MANUAL_TYPE Specification

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Distributed with Package @value{PACKAGE}-@value{VERSION}
@sp 2
@subtitle Copyright @copyright{} 2008  OpenSS7 Corporation
@subtitle All Rights Reserved.
@sp 4
@quotation
@subheading Abstract
This document is a @value{MANUAL_TITLE} containing technical details concerning
the implementation of the @value{MANUAL_TITLE} for OpenSS7.  It contains
recommendations on software architecture as well as platform and system
applicability of the @value{MANUAL_TITLE}.  It provides abstraction of the X.25
Packet Layer Protocol (PLP) to these components as well as providing a basis for
network layer control for other network protocols.
@end quotation
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

@noindent
All Rights Reserved.

@subsubheading Published by:
@noindent
@uref{http://www.openss7.com/,OpenSS7 Corporation} @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
Unauthorized distribution or duplication is prohibited.

@sp 1

@ignore
@noindent
This software and related documentation is protected by copyright and
distributed under licenses restricting its use, copying, distribution and
decompilation.  No part of this software or related documentation may be
reproduced in any form by any means without the prior written authorization of
the copyright holder, and licensors, if any.

@noindent
The recipient of this document, by its retention and use, warrants that the
recipient will protect this information and keep it confidential, and will not
disclose the information contained in this document without the written
permission of its owner.

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation
for any reason, including but not limited to, conformity with standards
promulgated by various agencies, utilization of advances in the state of the
technical arts, or the reflection of changes in the design of any techniques, or
procedures embodied, described, or referred to herein.  OpenSS7 Corporation is
under no obligation to provide any feature listed herein.
@end ignore

@noindent
Permission to use, copy and distribute this documentation without modification,
for any purpose and without fee or royalty is hereby granted, provided that both
the above copyright notice and this permission notice appears in all copies and
that the name of OpenSS7 Corporation not be used in advertising or publicity
pertaining to distribution of this documentation or its contents without
specific, written prior permission.  OpenSS7 Corporation makes no representation
about the suitability of this documentation for any purpose.  It is provided
``as is'' without express or implied warranty.

@subsubheading Notice:

@noindent
@b{OPENSS7 CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
DOCUMENTATION INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE, NON-INFRINGEMENT, OR TITLE; THAT THE CONTENTS OF THE
DOCUMENT ARE SUITABLE FOR ANY PURPOSE, OR THAT THE IMPLEMENTATION OF SUCH
CONTENTS WILL NOT INFRINGE ON ANY THIRD PARTY PATENTS, COPYRIGHTS, TRADEMARKS OR
OTHER RIGHTS..  IN NO EVENT SHALL OPENSS7 CORPORATION BE LIABLE FOR ANY DIRECT,
INDIRECT, SPECIAL OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH ANY USE OF THIS
DOCUMENT OR THE PERFORMANCE OR IMPLEMENTATION OF THE CONTENTS THEREOF.}

@sp 1

@noindent
OpenSS7 Corporation reserves the right to revise this software and documentation
for any reason, including but not limited to, conformity with standards
promulgated by various agencies, utilization of advances in the state of the
technical arts, or the reflection of changes in the design of any techniques, or
procedures embodied, described, or referred to herein.  OpenSS7 Corporation is
under no obligation to provide any feature listed herein.

@vskip 0pt
@end titlepage
@iftex
@headings off
@everyheading @thistitle @| @thisfile @| @thischaptername
@evenheading @thischapter @| @| @thisfile
@oddheading @thistitle @| @| @thischaptername
@everyfooting Version @value{PACKAGE_VERSION} Ed. @value{PACKAGE_RELEASE} @| @value{PACKAGE_DATE} @| @thispage
@evenfooting @thispage @| @| Version @value{PACKAGE_VERSION} Rel. @value{PACKAGE_RELEASE}
@oddfooting @value{PACKAGE_DATE} @| @| @thispage
@end iftex
@page

@c Define an index of primitives
@defcodeindex pr
@c Define an index of primitive values
@defcodeindex pv
@c Define an index of primitive error values
@defcodeindex pe
@c Define an index of protocol states
@defcodeindex st
@c Define an index of input-output controls
@defcodeindex ct
@c Define an index of manual pages.
@defcodeindex mp

@c syncodeindex pr cp
@c syncodeindex pv cp
@c syncodeindex st cp
@c syncodeindex tp cp
@c syncodeindex vr cp
@c syncodeindex ct cp

@include texi/macros.texi
@include texi/versions.texi

@macro prim {name}
@code{\name\}@prindex \name\
@end macro

@macro pval {name}
@code{\name\}@pvindex \name\
@end macro

@macro perr {name}
@code{\name\}@peindex \name\
@end macro

@macro psta {name}
@code{\name\}@stindex \name\
@end macro

@macro parm {name}
@code{\name\}@vrindex \name\
@end macro

@macro pioc {name}
@code{\name\}@ctindex \name\
@end macro

@ifnottex
@node Top
@top Network Layer Interface
@end ifnottex

@menu
* Introduction::
* Model of the Network Layer::
* NLI Services::
* NLI Message Primitives::
* NLI Input-Output Controls::
* Allowable Sequence of NLI Primitives::
@c * Precedence of NPI Primitives::
@c * Guidelines for Protocol Independent NS Users::
@c * Required Information for NS Provider-Specific Addenda::
* NLI Header Files::
* NLI Library::
* NLI Drivers and Modules::
* NLI Utilities::
* NLI File Formats::
* NLI Compatibility and Porting::
* Glossary of NLI Terms and Acronyms::
* References::
* Index::
@end menu

@node Introduction
@chapter Introduction

The Network Layer Interface (NLI) was developed by Spider Systems, Ltd., (now a
division of Emerson Power), and is widely available on many platforms.
For example, @cite{AIX AIXlink/X.25}, @cite{HP-UX HP X.25/9000}, @cite{Solaris
Solstice X.25} and @cite{SunLink X.25}, @cite{IRIX IRIS SX.25}, @cite{PT X.25}
and @cite{SBE X.25} implement the Network Layer Interface (NLI).

The Network Layer Interface (NLI) was designed to be used directly with standard
@dfn{STREAMS} system calls and does not require the use of a cooperating user
space shared library.  Applications program directly use the
@command{getmsg(2s)}, @command{getpmsg(2)}, @command{putmsg(2s)} and
@command{putpmsg(2)} system calls.@footnote{See @manref{getmsg(2s)},
@manref{getpmsg(2)}, @manref{putmsg(2s)} and @manref{putpmsg(2)} manual pages.}
Nevertheless, user shared object libraries can easily be constructed using this
@dfn{STREAMS} service primitive interface.

The system header files that must be included when compiling user applications,
or @dfn{STREAMS} drivers and modules that use the interface, are detailed in
@ref{NLI Header Files}.

A user library, @cite{libsx25}, is provided, not for interfacing to the message
primitive service interface, but for providing various helper functions when
using the @dfn{STREAMS} service interface.  This library is detailed in @ref{NLI
Library}.

@node Model of the Network Layer
@chapter Model of the Network Layer
@cindex Data Structures

@node NLI Services
@chapter NLI Services
@cindex Listens

@menu
* NLI Commands::
* NLI Data Structures::
@end menu

@node NLI Commands
@section NLI Commands
@cindex NLI Commands

@multitable @columnfractions 0.17 0.15 0.68
@item Command @tab Description @tab Section
@item @prim{N_CI} @tab @type{xcallf} @tab @ref{Connect Request/Indication}.
@item @prim{N_CC} @tab @type{xccnff} @tab @ref{Connect Response/Confirmation}.
@item @prim{N_Data} @tab @type{xdataf} @tab @ref{Data}.
@item @prim{N_DAck} @tab @type{xdatacf} @tab @ref{Data Acknowledgement}.
@item @prim{N_EData} @tab @type{xeadataf} @tab @ref{Expedited Data}.
@item @prim{N_EAck} @tab @type{xedatacf} @tab @ref{Expedited Data Acknowledgement}.
@c @item @prim{DTflow} @tab @type{} @tab .
@item @prim{N_RI} @tab @type{xrstf} @tab @ref{Reset Request/Indication}.
@item @prim{N_RC} @tab @type{xrscf} @tab @ref{Reset Response/Confirmation}.
@item @prim{N_DI} @tab @type{xdiscf} @tab @ref{Disconnect Request/Indication}.
@item @prim{N_DC} @tab @type{xdcnff} @tab @ref{Disconnect Confirmation}.
@item @prim{N_Abort} @tab @type{xabortf} @tab @ref{Abort Indication}.
@item @prim{N_Xlisten} @tab @type{xlistenf} @tab @ref{Listen Request/Response}.
@item @prim{N_Xelisten} @tab @type{xlistenf} @tab @ref{Extended Listen Request/Response}.
@item @prim{N_Xcanlis} @tab @type{xcanlisf} @tab @ref{Listen Cancel Request/Response}.
@item @prim{N_PVC_ATTACH} @tab @type{pvcattf} @tab @ref{PVC Attach}.
@item @prim{N_PVC_DETACH} @tab @type{pvcdetf} @tab @ref{PVC Detach}.
@c @item @prim{M_CParmReref} @tab @type{} @tab
@c @item @prim{M_CParmUnref} @tab @type{} @tab
@c @item @prim{M_CircuitId} @tab @type{} @tab
@end multitable

@node NLI Data Structures
@section NLI Data Structures
@cindex NLI Data Structures

@menu
* Addresses::
* CONS Quality of Service Parameters::
* Non-OSI X.25 Facilities::
@end menu

@node Addresses
@subsection Addresses

In call requests and responses, it is necessary to specify the X.25 addresses
associatedw tih the connection.  These addresses consist of the called, calling
and responding addresses.  A common structure is used for these addresses.  The
addressing format used by this stricture provides the following information:

@itemize

@item the subnetwork (data link) on which outgoing Connect Requests are to be
sent and on which incoming Connect Indications arrive;

@item Network Service Access Points (NSAP) and Subnetwork Point of Attachments
(SNPA), or Data Terminal Equipment (DTE) addresses and Link Service Access
Points (LSAP); and,

@item optional formats for the encoding of addresses (NSAP).

@end itemize

Addresses are represent using an @type{xaddrf} structure.  The @type{xaddrf}
structure is formatted as follows:

@example
@group
#define NSAPMAXSIZE 20

struct xaddrf @{
    union @{
        uint32_t link_id;
        uint32_t sn_id;
    @};
    unsigned char aflags;
    struct lsapformat DTE_MAC;
    unsigned char nsap_len;
    unsigned char NSAP;
@};
@end group
@end example

The @type{xaddrf} structure contains the following members:

@table @member
@item link_id
Holds the link number as a @type{uint32_t}.  By default, @member{link_id} has a
valud of @constant{0xFF}.  When @member{link_id} is @constant{0xFF}, Solstice
X.25 attempts to match the valled address with an entry in a routing
configuration file.  If it cannot find a match, it routes the call over the
lowest numbered WAN link.
@item sn_id

Note that in some implementations, the @member{sn_id} field is
declared as @type{unsigned long}; however, this causes complications for 32-bit
applications running over a 64-bit kernel: i.e., it requires that the data model
of the application be known to the kernel module and conversions be supported.
Therefore, this field appears in the header file as the 32- vs.  64-bit agnostic
@type{uint32_t}.
@item aflags
Specifies the options required (or used) by the subnetwork to encode and
interpret addresses.  It may have one of the following values:
@multitable @columnfractions 0.15 0.1 0.6
@item @pval{NSAP_ADDR} @tab @constant{0x00} @tab @member{NSAP} is OSI-encoded NSAP address.
@item @pval{EXT_ADDR} @tab @constant{0x01} @tab @member{NSAP} is non-OSI-encoded extended address.
@item @pval{PVC_LCI} @tab @constant{0x02} @tab @member{NSAP} is a PVC number.
@item @pval{PVC_LCI} @tab @constant{0x02} @tab @member{DTE_MAC} is the LCI of a PVC.
@end multitable
When the @member{NSAP} field is empty, @member{aflags} takes the value zero
(0).@footnote{See @manref{x25addr(5)}, @manref{stox25(3)}, @manref{x25tos(3)},
and @manref{gexhostent(3)} manual pages for details about the X.25 address
format.}
@item DTE_MAC
The DTE address, or LSAP as two BCD digits per byte, right justified, or the
@pval{PVC_LCI} as three BCD digits with two digits per byte, right
justified.
Holds the DTE address, the Medium Access Control plus Service Access Point
(MAC+SAP) address or the LCI.  This is binary.  The @type{lsapformat} structure
is formatted as follows:.
@example
@group
#define LSAPMAXSIZE

struct lsapformat @{
    unsigned char lsap_len;
    unsigned char lsap_add[LSAPMAXSIZE];
@};
@end group
@end example
The fields in this structure are defined as follows:
@table @member
@item lsap_len
This gives the length of the DTE address, the MAC+SAP addres, or the LCI in
semi-octets.  For example for Ethernet, the length is always 14 to indicate the
MAC (12) plush SAP (2).  The SAP always follows the MAC address.  The DTE can be
up to 15 decimal digits unless X.25(88) and Type Of Address/Numbering Plan
Identification (TOA/NPI) addressing is being used, in which case, it can be up
to 17 decimal digits.  For an LCI, the length is 3.
The length of the DTE address or LSAP as two BCD digits per byte, right
justified.  An LSAP is always 14 digits long.  A DTE address can be up to 15
decimal digtis unless X.25(88) and TOA/NPI addressing is used, in which case it
can be up to 17 decimal digits.  A @pval{PVC_LCI} is 3 digits long.
@item lsap_add
This holds the DTE, MAC+SAP or LCI, when present, as indicated by
@member{lsap_len}.  This is binary.
The DTE address, LSAP or @pval{PVC_LCI} as two BCD digits per byte, right
justified.
@end table
@item nsap_len
The length in semi-octets of the NSAP as two BCD digits per byte, right
justified.
This indicates the length of the NSAP, if any (and where appropriate), in
semi-octets.
@item NSAP
The NSAP or address extension (see @member{aflags}) as two BCD digitis per byte,
right justified.
This carries the NSAP or address extension (see field @member{aflags}) when
present as indicated by @member{nsap_len}.  This is binary.
@end table

@node CONS Quality of Service Parameters
@subsection CONS Quality of Service Parameters

Negotiable X.25 facilities are supported by the PLP driver.  This section
describes the request and negotiation of these facilities, and the data
structures used by the NLI primitives.

The facilities are broken down into two groups:

@itemize

@item those required for Connection-Oriented Network Service (CONS) support, and

@item those requried for non-OSI procedures (X.29, for example).

@end itemize

The CONS quality of service (QOS) parameters supported are the following:

@itemize

@item Throughput Class

@item Minimum Throughput Class

@item Target Transit Delay

@item Maximum Acceptable Transit Delay

@item Use of Expedited Data

@item Protection

@item Receipt Acknolwedgement

@end itemize

CONS-related quality of service parameters are defined in the @type{qosformat}
structure.  The @type{qosformat} structure is formatted as follows:

@example
@group
#define MAX_PROT 32

struct qosformat @{
    unsigned char reqtclass;
    unsigned char locthroughput;
    unsigned char remthroughput;
    unsigned char reqminthruput;
    unsigned char locminthru;
    unsigned char remminthru;
    unsigned char reqtransitdelay;
    unsigned short transitdelay;
    unsigned char reqmaxtransitdelay;
    unsigned char acceptable;
    unsigned char reqpriority;
    unsigned char reqprtygain;
    unsigned char reqprtykeep;
    unsigned char prtydata;
    unsigned char prtygain;
    unsigned char prtykeep;
    unsigned char reqlowprtydata;
    unsigned char reqlowprtygain;
    unsigned char reqlowprtykeep;
    unsigned char lowprtydata;
    unsigned char lowprtygain;
    unsigned char lowprtykeep;
    unsigned char protection_type;
    unsigned char prot_len;
    unsigned char lowprot_len;
    unsigned char protection[MAX_PROT];
    unsigned char lowprotection[MAX_PROT];
    unsigned char reqexpedited;
    unsigned char reqackservice;
    struct extraformat xstras;
@};
@end group
@end example

The @type{qosformat} structure has the following members:

@table @member
@item reqtclass
When non-zero, conveys that throughput negotiation is selected.
@item locthroughput
Contains the four-bit throughput encoding for the local to remote direction.
@item remthroughput
Contains the four-bit throughput encoding for the remote to local direction.
@item reqminthruput
When non-zero, conveys that minimum throughput negotiation is selected.
@item locminthru
When @member{reqminthruput} is non-zero, conveys the four-bit throughput
encoding for the local to remote direction.
@item remminthru
When @member{reqminthruput} is non-zero, conveys the four-bit throughput
encoding for the remote to local direction.
@item reqtransitdelay
When non-zero, conveys that target transit delay negotiation is selected.
@item transitdelay
When @member{reqtransitdelay} is non-zero, conveys the 16-bit value.  In a
Connect Confirmation, the value of the selected transit delay is placed in this
field and is non-zero.
@item reqmaxtransitdelay
When non-zero, conveys that maximum acceptable transit delay negotiation is
selected.
@item acceptable
When @member{reqmaxtransitdelay} is non-zero, conveys the 16-bit value of the
maximum acceptable transit delay. 

Note: Transit delay selection applies only to Connect Requests.  There is no
transit dleay QOS parameter in a Connect Response.  The correct response when
the indicated QOS is unattainable is to make a Disconnect Request.  In a Connect
Confirmation, the value of the selected transit delay is placed in the
@member{transitdelay} field when such negotiation takes place.
@item reqpriority
When non-zero, conveys that data priority negotiation is selected.
@item reqprtygain
When non-zero, conveys that gain priority negotiation is selected.
@item reqprtykeep
When non-zero, conveys that keep priority negotiation is selected.
@item prtydata
When @member{reqpriority} is non-zero, contains the 8-bit priority for
sending data.
@item prtygain
When @member{reqprtygain} is non-zero, contains the 8-bit priority for
gaining a connection.
@item prtykeep
When @member{reqprtykeep} is non-zero, contains the 8-bit priority for
keeping a connection.
@item reqlowprtydata
When non-zero, conveys that data low priority negotiation is selected.
This field is only valid on Connect Requests/Indications.
@item reqlowprtygain
When non-zero, conveys that gain low priority negotiation is selected.
This field is only valid on Connect Requests/Indications.
@item reqlowprtykeep
When non-zero, conveys that keep low priority negotiation is selected.
This field is only valid on Connect Requests/Indications.
@item lowprtydata
When @member{reqlowprtydata} is non-zero, contains the 8-bit priority for
sending data.
This field is only valid on Connect Requests/Indications.
@item lowprtygain
When @member{reqlowprtygain} is non-zero, contains the 8-bit priority to gain a
connection.
This field is only valid on Connect Requests/Indications.
@item lowprtykeep
When @member{reqlowprtykeep} is non-zero, contains the 8-bit priority to keep a
connection.
This field is only valid on Connect Requests/Indications.
@item protection_type
When non-zero, conveys that protection negotiation is selected.  The field can
be one of the following valuse:

@multitable @columnfractions 0.1 0.2 0.4
@item Value @tab Name @tab Meaning
@item 1 @tab @pval{PRT_SRC} @tab Source address specific.
@item 2 @tab @pval{PRT_DST} @tab Destination address specific.
@item 3 @tab @pval{PRT_GLB} @tab Globally unique.
@end multitable
@item prot_len
@item lowprot_len
This field is only valid on Connect Requests/Indications.
@item protection
@item lowprotection
This field is only valid on Connect Requests/Indications.
@item reqexpedited
When non-zero, conveys that expedited data negotiation is selected.  For Connect
Indications, a non-zero value implies that the Expedited Data negotiation
facility was present in the incoming call packet, and that its use was requested.

Note: Negotiation is a CONS procedure.  When the facility is present and
indicates non-use,  use cannot be negotiated by Connect Responses.  For a
description of the use of the @member{CONS_call} field in Connect Requests and
Connect Responses, see @ref{Connect Request/Indication}, and @ref{Connect
Response/Confirmation}.

For incoming or outgoing non-CONS calls (denoted by the @member{CONS_call} flag
set to zero (0)), Expedited Data negotiation is not required: interrupt data is
always available in X.25.  This means that this field is ignored on Connect
Requests and Responses for non-CONS calls.
@item reqackservice
When non-zero, conveys that receipt confirmation negotiation is selected.  For
Connect Indications, a non-zero value implies that the Receipt Confirmation
negotiation facility was present in the incoming call packet, and that its use
was requested.  This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item - @tab 0 @tab No receipt confirmation.
@item @pval{RC_CONF_DTE} @tab 1 @tab Confirmation by the remote terminal.
@item @pval{RC_CONF_APP} @tab 2 @tab Confirmation by the remote application.
@end multitable
In the case of receipt confirmation by the remote DTE, no acknowledgements are
expected or given over the X.25 service interface.  In the case of receipt
confirmation by the remote application, there is a one-to-one corrrespondence
between D-bit data and acknowledgements, with one  data acknowlegement being
received or sent for each D-bit data packet sent or received over the X.25
service interface.
@item xstras
@end table

@node Non-OSI X.25 Facilities
@subsection Non-OSI X.25 Facilities

Although these are non-OSI facilities, they are also negotiable with CONS.  For
those NLI applications that require them, the non-OSI facilities supported are
as follows:

@itemize

@item non-OSI extended addressing;

@item X.25 fast select request/indication with no restriction on response;

@item X.25 fast select reqeust/indication with restriction on response;

@item X.25 reverse charging;

@item X.25 packet size negotiation;

@item X.25 window size negotiation;

@item X.25 network user identification;

@item X.25 recognized private operating agency selection;

@item X.25 closed user groups;

@item X.25 call deflection; and,

@item X.25 programmable facilities.

@end itemize

Non-OSI X.25 Facilities are defined in the @type{extraformat} structure.  The
@type{extraformat} structure is formatted as follows:

@example
@group
#define MAX_NUI_LEN  64
#define MAX_RPOA_LEN  8
#define MAX_CUG_LEN   2
#define MAX_FAC_LEN  32
#define MAX_TARIFFS   4
#define MAX_CD_LEN   MAX_TARRIFS * 4
#define MAX_SC_LEN   MAX_TARRIFS * 4
#define MAX_MU_LEN   16
@end group

@group
struct extraformat @{
    unsigned char fastselreq;
    unsigned char restrictresponse;
    unsigned char reversecharges;
    unsigned char pwoptions;
    unsigned char locpacket;
    unsigned char rempacket;
    unsigned char locwsize;
    unsigned char remwsize;
    int nsdulimit;
    unsigned char nui_len;
    unsigned char nui_field[MAX_NUI_LEN];
    unsigned char rpoa_len;
    unsigned char rpoa_field[MAX_RPOA_LEN];
    unsigned char cug_type;
    unsigned char cug_field[MAX_CUG_LEN];
    unsigned char reqcharging;
    unsigned char chg_cd_len;
    unsigned char chg_cd_field[MAX_CD_LEN];
    unsigned char chg_sc_len;
    unsigned char chg_sc_field[MAX_SC_LEN];
    unsigned char chg_mu_len;
    unsigned char chg_mu_field[MAX_MU_LEN];
    unsigned char called_add_mod;
    unsigned char call_redirect;
    struct lsapformat called;
    unsigned char call_deflect;
    unsigned char x_fac_len;
    unsigned char cg_fac_len;
    unsigned char cd_fac_len;
    unsigned char fac_field[MAX_FAC_LEN];
@};
@end group
@end example

The @type{extraformat} structure has the following members:

@table @member
@item fastselreq
For non-OSI services (e.g. X.29), if the X.25 facility fast select is to be
requested or indicated, this field is non-zero.  For CONS, the use of fast
select is optional.
@item restrictresponse
If the resonse to a Connect Request or Indication is to be a Diconnect
Indiciation, this filed is non-zero.
@item reversecharges
If reverse charging is requested or indicated for a connection, this field is
non-zero.  The configuration mod bit @pval{SUB_REVCHARGE} has an impact on
whether reverse charging is indicated, since it is possible to select a
per-subnetwork policy for reciept of reverse charging.
@item pwoptions
This field is used to indicate per-circuit options.  The field is a bitwise OR
of zero or more of the following values:
@multitable @columnfractions 0.2 0.1 0.55
@item Name @tab Value @tab Meaning when set.
@item @pval{NEGOT_PKT} @tab 0x01 @tab Packet size negotiation permitted.
@item @pval{NEGOT_WIN} @tab 0x01 @tab Window size negotiation permitted.
@item @pval{ASSWERN_HWM} @tab 0x01 @tab Assert concatentaiton limit.
@end multitable
The field is defined as follows:
@example
@group
#define NEGOT_PKT       0x01
#define NEGOT_WIN       0x02
#define ASSERT_HWM      0x04
@end group
@end example
The field is used for two reasons:
@enumerate
@item The X.25 software always indicates the values of the window and packet
sizes operating on the virtual circuit.  The field @member{pwoptions} for an
incoming call indicates whether these values are negotiable.
@item In Connect Request/Response message, the NLI user can set
@member{nsdulimit}, the limit value for packet concatentation by the X.25 level,
to a value different from the limit in the subnetwork configuration database.
It is not a negotiable option, so whatever the user requests is used.
@end enumerate
@item locpacket
When non-zero, contains the local to remote direction packet size.
The default value, @pval{DEF_X25_PKT}, is seven (7).
@item rempacket
When non-zero, contains the remote to local direction packet size.
The default value, @pval{DEF_X25_PKT}, is seven (7).
@item locwsize
When non-zero, contains the local to remote direction window size.
The default value, @pval{DEF_X25_WIN}, is two (2).
@item remwsize
When non-zero, contains the remote to local direction window size.
The default value, @pval{DEF_X25_WIN}, is two (2).
@item nsdulimit
When non-zero, and the appropriate bit is set in the @member{pwoptions} field,
this field is used as the specified concatentaiton limit.
@item nui_len
Valid in Connect Requests and Connect Responses, when non-zero, specifies the
length of the @member{nui_field} in octets.  The Network User Identification
facility is not available on 1980 X.25 networks.
@item nui_field
Contains the Network User Identification (NUI) octets of length @member{nui_len}.
@item rpoa_len
Valid in Connect Requests only.  When non-zero, the RPOA DNIC information is
suppplied in the @member{rpoa_field} field and the semi-octets in the field are
of this length.
@item rpoa_field
Contains the Recognized Private Operating Agency (RPOA) semi-octets of length
@member{rpoa_len}.
@item cug_type
Valid in Connect Requests and Connect Indications only, this field, when
non-zero, is 1 for Closed User Group (CUG) and 2 for Bilateral CUG (two members
only).

Note: Incoming CUG facilities are assumed to have been validated by the network.
No further cehcking is performed.
@item cug_field
Contains the Closed User Group (CUG) semi-octets of length up to four (4)
semi-octets for CUG and four semi-octets (4) for BCUG (Bilateral CUG).
@item reqcharging
When non-zero in a Connect Request of Connect Indication, call charging is
requested; in a Disconnect Indication of Disconnect Confirmation, the
six fields below will give the charging information.
@item chg_cd_len
When non-zero, conveys the length of the @member{chg_cd_field} field.
@item chg_cd_field
Conveys the call duration.
@item chg_sc_len
When non-zero, conveys the length of the @member{chg_sc_field} field.
@item chg_sc_field
Conveys the segment count.
@item chg_mu_len
When non-zero, conveys the length of the @member{chg_mu_field} field.
@item chg_mu_field
Conveys the monetary unit.
@item called_add_mod
When non-zero, conveys the reason value for call modification.
@item call_redirect
When non-zero, conveys the reason for call redirection.
@item called
When @member{call_redirect} is non-zero, conveys the orignalling called DTE
address.
@item call_deflect
Valid in the Disconnect Request and Disconnect Indication, when non-zero,
conveys the reason for call deflection.  The @member{deflected} field in the
Disconnect Request or Indication conveys the DTE address, and if required, the
NSAP address to which the call is to be deflected.
@item x_fac_len
Valid in Connect Requests and Connect Indications only,
when non-zero, provides the length of the explicit facility ecnoded strings for
X.25 facilities.
@item cg_fac_len
Valid in Connect Requests and Connect Indiciations only,
when non-zero, provides the length of the explicit facility encoded strings for
non-X.25 facilities for the calling network.
@item cd_fac_len
Valid in Connect Requests and Connect Indiciations only,
when non-zero, provides the length of the explicit facility encoded strings for
non-X.25 facilities for the called network.
@item fac_field
When @member{x_fac_len}, @member{cg_fac_len} or @member{cd_fac_len} are
non-zero, contains the X.25 facilities, non-X.25 facilities for the calling
network, and/or non-X.25 facilities for the called network.

Note: The contents of this field, if supplied, are not validated  or acted upon
by the code.  The X.25 facilities are inserted at the end of any other X.25
facilities that are passed in the Connect Request/Indication (for example,
packet or window sizes).  If any non-X.25 facilities are supplied, the
appropriate marker is inserted before the supplied facilities.
@end table

@node NLI Message Primitives
@chapter NLI Message Primitives
@cindex NLI Message Primitives

@menu
* Connect Request/Indication::
* Connect Response/Confirmation::
* Data::
* Data Acknowledgement::
* Expedited Data::
* Expedited Data Acknowledgement::
* Reset Request/Indication::
* Reset Response/Confirmation::
* Disconnect Request/Indication::
* Disconnect Confirmation::
* Abort Indication::
* Listen Request/Response::
* Extended Listen Request/Response::
* Listen Cancel Request/Response::
* PVC Attach::
* PVC Detach::
@end menu

@page
@node Connect Request/Indication
@section Connect Request/Indication
@cindex Connect Request/Indication

@subheading Format

The Connect Request and Connect Indication use the @type{xcallf} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xcallf} structure.
The data part of the message consists of zero or one @msg{M_DATA} message blocks
containing the Call User Data (if any).

The @type{xcallf} structure is formatted as follows:

@example
@group
struct xcallf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int conn_id;
    unsigned char CONS_call;
    unsigned char negotiate_qos;
    struct xaddrf calledaddr;
    struct xaddrf callingaddr;
    struct qosformat qos;
@};
@end group
@end example

@subheading Usage

The Connect Request or Indication message primitive, @prim{N_CI}, is used by
the NS user to request a outgoing connection, or by the NS provider to indicate
an incoming connection.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xcallf} structure.
The data part of the message consists of zero or one @msg{M_DATA} message blocks
containing the Call User Data (CUD) when supplied.

@subheading Parameters

The @type{xcallf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_CI}, for both Connect Requests and Connect Indications.
@item conn_id
This field is used only for Connect Indications.  When an NS user Stream is
listening, multiple incoming Connect Indications can be pending.  This field
indicates the connection identifier for the current Connect Indication for use
by the NS user when responding to this Connection Indication with either a
Connect Response or a Disconnect Request message.
@item CONS_call
Either X.25 or CONS procedures@cite{ISO/IEC 8878 or ITU-T X.223.} can be used
for calls.  When non-zero, this field indicates that CONS procedures are to be
used.  When zero, this field indicates that X.25 procedures are to be used.
@item negotiate_qos
QOS parameters can be negotiated by the peer or left at default values.  When
non-zero, this field specifies or indicates that QOS parameters are being
negotiated by the NS user or NS user peer and the pertinent ranges are provided
in the @member{qos} member.  When zero, this field specifies and indicates that
default values are to be used for the NS user or were indicated by the NS user
peer.
@item calledaddr
Conveys the called address.  For outgoing Connect Requests, this is the remote
address to which the call is to be connected.  For incoming Connect Indications,
this is the local address to which the call was initiated.
@item callingaddr
Conveys the calling address.  For outgoing Connect Requests, this is the local
address from which the call is to be connected.  For incoming Connect
Indications, this is the remote address from which the call was initiated.
@item qos
Conveys the quality of service parameters and CONS an non-CONS facilities that
are requested or indicated.
@end table

@subheading State

@subheading Response

When the Connect Request is issued by the NS user, the expected response from
the NS provider is a Connect Conformation or a Disconnect Indication.

When the Connect Indication is issued by the NS provider, the expected response
from the NS user is a Connect Response or a Disconnect Request.

@subheading Equivalence

The Connect Request message primitive is equivalent to the @prim{N_CONN_REQ}
primitive of the NPI; the Connect Indication, the @prim{N_CONN_IND}.

@page
@node Connect Response/Confirmation
@section Connect Response/Confirmation
@cindex Connect Response/Confirmation

@subheading Format

The Connect Response and Connect Confirmation use the @type{xccnff} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xccnff} structure.
The data part of the message consists of zero or one @msg{M_DATA} message blocks
containing the Call User Data (if any).

The @type{xccnff} structure is formatted as follows:

@example
@group
struct xcallf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int conn_id;
    unsigned char CONS_call;
    unsigned char negotiate_qos;
    struct xaddrf responder;
    struct qosformat rqos;
@};
@end group
@end example

@subheading Usage

The Connect Response or Confirmation message primitive, @prim{N_CC}, is used
by the NS user to response to an incoming connection, or by the NS provider to
confirm an outgoing connection.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xccnff} structure.
The data part of the message consists of zero or one @msg{M_DATA} message block
containing the Call User Data (CUD) when supplied.

@subheading Parameters

The @type{xccnff} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_CC}.
@item conn_id
This field is only used for Connect Responses.  When an NS user Stream is
listening, multiple incoming Connect Indications can be pending.  This field
specifies the connection identifier from the Connection Indication to which the
NS user is responding.
@item CONS_call
Either X.25 or CONS procedures@cite{ISO/IEC 8878 or ITU-T X.223.} can be used
for calls.  When non-zero, this field indicates that CONS procedures are to be
used.  When zero, this field indicates that X.25 procedures are to be used.
@item negotiate_qos
QOS parameters can be negotiated by the peer or left at default values.  When
non-zero, this field specifies or indicates that QOS parameters are being
negotiated by the NS user or NS user peer and the pertinent ranges are provided
in the @member{qos} member.  When zero, this field specifies and indicates that
default values are to be used for the NS user or were indicated by the NS user
peer.
@item responder
Conveys the responding address.  For Connect Responses, this is the local
address that is responding to the incoming call.  For Connect Confirmations,
this is the remote address that responded to the outgoing call.
@item rqos
Conveys the negotiated quality of service parameters and CONS an non-CONS
facilities in response or confirmation.
@end table

@subheading State


@subheading Response

No response is expected when either the NS user or NS provider issue this
primitive.

@subheading Equivalence

The Connect Response message primitive is equivalent to the @prim{N_CONN_RES}
primitive of the NPI; the Connect Confirmation, the @prim{N_CONN_CON}.

@page
@node Data
@section Data
@cindex Data

@subheading Format

The Data message uses the @type{xdataf} structure.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xdataf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the local or remote NS user data (NSDU).

The @type{xdataf} structure is formatted as follows:

@example
@group
struct xdataf @{
    unsigned char xl_type;
    unsigned char xl_command;
    unsigned char More;
    unsigned char setDbit;
    unsigned char setQbit;
@};
@end group
@end example

@subheading Usage

The Data message primitive, @prim{N_Data}, is used to transfer NS user data
to or from the NS user.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xdataf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the local or remote NS user data (NSDU).

@subheading Parameters

The @type{xdataf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_DAT}.
@item xl_command
Always @prim{N_Data}.
@item More
When non-zero, this field conveys that a subsequent @prim{N_Data} message
primitive will contain additional data belonging to the same NSDU.  When zero,
this field conveys that the data contained in the message primitive completes an
NSDU.
@item setDbit
Conveys that the D-bit is to be (or was) associated with the NSDU.  When the
data portion represents part of an NSDU, the bit must be set or clear on each
request or indication belonging to the same NSDU.
@item setQbit
Conveys that the Q-bit is to be (or was) associated with the NSDU.  When the
data portion represents part of an NSDU, the bit must be set or clear on each
request or indication belonging to the same NSDU.
@end table

@subheading State

This message primitive is only valid during the data transfer phase. 

@subheading Response

No response is expected when either the NS user or NS provider issue this
primitive, unless the D-bit is set, in which case a Data Acknowledgement
response is expected from the NS provider or NS user, respectively.

@subheading Equivalence

The Data message primitive is equivalent to the @prim{N_DATA_REQ} and
@prim{N_DATA_IND} primitives of the NPI.

@page
@node Data Acknowledgement
@section Data Acknowledgement
@cindex Data Acknowledgement

@subheading Format

The Data Acknowledgement message uses the @type{xdatacf} structure.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xdatacf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xdatacf} structure is formatted as follows:

@example
@group
struct xdatacf @{
    unsigned char xl_type;
    unsigned char xl_command;
@};
@end group
@end example

@subheading Usage

The Data Acknowledgement message primitive, @prim{N_DAck}, is used to
request or indicate acknolwedgement of data.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xdatacf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xdatacf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_DAT}.
@item xl_command
Always @prim{N_DAck}.
@end table

@subheading State

This message primitive is only valid during the data transfer phase. 

@subheading Response

When receipt confirmation from the remote application is active on a VC, this
message primitive is used to acknowledge a previous @prim{N_DAck} request or
indication that had the D-bit set.  There is a one-to-one correspondence between
D-bit data and acknowledgements, with one Data Acknowledgement being conveyed
for each Data message primitive conveyed.  The Data message primitive
acknowledged is always the oldest outstanding Data message primitive that
requested acknowledgement.

For CONS calls, if receipt acknowledgement was negotiated on the connection,
then an acknowledgement is pending for each Data primitive conveyed.  However,
to be compatible with previous releases of the NPI, the value of the
@member{reqackservice} field in the @member{qos} structure can be set to request
that the D-bit signifies receipt confirmation by the remote DTE only, thus
ensuring that no acknowledgements are expected or given.

For non-CONS calls, only when the @member{reqackservice} field in the
@member{qos} structure has been set to the appropriate value will the Data
Acknolwedgement procedures apply for an D-bit Data requested or indicated.
Otherwise, no acknowledgement is expected or given.

@subheading Equivalence

The Data Acknowledgement message primitive is equivalent to the
@prim{N_DATACK_REQ} and @prim{N_DATACK_IND} primitives of the NPI.

@page
@node Expedited Data
@section Expedited Data
@cindex Expedited Data

@subheading Format

The Expedited Data message uses the @type{xedataf} structure.
THe control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xedataf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the local or remote expedited NS user data (ENSDU).

The @type{xedataf} structure is formatted as follows:

@example
@group
struct xedataf @{
    unsigned char xl_type;
    unsigned char xl_command;
@};
@end group
@end example

@subheading Usage

The Expedited Data message primitive, @prim{N_EData}, is used to transfer
expedited NS user data to or from the NS user.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xedataf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the local or remote expedited NS user data (ENSDU).

The Expedited Data message primitive, @prim{N_EData}, is used when expedited
data, carried by an X.25 interrupt packet, corsses the X.25 NLI service
interface from NS provider to user or NS user to provider.
The Expedited Data message is a confirmed primitive and must be acknowledged
before another expedited data unit can be requested or indicated.

@subheading Parameters

The @type{xedataf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_DAT}.
@item xl_command
Always @prim{N_EData}.
@end table

@subheading State

This message primitive is only valid during the data transfer phase. 

@subheading Response

When NS user or provider issues this primtive it expectes an Expedited Data
Acknowledgement message primitive in reponse.
The Expedited Data message is a confirmed primitive and must be acknowledged
before another expedited data unit can be requested or indicated.

@subheading Equivalence

The Expedited Data message primitive is equivalent to the
@prim{N_EXDATA_REQ} and @prim{N_EXDATA_IND} primitives of the NPI.

@page
@node Expedited Data Acknowledgement
@section Expedited Data Acknowledgement
@cindex Expedited Data Acknowledgement

@subheading Format

The Expedited Data Acknowledgement message uses the @type{xedatacf} structure.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xedatacf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xedatacf} structure is formatted as follows:

@example
@group
struct xedatacf @{
    unsigned char xl_type;
    unsigned char xl_command;
@};
@end group
@end example

@subheading Usage

The Expedited Data Acknowledgement message primitive, @prim{N_EAck}, is used to
request or indicate acknolwedgement of expedited data.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xedatacf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xedatacf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_DAT}.
@item xl_command
Always @prim{N_EAck}.
@end table

@subheading State

This message primitive is only valid during the data transfer phase. 

@subheading Response

The Expedited Data Acknolwedgement message primitive is issued only in
confirmation to the Expedited Data message primitive.  When an Expedited Data
message primitive is delivered to the NS user or provider, the NS provider or
user, respectively, must acknolwedged the expedited data.

@subheading Equivalence

The Expedited Data Acknowledgement message primitive has no equivalent in the
NPI.

@page
@node Reset Request/Indication
@section Reset Request/Indication
@cindex Reset Request/Indication

@subheading Format

The Reset Request and Reset Indication use the @type{xrstf} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xrstf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xrstf} structure is formatted as follows:

@example
@group
struct xrstf @{
    unsigned char xl_type;
    unsigned char xl_command;
    unsigned char originator;
    unsigned char reason;
    unsigned char cause;
    unsigned char diag;
@};
@end group
@end example

@subheading Usage

The Reset Request or Indication message primitive, @prim{N_RI}, is used by
the NS user to request reset of the connection, or by the NS provider to
indicate a remote reset.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xrstf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The X.25 cause and diagnostic octets, @member{cause} and @member{diag}, are
conveyrs, as well as the CONS @member{originator} and @member{reason} codes,
which are mapped from the @member{cause} and @member{diag}.  A Reset Request
on a non-CONS call can specify a non-zero @member{cause} code.  This has
no effect for a CONS call.

@subheading Parameters

The @type{xrstf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_RI}.
@item originator
For a CONS call, contains the CONS originator mapped from the X.25 cause and
diagnostic.  This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.6
@item Constant @tab Value @tab Description
@item @pval{NS_UNKNOWN} @tab 0 @tab Originator is unknown.
@item @pval{NS_USER} @tab 1 @tab Originator is the NS user.
@item @pval{NS_PROVIDER} @tab 2 @tab Originator is the NS provider.
@end multitable
@item reason
For a CONS call, contains the CONS reason, mapped from the X.25 cause and
diagnostic.
This field can have one of the following values when the @member{originator} is
@pval{NS_PROVIDER}:
@multitable @columnfractions 0.26 0.08 0.52
@item Constant @tab Value @tab Description
@item @pval{NS_RUNSPECIFIED} @tab 233 @tab Unspecified reason.
@item @pval{NS_RCONGESTION} @tab 234 @tab Congestion.
@end multitable
The field can have the following values when the @member{originator} is
@pval{NS_USER}:
@multitable @columnfractions 0.26 0.08 0.52
@item Constant @tab Value @tab Description
@item @pval{NS_RESYNC} @tab 250 @tab Resynchronization.
@end multitable
The field can have the following values when the @member{originator} is
@pval{NS_UNKNOWN}:
@multitable @columnfractions 0.26 0.08 0.52
@item Constant @tab Value @tab Description
@item @pval{NS_UNKNOWN} @tab 0 @tab Unspecified reason.
@end multitable
@item cause
Conveys the X.25 cause octet associated with the reset.
@item diag
Conveys the X.25 diagnostic octet associated with the reset.
@end table

@subheading State

This message primitive is valid in the data transfer phase.

@subheading Response

A Reset Request and Reset Indication message primitive is an acknowledged
service.  The NS user expects a Reset Confirmation primitive in response to a
Reset Request; the NS provide, a Reset Response primitive in reesponse to a
Reset Indication.

A collision between a Reset Indication and a Reset Request is taken to
acknolwedge the Reset Request and no Reset Confirmation is then issued.

@subheading Equivalence

The Reset Request message primitive is equivalent to the @prim{N_RESET_REQ}
of the NPI; the Reset Indication, @prim{N_RESET_IND}.

@page
@node Reset Response/Confirmation
@section Reset Response/Confirmation
@cindex Reset Response/Confirmation

@subheading Format

The Reset Response and Reset Confirmation use the @type{xrscf} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xrscf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xrscf} structure is formatted as follows:

@example
@group
struct xrscf @{
    unsigned char xl_type;
    unsigned char xl_command;
@};
@end group
@end example

@subheading Usage

The Reset Response or Confirmation message primitive, @prim{N_RC}, is used
by the NS user to respond to a Reset Indication for the connection, or by the NS
provider to confirm a Reset Request.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xrscf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xrscf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_RC}.
@end table

@subheading State

This message primitive is valid in the data transfer phase.

@subheading Response

The Reset Response message primitive is used by the NS user to respond to and
acknowledge a previous Reset Indication message primitive from the NS provider.
The Reset Confirmation message primitive is used by the NS provider to respond
to and acknowledge a previou Reset Request message primitive from the NS user.

@subheading Equivalence

The Reset Response message primitive is equivalent to the @prim{N_RESET_RES}
of the NPI; the Reset Confirmation, @prim{N_RESET_CON}.

@page
@node Disconnect Request/Indication
@section Disconnect Request/Indication
@cindex Disconnect Request/Indication

@subheading Format

The Disconnect Request and Disconnect Indication use the @type{xdiscf}
structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xdiscf} structure.
The data part of the message consists of zero or one @msg{M_DATA} message blocks
containing the Clear User Data (if any).

The @type{xdiscf} structure is formatted as follows:

@example
@group
struct xdiscf @{
    unsigned char xl_type;
    unsigned char xl_command;
    unsigned char originator;
    unsigned char reason;
    unsigned char cause;
    unsigned char diag;
    int conn_id;
    unsigned char indicated_qos;
    struct xaddrf responder;
    struct xaddrf deflected;
    struct qosformat qos;
@};
@end group
@end example

@subheading Usage

The Disconnect Request or Indication message primitive, @prim{N_DI}, is used
by the NS user to reject an incoming connection or disconnect an existing
connection, or by the NS provider to reject an outgoing connection or disconnect
an existing connection.
The control part of the message consists of one @msg{M_PROTO} message block, and
contains the @type{xdiscf} structure.
The data part of the message consists of zero or one @msg{M_DATA} message blocks
containing the Clear User Data (CUD) when supplied.

The X.25 cause and diagnostic octets, @member{cause} and @member{diag}, are
presented, as well as the CONS @member{originator} and @member{reason} codes
mapped from the X.25 cause and diagnostic.  A Disconnect Request for a non-CONS
call can specify a non-zero @member{cause} code.  This has no effect for a CONS
call.

@subheading Parameters

The @type{xdiscf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_DI}.
@item originator
For a CONS call, contains the CONS originator (NS user, NS provider, or
unknown), mapped from the X.25 cause and diagnostic.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.6
@item Constant @tab Value @tab Description
@item @pval{NS_UNKNOWN} @tab 0 @tab Originator is unknown.
@item @pval{NS_USER} @tab 1 @tab Originator is the NS user.
@item @pval{NS_PROVIDER} @tab 2 @tab Originator is the NS provider.
@end multitable
@item reason
For a CONS call, contains the CONS reason, mapped from the X.25 cause and
diagnostic.
This field can have one of the following values when the @member{originator} is
@pval{NS_PROVIDER}:
@multitable @columnfractions 0.26 0.08 0.52
@item Constant @tab Value @tab Description
@item @pval{NS_GENERIC} @tab 224 @tab General.
@item @pval{NS_DTRANSIENT} @tab 225 @tab Disconnect, transient.
@item @pval{NS_DPERMANENT} @tab 226 @tab Disconnect, permanent.
@item @pval{NS_TUNSPECIFIED} @tab 227 @tab Reject, unspecified, transient.
@item @pval{NS_PUNSPECIFIED} @tab 228 @tab Reject, unspecified, permanent.
@item @pval{NS_QOSNATRANSIENT} @tab 229 @tab Reject, QOS unavailable, transient.
@item @pval{NS_QOSNAPERMANENT} @tab 230 @tab Reject, QOS unavailable, permanent.
@item @pval{NS_NSAPTUNREACHABLE} @tab 232 @tab Reject, NSAP unreachable, transient.
@item @pval{NS_NSAPPUNREAHCABLE} @tab 235 @tab Reject, NSAP unreachable, permanent.
@end multitable
The field can have the following values when the @member{originator} is
@pval{NS_USER}:
@multitable @columnfractions 0.26 0.08 0.52
@item Constant @tab Value @tab Description
@item @pval{NU_GENERIC} @tab 240 @tab General.
@item @pval{NU_DNORMAL} @tab 241 @tab Disconnect, normal.
@item @pval{NU_DABNORMAL} @tab 242 @tab Disconnect, abnormal.
@item @pval{NU_DINCOMPUSERDATA} @tab 243 @tab Disconnect, incomprehensible user data.
@item @pval{NU_TRANSIENT} @tab 244 @tab Reject, transient.
@item @pval{NU_PERMANENT} @tab 245 @tab Reject, permanent.
@item @pval{NU_QOSNATRANSIENT} @tab 246 @tab Reject, QOS unavailable, transient.
@item @pval{NU_QOSNAPERMANENT} @tab 247 @tab Reject, QOS unavailable, permanent.
@item @pval{NU_INCOMPUSERDATA} @tab 248 @tab Reject, Call User Data facility.
@item @pval{NU_BADPROTID} @tab 249 @tab Reject, Bad protocol identifier.
@end multitable
@item cause
Conveys the X.25 cause octet associated with the disconnect.
@item diag
Conveys the X.25 diagnostic octet associated with the disconnect.
@item conn_id
When a Disconnect Request is used to refuse and incoming connection, this field
contains the @member{conn_id} from the corresponding Connect Indication message
primitive.
@item indicated_qos
When non-zero, conveys that facilities and quality of service paraemters are
being indicated.
@item responder
Conveys the responding address.  This is the local responding address in a
Disconnect Request used to refuse an incoming call, and a remote
responding address in a Disconnect Indication refusing an outgoing call.
@item deflected
When the @member{call_deflect} field of the associated @member{qos} structure is
non-zero, this field conveys the deflected address.  The deflected address is
the address of the remote station to which the call is being deflected.  This is
set by the NS user when deflecting a call with a Disconnect Request refusing an
incoming connection; and by the NS provider when an outgoing call has been
deflected.
@item qos
Conveys the CONS quality of service parameters and non-OSI facilities associated
with the disconnect.  This is used currently for the charging information when
an existing connection is disconnected, and for the deflection facility when an
incoming or outgoing call is being deflected.
@end table

@subheading State

This primitive is valid in the data transfer phase; it is also valid in the
incoming or outgoing connecting phase.  The call moves to the disconnect phase.

@subheading Response

This primitive is valid in response to a previously sent Connect Request or
received Connect Indication message primitive; or, to simply request or indicate
disconnection of an existing connection.

When an existing connection is disconnect with a Disconnect Request by the NS
user, the NS user expects a Disconnect Confirmation to acknowledge the
disconnect.  All other message should be discarded from the Stream until the
Disconnect Confirmation is received.

When a Disconnect Indication is issued by the NS provider, all messages sent
downstream except Connect Request or Connect Response messages are silently
discarded.

A disconnect collision can occur, where Disconnect Request and a Disconnect
Indication messages collide.  In this case, the Disconnect Indication messages
is taken as a confirmation and no Disconnect Confirmation message should be
expected by the NS user.

@subheading Equivalence

The Disconnect Request message primitive is equivalent to the
@prim{N_DISCON_REQ} of the NPI; the Disconnect Indication,
@prim{N_DISCON_IND}.

@page
@node Disconnect Confirmation
@section Disconnect Confirmation
@cindex Disconnect Confirmation

@subheading Format

The Disconnect Confirmation uses the @type{xdcnff} structure.
The control part of the message consists of one @msg{M_PROTO} message block,
containing the @type{xdcnff} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xdcnff} structure is formatted as follows:

@example
@group
struct xdcnff @{
    unsigned char xl_type;
    unsigned char xl_command;
    unsigned char indicated_qos;
    struct qosformat qos;
@};
@end group
@end example

@subheading Usage

The Disconnect Confirmation message primitive is used to confirm a previous
Disconnect Request and provide charging information facilities associated with
a previously established call.
The control part of the message consists of one @msg{M_PROTO} message block,
containing the @type{xdcnff} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xdcnff} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_DC}.
@item indicated_qos
When non-zero, conveys that CONS quality of service parameters and non-OSI
facilities are indicated.
@item qos
Conveys the facilities indicated.  This is only used on a Disconnect
Confirmation to indicate the charging information facility.
@end table

@subheading State

This primitive is valid in the disconnecting phase.

@subheading Response

This message primitive is only issued by the NS provider.
No response is expected when the NS provider issues this primitive.

@subheading Equivalence

The Disconnect Confirmation message primitive has no equivalent in NPI.

@page
@node Abort Indication
@section Abort Indication
@cindex Abort Indication

@subheading Format

The Abort Indication uses the @type{xabortf} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xabortf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xabortf} structure is formatted as follows:

@example
@group
struct xabortf @{
    unsigned char xl_type;
    unsigned char xl_command;
@};
@end group
@end example

@subheading Usage

The Abort Indication message primtiive is used by the X.25 driver in lieue of a
Disconnect Indication, when there is insufficient resources to generate a
Disconnect Indication.  Therefore, some NS providers may never issue this
message primitive.
Nevertheless, the NS user must be prepared to receive this message primitive in
liueue of a Disconnect Indication.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xabortf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xabortf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_Abort}.
@end table

@subheading State

This message primitive is only valid in the data transfer phase.  The call moves
to the disconnected phase.

@subheading Response

This message primitive is only issued by the NS provider.
No response is expected when the NS provider issues this primitive.

@subheading Equivalence

The Abort Indication message primitive is equivalent to the
@prim{N_DISCON_IND} of the NPI.

@page
@node Listen Request/Response
@section Listen Request/Response
@cindex Listen Request/Response

@subheading Format

The Listen Request and Listen Response use the @type{xlistenf} structure.
The control part of the message consists of one @msg{M_PROTO} or @msg{M_PCPROTO}
message block, and contains the @type{xlistenf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the call user data and address of interest.

The @type{xlistenf} structure is formatted as follows:

@example
@group
struct xlistenf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int lmax;
    int l_result;
@};
@end group
@end example

The @msg{M_DATA} message blocks are formatted as follows:

@example
@group
struct lcud @{
    unsigned char l_cumode;
    unsigned char l_culength; /* octets */
    unsigned char l_cubytes[0];
    /* followed by l_culength bytes */
@};
struct ladd @{
    unsigned char l_mode;
    unsigned char l_type;
    unsigned char l_length; /* semi-octets */
    unsigned char l_add[0];
    /* followed by ((l_length+1)>>1) bytes
       containing l_length semi-octets. */
@};
@end group
@end example

@subheading Usage

The Listen Request or Response is used when an NS user wishes to register
interest in incoming calls and the NS provider acknowledges the request.
The control part of the message consists of one @msg{M_PROTO} or @msg{M_PCPROTO}
message block, and contains the @type{xlistenf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the call user data and address of interest.

The Listen Request queue is ordered in terms of the amount of listen data
supplied.  The more a Listen Request asks for, the higher its place in the
queue.  Connect Indications are sent to the listener whose listening criteria
are best matched.

Privileged users can ask for a Listen Request to be placed at the front of the
queue, regardless of the amount of listen data supplied.  To do this, the Listen
Request should be sent as a @msg{M_PCPROTO} message.  This is achieved by
setting the @constant{RS_HIPRI} flag in @manref{putmsg(2s)}.  Such requests are
searched in the order in which they arrive.

The system adminstrator controls whether or not listening for incoming  calls is
a privileged operation.  If listening is privileged, incoming calls will be sent
only to on listen streams opened by a user with superuser privilege.  This
prevents other users accepting calls that may contain private information,
passwords, and so on.

In systems where privileged and non-privileged listens are allowed:

@itemize

@item Privileged listens have priority.

@item A matching but busy privileged listen prevents a search of any
non-privileged listens.

@end itemize

@subheading Parameters

The @type{xlistenf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_Xlisten}.
@item lmax
Conveys the maximum number of outstanding Connect Indications that the listening
Stream is willing to accept, for the addresses conveyed in the attached
@msg{M_DATA} message blocks.

Listen requests are cummulated but this field is not.  The maximum number of
outstanding Connect Indications will be reflected by the value of this field for
the last successful Listen Request issued by the NS user.
@item l_result
Conveys the result of the Listen Request in a Listen Response message primitive.
An error in the parameters or a lack of resources results in this flag being set
to a non-zero value.
@end table

The @msg{M_DATA} portion of the message contains the following members:

@table @member
@item l_cumode
Specifies the type of matching.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DONTCARE} @tab 1 @tab Represents a wildcard.
@item @pval{X25_STARTSWITTH} @tab 2 @tab Contains a prefix.
@item @pval{X25_IDENTITY} @tab 3 @tab Contains an identity match.
@c @item @pval{X25_PATTERN} @tab 4 @tab Contains a pattern.@footnote{Note that @pval{X25_PATTERN} is Solstice X.25 specific.}
@c @item @pval{X25_MATCH} @tab 4 @tab Contains a pattern match.@footnote{Note that @pval{X25_MATCH} appears to be PT WAN specific.}
@c @item @pval{X25_SNID} @tab 5 @tab Contains a Subnetwork ID (SNID).
@end multitable
Notes:
@enumerate
@item When the @member{l_cumode} is set to @pval{X25_DONTCARE}, the
@member{l_culength} and @member{l_cubytes} fields are ommitted from the
@msg{M_DATA} message block.
@end enumerate
@item l_culength
Specifies the length of the @member{l_cubytes} field in octets.
@item l_cubytes
Contains the bytes to be matched against the Call User Data (CUD).
@item l_mode
Specifies the type of matching.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DONTCARE} @tab 1 @tab Represents a wildcard.
@item @pval{X25_STARTSWITTH} @tab 2 @tab Contains a prefix.
@item @pval{X25_IDENTITY} @tab 3 @tab Contains an identity match.
@item @pval{X25_PATTERN} @tab 4 @tab Contains a pattern.@footnote{Note that @pval{X25_PATTERN} is Solstice X.25 specific.}
@c @item @pval{X25_MATCH} @tab 4 @tab Contains a pattern match.@footnote{Note that @pval{X25_MATCH} appears to be PT WAN specific.}
@c @item @pval{X25_SNID} @tab 5 @tab Contains a Subnetwork ID (SNID).
@end multitable
Notes:
@enumerate
@item When the @member{l_mode} is set to @pval{X25_DONTCARE}, the
@member{l_type}, @member{l_length} and @member{l_add} fields are ommitted from
the @msg{M_DATA} message block.
@item When the @member{l_mode} is set to @pval{X25_PATTERN}, the
@member{l_add} field can contain the wilcard digits @samp{*} and @samp{?} that
have the same effect as these characters in regular expressions: that is,
@samp{*} represents zero or more characters of any value, and @samp{?}
represents single character of any value.  The @samp{*} character is represented
by the BCD digit @code{0xF} and the @samp{?} character is represented by the BCD
digit @code{0xE}.
@end enumerate
@item l_type
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DTE} @tab 1 @tab Contains an X.25 DTE (X.121) address.
@item @pval{X25_NSAP} @tab 2 @tab Contains a CONS NSAP address.
@end multitable
@item l_length
Specifies the length of the @member{l_add} field in semi-octets.  That is, the
length of the @member{l_add} field in octets is: @samp{((l_length+1)>>1)}.  The
maximum length for a DTE address is 15 or 17 semi-octets (that is, 8 or 9
octets) depending upon whether TOA/NPI addressing is used.  The maximum length
for an NSAP address is 20 semi-octets (that is, 10 octets).
@item l_add
Contains the bytes to be matched against the DTE address or the NSAP address.

Each semi-octet is a BCD representation.  That is, digits in the range @samp{0} through
@samp{9} are represented by @code{0x0} through @code{0x9} in the semi-octet
position.  The first digit occupies the high order nibble of the first octet;
the second digit, the low order nibble of the first octet; the third digit, the
high order nibble of the second octet; and so on.  If @member{l_length} is odd,
the low order nibble of the last octet is ignored.

When the @member{l_mode} field is @pval{X25_PATTERN}, a semi-octet of
@code{0xF} represents a @samp{*} wildcard, and a semi-octet of @code{0xE}
represents a @samp{?} wildcard.
@end table

@subheading State

This message primitive is valid in the disconnected phase or during an incoming
connecting phase.

@subheading Response

When an NS user issues a Listen Request, the NS user expects a Listen Response
message primitive from the NS provider.

@subheading Equivalence

The Listen Request message primitive is equivalent to the
@prim{N_BIND_REQ} of the NPI; the Listen Response, @prim{N_BIND_ACK}.

@page
@node Extended Listen Request/Response
@section Extended Listen Request/Response
@cindex Extended Listen Request/Response

@subheading Format

The Extended Listen Request and Extended Listen Response use the @type{xlistenf}
structure.
The control part of the message consists of one @msg{M_PROTO} or @msg{M_PCPROTO}
message block, and contains the @type{xlistenf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the call user data and address of interest.

The @type{xlistenf} structure is formatted as follows:

@example
@group
struct xlistenf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int lmax;
    int l_result;
@};
@end group
@end example

The @msg{M_DATA} message blocks are formatted as follows:

@example
@group
struct lcud @{
    unsigned char l_cumode;
    unsigned char l_culength; /* octets */
    unsigned char l_cubytes[0];
    /* followed by l_culength bytes */
@};
struct lsn @{
    unsigned char l_snmode;
    unsigned char l_snlen;
    unsigned char l_snid[0];
    /* followed by l_snlen bytes */
@};
struct ladd @{
    unsigned char l_mode;
    unsigned char l_type;
    unsigned char l_length; /* semi-octets */
    unsigned char l_add[0];
    /* followed by ((l_length+1)>>1) bytes
       containing l_length semi-octets. */
@};
@end group
@end example

@subheading Usage

The Extended Listen Request or Response is used when an NS user wishes to
register interest in incoming calls and the NS provider acknowledges the
request.  The control part of the message consists of one @msg{M_PROTO} or
@msg{M_PCPROTO} message block, and contains the @type{xlistenf} structure.
The data part of the message consists of one or more @msg{M_DATA} message blocks
containing the call user data and address of interest.

@subheading Parameters

The @type{xlistenf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_Xelisten}.
@item lmax
Conveys the maximum number of outstanding Connect Indications that the listening
Stream is willing to accept, for the addresses conveyed in the attached
@msg{M_DATA} message blocks.

Listen requests are cummulated but this field is not.  The maximum number of
outstanding Connect Indications will be reflected by the value of this field for
the last successful Listen Request issued by the NS user.
@item l_result
Conveys the result of the Listen Request in a Listen Response message primitive.
An error in the parameters or a lack of resources results in this flag being set
to a non-zero value.
@end table

The @msg{M_DATA} portion of the message contains the following members:

@table @member
@item l_cumode
Specifies the type of matching.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DONTCARE} @tab 1 @tab Represents a wildcard.
@c @item @pval{X25_STARTSWITTH} @tab 2 @tab Contains a prefix.
@c @item @pval{X25_IDENTITY} @tab 3 @tab Contains an identity match.
@c @item @pval{X25_PATTERN} @tab 4 @tab Contains a pattern.@footnote{Note that @pval{X25_PATTERN} is Solstice X.25 specific.}
@item @pval{X25_MATCH} @tab 4 @tab Contains a pattern match.@footnote{Note that @pval{X25_MATCH} appears to be PT WAN specific.}
@c @item @pval{X25_SNID} @tab 5 @tab Contains a Subnetwork ID (SNID).
@end multitable
Notes:
@enumerate
@item When the @member{l_cumode} is set to @pval{X25_DONTCARE}, the
@member{l_culength} and @member{l_cubytes} fields are ommitted from the
@msg{M_DATA} message block.
@end enumerate
@item l_culength
Specifies the length of the @member{l_cubytes} field in octets.
@item l_cubytes
Contains the bytes to be matched against the Call User Data (CUD).
@item l_snmode
Specifies the matching mode.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DONTCARE} @tab 1 @tab Represents a wildcard.
@c @item @pval{X25_STARTSWITTH} @tab 2 @tab Contains a prefix.
@c @item @pval{X25_IDENTITY} @tab 3 @tab Contains an identity match.
@c @item @pval{X25_PATTERN} @tab 4 @tab Contains a pattern.@footnote{Note that @pval{X25_PATTERN} is Solstice X.25 specific.}
@item @pval{X25_MATCH} @tab 4 @tab Contains a pattern match.@footnote{Note that @pval{X25_MATCH} appears to be PT WAN specific.}
@c @item @pval{X25_SNID} @tab 5 @tab Contains a Subnetwork ID (SNID).
@end multitable
Notes:
@enumerate
@item When the @member{l_mode} is set to @pval{X25_DONTCARE}, the
@member{l_snlen} and @member{l_snid} fields are ommitted from
the @msg{M_DATA} message block.
@end enumerate
@item l_snlen
@item l_snid
@item l_mode
Specifies the type of matching.
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DONTCARE} @tab 1 @tab Represents a wildcard.
@c @item @pval{X25_STARTSWITTH} @tab 2 @tab Contains a prefix.
@c @item @pval{X25_IDENTITY} @tab 3 @tab Contains an identity match.
@c @item @pval{X25_PATTERN} @tab 4 @tab Contains a pattern.@footnote{Note that @pval{X25_PATTERN} is Solstice X.25 specific.}
@item @pval{X25_MATCH} @tab 4 @tab Contains a pattern match.@footnote{Note that @pval{X25_MATCH} appears to be PT WAN specific.}
@c @item @pval{X25_SNID} @tab 5 @tab Contains a Subnetwork ID (SNID).
@end multitable
Notes:
@enumerate
@item When the @member{l_mode} is set to @pval{X25_DONTCARE}, the
@member{l_type}, @member{l_length} and @member{l_add} fields are ommitted from
the @msg{M_DATA} message block.
@end enumerate
@item l_type
This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item @pval{X25_DTE} @tab 1 @tab Contains an X.25 DTE (X.121) address.
@item @pval{X25_NSAP} @tab 2 @tab Contains a CONS NSAP address.
@end multitable
@item l_length
Specifies the length of the @member{l_add} field in semi-octets.  That is, the
length of the @member{l_add} field in octets is: @samp{((l_length+1)>>1)}.  The
maximum length for a DTE address is 15 or 17 semi-octets (that is, 8 or 9
octets) depending upon whether TOA/NPI addressing is used.  The maximum length
for an NSAP address is 20 semi-octets (that is, 10 octets).
@item l_add
Contains the bytes to be matched against the DTE address or the NSAP address.
@end table

@subheading State

This message primitive is valid in the disconnected phase or during an incoming
connecting phase.

@subheading Response

When an NS user issues a Listen Request, the NS user expects an Extended Listen
Response message primitive from the NS provider.

@subheading Equivalence

The Extended Listen Request message primitive is equivalent to the
@prim{N_BIND_REQ} of the NPI; the Extended Listen Response,
@prim{N_BIND_ACK}.

@page
@node Listen Cancel Request/Response
@section Listen Cancel Request/Response
@cindex Listen Cancel Request/Response

@subheading Format

The Listen Cancel Request and Listen Cancel Response use the @type{xcanlisf}
structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xcanlisf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{xcanlisf} structure is formatted as follows:

@example
@group
struct xcanlisf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int c_result;
@};
@end group
@end example

@subheading Usage

The Listen Cancel Request message primitive is used by the NS user to cancel
listening on any address.
The Listen Cancel Request removes all listen addresses from the Stream.  There
is no way of cancelling a Listen Request on a particular address; this message
is probably used when the use of the Stream is about to be changed by the NS
user.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{xcanlisf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{xcanlisf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_Xcanlis}.
@item c_result
Conveys the result of the Listen Cancel Request in a Listen Cancel Response
message primitive.  An failure to cancel a listen request results in this flag
being set to a non-zero value.  A Listen Cancel Request may fail because no
listen was in effect, or a Connect Indication is outstanding.
@end table

@subheading State

This message primitive is valid in the disconnected phase.

@subheading Response

When an NS user issues a Listen Cancel Request, the NS user expects a Listen
Cancel Response message primitive from the NS provider.

@subheading Equivalence

The Listen Cancel Request message primitive is equivalent to the
@prim{N_UNBIND_REQ} of the NPI; the Listen Cancel Response,
@prim{N_OK_ACK}.

@page
@node PVC Attach
@section PVC Attach
@cindex PVC Attach

@subheading Format

The PVC Attach uses the @type{pvcattf} structure.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{pvcattf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{pvcattf} structure is formatted as follows:

@example
@group
struct xcallf @{
    unsigned char xl_type;
    unsigned char xl_command;
    unsigned short lci;
    union @{
        uint32_t link_id;
        uint32_t sn_id;
    @};
    unsigned char reqackservice;
    unsigned char reqnsdulimit;
    int nsdulimit;
    int result_code;
@};
@end group
@end example

@subheading Usage

The PVC Attach message primitive is used by the NS user when requesting an
attachment of the Stream to a PVC.  The NS provider uses the PVC Attach message
primitive to acknolwedge a previous PVC Attach message primitive issued by the
NS user.
The control part of the message consists of one @msg{M_PROTO} message block
containing the @type{pvcattf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{pvcattf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_PVC_ATTACH}.
@item lci
Conveys the logical channel identifier (LCI) of the PVC.
@item link_id
Conveys the link identifier for the PVC.  This is a Solstice X.25 specific
field.

The @member{link_id} and @member{sn_id} fields are equivalent, with a slightly
different name and format for Solstice X.25.
@item sn_id
Conveys the subnetwork identifier for the PVC.  This is the non-Solstice X.25
specific field.

This field is sometimes specified as a @type{unsigned long}.  It has been
declared as an @type{uint32_t} to support compatibility of 32-bit applications
running over a 64-bit kernel.
@item reqackservice
When non-zero, conveys that the receipt confirmation service is requested by the
use of the D-bit.  This field can have one of the following values:
@multitable @columnfractions 0.2 0.1 0.7
@item Constant @tab Value @tab Description
@item - @tab 0 @tab No receipt confirmation.
@item @pval{RC_CONF_DTE} @tab 1 @tab Confirmation by the remote terminal.
@item @pval{RC_CONF_APP} @tab 2 @tab Confirmation by the remote application.
@end multitable
In the case of receipt confirmation by the remote station, no acknowledgements
are expected or given over the X.25 NLI service interface.  For receipt
confirmation by the remote application, there is a one-to-one correspondence
between D-bit data and acknolwedgements passing in opposite directions.  One
data acknowledgement is received or sent for each D-bit data packet sent or
received over the X.25 NLI service interface.
@item reqnsdulimit
When non-zero, conveys that an NSDU concantenation limit is asserted and the
@member{nsdulimit} field is valid.
@item nsdulimit
When non-zero, conveys the packet concatenation limit for NSDUs when the
@member{reqnsdulimit} field is also non-zero.
@item result_code
When the PVC Attach message primitive is used by the NS provider to acknowledge
a previous PVC Attach message primitive issued by the NS user, this field is
non-zero when an error has been encountered that prevents the attachment of the
PVC.

This field can have one of the following values:
@multitable @columnfractions 0.3 0.1 0.6
@item Constant @tab Value @tab Description
@item @pval{PVC_SUCCESS} @tab 0 @tab Operation was successful.
@item @pval{PVC_NOSUCHSUBNET} @tab 1 @tab Subnetwork not configured.
@item @pval{PVC_CFGERROR} @tab 2 @tab LCI not in range, no PVCs.
@item @pval{PVC_NODBELEMENTS} @tab 3 @tab  No database available.
@item @pval{PVC_PARERROR} @tab 4 @tab Error in request parameters.
@item @pval{PVC_BUSY} @tab 6 @tab PVC in non-attach state.
@item @pval{PVC_CONGESTION} @tab 7 @tab Resources unavailable.
@item @pval{PVC_WRONGSTATE} @tab 8 @tab  State wrong for function.
@item @pval{PVC_NOPERMISSION} @tab 9 @tab Inadequate permissions.
@item @pval{PVC_LINKDOWN} @tab 10 @tab The link has gone down.
@item @pval{PVC_RMTERROR} @tab 11 @tab No reponse from remote.
@item @pval{PVC_USRERROR} @tab 12 @tab User interface error detected.
@item @pval{PVC_INTERROR} @tab 13 @tab Internal error.
@item @pval{PVC_NOATTACH} @tab 14 @tab Not attached yet.
@item @pval{PVC_WAIT} @tab 15 @tab Wait code, not to user.
@end multitable
@end table

@subheading State

This message primitive is valid in the disconnected phase.

@subheading Response

When an NS user issues a PVC Attach, the NS user expects a PVC Attach message
primitive from the NS provider in response.

@subheading Equivalence

The PVC Attach message primitive is equivalent to the
@prim{N_CONN_REQ} and @prim{N_CONN_CON} of the NPI.

@page
@node PVC Detach
@section PVC Detach
@cindex PVC Detach

@subheading Format

The PVC Detach uses the @type{pvcdetf} structure.
The control part of the message primitive consists of one @msg{M_PROTO} message
block containing the @type{pvcdetf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

The @type{pvcdetf} structure is formatted as follows:

@example
@group
struct pvcdetf @{
    unsigned char xl_type;
    unsigned char xl_command;
    int reason_code;
@};
@end group
@end example

@subheading Usage

The PVC Detach message primitive, @prim{N_PVC_DETACH}, is used when an NS
user wishes to detach from a currently attached PVC.
The control part of the message primitive consists of one @msg{M_PROTO} message
block containing the @type{pvcdetf} structure.
There is no data part (@msg{M_DATA} message blocks) associated with this message primitive.

@subheading Parameters

The @type{pvcdetf} structure contains the following members:

@table @member
@item xl_type
Always @prim{XL_CTL}.
@item xl_command
Always @prim{N_PVC_DETACH}.
@item reason_code
When the PVC Detach message primitive is used by the NS provider to acknowledge
a previous PVC Detach message primitive issued by the NS user, this field is
non-zero when an error has been encountered that prevents detaching the PVC.

This field can have one of the following values:
@multitable @columnfractions 0.3 0.1 0.6
@item Constant @tab Value @tab Description
@item @pval{PVC_SUCCESS} @tab 0 @tab Operation was successful.
@item @pval{PVC_NOSUCHSUBNET} @tab 1 @tab Subnetwork not configured.
@item @pval{PVC_CFGERROR} @tab 2 @tab LCI not in range, no PVCs.
@item @pval{PVC_NODBELEMENTS} @tab 3 @tab  No database available.
@item @pval{PVC_PARERROR} @tab 4 @tab Error in request parameters.
@item @pval{PVC_BUSY} @tab 6 @tab PVC in non-attach state.
@item @pval{PVC_CONGESTION} @tab 7 @tab Resources unavailable.
@item @pval{PVC_WRONGSTATE} @tab 8 @tab  State wrong for function.
@item @pval{PVC_NOPERMISSION} @tab 9 @tab Inadequate permissions.
@item @pval{PVC_LINKDOWN} @tab 10 @tab The link has gone down.
@item @pval{PVC_RMTERROR} @tab 11 @tab No reponse from remote.
@item @pval{PVC_USRERROR} @tab 12 @tab User interface error detected.
@item @pval{PVC_INTERROR} @tab 13 @tab Internal error.
@item @pval{PVC_NOATTACH} @tab 14 @tab Not attached yet.
@item @pval{PVC_WAIT} @tab 15 @tab Wait code, not to user.
@end multitable
@end table

@subheading State

This message primitive is valid in the PVC attached phase.

@subheading Response

When an NS user issues a PVC Detach, the NS user expects a PVC Detach message
primitive from the NS provider in response.

@subheading Equivalence

The PVC Detach message primitive is equivalent to the
@prim{N_DISCON_REQ} of the NPI.

@node NLI Input-Output Controls
@chapter NLI Input-Output Controls

@menu
* Input-Output Control Data Structures::
* Input-Output Control Commands::
@end menu

@node Input-Output Control Data Structures
@section Input-Output Control Data Structures
@cindex Input-Output Control Data Structures

@node Input-Output Control Commands
@section Input-Output Control Commands
@cindex Input-Output Control Commands

@menu
* N_snident::
* N_snmode::
* N_snconfig::
* N_snread::
* N_getstats::
* N_zerostats::
* N_putpvcmap::
* N_getpvcmap::
* N_getVCstatus::
* N_getnliversion::
* N_traceon::
* N_traceoff::
* NUI_MSG Input-Output Controls::
* N_zeroVCstats::
* N_putx32map::
* N_getx32map::
* N_getSNIDstats::
* N_zeroSNIDstats::
* N_setQOSDATPRI::
* N_resetQOSDATPRI::
@end menu

@multitable @columnfractions .2 .8
@item @pioc{N_snident} @tab -
@item @pioc{N_snmode} @tab -
@item @pioc{N_snconfig} @tab -
@item @pioc{N_snread} @tab -
@item @pioc{N_getstats} @tab -
@item @pioc{N_zerostats} @tab -
@item @pioc{N_putpvcmap} @tab -
@item @pioc{N_getpvcmap} @tab -
@item @pioc{N_getVCstatus} @tab -
@item @pioc{N_getnliversion} @tab -
@item @pioc{N_traceon} @tab -
@item @pioc{N_traceoff} @tab -
@item @pioc{N_nuimsg} @tab -
@item @pioc{N_nuiput} @tab -
@item @pioc{N_nuidel} @tab -
@item @pioc{N_nuiget} @tab -
@item @pioc{N_nuimget} @tab -
@item @pioc{N_nuireset} @tab -
@item @pioc{N_zeroVCstats} @tab -
@item @pioc{N_putx32map} @tab -
@item @pioc{N_getx32map} @tab -
@item @pioc{N_getSNIDstats} @tab -
@item @pioc{N_zeroSNIDstats} @tab -
@item @pioc{N_setQOSDATPRI} @tab -
@item @pioc{N_resetQOSDATPRI} @tab -
@end multitable

@page
@node N_snident
@subsection N_snident

The @pioc{N_snident} input-output control identifies the subnetwork.  This is
performed by indicating the lower multiplex identifier returned from the
@pioc{I_LINK} @cite{STREAMS} operation and assigning a subnetwork identifier and
a @member{dl_sap} and @member{dl_max_conind} to bind.

@subsubheading Format

The argument to the @pioc{N_snident} input-output control is a pointer to a
@type{xll_reg} structure, formatted as follows:

@example
@group
struct xll_reg @{
    uint32_t snid;
    uint32_t lmuxid;
    uint16_t dl_sap;
    uint16_t dl_max_conind;
@};
@end group
@end example

@subsubheading Parameters

The @type{xll_reg} structure contains the following members:

@table @member
@item snid
Specifies the subnetwork identifier to assign to the data link.
@item lmuxid
Identifies the data link as a linked Stream beneath the lower multiplex.
@item dl_sap
Specifies the DLSAP to bind the Stream.
@item dl_max_conind
Specifies the maximum number of connection indications to bind to the Stream.
@end table

@page
@node N_snmode
@subsection N_snmode

The @pioc{N_snmode} input-output control adjusts only the subscription mode
bits.  When @member{rd_wr} is set to read, the subscription mode bits (see the
@member{SUB_MODES} member in the @type{wlcfg} structure) are read; when set to
write, the mode bits are written.

@subsubheading Format

The argument to the @pioc{N_snmode} input-output control is a pointer to a
@type{snoptformat} structure, formatted as follows:

@example
@group
struct snoptformat @{
    uint32_t U_SN_ID;
    uint16_t newSUB_MODES;
    uint8_t rd_wr;
@};
@end group
@end example

@subsubheading Parameters

The @type{snoptformat} structure contains the following members:

@table @member
@item U_SN_ID
Specifies the subnetwork identifier of the data link whose modes are to be read
or written.
@item newSUB_MODES
Contains the read or written subnetwork modes.  This can contain a bitmask of
zero or more of the following bits:
@multitable {00}{@code{SUB_NUI_OVERRIDE}}{Subscribe fast select with restriction on response.xxxx}
@item 0 @tab @pval{SUB_EXTENDED} @tab Subscribe extended facilities.
@item 1 @tab @pval{BAR_EXTENDED} @tab Bar extended facilities.
@item 2 @tab @pval{SUB_FSELECT} @tab Subscribe fast select.
@item 3 @tab @pval{BAR_FSELECT} @tab Bar fast select.
@item 4 @tab @pval{SUB_FSRRESP} @tab Subscribe fast select with restriction on response.
@item 5 @tab @pval{SUB_REVCHARGE} @tab Subscribe reverse charging.
@item 6 @tab @pval{SUB_LOC_CHG_PREV} @tab Subscribe local charge prevention.
@item 7 @tab @pval{BAR_INCALL} @tab Bar incoming calls.
@item 8 @tab @pval{BAR_OUTCALL} @tab Bar ougoing calls.
@item 9 @tab @pval{SUB_TOA_NPI_FMT} @tab Subscribe TOA/NPI address extensions.
@item 10 @tab @pval{BAR_TOA_NPI_FMT} @tab Bar TOA/NPI address extensions.
@item 11 @tab @pval{SUB_NUI_OVERRIDE} @tab Subscribe NUI override.
@item 12 @tab @pval{BAR_CALL_X32_REG} @tab Bar calls while X.32 registration in progress.
@end multitable
@item rd_wr
Specifies whether to read or write the subnetwork modes.
@end table

@page
@node N_snconfig
@subsection N_snconfig

The @pioc{N_snconfig} input-output control is used to configure a data link
connected to a subnetwork, but subnetwork identifier.

@subsubheading Format

The argument to the @pioc{N_snconfig} input-output control is a pointer to a
@type{wlcfg} structure, formatted as follows:

@example
struct wlcfg @{
    uint32_t U_SN_ID;
    uint8_t NET_MODE;
    uint8_t X25_VSN;
    uint8_t L3PLPMODE;
    uint16_t LPC;
    uint16_t HPC;
    uint16_t LIC;
    uint16_t HIC;
    uint16_t HTC;
    uint16_t LOC;
    uint16_t HOC;
    uint16_t NPCchannels;
    uint16_t NICchannels;
    uint16_t NTCchannels;
    uint16_t NOCchannels;
    uint16_t Nochnls;
    uint8_t THISGFI;
    uint8_t LOCMAXPKTSIZE;
    uint8_t REMMAXPKTSIZE;
    uint8_t LOCDEFPKTSIZE;
    uint8_t REMDEFPKTSIZE;
    uint8_t LOCMAXWSIZE;
    uint8_t REMMAXWSIZE;
    uint8_t LOCDEFWSIZE;
    uint8_t REMDEFWSIZE;
    uint16_t MAXNSDULEN;
    int16_t ACKDELAY;
    int16_t T20value;
    int16_t T21value;
    int16_t T22value;
    int16_t T23value;
    int16_t Tvalue;
    int16_t T25value;
    int16_t T26value;
    int16_t T28value;
    int16_t idlevalue;
    int16_t connectvalue;
    uint8_t R20value;
    uint8_t R22value;
    uint8_t R23value;
    uint8_t R28value;
    uint16_t localdelay;
    uint16_t accessdelay;
    uint8_t locmaxthclass;
    uint8_t remmaxthclass;
    uint8_t locdefthclass;
    uint8_t remdefthclass;
    uint8_t locminthclass;
    uint8_t remminthclass;
    uint8_t CUG_CONTROL;
    uint16_t SUB_MODES;
    struct @{
        uint16_t SNMODES;
        uint8_t intl_addr_recogn;
        uint8_t intl_prioritised;
        uint8_t dnic1;
        uint8_t dnic2;
        uint8_t prty_encode_control;
        uint8_t prty_pkt_forced_value;
        uint8_t src_addr_control;
        uint8_t dbit_control;
        uint8_t thclass_neg_to_def;
        uint8_t thclass_type;
        uint8_t thclass_wmap[16];
        uint8_t thclass_pmap[16];
    @} psdn_local;
    struct lsapformat local_address;
@};
@end example

@subsubheading Parameters

The @type{wlcfg} structure contains the following members:

@table @member
@item U_SN_ID
@item NET_MODE
@item X25_VSN
@item L3PLPMODE
@item LPC
@item HPC
@item LIC
@item HIC
@item HTC
@item LOC
@item HOC
@item NPCchannels
@item NICchannels
@item NTCchannels
@item NOCchannels
@item Nochnls
@item THISGFI
@item LOCMAXPKTSIZE
@item REMMAXPKTSIZE
@item LOCDEFPKTSIZE
@item REMDEFPKTSIZE
@item LOCMAXWSIZE
@item REMMAXWSIZE
@item LOCDEFWSIZE
@item REMDEFWSIZE
@item MAXNSDULEN
@item ACKDELAY
@item T20value
@item T21value
@item T22value
@item T23value
@item Tvalue
@item T25value
@item T26value
@item T28value
@item idlevalue
@item connectvalue
@item R20value
@item R22value
@item R23value
@item R28value
@item localdelay
@item accessdelay
@item locmaxthclass
@item remmaxthclass
@item locdefthclass
@item remdefthclass
@item locminthclass
@item remminthclass
@item CUG_CONTROL
@item SUB_MODES
@item psdn_local
@table @member
@item SNMODES
@item intl_addr_recogn
@item intl_prioritised
@item dnic1
@item dnic2
@item prty_encode_control
@item prty_pkt_forced_value
@item src_addr_control
@item dbit_control
@item thclass_neg_to_def
@item thclass_type
@item thclass_wmap
@item thclass_pmap
@end table
@item local_address
@end table

@page
@node N_snread
@subsection N_snread

The @pioc{N_snread} input-output control is used to read the configuration
information for a specified subnetwork identifier.

@subsubheading Format

The argument to the @pioc{N_snread} input-output control is a pointer to a
@type{wlcfg} structure, see @ref{N_snconfig}.

@subsubheading Parameters

@xref{N_snconfig}.

@page
@node N_getstats
@subsection N_getstats

The @pioc{N_getstats} input-output control is used to collect the global
statistics.

@subsubheading Format

The argument to the @pioc{N_getstats} input-output control is a pointer to a
buffer aread containing 101 32-bit unsigned integer values.

@subsubheading Parameters

The buffer area contains 101 32-bit unsigned integer values as follows:

@multitable {000}{@member{LNeednotneeded_g}}{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
@item 0 @tab cll_in_g @tab Calls received and indicated.
@item 1 @tab cll_out_g @tab Calls sent.
@item 2 @tab caa_in_g @tab Calls established outgoing.
@item 3 @tab caa_out_g @tab Calls established incoming.
@item 4 @tab ed_in_g @tab Interrupts received.
@item 5 @tab ed_out_g @tab Interrupts sent.
@item 6 @tab rnr_in_g @tab Receiver not ready received.
@item 7 @tab rnr_out_g @tab Receiver not ready sent.
@item 8 @tab rr_in_g @tab Receiver ready received.
@item 9 @tab rr_out_g @tab Receiver ready sent.
@item 10 @tab rst_in_g @tab Resets received.
@item 11 @tab rst_out_g @tab Resets sent.
@item 12 @tab rsc_in_g @tab Reset confirms received.
@item 13 @tab rsc_out_g @tab Reset confirms sent.
@item 14 @tab clr_in_g @tab Clears received.
@item 15 @tab clr_out_g @tab Clears sent.
@item 16 @tab clc_in_g @tab Clear confirms received.
@item 17 @tab clc_out_g @tab Clear confirms sent.
@item 18 @tab cll_coll_g @tab Call collision count, not rejected.
@item 19 @tab cll_uabort_g @tab Calls aborted by user before sent.
@item 20 @tab rjc_buflow_g @tab Calls rejected no buffers before sent.
@item 21 @tab rjc_coll_g @tab Calls rejected collision DCE mode.
@item 22 @tab rjc_failNRS_g @tab Calls rejected negative NRS response.
@item 23 @tab rjc_lstate_g @tab Calls rejected link disconnecting.
@item 24 @tab rjc_nochnl_g @tab Calls rejected no local channels left.
@item 25 @tab rjc_nouser_g @tab Calls rejected no user on NSAP.
@item 26 @tab rjc_remote_g @tab Calls rejected by remote responder.
@item 27 @tab rjc_u_g @tab Calls rejected by NS user.
@item 28 @tab dg_in_g @tab Diagnostic packets received.
@item 29 @tab dg_out_g @tab Diagnostic packets sent.
@item 30 @tab p4_ferr_g @tab Format errors in P4.
@item 31 @tab rem_perr_g @tab Remote protocol errors.
@item 32 @tab res_ferr_g @tab Restart format errors.
@item 33 @tab res_in_g @tab Restarts received (including DTE/DXE).
@item 34 @tab res_out_g @tab Restarts sent (including DTE/DXE).
@item 35 @tab vcs_labort_g @tab Circuits aborted by link event.
@item 36 @tab r23exp_g @tab Circuits hung by R23 expiry.
@item 37 @tab l2conin_g @tab Link level connection established.
@item 38 @tab l2conok_g @tab LLC connections accepted.
@item 39 @tab l2conrej_g @tab LLC connections rejected.
@item 40 @tab l2refusal_g @tab LLC connect requests refused.
@item 41 @tab l2lzap_g @tab Operator requests to kill link.
@item 42 @tab l2r20exp_g @tab R20 retransmission expiry.
@item 43 @tab l2dxeexp_g @tab DXE connect expiry.
@item 44 @tab l2dxebuf_g @tab DXE resolve abort, no buffers.
@item 45 @tab l2noconfig_g @tab No configuration base.
@item 46 @tab xiffnerror_g @tab Upper interface bad M_PROTO type.
@item 47 @tab xintdisc_g @tab Internal disconnecte events.
@item 48 @tab xifaborts_g @tab Upper interface abort_vc called.
@item 49 @tab PVCusergone_g @tab Count of non-user interactions.
@item 50 @tab max_opens_g @tab Highest number of simultaneous opens.
@item 51 @tab vcs_est_g @tab Virtual circuits established since reset.
@item 52 @tab bytes_in_g @tab Bytes received.
@item 53 @tab bytes_out_g @tab Bytes sent.
@item 54 @tab dt_in_g @tab Data packets received.
@item 55 @tab dt_out_g @tab Data packets sent.
@item 56 @tab res_conf_in_g @tab Restart confirms received.
@item 57 @tab res_conf_out_g @tab Restart confirms sent.
@item 58 @tab reg_in_g @tab Registration requests received.
@item 59 @tab reg_out_g @tab Registration requests sent.
@item 60 @tab reg_conf_in_g @tab Registration confirms received.
@item 61 @tab reg_conf_out_g @tab Registration confirms sent.
@item 62 @tab l2r28exp_g @tab R28 retransmission expiries.
@item 63 @tab Cantlzap_g @tab Operator link reset refused.
@item 64 @tab L2badcc_g @tab -
@item 65 @tab L2baddcnf_g @tab -
@item 66 @tab L3T25timeouts_g @tab -
@item 67 @tab L3badAE_g @tab -
@item 68 @tab L3badT20_g @tab -
@item 69 @tab L3badT24_g @tab -
@item 70 @tab L3badT25_g @tab -
@item 71 @tab L3badT28_g @tab -
@item 72 @tab L3badevent_g @tab -
@item 73 @tab L3badgfi_g @tab -
@item 74 @tab L3badlstate_g @tab -
@item 75 @tab L3badltock2_g @tab -
@item 76 @tab L3badrandom_g @tab -
@item 77 @tab L3badxtock0_g @tab -
@item 78 @tab L3clrbadstate_g @tab -
@item 79 @tab L3conlt0_g @tab -
@item 80 @tab L3deqfailed_g @tab -
@item 81 @tab L3indnodata_g @tab -
@item 82 @tab L3matrixcall_g @tab -
@item 83 @tab L3nodb_g @tab -
@item 84 @tab L3qoscheck_g @tab -
@item 85 @tab L3outbad_g @tab -
@item 86 @tab L3shortframe_g @tab -
@item 87 @tab L3tabfault_g @tab -
@item 88 @tab L3usererror_g @tab -
@item 89 @tab L3usergone_g @tab -
@item 90 @tab LNeednotneeded_g @tab -
@item 91 @tab NSUbadref_g @tab -
@item 92 @tab NSUdtnull_g @tab -
@item 93 @tab NSUednull_g @tab -
@item 94 @tab NSUrefrange_g @tab -
@item 95 @tab NeednotNeeded_g @tab -
@item 96 @tab NoNRSrequest_t @tab -
@item 97 @tab UDRbad_g @tab -
@item 98 @tab Ubadint_g @tab -
@item 99 @tab Unoint_g @tab -
@item 100 @tab L3baddiag_g @tab -
@end multitable

@page
@node N_zerostats
@subsection N_zerostats

The @pioc{N_zerostats} input-output control is used to zero the global
statistics.  The same statistics buffer as is provided for @pioc{N_getstats} is
provided so that the statistics immediately before the reset can be collected.

@subsubheading Format

The format of the buffer area of the @pioc{N_zerostats} input-output control is
identical to that of @ref{N_getstats}.

@subsubheading Parameters

The parameters of the buffer contain the statistics that were collected
immediately before resetting the statistics to zero.

@page
@node N_putpvcmap
@subsection N_putpvcmap

@subsubheading Format

@example
@group
struct pvcmapf @{
    int first_ent;
    int num_ent;
    struct pvcconf entries[0];
@};
@end group
@end example

@example
@group
struct pvcconf @{
    uint32_t sn_id;
    uint16_t lci;
    uint8_t locpacket;
    uint8_t rempacket;
    uint8_t locwsize;
    uint8_t remwsize;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item first_ent
@item num_ent
@item entries
@table @member
@item sn_id
@item lci
@item locpacket
@item rempacket
@item locwsize
@item remwsize
@end table
@end table

@page
@node N_getpvcmap
@subsection N_getpvcmap

@page
@node N_getVCstatus
@subsection N_getVCstatus

@subsubheading Format

@example
@group
struct vcstatusf @{
    int first_ent;
    int num_ent;
    struct vcinfo vc;
@};
@end group
@end example

@example
@group
struct vcinfo @{
    struct xaddrf rem_addr;
    struct xaddrf loc_addr;
    uint32_t xu_ident;
    uint32_t process_id;
    uint16_t lci;
    uint8_t xstate;
    uint8_t xtag;
    uint8_t ampvc;
    uint8_t call_direction;
    uint8_t vctype;
    uint32_t perVC_stats[27];
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item first_ent
@item num_ent
@item vc
@table @member
@item rem_addr
@item loc_addr
@item xu_ident
@item process_id
@item lci
@item xstate
@item xtag
@item ampvc
@item call_direction
@item vctype
@item perVC_stats
@multitable {00}{rst_timeouts_v}{Calls established outgoing.xxxxxxxx}
@item 0 @tab cll_in_v @tab Calls received and indicated.
@item 1 @tab cll_out_v @tab Calls sent.
@item 2 @tab caa_in_v @tab Calls established outgoing.
@item 3 @tab caa_out_v @tab Calls established incoming.
@item 4 @tab dt_in_v @tab Data packets received.
@item 5 @tab dt_out_v @tab Data packets sent.
@item 6 @tab ed_in_v @tab Interrupts received.
@item 7 @tab ed_out_v @tab Interrupts sent.
@item 8 @tab rnr_in_v @tab Receiver not ready received.
@item 9 @tab rnr_out_v @tab Receiver not ready sent.
@item 10 @tab rr_in_v @tab Receiver ready received.
@item 11 @tab rr_out_v @tab Receiver ready sent.
@item 12 @tab rst_in_v @tab Resets received.
@item 13 @tab rst_out_v @tab Resets sent.
@item 14 @tab rsc_in_v @tab Restart confirms received.
@item 15 @tab rsc_out_v @tab Restart confirms sent.
@item 16 @tab clr_in_v @tab Clears received.
@item 17 @tab clr_out_v @tab Clears sent.
@item 18 @tab clc_in_v @tab Clear confirms received.
@item 19 @tab clc_out_v @tab Clear confirms sent.
@item 20 @tab octets_in_v @tab Octets received.
@item 21 @tab octets_out_v @tab Octets sent.
@item 22 @tab rst_timeouts_v @tab Reset timeouts.
@item 23 @tab ed_timeouts_v @tab Interrupt timeouts.
@item 24 @tab prov_rst_in_v @tab Provider initiated resets.
@item 25 @tab rem_rst_in_v @tab Remote initiated resets.
@end multitable
@end table
@end table

@page
@node N_getnliversion
@subsection N_getnliversion

@subsubheading Format

@example
@group
struct nliformat @{
    unsigned char version;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item version
@end table

@page
@node N_traceon
@subsection N_traceon

@page
@node N_traceoff
@subsection N_traceoff

@page
@node NUI_MSG Input-Output Controls
@subsection NUI_MSG Input-Output Controls

@menu
* N_nuimsg::
* N_nuiput::
* N_nuidel::
* N_nuiget::
* N_nuimget::
* N_nuireset::
@end menu

@page
@node N_nuimsg
@subsubsection N_nuimsg

@page
@node N_nuiput
@subsubsection N_nuiput

@subsubheading Format

@example
@group
struct nui_put @{
    char prim_class;
    char op;
    struct nuiformat nuid;
    struct facformat nuifacility;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item prim_class
Always @pval{NUI_MSG}.
@item op
Always @pval{NUI_PUT}.
@item nuid
@item nuifacility
@end table

@page
@node N_nuidel
@subsubsection N_nuidel

@subsubheading Format

@example
@group
struct nui_del @{
    char prim_class;
    char op;
    struct nuiformat nuid;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item prim_class
Always @pval{NUI_MSG}.
@item op
Always @pval{NUI_DEL}.
@item nuid
@end table

@page
@node N_nuiget
@subsubsection N_nuiget

@subsubheading Format

@example
@group
struct nui_get @{
    char prim_class;
    char op;
    struct nuiformat nuid;
    struct facformat nuifacility;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item prim_class
Always @pval{NUI_MSG}.
@item op
Always @pval{NUI_GET}.
@item nuid
@item nuifacility
@end table

@page
@node N_nuimget
@subsubsection N_nuimget

@subsubheading Format

@example
@group
struct nui_mget @{
    char prim_class;
    char op;
    unsigned int first_ent;
    unsigned int last_ent;
    unsigned int num_ent;
    union @{
        char buf[0];
        struct nui_addr entries[0];
    @};
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item prim_class
Always @pval{NUI_MSG}.
@item op
Always @pval{NUI_MGET}.
@item first_ent
@item last_ent
@item num_ent
@item buf
@item entries
@end table

@page
@node N_nuireset
@subsubsection N_nuireset

@subsubheading Format

@example
@group
struct nui_reset @{
    char prim_class;
    char op;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item prim_class
Always @pval{NUI_MSG}.
@item op
Always @pval{NUI_RESET}.
@end table

@page
@node N_zeroVCstats
@subsection N_zeroVCstats

@page
@node N_putx32map
@subsection N_putx32map

@page
@node N_getx32map
@subsection N_getx32map

@page
@node N_getSNIDstats
@subsection N_getSNIDstats

@subsubheading Format

@example
@group
struct persnidstats @{
    uint32_t snid;
    int32_t network_state;
    uint32_t mon_array[59];
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item snid
@item network_state
@item mon_array
@multitable {00}{clr_timeouts_s}{Maximum number of PVCs ever attached.xxxxx}
@item 0 @tab cll_in_s @tab Calls received.
@item 1 @tab cll_out_s @tab Calls sent.
@item 2 @tab caa_in_s @tab Calls established outgoing.
@item 3 @tab caa_out_s @tab Calls established incoming.
@item 4 @tab dt_in_s @tab Data packets received.
@item 5 @tab dt_out_s @tab Data packets sent.
@item 6 @tab ed_in_s @tab Interrupts received.
@item 7 @tab ed_out_s @tab Interrupts sent.
@item 8 @tab rnr_in_s @tab Receiver not ready received.
@item 9 @tab rnr_out_s @tab Receiver not ready sent.
@item 10 @tab rr_in_s @tab Receiver ready received.
@item 11 @tab rr_out_s @tab Receiver ready sent.
@item 12 @tab prov_rst_in_s @tab Provider initiated resets received.
@item 13 @tab rem_rst_in_s @tab Remote initiated resets received.
@item 14 @tab rsc_in_s @tab Reset confirms received.
@item 15 @tab rsc_out_s @tab Reset confirms sent.
@item 16 @tab prov_clr_in_s @tab Provider initiated clears received.
@item 17 @tab clc_in_s @tab Clear confirms received.
@item 18 @tab clc_out_s @tab Clear confirms sent.
@item 19 @tab perr_in_s @tab Packets with protocol errors received.
@item 20 @tab out_vcs_s @tab Outgoing circuits.
@item 21 @tab in_vcs_s @tab Incoming circuits.
@item 22 @tab twoway_vcs_s @tab Two-way circuits.
@item 23 @tab res_in_s @tab Restarts received.
@item 24 @tab res_out_s @tab Restarts sent.
@item 25 @tab res_timeouts_s @tab Restart timeouts.
@item 26 @tab cll_timeouts_s @tab Call timeouts.
@item 27 @tab rst_timeouts_s @tab Reset timeouts.
@item 28 @tab clr_timeouts_s @tab Clear timeouts.
@item 29 @tab ed_timeouts_s @tab Interrupt timeouts.
@item 30 @tab retry_exceed_s @tab Retry count exceeded.
@item 31 @tab clear_exceed_s @tab Clear count exceeded.
@item 32 @tab octets_in_s @tab Octets received.
@item 33 @tab octets_out_s @tab Octets sent.
@item 34 @tab rec_in_s @tab Restart confirms received.
@item 35 @tab rec_out_s @tab Restart confirms sent.
@item 36 @tab rst_in_s @tab Reset confirms received.
@item 37 @tab rst_out_s @tab Reset confirms sent.
@item 38 @tab dg_in_s @tab Diagnostic packets received.
@item 39 @tab dg_out_s @tab Diagnostic packets sent.
@item 40 @tab res_in_conn_s @tab Restarts in connected state.
@item 41 @tab clr_in_s @tab Clears received.
@item 42 @tab clr_out_s @tab Clears sent.
@item 43 @tab pkts_in_s @tab Packets received.
@item 44 @tab pkts_out_s @tab Packets sent.
@item 45 @tab vcs_est_s @tab SVCs established.
@item 46 @tab max_svcs_s @tab Maximum number of SVCs opened.
@item 47 @tab svcs_s @tab SVCs currently open.
@item 48 @tab pvcs_s @tab PVCs currently attached.
@item 49 @tab max_pvcs_s @tab Maximum number of PVCs ever attached.
@item 50 @tab rjc_coll_s @tab Call rejects overload.
@item 51 @tab rjc_failNRS_s @tab Call rejects failed no resource.
@item 52 @tab rjc_nouser_s @tab Call rejects failed no user.
@item 53 @tab rjc_buflow_s @tab Call rejects buffers low.
@item 54 @tab reg_in_s @tab Registration requests received.
@item 55 @tab reg_out_s @tab Registration requests sent.
@item 56 @tab reg_conf_in_s @tab Registration confirms received.
@item 57 @tab reg_conf_out_s @tab Registration confirms sent.
@end multitable
@end table

@page
@node N_zeroSNIDstats
@subsection N_zeroSNIDstats

@page
@node N_setQOSDATPRI
@subsection N_setQOSDATPRI

@subsubheading Format

@example
@group
struct qosdatpri @{
    int32_t band;
    uint32_t tx_window;
@};
@end group
@end example

@subsubheading Parameters

@table @member
@item band
@item tx_window;
@end table

@page
@node N_resetQOSDATPRI
@subsection N_resetQOSDATPRI


@node Allowable Sequence of NLI Primitives
@chapter Allowable Sequence of NLI Primitives

@menu
* Opening a Connection::
* Data Transfer::
* Closing a Connection::
* Listening::
* PVC Operation::
@end menu

@node Opening a Connection
@section Opening a Connection
@cindex Opening a Connection

@node Data Transfer
@section Data Transfer
@cindex Data Transfer

@node Closing a Connection
@section Closing a Connection
@cindex Closing a Connection

@node Listening
@section Listening
@cindex Listening

@node PVC Operation
@section PVC Operation
@cindex PVC Operation

@c @node Precedence of NPI Primitives
@c @chapter Precedence of NPI Primitives

@c @node Guidelines for Protocol Independent NS Users
@c @appendix Guidelines for Protocol Independent NS Users

@c @node Required Information for NS Provider-Specific Addenda
@c @appendix Required Information for NS Provider-Specific Addenda

@node NLI Header Files
@appendix NLI Header Files

Applications using the Network Layer Interface (NLI) need to include several
system header files:

@table @file
@item <errno.h>
@item <sys/types.h>
@item <sys/ioctl.h>
@item <sys/stropts.h>
@item <sys/snet/x25_proto.h>
@end table

@node NLI Library
@appendix NLI Library

@node NLI Drivers and Modules
@appendix NLI Drivers and Modules

@menu
* NLI Multiplexing Driver::
* NLI Conversion Module::
* NPI Conversion Module::
* CONS Module::
* XX25 Module::
* IXE Multiplexing Driver::
* IP Multiplexing Driver::
@end menu

The Network Layer Interface (NLI) is used to provide services to a number of
@dfn{STREAMS} drivers and modules in addition to user-space applications.
@cite{@value{PACKAGE_TITLE}} provides a range of @dfn{STREAMS} multiplexing
drivers, pseudo-device drivers, and pushable modules that complement the X.25
Packet Layer Protocol driver that provides the Network Layer Interface at it
upper layer.

@figuresized{nli_figc1,1,NLI Drivers and Modules,5.5in}

@figref{1} illustrates the @dfn{STREAMS} multiplexing drivers, pseudo-device
drivers, and pushable modules, and their organization.

@node NLI Multiplexing Driver
@section NLI Multiplexing Driver
@cindex NLI Multiplexing Driver

The NLI @dfn{STREAMS} multiplexing driver implements the X.25 Packet Layer
Protocol (PLP)
and provides the Network Layer Interface (NLI), Version 3, at it
upper multiplex.  Data links are linked beneath the driver at the lower
multiplex.  Linked Streams under @cite{@value{PACKAGE_TITLE}} conform to the
Data Link Provider Interface (DLPI),@footnote{``@cite{Open Group CAE
Specification: Data Link Provider Interface (DLPI) Specification, Revision
2.0.0, Draft 2, August 20, 1992, (Parsippany, New Jersey), UNIX International,
Inc., UNIX International Press}.'' Available from
@uref{http://www.opengroup.org/onlinepubs/,The Open Group} or
@uref{http://www.openss7.org/docs/dlpi.pdf,The OpenSS7 Project}.} however,
implemetnations based on SpiderX.25 might use some other interface at this
level.@footnote{For compatibility, the issue is moot.}

Each Stream on the upper multiplex of the NLI multiplexing driver represents
either a VC or a PVC.  Each Stream on the lower multiplex of the NLI
multiplexing driver represents a data link@footnote{``@cite{ISO/IEC 7776:1995,
Information technology -- Telecommunications information exchange between
systems -- High-level data link control procedures -- Description of the X.25
LAPB-compatible DTE data link procedures, Second Edition, July 1, 1995,
International Organization for Standardization.}''
Available from @uref{http://www.iso.org/,ISO}.}
or subnetwork@footnote{``@cite{ISO/IEC 8881:1989, Information Processing Systems
-- Data Communications -- User of the X.25 Packet Level Protocol in Local Area
Networks, 1989, ISO/IEC, International Organization for Standardization.}''
Available from @uref{http://www.iso.org/,ISO}.}
interface.@footnote{``@cite{ANSI/IEEE Standard 802.2-1998 [ISO/IEC
8802-2:1998], IEEE Standard for Information Technology -- Telecommunications and
Information Exchange Between Systems -- Local and Metropolitan Area Networks --
Specific Requirements -- Part 2: Logical Link Contorl, May 7, 1998, (New York),
ANSI/IEEE, IEEE Computer Society. [ISBN 1-55937-959-6]}  Available from
@uref{http://www.ieee.org/,The IEEE}.}

Many Spider-based implementations of X.25 will call this multiplexing driver
simply @file{/dev/x25}.  @cite{AIXlink/X.25} calls the driver
@file{/dev/x25pckt}.

The @dfn{STREAMS} @file{/dev/x25-plp} multiplexing pseudo-device driver is
illustrated in @figref{1}.

@node NLI Conversion Module
@section NLI Conversion Module
@cindex NLI Conversion Module

Many Spider-based implementations of X.25 will call this multiplexing driver
@file{s_nli3}.

The @dfn{STREAMS} @file{s_nli3} pushable module is illustrated in @figref{1}.

@node NPI Conversion Module
@section NPI Conversion Module
@cindex NPI Conversion Module

Many Spider-based implementations of X.25 will call this pushable module
@file{s_npi}.  @cite{AIXlink/X.25} calls the module @file{npi}.

The @dfn{STREAMS} @file{s_npi} and @file{npi} pushable modules are illustrated
in @figref{1}.

@node CONS Module
@section CONS Module
@cindex CONS Module

The @dfn{STREAMS} @file{s_cons} pushable module is illustrated in @figref{1}.
@footnote{``@cite{Open Group CAE Specification: Network Provider Interface (NPI)
Specification, Revision 2.0.0, Draft 2, August 17, 1992, (Parisppany, New
Jersey), UNIX International, Inc., UNIX International Press}.'' Available from
@uref{http://www.openss7.org/docs/npi.pdf,The OpenSS7 Project}.}

@node XX25 Module
@section XX25 Module
@cindex XX25 Module

The @dfn{STREAMS} @file{s_xx25} pushable module is illustrated in @figref{1}.

The XX25 specification@footnote{``@cite{X/Open CAE Specification: X.25
Programming Interface using XTI (XX25), No. c411, November 1995, (Berkshire, UK), X/Open,
Open Group Publication. [ISBN: 1-85912-136-5]}.''  Available from
@uref{http://www.opengroup.org/onlinepubs/,The Open Group}.}
@footnote{``@cite{Open Group CAE Specification: Transport Provider Interface
(TPI) Specification, Revision 2.0.0, Draft 2, 1999, (Berkshire, UK), Open Group,
Open Group Publication}.''  Available from 
@uref{http://www.opengroup.org/onlinepubs/,The Open Group} or
@uref{http://www.openss7.org/docs/tpi.pdf,The OpenSS7 Project}.}

@node IXE Multiplexing Driver
@section IXE Multiplexing Driver
@cindex IXE Multiplexing Driver

The @dfn{IXE} module provides Internet Protocol over X.25 Encapsulation (IXE) per
RFC 877 and RFC 1356.  The protocol module provides an @pval{DL_IPX25} MAC
type DLPI Stream on the upper multiplex and a @dfn{NLI} Stream (or possibly an
@dfn{NPI} Stream) on the lower multiplex.  Each lower multiplex Stream
represents an X.25 PVC or VC.  Each upper multiiplex Stream represents a
@pval{DL_IPX25} connectionless data link Stream.

The @dfn{STREAMS} @file{/dev/ixe} multiplexing driver is illustrated in
@figref{1}.

@node IP Multiplexing Driver
@section IP Multiplexing Driver
@cindex IP Multiplexing Driver

The @dfn{STREAMS} @file{/dev/ip} multiplexing pseudo-device driver is
illustrated in @figref{1}.

@node NLI Utilities
@appendix NLI Utilities

Most implementations of the NLI provides a number of utilities that are aimed
at providing three or four capabilities as follows:

@itemize
@item Adjusting the tunable parameters associated with X.25 subnetwork
attachments.
@item Administating mapping data for PVC and NUI.
@item Collecting and displaying statistics.
@item Monitoring traffic flow on specific VCs.
@end itemize

@menu
* nuimap::
* pvcmap::
* vcstat::
* x25diags::
* x25file::
* x25info::
* x25netd::
* x25route::
* x25stat::
* x25trace::
* x25tune::
@end menu

@multitable {@code{x25diags(8)}}{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
@item @manref{nuimap(8)} @tab Adjust the Network User Identity mapping in the X.25 packet layer.
@item @manref{pvcmap(8)} @tab Adjust the Permanent Virtual Circuit (PVC) mapping in the X.25 packet layer.
@item @manref{vcstat(8)} @tab Collect virtual circuit (VC) statistics from the X.25 packet layer.
@item @manref{x25diags(8)} @tab Convert X.25 diagnostics to messages and visa versa.
@item @manref{x25file(8)} @tab -
@item @manref{x25info(8)} @tab -
@item @manref{x25netd(8)} @tab The X.25 network daemon.
@item @manref{x25route(8)} @tab -
@item @manref{x25stat(8)} @tab Collect subnetwork and global X.25 statistics from the X.25 packet layer.
@item @manref{x25trace(8)} @tab Provide tracing on X.25 subnetworks.
@item @manref{x25tune(8)} @tab Adjust the tunable parameters associated with a subnetwork to the X.25 packet layer.
@end multitable

@page
@node nuimap
@section nuimap - NUI mapping utility
@cindex NUI mapping utility

The Network User Identity (NUI) mapping utility is responsible for
administration of the mapping of NUI values to the facilities that are
associated with a specific user value.  The @command{nuimap} capability is
invoked when the call indicates that subcription to NUI override facility is
available and specifies a NUI for override.  In this case, the NUI mapping table
is consulted to look up the specified NUI and determine the facilities to
override.

This utility is also described in the manual pages @manref{nuimap(8)} and
@manref{nuimapconf(5)}.  In this manual, see also @ref{NUI Mapping File}.

@subheading Name

@command{nuimap} -- NUI mapping utility

@subheading Synopsis

@example
@group
nuimap [@var{options}] [-G] -n @var{netuid} [-d @var{device}]
nuimap [@var{options}]  -D  -n @var{netuid} [-d @var{device}]
nuimap [@var{options}]  -M  [-d @var{device}] [-f @var{filename}]
nuimap [@var{options}]  -P  [-d @var{device}] [-f @var{filename}]
nuimap [@var{options}]  -Z  [-d @var{device}]
nuimap @{-h|--help@}
nuimap @{-V|--version@}
nuimap @{-C|--copying@}
@end group
@end example

@subheading Description

X.25 Packet Layer Protocol drivers supporting the NLI provide a mechanism for
mapping Network User Identities to a set of X.25 facilities that are subscribed
by the Network User Identity.  @command{nuimap} provides a mechanism whereby the
user can modify these mappings, or system configuration scripts can load or dump
mappings to or from a file.

Facilities that can be subscribed on a network user basis are:
@itemize
@item Extended format packets.
@item Local and remote packet sizes.
@item Local and remote window sizes.
@item Local and remote throughput classes.
@item Subscription to closed user groups.
@item Subscription to closed user groups with outgoing access.
@item Subscription to basic format closed user groups.
@item Subscription to extended format closed user groups.
@end itemize

The @command{nuimap} command can be used to retrieve or delete a specific
network user identity to facilities mapping (@option{-G} or @option{-D}
options, resp.); list or remove all network user identity to facilities mappings
(@option{-M} or @option{-Z} options); or load a set of network user identity to
facilities mappings from a file (@option{-P} option).

These capabilities of the @command{nuimap} command are supported by the
@pioc{N_nuimsg}, @pioc{N_nuiput}, @pioc{N_nuidel}, @pioc{N_nuiget},
@pioc{N_nuimget} and @pioc{N_nuireset} input-output controls, see @ref{NUI_MSG
Input-Output Controls}.

@xref{NUI Mapping File}, for more information on supported facilities.

@subheading Options

The @command{nuimap} command accepts the following options:

@subsubheading Command Options

The following command options are mutually exclusive (except for @option{-h},
@option{-V} and @option{-C} which never cause an error when specified with
another command option).  If no command option is given, @option{-G} is assumed.

@table @option

@item -G, --get
Get the network user identity to facilities mapping belonging to the NUI having
the same value as the argument to the @option{-n} option, @var{netuid}, for the
specified or default @var{device}.
The @option{-n} option and option argument, @var{netuid}, must be specified.

@item -D, --delete
Delete the network user identity to facilities mapping belonging to the NUI
having the same value as the argument to the @option{-n} option, @var{netuid},
for the specified or default @var{device}.
The @option{-n} option and option argument, @var{netuid}, must be specified.

@item -M, --list
List all the network user identity to facilities mappings for the specified or
default @var{device}, and print them to @file{stdout} (or @var{filename}, when
specified with the @option{-f} option), for the specified or default
@var{device}.

@item -P, --load
Load a set of network user identity to facilities mappings for the specified or
default @var{device}, taking input from
@file{@value{_configdir}/@-@value{PACKAGE}/@-nuimapconf} (or @var{filename},
when specified with the @option{-f} option), for the specified or default
@var{device}.@footnote{Note that the precise location of the
@file{@value{_configdir}} directory varies depending upon whether the build was
on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based system.}

@item -Z, --reset
Reset all network user identity to facilities mappings for the specified or
default @var{device}.

@item -h, --help
When this option is encountered, usage information is printed to @file{stdout},
option processing stops, and the program exists successfully without taking any
further action.

@item -V, --version
When this option is encountered, version information is printed to
@file{stdout}, option processing stops, and the program exits successfully
without taking any further action.

@item -C, --copying
When this option is encountered, copying permissions are printed to
@file{stdout}, option processing stops, and the program exits successfully
without taking any further action.

@end table

@subsubheading Non-Command Options

The following non-command options cab be combined together and with any command
option.  Non-command options that are not necessary for the specified command
option do not generate an error by mere combination.

@table @option

@item -f, --file @var{filename}
Specifies the @var{filename} from which to read (@option{-P} option) or write
(@option{-M} option) configuration information.

This option and argument is optional.  When the @var{filename} is not given and
the @option{-P} option is specified, the values are read from
@file{@value{_configdir}/@-@value{PACKAGE}/@-nuimapconf};@footnote{Note that the
precise location of the @file{@value{_configdir}} directory varies depending
upon whether the build was on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based
system.} for the @option{-M} option, values are written to @file{stdout}.

If the @var{filename} is an absolute path (i.e. begins with @samp{/}), then
@var{filename} is assumed to be the exact path specified.  Otherwise, the file
required is assumed to be
@file{@value{_configdir}/@-@value{PACKAGE}/}@-@var{filename}.@footnote{Note that
the precise location of the @file{@value{_configdir}} directory varies depending
upon whether the build was on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based
system.}
@xref{NUI Mapping File}, for the format of the file.

@item -n, --nui @var{netuid}
Specifies the specific Network User Identity, @var{netnuid}, that identifies a
specific network user identity to faciltiies mapping to either be retrieved
(option @option{-G}) or deleted (option @option{-D}).  This option must be
provided when the @option{-G} or @option{-D} command options are specified.

@item -d, --device @var{devname}
Specifies the device, @var{devname},  to open when tuning.  When unspecified,
the default is @file{/dev/x25}.  See also @cite{Devices}, below.

@item --dryrun
Execute the command (@option{-G}, @option{-D}, @option{-M} or @option{-P}) as a
dry run.  When this option is specified with the @option{-D} or @option{-P}
option, the input is read and checked for validity, but the configuration is not
written to the device when specified with the @option{-G} or @option{-M} option,
information is read from the device, but configuration information is not
output.  The exit status and diagnostic output of the command still reflects the
success or failure of the command.

@item -q, --quiet
Suppresses normal output.  This is the same as @samp{--verbose=0}.

@item --debug [@var{level}]
Increase or specify the debug verbosity @var{level}.  The default debug
@var{level} is zero (0).  This option may be repeated.  Level zero (0)
corresponds to no debugging output.

@item -v, --verbose [@var{level}]
Increase or specify the output verbosity @var{level}.  The default output
@var{level} is one (1). This option may be repeated.  Level zero (0) corresponds
to no normal output.

@end table

@subheading Diagnostics

An exit status of zero (0) indicates that the command was successful; one (1)
indicates that an error occured and a diagnostic message is printed to
@file{stderr}; two (2) indicates that the option or argument syntax was in error
and a diagnostic message is printed to @file{stderr}.

The @option{--quiet} option suppresses the printing of normal output to
@file{stdout} and diagnostic messages to @file{stderr}.

@subheading File Format

For the input file format, see @ref{NUI Mapping File}.

@subheading Notices

On input, this implementation will handle fields that are separated by any
whitespace (any number of blanks, horzontal tabs, new lines, carriage returns,
vertical tabs, form feeds).  On output, newlines are generated after fields.

@subheading Devices

@ftable @file
@item /dev/streams/clone/x25
@itemx /dev/x25
The NPI device for X.25, @manref{x25(4)}. 
@end ftable

@subheading Files

@ftable @file

@item @value{_configdir}/@-@value{PACKAGE}/@-@var{filename}
The default directory location for configuration files used by this
command.@footnote{Note that the precise location of the
@file{@value{_configdir}} directory varies depending upon whether the build was
on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based system.}

@item @value{_configdir}/@-@value{PACKAGE}/@-nuimapconf
The default configuration file from which to read network user identity to
facilities mappings for use with the @option{-P} option.

@end ftable

@subheading Bugs

@command{nuimap} has no known bugs.

@subheading See Also

@ref{NUI Mapping File}.

@subheading Compatibility

The @command{nuimap} command is compatible with @cite{Spider X.25}, and
implementations based on @cite{Spider X.25}, such as @cite{AIXlink/X.25},
@cite{HP-UX}, @cite{IRIS SX.25}, @cite{PT X.25}, @cite{RadiSys WAN}, @cite{SBE
X.25}, @cite{Solstice X.25}, and others, with the following portability
considerations:

@itemize

@item A version of this command is provided by @cite{@value{PACKAGE_TITLE}} for
compatibility with systems that require it.  Neither this command nor the
@manref{xnetd(8)} are recommended for configuration of the
@cite{@value{PACKAGE_TITLE}} subsystems.  Use the SNMP agent instead.

@item Options @option{-e}, @option{-n}, @option{-q}, @option{-v}, @option{-h},
@option{-V}, @option{-C}, and all long options, are specific to this
@cite{@value{PACKAGE_TITLE}} implementation of @command{nuimap} and will not be
used by portable command scripts.

@item No other implementation documents printing the output to a file when a
@var{filename} is specified with the @option{-G} command option.  This is an
enhancement of this implementation.

@item No other implementation documents the @option{-e}, @option{-n},
@option{-q}, @option{-v}, @option{-h}, @option{-V}, and @option{-C}, options.
They will not be used by portable command scripts.

@item Options @option{--help} and @option{--version} are provided for
compatibility with GNU coding standards (GNITS); @option{--copying}, OpenSS7
coding standards.

@end itemize

For additional compatibilty considerations, see @ref{NLI Compatibility and
Porting}.

@subheading Conformance

@cite{AIXlink/X.25},
@cite{HP-UX},
@cite{IRIS SX.25},
@cite{PT X.25},
@cite{RadiSys WAN},
@cite{SBE X.25},
@cite{Solstice X.25},
documentation.  @xref{References}.

@subheading History

@command{nuimap} first appeared in @cite{Spider X.25}.


@page
@node pvcmap
@section pvcmap - PVC mapping utility
@cindex PVC mapping utility

The Permanent Virtual Circuit (PVC) mapping utility is responsible for
administration of the mapping of PVC logical channel identifiers to the
facilities that are associated with a specific channel that would normally be
negotiated on call setup.  These include: local and remote packet and window
sizes.

This utility is also described in the manual pages @manref{pvcmap(8)} and
@manref{pvcmapconf(5)}.  In this manual, see also @ref{PVC Mapping File}.

@subheading Name

@command{pvcmap} -- PVC mapping utility

@subheading Synopsis

@example
@group
nuimap [@var{options}]  -G  [-s @var{subnet}] [-l @var{lci}] [-d @var{device}]
nuimap [@var{options}]  -D  [-s @var{subnet}] [-l @var{lci}] [-d @var{device}]
nuimap [@var{options}] [-M] [-d @var{device}] [-f @var{filename}]
nuimap [@var{options}]  -P  [-d @var{device}] [-f @var{filename}]
nuimap [@var{options}]  -Z  [-d @var{device}]
nuimap @{-h|--help@}
nuimap @{-V|--version@}
nuimap @{-C|--copying@}
@end group
@end example

@subheading Description

X.25 Packet Layer Protocol drivers upporting the NLI provide a mechanism for
attaching Permanent Virtual Circuits (PVC) for use by upper layer protocols.
@command{pvcmap} provides a mechanism whereby the administrator can modify the
local and remote packet and window sizes associated with PVC for each logical
channel and subnetwork.  For each PVC logical channel on each subnetwork, the
following is specified:
@itemize
@item Local maximum packet size.
@item Remote maximum packet size.
@item Local maximum window size.
@item Remote maximum window size.
@end itemize

The @command{pvcmap} command can be used to retrieve or delete the throughput
parameters specific to a logical channel within a subnetwork (@option{-G} or
@option{-D} options, resp.); list or remove all subnetwork and logical channel
mappings (@option{-M} or @option{-Z} options); or load a set of subnetwork and
logical channel mappings from a file (@option{-P} option).

The capabilities of the @command{pvcmap} command are supported by the
@pioc{N_putpvcmap} and @pioc{N_getpvcmap} intput-output controls,@footnote{See
@ref{N_putpvcmap}, and @ref{N_getpvcmap}.} and provide an excellent example of
their use.

@xref{PVC Mapping File}, for more information on supported facilities.

@subheading Options

The @command{pvcmap} command accepts the following options:

@subsubheading Command Options

The following command options are mutually exclusive (except for @option{-h},
@option{-V} and @option{-C} which never cause an error when specified with
another command option).  If no command option is given, @option{-G} is assumed.

@table @option

@item -G, --get
Get the subnetwork and logical channel mapping belonging to the @var{subnet}
having the same value as the argument to the @option{-s} option, and an
@var{lci} the same value as the argument to the @option{-l} option, when
provided, for the specified or default @var{device}.
The @option{-s} option and option argument, @var{subnet}, must be specified.

@item -D, --delete
Get the subnetwork and logical channel mapping belonging to the @var{subnet}
having the same value as the argument to the @option{-s} option, and an
@var{lci} the same value as the argument to the @option{-l} option, when
provided, for the specified or default @var{device}.
The @option{-s} option and option argument, @var{subnet}, must be specified.

@item -M, --list
List all the subnetwork and logical channel mappings for the specified or
default @var{device}, and print them to @file{stdout} (or @var{filename}, when
specified with the @option{-f} option), for the specified or default
@var{device}.

@item -P, --load
Load a set of subnetwork and logical channel PVC mappings for the specified or
default @var{device}, taking input from
@file{@value{_configdir}/@-@value{PACKAGE}/@-pvcmapconf} (or @var{filename},
when specified with the @option{-f} option), for the specified or default
@var{device}.@footnote{Note that the precise location of the
@file{@value{_configdir}} directory varies depending upon whether the build was
on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based system.}

@item -Z, --reset
Reset all subnetwork and logical channel PVC mappings for the specified or
default @var{device}.

@item -h, --help
When this option is encountered, usage information is printed to @file{stdout},
option processing stops, and the program exists successfully without taking any
further action.

@item -V, --version
When this option is encountered, version information is printed to
@file{stdout}, option processing stops, and the program exits successfully
without taking any further action.

@item -C, --copying
When this option is encountered, copying permissions are printed to
@file{stdout}, option processing stops, and the program exits successfully
without taking any further action.

@end table

@subsubheading Non-Command Options

The following non-command options cab be combined together and with any command
option.  Non-command options that are not necessary for the specified command
option do not generate an error by mere combination.

@table @option

@item -f, --file @var{filename}
Specifies the @var{filename} from which to read (@option{-P} option) or write
(@option{-M} option) configuration information.

This option and argument is optional.  When the @var{filename} is not given and
the @option{-P} option is specified, the values are read from
@file{@value{_configdir}/@-@value{PACKAGE}/@-pvcmapconf};@footnote{Note that the
precise location of the @file{@value{_configdir}} directory varies depending
upon whether the build was on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based
system.} for the @option{-M} option, values are written to @file{stdout}.

If the @var{filename} is an absolute path (i.e. begins with @samp{/}), then
@var{filename} is assumed to be the exact path specified.  Otherwise, the file
required is assumed to be
@file{@value{_configdir}/@-@value{PACKAGE}/}@-@var{filename}.@footnote{Note that
the precise location of the @file{@value{_configdir}} directory varies depending
upon whether the build was on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based
system.}
@xref{PVC Mapping File}, for the format of the file.

@item -s, --subnet @var{subnet}
Specifies the subnetwork identifier, @var{subnet}, to which the PVC is attached.
@var{subnet} is normally an alphabetical character starting at @samp{A} for the
first subnetwork, @samp{B} for the second subnetwork, and so on.  When not
given, all subnetworks are assumed.

@item -l, --lci @var{lci}
Specifies the logical channel identifier @var{lci}, to which the PVC
corresponds.  @var{lci} is normally an interger value between 1 and 4096.  Zero
(0) is not permitted.  When not specified, any and all logical channels are
assumed.

@item -d, --device @var{devname}
Specifies the device, @var{devname},  to open when mapping.  When unspecified,
the default is @file{/dev/x25}.  See also @cite{Devices}, below.

@item -n, --dryrun
Execute the command (@option{-G}, @option{-D}, @option{-M} or @option{-P}) as a
dry run.  When this option is specified with the @option{-D} or @option{-P}
option, the input is read and checked for validity, but the configuration is not
written to the device when specified with the @option{-G} or @option{-M} option,
information is read from the device, but configuration information is not
output.  The exit status and diagnostic output of the command still reflects the
success or failure of the command.

@item -q, --quiet
Suppresses normal output.  This is the same as @samp{--verbose=0}.

@item --debug [@var{level}]
Increase or specify the debug verbosity @var{level}.  The default debug
@var{level} is zero (0).  This option may be repeated.  Level zero (0)
corresponds to no debugging output.

@item -v, --verbose [@var{level}]
Increase or specify the output verbosity @var{level}.  The default output
@var{level} is one (1). This option may be repeated.  Level zero (0) corresponds
to no normal output.

@end table

@subheading Diagnostics

An exit status of zero (0) indicates that the command was successful; one (1)
indicates that an error occured and a diagnostic message is printed to
@file{stderr}; two (2) indicates that the option or argument syntax was in error
and a diagnostic message is printed to @file{stderr}.

The @option{--quiet} option suppresses the printing of normal output to
@file{stdout} and diagnostic messages to @file{stderr}.

@subheading File Format

For the input file format, see @ref{PVC Mapping File}.

@subheading Notices

On input, this implementation will handle fields that are separated by any
whitespace (any number of blanks, horzontal tabs, new lines, carriage returns,
vertical tabs, form feeds).  On output, newlines are generated after fields.

@subheading Devices

@ftable @file
@item /dev/streams/clone/x25
@itemx /dev/x25
The NPI device for X.25, @manref{x25(4)}. 
@end ftable

@subheading Files

@ftable @file

@item @value{_configdir}/@-@value{PACKAGE}/@-@var{filename}
The default directory location for configuration files used by this
command.@footnote{Note that the precise location of the
@file{@value{_configdir}} directory varies depending upon whether the build was
on a @manref{dpkg(1)}-based or @manref{rpm(1)}-based system.}

@item @value{_configdir}/@-@value{PACKAGE}/@-pvcmapconf
The default configuration file from which to read for subnetwork and logical
channel PVC mappings for use with the @option{-P} option.

@end ftable

@subheading Bugs

@command{pvcmap} has no known bugs.

@subheading See Also

@ref{PVC Mapping File}.

@subheading Compatibility

The @command{nuimap} command is compatible with @cite{Spider X.25}, and
implementations based on @cite{Spider X.25}, such as @cite{AIXlink/X.25},
@cite{HP-UX}, @cite{IRIS SX.25}, @cite{PT X.25}, @cite{RadiSys WAN}, @cite{SBE
X.25}, @cite{Solstice X.25}, and others, with the following portability
considerations:

@itemize

@item A version of this command is provided by @cite{@value{PACKAGE_TITLE}} for
compatibility with systems that require it.  Neither this command nor the
@manref{xnetd(8)} are recommended for configuration of the
@cite{@value{PACKAGE_TITLE}} subsystems.  Use the SNMP agent instead.

@item Options @option{-e}, @option{-n}, @option{-q}, @option{-v}, @option{-h},
@option{-V}, @option{-C}, and all long options, are specific to this
@cite{@value{PACKAGE_TITLE}} implementation of @command{nuimap} and will not be
used by portable command scripts.

@item No other implementation documents printing the output to a file when a
@var{filename} is specified with the @option{-G} command option.  This is an
enhancement of this implementation.

@item No other implementation documents the @option{-e}, @option{-n},
@option{-q}, @option{-v}, @option{-h}, @option{-V}, and @option{-C}, options.
They will not be used by portable command scripts.

@item Options @option{--help} and @option{--version} are provided for
compatibility with GNU coding standards (GNITS); @option{--copying}, OpenSS7
coding standards.

@end itemize

For additional compatibilty considerations, see @ref{NLI Compatibility and
Porting}.

@subheading Conformance

@cite{AIXlink/X.25},
@cite{HP-UX},
@cite{IRIS SX.25},
@cite{PT X.25},
@cite{RadiSys WAN},
@cite{SBE X.25},
@cite{Solstice X.25},
documentation.  @xref{References}.

@subheading History

@command{pvcmap} first appeared in @cite{Spider X.25}.


@page
@node vcstat
@section vcstat - VC statistics utility
@cindex VC statistics utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25diags
@section x25diags - X.25 diagnostics utility
@cindex X.25 diagnostics utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25file
@section x25file - X.25 file utility
@cindex X.25 file utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25info
@section x25info - X.25 information untility
@cindex X.25 information untility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25netd
@section x25netd - X.25 network daemon
@cindex X.25 network daemon

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25route
@section x25route - X.25 routing control
@cindex X.25 routing control

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25stat
@section x25stat - X.25 statistics utility
@cindex X.25 statistics utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25trace
@section x25trace - X.25 trace utility
@cindex X.25 trace utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@page
@node x25tune
@section x25tune - X.25 tuning utility
@cindex X.25 tuning utility

@subheading Name

@subheading Synopsis

@subheading Description

@subheading Options

@subheading Usage

@subheading Diagnostics

@subheading Notices

@subheading Bugs

@subheading See Also

@subheading Compatibility

@subheading Conformance

@subheading History


@node NLI File Formats
@appendix NLI File Formats

@menu
* LAPB Template File::
* LLC2 Template File::
* NUI Mapping File::
* PAD Entries File::
* X.25 Template File::
* X.25 Host Entries File::
* PVC Mapping File::
* XOS Template File::
* XOT Template File::
@end menu

@page
@node LAPB Template File
@section LAPB Template File
@cindex LAPB Template File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node LLC2 Template File
@section LLC2 Template File
@cindex LLC2 Template File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node NUI Mapping File
@section NUI Mapping File
@cindex NUI Mapping File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node PAD Entries File
@section PAD Entries File
@cindex PAD Entries File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node X.25 Template File
@section X.25 Template File
@cindex X.25 Template File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node X.25 Host Entries File
@section X.25 Host Entries File
@cindex X.25 Host Entries File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node PVC Mapping File
@section PVC Mapping File
@cindex PVC Mapping File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node XOS Template File
@section XOS Template File
@cindex XOS Template File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History

@page
@node XOT Template File
@section XOT Template File
@cindex XOT Template File

@subheading Name
@subheading Description
@subheading Format
@subheading Files
@subheading See Also
@subheading Compatibility
@subheading History


@node NLI Compatibility and Porting
@appendix NLI Compatibility and Porting

@menu
* Compatibility with AIXlink/X.25::
* Compatibility with HP X.25/9000::
* Compatibility with IRIS SX.25::
* Compatibility with PT X.25::
* Compatibility with SBE X.25::
* Compatibility with Solstice X.25::
@end menu

@node Compatibility with AIXlink/X.25
@section Compatibility with AIXlink/X.25
@cindex Compatibility with AIXlink/X.25

@cite{AIXlink/X.25} does not document@footnote{``@cite{AIXlink/X.25 Version 2.1
for AIX: Guide and Reference, No: SC23-2520-07, Eighth Edition, September 2006,
(Bolder, CO), International Business Machine Corp., IBM},'' available from
@uref{http://publibn.bould.ibm.com/,IBM Documentation Library}.} a @dfn{Network
Layer Interface (NLI)}.  It only documents a @dfn{Network Provider Interface
(NPI)} in support of X.25 applications.  It appears that the NPI provided by
@cite{AIXlink/X.25} is merely an @file{npi} module, similar to the @file{s_npi}
module, pushed over an NLI Stream opened on an X.25 packet layer protocol
driver.  Although it is not documented, it appears that the X.25 packet layer
protocol driver, @file{/dev/x25pckt}, provided by @cite{AIXlink/X.25} is indeed
a Spider NLI driver.

As it is undocumented, this NLI driver's compatibility to that of the
@cite{@value{PACKAGE_TITLE}} cannot be ascertained.  Nevertheless, any NLI
drivers, modules and applications that rely upon the undocumented capabilities
of the NLI interface will likely be compatible with, and port easily to,
@cite{@value{PACKAGE_TITLE}}.

@itemize

@item @cite{AIXlink/X.25} does not document support for the @file{s_npi}
@dfn{STREAMS} module, but documents an @file{npi}  @dfn{STREAMS} module that
does not support CONS QoS or non-OSI X.25 and non-X.25 facilities.  @xref{NPI
Conversion Module}.  See also, @manref{npi(4)}.

@item @cite{AIXlink/X.25} does not document support for the @file{s_npi}
@dfn{STREAMS} module.  Nevertheless, @cite{@value{PACKAGE_TITLE}} provides
support for this module.  @xref{NPI Conversion Module}.
See also, @manref{s_npi(4)}.

@item @cite{AIXlink/X.25} does not document support for the @file{s_nli3}
@dfn{STREAMS} module.  Nevertheless, @cite{@value{PACKAGE_TITLE}} provides
support for this module.  @xref{NLI Conversion Module}.
See also, @manref{s_nli3(4)}.

@end itemize

@node Compatibility with HP X.25/9000
@section Compatibility with HP X.25/9000
@cindex Compatibility with HP X.25/9000

@cite{HP X.25/9000} does not document@footnote{``@cite{HP X.25/9000 Programmer's
Guide}''.} a @dfn{Network Layer Interface (NLI)} even though its architecture
document indicates that a @dfn{NLI} is being used.  @cite{HP X.25/9000} only
documents a BSD IPC interface supported by a library of functions.

As the @dfn{NLI} interface is undocumented, this NLI driver's compatibility to
that of the @cite{@value{PACKAGE_TITLE}} cannot be ascertained.  Nevertheless,
any NLI drivers, modules and applications that rely upon the
undocumented capabilities of the NLI interface will likely be compatible with,
and port easily to, @cite{@value{PACKAGE_TITLE}}.

@itemize

@item @cite{HP-UX} does not document any @dfn{STREAMS} modules or drivers.
Nevertheless, @cite{@value{PACKAGE_TITLE}} provides support for NLI modules and
drivers.  @xref{NLI Drivers and Modules}.

@end itemize

@node Compatibility with IRIS SX.25
@section Compatibility with IRIS SX.25
@cindex Compatibility with IRIS SX.25

The @cite{SGI IRIX} X.25 driver, @cite{IRIS SX.25}, is documented by
@cite{SGI}.@footnote{``@cite{IRIS SX.25 NLI Programmer's Guide, 1995,
(Mountainview, CA), Silicon Graphics, Inc., SGI Technical Publications. [No:
007-2268-002]}.''  Available from @uref{http://techpubs.sgi.com/,SGI Technical
Publications}.}

@itemize

@item @cite{IRIS SX.25} documents the @cite{sn_id} field of the @type{xaddrf}
and @type{pvcattf} structures as being of type @type{unsigned long}.  This is
note ammeniable to running 32-bit applications over 64-bit kernels, so
@cite{@value{PACKAGE_TITLE}} changes the type of the @cite{sn_id} field to
@type{uint32_t}.  This only alters the structure alignment for 64-bit drivers,
modules and applications.

@end itemize

@node Compatibility with PT X.25
@section Compatibility with PT X.25
@cindex Compatibility with PT X.25

The @cite{PT NexusWare} X.25 driver, @cite{PT X.25}, is documented by
@cite{Performance Technologies}.@footnote{``@cite{PT X.25 User's Manual}.''}

@itemize

@item @cite{PT X.25} does not document support for the @file{s_npi}
@dfn{STREAMS} module.  Nevertheless, @cite{@value{PACKAGE_TITLE}} provides
support for this module.  @xref{NPI Conversion Module}.
See also, @manref{s_npi(4)}.

@item @cite{PT X.25} does not document support for the @file{s_nli3} @xref{NLI
Conversion Module}.  @dfn{STREAMS} module.  Nevertheless,
@cite{@value{PACKAGE_TITLE}} provides support for this module. 
See also, @manref{s_nli3(4)}.

@item @cite{PT X.25} documents support for the special @prim{N_Xelisten},
Extended Listen Request/Response message primitive.

@cite{@value{PACKAGE_TITLE}} also provides this message primitive in support of
drivers, modules and applications ported to @cite{Linux} from @cite{PT X.25}.
@xref{Extended Listen Request/Response}.

@end itemize

@node Compatibility with SBE X.25
@section Compatibility with SBE X.25
@cindex Compatibility with SBE X.25

The @cite{SBE} X.25 driver, @cite{SBE X.25}, is documented by @cite{SBE
Inc.}.@footnote{``@cite{SBE X.25}.''}

@node Compatibility with Solstice X.25
@section Compatibility with Solstice X.25
@cindex Compatibility with Solstice X.25

The @cite{Solaris} X.25 driver, @cite{Solstice X.25}, is documented by @cite{Sun
Microsystems}.@footnote{``@cite{Solstice X.25 Programmer's Guide}.''}

@itemize

@item @cite{Solstice X.25} does not document support for the @file{s_npi}
@dfn{STREAMS} module.  Nevertheless, @cite{@value{PACKAGE_TITLE}} provides
support for this module.  @xref{NPI Conversion Module}.
See also, @manref{s_npi(4)}.

@item @cite{Solstice X.25} does not document support for the @file{s_nli3}
@dfn{STREAMS} module.  @xref{NLI Conversion Module}.  Nevertheless,
@cite{@value{PACKAGE_TITLE}} provides support for this module. 
See also, @manref{s_nli3(4)}.

@item @cite{Solstice X.25} documents the @member{link_id} field in a number of
data structures where other implementations document an @member{sn_id} field.
Also, it documents that the @code{0xFF} setting of the @member{link_id} field is
special in that is causes a database to be consulted for the appropriate link or
subnetwork and, failing that, uses the lowest numbered WAN port.

@cite{@value{PACKAGE_TITLE}} declares the @member{link_id} and @member{sn_id} in
these structures as members of an anonymous union to be compatible with both
approaches, and also supports the special @code{0xFF} value of the field.
@xref{Addresses}, and @ref{PVC Attach}.

@item @cite{Solstice X.25} documents support for the @pval{X25_PATTERN}
setting for the @member{l_mode} field of the Listen Request/Response message
primitive.

@cite{@value{PACKAGE_TITLE}} also supports this pattern matching mode in support
of drivers, modules and applications ported to @cite{Linux} from @cite{Solstice
X.25}.  @xref{Listen Request/Response}.

@end itemize

@node Glossary of NLI Terms and Acronyms
@appendix Glossary of NLI Terms and Acronyms

@multitable @columnfractions 0.15 0.85
@item @dfn{ANSI} @tab American National Standards Institute
@item @dfn{CCITT} @tab Old name for ITU-T
@item @dfn{CONS} @tab Connection-Oriented Network Service
@item @dfn{ENSDU} @tab Expedited Network Service Data Unit
@item @dfn{ETSI} @tab European Telecommunications Standards Institute
@item @dfn{IEEE} @tab Institute of Electrical and Electronics Engineers
@item @dfn{ITU} @tab International Telecommunications Union
@item @dfn{ITU-T} @tab ITU Telecom Sector
@item @dfn{LCI} @tab Logical Channel Identifier
@item @dfn{LLC1} @tab Logical Link Control Type 1
@item @dfn{LLC2} @tab Logical Link Control Type 2
@item @dfn{LLC} @tab Logical Link Control
@item @dfn{MAC} @tab Media Access Control
@item @dfn{NLI} @tab Network Layer Interface
@item @dfn{NPDU} @tab Network Protocol Data Unit
@item @dfn{NSAP} @tab Network Service Access Point
@item @dfn{NSDU} @tab Network Service Data Unit
@item @dfn{NSP} @tab Network Service Provider
@item @dfn{NS} @tab Network Service
@item @dfn{NSU} @tab Network Service User
@item @dfn{PDU} @tab Protocol Data Unit
@item @dfn{PVC} @tab Permanent Virtual Circuit
@item @dfn{SAP} @tab Service Access Point
@item @dfn{SDU} @tab Service Data Unit
@item @dfn{VC} @tab Virtual Circuit
@item @dfn{X.121} @tab ITU-T Recommendation X.121
@item @dfn{X.25} @tab ITU-T Recommendation X.25
@item @dfn{X.29} @tab ITU-T Recommendation X.29
@end multitable

@node References
@unnumbered References

@multitable @columnfractions 0.2 0.8

@item [AIXlink/X.25] @anchor{AIXlink/X.25} @tab @cite{AIXlink/X.25 Version 2.1
for AIX: Guide and Reference}, No: SC23-2520-07, Eighth Edition, September 2006,
(Bolder, CO), International Business Machine Corp., IBM.
@uref{http://publibn.bould.ibm.com/,IBM Documentation Library}.

@item [ARTIC WAN] @anchor{ARTIC WAN} @tab @cite{ARTIC STREAMS Support WAN Driver
Interface Reference}, Release 1.7, June 2004, (Hillsboro, OR), RadiSys
Corporation, RadiSys. [Doc No: 007-01232-0003], @uref{http://www.radisys.com/,
RadiSys Support Documentation}.

@item [CDI] @anchor{CDI} @tab @cite{OpenSS7 CAE Specification: Communications
Device Interface (CDI) Specification}, Revision 0.9.2, Draft 2, July 15, 2007,
(Edmonton, Canada), B. Bidulock, OpenSS7 Corporation.  Distributed with package
@file{strxns-0.9.2} and @file{openss7-0.9.2}.
@url{http://www.openss7.org/docs/cdi.pdf, OpenSS7 Documents}.

@item [DLPI] @anchor{DLPI} @tab @cite{Open Group CAE Specification: Data Link
Provider Interface (DLPI) Specification}, Revision 2.0.0, Draft 2, August 20,
1992, (Parsippany, New Jersey), UNIX International, Inc., UNIX International
Press.  @uref{http://www.opengroup.org/onlinepubs/,The Open Group},
@uref{http://www.openss7.org/docs/dlpi.pdf,The OpenSS7 Project}.

@item [IRIS SX.25] @anchor{IRIS SX.25} @tab @cite{IRIS SX.25 NLI Programmer's
Guide}, 1995, (Mountainview, CA), Silicon Graphics, Inc., SGI Technical
Publications. [No: 007-2268-002]. @uref{http://techpubs.sgi.com/,SGI Technical
Publications}.

@item [ISO7776] @anchor{ISO7776} @tab @b{ISO/IEC 7776:1995}, @cite{Information
technology -- Telecommunications information exchange between systems --
High-level data link control procedures -- Description of the X.25
LAPB-compatible DTE data link procedures}, Second Edition, July 1, 1995,
International Organization for Standardization.
@uref{http://www.iso.org/,International Organization for Standardization}.

@item [ISO8802-2] @anchor{ISO8802-2} @tab @b{ANSI/IEEE Standard 802.2-1998
[ISO/IEC 8802-2:1998]}, @cite{IEEE Standard for Information Technology --
Telecommunications and Information Exchange Between Systems -- Local and
Metropolitan Area Networks -- Specific Requirements -- Part 2: Logical Link
Control}, May 7, 1998, (New York), ANSI/IEEE, IEEE Computer Society. [ISBN
1-55937-959-6]. @uref{http://www.ieee.org/,Institute of Electrical and
Electronics Engineers}.

@item [ISO8881] @anchor{ISO8881} @tab @b{ISO/IEC 8881:1989}, @cite{Information
Processing Systems -- Data Communications -- User of the X.25 Packet Level
Protocol in Local Area Networks}, 1989, ISO/IEC, International Organization for
Standardization. @uref{http://www.iso.org/,International Organization for
Standardization}.

@item [X.25] @tab @cite{ITU-T Recommendation X.25}.

@item [X.29] @tab @cite{ITU-T Recommendation X.29}.

@item [NPI] @anchor{NPI} @tab @cite{Open Group CAE Specification: Network
Provider Interface (NPI) Specification}, Revision 2.0.0, Draft 2, August 17,
1992, (Parisppany, New Jersey), UNIX International, Inc., UNIX International
Press.  @uref{http://www.openss7.org/docs/npi.pdf,The OpenSS7 Project}.

@item [Solstice X.25] @anchor{Solstice X.25} @tab @cite{Solstice X.25 9.2
Administration Guide}, October 1999, (Palo Alto, CA), Sun Microsystems, Inc.,
Sun. [Part No: 806-1234-10], @uref{http://docs-pdf.sun.com/, Solaris
Documentation}.

@item [TPI] @anchor{TPI} @tab @cite{Open Group CAE Specification: Transport
Provider Interface (TPI) Specification}, Revision 2.0.0, Draft 2, 1999,
(Berkshire, UK), Open Group, Open Group Publication.
@uref{http://www.opengroup.org/onlinepubs/,The Open Group},
@uref{http://www.openss7.org/docs/tpi.pdf,The OpenSS7 Project}.

@item [V.25 bis] @anchor{V.25 bis} @tab @b{ITU-T Recommendation V.25 bis (10/96)},
@cite{Synchronous and asyncrhonous automatic dialing procedrues on switched
networks}, October 1996, (Geneva), ITU, ITU-T Telecommunication Standardization
Sector of ITU, (Previously ``CCITT Recommendation''),
@url{http://www.itu.int/rec/T-REC-V.25bis/en/ T-REC-V.25bis}.

@item [X.21] @anchor{X.21} @tab @b{ITU-T Recommendation X.21 (09/92)},
@cite{Interface between Data Terminal Equipment (DTE) and Data
Circuit-terminating Equiment (DCE) for synchronous operation on Public Data
Networks}, September 1992, (Geneva), ITU, ITU-T Telecommunication
Standardization Sector of ITU.  (Previously ``CCITT Recommendation''),
@url{http://www.itu.int/rec/T-REC-X.21/en/, T-REC-X.21}.

@item [X.21 bis] @anchor{X.21 bis} @tab @b{ITU-T Recommendation X.21 bis (03/88)},
@cite{Use on Public Data Networks of Data Terminal Equipment (DTE) which is
designed for interfacing to synchronous V-series modems}, March 1988, (Geneva),
ITU, ITU-T Telecommunication Standardization Sector of ITU. (Previously ``CCITT
Recommendation''), @url{http://www.itu.int/rec/T-REC-X.21bis/en/,
T-REC-X.21bis}.

@item [X.25] @anchor{X.25} @tab @b{ITU-T Recommendation X.25}.
@url{http://www.itu.int/rec/T-REC-X.25/en/, T-REC-X.25}.

@item [X.29] @anchor{X.29} @tab @b{ITU-T Recommendation X.29}.
@url{http://www.itu.int/rec/T-REC-X.29/en/, T-REC-X.29}.

@item [XX25] @anchor{XX25} @tab @cite{X/Open CAE Specification: X.25 Programming
Interface using XTI (XX25)}, No. c411, November 1995, (Berkshire, UK), X/Open,
Open Group Publication. [ISBN: 1-85912-136-5].
@uref{http://www.opengroup.org/onlinepubs/,The Open Group}.

@end multitable

@node Index
@unnumbered Index

@menu
* Concept Index::
* Protocol State Index::
* Primitive Index::
* Primitive Structure and Type Index::
* Primitive Structure Field Index::
* Primitive Values Index::
* Primitive Error Values Index::
* Manual Page Index::
@end menu

@node Concept Index
@section Concept Index
@printindex cp

@page
@node Protocol State Index
@section Protocol State Index
@printindex st

@page
@node Primitive Index
@section Primitive Index
@printindex pr

@page
@node Primitive Structure and Type Index
@section Primitive Structure and Type Index
@printindex tp

@page
@node Primitive Structure Field Index
@section Primitive Structure Field Index
@printindex vr

@page
@node Primitive Values Index
@section Primitive Values Index
@printindex pv

@page
@node Primitive Error Values Index
@section Primitive Error Values Index
@printindex pe

@page
@node Input-Output Control Index
@section Input-Output Control Index
@printindex ct

@page
@node Manual Page Index
@section Manual Page Index
@printindex mp

@page
@shortcontents
@page
@contents
@bye

