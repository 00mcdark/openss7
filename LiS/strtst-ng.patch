diff -rauN LiS-2.16-gcom/util/strtst.c LiS-2.16/util/strtst.c
--- LiS-2.16-gcom/util/strtst.c	2003-10-23 23:25:28.000000000 +0200
+++ LiS-2.16/util/strtst.c	2004-06-03 18:30:48.000000000 +0200
@@ -26,6 +26,7 @@
 #define _REENTRANT
 #define _THREAD_SAFE
 #define _XOPEN_SOURCE	500		/* single unix spec */
+#define USE_PTHREADS
 #endif
 
 #include <sys/types.h>
@@ -108,30 +109,44 @@
 *                           Storage                                     *
 ************************************************************************/
 
-char		buf[1000] ;		/* general purpose */
-char		ctlbuf[1000] ;		/* control messages */
-char		rdbuf[1000] ;		/* for reading */
-char		rdctlbuf[1000] ;	/* control messages */
-int		printk_fd = -1 ;	/* file descr for printk */
+struct test_context {
+#ifdef USE_PTHREADS
+	pthread_t th;
+#endif
+	int id;
+	char		buf[1000] ;		/* general purpose */
+	char		ctlbuf[1000] ;		/* control messages */
+	char		rdbuf[1000] ;		/* for reading */
+	char		rdctlbuf[1000] ;	/* control messages */
+	struct str_mlist	mod_names[10] ;
+	struct str_list		mod_list;
+	struct strbuf	wr_ctl;
+	struct strbuf	wr_dta;
+	struct strbuf	rd_ctl;
+	struct strbuf	rd_dta;
+	struct strpeek	pk_str;
+};
 
-/*
- * For I_LIST
- */
-struct str_mlist	mod_names[10] ;
-struct str_list		mod_list = {10, mod_names} ;
+struct test_context *ctx_list;
+struct test_context ctx_none = { id: -1 };
 
-/*
- * For getmsg, putmsg
- */
-struct strbuf	wr_ctl = {0, 0, ctlbuf} ;
-struct strbuf	wr_dta = {0, 0, buf} ;
-struct strbuf	rd_ctl = {0, 0, rdctlbuf} ;
-struct strbuf	rd_dta = {0, 0, rdbuf} ;
-struct strpeek	pk_str = {
-			      {0, 0, rdctlbuf},	/* ctlbuf */
-			      {0, 0, rdbuf},	/* databuf */
-			      0			/* flags */
-			  } ;
+int		printk_fd = -1 ;	/* file descr for printk */
+
+static void init_ctx(struct test_context *ctx)
+{
+	memset(ctx, 0, sizeof(*ctx));
+	ctx->id = (ctx-ctx_list);
+	ctx->mod_list = (struct str_list){10, ctx->mod_names} ;
+	ctx->wr_ctl = (struct strbuf){0, 0, ctx->ctlbuf} ;
+	ctx->wr_dta = (struct strbuf){0, 0, ctx->buf} ;
+	ctx->rd_ctl = (struct strbuf){0, 0, ctx->rdctlbuf} ;
+	ctx->rd_dta = (struct strbuf){0, 0, ctx->rdbuf} ;
+	ctx->pk_str = (struct strpeek){
+		{0, 0, ctx->rdctlbuf},	/* ctlbuf */
+		{0, 0, ctx->rdbuf},	/* databuf */
+		0			/* flags */
+	} ;
+}
 
 extern void make_nodes(void) ;
 extern int  n_read(int fd) ;
@@ -143,6 +158,13 @@
 
 extern int	n_read_msgs(int fd) ;		/* forward decl */
 
+/*
+ * command-line tunables
+ */
+int nthreads = 1;
+unsigned long long debug_mask = ALL_DEBUG_BITS;
+int all_tests = 1;
+
 /************************************************************************
 *                           Dummies                                     *
 *************************************************************************
@@ -236,6 +258,26 @@
 
 } /* print */
 
+#define tprint(fmt,args...) print("[%02d]" fmt,ctx->id, ## args)
+
+#ifdef USE_PTHREADS
+struct test_context * current_ctx(void)
+{
+	pthread_t handle;
+	struct test_context *ctx;
+
+	if(!ctx_list)
+		return &ctx_none;
+	handle = pthread_self();
+	for(ctx = ctx_list; ctx < ctx_list+nthreads; ctx++)
+		if(pthread_equal(handle, ctx->th))
+			return ctx;
+	return &ctx_none;
+}
+#else
+#define current_ctx() (ctx_list)
+#endif
+
 /************************************************************************
 *                             xit                                       *
 *************************************************************************
@@ -245,12 +287,14 @@
 ************************************************************************/
 void	xit(void)
 {
+    struct test_context *ctx = current_ctx();
+
     print("\n\n\n");
-    print("****************************************************\n");
-    print("*                  Test Failed                     *\n");
-    print("****************************************************\n\n");
+    tprint("****************************************************\n");
+    tprint("*                  Test Failed                     *\n");
+    tprint("****************************************************\n\n");
 
-    print("Dump of memory areas in use:\n\n") ;
+    tprint("Dump of memory areas in use:\n\n") ;
 
 #ifndef LINUX
     port_print_mem() ;
@@ -265,6 +309,34 @@
 } /* xit */
 
 /************************************************************************
+*                                FAIL                                   *
+*************************************************************************
+*									*
+* Print an error message and exit program.				*
+*									*
+************************************************************************/
+#ifndef DIRECT_USER
+#define STRERROR(errnum) strerror(errno)
+#else
+#define STRERROR(errnum) strerror(errnum)
+#endif
+
+#define ERR(fmt, args...)				\
+do {							\
+	struct test_context *ctx = current_ctx();	\
+	tprint(fmt, ## args);				\
+} while(0)
+
+#define FAIL(fmt, args...)				\
+do {							\
+	struct test_context *ctx = current_ctx();	\
+	tprint(fmt, ## args);				\
+	tprint("*** TEST FAILED in %s at %s:%d\n",	\
+	       __FUNCTION__,__FILE__,__LINE__);		\
+	xit();						\
+} while(0)
+
+/************************************************************************
 *                           register_drivers                            *
 *************************************************************************
 *									*
@@ -292,21 +364,23 @@
 {
     int			fd ;
     int			rslt ;
-    unsigned long	mask1 = (unsigned long)(msk & 0xFFFFFFFF) ;
-    unsigned long	mask2 = (msk >> 32) ;
+    unsigned long	mask1, mask2;
+
+    /* filter out unwanted debug msgs */
+    msk &= debug_mask;
+    mask1 = (unsigned long)(msk & 0xFFFFFFFF) ;
+    mask2 = (msk >> 32) ;
 
     fd = user_open(LOOP_1, O_RDWR, 0) ;
     if (fd < 0)
     {
-	print("loop.1: %s\n", strerror(-fd)) ;
-	xit() ;
+	FAIL("loop.1: %s\n", STRERROR(-fd)) ;
     }
 
     rslt = user_ioctl(fd, I_LIS_SDBGMSK, mask1) ;
     if (rslt < 0)
     {
-	print("loop.1: I_LIS_SDBGMSK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_LIS_SDBGMSK: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd, I_LIS_SDBGMSK2, mask2) ;
@@ -400,16 +474,14 @@
     fd = user_open(LOOP_1, O_RDWR, 0) ;
     if (fd < 0)
     {
-	print("loop.1: %s\n", strerror(-fd)) ;
-	xit() ;
+	FAIL("loop.1: %s\n", STRERROR(-fd)) ;
     }
 
     print("\n\nBegin dump of in-use memory areas\n\n") ;
     rslt = user_ioctl(fd, I_LIS_PRNTMEM, 0) ;
     if (rslt < 0)
     {
-	print("loop.1: I_LIS_PRNTMEM: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_LIS_PRNTMEM: %s\n", STRERROR(-rslt)) ;
     }
 
     print("\n\nEnd dump of in-use memory areas\n\n") ;
@@ -431,8 +503,7 @@
     rslt = user_ioctl(fd, I_LIS_PRNTSTRM, 0) ;
     if (rslt < 0)
     {
-	print("I_LIS_PRNTSTRM: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("I_LIS_PRNTSTRM: %s\n", STRERROR(-rslt)) ;
     }
 
 } /* print_stream */
@@ -453,7 +524,7 @@
     do
     {
 	rslt = n_read(fd) ;
-	if (rslt < 0) xit() ;
+	if (rslt < 0) FAIL("n_read\n");
 	if (w > 0) sleep(1) ;
 
     } while (rslt < n && w++ < 5) ;
@@ -476,7 +547,7 @@
     do
     {
 	rslt = n_read_msgs(fd) ;
-	if (rslt < 0) xit() ;
+	if (rslt < 0) FAIL("n_read_msgs\n") ;
 	if (w > 0) sleep(1) ;
 
     } while (rslt < n && w++ < 5) ;
@@ -500,7 +571,7 @@
     do
     {
 	rslt = n_read(fd) ;
-	if (rslt < 0) xit() ;
+	if (rslt < 0) FAIL("n_read\n") ;
 
     } while (rslt > 0 && w++ < 50) ;
 
@@ -516,7 +587,7 @@
 * is not accumulating resources.					*
 *									*
 ************************************************************************/
-void	open_close_test(void)
+void	open_close_test(struct test_context *ctx)
 {
     int		fd1 ;
     int		fd2 ;
@@ -531,33 +602,33 @@
      */
     for (i = 1; i <= 1; i++)
     {
-	print("\nopen_close_test iteration #%d\n", i) ;
+	tprint("open_close_test iteration #%d\n", i) ;
 
 	fd1 = user_open(LOOP_1, O_RDWR, 0) ;
 	if (fd1 < 0)
 	{
-	    print("loop.1: %s\n", strerror(-fd1)) ;
+	    FAIL("loop.1: %s\n", STRERROR(-fd1)) ;
 	    break ;
 	}
 
 	fd2 = user_open(LOOP_2, O_RDWR, 0) ;
 	if (fd2 < 0)
 	{
-	    print("loop.2: %s\n", strerror(-fd2)) ;
+	    FAIL("loop.2: %s\n", STRERROR(-fd2)) ;
 	    break ;
 	}
 
 	fd3 = user_open(LOOP_1, O_RDWR, 0) ;
 	if (fd3 < 0)
 	{
-	    print("loop.1 (second open): %s\n", strerror(-fd3)) ;
+	    FAIL("loop.1 (second open): %s\n", STRERROR(-fd3)) ;
 	    break ;
 	}
 
 	rslt = user_open(LOOP_255, O_RDWR, 0) ;
 	if (rslt >= 0)			/* this is supposed to fail */
 	{
-	    print("loop.255 succeeded, but should have failed\n") ;
+	    tprint("loop.255 succeeded, but should have failed\n") ;
 	    user_close(rslt) ;
 	    break ;
 	}
@@ -569,14 +640,14 @@
 	rslt = user_ioctl(fd2, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: ioctl LOOP_DENY_OPEN: %s\n", strerror(-rslt)) ;
+	    FAIL("loop.2: ioctl LOOP_DENY_OPEN: %s\n", STRERROR(-rslt)) ;
 	    break ;
 	}
 
 	rslt = user_open(LOOP_2, O_RDWR, 0) ;
 	if (rslt >= 0)			/* this is supposed to fail */
 	{
-	    print("loop.2 succeeded, but should have failed\n") ;
+	    tprint("loop.2 succeeded, but should have failed\n") ;
 	    user_close(rslt) ;
 	    break ;
 	}
@@ -605,14 +676,14 @@
     *fd1 = user_open(LOOP_1, O_RDWR, 0) ;
     if (*fd1 < 0)
     {
-	print("loop.1: %s\n", strerror(-*fd1)) ;
+	ERR("loop.1: %s\n", STRERROR(-*fd1)) ;
 	return(*fd1) ;
     }
 
     *fd2 = user_open(LOOP_2, O_RDWR, 0) ;
     if (*fd2 < 0)
     {
-	print("loop.2: %s\n", strerror(-*fd2)) ;
+	ERR("loop.2: %s\n", STRERROR(-*fd2)) ;
 	user_close(*fd1) ;
 	return(*fd2) ;
     }
@@ -626,7 +697,7 @@
     rslt = user_ioctl(*fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_SET: %s\n", strerror(-rslt)) ;
+	ERR("loop.1: ioctl LOOP_SET: %s\n", STRERROR(-rslt)) ;
 	return(rslt) ;
     }
 
@@ -650,15 +721,13 @@
     *fd1 = user_open(LOOP_CLONE, O_RDWR, 0) ;
     if (*fd1 < 0)
     {
-	print("loop_clone.1: %s\n", strerror(-*fd1)) ;
-	xit() ;
+	FAIL("loop_clone.1: %s\n", STRERROR(-*fd1)) ;
     }
 
     *fd2 = user_open(LOOP_CLONE, O_RDWR, 0) ;
     if (*fd2 < 0)
     {
-	print("loop_clone.2: %s\n", strerror(-*fd2)) ;
-	xit() ;
+	FAIL("loop_clone.2: %s\n", STRERROR(-*fd2)) ;
     }
 
     ioc.ic_timout = 10 ;
@@ -670,14 +739,12 @@
     rslt = user_ioctl(*fd2, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: ioctl LOOP_GET_DEV: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: ioctl LOOP_GET_DEV: %s\n", STRERROR(-rslt)) ;
     }
 
     if (arg < 0)
     {
-	print("loop_clone.2: ioctl LOOP_GET_DEV returned %d\n", arg) ;
-	xit() ;
+	    FAIL("loop_clone.2: ioctl LOOP_GET_DEV returned %d\n", arg) ; /* missing ? */
     }
 
     ioc.ic_cmd 	  = LOOP_SET ;
@@ -685,8 +752,7 @@
     rslt = user_ioctl(*fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_SET: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.1: ioctl LOOP_SET: %s\n", STRERROR(-rslt)) ;
     }
 
     return(1) ;
@@ -709,7 +775,7 @@
     rslt = user_ioctl(fd, I_NREAD, &arg) ;
     if (rslt < 0)
     {
-	print("I_NREAD: %s\n", strerror(-rslt)) ;
+	ERR("I_NREAD: %s\n", STRERROR(-rslt)) ;
 	return(rslt) ;
     }
 
@@ -731,7 +797,7 @@
 
     rslt = user_ioctl(fd, I_NREAD, &arg) ;
     if (rslt < 0)
-	print("I_NREAD: %s\n", strerror(-rslt)) ;
+	ERR("I_NREAD: %s\n", STRERROR(-rslt)) ;
 
     return(rslt) ;
 
@@ -750,7 +816,7 @@
 
     rslt = user_write(fd, bfr, cnt) ;
     if (rslt < 0)
-	print("write_data: %s\n", strerror(-rslt)) ;
+	ERR("write_data: %s\n", STRERROR(-rslt)) ;
     else
     if (rslt != cnt)
 	print("write_data: write returned %d, expected %d\n", rslt, cnt) ;
@@ -775,7 +841,7 @@
 
     rslt = user_putpmsg(fd, ctlptr, dataptr, band, flags) ;
     if (rslt < 0)
-	print("put_msg: %s\n", strerror(-rslt)) ;
+	ERR("put_msg: %s\n", STRERROR(-rslt)) ;
     else
     if (rslt > 0)
 	print("put_msg: putpmsg returned %d, expected <= 0\n", rslt) ;
@@ -806,7 +872,7 @@
 * Send an ioctl to the "loop" driver to cross-connect the two streams.	*
 *									*
 ************************************************************************/
-void	ioctl_test(void)
+void	ioctl_test(struct test_context *ctx)
 {
     int			i ;
     int			fd1 ;
@@ -825,7 +891,7 @@
      */
     for (i = 1; i <= 1; i++)
     {
-	print("\nioctl_test iteration #%d\n", i) ;
+	tprint("ioctl_test iteration #%d\n", i) ;
 
 		/********************************
 		*           Open Files          * 
@@ -834,15 +900,13 @@
 	fd1 = user_open(LOOP_1, O_RDWR, 0) ;
 	if (fd1 < 0)
 	{
-	    print("loop.1: %s\n", strerror(-fd1)) ;
-	    xit() ;
+	    FAIL("loop.1: %s\n", STRERROR(-fd1)) ;
 	}
 
 	fd2 = user_open(LOOP_2, O_RDWR, 0) ;
 	if (fd2 < 0)
 	{
-	    print("loop.2: %s\n", strerror(-fd2)) ;
-	    xit() ;
+	    FAIL("loop.2: %s\n", STRERROR(-fd2)) ;
 	}
 
 		/********************************
@@ -858,7 +922,7 @@
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: ioctl LOOP_SET: %s\n", strerror(-rslt)) ;
+	    FAIL("loop.1: ioctl LOOP_SET: %s\n", STRERROR(-rslt)) ;
 	}
 
 	/*
@@ -871,11 +935,10 @@
 	rslt = user_ioctl(fd2, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: ioctl returned expected error: %s\n",
-		  strerror(-rslt)) ;
+	    ERR("loop.2: ioctl returned expected error: %s\n", STRERROR(-rslt)) ;
 	}
 	else
-	    print("loop.2: ioctl returned unexpected success, "
+	    tprint("loop.2: ioctl returned unexpected success, "
 	          "should fail with EBUSY\n") ;
 
 	user_close(fd1) ;
@@ -885,20 +948,18 @@
 	fd1 = user_open(LOOP_1, O_RDWR, 0) ;
 	if (fd1 < 0)
 	{
-	    print("loop.1: %s\n", strerror(-fd1)) ;
-	    xit() ;
+	    FAIL("loop.1: %s\n", STRERROR(-fd1)) ;
 	}
 
 		/********************************
 		*             I_PUSH            * 
 		********************************/
 
-	print("\nTesting I_PUSH (relay)\n") ;
+	tprint("Testing I_PUSH (relay)\n") ;
 	rslt = user_ioctl(fd1, I_PUSH, "relay") ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_PUSH (relay): %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_PUSH (relay): %s\n", STRERROR(-rslt)) ;
 	}
 
 	print_mem() ;
@@ -907,28 +968,26 @@
 		*             I_LOOK            * 
 		********************************/
 
-	print("\nTesting I_LOOK\n") ;
-	strcpy(buf,"Nothing at all") ;
-	rslt = user_ioctl(fd1, I_LOOK, buf) ;
+	tprint("Testing I_LOOK\n") ;
+	strcpy(ctx->buf,"Nothing at all") ;
+	rslt = user_ioctl(fd1, I_LOOK, ctx->buf) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_LOOK: %s\n", strerror(-fd1)) ;
-	    xit() ;
+	    FAIL("loop.1: I_LOOK: %s\n", STRERROR(-fd1)) ;
 	}
 
-	print("I_LOOK returned \"%s\"\n", buf) ;
+	tprint("I_LOOK returned \"%s\"\n", ctx->buf) ;
 	print_mem() ;
 
 		/********************************
 		*             I_PUSH            * 
 		********************************/
 
-	print("\nTesting I_PUSH (relay2)\n") ;
+	tprint("Testing I_PUSH (relay2)\n") ;
 	rslt = user_ioctl(fd1, I_PUSH, "relay2") ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_PUSH (relay2): %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_PUSH (relay2): %s\n", STRERROR(-rslt)) ;
 	}
 
 	print_stream(fd1) ;
@@ -938,16 +997,15 @@
 		*             I_FIND            * 
 		********************************/
 
-	print("\nTesting I_FIND\n") ;
+	tprint("Testing I_FIND\n") ;
 	rslt = user_ioctl(fd1, I_FIND, "relay") ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_FIND: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_FIND: %s\n", STRERROR(-rslt)) ;
 	}
 
-	if (rslt > 0)	print("Module \"relay\" is present in the stream\n");
-	else		print("Module \"relay\" is not present in the stream\n");
+	if (rslt > 0)	tprint("Module \"relay\" is present in the stream\n");
+	else		tprint("Module \"relay\" is not present in the stream\n");
 
 	print_mem() ;
 
@@ -958,8 +1016,7 @@
 	fd2 = user_open(LOOP_2, O_RDWR, 0) ;
 	if (fd2 < 0)
 	{
-	    print("loop.2: %s\n", strerror(-fd2)) ;
-	    xit() ;
+	    FAIL("loop.2: %s\n", STRERROR(-fd2)) ;
 	}
 
 	ioc.ic_cmd 	  = LOOP_SET ;
@@ -971,127 +1028,120 @@
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: ioctl LOOP_SET: %s\n", strerror(-rslt)) ;
+	    FAIL("loop.1: ioctl LOOP_SET: %s\n", STRERROR(-rslt)) ;
 	}
 
-	print("\nTesting read and write\n") ;
-	strcpy(buf, "Data to send down the file") ;
-	rslt = write_data(fd1, buf, lgth = strlen(buf)) ;
+	tprint("Testing read and write\n") ;
+	strcpy(ctx->buf, "Data to send down the file") ;
+	rslt = write_data(fd1, ctx->buf, lgth = strlen(ctx->buf)) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	/*
 	 * Streams read will wait until the entire count is
 	 * exhausted as the default.  Later we will test changing
 	 * this option.  For now, just read what was written.
 	 */
-	rdbuf[0] = 0 ;
-	rslt = user_read(fd2, rdbuf, lgth);
+	ctx->rdbuf[0] = 0 ;
+	rslt = user_read(fd2, ctx->rdbuf, lgth);
 	if (rslt < 0)
 	{
-	    print("loop.2: read: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: read: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt != lgth)
 	{
-	    print("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	    xit() ;
+	    FAIL("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
 	}
 
-	if (strcmp(buf, rdbuf))
+	if (strcmp(ctx->buf, ctx->rdbuf))
 	{
-	    print("loop.2: read: buffer compare error\n") ;
-	    print("              wrote \"%s\"\n", buf) ;
-	    print("              read  \"%s\"\n", rdbuf) ;
+	    tprint("loop.2: read: buffer compare error\n") ;
+	    tprint("              wrote \"%s\"\n", ctx->buf) ;
+	    tprint("              read  \"%s\"\n", ctx->rdbuf) ;
 	}
 	else
-	    print("loop.2: read %d bytes: buffer compared OK\n", rslt) ;
+	    tprint("loop.2: read %d bytes: buffer compared OK\n", rslt) ;
 
 	for (i = 1; i <= 20; i++)
-	    strcat(buf, " Add more data to make the message longer. ") ;
+	    strcat(ctx->buf, " Add more data to make the message longer. ") ;
 
-	lgth = strlen(buf) ;
-	print("Write %d bytes and read back\n", lgth) ;
-	rslt = write_data(fd1, buf, lgth) ;
+	lgth = strlen(ctx->buf) ;
+	tprint("Write %d bytes and read back\n", lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	/*
 	 * Streams read will wait until the entire count is
 	 * exhausted as the default.  Later we will test changing
 	 * this option.  For now, just read what was written.
 	 */
-	rdbuf[0] = 0 ;
-	rslt = user_read(fd2, rdbuf, lgth);
+	ctx->rdbuf[0] = 0 ;
+	rslt = user_read(fd2, ctx->rdbuf, lgth);
 	if (rslt < 0)
 	{
-	    print("loop.2: read: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: read: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt != lgth)
 	{
-	    print("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	    xit() ;
+	    FAIL("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
 	}
 
-	if (strcmp(buf, rdbuf))
+	if (strcmp(ctx->buf, ctx->rdbuf))
 	{
-	    print("loop.2: read: buffer compare error\n") ;
-	    print("              wrote \"%s\"\n", buf) ;
-	    print("              read  \"%s\"\n", rdbuf) ;
+	    tprint("loop.2: read: buffer compare error\n") ;
+	    tprint("              wrote \"%s\"\n", ctx->buf) ;
+	    tprint("              read  \"%s\"\n", ctx->rdbuf) ;
 	}
 	else
-	    print("loop.2: read %d bytes: buffer compared OK\n", rslt) ;
+	    tprint("loop.2: read %d bytes: buffer compared OK\n", rslt) ;
 
 
 		/********************************
 		*             I_NREAD           * 
 		********************************/
 
-	print("\nTesting I_NREAD\n") ;
+	tprint("Testing I_NREAD\n") ;
 	/*
 	 * Write two blocks into the file.
 	 */
-	strcpy(buf, "Data to send down the file") ;
-	rslt = write_data(fd1, buf, lgth = strlen(buf)) ;
+	strcpy(ctx->buf, "Data to send down the file") ;
+	rslt = write_data(fd1, ctx->buf, lgth = strlen(ctx->buf)) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
-	strcpy(buf, "More data to send down the file") ;
-	rslt = write_data(fd1, buf, lgth2 = strlen(buf)) ;
+	strcpy(ctx->buf, "More data to send down the file") ;
+	rslt = write_data(fd1, ctx->buf, lgth2 = strlen(ctx->buf)) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	rslt = n_read(fd2) ;
 	if (rslt < 0)
 	{
 	    print_mem() ;
-	    xit() ;
+	    FAIL("n_read\n") ;
 	}
 
 	if (rslt != lgth)		/* just the 1st  msg */
 	{
-	    print("loop.2:  I_NREAD returned %d, expected %d\n", rslt, lgth) ;
 	    print_mem() ;
-	    xit() ;
+	    FAIL("loop.2:  I_NREAD returned %d, expected %d\n", rslt, lgth) ;
 	}
 	else
-	    print("loop.2: I_NREAD returned %d, OK\n", rslt) ;
+	    tprint("loop.2: I_NREAD returned %d, OK\n", rslt) ;
 
-	memset(rdbuf, 0, sizeof(rdbuf)) ;
-	rslt = user_read(fd2, rdbuf, lgth);
+	memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
+	rslt = user_read(fd2, ctx->rdbuf, lgth);
 	if (rslt < 0)
 	{
-	    print("loop.2: read: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: read: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt != lgth)
 	{
-	    print("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	    xit() ;
+	    FAIL("loop.2:  read returned %d, expected %d\n", rslt, lgth) ;
 	}
 
 
@@ -1099,67 +1149,63 @@
 		*             I_FLUSH           * 
 		********************************/
 
-	print("\nTesting I_FLUSH\n") ;
+	tprint("Testing I_FLUSH\n") ;
 
 	/*
 	 * One message left unread from previous test.
 	 */
-	strcpy(buf, "More data to send down the file") ;
-	rslt = write_data(fd1, buf, lgth = strlen(buf)) ;
+	strcpy(ctx->buf, "More data to send down the file") ;
+	rslt = write_data(fd1, ctx->buf, lgth = strlen(ctx->buf)) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
-	rslt = write_data(fd1, buf, lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	rslt = nread_wait_msgs(fd2, 3) ;
 	if (rslt != 3)
 	{
-	    print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
-	    xit() ;
+	    FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
 	}
 
 	rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
 	}
 
 	rslt = flush_wait(fd2) ;
 	if (rslt != 0)
 	{
-	    print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	    xit() ;
+	    FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
 	}
 
-	print("\nTesting LOOP_FLUSH\n") ;
+	tprint("\nTesting LOOP_FLUSH\n") ;
 
-	rslt = write_data(fd1, buf, lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
 	    xit() ;
 
 	rslt = nread_wait_msgs(fd2, 1) ;
 	if (rslt != 1)
 	{
-	    print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 1) ;
-	    xit() ;
+	    FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 1) ;
 	}
 
-	strcpy(buf, "Data following flush") ;
+	strcpy(ctx->buf, "Data following flush") ;
 	ioc.ic_timout	  = 10 ;
-	ioc.ic_dp	  = buf;
+	ioc.ic_dp	  = ctx->buf;
 	ioc.ic_cmd 	  = LOOP_FLUSH ;
-	ioc.ic_len	  = strlen(buf) ;
+	ioc.ic_len	  = strlen(ctx->buf) ;
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
 	    print("loop_clone.1: ioctl LOOP_FLUSH: %s\n", strerror(-rslt)) ;
 	}
 
-	memset(rdbuf, 0, sizeof(rdbuf)) ;
-	rslt = user_read(fd2, rdbuf, ioc.ic_len);
+	memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
+	rslt = user_read(fd2, ctx->rdbuf, ioc.ic_len);
 	if (rslt < 0)
 	{
 	    print("loop.2: read: %s\n", strerror(-rslt)) ;
@@ -1172,141 +1218,129 @@
 	    xit() ;
 	}
 
-	if (strcmp(buf, rdbuf))
+	if (strcmp(ctx->buf, ctx->rdbuf))
 	{
-	    print("loop.2:  Expected: %s\n              Got: %s\n", buf, rdbuf);
-	    xit() ;
+	    FAIL("loop.2:  Expected: %s\n              Got: %s\n", ctx->buf, ctx->rdbuf);
 	}
 
-	print("LOOP_FLUSH test succeeded\n") ;
+	tprint("LOOP_FLUSH test succeeded\n") ;
 
 
 		/********************************
 		*           I_CANPUT            * 
 		********************************/
 
-	print("\nTesting I_CANPUT\n") ;
+	tprint("Testing I_CANPUT\n") ;
 	rslt = user_ioctl(fd2, I_CANPUT, 0) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_CANPUT: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_CANPUT: %s\n", STRERROR(-rslt)) ;
 	}
 
-	print("loop.2: I_CANPUT returned %d\n", rslt) ;
+	tprint("loop.2: I_CANPUT returned %d\n", rslt) ;
 
 		/********************************
 		*           I_SETCLTIME         * 
 		********************************/
 
-	print("\nTesting I_SETCLTIME\n") ;
+	tprint("Testing I_SETCLTIME\n") ;
 	rslt = user_ioctl(fd2, I_SETCLTIME, 50) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_SETCLTIME: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_SETCLTIME: %s\n", STRERROR(-rslt)) ;
 	}
 
-	print("loop.2: I_SETCLTIME returned %d\n", rslt) ;
+	tprint("loop.2: I_SETCLTIME returned %d\n", rslt) ;
 
 		/********************************
 		*           I_GETCLTIME         * 
 		********************************/
 
-	print("\nTesting I_GETCLTIME\n") ;
+	tprint("Testing I_GETCLTIME\n") ;
 	arg = 0 ;
 	rslt = user_ioctl(fd2, I_GETCLTIME, &arg) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_GETCLTIME: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_GETCLTIME: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (arg != 50)
-	    print("loop.2: I_GETCLTIME returned %d, expected %d\n", arg, 50) ;
+	    tprint("loop.2: I_GETCLTIME returned %d, expected %d\n", arg, 50) ;
 	else
-	    print("loop.2: I_GETCLTIME returned %d\n", arg) ;
+	    tprint("loop.2: I_GETCLTIME returned %d\n", arg) ;
 
 		/********************************
 		*             I_LIST            * 
 		********************************/
 
-	print("\nTesting I_LIST\n") ;
+	tprint("Testing I_LIST\n") ;
 	rslt = user_ioctl(fd1, I_LIST, NULL) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_LIST: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_LIST: %s\n", STRERROR(-rslt)) ;
 	}
-	print("I_LIST(loop.1, NULL) = %d\n", rslt) ;
+	tprint("I_LIST(loop.1, NULL) = %d\n", rslt) ;
 	lgth = rslt ;			/* length of list */
 
 	rslt = user_ioctl(fd2, I_LIST, NULL) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_LIST: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_LIST: %s\n", STRERROR(-rslt)) ;
 	}
-	print("I_LIST(loop.1, NULL) = %d\n", rslt) ;
+	tprint("I_LIST(loop.1, NULL) = %d\n", rslt) ;
 	lgth2 = rslt ;			/* length of list */
 
-	mod_list.sl_nmods = sizeof(mod_names)/sizeof(mod_names[0]);
-	rslt = user_ioctl(fd1, I_LIST, &mod_list) ;
+	ctx->mod_list.sl_nmods = sizeof(ctx->mod_names)/sizeof(ctx->mod_names[0]);
+	rslt = user_ioctl(fd1, I_LIST, &ctx->mod_list) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_LIST: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_LIST: %s\n", STRERROR(-rslt)) ;
 	}
 	if (rslt > 0)
 	{
-	    print("loop.1: I_LIST: Returned positive value\n") ;
-	    xit() ;
+	    tprint("loop.1: I_LIST: Returned positive value\n") ;
 	}
-	if (mod_list.sl_nmods != lgth)
+	if (ctx->mod_list.sl_nmods != lgth)
 	{
-	    print("loop.1: I_LIST returned %d modules, expected %d \n",
-		    mod_list.sl_nmods, lgth) ;
-	    xit() ;
+	    FAIL("loop.1: I_LIST returned %d modules, expected %d \n",
+		    ctx->mod_list.sl_nmods, lgth) ;
 	}
 
-	for (mlp = mod_names; mod_list.sl_nmods > 0;
-	     mod_list.sl_nmods--, mlp++)
+	for (mlp = ctx->mod_names; ctx->mod_list.sl_nmods > 0;
+	     ctx->mod_list.sl_nmods--, mlp++)
 	{
-	    print("loop.1 module[%d] is \"%s\"\n",
-		  lgth-mod_list.sl_nmods, mlp->l_name) ;
+	    tprint("loop.1 module[%d] is \"%s\"\n",
+		  lgth-ctx->mod_list.sl_nmods, mlp->l_name) ;
 	}
 
-	mod_list.sl_nmods = sizeof(mod_names)/sizeof(mod_names[0]);
-	rslt = user_ioctl(fd2, I_LIST, &mod_list) ;
+	ctx->mod_list.sl_nmods = sizeof(ctx->mod_names)/sizeof(ctx->mod_names[0]);
+	rslt = user_ioctl(fd2, I_LIST, &ctx->mod_list) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_LIST: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_LIST: %s\n", STRERROR(-rslt)) ;
 	}
 	if (rslt > 0)
 	{
-	    print("loop.2: I_LIST: Returned positive value\n") ;
-	    xit() ;
+	    FAIL("loop.2: I_LIST: Returned positive value\n") ;
 	}
-	if (mod_list.sl_nmods != lgth2)
+	if (ctx->mod_list.sl_nmods != lgth2)
 	{
-	    print("loop.2: I_LIST returned %d modules, expected %d \n",
-		    mod_list.sl_nmods, lgth2) ;
-	    xit() ;
+	    FAIL("loop.2: I_LIST returned %d modules, expected %d \n",
+		    ctx->mod_list.sl_nmods, lgth2) ;
 	}
 
-	for (mlp = mod_names; mod_list.sl_nmods > 0;
-	     mod_list.sl_nmods--, mlp++)
+	for (mlp = ctx->mod_names; ctx->mod_list.sl_nmods > 0;
+	     ctx->mod_list.sl_nmods--, mlp++)
 	{
-	    print("loop.2 module[%d] is \"%s\"\n",
-		  lgth2-mod_list.sl_nmods, mlp->l_name) ;
+	    tprint("loop.2 module[%d] is \"%s\"\n",
+		  lgth2-ctx->mod_list.sl_nmods, mlp->l_name) ;
 	}
 
 		/********************************
 		*           I_ATMARK            *
 		********************************/
 
-	print("\nTesting I_ATMARK\n") ;
+	tprint("Testing I_ATMARK\n") ;
 
 	/*
 	 * Because of writing into one stream and checking for the marked
@@ -1322,41 +1356,38 @@
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	    FAIL("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
 	}
 
-	strcpy(buf, "Data to send down the file for testing I_ATMARK") ;
-	lgth = strlen(buf) ;
+	strcpy(ctx->buf, "Data to send down the file for testing I_ATMARK") ;
+	lgth = strlen(ctx->buf) ;
 
 	rslt = user_ioctl(fd2, I_ATMARK, ANYMARK) ;
-	print("loop.2: I_ATMARK w/no messages: ") ;
+	tprint("loop.2: I_ATMARK w/no messages: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
-	print("OK\n") ;
+	tprint("OK\n") ;
 
-	rslt = write_data(fd1, buf, lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	rslt = user_ioctl(fd2, I_ATMARK, ANYMARK) ;
-	print("loop.2: I_ATMARK w/non-marked message: ") ;
+	tprint("loop.2: I_ATMARK w/non-marked message: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
-	print("OK\n") ;
+	tprint("OK\n") ;
 
 	rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
 	}
 
 	rslt = flush_wait(fd2) ;
@@ -1368,132 +1399,117 @@
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: ioctl LOOP_MARK: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: ioctl LOOP_MARK: %s\n", STRERROR(-rslt)) ;
 	}
 
-	rslt = write_data(fd1, buf, lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	nread_wait_msgs(fd2, 1) ;
 	rslt = user_ioctl(fd2, I_ATMARK, ANYMARK) ;
-	print("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
+	tprint("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 1)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
 	rslt = user_ioctl(fd2, I_ATMARK, LASTMARK) ;
-	print("loop.2: I_ATMARK(LASTMARK) w/marked message last: ") ;
+	tprint("loop.2: I_ATMARK(LASTMARK) w/marked message last: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 1)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
-	rslt = write_data(fd1, buf, lgth) ;	/* non-marked msg */
+	rslt = write_data(fd1, ctx->buf, lgth) ;	/* non-marked msg */
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	rslt = user_ioctl(fd2, I_ATMARK, ANYMARK) ;
-	print("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
+	tprint("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 1)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
 	rslt = user_ioctl(fd2, I_ATMARK, LASTMARK) ;
-	print("loop.2: I_ATMARK(LASTMARK) w/marked message last: ") ;
+	tprint("loop.2: I_ATMARK(LASTMARK) w/marked message last: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 1)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
 	ioc.ic_len	  = 0 ;
 	rslt = user_ioctl(fd1, I_STR, &ioc) ;		/* mark nxt msg */
 	if (rslt < 0)
 	{
-	    print("loop.1: ioctl LOOP_MARK: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: ioctl LOOP_MARK: %s\n", STRERROR(-rslt)) ;
 	}
 
-	rslt = write_data(fd1, buf, lgth) ;
+	rslt = write_data(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 	rslt = user_ioctl(fd2, I_ATMARK, ANYMARK) ;
-	print("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
+	tprint("loop.2: I_ATMARK(ANYMARK) w/marked message: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 1)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
 	rslt = user_ioctl(fd2, I_ATMARK, LASTMARK) ;
-	print("loop.2: I_ATMARK(LASTMARK) w/marked message not last: ") ;
+	tprint("loop.2: I_ATMARK(LASTMARK) w/marked message not last: ") ;
 	if (rslt < 0)
 	{
-	    print("%s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("%s\n", STRERROR(-rslt)) ;
 	}
 
 	if (rslt == 0)
-	    print("OK\n") ;
+	    tprint("OK\n") ;
 	else
 	{
-	    print("returned %d, expected 1\n", rslt) ;
-	    xit() ;
+	    FAIL("returned %d, expected 1\n", rslt) ;
 	}
 
 	rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
 	}
 
 
@@ -1501,34 +1517,31 @@
 		*           I_SETSIG            * 
 		********************************/
 
-	print("\nTesting I_SETSIG/I_GETSIG\n") ;
+	tprint("Testing I_SETSIG/I_GETSIG\n") ;
 	rslt = user_ioctl(fd1, I_SETSIG, S_INPUT) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_SETSIG: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_SETSIG: %s\n", STRERROR(-rslt)) ;
 	}
 
 	rslt = user_ioctl(fd1, I_GETSIG, &arg) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_GETSIG: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_GETSIG: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (arg == S_INPUT)
-	    print("loop.1: I_GETSIG returned 0x%x, OK\n", arg) ;
+	    tprint("loop.1: I_GETSIG returned 0x%x, OK\n", arg) ;
 	else
 	{
-	    print("loop.1: I_GETSIG returned 0x%x, expected 0x%x\n",
+	    FAIL("loop.1: I_GETSIG returned 0x%x, expected 0x%x\n",
 	    		arg, S_INPUT) ;
-	    xit() ;
 	}
 
 	signal(SIGPOLL, input_sig) ;
-	rslt = write_data(fd2, buf, lgth) ;	/* produce some input on fd1 */
+	rslt = write_data(fd2, ctx->buf, lgth) ;	/* produce some input on fd1 */
 	if (rslt < 0)
-	    xit() ;
+	    FAIL("write_data\n") ;
 
 
 
@@ -1536,49 +1549,45 @@
 		*             I_POP             * 
 		********************************/
 
-	print("\nTesting I_POP\n") ;
+	tprint("Testing I_POP\n") ;
 	rslt = user_ioctl(fd1, I_POP, 0) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: I_POP: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: I_POP: %s\n", STRERROR(-rslt)) ;
 	}
 
 		/********************************
 		*         TRANSPARENT           * 
 		********************************/
 
-	print("\nTesting TRANSPARENT ioctls\n") ;
-	strcpy(buf, "Data for loop driver transparent test") ;
+	tprint("Testing TRANSPARENT ioctls\n") ;
+	strcpy(ctx->buf, "Data for loop driver transparent test") ;
 	xp.cmnd  = LOOP_XPARENT_COPYIN ;
-	xp.i_arg = strlen(buf) ;
-	xp.p_arg = buf ;
+	xp.i_arg = strlen(ctx->buf) ;
+	xp.p_arg = ctx->buf ;
 	rslt = user_ioctl(fd1, LOOP_XPARENT_COPYIN, &xp) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: LOOP_XPARENT_COPYIN: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: LOOP_XPARENT_COPYIN: %s\n", STRERROR(-rslt)) ;
 	}
 
 	xp.cmnd  = LOOP_XPARENT_COPYOUT ;
-	xp.i_arg = sizeof(rdbuf) ;
-	xp.p_arg = rdbuf ;
+	xp.i_arg = sizeof(ctx->rdbuf) ;
+	xp.p_arg = ctx->rdbuf ;
 	rslt = user_ioctl(fd1, LOOP_XPARENT_COPYOUT, &xp) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: LOOP_XPARENT_COPYOUT: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: LOOP_XPARENT_COPYOUT: %s\n", STRERROR(-rslt)) ;
 	}
 
-	print("Snt: %s\n", buf) ;
-	print("Rcv: %s\n", rdbuf) ;
-	if (strcmp(buf, rdbuf) != 0)
+	tprint("Snt: %s\n", ctx->buf) ;
+	tprint("Rcv: %s\n", ctx->rdbuf) ;
+	if (strcmp(ctx->buf, ctx->rdbuf) != 0)
 	{
-	    print("Buffers do not compare\n") ;
-	    xit() ;
+	    FAIL("Buffers do not compare\n") ;
 	}
 
-	print("Buffers compare OK\n") ;
+	tprint("Buffers compare OK\n") ;
 
 
 
@@ -1602,7 +1611,7 @@
 * Test various read options (and the associated ioctls).		*
 *									*
 ************************************************************************/
-void	rdopt_test(void)
+void	rdopt_test(struct test_context *ctx)
 {
     int			i ;
     int			fd1 ;
@@ -1613,14 +1622,14 @@
     int			lgth2 ;
     struct strioctl	ioc ;
 
-    print("\nRead option test\n") ;
+    tprint("Read option test\n") ;
 
 	    /********************************
 	    *         Open Files            * 
 	    ********************************/
 
     rslt = open_files(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_files\n") ;
 
     ioc.ic_timout = 10 ;
     ioc.ic_dp	  = NULL;
@@ -1629,50 +1638,48 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
     ioc.ic_len	  = 0 ;
     rslt = user_ioctl(fd2, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
 	    /********************************
 	    *         RNORM Test            * 
 	    ********************************/
 
-    print("\nTesting I_SRDOPT/I_GRDOPT(RNORM)\n") ;
+    tprint("Testing I_SRDOPT/I_GRDOPT(RNORM)\n") ;
     rslt = user_ioctl(fd1, I_SRDOPT, RNORM) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SRDOPT(RNORM): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SRDOPT(RNORM): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GRDOPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_GRDOPT(RNORM): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_GRDOPT(RNORM): %s\n", STRERROR(-rslt)) ;
     }
 
     if ((arg & RMODEMASK) == RNORM)
-	print("I_SRDOPT(RNORM) == I_GRDOPT\n") ;
+	tprint("I_SRDOPT(RNORM) == I_GRDOPT\n") ;
     else
-	print("I_SRDOPT(RNORM): set opt to %d, read back %d\n",
+	tprint("I_SRDOPT(RNORM): set opt to %d, read back %d\n",
 		    RNORM, arg & RMODEMASK) ;
 
     /*
      * Demonstrate this mode of operation by writing two messasges
      * downstream and then reading back both of them in one read.
      */
-    strcpy(buf, "Test data for I_SRDOPT(RNORM)") ;
-    lgth = strlen(buf) ;
+    strcpy(ctx->buf, "Test data for I_SRDOPT(RNORM)") ;
+    lgth = strlen(ctx->buf) ;
     for (i = 1; i <= 3; i++)		/* write it three times */
     {
-	if (write_data(fd2, buf, lgth) < 0) xit() ;
+	if (write_data(fd2, ctx->buf, lgth) < 0) FAIL("write_data\n") ;
     }
 
     /*
@@ -1680,73 +1687,67 @@
      * exhausted as the default (or out of data to read).  
      */
     nread_wait_msgs(fd1, 3) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
-    rslt = user_read(fd1, rdbuf, 2*lgth+1);
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
+    rslt = user_read(fd1, ctx->rdbuf, 2*lgth+1);
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != 2*lgth+1)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, 2*lgth+1) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, 2*lgth+1) ;
     }
 
     /*
      * Read the rest in with a count that is more than the length
      * of the remaining data.
      */
-    rslt = user_read(fd1, &rdbuf[2*lgth+1], 2*lgth);
+    rslt = user_read(fd1, &ctx->rdbuf[2*lgth+1], 2*lgth);
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth-1)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth-1) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth-1) ;
     }
 
-    if (   strncmp(buf, &rdbuf[0],      lgth) == 0
-        && strncmp(buf, &rdbuf[lgth],   lgth) == 0
-        && strncmp(buf, &rdbuf[2*lgth], lgth) == 0
+    if (   strncmp(ctx->buf, &ctx->rdbuf[0],      lgth) == 0
+        && strncmp(ctx->buf, &ctx->rdbuf[lgth],   lgth) == 0
+        && strncmp(ctx->buf, &ctx->rdbuf[2*lgth], lgth) == 0
        )
-	   print("Buffers compare OK\n") ;
+	   tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", buf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->buf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
 	    /********************************
 	    *         RMSGD Test            * 
 	    ********************************/
 
-    print("\nTesting I_SRDOPT/I_GRDOPT(RMSGD)\n") ;
+    tprint("Testing I_SRDOPT/I_GRDOPT(RMSGD)\n") ;
     rslt = user_ioctl(fd1, I_SRDOPT, RMSGD) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SRDOPT(RMSGD): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SRDOPT(RMSGD): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GRDOPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_GRDOPT(RMSGD): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_GRDOPT(RMSGD): %s\n", STRERROR(-rslt)) ;
     }
 
     if ((arg & RMODEMASK) == RMSGD)
-	print("I_SRDOPT(RMSGD) == I_GRDOPT\n") ;
+	tprint("I_SRDOPT(RMSGD) == I_GRDOPT\n") ;
     else
-	print("I_SRDOPT(RMSGD): set opt to %d, read back %d\n",
+	tprint("I_SRDOPT(RMSGD): set opt to %d, read back %d\n",
 		    RMSGD, arg & RMODEMASK) ;
 
     /*
@@ -1754,70 +1755,66 @@
      * and reading just a part of it back.  I_NREAD will then
      * tell us that there is nothing to be read anymore.
      */
-    strcpy(buf, "Test data for I_SRDOPT(RMSGD)") ;
-    lgth = strlen(buf) ;
-    if (write_data(fd2, buf, lgth) < 0) xit() ;
+    strcpy(ctx->buf, "Test data for I_SRDOPT(RMSGD)") ;
+    lgth = strlen(ctx->buf) ;
+    if (write_data(fd2, ctx->buf, lgth) < 0) FAIL("write_data\n") ;
 
     /*
      * Streams read will return with whatever is there.  Leftover
      * message fragment will be discarded.
      */
     nread_wait_msgs(fd1, 1) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
-    rslt = user_read(fd1, rdbuf, lgth/2);	/* read half the message */
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
+    rslt = user_read(fd1, ctx->rdbuf, lgth/2);	/* read half the message */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth/2)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth/2) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth/2) ;
     }
 
-    if (strncmp(buf, rdbuf, lgth/2) == 0)
-	print("Buffers compare OK\n") ;
+    if (strncmp(ctx->buf, ctx->rdbuf, lgth/2) == 0)
+	tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", buf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->buf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
     rslt = n_read(fd1) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("n_read\n") ;
     if (rslt > 0)
-	print("%d bytes still waiting to be read, should be zero\n", rslt);
+	tprint("%d bytes still waiting to be read, should be zero\n", rslt);
     else
-	print("No bytes waiting to be read\n") ;
+	tprint("No bytes waiting to be read\n") ;
 
 
 	    /********************************
 	    *         RMSGN Test            * 
 	    ********************************/
 
-    print("\nTesting I_SRDOPT/I_GRDOPT(RMSGN)\n") ;
+    tprint("Testing I_SRDOPT/I_GRDOPT(RMSGN)\n") ;
     rslt = user_ioctl(fd1, I_SRDOPT, RMSGN) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SRDOPT(RMSGN): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SRDOPT(RMSGN): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GRDOPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_GRDOPT(RMSGN): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_GRDOPT(RMSGN): %s\n", STRERROR(-rslt)) ;
     }
 
     if ((arg & RMODEMASK) == RMSGN)
-	print("I_SRDOPT(RMSGN) == I_GRDOPT\n") ;
+	tprint("I_SRDOPT(RMSGN) == I_GRDOPT\n") ;
     else
-	print("I_SRDOPT(RMSGN): set opt to %d, read back %d\n",
+	tprint("I_SRDOPT(RMSGN): set opt to %d, read back %d\n",
 		    RMSGN, arg & RMODEMASK) ;
 
     /*
@@ -1825,188 +1822,175 @@
      * and reading just a part of it back.  I_NREAD will then
      * tell us that there are more bytes waiting to be read.
      */
-    strcpy(buf, "Test data for I_SRDOPT(RMSGN)") ;
-    lgth = strlen(buf) ;
-    if (write_data(fd2, buf, lgth) < 0) xit() ;
+    strcpy(ctx->buf, "Test data for I_SRDOPT(RMSGN)") ;
+    lgth = strlen(ctx->buf) ;
+    if (write_data(fd2, ctx->buf, lgth) < 0) FAIL("write_data\n") ;
 
     /*
      * Streams read will return with whatever is there.  Leftover
      * message fragment will be saved.
      */
     nread_wait_msgs(fd1, 1) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
-    rslt = user_read(fd1, rdbuf, lgth/2);	/* read half the message */
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
+    rslt = user_read(fd1, ctx->rdbuf, lgth/2);	/* read half the message */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth/2)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth/2) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth/2) ;
     }
 
     rslt = n_read(fd1) ;			/* see what's left */
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("n_read\n") ;
     if (rslt != lgth - lgth/2)
     {
-	print("%d bytes still waiting to be read, should be %d\n",
+	FAIL("%d bytes still waiting to be read, should be %d\n",
 		 rslt, lgth - lgth/2);
-	xit() ;
     }
 
-    print("%d bytes waiting to be read, OK\n", rslt) ;
+    tprint("%d bytes waiting to be read, OK\n", rslt) ;
 
-    rslt = user_read(fd1, &rdbuf[lgth/2], lgth) ;	/* read the rest */
+    rslt = user_read(fd1, &ctx->rdbuf[lgth/2], lgth) ;	/* read the rest */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth - lgth/2)
     {
-	print("%d bytes on second read, should be %d\n",
+	FAIL("%d bytes on second read, should be %d\n",
 		 rslt, lgth - lgth/2);
-	xit() ;
     }
 
-    if (strncmp(buf, rdbuf, lgth) == 0)
-	print("Buffers compare OK\n") ;
+    if (strncmp(ctx->buf, ctx->rdbuf, lgth) == 0)
+	tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", buf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->buf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
 	    /********************************
 	    *           RPROTDAT            * 
 	    ********************************/
 
-    print("\nTesting I_SRDOPT/I_GRDOPT(RPROTDAT)\n") ;
+    tprint("Testing I_SRDOPT/I_GRDOPT(RPROTDAT)\n") ;
     rslt = user_ioctl(fd1, I_SRDOPT, RNORM|RPROTDAT) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SRDOPT(RPROTDAT): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SRDOPT(RPROTDAT): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GRDOPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_GRDOPT(RPROTDAT): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_GRDOPT(RPROTDAT): %s\n", STRERROR(-rslt)) ;
     }
 
     if (arg == (RNORM|RPROTDAT))
-	print("I_SRDOPT(RPROTDAT) == I_GRDOPT\n") ;
+	tprint("I_SRDOPT(RPROTDAT) == I_GRDOPT\n") ;
     else
-	print("I_SRDOPT(RPROTDAT): set opt to %d, read back %d\n",
+	tprint("I_SRDOPT(RPROTDAT): set opt to %d, read back %d\n",
 		    RNORM|RPROTDAT, arg) ;
 
     /*
      * Use putmsg to send a control message, read it back as normal
      * data.
      */
-    print("Control message only...\n") ;
-    strcpy(ctlbuf, "Control message for RPROTDAT test") ;
-    lgth = strlen(ctlbuf) ;
-    wr_ctl.len	= lgth ;
-    wr_dta.len	= -1 ;				/* no data part */
-    if (put_msg(fd2, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Control message only...\n") ;
+    strcpy(ctx->ctlbuf, "Control message for RPROTDAT test") ;
+    lgth = strlen(ctx->ctlbuf) ;
+    ctx->wr_ctl.len	= lgth ;
+    ctx->wr_dta.len	= -1 ;				/* no data part */
+    if (put_msg(fd2, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
     nread_wait_msgs(fd1, 1) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
-    rslt = user_read(fd1, rdbuf, lgth);		/* read the message */
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
+    rslt = user_read(fd1, ctx->rdbuf, lgth);		/* read the message */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth) ;
     }
 
-    if (strcmp(ctlbuf, rdbuf) == 0)
-	print("Buffers compare OK\n") ;
+    if (strcmp(ctx->ctlbuf, ctx->rdbuf) == 0)
+	tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", ctlbuf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->ctlbuf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
     /*
      * Use putmsg to send a control and data message, read it back as normal
      * data.
      */
-    print("Control and data message...\n") ;
-    strcpy(ctlbuf, "Control message for RPROTDAT test") ;
-    strcpy(buf,    "/Data message for RPROTDAT test") ;
-    lgth = strlen(ctlbuf) ;
-    lgth2 = strlen(buf) ;
-    wr_ctl.len	= lgth ;
-    wr_dta.len	= lgth2 ;
-    if (put_msg(fd2, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Control and data message...\n") ;
+    strcpy(ctx->ctlbuf, "Control message for RPROTDAT test") ;
+    strcpy(ctx->buf,    "/Data message for RPROTDAT test") ;
+    lgth = strlen(ctx->ctlbuf) ;
+    lgth2 = strlen(ctx->buf) ;
+    ctx->wr_ctl.len	= lgth ;
+    ctx->wr_dta.len	= lgth2 ;
+    if (put_msg(fd2, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
     lgth = lgth + lgth2 ;			/* combined message lgth */
     nread_wait_msgs(fd1, 1) ;
-    rslt = user_read(fd1, rdbuf, lgth);		/* read the message */
+    rslt = user_read(fd1, ctx->rdbuf, lgth);		/* read the message */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth) ;
     }
 
-    strcat(ctlbuf, buf) ;			/* concatenate the msgs */
-    if (strcmp(ctlbuf, rdbuf) == 0)
-	print("Buffers compare OK\n") ;
+    strcat(ctx->ctlbuf, ctx->buf) ;			/* concatenate the msgs */
+    if (strcmp(ctx->ctlbuf, ctx->rdbuf) == 0)
+	tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", ctlbuf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->ctlbuf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
 	    /********************************
 	    *           RPROTDIS            * 
 	    ********************************/
 
-    print("\nTesting I_SRDOPT/I_GRDOPT(RPROTDIS)\n") ;
+    tprint("Testing I_SRDOPT/I_GRDOPT(RPROTDIS)\n") ;
     rslt = user_ioctl(fd1, I_SRDOPT, RMSGN|RPROTDIS) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SRDOPT(RPROTDIS): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SRDOPT(RPROTDIS): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GRDOPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_GRDOPT(RPROTDIS): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_GRDOPT(RPROTDIS): %s\n", STRERROR(-rslt)) ;
     }
 
     if (arg == (RMSGN|RPROTDIS))
-	print("I_SRDOPT(RPROTDIS) == I_GRDOPT\n") ;
+	tprint("I_SRDOPT(RPROTDIS) == I_GRDOPT\n") ;
     else
-	print("I_SRDOPT(RPROTDIS): set opt to %d, read back %d\n",
+	tprint("I_SRDOPT(RPROTDIS): set opt to %d, read back %d\n",
 		    RMSGN|RPROTDIS, arg) ;
 
     /*
@@ -2016,21 +2000,20 @@
      * It is not clear whether this should result in a zero-length
      * message or no message at all.  For now it is the second.
      */
-    print("Control message only...\n") ;
-    strcpy(ctlbuf, "Control message for RPROTDIS test") ;
-    lgth = strlen(ctlbuf) ;
-    wr_ctl.len	= lgth ;
-    wr_dta.len	= -1 ;				/* no data part */
-    if (put_msg(fd2, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Control message only...\n") ;
+    strcpy(ctx->ctlbuf, "Control message for RPROTDIS test") ;
+    lgth = strlen(ctx->ctlbuf) ;
+    ctx->wr_ctl.len	= lgth ;
+    ctx->wr_dta.len	= -1 ;				/* no data part */
+    if (put_msg(fd2, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
     nread_wait_msgs(fd1, 1) ;
     rslt = n_read(fd1);				/* check how many bytes */
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("n_read\n") ;
 
     if (rslt != 0)				/* should read 0 bytes */
     {
-	print("loop.1:  I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.1:  I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
     /*
@@ -2038,45 +2021,43 @@
      * data.  The control part should be discarded and the data part
      * delivered.
      */
-    print("Control and data message...\n") ;
-    strcpy(ctlbuf, "Control message for RPROTDIS test") ;
-    strcpy(buf,    "/Data message for RPROTDIS test") ;
-    lgth = strlen(ctlbuf) ;
-    lgth2 = strlen(buf) ;
-    wr_ctl.len	= lgth ;
-    wr_dta.len	= lgth2 ;
-    if (put_msg(fd2, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Control and data message...\n") ;
+    strcpy(ctx->ctlbuf, "Control message for RPROTDIS test") ;
+    strcpy(ctx->buf,    "/Data message for RPROTDIS test") ;
+    lgth = strlen(ctx->ctlbuf) ;
+    lgth2 = strlen(ctx->buf) ;
+    ctx->wr_ctl.len	= lgth ;
+    ctx->wr_dta.len	= lgth2 ;
+    if (put_msg(fd2, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
     nread_wait_msgs(fd1, 1) ;
-    rslt = user_read(fd1, rdbuf, sizeof(rdbuf));	/* read the message */
+    rslt = user_read(fd1, ctx->rdbuf, sizeof(ctx->rdbuf));	/* read the message */
     if (rslt < 0)
     {
-	print("loop.1: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth2)
     {
-	print("loop.1:  read returned %d, expected %d\n", rslt, lgth2) ;
-	xit() ;
+	FAIL("loop.1:  read returned %d, expected %d\n", rslt, lgth2) ;
     }
 
-    if (strcmp(buf, rdbuf) == 0)			/* only the data */
-	print("Buffers compare OK\n") ;
+    if (strcmp(ctx->buf, ctx->rdbuf) == 0)			/* only the data */
+	tprint("Buffers compare OK\n") ;
     else
     {
-	print("Data read does not match data written\n") ;
-	print("Wrote: %s\n", buf) ;
-	print("Read:  %s\n", rdbuf) ;
-	xit() ;
+	tprint("Data read does not match data written\n") ;
+	tprint("Wrote: %s\n", ctx->buf) ;
+	tprint("Read:  %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nrdopt_test: close files\n") ;
+    tprint("rdopt_test: close files\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -2089,7 +2070,7 @@
 * Test various forms of write.						*
 *									*
 ************************************************************************/
-void	write_test(void)
+void	write_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -2102,87 +2083,79 @@
     int			unblocked ;
 #endif
 
-    print("\nWrite option test\n") ;
+    tprint("Write option test\n") ;
 
 	    /********************************
 	    *         Open Files            * 
 	    ********************************/
 
     rslt = open_files(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_files\n") ;
 
 	    /********************************
 	    *       Zero-lgth Write         * 
 	    ********************************/
 
-    print("\nTesting write zero bytes w/o SNDZERO option\n") ;
-    rslt = user_write(fd1, buf, 0) ;
+    tprint("Testing write zero bytes w/o SNDZERO option\n") ;
+    rslt = user_write(fd1, ctx->buf, 0) ;
 #if 1
     if (rslt == 0)
-	print("loop.1: *** write zero bytes returned zero.  Should it?\n") ;
+	tprint("loop.1: *** write zero bytes returned zero.  Should it?\n") ;
     else
-	print("loop.1: *** write zero bytes returned %d.  Should it?\n", rslt) ;
+	tprint("loop.1: *** write zero bytes returned %d.  Should it?\n", rslt) ;
 #else
     if (rslt < 0)
-	print("loop.1: write zero bytes: %s: expected error\n",
-		    strerror(-rslt)) ;
+	ERR("loop.1: write zero bytes: %s: expected error\n", STRERROR(-rslt)) ;
     else
     {
-	print("loop.1: write zero bytes: returned %d instead of error\n",
+	FAIL("loop.1: write zero bytes: returned %d instead of error\n",
 		rslt) ;
-	xit() ;
     }
 #endif
 
-    print("\nTesting write zero bytes with SNDZERO option\n") ;
+    tprint("Testing write zero bytes with SNDZERO option\n") ;
     rslt = user_ioctl(fd1, I_SWROPT, SNDZERO) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SWROPT(SNDZERO): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SWROPT(SNDZERO): %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd1, I_GWROPT, &arg) ;
     if (rslt < 0)
     {
-	print("loop.1: I_SWROPT(SNDZERO): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: I_SWROPT(SNDZERO): %s\n", STRERROR(-rslt)) ;
     }
 
     if (arg == SNDZERO)
-	print("I_SWROPT(SNDZERO) == I_GWROPT\n") ;
+	tprint("I_SWROPT(SNDZERO) == I_GWROPT\n") ;
     else
     {
-	print("I_SWROPT(SNDZERO): set opt to %d, read back %d\n",
+	FAIL("I_SWROPT(SNDZERO): set opt to %d, read back %d\n",
 		    SNDZERO, arg) ;
-	xit() ;
     }
 
-    rslt = user_write(fd1, buf, 0) ;
+    rslt = user_write(fd1, ctx->buf, 0) ;
     if (rslt < 0)
     {
-	print("loop.1: write zero bytes: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: write zero bytes: %s\n", STRERROR(-rslt)) ;
     }
     else
-	print("loop.1: write zero bytes: returned %d\n", rslt) ;
+	tprint("loop.1: write zero bytes: returned %d\n", rslt) ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;	
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;	
     nread_wait_msgs(fd2, 1) ;
-    rslt = user_read(fd2, rdbuf, sizeof(rdbuf)) ;
+    rslt = user_read(fd2, ctx->rdbuf, sizeof(ctx->rdbuf)) ;
     if (rslt < 0)
     {
-	print("loop.2: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != 0)
     {
-	print("loop.2:  read returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2:  read returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("Read 0 bytes from 0-length write\n") ;
+    tprint("Read 0 bytes from 0-length write\n") ;
 
 	    /********************************
 	    *         Message Burst	    * 
@@ -2203,10 +2176,10 @@
 	xit() ;
     }
 
-    strcpy(buf, "Burst data test:  ............data pattern.......") ;
-    lgth = strlen(buf)+1 ;
+    strcpy(ctx->buf, "Burst data test:  ............data pattern.......") ;
+    lgth = strlen(ctx->buf)+1 ;
 
-    rslt = user_write(fd1, buf, lgth) ;
+    rslt = user_write(fd1, ctx->buf, lgth) ;
     if (rslt < 0)
     {
 	print("loop.1: write: %s\n", strerror(-rslt)) ;
@@ -2227,7 +2200,7 @@
 
     for (i = 0; n_read(fd2) > 0; i++)
     {
-	rslt = user_read(fd2, rdbuf, sizeof(rdbuf)) ;
+	rslt = user_read(fd2, ctx->rdbuf, sizeof(ctx->rdbuf)) ;
 	if (rslt < 0)
 	{
 	    print("loop.2: read: %s\n", strerror(-rslt)) ;
@@ -2240,10 +2213,10 @@
 	    xit() ;
 	}
 
-	if (strcmp(buf, rdbuf) != 0)
+	if (strcmp(ctx->buf, ctx->rdbuf) != 0)
 	{
-	    print("Wrote: %s\n", buf) ;
-	    print(" Read: %s\n", rdbuf) ;
+	    print("Wrote: %s\n", ctx->buf) ;
+	    print(" Read: %s\n", ctx->rdbuf) ;
 	    xit() ;
 	}
     }
@@ -2264,7 +2237,7 @@
 	    *         Flow Control	    * 
 	    ********************************/
 
-    print("\nTesting downstream flow control\n") ;
+    tprint("Testing downstream flow control\n") ;
 
     ioc.ic_cmd 	  = LOOP_MSGLVL ;		/* set queue message level */
     ioc.ic_timout = 10 ;
@@ -2275,28 +2248,26 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_MSGLVL: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_MSGLVL: %s\n", STRERROR(-rslt)) ;
     }
 
-    strcpy(buf, "Flow control data test:  ............data pattern.......") ;
+    strcpy(ctx->buf, "Flow control data test:  ............data pattern.......") ;
     for (lgth = 0; lgth < 20; lgth++)
-	strcat(buf, ".....more data.....") ;
-    lgth = strlen(buf) ;
+	strcat(ctx->buf, ".....more data.....") ;
+    lgth = strlen(ctx->buf) ;
     while ((rslt = user_ioctl(fd1, I_CANPUT, 0)) > 0)
     {
-	rslt = user_write(fd1, buf, lgth) ;
+	rslt = user_write(fd1, ctx->buf, lgth) ;
 	if (rslt < 0) break ;
 	arg-- ;				/* count down nr of messages */
     }
 
     if (rslt < 0)
     {
-	print("loop.1: ioctl or write: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl or write: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("Flow control blocked with %d messages queued at driver\n",
+    tprint("Flow control blocked with %d messages queued at driver\n",
 		20 - arg) ;
 
     ioc.ic_cmd 	  = LOOP_MSGLVL ;		/* set queue message level */
@@ -2308,53 +2279,48 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_MSGLVL: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_MSGLVL: %s\n", STRERROR(-rslt)) ;
     }
 
     while (arg--)
     {
-	rslt = user_write(fd1, buf, lgth) ;
+	rslt = user_write(fd1, ctx->buf, lgth) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: write: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: write: %s\n", STRERROR(-rslt)) ;
 	}
     }
 
-    print("%d bytes of data queued to read\n", n_read(fd2)) ;
+    tprint("%d bytes of data queued to read\n", n_read(fd2)) ;
     unblocked = 0 ;
     while (n_read(fd2) > 0)		/* read all the data */
     {
 	rslt = user_ioctl(fd1, I_CANPUT, 0) ;
 	if (rslt < 0)
 	{
-	    print("loop.1: ioctl during readback: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.1: ioctl during readback: %s\n", STRERROR(-rslt)) ;
 	}
 
 	if (!unblocked && rslt > 0)
 	{
-	    print("Unblocked with %d bytes of data queued to read\n",
+	    tprint("Unblocked with %d bytes of data queued to read\n",
 		    n_read(fd2)) ;
 	    unblocked = 1 ;
 	}
 
-	rslt = user_read(fd2, rdbuf, sizeof(rdbuf)) ;
+	rslt = user_read(fd2, ctx->rdbuf, sizeof(ctx->rdbuf)) ;
 	if (rslt < 0)
 	{
-	    print("loop.2: read: %s\n", strerror(-rslt)) ;
-	    xit() ;
+	    FAIL("loop.2: read: %s\n", STRERROR(-rslt)) ;
 	}
     }
 
     if (!unblocked)
     {
-	print("read all data but write still not unblocked\n") ;
-	xit() ;
+	FAIL("read all data but write still not unblocked\n") ;
     }
 
-    print("Flow control test succeeded\n") ;
+    tprint("Flow control test succeeded\n") ;
 
 #endif
 
@@ -2374,7 +2340,7 @@
 * Test the functioning of the close timer.				*
 *									*
 ************************************************************************/
-void	close_timer_test(void)
+void	close_timer_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -2382,15 +2348,15 @@
     int			rslt ;
     struct strioctl	ioc ;
 
-    print("\nClose timer test\n") ;
+    tprint("Close timer test\n") ;
 
 	    /********************************
 	    *         Open Files            * 
 	    ********************************/
 
-    print("Close and let timer expire\n") ;
+    tprint("Close and let timer expire\n") ;
     rslt = open_files(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_files\n") ;
 
 	    /********************************
 	    *         Set 'loop' Optns      *
@@ -2406,21 +2372,20 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_MSGLVL: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_MSGLVL: %s\n", STRERROR(-rslt)) ;
     }
 
 	    /********************************
 	    *         Write Message         * 
 	    ********************************/
 
-    rslt = write_data(fd1, buf, 20) ;
-    if (rslt < 0) xit() ;
+    rslt = write_data(fd1, ctx->buf, 20) ;
+    if (rslt < 0) FAIL("write_data\n") ;
 
     rslt = n_read(fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("n_read") ;
     if (rslt > 0)
-	print("loop.2: I_NREAD returned %d, expected 0\n", rslt) ;
+	tprint("loop.2: I_NREAD returned %d, expected 0\n", rslt) ;
 
 
 	    /********************************
@@ -2435,9 +2400,9 @@
 	    *         Open Files            * 
 	    ********************************/
 
-    print("Close and have queue drain before timer expires\n") ;
+    tprint("Close and have queue drain before timer expires\n") ;
     rslt = open_files(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_files\n") ;
 
 	    /********************************
 	    *         Set 'loop' Optns      *
@@ -2453,8 +2418,7 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_MSGLVL: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_MSGLVL: %s\n", STRERROR(-rslt)) ;
     }
 
     ioc.ic_cmd 	  = LOOP_TIMR ;		/* set timer for queue */
@@ -2463,21 +2427,20 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_TIMR: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_TIMR: %s\n", STRERROR(-rslt)) ;
     }
 
 	    /********************************
 	    *         Write Message         * 
 	    ********************************/
 
-    rslt = write_data(fd1, buf, 20) ;
-    if (rslt < 0) xit() ;
+    rslt = write_data(fd1, ctx->buf, 20) ;
+    if (rslt < 0) FAIL("write_data\n") ;
 
     rslt = n_read(fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("n_read\n") ;
     if (rslt > 0)
-	print("loop.2: I_NREAD returned %d, expected 0\n", rslt) ;
+	tprint("loop.2: I_NREAD returned %d, expected 0\n", rslt) ;
 
 
 	    /********************************
@@ -2494,13 +2457,14 @@
 *************************************************************************
 *									*
 * Check the results of a getmsg.  We make assumptions about the		*
-* locations of the data.  We call xit() if anything goes wrong.		*
+* locations of the data.  We call FAIL() if anything goes wrong.	*
 *									*
 * band is the band the message was sent on, rband is the band it	*
 * was received on.							*
 *									*
 ************************************************************************/
-void	check_getmsg_rslts(int		  rslt,
+void	check_getmsg_rslts(struct test_context *ctx,
+			   int		  rslt,
 			   struct strbuf *rd_ctlp,
 			   struct strbuf *rd_dtap,
 			   int		 *flags,
@@ -2509,57 +2473,55 @@
 {
     (void) rslt ;
 
-    if (rd_ctlp != NULL && rd_ctlp->len != wr_ctl.len)
+    if (rd_ctlp != NULL && rd_ctlp->len != ctx->wr_ctl.len)
     {
-	print("check_getmsg_rslts:  ctl lgth returned %d, expected %d\n",
-		rd_ctlp->len, wr_ctl.len) ;
-	xit() ;
+	FAIL("check_getmsg_rslts:  ctl lgth returned %d, expected %d\n",
+		rd_ctlp->len, ctx->wr_ctl.len) ;
     }
 
-    if (rd_dtap != NULL && rd_dtap->len != wr_dta.len)
+    if (rd_dtap != NULL && rd_dtap->len != ctx->wr_dta.len)
     {
-	print("check_getmsg_rslts:  data lgth returned %d, expected %d\n",
-		rd_dtap->len, wr_dta.len) ;
-	xit() ;
+	FAIL("check_getmsg_rslts:  data lgth returned %d, expected %d\n",
+		rd_dtap->len, ctx->wr_dta.len) ;
     }
 
-    print("check_getmsg_rslts: getmsg return flags = 0x%x\n", *flags) ;
+    tprint("check_getmsg_rslts: getmsg return flags = 0x%x\n", *flags) ;
     if (   rd_dtap != NULL
 	&& rd_dtap->len > 0
-	&& strncmp(buf, rdbuf, rd_dtap->len)
+	&& strncmp(ctx->buf, ctx->rdbuf, rd_dtap->len)
        )
     {
-	print("check_getmsg_rslts: read data: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", rdbuf) ;
-	xit() ;
+	tprint("check_getmsg_rslts: read data: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
     else
     if (rd_dtap != NULL)
-	print("check_getmsg_rslts: read %d data bytes: buffer compared OK\n",
+	tprint("check_getmsg_rslts: read %d data bytes: buffer compared OK\n",
 		rd_dtap->len) ;
     else
-	print("check_getmsg_rslts: no data strbuf\n") ;
+	tprint("check_getmsg_rslts: no data strbuf\n") ;
 
     if (   rd_ctlp != NULL
 	&& rd_ctlp->len > 0
-	&& strncmp(ctlbuf, rdctlbuf, rd_ctlp->len)
+	&& strncmp(ctx->ctlbuf, ctx->rdctlbuf, rd_ctlp->len)
        )
     {
-	print("check_getmsg_rslts: read control: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", ctlbuf) ;
-	print("              read  \"%s\"\n", rdctlbuf) ;
-	xit() ;
+	tprint("check_getmsg_rslts: read control: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->ctlbuf) ;
+	tprint("              read  \"%s\"\n", ctx->rdctlbuf) ;
+	FAIL("\n") ;
     }
     else
     if (rd_ctlp != NULL)
-	print("check_getmsg_rslts: read %d ctl bytes: buffer compared OK\n",
+	tprint("check_getmsg_rslts: read %d ctl bytes: buffer compared OK\n",
 		rd_ctlp->len) ;
     else
-	print("check_getmsg_rslts: no control strbuf\n") ;
+	tprint("check_getmsg_rslts: no control strbuf\n") ;
 
     if (rband != band)
-	print("check_getmsg_rslts: sent on band %d, received on band %d\n",
+	tprint("check_getmsg_rslts: sent on band %d, received on band %d\n",
 		band, rband) ;
 
 } /* check_getmsg_rslts */
@@ -2568,34 +2530,34 @@
 *                             do_get_put                                *
 *************************************************************************
 *									*
-* This is a generalized getmsg/putmsg test routine.  It calls xit()	*
+* This is a generalized getmsg/putmsg test routine.  It calls FAIL()	*
 * if anything goes wrong.						*
 *									*
-* Caller must load up buf (data) and ctlbuf (control) for writing.	*
+* Caller must load up buf (data) and ctx->ctlbuf (control) for writing.	*
 *									*
 ************************************************************************/
-void	do_get_put(int putfd, int getfd,
+void	do_get_put(struct test_context *ctx, int putfd, int getfd,
 		   int ctl_lgth, int data_lgth, int band)
 {
     int			flags = MSG_ANY;
     int			rband = 0 ;
     int			rslt ;
 
-    wr_ctl.len	= ctl_lgth ;
-    wr_dta.len	= data_lgth ;
-    if (put_msg(putfd, &wr_ctl, &wr_dta, band, MSG_BAND) < 0) xit() ;
-
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+    ctx->wr_ctl.len	= ctl_lgth ;
+    ctx->wr_dta.len	= data_lgth ;
+    if (put_msg(putfd, &ctx->wr_ctl, &ctx->wr_dta, band, MSG_BAND) < 0) FAIL("put_msg\n") ;
+
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     nread_wait_msgs(getfd, 1) ;
-    rslt = user_getpmsg(getfd, &rd_ctl, &rd_dta, &rband, &flags) ;
-    check_getmsg_rslts(rslt, &rd_ctl, &rd_dta, &flags, band, rband) ;
+    rslt = user_getpmsg(getfd, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
+    check_getmsg_rslts(ctx, rslt, &ctx->rd_ctl, &ctx->rd_dta, &flags, band, rband) ;
 
 } /* do_get_put */
 
@@ -2606,14 +2568,14 @@
 * Do just the putmsg.  Useful for building up concatenated messages.	*
 *									*
 ************************************************************************/
-void	do_put(int putfd, int ctl_lgth, int data_lgth, int band)
+void	do_put(struct test_context *ctx, int putfd, int ctl_lgth, int data_lgth, int band)
 {
     int		flags = MSG_ANY;
 
     (void) flags ;			/* compiler happiness */
-    wr_ctl.len	= ctl_lgth ;
-    wr_dta.len	= data_lgth ;
-    if (put_msg(putfd, &wr_ctl, &wr_dta, band, MSG_BAND) < 0) xit() ;
+    ctx->wr_ctl.len	= ctl_lgth ;
+    ctx->wr_dta.len	= data_lgth ;
+    if (put_msg(putfd, &ctx->wr_ctl, &ctx->wr_dta, band, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
 } /* do_put */
 
@@ -2622,12 +2584,12 @@
 *************************************************************************
 *									*
 * This routine does a putmsg, then an I_PEEK, then a getmsg.  It calls	*
-* xit() if anything goes wrong.						*
+* FAIL() if anything goes wrong.					*
 *									*
-* Caller must load up buf (data) and ctlbuf (control) for writing.	*
+* Caller must load up buf (data) and ctx->ctlbuf (control) for writing.	*
 *									*
 ************************************************************************/
-void	do_peek_fcn(int putfd, int getfd,
+void	do_peek_fcn(struct test_context *ctx, int putfd, int getfd,
 		    int wr_ctl_lgth, int wr_data_lgth,
 		    int rd_ctl_lgth, int rd_data_lgth,
 		    int band)
@@ -2638,65 +2600,64 @@
     struct strbuf	*ctlp ;
     struct strbuf	*dtap ;
 
-    wr_ctl.len	= wr_ctl_lgth ;
-    wr_dta.len	= wr_data_lgth ;
-    if (put_msg(putfd, &wr_ctl, &wr_dta, band, MSG_BAND) < 0) xit() ;
-
-    pk_str.ctlbuf.len		= -1 ;
-    pk_str.ctlbuf.maxlen	= rd_ctl_lgth ;
-    pk_str.databuf.len		= -1 ;
-    pk_str.databuf.maxlen	= rd_data_lgth ;
-    pk_str.flags		= MSG_ANY ;
+    ctx->wr_ctl.len	= wr_ctl_lgth ;
+    ctx->wr_dta.len	= wr_data_lgth ;
+    if (put_msg(putfd, &ctx->wr_ctl, &ctx->wr_dta, band, MSG_BAND) < 0) FAIL("put_msg\n") ;
+
+    ctx->pk_str.ctlbuf.len		= -1 ;
+    ctx->pk_str.ctlbuf.maxlen	= rd_ctl_lgth ;
+    ctx->pk_str.databuf.len		= -1 ;
+    ctx->pk_str.databuf.maxlen	= rd_data_lgth ;
+    ctx->pk_str.flags		= MSG_ANY ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     nread_wait_msgs(getfd, 1) ;
-    rslt = user_ioctl(getfd, I_PEEK, &pk_str) ;
+    rslt = user_ioctl(getfd, I_PEEK, &ctx->pk_str) ;
     if (rslt < 0)
     {
-	print("do_peek: ioctl I_PEEK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("do_peek: ioctl I_PEEK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("do_peek: maxlen    len  I_PEEK returned %d\n", rslt) ;
-    print("control: %6d %6d\n", pk_str.ctlbuf.maxlen, pk_str.ctlbuf.len) ;
-    print("   data: %6d %6d\n", pk_str.databuf.maxlen, pk_str.databuf.len) ;
+    tprint("do_peek: maxlen    len  I_PEEK returned %d\n", rslt) ;
+    tprint("control: %6d %6d\n", ctx->pk_str.ctlbuf.maxlen, ctx->pk_str.ctlbuf.len) ;
+    tprint("   data: %6d %6d\n", ctx->pk_str.databuf.maxlen, ctx->pk_str.databuf.len) ;
 
-    flags = (int) pk_str.flags ;		/* int <-- long */
+    flags = (int) ctx->pk_str.flags ;		/* int <-- long */
 
     if (rd_ctl_lgth >= wr_ctl_lgth)
-	ctlp = &pk_str.ctlbuf ;
+	ctlp = &ctx->pk_str.ctlbuf ;
     else
 	ctlp = NULL ;
 
     if (rd_data_lgth >= wr_data_lgth)
-	dtap = &pk_str.databuf ;
+	dtap = &ctx->pk_str.databuf ;
     else
 	dtap = NULL ;
 
-    check_getmsg_rslts(rslt, ctlp, dtap, &flags, 0, 0) ;
+    check_getmsg_rslts(ctx, rslt, ctlp, dtap, &flags, 0, 0) ;
 
-    rd_ctl.len		= -1 ;
+    ctx->rd_ctl.len		= -1 ;
     if (wr_ctl_lgth >= 0)			/* ctl part written?  */
-	rd_ctl.maxlen	= sizeof(rdctlbuf) ;	/* read ctl part */
+	ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;	/* read ctl part */
     else
-	rd_ctl.maxlen	= -1 ;
+	ctx->rd_ctl.maxlen	= -1 ;
 
-    rd_dta.len		= -1 ;
+    ctx->rd_dta.len		= -1 ;
     if (wr_data_lgth >= 0)			/* data part written?  */
-	rd_dta.maxlen	= sizeof(rdbuf) ;	/* read data part */
+	ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;	/* read data part */
     else
-	rd_dta.maxlen	= -1 ;
+	ctx->rd_dta.maxlen	= -1 ;
 
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     flags = MSG_ANY ;
-    rslt = user_getpmsg(getfd, &rd_ctl, &rd_dta, &rband, &flags) ;
-    check_getmsg_rslts(rslt, &rd_ctl, &rd_dta, &flags, band, rband) ;
+    rslt = user_getpmsg(getfd, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
+    check_getmsg_rslts(ctx, rslt, &ctx->rd_ctl, &ctx->rd_dta, &flags, band, rband) ;
 
 } /* do_peek */
 
@@ -2705,16 +2666,16 @@
 *************************************************************************
 *									*
 * This routine does a putmsg, then an I_PEEK, then a getmsg.  It calls	*
-* xit() if anything goes wrong.						*
+* FAIL() if anything goes wrong.					*
 *									*
-* Caller must load up buf (data) and ctlbuf (control) for writing.	*
+* Caller must load up buf (data) and ctx->ctlbuf (control) for writing.	*
 *									*
 ************************************************************************/
-void	do_peek(int putfd, int getfd,
+void	do_peek(struct test_context *ctx, int putfd, int getfd,
 		   int ctl_lgth, int data_lgth, int band)
 {
-    do_peek_fcn(putfd, getfd, ctl_lgth, data_lgth,
-			sizeof(rdctlbuf), sizeof(rdbuf), band) ;
+    do_peek_fcn(ctx, putfd, getfd, ctl_lgth, data_lgth,
+			sizeof(ctx->rdctlbuf), sizeof(ctx->rdbuf), band) ;
 
 } /* do_peek */
 
@@ -2725,7 +2686,7 @@
 * Test putmsg and getmsg.						*
 *									*
 ************************************************************************/
-void	putmsg_test(void)
+void	putmsg_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -2737,132 +2698,127 @@
     int			rband ;
     struct strioctl	ioc ;
 
-    print("\nputmsg/getmsg test\n") ;
+    tprint("putmsg/getmsg test\n") ;
 
 	    /********************************
 	    *         Open Files            * 
 	    ********************************/
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
 	    /********************************
 	    *         putmsg/read           *
 	    ********************************/
 
-    print("\nUse putmsg to send data, use read to read back data\n") ;
-    strcpy(buf, "Test data for putmsg/read") ;
-    lgth = strlen(buf) ;
-    wr_ctl.len	= -1 ;
-    wr_dta.len	= lgth ;
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Use putmsg to send data, use read to read back data\n") ;
+    strcpy(ctx->buf, "Test data for putmsg/read") ;
+    lgth = strlen(ctx->buf) ;
+    ctx->wr_ctl.len	= -1 ;
+    ctx->wr_dta.len	= lgth ;
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
     nread_wait_msgs(fd2, 1) ;
-    rslt = user_read(fd2, rdbuf, lgth);
+    rslt = user_read(fd2, ctx->rdbuf, lgth);
     if (rslt < 0)
     {
-	print("loop_clone.2: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth)
     {
-	print("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	xit() ;
+	FAIL("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
     }
 
-    if (strcmp(buf, rdbuf))
+    if (strcmp(ctx->buf, ctx->rdbuf))
     {
-	print("loop_clone.2: read: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", rdbuf) ;
+	tprint("loop_clone.2: read: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ctx->rdbuf) ;
+	FAIL("\n"); /* missing ? */
     }
     else
-	print("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
+	tprint("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
 
 
 
-    print("\nUse putmsg to send control, read should return error\n") ;
-    strcpy(ctlbuf, "Control message") ;
-    lgth2 = strlen(ctlbuf) ;
-    wr_ctl.len	= lgth2 ;
-    wr_dta.len	= lgth ;			/* from before */
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Use putmsg to send control, read should return error\n") ;
+    strcpy(ctx->ctlbuf, "Control message") ;
+    lgth2 = strlen(ctx->ctlbuf) ;
+    ctx->wr_ctl.len	= lgth2 ;
+    ctx->wr_dta.len	= lgth ;			/* from before */
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
     nread_wait_msgs(fd2, 1) ;
-    rslt = user_read(fd2, rdbuf, lgth);
+    rslt = user_read(fd2, ctx->rdbuf, lgth);
     if (rslt < 0)
-	print("loop_clone.2: read returned expected error: %s\n", strerror(-rslt)) ;
+	ERR("loop_clone.2: read returned expected error: %s\n", STRERROR(-rslt)) ;
     else
     {
-	print("loop_clone.2:  read returned %d, but expected error rtn\n",
+	FAIL("loop_clone.2:  read returned %d, but expected error rtn\n",
 		rslt) ;
-	xit() ;
     }
 
     /*
      * The message is still queued, so get it using getmsg.
      */
-    print("Read re-queued message with getmsg\n") ;
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    tprint("Read re-queued message with getmsg\n") ;
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
     flags = MSG_ANY;
     rband = 0 ;
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
     if (rslt < 0)
     {
-	print("loop_clone.2:  getmsg returned %d\n", rslt) ;
-	xit() ;
+	FAIL("loop_clone.2:  getmsg returned %d\n", rslt) ;
     }
 
-    if (rd_ctl.len != wr_ctl.len)
+    if (ctx->rd_ctl.len != ctx->wr_ctl.len)
     {
-	print("loop_clone.2: read ctl len = %d, write ctl len = %d\n", 
-	      rd_ctl.len, wr_ctl.len) ;
-	xit() ;
+	FAIL("loop_clone.2: read ctl len = %d, write ctl len = %d\n", 
+	      ctx->rd_ctl.len, ctx->wr_ctl.len) ;
     }
 
-    if (rd_dta.len != wr_dta.len)
+    if (ctx->rd_dta.len != ctx->wr_dta.len)
     {
-	print("loop_clone.2: read data len = %d, write data len = %d\n", 
-	      rd_dta.len, wr_dta.len) ;
-	xit() ;
+	FAIL("loop_clone.2: read data len = %d, write data len = %d\n", 
+	      ctx->rd_dta.len, ctx->wr_dta.len) ;
     }
 
     rslt = 0 ;
-    if (strcmp(ctlbuf, rdctlbuf))
+    if (strcmp(ctx->ctlbuf, ctx->rdctlbuf))
     {
-	print("loop_clone.2: getmsg: ctl buffer compare error\n") ;
-	print("              wrote \"%s\"\n", ctlbuf) ;
-	print("              read  \"%s\"\n", rdctlbuf) ;
+	tprint("loop_clone.2: getmsg: ctl buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->ctlbuf) ;
+	tprint("              read  \"%s\"\n", ctx->rdctlbuf) ;
 	rslt = -1 ;
     }
 
-    if (strcmp(buf, rdbuf))
+    if (strcmp(ctx->buf, ctx->rdbuf))
     {
-	print("loop_clone.2: getmsg: data buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", rdbuf) ;
+	tprint("loop_clone.2: getmsg: data buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ctx->rdbuf) ;
 	rslt = -1 ;
     }
 
     if (rslt < 0)
-	xit() ;
+	FAIL("\n") ;
 
-    print("Re-queued message buffers compare OK\n") ;
+    tprint("Re-queued message buffers compare OK\n") ;
 
 	    /********************************
 	    *         putmsg/getmsg         *
 	    *           Data only           *
 	    ********************************/
 
-    print("\nUse putmsg to send data, use getmsg to read back data\n") ;
+    tprint("Use putmsg to send data, use getmsg to read back data\n") ;
 
     ioc.ic_timout = 10 ;
     ioc.ic_dp	  = NULL;
@@ -2871,52 +2827,52 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
     ioc.ic_len	  = 0 ;
     rslt = user_ioctl(fd2, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("Peek with no message present\n") ;
-    do_peek(fd1, fd2, -1, -1, 0) ;
+    tprint("Peek with no message present\n") ;
+    do_peek(ctx, fd1, fd2, -1, -1, 0) ;
 
-    print("Data part only\n") ;
-    strcpy(buf, "Test data for putmsg/getmsg") ;
-    lgth = strlen(buf) ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
-    do_peek(fd1, fd2, -1, lgth, 0) ;
-    do_get_put(fd1, fd2, -1, lgth, 1) ;
-    do_peek(fd1, fd2, -1, lgth, 1) ;
-    do_get_put(fd1, fd2, -1, 0, 0) ;
-    do_peek(fd1, fd2, -1, 0, 0) ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
-    do_peek_fcn(fd1, fd2, -1, lgth, 4, 0, 0) ;
+    tprint("Data part only\n") ;
+    strcpy(ctx->buf, "Test data for putmsg/getmsg") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
+    do_peek(ctx, fd1, fd2, -1, lgth, 0) ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 1) ;
+    do_peek(ctx, fd1, fd2, -1, lgth, 1) ;
+    do_get_put(ctx, fd1, fd2, -1, 0, 0) ;
+    do_peek(ctx, fd1, fd2, -1, 0, 0) ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
+    do_peek_fcn(ctx, fd1, fd2, -1, lgth, 4, 0, 0) ;
 
 
 	    /********************************
 	    *         Ctl and Data          *
 	    ********************************/
 
-    print("Control and data parts\n") ;
-    do_get_put(fd1, fd2, lgth2, lgth, 0) ;
-    do_peek(fd1, fd2, lgth2, lgth, 0) ;
-    do_get_put(fd1, fd2, lgth2, lgth, 1) ;
-    do_peek(fd1, fd2, lgth2, lgth, 1) ;
+    tprint("Control and data parts\n") ;
+    do_get_put(ctx, fd1, fd2, lgth2, lgth, 0) ;
+    do_peek(ctx, fd1, fd2, lgth2, lgth, 0) ;
+    do_get_put(ctx, fd1, fd2, lgth2, lgth, 1) ;
+    do_peek(ctx, fd1, fd2, lgth2, lgth, 1) ;
 
 
 	    /********************************
 	    *           Ctl only            *
 	    ********************************/
 
-    print("Control part only\n") ;
-    do_get_put(fd1, fd2, lgth2, -1, 0) ;
-    do_peek(fd1, fd2, lgth2, -1, 0) ;
-    do_get_put(fd1, fd2, lgth2, -1, 1) ;
-    do_peek(fd1, fd2, lgth2, -1, 1) ;
+    tprint("Control part only\n") ;
+    do_get_put(ctx, fd1, fd2, lgth2, -1, 0) ;
+    do_peek(ctx, fd1, fd2, lgth2, -1, 0) ;
+    do_get_put(ctx, fd1, fd2, lgth2, -1, 1) ;
+    do_peek(ctx, fd1, fd2, lgth2, -1, 1) ;
 
 
 
@@ -2924,7 +2880,7 @@
 	    *           Multi-segment       *
 	    ********************************/
 
-    print("Three-part message: Data only\n") ;
+    tprint("Three-part message: Data only\n") ;
     ioc.ic_timout = 10 ;
     ioc.ic_len	  = sizeof(int) ;
     ioc.ic_dp	  = (char *) &arg ;
@@ -2933,65 +2889,62 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_CONCAT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_CONCAT: %s\n", STRERROR(-rslt)) ;
     }
 
-    strcpy(buf, "Test data for putmsg/getmsg") ;
-    lgth = strlen(buf) ;
-    do_put(fd1, -1, lgth, 0) ;
-    do_put(fd1, -1, lgth, 0) ;
-    do_put(fd1, -1, lgth, 0) ;
+    strcpy(ctx->buf, "Test data for putmsg/getmsg") ;
+    lgth = strlen(ctx->buf) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
     /*
      * Read back results
      */
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     flags = MSG_ANY;
     rband = 0 ;
     nread_wait_msgs(fd2, 3) ;
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: getpmsg: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: getpmsg: %s\n", STRERROR(-rslt)) ;
     }
 
-    if (rd_ctl.len != -1)
+    if (ctx->rd_ctl.len != -1)
     {
-	print("loop_clone.2: got %d control bytes, expected none\n",
-		rd_ctl.len) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d control bytes, expected none\n",
+		ctx->rd_ctl.len) ;
     }
 
-    if (rd_dta.len != 3*lgth)
+    if (ctx->rd_dta.len != 3*lgth)
     {
-	print("loop_clone.2: got %d data bytes, expected %d\n",
-		rd_dta.len, 3*lgth) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d data bytes, expected %d\n",
+		ctx->rd_dta.len, 3*lgth) ;
     }
 
-    if (   strncmp(&rdbuf[0], buf, lgth)
-	|| strncmp(&rdbuf[lgth], buf, lgth)
-	|| strncmp(&rdbuf[2*lgth], buf, lgth)
+    if (   strncmp(&ctx->rdbuf[0], ctx->buf, lgth)
+	|| strncmp(&ctx->rdbuf[lgth], ctx->buf, lgth)
+	|| strncmp(&ctx->rdbuf[2*lgth], ctx->buf, lgth)
        )
     {
-	print("loop_clone.2: buffer compare error\n") ;
-	print("Exp: %s%s%s\n", buf,buf,buf) ;
-	print("Got: %s\n", rdbuf) ;
-	xit() ;
+	tprint("loop_clone.2: buffer compare error\n") ;
+	tprint("Exp: %s%s%s\n", ctx->buf,ctx->buf,ctx->buf) ;
+	tprint("Got: %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
     else
-	print("Three-part message: OK\n") ;
+	tprint("Three-part message: OK\n") ;
 
 
-    print("Three-part message: Control only\n") ;
+    tprint("Three-part message: Control only\n") ;
     ioc.ic_timout = 10 ;
     ioc.ic_len	  = sizeof(int) ;
     ioc.ic_dp	  = (char *) &arg ;
@@ -3000,64 +2953,61 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_CONCAT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_CONCAT: %s\n", STRERROR(-rslt)) ;
     }
 
-    strcpy(ctlbuf, "Control message") ;
-    lgth2 = strlen(ctlbuf) ;
-    do_put(fd1, lgth2, -1, 0) ;
-    do_put(fd1, lgth2, -1, 0) ;
-    do_put(fd1, lgth2, -1, 0) ;
+    strcpy(ctx->ctlbuf, "Control message") ;
+    lgth2 = strlen(ctx->ctlbuf) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
     /*
      * Read back results
      */
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     flags = MSG_ANY;
     rband = 0 ;
     nread_wait_msgs(fd2, 3) ;
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: getpmsg: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: getpmsg: %s\n", STRERROR(-rslt)) ;
     }
 
-    if (rd_dta.len != -1)
+    if (ctx->rd_dta.len != -1)
     {
-	print("loop_clone.2: got %d data bytes, expected none\n",
-		rd_dta.len) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d data bytes, expected none\n",
+		ctx->rd_dta.len) ;
     }
 
-    if (rd_ctl.len != 3*lgth2)
+    if (ctx->rd_ctl.len != 3*lgth2)
     {
-	print("loop_clone.2: got %d control bytes, expected %d\n",
-		rd_ctl.len, 3*lgth2) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d control bytes, expected %d\n",
+		ctx->rd_ctl.len, 3*lgth2) ;
     }
 
-    if (   strncmp(&rdctlbuf[0], ctlbuf, lgth2)
-	|| strncmp(&rdctlbuf[lgth2], ctlbuf, lgth2)
-	|| strncmp(&rdctlbuf[2*lgth2], ctlbuf, lgth2)
+    if (   strncmp(&ctx->rdctlbuf[0], ctx->ctlbuf, lgth2)
+	|| strncmp(&ctx->rdctlbuf[lgth2], ctx->ctlbuf, lgth2)
+	|| strncmp(&ctx->rdctlbuf[2*lgth2], ctx->ctlbuf, lgth2)
        )
     {
-	print("loop_clone.2: buffer compare error\n") ;
-	print("Exp: %s%s%s\n", ctlbuf,ctlbuf,ctlbuf) ;
-	print("Got: %s\n", rdctlbuf) ;
-	xit() ;
+	tprint("loop_clone.2: buffer compare error\n") ;
+	tprint("Exp: %s%s%s\n", ctx->ctlbuf,ctx->ctlbuf,ctx->ctlbuf) ;
+	tprint("Got: %s\n", ctx->rdctlbuf) ;
+	FAIL("\n") ;
     }
     else
-	print("Three-part message: OK\n") ;
+	tprint("Three-part message: OK\n") ;
 
-    print("Six-part message: Control and data both\n") ;
+    tprint("Six-part message: Control and data both\n") ;
     ioc.ic_timout = 10 ;
     ioc.ic_len	  = sizeof(int) ;
     ioc.ic_dp	  = (char *) &arg ;
@@ -3066,78 +3016,75 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_CONCAT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_CONCAT: %s\n", STRERROR(-rslt)) ;
     }
 
-    strcpy(ctlbuf, "Control message") ;
-    lgth2 = strlen(ctlbuf) ;
-    strcpy(buf, "Test data message") ;
-    lgth = strlen(buf) ;
-    do_put(fd1, lgth2, -1, 0) ;
-    do_put(fd1, lgth2, -1, 0) ;
-    do_put(fd1, lgth2, -1, 0) ;
-    do_put(fd1, -1, lgth, 0) ;
-    do_put(fd1, -1, lgth, 0) ;
-    do_put(fd1, -1, lgth, 0) ;
+    strcpy(ctx->ctlbuf, "Control message") ;
+    lgth2 = strlen(ctx->ctlbuf) ;
+    strcpy(ctx->buf, "Test data message") ;
+    lgth = strlen(ctx->buf) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
+    do_put(ctx, fd1, lgth2, -1, 0) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
+    do_put(ctx, fd1, -1, lgth, 0) ;
     /*
      * Read back results
      */
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
     flags = MSG_ANY;
     rband = 0 ;
     nread_wait_msgs(fd2, 6) ;
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: getpmsg: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: getpmsg: %s\n", STRERROR(-rslt)) ;
     }
 
-    if (rd_dta.len != 3*lgth)
+    if (ctx->rd_dta.len != 3*lgth)
     {
-	print("loop_clone.2: got %d data bytes, expected %d\n",
-		rd_dta.len, 3*lgth) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d data bytes, expected %d\n",
+		ctx->rd_dta.len, 3*lgth) ;
     }
 
-    if (rd_ctl.len != 3*lgth2)
+    if (ctx->rd_ctl.len != 3*lgth2)
     {
-	print("loop_clone.2: got %d control bytes, expected %d\n",
-		rd_ctl.len, 3*lgth2) ;
-	xit() ;
+	FAIL("loop_clone.2: got %d control bytes, expected %d\n",
+		ctx->rd_ctl.len, 3*lgth2) ;
     }
 
-    if (   strncmp(&rdctlbuf[0], ctlbuf, lgth2)
-	|| strncmp(&rdctlbuf[lgth2], ctlbuf, lgth2)
-	|| strncmp(&rdctlbuf[2*lgth2], ctlbuf, lgth2)
-	|| strncmp(&rdbuf[0], buf, lgth)
-	|| strncmp(&rdbuf[lgth], buf, lgth)
-	|| strncmp(&rdbuf[2*lgth], buf, lgth)
+    if (   strncmp(&ctx->rdctlbuf[0], ctx->ctlbuf, lgth2)
+	|| strncmp(&ctx->rdctlbuf[lgth2], ctx->ctlbuf, lgth2)
+	|| strncmp(&ctx->rdctlbuf[2*lgth2], ctx->ctlbuf, lgth2)
+	|| strncmp(&ctx->rdbuf[0], ctx->buf, lgth)
+	|| strncmp(&ctx->rdbuf[lgth], ctx->buf, lgth)
+	|| strncmp(&ctx->rdbuf[2*lgth], ctx->buf, lgth)
        )
     {
-	print("loop_clone.2: buffer compare error\n") ;
-	print("CtlExp: %s%s%s\n", ctlbuf,ctlbuf,ctlbuf) ;
-	print("CtlGot: %s\n", rdctlbuf) ;
-	print("DtaExp: %s%s%s\n", buf,buf,buf) ;
-	print("DtaGot: %s\n", rdbuf) ;
-	xit() ;
+	tprint("loop_clone.2: buffer compare error\n") ;
+	tprint("CtlExp: %s%s%s\n", ctx->ctlbuf,ctx->ctlbuf,ctx->ctlbuf) ;
+	tprint("CtlGot: %s\n", ctx->rdctlbuf) ;
+	tprint("DtaExp: %s%s%s\n", ctx->buf,ctx->buf,ctx->buf) ;
+	tprint("DtaGot: %s\n", ctx->rdbuf) ;
+	FAIL("\n") ;
     }
     else
-	print("Six-part message: OK\n") ;
+	tprint("Six-part message: OK\n") ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nputmsg_test: closing files\n") ;
+    tprint("putmsg_test: closing files\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -3151,10 +3098,8 @@
 *									*
 ************************************************************************/
 
-char	*poll_events(short events)
+char	*poll_events(short events, char *ascii_events)
 {
-    static char		ascii_events[200] ;
-
     ascii_events[0] = 0 ;
 
     if (events & POLLIN) strcat(ascii_events, "POLLIN ") ;
@@ -3176,7 +3121,7 @@
 
 } /* poll_events */
 
-void	poll_test(void)
+void	poll_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -3188,18 +3133,18 @@
     int			arg ;
     struct pollfd	fds[4] ;
     struct strioctl	ioc ;
+    char		ascii_events[200] ;
 
-    print("\nPoll function test\n") ;
+    tprint("Poll function test\n") ;
 
-    print("Poll with no descriptors, just timeout\n") ;
+    tprint("Poll with no descriptors, just timeout\n") ;
     rslt = user_poll(fds, 0, 50) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
-	print("Poll returned %d\n", rslt) ;
+	tprint("Poll returned %d\n", rslt) ;
 
 
 	    /********************************
@@ -3207,18 +3152,18 @@
 	    ********************************/
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
 	    /********************************
 	    *         Normal Data           * 
 	    ********************************/
 
-    print("\nUse putmsg to send normal data, poll for any input\n") ;
-    strcpy(buf, "Test data for putmsg/read") ;
-    lgth = strlen(buf) ;
-    wr_ctl.len	= -1 ;
-    wr_dta.len	= lgth ;
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    tprint("Use putmsg to send normal data, poll for any input\n") ;
+    strcpy(ctx->buf, "Test data for putmsg/read") ;
+    lgth = strlen(ctx->buf) ;
+    ctx->wr_ctl.len	= -1 ;
+    ctx->wr_dta.len	= lgth ;
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
     fds[0].fd		= fd1 ;		/* writing fd */
     fds[0].events	= 0 ;		/* no events */
@@ -3230,29 +3175,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 1)
     {
-	print("Poll returned %d, expected 1\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 1\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for normal data\n") ;
+    tprint("Poll for normal data\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLRDNORM ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3260,29 +3204,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 1)
     {
-	print("Poll returned %d, expected 1\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 1\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for priority band data\n") ;
+    tprint("Poll for priority band data\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLRDBAND ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3290,29 +3233,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 0)
     {
-	print("Poll returned %d, expected 0\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 0\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for high priority message\n") ;
+    tprint("Poll for high priority message\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLPRI ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3320,61 +3262,58 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 0)
     {
-	print("Poll returned %d, expected 0\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 0\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
-    rslt = user_read(fd2, rdbuf, lgth);
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
+    rslt = user_read(fd2, ctx->rdbuf, lgth);
     if (rslt < 0)
     {
-	print("loop_clone.2: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth)
     {
-	print("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	xit() ;
+	FAIL("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
     }
 
-    if (strcmp(buf, rdbuf))
+    if (strcmp(ctx->buf, ctx->rdbuf))
     {
-	print("loop_clone.2: read: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", rdbuf) ;
+	tprint("loop_clone.2: read: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ctx->rdbuf) ;
     }
     else
-	print("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
+	tprint("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
 
 	    /********************************
 	    *         Hi-priority           * 
 	    ********************************/
 
-    print("\nUse putmsg to send priority control, poll for any input\n") ;
-    strcpy(ctlbuf, "Control message") ;
-    lgth2 = strlen(ctlbuf) ;
-    wr_ctl.len	= lgth2 ;
-    wr_dta.len	= lgth ;			/* from before */
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_HIPRI) < 0) xit() ;
+    tprint("Use putmsg to send priority control, poll for any input\n") ;
+    strcpy(ctx->ctlbuf, "Control message") ;
+    lgth2 = strlen(ctx->ctlbuf) ;
+    ctx->wr_ctl.len	= lgth2 ;
+    ctx->wr_dta.len	= lgth ;			/* from before */
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_HIPRI) < 0) FAIL("put_msg\n") ;
 
     fds[0].fd		= fd1 ;		/* writing fd */
     fds[0].events	= 0 ;		/* no events */
@@ -3386,29 +3325,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 0)
     {
-	print("Poll returned %d, expected 0\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 0\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for normal data\n") ;
+    tprint("Poll for normal data\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLRDNORM ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3416,29 +3354,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 0)
     {
-	print("Poll returned %d, expected 0\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 0\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for priority band data\n") ;
+    tprint("Poll for priority band data\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLRDBAND ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3446,29 +3383,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 0)
     {
-	print("Poll returned %d, expected 0\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 0\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for high priority message\n") ;
+    tprint("Poll for high priority message\n") ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLPRI ;
     fds[1].revents	= 0 ;		/* returned events */
@@ -3476,29 +3412,28 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 1)
     {
-	print("Poll returned %d, expected 1\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 1\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
     }
 
-    print("\nPoll for high priority message and other stream writeable\n") ;
+    tprint("Poll for high priority message and other stream writeable\n") ;
     fds[0].events	= POLLWRNORM ;
     fds[0].revents	= 0 ;		/* returned events */
     fds[1].events	= POLLPRI ;
@@ -3507,43 +3442,42 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 2)
     {
-	print("Poll returned %d, expected 2\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 2\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-    }
-
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+    }
+
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
-    check_getmsg_rslts(rslt, &rd_ctl, &rd_dta, &flags, 0, rband) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
+    check_getmsg_rslts(ctx, rslt, &ctx->rd_ctl, &ctx->rd_dta, &flags, 0, rband) ;
 
 
 
-    print("\nPoll for high priority message with delayed delivery\n") ;
+    tprint("Poll for high priority message with delayed delivery\n") ;
 
 
     ioc.ic_cmd 	  = LOOP_TIMR ;		/* set timer for queue */
@@ -3555,11 +3489,10 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop.1: ioctl LOOP_TIMR: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.1: ioctl LOOP_TIMR: %s\n", STRERROR(-rslt)) ;
     }
 
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_HIPRI) < 0) xit() ;
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_HIPRI) < 0) FAIL("put_msg\n") ;
 
     fds[0].events	= 0 ;
     fds[0].revents	= 0 ;		/* returned events */
@@ -3569,46 +3502,45 @@
     rslt = user_poll(fds, 2, 100) ;
     if (rslt < 0)
     {
-	print("poll: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("poll: %s\n", STRERROR(-rslt)) ;
     }
     else
     if (rslt != 1)
     {
-	print("Poll returned %d, expected 1\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-	xit() ;
+	tprint("Poll returned %d, expected 1\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+	FAIL("\n") ;
     }
     else
     {
-	print("Poll returned %d\n", rslt) ;
-	print("fds[0].events  = %s\n", poll_events(fds[0].events)) ;
-	print("fds[0].revents = %s\n", poll_events(fds[0].revents)) ;
-	print("fds[1].events  = %s\n", poll_events(fds[1].events)) ;
-	print("fds[1].revents = %s\n", poll_events(fds[1].revents)) ;
-    }
-
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+	tprint("Poll returned %d\n", rslt) ;
+	tprint("fds[0].events  = %s\n", poll_events(fds[0].events, ascii_events)) ;
+	tprint("fds[0].revents = %s\n", poll_events(fds[0].revents, ascii_events)) ;
+	tprint("fds[1].events  = %s\n", poll_events(fds[1].events, ascii_events)) ;
+	tprint("fds[1].revents = %s\n", poll_events(fds[1].revents, ascii_events)) ;
+    }
+
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
     flags		= 0 ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
-    rslt = user_getpmsg(fd2, &rd_ctl, &rd_dta, &rband, &flags) ;
-    check_getmsg_rslts(rslt, &rd_ctl, &rd_dta, &flags, 0, rband) ;
+    rslt = user_getpmsg(fd2, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
+    check_getmsg_rslts(ctx, rslt, &ctx->rd_ctl, &ctx->rd_dta, &flags, 0, rband) ;
 
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\npoll_test: closing files\n") ;
+    tprint("poll_test: closing files\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -3622,7 +3554,7 @@
 * Test multiplexors.							*
 *									*
 ************************************************************************/
-void	mux_test(void)
+void	mux_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -3639,7 +3571,7 @@
     int			arg ;
     struct strioctl	ioc ;
 
-    print("\nSTREAMS multiplexor test\n") ;
+    tprint("STREAMS multiplexor test\n") ;
 
 
 	    /********************************
@@ -3668,65 +3600,61 @@
      */
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open a mux-clone device\n") ;
+    tprint("mux_test: open a mux-clone device\n") ;
     muxfd1 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open another mux-clone device\n") ;
+    tprint("mux_test: open another mux-clone device\n") ;
     muxfd2 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_LINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_LINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
-    print("mux_test: close files to loop driver (now detached)\n") ;
+    tprint("mux_test: close files to loop driver (now detached)\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: closing control streams\n") ;
+    tprint("mux_test: closing control streams\n") ;
     user_close(muxfd1) ;
     user_close(muxfd2) ;
 
 
-    print("\nTest cascaded multiplexors\n") ;
+    tprint("Test cascaded multiplexors\n") ;
 
 	    /********************************
 	    *         Open Files            * 
@@ -3763,99 +3691,91 @@
      */
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open a mux-clone device\n") ;
+    tprint("mux_test: open a mux-clone device\n") ;
     muxfd1 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open another mux-clone device\n") ;
+    tprint("mux_test: open another mux-clone device\n") ;
     muxfd2 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_LINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_LINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
-    print("mux_test: open a mux-clone device to cascade\n") ;
+    tprint("mux_test: open a mux-clone device to cascade\n") ;
     muxfd3 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd3 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd3)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd3)) ;
     }
 
-    print("mux_test: open another mux-clone device to cascade\n") ;
+    tprint("mux_test: open another mux-clone device to cascade\n") ;
     muxfd4 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd4 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd4)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd4)) ;
     }
 
-    print("mux_test: I_LINK mux driver under mux (muxfd3->muxfd1)\n") ;
+    tprint("mux_test: I_LINK mux driver under mux (muxfd3->muxfd1)\n") ;
     muxid3 = user_ioctl(muxfd3, I_LINK, muxfd1) ; /* link muxfd1 below muxfd3 */
     if (muxid3 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid3)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid3)) ;
     }
     else
-	print("                   muxid=%d\n", muxid3) ;
+	tprint("                   muxid=%d\n", muxid3) ;
 
-    print("mux_test: I_LINK mux driver under mux (muxfd4->muxfd2)\n") ;
+    tprint("mux_test: I_LINK mux driver under mux (muxfd4->muxfd2)\n") ;
     muxid4 = user_ioctl(muxfd4, I_LINK, muxfd2) ; /* link muxfd2 below muxfd4 */
     if (muxid4 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid4)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid4)) ;
     }
     else
-	print("                   muxid=%d\n", muxid4) ;
+	tprint("                   muxid=%d\n", muxid4) ;
 
     print_stream(muxfd3) ;
     print_stream(muxfd4) ;
-    print("mux_test: close files to loop driver (now detached)\n") ;
+    tprint("mux_test: close files to loop driver (now detached)\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
-    print("mux_test: close files to lower mux driver (now detached)\n") ;
+    tprint("mux_test: close files to lower mux driver (now detached)\n") ;
     user_close(muxfd1) ;
     user_close(muxfd2) ;
 
-    print("mux_test: send data down through the mux/mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd3, muxfd4, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd3, muxfd4, -1, lgth, 0) ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: closing control streams of cascaded muxs\n") ;
+    tprint("mux_test: closing control streams of cascaded muxs\n") ;
     user_close(muxfd3) ;
     user_close(muxfd4) ;
 
@@ -3890,40 +3810,37 @@
      */
 
 
-    print("\nTest 2 lowers under one control stream\n") ;
+    tprint("Test 2 lowers under one control stream\n") ;
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open a mux-clone device\n") ;
+    tprint("mux_test: open a mux-clone device\n") ;
     muxfd1 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_LINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_LINK loop driver under mux (muxfd1->fd2)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd1->fd2)\n") ;
     muxid2 = user_ioctl(muxfd1, I_LINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
-    print("mux_test: close files to loop driver (now detached)\n") ;
+    tprint("mux_test: close files to loop driver (now detached)\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -3936,8 +3853,7 @@
     rslt = user_ioctl(muxfd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("minimux.1: ioctl MINIMUX_DOWN: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux.1: ioctl MINIMUX_DOWN: %s\n", STRERROR(-rslt)) ;
     }
 
     ioc.ic_cmd 	  = MINIMUX_UP ;	/* set upstream linkage */
@@ -3946,20 +3862,19 @@
     rslt = user_ioctl(muxfd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("minimux.1: ioctl MINIMUX_UP: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux.1: ioctl MINIMUX_UP: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd1, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd1, -1, lgth, 0) ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: closing control streams\n") ;
+    tprint("mux_test: closing control streams\n") ;
     user_close(muxfd1) ;
 
 
@@ -3989,83 +3904,77 @@
      * is unlinked via explicit ioctls.
      */
 
-    print("\nTest reconnecting lower after explicit I_UNLINK\n") ;
+    tprint("Test reconnecting lower after explicit I_UNLINK\n") ;
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open a mux-clone device\n") ;
+    tprint("mux_test: open a mux-clone device\n") ;
     muxfd1 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open another mux-clone device\n") ;
+    tprint("mux_test: open another mux-clone device\n") ;
     muxfd2 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_LINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_LINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_LINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_LINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_LINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
-    print("mux_test: leave open files to loop driver\n") ;
+    tprint("mux_test: leave open files to loop driver\n") ;
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
-    print("mux_test: I_UNLINK muxid1 from muxfd1\n") ;
+    tprint("mux_test: I_UNLINK muxid1 from muxfd1\n") ;
     rslt = user_ioctl(muxfd1, I_UNLINK, muxid1) ;
     if (rslt < 0)
     {
-	print("minimux: I_UNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_UNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: I_UNLINK muxid2 from muxfd2\n") ;
+    tprint("mux_test: I_UNLINK muxid2 from muxfd2\n") ;
     rslt = user_ioctl(muxfd2, I_UNLINK, muxid2) ;
     if (rslt < 0)
     {
-	print("minimux: I_UNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_UNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: close control streams\n") ;
+    tprint("mux_test: close control streams\n") ;
     user_close(muxfd1) ;
     user_close(muxfd2) ;
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -4098,102 +4007,95 @@
      * anymore due to the clone opens.
      */
 
-    print("\nTest I_PLINK/I_PUNLINK\n") ;
+    tprint("Test I_PLINK/I_PUNLINK\n") ;
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open minor 1 of mux device\n") ;
+    tprint("mux_test: open minor 1 of mux device\n") ;
     muxfd1 = user_open(MUX_1, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open a mux-clone device\n") ;
+    tprint("mux_test: open a mux-clone device\n") ;
     muxfd2 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_PLINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_PLINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
-    print("mux_test: leave open files to loop driver\n") ;
+    tprint("mux_test: leave open files to loop driver\n") ;
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
-    print("mux_test: close muxfd1 \n") ;
+    tprint("mux_test: close muxfd1 \n") ;
     user_close(muxfd1) ;
-    print("mux_test: re-open muxfd1 to minor 1\n") ;
+    tprint("mux_test: re-open muxfd1 to minor 1\n") ;
     muxfd1 = user_open(MUX_1, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print("mux_clone: %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL("mux_clone: %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: I_PUNLINK muxid1 from muxfd1\n") ;
+    tprint("mux_test: I_PUNLINK muxid1 from muxfd1\n") ;
     print_stream(muxfd1) ;
     rslt = user_ioctl(muxfd1, I_PUNLINK, muxid1) ;
     if (rslt < 0)
     {
-	print("minimux: I_PUNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_PUNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: stream linkage after I_PUNLINK\n") ;
+    tprint("mux_test: stream linkage after I_PUNLINK\n") ;
     print_stream(muxfd1) ;
 
-    print("mux_test: I_PUNLINK muxid2 from muxfd2\n") ;
+    tprint("mux_test: I_PUNLINK muxid2 from muxfd2\n") ;
     print_stream(muxfd2) ;
     rslt = user_ioctl(muxfd2, I_PUNLINK, muxid2) ;
     if (rslt < 0)
     {
-	print("minimux: I_PUNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_PUNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: stream linkage after I_PUNLINK\n") ;
+    tprint("mux_test: stream linkage after I_PUNLINK\n") ;
     print_stream(muxfd2) ;
 
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
 
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: close control streams\n") ;
+    tprint("mux_test: close control streams\n") ;
     user_close(muxfd1) ;
     user_close(muxfd2) ;
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -4226,115 +4128,107 @@
      * since the stdata structures get allocated by major/minor.
      */
 
-    print("\nTest I_PLINK/I_PUNLINK with re-open\n") ;
+    tprint("Test I_PLINK/I_PUNLINK with re-open\n") ;
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open minimux.1\n") ;
+    tprint("mux_test: open minimux.1\n") ;
     muxfd1 = user_open(MUX_1, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print(MUX_1 ": %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL(MUX_1 ": %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open minimux.2\n") ;
+    tprint("mux_test: open minimux.2\n") ;
     muxfd2 = user_open(MUX_2, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print(MUX_2 ": %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL(MUX_2 ": %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_PLINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_PLINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
-    print("mux_test: leave open files to loop driver\n") ;
+    tprint("mux_test: leave open files to loop driver\n") ;
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
-    print("mux_test: close mux streams\n") ;
+    tprint("mux_test: close mux streams\n") ;
 
     user_close(muxfd1) ;
     user_close(muxfd2) ;
 
-    print("mux_test: re-open first mux-clone stream\n") ;
-    print("mux_test: re-open minimux.1\n") ;
+    tprint("mux_test: re-open first mux-clone stream\n") ;
+    tprint("mux_test: re-open minimux.1\n") ;
     muxfd1 = user_open(MUX_1, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print(MUX_1 ": %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL(MUX_1 ": %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: re-open minimux.2\n") ;
+    tprint("mux_test: re-open minimux.2\n") ;
     muxfd2 = user_open(MUX_2, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print(MUX_2 ": %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL(MUX_2 ": %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: print mux topology\n") ;
+    tprint("mux_test: print mux topology\n") ;
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
 
-    print("mux_test: "
+    tprint("mux_test: "
     	  "send data down through the re-opened mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the re-opened mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    strcpy(ctx->buf, "Test data for sending through the re-opened mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
-    print("mux_test: I_PUNLINK muxid1 from muxfd1\n") ;
+    tprint("mux_test: I_PUNLINK muxid1 from muxfd1\n") ;
     rslt = user_ioctl(muxfd1, I_PUNLINK, muxid1) ;
     if (rslt < 0)
     {
-	print("minimux: I_PUNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_PUNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: I_PUNLINK muxid2 from muxfd2\n") ;
+    tprint("mux_test: I_PUNLINK muxid2 from muxfd2\n") ;
     rslt = user_ioctl(muxfd2, I_PUNLINK, muxid2) ;
     if (rslt < 0)
     {
-	print("minimux: I_PUNLINK: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_PUNLINK: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: close control streams\n") ;
+    tprint("mux_test: close control streams\n") ;
     user_close(muxfd1) ;
     user_close(muxfd2) ;
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -4368,84 +4262,78 @@
      * to be dismantled.
      */
 
-    print("\nTest I_PLINK/I_PUNLINK MUXID_ALL \n") ;
+    tprint("Test I_PLINK/I_PUNLINK MUXID_ALL \n") ;
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
-    print("mux_test: open minimux.1\n") ;
+    tprint("mux_test: open minimux.1\n") ;
     muxfd1 = user_open(MUX_1, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print(MUX_1 ": %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL(MUX_1 ": %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: open minimux.2\n") ;
+    tprint("mux_test: open minimux.2\n") ;
     muxfd2 = user_open(MUX_2, O_RDWR, 0) ;
     if (muxfd2 < 0)
     {
-	print(MUX_2 ": %s\n", strerror(-muxfd2)) ;
-	xit() ;
+	FAIL(MUX_2 ": %s\n", STRERROR(-muxfd2)) ;
     }
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd1->fd1)\n") ;
     muxid1 = user_ioctl(muxfd1, I_PLINK, fd1) ;	/* link fd1 below muxfd1 */
     if (muxid1 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid1)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid1)) ;
     }
     else
-	print("                   muxid=%d\n", muxid1) ;
+	tprint("                   muxid=%d\n", muxid1) ;
 
-    print("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
+    tprint("mux_test: I_PLINK loop driver under mux (muxfd2->fd2)\n") ;
     muxid2 = user_ioctl(muxfd2, I_PLINK, fd2) ;	/* link fd2 below muxfd2 */
     if (muxid2 < 0)
     {
-	print("mux_clone: I_PLINK: %s\n", strerror(-muxid2)) ;
-	xit() ;
+	FAIL("mux_clone: I_PLINK: %s\n", STRERROR(-muxid2)) ;
     }
     else
-	print("                   muxid=%d\n", muxid2) ;
+	tprint("                   muxid=%d\n", muxid2) ;
 
     print_stream(muxfd1) ;
     print_stream(muxfd2) ;
-    print("mux_test: leave open files to loop driver\n") ;
+    tprint("mux_test: leave open files to loop driver\n") ;
 
-    print("mux_test: send data down through the mux/loop and read back\n") ;
-    strcpy(buf, "Test data for sending through the mini-mux") ;
-    lgth = strlen(buf) ;
-    do_get_put(muxfd1, muxfd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the mux/loop and read back\n") ;
+    strcpy(ctx->buf, "Test data for sending through the mini-mux") ;
+    lgth = strlen(ctx->buf) ;
+    do_get_put(ctx, muxfd1, muxfd2, -1, lgth, 0) ;
 
-    print("mux_test: close mux streams\n") ;
+    tprint("mux_test: close mux streams\n") ;
 
     user_close(muxfd1) ;
     user_close(muxfd2) ;
 
-    print("mux_test: re-open first mux-clone stream\n") ;
+    tprint("mux_test: re-open first mux-clone stream\n") ;
     muxfd1 = user_open(MUX_CLONE, O_RDWR, 0) ;
     if (muxfd1 < 0)
     {
-	print(MUX_1 ": %s\n", strerror(-muxfd1)) ;
-	xit() ;
+	FAIL(MUX_1 ": %s\n", STRERROR(-muxfd1)) ;
     }
 
-    print("mux_test: I_PUNLINK MUXID_ALL from mux-clone stream\n") ;
+    tprint("mux_test: I_PUNLINK MUXID_ALL from mux-clone stream\n") ;
     rslt = user_ioctl(muxfd1, I_PUNLINK, MUXID_ALL) ;
     if (rslt < 0)
     {
-	print("minimux: I_PUNLINK(MUXID_ALL): %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("minimux: I_PUNLINK(MUXID_ALL): %s\n", STRERROR(-rslt)) ;
     }
 
 	    /********************************
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nmux_test: close control streams\n") ;
+    tprint("mux_test: close control streams\n") ;
     user_close(muxfd1) ;
-    print("mux_test: send data down through the loop and read back\n") ;
-    do_get_put(fd1, fd2, -1, lgth, 0) ;
+    tprint("mux_test: send data down through the loop and read back\n") ;
+    do_get_put(ctx, fd1, fd2, -1, lgth, 0) ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -4460,7 +4348,7 @@
 * visible directory entries and others don't.				*
 *									*
 ************************************************************************/
-void	clone_test(void)
+void	clone_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -4469,24 +4357,24 @@
     int			fd5 ;
     int			rslt ;
 
-    print("\nclone open test\n") ;
+    tprint("clone open test\n") ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing at start of test\n\n") ;
+    tprint("Directory listing at start of test\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
 #endif
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     rslt = open_clones(&fd3, &fd4) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     fd5 = user_open(LOOP_1, O_RDWR, 0) ;
-    if (fd5 < 0) xit() ;
+    if (fd5 < 0) FAIL("open " LOOP_1 "\n") ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing after opens\n\n") ;
+    tprint("Directory listing after opens\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
     user_print_inodes() ;
 #endif
@@ -4498,22 +4386,22 @@
     user_close(fd5) ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing after closes\n\n") ;
+    tprint("Directory listing after closes\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
     user_print_inodes() ;
 #endif
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     rslt = open_clones(&fd3, &fd4) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     fd5 = user_open(LOOP_1, O_RDWR, 0) ;
-    if (fd5 < 0) xit() ;
+    if (fd5 < 0) FAIL("open " LOOP_1 "\n") ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing after 2nd round of opens\n\n") ;
+    tprint("Directory listing after 2nd round of opens\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
     user_print_inodes() ;
 #endif
@@ -4525,7 +4413,7 @@
     user_close(fd5) ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing after 2nd round of closes\n\n") ;
+    tprint("Directory listing after 2nd round of closes\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
     user_print_inodes() ;
 #endif
@@ -4535,7 +4423,7 @@
 /************************************************************************
 *                          bufcall_test                                 *
 ************************************************************************/
-void bufcall_test(void)
+void bufcall_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -4543,21 +4431,21 @@
     int			lgth ;
     struct strioctl	ioc ;
 
-    print("\nbufcall test\n") ;
+    tprint("bufcall test\n") ;
 
 	    /********************************
 	    *         Open Files            * 
 	    ********************************/
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
 	    /********************************
 	    *         putmsg/read           *
 	    ********************************/
 
-    print("\nUse putmsg to send data, use read to read back data\n") ;
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
+    tprint("Use putmsg to send data, use read to read back data\n") ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
 
     /*
      * Tell the loop driver to use bufcall to drive the service
@@ -4570,38 +4458,37 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_BUFCALL: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_BUFCALL: %s\n", STRERROR(-rslt)) ;
     }
 
-    strcpy(buf, "Test data for bufcall putmsg/read") ;
-    lgth = strlen(buf) ;
-    wr_ctl.len	= -1 ;
-    wr_dta.len	= lgth ;
-    if (put_msg(fd1, &wr_ctl, &wr_dta, 0, MSG_BAND) < 0) xit() ;
+    strcpy(ctx->buf, "Test data for bufcall putmsg/read") ;
+    lgth = strlen(ctx->buf) ;
+    ctx->wr_ctl.len	= -1 ;
+    ctx->wr_dta.len	= lgth ;
+    if (put_msg(fd1, &ctx->wr_ctl, &ctx->wr_dta, 0, MSG_BAND) < 0) FAIL("put_msg\n") ;
 
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
     nread_wait_msgs(fd2, 1) ;
-    rslt = user_read(fd2, rdbuf, lgth);
+    rslt = user_read(fd2, ctx->rdbuf, lgth);
     if (rslt < 0)
     {
-	print("loop_clone.2: read: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop_clone.2: read: %s\n", STRERROR(-rslt)) ;
     }
 
     if (rslt != lgth)
     {
-	print("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
-	xit() ;
+	FAIL("loop_clone.2:  read returned %d, expected %d\n", rslt, lgth) ;
     }
 
-    if (strcmp(buf, rdbuf))
+    if (strcmp(ctx->buf, ctx->rdbuf))
     {
-	print("loop_clone.2: read: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", rdbuf) ;
+	tprint("loop_clone.2: read: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ctx->rdbuf) ;
+	FAIL("\n"); /* missing ? */
     }
     else
-	print("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
+	tprint("loop_clone.2: read %d bytes: buffer compared OK\n", rslt) ;
 
 
 
@@ -4610,7 +4497,7 @@
 	    *         Close Files           * 
 	    ********************************/
 
-    print("\nbufcall_test: closing files\n") ;
+    tprint("bufcall_test: closing files\n") ;
     user_close(fd1) ;
     user_close(fd2) ;
 
@@ -4619,14 +4506,13 @@
 /************************************************************************
 *                           sad_vml_test                                *
 ************************************************************************/
-int sad_vml_test(int fd, struct str_list *list)
+int sad_vml_test(struct test_context *ctx, int fd, struct str_list *list)
 {
 	int rslt;
 
 	rslt = user_ioctl(fd, SAD_VML, list);
 	if (rslt < 0) {
-		print("sad_vml_test: SAD_VML ioctl failed: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_vml_test: SAD_VML ioctl failed: %s\n", STRERROR(-rslt));
 	}
 	return rslt;
 }
@@ -4634,7 +4520,7 @@
 /************************************************************************
 *                             autopush_test                             *
 ************************************************************************/
-void autopush_test(void)
+void autopush_test(struct test_context *ctx)
 {
 	int	fd ;
 	int	rslt ;
@@ -4670,7 +4556,7 @@
 /************************************************************************
 *                             sad_test                                  *
 ************************************************************************/
-void sad_test(void)
+void sad_test(struct test_context *ctx)
 {
 	int fd, fd2;
 	int rslt;
@@ -4678,80 +4564,77 @@
 	struct str_list list;
 	struct strapush apush;
 
-	print("\nSTREAMS Administrative Driver test\n");
+	tprint("STREAMS Administrative Driver test\n");
 
-	print("sad_test: open a sad device\n");
+	tprint("sad_test: open a sad device\n");
 	fd = user_open(SAD_CLONE, O_RDWR, 0);
 	if (fd < 0) {
-		print("sad_test: SAD driver open: %s\n", strerror(-fd));
-		xit();
+		FAIL("sad_test: SAD driver open: %s\n", STRERROR(-fd));
 	}
 
 
-	print("sad_test: Testing SAD_VML IOCTL\n");
+	tprint("sad_test: Testing SAD_VML IOCTL\n");
 
-	print("sad_test: Testing SAD_VML ioctl (a bad module)\n");
+	tprint("sad_test: Testing SAD_VML ioctl (a bad module)\n");
 	strcpy(mlist[0].l_name, "nosuchmodule");
 	list.sl_nmods = 1;
 	list.sl_modlist = mlist;
-	rslt = sad_vml_test(fd, &list);
+	rslt = sad_vml_test(ctx, fd, &list);
 	if (rslt == 0) {
-		print("sad_test: SAD says a module "
+		tprint("sad_test: SAD says a module "
 		      "named \"nosuchmodule\" exists.\n");
-		print("sad_test: Does it?\n");
-		xit();
+		tprint("sad_test: Does it?\n");
+		FAIL("\n");
 	}
 
-	print("sad_test: Testing SAD_VML ioctl (a good and a bad module)\n");
+	tprint("sad_test: Testing SAD_VML ioctl (a good and a bad module)\n");
 	strcpy(mlist[0].l_name, "relay");
 	strcpy(mlist[1].l_name, "nosuchmodule");
 	list.sl_nmods = 2;
-	rslt = sad_vml_test(fd, &list);
+	rslt = sad_vml_test(ctx, fd, &list);
 	if (rslt == 0) {
-		print("sad_test: SAD says modules"
+		tprint("sad_test: SAD says modules"
 		      " \"relay\" and \"nosuchmodule\" exists.\n");
-		print("sad_test: Do they both exist?\n");
-		xit();
+		tprint("sad_test: Do they both exist?\n");
+		FAIL("\n");
 	}
 
-	print("sad_test: Testing SAD_VML ioctl (two good modules)\n");
+	tprint("sad_test: Testing SAD_VML ioctl (two good modules)\n");
 	strcpy(mlist[1].l_name, "relay2");
-	rslt = sad_vml_test(fd, &list);
+	rslt = sad_vml_test(ctx, fd, &list);
 	if (rslt == 1) {
-		print("sad_test: SAD says modules"
+		tprint("sad_test: SAD says modules"
 		      " \"relay\" and \"relay2\" do not both exist.\n");
-		print("sad_test: Shouldn't they both exist?\n");
-		xit();
+		tprint("sad_test: Shouldn't they both exist?\n");
+		FAIL("\n");
 	}
 
-	print("sad_test: SAD_VML IOCTL tests passed\n");
+	tprint("sad_test: SAD_VML IOCTL tests passed\n");
 
 
-	print("sad_test: Testing SAD_GAP and SAD_SAP IOCTLs\n");
+	tprint("sad_test: Testing SAD_GAP and SAD_SAP IOCTLs\n");
 
 	/* Check that autopush is unconfigured */
 	apush.sap_major = SLOOP__CMAJOR_0;
 	apush.sap_minor = 1;
 	rslt = user_ioctl(fd, SAD_GAP, &apush);
 	if (rslt >= 0) {
-		print("sad_test: SAD says autopush is configured "
+		tprint("sad_test: SAD says autopush is configured "
 		      "for loop minor 1.\n");
-		print("sad_test: Shouldn't it be unconfigured?\n");
-		xit();
+		tprint("sad_test: Shouldn't it be unconfigured?\n");
+		FAIL("\n");
 	}
 #ifdef DIRECT_USER
 	if (-rslt == ENODEV)
-		print("sad_test: Autopush is unconfigured for loop minor 1.\n");
+		tprint("sad_test: Autopush is unconfigured for loop minor 1.\n");
 	else {
-		print("sad_test: SAD_GAP ioctl failed: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_test: SAD_GAP ioctl failed: %s\n", STRERROR(-rslt));
 	}
 #else
 	if (errno == ENODEV)
-		print("sad_test: Autopush is unconfigured for loop minor 1.\n");
+		tprint("sad_test: Autopush is unconfigured for loop minor 1.\n");
 	else {
-		print("sad_test: SAD_GAP ioctl failed: %s\n", strerror(errno));
-		xit();
+		FAIL("sad_test: SAD_GAP ioctl failed: %s\n", STRERROR(errno));
 	}
 #endif
 
@@ -4764,41 +4647,38 @@
 	strcpy(apush.sap_list[1], "relay2");
 	rslt = user_ioctl(fd, SAD_SAP, &apush);
 	if (rslt < 0) {
-		print("sad_test: SAD_SAP ioctl failed: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_test: SAD_SAP ioctl failed: %s\n", STRERROR(-rslt));
 	}
 
 	/* Test autopush */
 	fd2 = user_open(LOOP_1, O_RDWR, 0);
 	if (fd2 < 0) {
-		print("sad_test: loop driver open: %s\n", strerror(-fd));
-		xit();
+		FAIL("sad_test: loop driver open: %s\n", STRERROR(-fd));
 	}
 	list.sl_nmods = 4;
 	rslt = user_ioctl(fd2, I_LIST, &list);
 	if (rslt < 0) {
-		print("sad_test: I_LIST: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_test: I_LIST: %s\n", STRERROR(-rslt));
 	}
 	if (list.sl_nmods != 3) {
-		print("sad_test: loop driver open autopushed %d modules.\n");
-		print("sad_test: Expected 2 autopushed modules.\n");
-		xit();
+		tprint("sad_test: loop driver open autopushed %d modules.\n");
+		tprint("sad_test: Expected 2 autopushed modules.\n");
+		FAIL("\n");
 	}
 	if (strcmp(mlist[0].l_name, "relay2")) {
-		print("sad_test: Second autopushed module is \"%s\".\n",
+		tprint("sad_test: Second autopushed module is \"%s\".\n",
 		      mlist[0].l_name);
-		print("sad_test: Expected \"relay2\".\n");
-		xit();
+		tprint("sad_test: Expected \"relay2\".\n");
+		FAIL("\n");
 	}
 	if (strcmp(mlist[1].l_name, "relay")) {
-		print("sad_test: First autopushed module is \"%s\".\n",
+		tprint("sad_test: First autopushed module is \"%s\".\n",
 		      mlist[0].l_name);
-		print("sad_test: Expected \"relay\".\n");
-		xit();
+		tprint("sad_test: Expected \"relay\".\n");
+		FAIL("\n");
 	}
 	user_close(fd2);
-	print("sad_test: Autopush tested OK.\n");
+	tprint("sad_test: Autopush tested OK.\n");
 
 	/* Remove autopush configuration */
 	apush.sap_cmd = SAP_CLEAR;
@@ -4806,8 +4686,7 @@
 	apush.sap_minor = 1;
 	rslt = user_ioctl(fd, SAD_SAP, &apush);
 	if (rslt < 0) {
-		print("sad_test: SAD_SAP ioctl failed: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_test: SAD_SAP ioctl failed: %s\n", STRERROR(-rslt));
 	}
 	
 	/* Check that autopush configuration was removed */
@@ -4815,48 +4694,45 @@
 	apush.sap_minor = 1;
 	rslt = user_ioctl(fd, SAD_GAP, &apush);
 	if (rslt >= 0) {
-		print("sad_test: SAD says autopush is configured "
+		tprint("sad_test: SAD says autopush is configured "
 		      "for loop minor 1.\n");
-		print("sad_test: But I just cleared the configuration\n");
-		xit();
+		tprint("sad_test: But I just cleared the configuration\n");
+		FAIL("\n");
 	}
 #ifdef DIRECT_USER
 	if (-rslt != ENODEV) {
-		print("sad_test: SAD_GAP ioctl failed: %s\n", strerror(-rslt));
-		xit();
+		FAIL("sad_test: SAD_GAP ioctl failed: %s\n", STRERROR(-rslt));
 	}
 #else
 	if (errno != ENODEV) {
-		print("sad_test: SAD_GAP ioctl failed: %s\n", strerror(errno));
-		xit();
+		FAIL("sad_test: SAD_GAP ioctl failed: %s\n", STRERROR(errno));
 	}
 #endif
 
-	print("sad_test: SAD_GAP and SAD_SAP IOCTL tests passed\n");
+	tprint("sad_test: SAD_GAP and SAD_SAP IOCTL tests passed\n");
 
-	print("sad_test: closing files\n");
+	tprint("sad_test: closing files\n");
 	user_close(fd);
 }
 
 /************************************************************************
 *                             fifo_test                                 *
 ************************************************************************/
-void fifo_test(void)
+void fifo_test(struct test_context *ctx)
 {
     int fd[2];
     int i;
     struct user_stat stat;
 
-    print("\nSTREAMS-based FIFO/pipe test\n");
+    tprint("STREAMS-based FIFO/pipe test\n");
     
     for (i = 0;  i < 2;  i++) {
 	fd[i] = user_open(CLONE_FIFO, O_RDWR, 0);
 	if (fd[i] < 0) {
-	    print("fifo_test: fifo open: %s\n", strerror(errno) );
-	    xit();
+	    FAIL("fifo_test: fifo open: %s\n", STRERROR(errno));
 	}
 	user_fstat( fd[i], &stat );
-	print("fifo_test: open(\"%s\",O_RDWR) #%d: fd %d mode 0%o dev 0x%x\n",
+	tprint("fifo_test: open(\"%s\",O_RDWR) #%d: fd %d mode 0%o dev 0x%x\n",
 	      CLONE_FIFO, i+1, fd[i],
 	      (int)stat.st_mode, (int)stat.st_rdev );
     }
@@ -4866,11 +4742,10 @@
     for (i = 0;  i < 2;  i++) {
 	fd[i] = user_open(FIFO_0, O_RDWR, 0);
 	if (fd[i] < 0) {
-	    print("fifo_test: fifo open: %s\n", strerror(errno) );
-	    xit();
+	    FAIL("fifo_test: fifo open: %s\n", STRERROR(errno));
 	}
 	user_fstat( fd[i], &stat );
-	print("fifo_test: open(\"%s\",O_RDWR) #%d: fd %d mode 0%o dev 0x%x\n",
+	tprint("fifo_test: open(\"%s\",O_RDWR) #%d: fd %d mode 0%o dev 0x%x\n",
 	      FIFO_0, i+1, fd[i],
 	      (int)stat.st_mode, (int)stat.st_rdev );
     }
@@ -4878,16 +4753,15 @@
     user_close(fd[1]);
     
     if ((user_pipe(fd)) < 0) {
-	print("pipe: %s\n", strerror(errno) );
-	xit();
+	FAIL("pipe: %s\n", STRERROR(errno));
     }
     user_ioctl( fd[0], I_PUSH, "pipemod" );
 
     user_fstat( fd[0], &stat );
-    print("fifo_test: pipe() 0: fd %d mode 0%o dev 0x%x\n",
+    tprint("fifo_test: pipe() 0: fd %d mode 0%o dev 0x%x\n",
 	  fd[0], (int)stat.st_mode, (int)stat.st_rdev );
     user_fstat( fd[1], &stat );
-    print("fifo_test: pipe() 1: fd %d mode 0%o dev 0x%x\n",
+    tprint("fifo_test: pipe() 1: fd %d mode 0%o dev 0x%x\n",
 	  fd[1], (int)stat.st_mode, (int)stat.st_rdev );
 
     user_close(fd[0]);
@@ -4897,58 +4771,54 @@
 /************************************************************************
 *                           passfd_test                                 *
 ************************************************************************/
-void passfd_test(void)
+void passfd_test(struct test_context *ctx)
 {
     int fd[2], sendfd;
     struct strrecvfd recv;
     struct user_stat stat;
     
-    print("\nI_SENDFD/I_RECVFD test\n");
+    tprint("I_SENDFD/I_RECVFD test\n");
     
     if ((user_pipe(fd)) < 0) {
-	print("pipe: %s\n", strerror(errno) );
-	xit();
+	FAIL("pipe: %s\n", STRERROR(errno));
     }
     user_fstat( fd[0], &stat );
-    print("passfd_test: pipe() 0: fd %d mode 0%o dev 0x%x\n",
+    tprint("passfd_test: pipe() 0: fd %d mode 0%o dev 0x%x\n",
 	  fd[0], (int)stat.st_mode, (int)stat.st_rdev );
     user_fstat( fd[1], &stat );
-    print("passfd_test: pipe() 1: fd %d mode 0%o dev 0x%x\n",
+    tprint("passfd_test: pipe() 1: fd %d mode 0%o dev 0x%x\n",
 	  fd[1], (int)stat.st_mode, (int)stat.st_rdev );
 
     sendfd = user_open(FIFO_0, O_RDWR, 0);
     if (sendfd < 0) {
-	print("passfd_test: open(\"%s\",O_RDWR) failed: %s\n",
+	FAIL("passfd_test: open(\"%s\",O_RDWR) failed: %s\n",
 	      FIFO_0, strerror(errno) );
-	xit();
     }
     user_fstat( sendfd, &stat );
-    print("passfd_test: sending fd %d mode 0%o dev 0x%x\n",
+    tprint("passfd_test: sending fd %d mode 0%o dev 0x%x\n",
 	  sendfd, (int)stat.st_mode, (int)stat.st_rdev );
     
     if (user_ioctl( fd[0], I_SENDFD, sendfd ) < 0) {
-	print("ioctl( %d, I_SENDFD, %d ) failed: %s\n",
+	FAIL("ioctl( %d, I_SENDFD, %d ) failed: %s\n",
 	      fd[0], sendfd, strerror(errno) );
-	xit();
     }
     sleep(1) ;			/* allow time for service queues */
-    print("passfd_test: closing sendfd %d\n", sendfd);
+    tprint("passfd_test: closing sendfd %d\n", sendfd);
     user_close(sendfd);
-    print("passfd_test: closing pipe fd[0] %d\n", fd[0]);
+    tprint("passfd_test: closing pipe fd[0] %d\n", fd[0]);
     user_close(fd[0]);
     
     if (user_ioctl( fd[1], I_RECVFD, &recv ) < 0) {
-	print("ioctl( %d, I_RECVFD, ... ) failed: %s\n",
+	FAIL("ioctl( %d, I_RECVFD, ... ) failed: %s\n",
 	      fd[1], strerror(errno) );
-	xit();
     }
     user_fstat( recv.fd, &stat );
-    print("passfd_test: received fd %d mode 0%o dev 0x%x\n",
+    tprint("passfd_test: received fd %d mode 0%o dev 0x%x\n",
 	  recv.fd, (int)stat.st_mode, (int)stat.st_rdev );
 
-    print("passfd_test: closing pipe fd[1] %d\n", fd[1]);
+    tprint("passfd_test: closing pipe fd[1] %d\n", fd[1]);
     user_close(fd[1]);
-    print("passfd_test: closing recv.fd %d\n", recv.fd);
+    tprint("passfd_test: closing recv.fd %d\n", recv.fd);
     user_close(recv.fd);
 }
 
@@ -4964,28 +4834,26 @@
 #define	_M_PROTO	2
 #define	_M_PCPROTO	3
 
-void ck_band(int fd, int band, int expected)
+void ck_band(struct test_context *ctx, int fd, int band, int expected)
 {
     int		rslt ;
 
     rslt = user_ioctl(fd, I_CKBAND, band) ;
     if (rslt < 0)
     {
-	print("ck_band(%d): I_CKBAND: %s\n", band, strerror(-rslt)) ;
-	xit() ;
+	FAIL("ck_band(%d): I_CKBAND: %s\n", band, STRERROR(-rslt));
     }
 
     if (rslt == expected)
     {
-	print("ck_band(%d): I_CKBAND: got expected result %d\n", band, rslt) ;
+	tprint("ck_band(%d): I_CKBAND: got expected result %d\n", band, rslt) ;
 	return ;
     }
 
-    print("ck_band(%d): I_CKBAND: expected %d got %d\n", band, expected, rslt) ;
-    xit() ;
+    FAIL("ck_band(%d): I_CKBAND: expected %d got %d\n", band, expected, rslt) ;
 }
 
-void send_band(int fd, int band, int seq, int mtype)
+void send_band(struct test_context *ctx, int fd, int band, int seq, int mtype)
 {
     int		flags ;
 
@@ -4998,24 +4866,24 @@
 
     if (mtype == _M_DATA)
     {
-	sprintf(buf, "Seq=%d Band=%d M_DATA", seq, band) ;
-	wr_dta.len = strlen(buf) ;
-	wr_ctl.len = -1 ;		/* no control msg */
+	sprintf(ctx->buf, "Seq=%d Band=%d M_DATA", seq, band) ;
+	ctx->wr_dta.len = strlen(ctx->buf) ;
+	ctx->wr_ctl.len = -1 ;		/* no control msg */
     }
     else
     {
-	sprintf(ctlbuf, "Seq=%d Band=%d M_PCPROTO", seq, band) ;
-	wr_ctl.len = strlen(ctlbuf) ;
-	wr_dta.len = -1 ;		/* no data msg */
+	sprintf(ctx->ctlbuf, "Seq=%d Band=%d M_PCPROTO", seq, band) ;
+	ctx->wr_ctl.len = strlen(ctx->ctlbuf) ;
+	ctx->wr_dta.len = -1 ;		/* no data msg */
     }
 
-    if (put_msg(fd, &wr_ctl, &wr_dta, band, flags) < 0)
-	xit() ;
+    if (put_msg(fd, &ctx->wr_ctl, &ctx->wr_dta, band, flags) < 0)
+	FAIL("put_msg\n") ;
 }
 
 int	receive_band_quiet ;
 
-void receive_band(int fd, int band, int seq, int mtype)
+void receive_band(struct test_context *ctx, int fd, int band, int seq, int mtype)
 {
     int			flags = MSG_BAND;
     int			rband = band ;
@@ -5025,87 +4893,80 @@
     char	       *mnemonic ;
     int			len ;
 
-    rd_ctl.len		= -1 ;
-    rd_ctl.maxlen	= sizeof(rdctlbuf) ;
-    rd_dta.len		= -1 ;
-    rd_dta.maxlen	= sizeof(rdbuf) ;
+    ctx->rd_ctl.len		= -1 ;
+    ctx->rd_ctl.maxlen	= sizeof(ctx->rdctlbuf) ;
+    ctx->rd_dta.len		= -1 ;
+    ctx->rd_dta.maxlen	= sizeof(ctx->rdbuf) ;
 
-    memset(rdctlbuf, 0, sizeof(rdctlbuf)) ;
-    memset(rdbuf, 0, sizeof(rdbuf)) ;
+    memset(ctx->rdctlbuf, 0, sizeof(ctx->rdctlbuf)) ;
+    memset(ctx->rdbuf, 0, sizeof(ctx->rdbuf)) ;
 
-    rslt = user_getpmsg(fd, &rd_ctl, &rd_dta, &rband, &flags) ;
+    rslt = user_getpmsg(fd, &ctx->rd_ctl, &ctx->rd_dta, &rband, &flags) ;
     if (rslt < 0)
     {
-	print("receive_band(%d): %s\n", band, strerror(-rslt)) ;
-	xit() ;
+	FAIL("receive_band(%d): %s\n", band, STRERROR(-rslt)) ;
     }
 
     if (band != rband)
     {
-	print("receive_band: expected msg on band %d, got one on band %d\n",
+	FAIL("receive_band: expected msg on band %d, got one on band %d\n",
 		band, rband) ;
-	xit() ;
     }
 
     if (mtype == _M_PCPROTO && !(flags & MSG_HIPRI))
     {
-	print("receive_band: expected hi-pri msg, got normal-pri instead\n");
-	xit() ;
+	FAIL("receive_band: expected hi-pri msg, got normal-pri instead\n");
     }
 
     if (mtype != _M_PCPROTO && (flags & MSG_HIPRI))
     {
-	print("receive_band: expected normal-pri msg, got hi-pri instead\n");
-	xit() ;
+	FAIL("receive_band: expected normal-pri msg, got hi-pri instead\n");
     }
 
     if (mtype == _M_DATA)
     {
-	if (rd_ctl.len > 0)
+	if (ctx->rd_ctl.len > 0)
 	{
-	    print("receive_band: expected M_DATA, got M_PROTO instead\n");
-	    xit() ;
+	    FAIL("receive_band: expected M_DATA, got M_PROTO instead\n");
 	}
 
-	ptr = rdbuf ;
-	len = rd_dta.len ;
+	ptr = ctx->rdbuf ;
+	len = ctx->rd_dta.len ;
 	mnemonic = "M_DATA" ;
     }
     else
     {
-	if (rd_dta.len > 0)
+	if (ctx->rd_dta.len > 0)
 	{
-	    print("receive_band: expected M_PROTO, got M_DATA instead\n");
-	    xit() ;
+	    FAIL("receive_band: expected M_PROTO, got M_DATA instead\n");
 	}
 
-	ptr = rdctlbuf ;
-	len = rd_ctl.len ;
+	ptr = ctx->rdctlbuf ;
+	len = ctx->rd_ctl.len ;
 	mnemonic = "M_PCPROTO" ;
     }
 
-    sprintf(buf, "Seq=%d Band=%d %s", seq, band, mnemonic) ;
-    lgth = strlen(buf) ;
+    sprintf(ctx->buf, "Seq=%d Band=%d %s", seq, band, mnemonic) ;
+    lgth = strlen(ctx->buf) ;
 
     if (len != lgth)
     {
-	print("receive_band: expected %d bytes, got %d bytes\n", lgth, len) ;
-	xit() ;
+	FAIL("receive_band: expected %d bytes, got %d bytes\n", lgth, len) ;
     }
 
-    if (strcmp(buf, ptr) != 0)
+    if (strcmp(ctx->buf, ptr) != 0)
     {
-	print("receive_band: buffer compare error\n") ;
-	print("              wrote \"%s\"\n", buf) ;
-	print("              read  \"%s\"\n", ptr) ;
-	xit() ;
+	tprint("receive_band: buffer compare error\n") ;
+	tprint("              wrote \"%s\"\n", ctx->buf) ;
+	tprint("              read  \"%s\"\n", ptr) ;
+	FAIL("\n") ;
     }
 
     if (!receive_band_quiet)
-	print("receive_band: OK: %s\n", ptr) ;
+	tprint("receive_band: OK: %s\n", ptr) ;
 }
 
-void band_test(void)
+void band_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -5116,10 +4977,10 @@
     int			flow_ok ;
     struct strioctl	ioc ;
 
-    print("\nQueue band test\n") ;
+    tprint("Queue band test\n") ;
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     ioc.ic_timout = 10 ;
     ioc.ic_dp	  = NULL;
@@ -5128,84 +4989,84 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd2, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
 
-    print("\nband_test: band 0 (easy case)\n") ;
-    send_band(fd1, 0, 1, _M_DATA) ;
-    ck_band(fd2, 0, 1) ;
-    receive_band(fd2, 0, 1, _M_DATA) ;
-    ck_band(fd2, 0, 0) ;
-
-    print("\nband_test: write band 0, 1; read band 1, 0\n") ;
-    send_band(fd1, 0, 2, _M_DATA) ;
-    send_band(fd1, 1, 3, _M_DATA) ;
-    ck_band(fd2, 1, 1) ;
-    receive_band(fd2, 1, 3, _M_DATA) ;
-    ck_band(fd2, 1, 0) ;
-    receive_band(fd2, 0, 2, _M_DATA) ;
-
-    print("\nband_test: write band 1, 2, 3; read band 3, 2, 1\n") ;
-    send_band(fd1, 1, 4, _M_DATA) ;
-    send_band(fd1, 2, 5, _M_DATA) ;
-    send_band(fd1, 3, 6, _M_DATA) ;
-    ck_band(fd2, 3, 1) ;
-    receive_band(fd2, 3, 6, _M_DATA) ;
-    ck_band(fd2, 3, 0) ;
-    ck_band(fd2, 2, 1) ;
-    receive_band(fd2, 2, 5, _M_DATA) ;
-    ck_band(fd2, 2, 0) ;
-    ck_band(fd2, 1, 1) ;
-    receive_band(fd2, 1, 4, _M_DATA) ;
-    ck_band(fd2, 1, 0) ;
-
-    print("\nband_test: write band 1, 3; read band 3, 1\n") ;
-    send_band(fd1, 1, 7, _M_DATA) ;
-    send_band(fd1, 3, 8, _M_DATA) ;
-    receive_band(fd2, 3, 8, _M_DATA) ;
-    receive_band(fd2, 1, 7, _M_DATA) ;
-
-    print("\nband_test: write band 1, 3, 1; read band 3, 1, 1\n") ;
-    send_band(fd1, 1, 9, _M_DATA) ;
-    send_band(fd1, 3, 10, _M_DATA) ;
-    send_band(fd1, 1, 11, _M_DATA) ;
-    receive_band(fd2, 3, 10, _M_DATA) ;
-    receive_band(fd2, 1, 9, _M_DATA) ;
-    receive_band(fd2, 1, 11, _M_DATA) ;
+    tprint("band_test: band 0 (easy case)\n") ;
+    send_band(ctx, fd1, 0, 1, _M_DATA) ;
+    ck_band(ctx, fd2, 0, 1) ;
+    receive_band(ctx, fd2, 0, 1, _M_DATA) ;
+    ck_band(ctx, fd2, 0, 0) ;
+
+    tprint("band_test: write band 0, 1; read band 1, 0\n") ;
+    send_band(ctx, fd1, 0, 2, _M_DATA) ;
+    send_band(ctx, fd1, 1, 3, _M_DATA) ;
+    ck_band(ctx, fd2, 1, 1) ;
+    receive_band(ctx, fd2, 1, 3, _M_DATA) ;
+    ck_band(ctx, fd2, 1, 0) ;
+    receive_band(ctx, fd2, 0, 2, _M_DATA) ;
+
+    tprint("band_test: write band 1, 2, 3; read band 3, 2, 1\n") ;
+    send_band(ctx, fd1, 1, 4, _M_DATA) ;
+    send_band(ctx, fd1, 2, 5, _M_DATA) ;
+    send_band(ctx, fd1, 3, 6, _M_DATA) ;
+    ck_band(ctx, fd2, 3, 1) ;
+    receive_band(ctx, fd2, 3, 6, _M_DATA) ;
+    ck_band(ctx, fd2, 3, 0) ;
+    ck_band(ctx, fd2, 2, 1) ;
+    receive_band(ctx, fd2, 2, 5, _M_DATA) ;
+    ck_band(ctx, fd2, 2, 0) ;
+    ck_band(ctx, fd2, 1, 1) ;
+    receive_band(ctx, fd2, 1, 4, _M_DATA) ;
+    ck_band(ctx, fd2, 1, 0) ;
+
+    tprint("band_test: write band 1, 3; read band 3, 1\n") ;
+    send_band(ctx, fd1, 1, 7, _M_DATA) ;
+    send_band(ctx, fd1, 3, 8, _M_DATA) ;
+    receive_band(ctx, fd2, 3, 8, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 7, _M_DATA) ;
+
+    tprint("band_test: write band 1, 3, 1; read band 3, 1, 1\n") ;
+    send_band(ctx, fd1, 1, 9, _M_DATA) ;
+    send_band(ctx, fd1, 3, 10, _M_DATA) ;
+    send_band(ctx, fd1, 1, 11, _M_DATA) ;
+    receive_band(ctx, fd2, 3, 10, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 9, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 11, _M_DATA) ;
 
-    print("\nband_test: "
+    tprint("band_test: "
 	    "write band 1, 2, M_PCPROTO; read M_PCPROTO, band 2, 1\n");
-    send_band(fd1, 1, 12, _M_DATA) ;
-    send_band(fd1, 2, 13, _M_DATA) ;
-    send_band(fd1, 0, 14, _M_PCPROTO) ;
-    receive_band(fd2, 0, 14, _M_PCPROTO) ;
-    receive_band(fd2, 2, 13, _M_DATA) ;
-    receive_band(fd2, 1, 12, _M_DATA) ;
+    send_band(ctx, fd1, 1, 12, _M_DATA) ;
+    send_band(ctx, fd1, 2, 13, _M_DATA) ;
+    send_band(ctx, fd1, 0, 14, _M_PCPROTO) ;
+    receive_band(ctx, fd2, 0, 14, _M_PCPROTO) ;
+    receive_band(ctx, fd2, 2, 13, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 12, _M_DATA) ;
 
-    print("\nband_test: "
+    tprint("band_test: "
 	    "fill up band 1, then write band 2; read 2, 1, 1, ...\n");
     send_seq = 10000 ;
     for (n_sent = 0; user_ioctl(fd1, I_CANPUT, 1) == 1 ; n_sent++)
     {
-	send_band(fd1, 1, send_seq + n_sent, _M_DATA) ;
+	send_band(ctx, fd1, 1, send_seq + n_sent, _M_DATA) ;
 	if (n_sent == 0)
 	    set_debug_mask(0x00000000L) ;
     }
 
-    print("\nband_test: band 1 full (%d msgs), write band 2\n", n_sent) ;
+    tprint("band_test: band 1 full (%d msgs), write band 2\n", n_sent) ;
     set_debug_mask(ALL_DEBUG_BITS) ;
-    send_band(fd1, 2, send_seq + n_sent + 1, _M_DATA) ;
-    receive_band(fd2, 2, send_seq + n_sent + 1, _M_DATA) ;
+    send_band(ctx, fd1, 2, send_seq + n_sent + 1, _M_DATA) ;
+    receive_band(ctx, fd2, 2, send_seq + n_sent + 1, _M_DATA) ;
     for (i = 0; i < n_sent; i++)
     {
-	receive_band(fd2, 1, send_seq + i, _M_DATA) ;
+	receive_band(ctx, fd2, 1, send_seq + i, _M_DATA) ;
 	if (i == 0)
 	{
 	    set_debug_mask(0x00000000L) ;
@@ -5213,23 +5074,23 @@
 	}
     }
 
-    print("\nband_test: wr band 1, fill band 2, wr band 1; read 2,2,... 1\n");
+    tprint("band_test: wr band 1, fill band 2, wr band 1; read 2,2,... 1\n");
     set_debug_mask(ALL_DEBUG_BITS) ;
     receive_band_quiet = 0 ;
     send_seq = 20000 ;
-    send_band(fd1, 1, 20, _M_DATA) ;
+    send_band(ctx, fd1, 1, 20, _M_DATA) ;
     for (n_sent = 0; user_ioctl(fd1, I_CANPUT, 2) == 1 ; n_sent++)
     {
-	send_band(fd1, 2, send_seq + n_sent, _M_DATA) ;
+	send_band(ctx, fd1, 2, send_seq + n_sent, _M_DATA) ;
 	if (n_sent == 0)
 	    set_debug_mask(0x00000000L) ;
     }
 
-    print("\nband_test: band 2 full (%d msgs), write band 1\n", n_sent) ;
-    send_band(fd1, 1, 21, _M_DATA) ;
+    tprint("band_test: band 2 full (%d msgs), write band 1\n", n_sent) ;
+    send_band(ctx, fd1, 1, 21, _M_DATA) ;
     for (i = 0; i < n_sent; i++)
     {
-	receive_band(fd2, 2, send_seq + i, _M_DATA) ;
+	receive_band(ctx, fd2, 2, send_seq + i, _M_DATA) ;
 	if (i == 0)
 	{
 	    set_debug_mask(0x00000000L) ;
@@ -5238,28 +5099,28 @@
     }
     set_debug_mask(ALL_DEBUG_BITS) ;
     receive_band_quiet = 0 ;
-    receive_band(fd2, 1, 20, _M_DATA) ;
-    receive_band(fd2, 1, 21, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 20, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 21, _M_DATA) ;
 
 
-    print("\nband_test: wr band 1, fill band 2, wr band 1; test backenable\n");
+    tprint("band_test: wr band 1, fill band 2, wr band 1; test backenable\n");
     set_debug_mask(ALL_DEBUG_BITS) ;
     receive_band_quiet = 0 ;
     send_seq = 30000 ;
-    send_band(fd1, 1, 22, _M_DATA) ;
+    send_band(ctx, fd1, 1, 22, _M_DATA) ;
     for (n_sent = 0; user_ioctl(fd1, I_CANPUT, 2) == 1 ; n_sent++)
     {
-	send_band(fd1, 2, send_seq + n_sent, _M_DATA) ;
+	send_band(ctx, fd1, 2, send_seq + n_sent, _M_DATA) ;
 	if (n_sent == 0)
 	    set_debug_mask(0x00000000L) ;
     }
 
-    print("band_test: band 2 full (%d msgs), write band 1\n", n_sent) ;
-    send_band(fd1, 1, 23, _M_DATA) ;
+    tprint("band_test: band 2 full (%d msgs), write band 1\n", n_sent) ;
+    send_band(ctx, fd1, 1, 23, _M_DATA) ;
     flow_ok = 0 ;
     for (i = 0; i < n_sent; i++)
     {
-	receive_band(fd2, 2, send_seq + i, _M_DATA) ;
+	receive_band(ctx, fd2, 2, send_seq + i, _M_DATA) ;
 	if (i == 0)
 	{
 	    set_debug_mask(0x00000000L) ;
@@ -5268,33 +5129,32 @@
 	if (!flow_ok && user_ioctl(fd1, I_CANPUT, 2) == 1)
 	{
 	    flow_ok = 1 ;
-	    print("band_test: backpressure relieved at %d messages queued\n",
+	    tprint("band_test: backpressure relieved at %d messages queued\n",
 		    n_sent - i) ;
 	}
     }
 
     set_debug_mask(ALL_DEBUG_BITS) ;
     receive_band_quiet = 0 ;
-    receive_band(fd2, 1, 22, _M_DATA) ;
-    receive_band(fd2, 1, 23, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 22, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 23, _M_DATA) ;
 
     if (!flow_ok)
     {
-	print("band_test: all messages read but backpressure still in place\n");
-	xit() ;
+	FAIL("band_test: all messages read but backpressure still in place\n");
     }
 
 
     user_close(fd1);
     user_close(fd2);
 
-    print("End of band test\n") ;
+    tprint("End of band test\n") ;
 }
 
 /************************************************************************
 *                          flush_test                                   *
 ************************************************************************/
-void flush_test(void)
+void flush_test(struct test_context *ctx)
 {
     int			fd1 ;
     int			fd2 ;
@@ -5302,10 +5162,10 @@
     struct strioctl	ioc ;
     bandinfo_t		bi ;
 
-    print("\nQueue flushing test\n") ;
+    tprint("Queue flushing test\n") ;
 
     rslt = open_clones(&fd1, &fd2) ;
-    if (rslt < 0) xit() ;
+    if (rslt < 0) FAIL("open_clones\n") ;
 
     ioc.ic_timout = 10 ;
     ioc.ic_dp	  = NULL;
@@ -5314,82 +5174,75 @@
     rslt = user_ioctl(fd1, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.1: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = user_ioctl(fd2, I_STR, &ioc) ;
     if (rslt < 0)
     {
-	print("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", strerror(-rslt)) ;
+	FAIL("loop_clone.2: ioctl LOOP_PUTNXT: %s\n", STRERROR(-rslt)) ;
     }
 
-    print("\nflush_test: simple band 0 data\n") ;
-    send_band(fd1, 0, 1, _M_DATA) ;
-    send_band(fd1, 0, 2, _M_DATA) ;
+    tprint("flush_test: simple band 0 data\n") ;
+    send_band(ctx, fd1, 0, 1, _M_DATA) ;
+    send_band(ctx, fd1, 0, 2, _M_DATA) ;
 
     rslt = nread_wait_msgs(fd2, 2) ;
     if (rslt != 2)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
     }
 
     rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: simple band 0 data -- OK\n") ;
+    tprint("flush_test: simple band 0 data -- OK\n") ;
 
 
-    print("\nflush_test: band 1 data via I_FLUSH\n") ;
+    tprint("flush_test: band 1 data via I_FLUSH\n") ;
 
-    send_band(fd1, 1, 3, _M_DATA) ;
-    send_band(fd1, 1, 4, _M_DATA) ;
+    send_band(ctx, fd1, 1, 3, _M_DATA) ;
+    send_band(ctx, fd1, 1, 4, _M_DATA) ;
 
     rslt = nread_wait_msgs(fd2, 2) ;
     if (rslt != 2)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
     }
 
     rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: band 1 data via I_FLUSH -- OK\n") ;
+    tprint("flush_test: band 1 data via I_FLUSH -- OK\n") ;
 
 
-    print("\nflush_test: band 1 data via I_FLUSHBAND\n") ;
+    tprint("flush_test: band 1 data via I_FLUSHBAND\n") ;
 
-    send_band(fd1, 1, 5, _M_DATA) ;
-    send_band(fd1, 1, 6, _M_DATA) ;
+    send_band(ctx, fd1, 1, 5, _M_DATA) ;
+    send_band(ctx, fd1, 1, 6, _M_DATA) ;
 
     rslt = nread_wait_msgs(fd2, 2) ;
     if (rslt != 2)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 2) ;
     }
 
     bi.bi_pri = 1 ;			/* flush band 1 */
@@ -5398,32 +5251,29 @@
     rslt = user_ioctl(fd2, I_FLUSHBAND, &bi) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSHBAND: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSHBAND: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: band 1 data via I_FLUSHBAND -- OK\n") ;
+    tprint("flush_test: band 1 data via I_FLUSHBAND -- OK\n") ;
 
 
-    print("\nflush_test: band 2 data via I_FLUSHBAND w/band 1 data present\n") ;
+    tprint("flush_test: band 2 data via I_FLUSHBAND w/band 1 data present\n") ;
 
-    send_band(fd1, 1, 7, _M_DATA) ;
-    send_band(fd1, 1, 8, _M_DATA) ;
-    send_band(fd1, 2, 9, _M_DATA) ;
-    send_band(fd1, 2, 10, _M_DATA) ;
+    send_band(ctx, fd1, 1, 7, _M_DATA) ;
+    send_band(ctx, fd1, 1, 8, _M_DATA) ;
+    send_band(ctx, fd1, 2, 9, _M_DATA) ;
+    send_band(ctx, fd1, 2, 10, _M_DATA) ;
 
     rslt = nread_wait_msgs(fd2, 4) ;
     if (rslt != 4)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 4) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 4) ;
     }
 
     bi.bi_pri = 2 ;			/* flush band 2 */
@@ -5432,21 +5282,19 @@
     rslt = user_ioctl(fd2, I_FLUSHBAND, &bi) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSHBAND: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSHBAND: %s\n", STRERROR(-rslt)) ;
     }
 
-    receive_band(fd2, 1, 7, _M_DATA) ;
-    receive_band(fd2, 1, 8, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 7, _M_DATA) ;
+    receive_band(ctx, fd2, 1, 8, _M_DATA) ;
 
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: "
+    tprint("flush_test: "
 	    "band 2 data via I_FLUSHBAND w/band 1 data present -- OK\n") ;
 
     /*
@@ -5454,49 +5302,45 @@
      * and M_PCPROTO.  So anything that we can send from user level
      * gets flushed.
      */
-    print("\nflush_test: band 0 data + M_PCPROTO\n") ;
-    send_band(fd1, 0, 11, _M_DATA) ;
-    send_band(fd1, 0, 12, _M_DATA) ;
-    send_band(fd1, 0, 13, _M_PCPROTO) ;
+    tprint("flush_test: band 0 data + M_PCPROTO\n") ;
+    send_band(ctx, fd1, 0, 11, _M_DATA) ;
+    send_band(ctx, fd1, 0, 12, _M_DATA) ;
+    send_band(ctx, fd1, 0, 13, _M_PCPROTO) ;
 
     rslt = nread_wait_msgs(fd2, 3) ;
     if (rslt != 3)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
     }
 
     rslt = user_ioctl(fd2, I_FLUSH, FLUSHRW) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
     }
 
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: band 0 data + M_PCPROTO -- OK\n") ;
+    tprint("flush_test: band 0 data + M_PCPROTO -- OK\n") ;
 
 
     /*
      * I_FLUSHBAND on band 0 flushes "ordinary" messages only.  This
      * will leave an M_PCPROTO at the head of the queue.
      */
-    print("\nflush_test: band 0 data + M_PCPROTO via I_FLUSHBAND\n") ;
-    send_band(fd1, 0, 14, _M_DATA) ;
-    send_band(fd1, 0, 15, _M_DATA) ;
-    send_band(fd1, 0, 16, _M_PCPROTO) ;
+    tprint("flush_test: band 0 data + M_PCPROTO via I_FLUSHBAND\n") ;
+    send_band(ctx, fd1, 0, 14, _M_DATA) ;
+    send_band(ctx, fd1, 0, 15, _M_DATA) ;
+    send_band(ctx, fd1, 0, 16, _M_PCPROTO) ;
 
     rslt = nread_wait_msgs(fd2, 3) ;
     if (rslt != 3)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 3) ;
     }
 
     bi.bi_pri = 0 ;			/* flush band 0 */
@@ -5505,36 +5349,33 @@
     rslt = user_ioctl(fd2, I_FLUSHBAND, &bi) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
     }
 
-    receive_band(fd2, 0, 16, _M_PCPROTO) ;
+    receive_band(ctx, fd2, 0, 16, _M_PCPROTO) ;
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: band 0 data + M_PCPROTO via I_FLUSHBAND -- OK\n") ;
+    tprint("flush_test: band 0 data + M_PCPROTO via I_FLUSHBAND -- OK\n") ;
 
 
     /*
      * Flushing band 1 data should also leave an M_PCPROTO unflushed
      * since it appears as band 0.
      */
-    print("\nflush_test: band 1 data + M_PCPROTO via I_FLUSHBAND\n") ;
-    send_band(fd1, 1, 17, _M_DATA) ;
-    send_band(fd1, 1, 18, _M_DATA) ;
-    send_band(fd1, 0, 19, _M_PCPROTO) ;
-    send_band(fd1, 2, 20, _M_DATA) ;
+    tprint("flush_test: band 1 data + M_PCPROTO via I_FLUSHBAND\n") ;
+    send_band(ctx, fd1, 1, 17, _M_DATA) ;
+    send_band(ctx, fd1, 1, 18, _M_DATA) ;
+    send_band(ctx, fd1, 0, 19, _M_PCPROTO) ;
+    send_band(ctx, fd1, 2, 20, _M_DATA) ;
 
     rslt = nread_wait_msgs(fd2, 4) ;
     if (rslt != 4)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 4) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 4) ;
     }
 
     bi.bi_pri = 1 ;			/* flush band 1 */
@@ -5543,26 +5384,24 @@
     rslt = user_ioctl(fd2, I_FLUSHBAND, &bi) ;
     if (rslt < 0)
     {
-	print("loop.2: I_FLUSH: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("loop.2: I_FLUSH: %s\n", STRERROR(-rslt)) ;
     }
 
-    receive_band(fd2, 0, 19, _M_PCPROTO) ;
-    receive_band(fd2, 2, 20, _M_DATA) ;
+    receive_band(ctx, fd2, 0, 19, _M_PCPROTO) ;
+    receive_band(ctx, fd2, 2, 20, _M_DATA) ;
     rslt = flush_wait(fd2) ;
     if (rslt != 0)
     {
-	print("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
-	xit() ;
+	FAIL("loop.2: I_NREAD returned %d, expected %d\n", rslt, 0) ;
     }
 
-    print("flush_test: band 0 data + M_PCPROTO via I_FLUSHBAND -- OK\n") ;
+    tprint("flush_test: band 0 data + M_PCPROTO via I_FLUSHBAND -- OK\n") ;
 
 
     user_close(fd1);
     user_close(fd2);
 
-    print("End of queue flushing test\n") ;
+    tprint("End of queue flushing test\n") ;
 }
 
 /************************************************************************
@@ -5573,20 +5412,19 @@
 * runs the test from kernel mode.					*
 *									*
 ************************************************************************/
-void pullupmsg_test(void)
+void pullupmsg_test(struct test_context *ctx)
 {
     int		rslt ;
 
-    print("Begin pullupmsg test\n") ;
+    tprint("Begin pullupmsg test\n") ;
     rslt = user_open(PUTST, O_RDWR, 0) ;
     if (rslt < 0)
     {
-	print("putst: %s\n", strerror(-rslt)) ;
-	xit() ;
+	FAIL("putst: %s\n", STRERROR(-rslt)) ;
     }
 
     user_close(rslt) ;
-    print("pullupmsg test OK\n") ;
+    tprint("pullupmsg test OK\n") ;
 }
 
 /************************************************************************
@@ -5895,7 +5733,7 @@
 }
 
 
-void mt_open_test(void)
+void mt_open_test(struct test_context *ctx)
 {
     int		rslt ;
     pthread_t	thr1 ;
@@ -5940,112 +5778,86 @@
     system("rmmod streams-mtdrv") ;
 }
 #endif
+/************************************************************************
+*                              test list                                *
+************************************************************************/
+
+struct test_spec {
+	char *name;
+	char *desc;
+	void (*func) (struct test_context *ctx);
+	int flags;
+};
+
+#define TST_DO_TEST	1
+#define TST_PRINT_MEM	2
+#define TST_MT_SAFE	4
+
+struct test_spec test_list[] = {
+	{ "open", "open/close test", open_close_test, TST_PRINT_MEM|TST_MT_SAFE },
+	{ "ioctl", "ioctl test", ioctl_test, TST_PRINT_MEM },
+	{ "rdopt", "read options test", rdopt_test, TST_PRINT_MEM },
+	{ "write", "write test", write_test, TST_PRINT_MEM },
+	{ "timer", "close timer test", close_timer_test, TST_PRINT_MEM },
+	{ "putmsg", "putmsg test", putmsg_test, TST_PRINT_MEM|TST_MT_SAFE },
+	{ "poll", "poll test", poll_test, TST_PRINT_MEM|TST_MT_SAFE },
+	{ "mux", "multiplexor test", mux_test, TST_PRINT_MEM },
+	{ "clone", "clone driver test", clone_test , 0}, /* crash */
+	{ "bufcall", "bufcall test", bufcall_test, TST_MT_SAFE },
+	{ "sad", "sad driver test", sad_test, 0 },
+	{ "fifo", "FIFO/pipe test", fifo_test, TST_MT_SAFE },
+	{ "passfd", "FD passing test", passfd_test, TST_MT_SAFE },
+	{ "band", "Q-band test", band_test, TST_MT_SAFE },
+	{ "flush", "flushing test", flush_test, TST_MT_SAFE },
+	{ "autopush", "autopush test", autopush_test , 0 },
+	{ "mt_open", "MT open test", mt_open_test , 0},
+#ifdef DIRECT_USER
+	{ "pullupmsg", "pullupmsg", pullupmsg_test, TST_PRINT_MEM },
+#endif
+	{ NULL, NULL, NULL, 0 }
+};
 
 /************************************************************************
 *                              main                                     *
 ************************************************************************/
-void test(void)
+void *test(void *thread_ctx)
 {
     extern long		lis_mem_alloced ;		/* from port.c */
+    struct test_spec *tst;
+    struct test_context *ctx = (struct test_context *)thread_ctx;
 
-    print("\nBegin STREAMS test\n\n") ;
+    tprint("Begin STREAMS test #%lu\n\n", ctx->id) ;
 
     set_debug_mask(ALL_DEBUG_BITS) ;
 
 #ifdef DIRECT_USER
-    print("\n\n\nDirectory listing:\n\n") ;
+    tprint("Directory listing:\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
 #endif
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-
-    open_close_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("open/close test") ;
-
-#ifndef DIRECT_USER
-    mt_open_test();
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("mt open test") ;
-#endif
-
-    ioctl_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("ioctl test") ;
-
-    rdopt_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("read options test") ;
+    tprint("Memory allocated = %ld\n", lis_mem_alloced) ;
 
-    write_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("write test") ;
-
-    close_timer_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("close timer test") ;
-
-    putmsg_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("putmsg test") ;
-
-    poll_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("poll test") ;
-
-    mux_test() ;
-    print_mem() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("multiplexor test") ;
-
-    clone_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("clone driver test") ;
-
-    bufcall_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("bufcall test") ;
-
-    autopush_test() ;
-    wait_for_logfile("sad driver test") ;
-
-    sad_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("sad driver test") ;
-
-    fifo_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced) ;
-    wait_for_logfile("FIFO/pipe test") ;
-
-    passfd_test();
-    print("Memory allocated = %ld\n", lis_mem_alloced);
-    wait_for_logfile("FD passing test");
-
-    band_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced);
-    wait_for_logfile("Q-band test");
-
-    flush_test() ;
-    print("Memory allocated = %ld\n", lis_mem_alloced);
-    wait_for_logfile("Flushing test");
+    for(tst = &(test_list[0]) ; tst->name != NULL; tst++) {
+	    if((!all_tests) && (!(tst->flags & TST_DO_TEST)))
+		    continue;
+	    if((nthreads > 1) && (!(tst->flags & TST_MT_SAFE)))
+		    continue;
+	    tprint("*** BEGIN %s:%lu TEST ***\n", tst->name, ctx->id);
+	    tst->func(ctx);
+	    if(tst->flags & TST_PRINT_MEM)
+		    print_mem();
+	    tprint("Memory allocated = %ld\n", lis_mem_alloced);
+	    wait_for_logfile(tst->desc);
+	    tprint("*** END %s:%lu TEST ***\n", tst->name, ctx->id);
+    }
 
 #ifdef DIRECT_USER
-    pullupmsg_test() ;
-    print_mem() ;		/* looking for leaked mblks, etc */
-    wait_for_logfile("pullupmsg test");
-    print("\n\n\nDirectory listing:\n\n") ;
+    tprint("Directory listing:\n\n") ;
     user_print_dir(NULL, USR_PRNT_INODE) ;
 #endif
 
     set_debug_mask(0L) ;
-    print("\n\n*** strtst completed successfully ***\n") ;
+    tprint("*** strtst #%lu completed successfully ***\n", ctx->id) ;
+    return NULL; /* ignored */
 }
 
 /************************************************************************
@@ -6063,17 +5875,108 @@
 } /* tst_print_trace  */
 
 
+#ifndef DIRECT_USER	
+/************************************************************************
+*                         parse_args                                    *
+*************************************************************************
+*									*
+* Parse command-line arguments: selects tests to be run, number of	*
+* threads, debug mask.							*
+*									*
+************************************************************************/
+void usage(char *argv0)
+{
+	struct test_spec *tst;
+
+	print("Usage: %s <options> [tests]\n"
+	      "\t-h		display this help screen\n"
+#ifdef USE_PTHREADS
+	      "\t-n <num>	set number of concurrent threads\n"
+#endif
+	      "\t-m <mask>	set kernel debug mask\n"
+	      "\t-k		output to /dev/printk\n"
+	      "Available tests:\n", argv0);
+	for(tst = &(test_list[0]); tst->name != NULL; tst++)
+		print("\t%s\t%s%s\n", tst->name, tst->desc,
+		      (tst->flags & TST_MT_SAFE ? " [MT]" : ""));
+	exit(1);
+}
+
+void parse_args(int argc, char **argv)
+{
+	int c;
+	struct test_spec *tst;
+	char *ptr;
+
+	while((c = getopt(argc, argv, "hn:m:k")) != -1) {
+		switch((char)c) {
+		case 'h':
+			usage(argv[0]);
+			break;
+#ifdef USE_PTHREADS
+		case 'n':
+			/* number of threads */
+			nthreads = strtoul(optarg, &ptr, 0);
+			if((*ptr != '\0') || (nthreads <= 0))
+				usage(argv[0]);
+			break;
+#endif
+		case 'm':
+			/* kernel debug mask */
+			debug_mask = strtoul(optarg, &ptr, 0);
+			if(*ptr != '\0')
+				usage(argv[0]);
+			break;
+		case 'k':
+			/* send output to printk device */
+			printk_fd = user_open(NPRINTK, O_RDWR, 0) ;
+			if (printk_fd < 0)
+			{
+				FAIL( NPRINTK ": %s\n", STRERROR(-printk_fd)) ;
+			}
+			break;
+		default:
+			usage(argv[0]);
+		}
+	}
+	if(optind >= argc)
+		return;
+	all_tests = 0;
+	for(c = optind ; c < argc; c++) {
+		for(tst = test_list ; tst->name != NULL; tst++) {
+			if(!strcmp(tst->name, argv[c]))
+				break;
+		}
+		if(tst->name == NULL)
+			usage(argv[0]);
+		if((nthreads > 1) && !(tst->flags & TST_MT_SAFE))
+			usage(argv[0]);
+		tst->flags |= TST_DO_TEST;
+	}
+}
+#else /* DIRECT_USER */
+#define parse_args(argc,argv) do { } while (0)
+#endif
+
+
 /************************************************************************
 *                           main                                        *
 ************************************************************************/
+#ifdef DIRECT_USER
 int main(void)
+#else
+int main(int argc, char **argv)
+#endif
 {
     extern long		lis_mem_alloced ;		/* from port.c */
+    struct test_context *ctx;
 
 #ifdef DIRECT_USER
     lis_print_trace = tst_print_trace ;
 #endif
 
+    parse_args(argc, argv);
+
     register_drivers() ;
     print("Memory allocated = %ld\n", lis_mem_alloced) ;
 
@@ -6082,17 +5985,34 @@
     print("Memory allocated = %ld\n", lis_mem_alloced) ;
 #endif
 
-#ifndef DIRECT_USER
-    printk_fd = user_open(NPRINTK, O_RDWR, 0) ;
-    if (printk_fd < 0)
-    {
-	printf( NPRINTK ": %s\n", strerror(-printk_fd)) ;
-	xit() ;
+    ctx_list = malloc(nthreads*sizeof(*ctx_list));
+    if(ctx_list == NULL) {
+	    FAIL("malloc: %s\n", STRERROR(errno));
+    }
+#ifdef USE_PTHREADS
+    for(ctx = ctx_list ; ctx < ctx_list+nthreads ; ctx++) {
+	    int ret;
+	    init_ctx(ctx);
+	    ret = pthread_create(&ctx->th, NULL, test, (void*) ctx);
+	    if(ret) {
+		    FAIL("pthread_create: %s\n", STRERROR(errno));
+	    }
+    }
+    for(ctx = ctx_list ; ctx < ctx_list+nthreads ; ctx++) {
+	    int ret;
+	    /* thread retval ignored, assuming that any failing test calls exit() */
+	    ret = pthread_join(ctx->th, NULL);
+ 	    if(ret) {
+		    FAIL("pthread_join: %s\n", STRERROR(errno));
+	    }
     }
+#else
+    ctx = ctx_list;
+    init_ctx(ctx);
+    test(ctx);
 #endif
-
-    test() ;
-/*     test() ; */
+    free(ctx_list);
+    print("*** TESTS PASSED ***\n");
 
     return 0;
 }
