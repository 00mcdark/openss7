# vim: ft=automake
# =============================================================================
# 
# @(#) $RCSfile: rpm.am,v $ $Name:  $($Revision: 0.9.2.54 $) $Date: 2005/02/20 06:55:38 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2005/02/20 06:55:38 $ by $Author: brian $
#
# =============================================================================

if BUILD_RPMS

#
#   These are some rules that I use for generating source and binary RPMs
#   using automake.  I need to package releases using RPM.  The following
#   rules accomplish that for most packages.
#

RPMFLAGS  = -vv
SRPMFLAGS = $(RPMFLAGS) --nodeps

RPMICONS = \
	--define "_gif_icon $(PACKAGE_TARNAME).gif" \
	--define "_xpm_icon $(PACKAGE_TARNAME).xpm"

RPMOPTS = \
	--define "__source_payload w9.bzdio" \
	--define "__binary_payload w9.bzdio" \
	--define "_topdir $(PACKAGE_RPMTOPDIR)" \
	$(PACKAGE_RPMOPTIONS)

RPMBOPTS = \
	--define "extrarelease $(PACKAGE_RPMEXTRA)" \
	--define "distribution $(PACKAGE_RPMDIST) (contrib)" \
	--define "_gif $(PACKAGE_TARNAME).gif" \
	--define "_xpm $(PACKAGE_TARNAME).xpm" \
	$(RPMOPTS)


RPMSOPTS = \
	--define "_signature gpg" \
	--define "_gpg_path $(GNUPGHOME)" \
	--define "_gpg_name $(GNUPGUSER)" \
	--define "_gpgbin $(GPG)" \
	$(RPMOPTS)

RPMXOPTS =

RPMTARGET = $(target)

rpm_topdir	= $(PACKAGE_RPMTOPDIR)
rpm_sourcedir	= $(rpm_topdir)/SOURCES
rpm_builddir	= $(rpm_topdir)/BUILD
rpm_rpmdir	= $(rpm_topdir)/RPMS
rpm_srcrpmdir	= $(rpm_topdir)/SRPMS
rpm_specdir	= $(rpm_topdir)/SPECS

#
#   This builds an SRPM for the current target.
#
#   Note: the icons need to be in the SOURCES directory, but the spec file needs to be in the
#   current directory.
#   
#   We use the -bs flag to rpmbuild instead of the -ts flag because our tarball could contain
#   multiple spec files and rpmbuild otherwise uses the first one in the tar listing.  We should
#   probably make sure that the tar has the required spec file listed first because then one can use
#   the -ts command on the resulting spec file.  -bs also leaves the sources in place, which is what
#   we want for distribution.
#
$(rpm_sourcedir)/$(PACKAGE)-$(VERSION).tar.bz2:
	@f=`echo "$@" | sed -e 's|$(rpm_sourcedir)|.|'` ; \
	if test ! -e "$@" -a ! -e "$$f" ; then \
		$(MAKE) $(AM_MAKEFLAGS) $$f ; \
	fi ; \
	if test ! -e "$@" -o "$$f" -nt "$@" ; then \
		if test ! -d $(rpm_sourcedir) ; then \
			echo " $(mkinstalldirs) $(rpm_sourcedir)" ; \
			$(mkinstalldirs) $(rpm_sourcedir) ; \
		fi ; \
		echo " cp -f $$f $@" ; \
		cp -f $$f $@ ; \
	fi

$(rpm_sourcedir)/$(PACKAGE_TARNAME).gif \
$(rpm_sourcedir)/$(PACKAGE_TARNAME).xpm:
	@f=`echo "$@" | sed -e 's|$(rpm_sourcedir)|$(srcdir)|'` ; \
	if test ! -e "$@" -a ! -e "$$f" ; then \
		$(MAKE) $(AM_MAKEFLAGS) $$f ; \
	fi ; \
	if test ! -e "$@" ; then \
		if test ! -d $(rpm_sourcedir) ; then \
			echo " $(mkinstalldirs) $(rpm_sourcedir)" ; \
			$(mkinstalldirs) $(rpm_sourcedir) ; \
		fi ; \
		echo " cp -f $$f $@" ; \
		cp -f $$f $@ ; \
	fi

$(rpm_specdir)/$(PACKAGE_TARNAME).spec:
	@f=`echo "$@" | sed -e 's|$(rpm_specdir)|.|'` ; \
	if test ! -e "$@" -a ! -e "$$f" ; then \
		$(MAKE) $(AM_MAKEFLAGS) $$f ; \
	fi ; \
	if test ! -e "$@" ; then \
		if test ! -d $(rpm_specdir) ; then \
			echo " $(mkinstalldirs) $(rpm_specdir)" ; \
			$(mkinstalldirs) $(rpm_specdir) ; \
		fi ; \
		echo " cp -f $$f $@" ; \
		cp -f $$f $@ ; \
	fi

$(rpm_srcrpmdir)/$(PACKAGE)-$(VERSION).src.rpm: \
	$(rpm_specdir)/$(PACKAGE_TARNAME).spec \
	$(rpm_sourcedir)/$(PACKAGE)-$(VERSION).tar.bz2 \
	$(rpm_sourcedir)/$(PACKAGE_TARNAME).gif \
	$(rpm_sourcedir)/$(PACKAGE_TARNAME).xpm
	@for d in BUILD BUILD/$(PACKAGE_RPMEXTRA) RPMS SOURCES SPECS SRPMS ; do \
		if test ! -d $(rpm_topdir)/$$d ; then \
			echo " $(mkinstalldirs) $(rpm_topdir)/$$d" ; \
			$(mkinstalldirs) $(rpm_topdir)/$$d ; \
		fi ; \
	done
	$(RPMBUILD) -bs $(SRPMFLAGS) $(AM_SRPMFLAGS) $(RPMOPTS) $(RPMICONS) --target $(target) -- $<

srpm: $(rpm_srcrpmdir)/$(PACKAGE)-$(VERSION).src.rpm

RELEASE += srpm

#
#   This is the type of thing that needs to be included in the master makefile
#   to build rpms for the current target, we also build any defined
#   AM_RPMTARGETS
#
one-rpm: \
	$(rpm_specdir)/$(PACKAGE_TARNAME).spec \
	$(rpm_sourcedir)/$(PACKAGE)-$(VERSION).tar.bz2 \
	$(rpm_sourcedir)/$(PACKAGE_TARNAME).gif \
	$(rpm_sourcedir)/$(PACKAGE_TARNAME).xpm
	@for d in BUILD BUILD/$(PACKAGE_RPMEXTRA) RPMS SOURCES SPECS SRPMS ; do \
		if test ! -d $(rpm_topdir)/$$d ; then \
			echo " $(mkinstalldirs) $(rpm_topdir)/$$d" ; \
			$(mkinstalldirs) $(rpm_topdir)/$$d ; \
		fi ; \
	done
	$(RPMBUILD) -bb $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) $(RPMXOPTS) $(AM_RPMBOPTS) $(AM_RPMFLAGS) --target $(RPMTARGET) -- $<

lis-rpm:
	$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS)' kversion="$(kversion)" RPMTARGET="$(RPMTARGET)" AM_RPMBOPTS='$(AM_RPMBOPTS) --define "_with_lis --with-lis"' one-rpm

lfs-rpm:
	$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS)' kversion="$(kversion)" RPMTARGET="$(RPMTARGET)" AM_RPMBOPTS='$(AM_RPMBOPTS) --define "_with_lfs --with-lfs"' one-rpm

AM_RPMSMAKETARGETS =

if WITH_LIS
AM_RPMSMAKETARGETS += lis-rpm
endif
if WITH_LFS
AM_RPMSMAKETARGETS += lfs-rpm
endif
if WITH_LIS
else
if WITH_LFS
else
AM_RPMSMAKETARGETS += one-rpm
endif
endif

all-rpms: ALL_EXPORT_OPTS = RPMXOPTS='$(RPMXOPTS)'

rpms: $(AM_RPMSMAKETARGETS)

sign srpm-sign: $(rpm_srcrpmdir)/$(PACKAGE)-$(VERSION).src.rpm
	@if ! $(RPM) -pipe  -- $< 2>&1 | grep -q ' gpg OK' >/dev/null 2>&1 ; then \
		echo "$(RPM) --addsign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $<" ; \
		$(RPM) --addsign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $< || : ; \
	fi

RELEASE_SIGN += srpm-sign

#
#   Note that older rpms (particularly those used by SuSE) are too stupid to handle the --with and
#   --without popt syntax, so we have to expand them to --defines.
#

rebuild all-rebuild:
	@kernels="`( find $(DESTDIR)/lib/modules -type d -name '2\.4\.*' | sort -r ) 2>/dev/null`" ; \
	targets="$(RPMTARGET) $(AM_RPMTARGETS)" ; \
	rpmtarg=`echo $@ | sed -e 's|rebuild|rpms|'` ; \
	for t in $$targets ;  do \
		for k in $$kernels ; do \
			k=`basename $$k` ; \
			if test -f $(DESTDIR)/lib/modules/$$k/build/Makefile ; then \
				echo "$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS) --define \"_without_tools --without-tools\"' kversion=\"$$k\" RPMTARGET=\"$$t\" $$rpmtarg" ; \
				$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS) --define "_without_tools --without-tools"' kversion="$$k" RPMTARGET="$$t" $$rpmtarg || :; \
			fi ; \
		done ; \
		echo "$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS) --define \"_without_modules --without-modules\"' kversion=\"$$k\" RPMTARGET=\"$$t\" $$rpmtarg" ; \
		$(MAKE) $(AM_MAKEFLAGS) RPMXOPTS='$(RPMXOPTS) --define "_without_modules --without-modules"' kversion="$$k" RPMTARGET="$$t" $$rpmtarg || :; \
	done

resign: sign
	@rpms="`find $(rpm_rpmdir) -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
	if test -z "$$rpms" ; then \
		$(MAKE) $(AM_MAKEFLAGS) rebuild ; \
		rpms="`find $(rpm_rpmdir) -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
		if test -z "$$rpms" ; then \
			exit 1 ; \
		fi ; \
	fi ; \
	unsigned_rpms= ; \
	for rpm in $$rpms ; do \
		if ! $(RPM) -K -- $$rpm 2>&1 | grep -q ' gpg OK' >/dev/null 2>&1 ; then \
			unsigned_rpms="$$unsigned_rpms $$rpm" ; \
		else \
			echo "D: existing gpg sig in $$rpm" ; \
		fi ; \
	done ; \
	if test :$$unsigned_rpms != : ; then \
		echo "$(RPM) --addsign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $$unsigned_rpms" ; \
		$(RPM) --addsign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $$unsigned_rpms ; \
	fi

distclean-rpm:
	rm -rf RPMS BUILD SRPMS SOURCES SPECS

maintainer-clean-rpm:
	@rpms="`find $(rpm_rpmdir) -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
	for f in $$rpms ; do \
		echo "rm -f -- $$f" ; \
		rm -f -- $$f ; \
	done
	rm -f -- $(rpm_srcrpmdir)/$(PACKAGE)-$(VERSION).src.rpm
	rm -f -- $(rpm_builddir)/$(PACKAGE_RPMEXTRA)/*config.cache
	rm -f -- $(rpm_builddir)/$(PACKAGE_RPMEXTRA)/*config.site
	rm -f -- $(rpm_builddir)/$(PACKAGE_RPMEXTRA)/$(PACKAGE_TARNAME)
	@if test -d "$(rpm_builddir)/$(PACKAGE_RPMEXTRA)" ; then \
		echo "$(RPMBUILD) --nodeps --clean --rmsource --rmspec $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) $(RPMXOPTS) $(AM_RPMBOPTS) $(AM_RPMFLAGS) --target $(RPMTARGET) -- $(rpm_specdir)/$(PACKAGE_TARNAME).spec || :" ; \
		$(RPMBUILD) --nodeps --clean --rmsource --rmspec $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) $(RPMXOPTS) $(AM_RPMBOPTS) $(AM_RPMFLAGS) --target $(RPMTARGET) -- $(rpm_specdir)/$(PACKAGE_TARNAME).spec || : ; \
	else \
		echo "$(RPMBUILD) --nodeps --rmsource --rmspec $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) $(RPMXOPTS) $(AM_RPMBOPTS) $(AM_RPMFLAGS) --target $(RPMTARGET) -- $(rpm_specdir)/$(PACKAGE_TARNAME).spec || :" ; \
		$(RPMBUILD) --nodeps --rmsource --rmspec $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) $(RPMXOPTS) $(AM_RPMBOPTS) $(AM_RPMFLAGS) --target $(RPMTARGET) -- $(rpm_specdir)/$(PACKAGE_TARNAME).spec || : ; \
	fi

DISTCLEAN_LOCAL += distclean-rpm

MAINTAINER_CLEAN_LOCAL += maintainer-clean-rpm

endif

EXTRA_DIST	+= \
		$(PACKAGE_TARNAME).spec \
		$(PACKAGE_TARNAME).gif \
		$(PACKAGE_TARNAME).xpm \
		.pkgepoch \
		.pkgrelease

ALL_RECURSIVE_TARGETS += all-srpm all-rpms all-sign all-resign

.PHONY: srpm rpms one-rpm lis-rpm lfs-rpm sign srpm-sign rebuild resign all-srpm all-rpms all-sign \
	all-rebuild all-resign distclean-rpm maintainer-clean-rpm

# vim: ft=automake
