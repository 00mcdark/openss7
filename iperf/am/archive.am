## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
## =============================================================================
## 
# @(#) $RCSfile: archive.am,v $ $Name: OpenSS7-0_9_2 $($Revision: 0.9.2.36 $) $Date: 2008-09-20 11:17:13 $
##
## -----------------------------------------------------------------------------
##
## Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
## Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
##
## All Rights Reserved.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU Affero General Public License as published by the Free
## Software Foundation; version 3 of the License.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
## details.
##
## You should have received a copy of the GNU Affero General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>, or
## write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
## 02139, USA.
##
## -----------------------------------------------------------------------------
##
## U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
## behalf of the U.S. Government ("Government"), the following provisions apply
## to you.  If the Software is supplied by the Department of Defense ("DoD"), it
## is classified as "Commercial Computer Software" under paragraph 252.227-7014
## of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
## successor regulations) and the Government is acquiring only the license rights
## granted herein (the license rights customarily provided to non-Government
## users).  If the Software is supplied to any unit or agency of the Government
## other than DoD, it is classified as "Restricted Computer Software" and the
## Government's rights in the Software are defined in paragraph 52.227-19 of the
## Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
## the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
## (or any successor regulations).
##
## -----------------------------------------------------------------------------
##
## Commercial licensing and support of this software is available from OpenSS7
## Corporation at a fee.  See http://www.openss7.com/
##
## -----------------------------------------------------------------------------
##
## Last Modified $Date: 2008-09-20 11:17:13 $ by $Author: brian $
##
## =============================================================================

#!
#! Release Archive Targets:
#! ------------------------
#!
#! The following targets are used to generate and clean distribution archive and
#! signature files.  Whereas the `dist' target affects archives in the top build
#! directory, the release-archive targets affects archives in the package
#! distribution directory, `@PACKAGE_DISTDIR@'.
#!
#! You can change the directory to which packages are distributed by using the
#! --with-pkg-distdir=DIR option to 'configure'.  The default directory is the
#! top build directory `@abs_builddir@'.
#!
##
# This one rule is always included.  This is because even though debian/rules.in is set as
# executable, config.status does not make an executable debian/rules.  This is a sad problem with
# autoconf.  However, we use this dist-hook to check the situtation just before the distribution is
# archived.  We always need this rule because the archive could be used later to build debian
# packages.
##
deb-rules-check:
	@if test -e $(PACKAGE)-$(VERSION)/debian/rules -a ! -x $(PACKAGE)-$(VERSION)/debian/rules; then \
		$(ECHO) "chmod +x $(PACKAGE)-$(VERSION)/debian/rules"; \
		chmod +x $(PACKAGE)-$(VERSION)/debian/rules; \
	fi

DIST_HOOK		+= deb-rules-check

if MAINTAINER_MODE

##
## For speed when building releases, we are not going to include the archive packaging rules when we
## are not in maintainer mode.  There are, however, a couple of rules at the beginning of this
## fragment that we do include, regardless of maintainer mode.
##

if WITH_LZMA
archive_files	= \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.gz \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2 \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.lzma
archive_signs	= \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.gz.asc \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2.asc \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.lzma.asc

$(distdir).tar.lzma:: $(CONFIG_CLEAN_FILES) Makefile $(DISTFILES)
	@test ":$(FORCE)" != :force -a -f "$@" || $(MAKE) $(AM_MAKEFLAGS) dist-lzma
else
archive_files	= \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.gz \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2
archive_signs	= \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.gz.asc \
		$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2.asc
endif

##
# creates the package directory
##
RELEASE_DIRECTORIES	+= $(PACKAGE_DISTDIR) $(tardir)

##
# Note that sometimes the package distribution directory is the current build directory.  This is
# true when we are doing local release tests on a package.  In that case, this rule will not run.
# Otherwise, we will not move files into the release directory if they already exist there unless
# force has been specified or a force release target has been invoked.
##
$(archive_files)::
	@f=`$(ECHO) "$@" | sed -e 's|^.*/||'`; \
	test "$@" -ef "$$f" && exit 0; \
	test ":$(FORCE)" != :force -a \( -f "$@" -o -f "$$f" \) || { \
		$(ECHO) "$(MAKE) $(AM_MAKEFLAGS) -- $$f"; \
		$(MAKE) $(AM_MAKEFLAGS) -- $$f; }; \
	test "$@" -ef "$$f" && exit 0; \
	test ":$(FORCE)" != :force -a \( -f "$@" -a "$@" -nt "$$f" \) || { \
		$(ECHO) "cp -f -- $$f $@"; \
		cp -f -- $$f $@; }

##
# How to make an archive if we ask for one.  We do not make archives on demand if they already
# exist.
##
$(DIST_ARCHIVES):: $(CONFIG_CLEAN_FILES) Makefile $(DISTFILES)
	@test ":$(FORCE)" != :force -a -f "$@" || $(MAKE) $(AM_MAKEFLAGS) dist

#! release-archives:
#!     This target creates the distribution archive files if they have not
#!     already been created.  This not only runs the `dist' target, but also
#!     copies the files to the distribution directory, which in this case is
#!     @tardir@.
#!
#!     The files generated are named:
#!         @PACKAGE@-@VERSION@.tar.gz and @PACKAGE@-@VERSION@.tar.bz2
#!
#!     You can change this distribution directory with the --with-pkg-distdir
#!     option to 'configure'.  See './configure --help' for more details on
#!     options.
#!
##
# Triggers make dist and signing if necessary.
##
release-archives: $(archive_files)
##
# This is a suffix rule for signing anything.  First we check if the signature file exists and has
# a correct signature.  If it does, we merely touch the signature file.  Otherwise we use gpg to
# generate a detached signature.  Redirect output to avoid gpg problems with existing files.  We
# pipe in an environment variable for automated builds.
##
$(tardir)/$(PACKAGE)-$(VERSION).tar.gz.asc:: \
$(tardir)/$(PACKAGE)-$(VERSION).tar.gz
	@if test ! -f $@ || ! $(GPG) --verify -- $@ >/dev/null 2>&1; then \
		user="$(GNUPGUSER)"; user="$${user:+ -u }$$user"; \
		home="$(GNUPGHOME)"; home="$${home:+ --homedir }$$home"; \
		pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
		pipe="$(GNUPGPASS)"; pipe="$${pipe:+$(ECHO) "$$pipe" |}"; \
		$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
		eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
	else touch "$@"; fi

$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2.asc:: \
$(tardir)/$(PACKAGE)-$(VERSION).tar.bz2
	@if test ! -f $@ || ! $(GPG) --verify -- $@ >/dev/null 2>&1; then \
		user="$(GNUPGUSER)"; user="$${user:+ -u }$$user"; \
		home="$(GNUPGHOME)"; home="$${home:+ --homedir }$$home"; \
		pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
		pipe="$(GNUPGPASS)"; pipe="$${pipe:+$(ECHO) "$$pipe" |}"; \
		$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
		eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
	else touch "$@"; fi

if WITH_LZMA
$(tardir)/$(PACKAGE)-$(VERSION).tar.lzma.asc:: \
$(tardir)/$(PACKAGE)-$(VERSION).tar.lzma
	@if test ! -f $@ || ! $(GPG) --verify -- $@ >/dev/null 2>&1; then \
		user="$(GNUPGUSER)"; user="$${user:+ -u }$$user"; \
		home="$(GNUPGHOME)"; home="$${home:+ --homedir }$$home"; \
		pass="$(GNUPGPASS)"; pass="$${pass:+ --batch }"; \
		pipe="$(GNUPGPASS)"; pipe="$${pipe:+$(ECHO) "$$pipe" |}"; \
		$(ECHO) "$(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
		eval "$$pipe $(GPG) -ba --passphrase-fd 0$$user$$home$$pass -o- -- $< > $@ 2>/dev/null"; \
	else touch "$@"; fi
endif

#! release-sign-archives:
#!     This target is like `release-archives', except that it also signs the
#!     archives using a GPG detached signature.  You will be prompted for a
#!     password unless you pass the GNUPGPASS variable to make.  For automated
#!     or unattended builds, pass the GNUPGPASS variable like so:
#!
#!         make GNUPGPASS=mypasswd release-sign-archives
#!
#!     Signature files will be named:
#!         @PACKAGE@-@VERSION@.tar.gz.asc and @PACKAGE@-@VERSION@.tar.bz2.asc
#!         @PACKAGE@-@VERSION@.tar.lzma.asc
#!
#!     These files will be moved to the package distribution directory
#!     @tardir@ with the plaintext archives.
#!
release-sign-archives: $(archive_signs)

RELEASE			+= all-release-archives
RELEASE_SIGN		+= all-release-sign-archives
RELEASE_DIRECTORIES	+= 

distclean-archives:
	$(am__remove_distdir)

DISTCLEAN_LOCAL		+= distclean-archives

DISTCLEANFILES		+= $(DIST_ARCHIVES)
if WITH_LZMA
DISTCLEANFILES		+= $(distdir).tar.lzma
endif

#! release-clean-archives:
#!     This target will clean the release archives and signature files from the
#!     package distribution directory @tardir@.
#!
release-clean-archives: distclean-archives

RELEASE_CLEAN_LOCAL	+= release-clean-archives

RELEASECLEANFILES	+= $(DIST_ARCHIVES) \
			   $(archive_files) \
			   $(archive_signs)
if WITH_LZMA
RELEASECLEANFILES	+= $(distdir).tar.lzma
endif

ALL_RECURSIVE_TARGETS	+= all-dist all-release-archives all-release-sign-archives

if BUILD_REPO_TAR

##
## The following builds tar repositories.
##

tar_files		= $(tardir)/MD5SUMS \
			  $(tardir)/MD5SUMS.meta \
			  $(tardir)/SHA1SUMS \
			  $(tardir)/SHA1SUMS.meta \
			  $(tardir)/ls-LR.gz \
			  $(tardir)/INDEX.gz \
			  $(tardir)/ARCHIVE.gz

#!
#! Archive Build Targets:
#! ----------------------
#!
#! On all systems, or systems supporting packaging tools and tarball install
#! source repository creation tools, the following targets are used to manage
#! tarball install source repository meta data files.
#!
$(tardir)/MD5SUMS:
	if ( $(MD5SUM) --version ); then \
		( cd $(tardir); find . -maxdepth 1 -type f | \
		  egrep -v '\.((tar\.|shar\.|[t]?)(gz|bz2|[zZ]|lzma)|zip|cpi|cpio|iso|rpm|[ud]?deb)$$' | \
		  sed -e 's,^\./,,' | while read f; do $(MD5SUM) $$f; done ) > $@; \
	else touch $@; fi

$(tardir)/MD5SUMS.meta: $(tardir)/MD5SUMS
	if ( $(SHA1SUM) --version ); then \
		( cd $(tardir); $(MD5SUM) MD5SUMS ) > $@; \
	else touch $@; fi

$(tardir)/SHA1SUMS:
	if ( $(SHA1SUM) --version ); then \
		( cd $(tardir); find . -maxdepth 1 -type f | \
		  egrep -v '\.((tar\.|shar\.|[t]?)(gz|bz2|[zZ]|lzma)|zip|cpi|cpio|iso|rpm|[ud]?deb)$$' | \
		  sed -e 's,^\./,,' | while read f; do $(SHA1SUM) $$f; done ) > $@; \
	else touch $@; fi

$(tardir)/SHA1SUMS.meta: $(tardir)/SHA1SUMS
	if ( $(SHA1SUM) --version ); then \
		( cd $(tardir); $(SHA1SUM) SHA1SUMS ) > $@; \
	else touch $@; fi


$(tardir)/ls-LR.gz:
	@$(ECHO) "(cd $(tardir); ls -LR | gzip -c > $@)"; \
	( cd $(tardir); ls -LR | gzip -c > $@)

$(tardir)/INDEX.gz:
	@$(ECHO) "(cd $(tardir); ls -A1 | gzip -c > $@)"; \
	( cd $(tardir); ls -A1 | gzip -c > $@)

$(tardir)/ARCHIVE.gz:
	( cd $(tardir); find . -type f | sed -e 's,^\./,,' | \
		while read f; do \
			( case "$$f" in \
				(*.tar) \
					$(AMTAR) tvvf $$f || : ;; \
				(*.tgz|*.tar.gz|*.tar.[zZ]) \
					GZIP=$(GZIP_ENV) gunzip -c $$f | $(AMTAR) tvvf - || : ;; \
				(*.tbz2|*.tar.bz2) \
					bunzip -c $$f | $(AMTAR) tvvf - || : ;; \
				(*.tlzma|*.tar.lzma) \
					unlzma -c $$f | $(AMTAR) tvvf - || : ;; \
				(*.t[zZ]|*.tar.[zZ]) \
					uncompress -c $$f | $(AMTAR) tvvf - || : ;; \
				(*.rpm) \
					$(RPM) -qvvl $$f || : ;; \
				(*.deb|*.udeb|*.ddeb) \
					$(DPKG) --contents $$f || : ;; \
				(*.cpi|*.cpio) \
					cpio -itv < $$f || : ;; \
				(*.shar.gz) \
					GZIP=$(GZIP_ENV) gunzip -c $$f | \
					sed '/^[^#]/,$$d;1,/---/d;1,/contains/d;s/^#//;/^[[:space:]]*$$/d' ;; \
				(*.zip) \
					zipinfo $$f ;; \
				(*) \
					;; \
			esac ) | sed -e "s,^,$$f:\t"; \
		done; \
	) | gzip -c > $@

#! repo-tar:
#!     This target is also invoked by the `repo' and `release' targets.  It
#!     creates (or recreates) the meta-data files for a tarball repository in
#!     the package distribution directory, @tardir@/.
#!     When executed with root privilege, it will also associate a local
#!     installation source with the archives.
#!
repo-tar: $(tar_files)

#! repo-sign-tar:
#!     This target is also invoked by the `repo-sign' and `release-sign'
#!     targets.  This target is not used to signing tarballs themselves, but for
#!     signing the metadata files on the archive.  If the meta-data files do not
#!     exist to be signed, the `repo-tar' target will be invoked automatically.
#!
repo-sign-tar:

#! repo-clean-tar:
#!     This target is also invoked by the `repo-clean' and `release-clean'
#!     targets.  Cleans the meta-data files for a tarball repository from the
#!     package distribution directory, @tardir@/.
#!
repo-clean-tar:

REPO			+= repo-tar
REPO_SIGN		+= repo-sign-tar
REPO_CLEAN		+= repo-clean-tar
REPOCLEANFILES		+= $(tar_files)

MY_PHONY		+= repo-tar repo-sign-tar repo-clean-tar

RELEASE			+= repo-tar
RELEASE_SIGN		+= repo-sign-tar
RELEASE_CLEAN_LOCAL	+= repo-clean-tar
RELEASECLEANFILES	+= $(tar_files)

endif
## BUILD_REPO_TAR

## MAINTAINER_MODE
endif

EXTRA_DIST		+= .pkgrelease \
			   .pkgepoch

## =============================================================================
##
## $Log: archive.am,v $
## Revision 0.9.2.36  2008-09-20 11:17:13  brian
## - build system updates
##
## Revision 0.9.2.35  2008/09/18 09:32:38  brian
## - do not duplicate entries
##
## Revision 0.9.2.34  2008-09-17 12:06:02  brian
## - tarballs directory and LZMA suppression
##
## Revision 0.9.2.33  2008-08-03 08:03:59  brian
## - how to clean lzma archives
##
## Revision 0.9.2.32  2008/08/03 07:59:21  brian
## - how to make lzma archives
##
## Revision 0.9.2.31  2008-08-02 05:25:08  brian
## - typos
##
## Revision 0.9.2.30  2008-08-02 05:06:15  brian
## - make LZMA compression detected
##
## Revision 0.9.2.29  2008-04-28 09:30:19  brian
## - updated headers for release
##
## Revision 0.9.2.28  2007/12/15 20:19:27  brian
## - updates
##
## Revision 0.9.2.27  2007/08/12 17:31:05  brian
## - updated headers
##
## Revision 0.9.2.26  2006/03/06 11:35:14  brian
## - updated headers
##
## =============================================================================
## vim: ft=automake comments=b\:#,b\:##,b\:#\! formatoptions+=tcqlor
