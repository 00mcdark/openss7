#!/bin/sh
# =============================================================================
# 
# @(#) $RCSfile$ $Name$($Revision$) $Date$
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date$ by $Author$
#
# =============================================================================

@mscript_header@

remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
	prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	eval "remove_depmods \$$prereq"
    done
}
remove_depends () {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
	remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
	rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}

kernel_preinst_modules () { :
    local list m b modl_mods line dep
    # This is a fresh install of this version of kernel module.  Make sure that
    # there are no tarball installed kernel modules hanging around for this
    # kernel version.
    list="${modules}" ; modl_mods=
    if [ -d ${kmoduledir} ] ; then
	for m in `find ${kmoduledir} \( -name 'streams*.o' -o -name 'streams*.ko' -o -name 'streams*.o.gz' -o -name 'streams*.ko.gz' \) 2>/dev/null` ; do
		b=`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?||'`
		case " $list " in (*" $b "*) ;; (*) continue ;; esac
		echo "$m"
		modl_mods="$modl_mods${modl_mods:+' '}$m"
	done
	if [ -n "$modl_mods" -a -f ${kmoduledir}/modules.dep ] ; then
	    # First we can build a dependency tree from every dependency
	    # expression that can be found in the modules.dep file.
	    xtrace=`set -o | sed -n 's,xtrace[[:space:]]*on,set +o xtrace,p;t;s,xtrace[[:space:]]*off,set -o xtrace,p;t'`
	    set +x
	    dep= ; while read line ; do
		case $line in
		    (*\\)   line="`echo $line | sed -e 's|\\$||'`"
			    dep="$dep${dep:+' '}$line"; continue ;;
		    (*)     dep="$dep${dep:+' '}$line" ;;
		esac
		[ -n "$dep" ] || continue;
		set dummy $dep
		if [ $# -gt 3 ] ; then
		    t=`echo $2 | sed -e 's|:$||'`
		    target=target_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
		    shift 2
		    for p in $@ ; do
			prereq=prereq_`echo $p | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
			eval "$prereq=\"\$$prereq\${$prereq:+' '}$t\""
			eval "$target=\"\$$target\${$target:+' '}$p\""
		    done
		fi
		dep=
	    done < ${kmoduledir}/modules.dep
	    eval "$xtrace"
	fi
    fi
    # remove conflicting and dependent modules
    if [ -n "$modl_mods" ] ; then
	rm -f -- $modl_mods
	for m in $list ; do
	    prereq=prereq_`echo $m | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	    eval "modl_deps=\"\`remove_depmods \$$prereq\`\""
	    [ -n "$modl_deps" ] || continue
	    rm -f -- $modl_deps
	done
    fi
    :
}

#
# FIXME: there is a way in debian to indicate that a reboot is required (use it)
#
kernel_preinst_running () {
    local fields ind val signal reboot
    if [ ":%{kernel_version}" = ":`uname -r`" ] ; then
	# If we are upgrading and the upgrade is for the running kernel, or we
	# are installing new on the running kernel, we have to worry about
	# previous loaded modules for the old version or a non-rpm version.
	if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
	    if [ -x /usr/sbin/fdetach ] ; then
		/usr/sbin/fdetach -a 2>/dev/null || :
	    fi
	    for signal in TERM KILL ; do
		if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
		    lsof | grep '\<STR\>' | \
		    while read fields ; do
			set dummy $fields
			if [ ":$6" != ':CHR' ] ; then continue; fi
			ind=`expr $# - 1`
			eval "val=\"\${$ind}\""
			if [ ":$val" != ':STR' ] ; then continue; fi
			kill -$signal $3 >/dev/null 2>&1 || :
		    done
		    sleep 5
		fi
	    done
	fi
	lsof | grep '\<STR\>' >/dev/null 2>&1 && reboot='yes'
	remove_depends streams || reboot='yes'
	remove_depends specfs  || reboot='yes'
	[ ":$reboot" != ':yes' ] || echo "Reboot required." >&2
    fi
    :
}

kernel_preinst () { :
    kernel_preinst_modules
    kernel_preinst_running
}


# -----------------------------------------------------------------------------
# Primary functions:
# -----------------------------------------------------------------------------

install_kernel_preinst () { :
    kernel_preinst
    :
}

#
# For reinstall and upgrade, because the package was installed at some
# previous time, there is no need to go flushing out some old non-deb
# install.
#
reinstall_kernel_preinst () { :
    kernel_preinst_running
    :
}

upgrade_kernel_preinst () { :
    kernel_preinst_running
    :
}

abort_upgrade_kernel_preinst () { :
    kernel_preinst_running
    :
}

subpkg=kernel

@mscript_preinst@

# =============================================================================
#
# $Log$
# =============================================================================
# vim: ft=sh sw=4 noet nocin nosi formatoptions+=tcqlorn
