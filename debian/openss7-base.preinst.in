#!/bin/bash
# @configure_input@
# =============================================================================
# 
# @(#) $RCSfile: openss7-base.preinst.in,v $ $Name:  $($Revision: 1.1.2.2 $) $Date: 2011-05-15 12:01:18 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2011-05-15 12:01:18 $ by $Author: brian $
#
# =============================================================================
subpkg=base
@openss7_header@
datarootdir=@datarootdir@
# -----------------------------------------------------------------------------
# Auxiliary functions:
# -----------------------------------------------------------------------------
#
# preinst_preloads() - Go looking for non-deb or legacy preloads and remove them.  This includes all
#   non-kernel-specific preloads techniques: modprobe.preload and modules but not modules-@kversion@
#   files.
#
preinst_preloads () {
    local prel_tmp=${tmppath:-/var/tmp}/modprobe.preload.tmp.$$ \
	  prel_new=${tmppath:-/var/tmp}/modprobe.preload.new.$$ \
	  prel_old m
    for prel_old in @sysconfdir@/modprobe.preload @sysconfdir@/modules; do
	if [ -f $prel_old ]; then
	    cp -f -- $prel_old $prel_new
	    sed -e '\|^[[:space:]]*(specfs|streams)|d' $prel_new >$prel_tmp
	    mv -f -- $prel_tmp $prel_new
	    for m in $modules $preloads; do
		sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new >$prel_tmp
		mv -f -- $prel_tmp $prel_new
	    done
	    if ! diff $prel_new $prel_old >/dev/null 2>&1; then
		echo "warning: Removing non-deb entries from preloads file, $prel_old" >&2
		cp -f -b --suffix=.dpkg-old -- $prel_new $prel_old
	    fi
	    rm -f -- $prel_new || :
	fi
    done
}
#
# preinst_initscripts() - Fresh install, go looking for non-deb initscripts and remove them.
#
preinst_initscripts () {
    local list reverse i
    list="$nonrpminit"
    reverse=
    for i in $list; do
	reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse; do
	if [ -f "@initrddir@/$i" ]; then
	    echo "warning: Stopping non-deb init script, $i" >&2
	    [ -x "`which invoke-rc.d 2>/dev/null`" ] && { invoke-rc.d $i stop && continue || true; }
	    [ -x "`which service     2>/dev/null`" ] && { service     $i stop && continue || true; }
	    [ -x "@initrddir@/$i"                  ] && { @initrddir@/$i stop && continue || true; }
	fi
    done
    list="$initfiles $nonrpminit"
    reverse=
    for i in $list; do
	reverse="$i${reverse:+ }$reverse"
    done
    for i in $reverse; do
	if [ -f "@initrddir@/$i" ]; then
	    echo "warning: Deregistering non-deb init script, $i" >&2
	    [ -x /sbin/insserv             ] && { /sbin/insserv -r          $i        2>&1 && continue || true; }
	    [ -x /sbin/chkconfig           ] && { /sbin/chkconfig --del     $i        2>&1 && continue || true; }
	    [ -x /usr/lib/lsb/remove_initd ] && { /usr/lib/lsb/remove_initd $i        2>&1 && continue || true; }
	    [ -x /usr/sbin/update-rc.d     ] && { /usr/bin/update-rc.d      $i remove 2>&1 && continue || true; }
	fi
    done
}
#
# preinst_remove_depmods() - A little recursive function to delete all modules dependent on an
#   initial module set (in our case "streams.o").  The function echos the list of modules to remove
#   to stdout.
#
preinst_remove_depmods () {
    local t
    [ $# -gt 0 ] || return 0
    echo "$*"
    for t in $@ ; do
	prereq=prereq_`echo $t | sed -r -e 's|^.*/||;s|\.(k)?o(\.gz)?(:)?$||;s|[^a-zA-Z0-9_]|_|g'`
	eval "preinst_remove_depmods \$$prereq"
    done
}
#
# preinst_modules() - When performing a fresh install we want to go looking for non-deb
#   installations of LiS or STREAMS or supplementary packages and perform what would otherwise have
#   been the prerm or postrm actions.  Build a dependency tree from every dependency expression that
#   can be found in each modules.dep file and remove all conflicting modules and their dependents.
#
preinst_modules () {
    local dir m b modl_mods= dep line t target p prereq
    for dir in /lib/modules/preferred /lib/modules/default /lib/modules/boot; do
	[ -d $dir ] || continue
	for m in `find $dir \( -name '*.o' -o -name '*.ko' -o -name '*.o.gz' -o -name '*.ko.gz' \) 2>/dev/null` ; do
	    b=`echo $m | sed -r -e 's,^.*/,,;s,\.(k)?o(\.gz)? , ,'`
	    case " $modules " in (*" $b "*) modl_mods="$modl_mods${modl_mods:+ }$m" ;; esac
	done
	if [ -n "$modl_mods" -a -f $dir/modules.dep ] ; then
	    dep=
	    while read line; do
		case $line in
		    *\\) line="`echo $line | sed -e 's,\\$,,'`"
			dep="$dep${dep:+ }$line" ; continue ;;
		    *)  dep="$dep${dep:+ }$line" ;;
		esac
		if [ -n "$dep" ]; then
		    set -- $dep
		    if [ $# -ge 2 ]; then
			t=`echo $1 | sed -e 's,:$,,'`
			target=target_`echo $t | sed -r -e 's,^.*/,,;s,\.(k)?o(\.gz)?(:)?$,,;s,[^a-zA-Z0-9_],_,g'`
			shift
			for p in $@ ; do
			    prereq=prereq_`echo $p | sed -r -e 's,^.*/,,;s,\.(k)?o(\.gz)?(:)?$,,;s,[^a-zA-Z0-9_],_,g'`
			    eval "$prereq=\"\$$prereq\${$prereq:+ }$t\""
			    eval "$target=\"\$$target\${$target:+ }$p\""
			done
		    fi
		    dep=
		fi
	    done < $dir/modules.dep
	    for m in $modl_mods; do
		echo "warning: Removing non-deb kernel module, $m" >&2
		rm -f -- $m 2>/dev/null || :
		prereq=prereq_`echo $m | sed -r -e 's,^.*/,,;s,\.(k)?o(\.gz)?(:)?$,,;s,[^a-zA-Z0-9_],_,g'`
		eval "preinst_remove_depmods \$$prereq" | while read b; do
		    echo "warning: Removing depednent non-deb kernel module, $b" >&2
		    rm -f -- $b 2>/dev/null || :
		done
	    done
	    unset ${!prereq_*}
	    unset ${!target_*}
	fi
    done
}
#
# preinst_modconf() - For a fresh install make sure that there are no entries from a non-deb
#   installation in the modules directories nor in the modules.conf file that will interfere with
#   our entries.  Especially older LiS entries.
#
#   Unfortunately davem starting copying our install procedure, so we need to root out all kinds of
#   things from the modules.conf file, all prune statements, any if include statements.  The old
#   style /BEGIN LiS/,/END LiS/ enclosure in the modules.conf file.  My newer technique with a prune
#   and an if statement in the modules.conf file that was also used by davem in LiS-2.18.0.  Also,
#   my newer latest technique with only an include statement in modules.conf and a modules.conf
#   fragment in the debian update-modules directory @modutildir@ that includes the prune and if
#   statements.  That works both for RH-style and Debian-style modules.conf.
#
#   Again, unfortunately, recent non-autoconf/dpkg releases of LiS have chosen to install their
#   modconf files in a similar fashion to ours and in a similar location.  It even uses the prune
#   modules line that we normally use, however, on Debian their modules.conf edits will be lost
#   because the modules.conf file is generated from the modules/conf.d directory.
#
@WITH_KO_MODULES_FALSE@preinst_modconf () {
@WITH_KO_MODULES_FALSE@    local conf_old=@sysconfdir@/modules.conf \
@WITH_KO_MODULES_FALSE@          conf_tmp=${tmppath:-/var/tmp}/modules.conf.tmp.$$ \
@WITH_KO_MODULES_FALSE@          conf_new=${tmppath:-/var/tmp}/modules.conf.new.$$ \
@WITH_KO_MODULES_FALSE@          suffix dir
@WITH_KO_MODULES_FALSE@    if [ -f $conf_old ]; then
@WITH_KO_MODULES_FALSE@        cp -f -- $conf_old $conf_new
@WITH_KO_MODULES_FALSE@        for suffix in $name LiS lis streams STREAMS strcompat strtty strxns strxnet strsock strinet strsctp strchan strx25 striso strisdn strss7 sigtran strvoip osr61
@WITH_KO_MODULES_FALSE@        do
@WITH_KO_MODULES_FALSE@            if ( grep -q -- "BEGIN $suffix" $conf_new && grep -q -- "END $suffix" $conf_new ) 2>/dev/null
@WITH_KO_MODULES_FALSE@            then
@WITH_KO_MODULES_FALSE@                sed -e '\|BEGIN '$suffix'|,\|END '$suffix'|d' $conf_new > $conf_tmp
@WITH_KO_MODULES_FALSE@                mv -f -- $conf_tmp $conf_new
@WITH_KO_MODULES_FALSE@            fi
@WITH_KO_MODULES_FALSE@            for dir in /lib/modules/2.[456].* /lib/modules/preferred /lib/modules/default /lib/modules/boot
@WITH_KO_MODULES_FALSE@            do
@WITH_KO_MODULES_FALSE@                [ -d $dir ] || continue
@WITH_KO_MODULES_FALSE@                if [ -f $dir/modules.$suffix ] ; then
@WITH_KO_MODULES_FALSE@                    rm -f -- $dir/modules.$suffix
@WITH_KO_MODULES_FALSE@                    sed -e '\|^prune[[:space:]].*modules.'$suffix'|d'        $conf_new > $conf_tmp
@WITH_KO_MODULES_FALSE@                    sed -e '\|^if[[:space:]].*modules.'$suffix'|,\|^endif|d' $conf_tmp > $conf_new
@WITH_KO_MODULES_FALSE@                    sed -e '\|^include[[:space:]].*modules.'$suffix'|d'      $conf_new > $conf_tmp
@WITH_KO_MODULES_FALSE@                    mv -f -- $conf_tmp $conf_new
@WITH_KO_MODULES_FALSE@                fi
@WITH_KO_MODULES_FALSE@            done
@WITH_KO_MODULES_FALSE@        done
@WITH_KO_MODULES_FALSE@        for suffix in $name LiS lis streams STREAMS strcompat strtty strxns strxnet strsock strinet strsctp strchan strx25 striso strisdn strss7 sigtran strvoip osr61 ; do
@WITH_KO_MODULES_FALSE@            if [ -f @modutildir@/$suffix ] ; then
@WITH_KO_MODULES_FALSE@                rm -f -- @modutildir@/$suffix
@WITH_KO_MODULES_FALSE@                sed -e '\|^include[[:space:]].*@modutildir@/'$suffix'|d' $conf_new > $conf_tmp
@WITH_KO_MODULES_FALSE@                mv -f -- $conf_tmp $conf_new
@WITH_KO_MODULES_FALSE@            fi
@WITH_KO_MODULES_FALSE@        done
@WITH_KO_MODULES_FALSE@        if ! diff $conf_old $conf_new >/dev/null 2>&1; then
@WITH_KO_MODULES_FALSE@            echo "warning: Removing non-deb entries from $conf_old" >&2
@WITH_KO_MODULES_FALSE@            cp -f -b --suffix=.dpkg-old -- $conf_new $conf_old
@WITH_KO_MODULES_FALSE@        fi
@WITH_KO_MODULES_FALSE@        rm -f -- $conf_new || :
@WITH_KO_MODULES_FALSE@    fi
@WITH_KO_MODULES_FALSE@}
#
# preinst_remove_warn_file()
#
preinst_remove_warn_file () {
    echo "$script: warning: Deleting non-deb manual $1 file $2" >&2
    rm -f -- $2 2>/dev/null || :
}
#
# preinst_manpages() - Old non-deb distribution puts some man pages in the wrong
#   place, clean them out on a fresh install.
#
preinst_manpages () { :
    if [ -f /usr/man/man3/fattach.3 ] ; then
        preinst_remove_warn_file "page" /usr/man/man3/fattach.3
        preinst_remove_warn_file "page" /usr/man/man3/detach.3
        preinst_remove_warn_file "page" /usr/man/man3/isastream.3
        rmdir -p /usr/man/man3 2>/dev/null || :
        preinst_remove_warn_file "page" /usr/man/man8/fattach.8
        preinst_remove_warn_file "page" /usr/man/man8/fdetach.8
        rmdir -p /usr/man/man8 2>/dev/null || :
        preinst_remove_warn_file "page" /usr/man/man9/connld.9
        preinst_remove_warn_file "page" /usr/man/man9/fifo.9
        preinst_remove_warn_file "page" /usr/man/man9/pipemod.9
        rmdir -p /usr/man/man9 2>/dev/null || :
    fi
}
#
# preinst_manmacros() - On a fresh installation, lean out macro files from old
#   non-deb distribution.
#
preinst_manmacros () {
    for m in $manrefs; do
	[ ! -f @mandir@/$m     ] || preinst_remove_warn_file "references" @mandir@/$m
	[ ! -f @mandir@/$m.gz  ] || preinst_remove_warn_file "references" @mandir@/$m.gz
	[ ! -f @mandir@/$m.bz2 ] || preinst_remove_warn_file "references" @mandir@/$m.bz2
    done
}
#
# preinst_manrefs() - On a fresh installation, clean out reference database from
#   old non-deb distribution.
#
preinst_manrefs () {
    for m in $manmacros; do
	[ ! -f @mandir@/$m     ] || preinst_remove_warn_file "macros" @mandir@/$m
	[ ! -f @mandir@/$m.gz  ] || preinst_remove_warn_file "macros" @mandir@/$m.gz
	[ ! -f @mandir@/$m.bz2 ] || preinst_remove_warn_file "macros" @mandir@/$m.bz2
    done
}
#
# preinst_install() - This is an initial installation of the base subpackage.  We need to check for
#   non-deb installations on the host and remove any entries that might later conflict with out
#   entries.  We treat every fresh installation like an upgrade from non-deb/rpm install.
#
preinst_install () { :
    preinst_preloads || :
    preinst_initscripts || :
    preinst_modules || :
@WITH_KO_MODULES_FALSE@    preinst_modconf || :
    preinst_manpages || :
    preinst_manrefs || :
    preinst_manmacros || :
}
# -----------------------------------------------------------------------------
# Primary functions:
# -----------------------------------------------------------------------------
# new-preinst install
install_preinst () { :
    preinst_install || :
}
# new-preinst install old-version
reinstall_preinst () { :
}
# new-preinst upgrade old-version
upgrade_preinst () { :
}
# old-postrm upgrade new-version ...FAILED
# new-postrm failed-upgrade old-version ...FAILED
# old-preinst abort-upgrade new-version
abort_upgrade_preinst () { :
}
@mscript_preinst@
@mscript_debhelper@
# =============================================================================
#
# $Log: openss7-base.preinst.in,v $
# Revision 1.1.2.2  2011-05-15 12:01:18  brian
# - many build system refinements
#
# Revision 1.1.2.1  2011-05-10 13:45:28  brian
# - weak modules workup
#
# =============================================================================
# vim: ft=sh sw=4 noet nocin nosi formatoptions+=tcqlorn
