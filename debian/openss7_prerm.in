@openss7_header@
# =============================================================================
# @configure_input@
# @(#) $RCSfile$ $Name$($Revision$) $Date$
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
# This software is licensed under the GNU Affero General Public License (AGPL)
# Version 3, 19 November 2007, available at <http://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------
datarootdir=@datarootdir@
# -----------------------------------------------------------------------------
# Auxiliary functions:
# -----------------------------------------------------------------------------
remove_depends() {
    local modrex depend depends
    modrex=`echo $1 | sed -e 's,[-_],[-_],g'`
    depends=`grep "^$modrex[[:space:]]" /proc/modules 2>/dev/null | cut -f4 '-d ' | sed -e 's|^-$||;s|,$||;s|,| |g'`
    for depend in $depends ; do
        remove_depends $depend || return $?
    done
    if grep "^$modrex[[:space:]]" /proc/modules >/dev/null 2>&1 ; then
        rmmod $1 >/dev/null 2>&1 || return $?
    fi
    return 0
}
prerm_rmnods () { :
    if [ -x "@sbindir@/@STRCONF_DEVICES@" ]; then
	echo "${package}: removing old devices."
	@sbindir@/@STRCONF_DEVICES@ --remove || :
    fi
    return 0
}
#
# Stop init scripts when they are still hanging around.
#
prerm_stop_scripts () { :
    reverse=
    list="${initfiles}" ; for i in $list ; do
        reverse="$i${reverse:+' '}$reverse"
    done
    for i in $reverse ; do
        if [ -f @initrddir@/$i ] ; then
            /sbin/service $i stop >/dev/null 2>&1 || \
		@initrddir@/$i stop >/dev/null 2>&1 || :
        fi
    done
    :
    return 0
}
prerm_kill_strace () { :
    if [ -r /var/run/strace.pid ] ; then
        kill -TERM `cat /var/run/strace.pid` || :
        rm -f /var/run/strace.pid
        rm -f /var/lock/subsys/strace
        rm -f /var/lock/subsys/strace.init
    fi
    :
    return 0
}
prerm_kill_strerr () { :
    if [ -r /var/run/strerr.pid ] ; then
        kill -TERM `cat /var/run/strerr.pid` || :
        rm -f /var/run/strerr.pid
        rm -f /var/lock/subsys/strerr
        rm -f /var/lock/subsys/strerr.init
    fi
    :
    return 0
}
prerm_kill_streams () { :
    if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
        if [ -x @sbindir@/fdetach ] ; then
            @sbindir@/fdetach -a 2>/dev/null || :
        fi
        for signal in TERM KILL ; do
            if lsof | grep '\<STR\>' >/dev/null 2>&1 ; then
                lsof | grep '\<STR\>' | \
                while read fields ; do
                    set -- $fields
                    if [ ":$5" != ':CHR' ] ; then continue; fi
                    ind=`expr $# - 1`
                    eval "val=\"\${$ind}\""
                    if [ ":$val" != ':STR' ] ; then continue; fi
                    kill -$signal $2 >/dev/null 2>&1 || :
                done
                sleep 5
            fi
        done
    fi
    lsof | grep '\<STR\>' >/dev/null 2>&1 && false || true
}
prerm_kill () { :
    local reboot
    reboot='no'
    prerm_stop_scripts
    prerm_kill_strace
    prerm_kill_strerr
    umount -a -t specfs    || reboot='yes'
    prerm_rmnods
    prerm_kill_streams     || reboot='yes'
    remove_depends streams || reboot='yes'
    remove_depends specfs  || reboot='yes'
    if [ ":$reboot" = ':yes' ] ; then
	echo "$script: reboot required." >&2
    fi
    :
    return 0
}
prerm_kill_running () { :
    if [ ":@kversion@" = ":`uname -r`" ]; then
	prerm_kill
    fi
    :
    return 0
}
prerm_dev () { :
    if [ -x "@sbindir@/@STRCONF_DEVICES@" ]; then
	# ensure that old devices are removed
	echo "${package}: removing old devices."
	@sbindir@/@STRCONF_DEVICES@ --remove || :
    fi
}
prerm_dev_failed () { :
    if [ -x "@sbindir@/@STRCONF_DEVICES@" ]; then
	# ensure that old devices are put back
	echo "${package}: restoring old devices."
	@sbindir@/@STRCONF_DEVICES@ --create || :
    fi
}
#
# prerm_modules() - If we are upgrading and the upgrade is for the running
#   kernel, or we are installing new on the running kernel, we have to worry
#   about previous loaded modules for the old version or a non-deb version
#   kicking around.  This scriplet kills any streams modules that are loaded and
#   running.
#
prerm_modules () {
    if [ ":@kversion@" = ":`uname -r`" ] ; then
	for m in $modules
	do
	    if ( /sbin/lsmod | grep -q "^$m" ) ; then
#		module running, kick the stack
		/sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
		if ( /sbin/lsmod | grep -q "^$m" ) ; then
		    fdetach -a 2>/dev/null
		    /sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
		    if ( /sbin/lsmod | grep -q "^$m" ) ; then
			/usr/sbin/lsof | while read -a tokens; do
			    if [ :"${tokens[4]}" = :"CHR" ]; then
				major=`echo "${tokens[5]}" | sed -e 's|,.*||'`
				if [ $major -eq $STRCONF_MAJBASE ]; then
				    eval "kill -HUP ${tokens[1]}"
				fi
			    fi
			done
			/sbin/sleep 5 # wait for processes to die and close streams
			/sbin/modprobe -r `/sbin/lsmod | grep "^$m" | cut -f1 '-d '`
			if ( /sbin/lsmod | grep -q "^$m" ) ; then
			    echo "Cannot install or upgrade with $m module running." >&2
			    exit 1
			fi
		    fi
		fi
	    fi
	done
    fi
    return 0
}
# -----------------------------------------------------------------------------
# Default functions:
# -----------------------------------------------------------------------------
remove_prerm () { :; }
conflict_prerm () { :; }
upgrade_prerm () { :; }
failed_upgrade_prerm () { :; }
deconfigure_prerm () { :; }
# -----------------------------------------------------------------------------
# vim: ft=sh sw=4 noet
# @configure_input@
# =============================================================================
