#!/bin/sh
# @configure_input@
# =============================================================================
# 
# @(#) $RCSfile$ $Name$($Revision$) $Date$
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date$ by $Author$
#
# =============================================================================

@mscript_header@

# -----------------------------------------------------------------------------
# Auxiliary functions:
# -----------------------------------------------------------------------------

postinst_mknods () { :
    if test -x '/usr/sbin/@STRCONF_DEVICES@' ; then
	# ensure that devices are added
	echo "@PACKAGE@-${subpkg}(@VERSION@-@PACKAGE_DEBRELEASE@): creating devices."
	/usr/sbin/@STRCONF_DEVICES@ --create
    fi
}

postinst_mknods () { :
    if test -x $sbindir/@STRMAKENODES@ ; then
	# ensure that devices are added
	echo "@PACKAGE@-${subpkg}(@VERSION@-@PACKAGE_DEBRELEASE@): creating devices."
	$sbindir/@STRMAKENODES@
    fi
}

postinst_modconf_noupdate () { :
#   Check that our line is in the modules.conf file
    conf_old=$sysconfdir/modules.conf
    if ! grep -q 'include.*'$modutildir/$base $conf_old ; then
	streams_dirs="$kmoduledir $kmoduledir/../preferred $kmoduledir/../default $kmoduledir/../boot"
	streams_subs="$ksubdir misc streams"
	conf_new=$tmppath/modules.conf.new.$$
	cp -f $conf_old $conf_new
#	if not, check for an old non-rpm LiS
	if ( grep -q 'BEGIN LiS' $conf_old ) ; then
	    conf_tmp=$tmppath/modules.conf.tmp.$$
	    list=`find $kmoduledir/$base \( -name "*.o" -o -name "*.o.gz" \)`
	    for p in $list ; do
		f=`echo $p | sed -e 's|^.*/||'`
		m=`echo $f | sed -r -e 's|\.(k)?o(\.gz)? | |'`
#		Remove references to our modules from old installation.
		sed -e '/alias[^#]*\<'$m'\>/d' $conf_new > $conf_tmp
		mv -f $conf_tmp $conf_new
#		Remove conflicting modules.
		for d in $streams_dirs ; do
		    for s in $streams_subs ; do
			rm -f -- $d/$s/$f $d/$s/boot/$f
		    done
		done
	    done
	    for d in $streams_dirs ; do
		for s in $streams_subs ; do
		    rmdir --ignore-fail-on-non-empty $d/$s/boot $d/$s $d
		done
	    done
	fi
#	check for forced over installs of older LiS or LfS rpm installations
#	or installs over older LiS or LfS autoconf installations
	streams_old=$kmoduledir/modules.$kmodext
	if [ -d $kmoduledir/$ksubdir -a -f $streams_old ] ; then
	    streams_new=$tmppath/modules.$kmodext.new.$$
	    streams_tmp=$tmppath/modules.$kmodext.tmp.$$
	    cp -f $streams_old $streams_new
	    list=`find $kmoduledir/$base -name "*.o"`
	    for p in $list ; do
		f=`echo $p | sed -e 's|^.*/||'`
		m=`echo $f | sed -r -e 's|\.(k)?o(\.gz)? | |'`
#		Remove references to our modules from old installation.
		sed -e '/alias[^#]*\<'$m'\>/d' $streams_new > $streams_tmp
		mv -f $streams_tmp $streams_new
#		Remove conflicting modules.
		for d in $streams_dirs ; do
		    for s in $streams_subs ; do
			rm -f -- $d/$s/$f $d/$s/boot/$f
		    done
		done
	    done
	    for d in $streams_dirs ; do
		for s in $streams_subs ; do
		    rmdir --ignore-fail-on-non-empty $d/$s/boot $d/$s $d
		done
	    done
#	    can't make backups in modules directory
	    chmod --reference=$streams_old $streams_new
	    cp -f $streams_new $streams_old
	    rm -f $streams_new
	fi
	echo "include $modutildir/$base" >> $conf_new
	chmod --reference=$conf_old $conf_new
	cp -fb --suffix=.old $conf_new $conf_old
	rm -f $conf_new
    fi
}

postinst_modconf () { :
    if [ ! -f $sysconfdir/modules.conf \
	 -o "`head -1 $sysconfdir/modules.conf`" != "### This file is automatically generated by update-modules\"" \
	 -o ! -x /sbin/update-modules ]
    then
	postinst_modconf_noupdate
    fi
}

postinst_modconf () { :
    conf_old=@sysconfdir@/modules.conf
    if [ -f $conf_old ] ; then
	conf_tmp=$tmppath/modules.conf.tmp.$$
	conf_new=$tmppath/modules.conf.new.$$
	cp -f -- $conf_old $conf_new
	( sed -e "/^include[[:space:]].*$modutildir\/$base/d" $conf_new
	  echo "include $modutildir/$base" ) > $conf_tmp
	mv -f -- $conf_tmp $conf_new
	chmod --reference=$conf_old -- $conf_new
	cp -f -b --suffix=.dpkg-save -- $conf_new $conf_old
	rm -f -- $conf_new
    fi
}

postinst_preload () { :
    prel_old="@preloads@"
    if [ -f $prel_old ] ; then
	prel_new="$tmppath/modprobe.preload.new.$$"
	cp -f $prel_old $prel_new
	for m in $preloads ; do
	    echo "$m"
	done >> $prel_new
	chmod --reference=$prel_old $prel_new
	cp -fb --suffix=.old $prel_new $prel_old
	rm -f $prel_new
    fi
}

postinst_preloads () { :
    prel_old="@preloads@"
    if [ -f $prel_old ] ; then
	prel_tmp=$tmppath/modprobe.preload.tmp.$$
	prel_new=$tmppath/modprobe.preload.new.$$
	cp -f -- $prel_old $prel_new
        mods="${preloads}" ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.dpkg-save -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
}

postinst_preloads () { :
    case $kminor in
	4) prel_old=@sysconfdir@/modules ;;
	5)  if test $kpatch -lt 48; then
		prel_old=@sysconfdir@/modules
	    else
		prel_old=@sysconfdir@/modprobe.preload
	    fi ;;
	6) prel_old=@sysconfdir@/modprobe.preload ;;
	*) return ;;
    esac
    # At the end of a fresh install we need to add our preloads to the modules
    # or modprobe.preload file, if it exists, and is necessary, and even if the
    # lines are already there (in which case we remove the existing line.
    if [ -f $prel_old ] ; then
        prel_tmp=$tmppath/modprobe.preload.tmp.$$
        prel_new=$tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="${preloads}" ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.dpkg-save -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
}

postinst_netconfig () { :
    # At the end of a fresh install we need to rebuild the netconfig database,
    # but only if the netconfig database was built by us or does not exist.
    t=@sysconfdir@/netconfig
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
}

postinst_sock2path () { :
    # At the end of a fresh install we need to rebuild the sock2path database.
    t=@sysconfdir@/sock2path
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
}

postinst_initscripts () { :
    return
    #
    # Note that init scripts are handled by debhelper additions to this script.
    #
}

postinst_initscripts () { :
    #
    # Note that initscripts are updated by debian helpers, however, debian
    # helpers do not start and stop init scripts.
    #
    # Unlike rpm, we actually have a terminal here and can interact with the
    # user.
    #
    if [ ":$kversion" = ":`uname -r`" ] ; then
	# Running kernels do need init scripts run, but only when normally
	# started in the current runlevel.
	r=`runlevel | awk '{print$2}'`
	list="$initfiles" ; for i in $list ; do
	    if [ -f $initrddir/$i ] ; then
		if [ -L $initrddir/../rc${r}.d/S[0-9][0-9]$i -o \
		     -L $initrddir/rc${r}.d/S[0-9][0-9]$i ] ; then
		    /sbin/service $i start >/dev/null 2>&1 || \
		    $initrddir/$i    start >/dev/null 2>&1 || :
		fi
	    fi
	done
    fi
}

postinst_manpages () { :
    return
    #
    # Note that manual pages are handled by debhelper additions to this script.
    #
    if which makewhatis >/dev/null 2>&1 ; then
	LANGUAGE= LANG= makewhatis -u $mandir || :
    fi
    if which mandb >/dev/null 2>&1 ; then
	LANGUAGE= LANG= mandb -p $mandir || :
    fi
}
postinst_manrefs () { :
    # some policies compress manual pages which results in compression of our ref db
    [ ! -f $mandir/$base.refs.gz    ] || gunzip  $mandir/$base.refs.gz
    [ ! -f $mandir/$base.refs.bz2   ] || bunzip2 $mandir/$base.refs.bz2
}
postinst_manmacros () { :
    # some policies compress manual pages which results in compression of our macros
    [ ! -f $mandir/$base.macros.gz  ] || gunzip  $mandir/$base.macros.gz
    [ ! -f $mandir/$base.macros.bz2 ] || bunzip2 $mandir/$base.macros.bz2
}

postinst_depmod () { :
    if [ ":$kversion" = ":`uname -r`" ] ; then
#	this is a running kernel, do a /sbin/depmod on the modules directory for
	/sbin/depmod -ae
    elif [ -r /boot/System.map-$kversion ] ; then
#	non-running kernels a /sbin/depmod will be performed on boot by /sbin/depmod anyway
	UNAME_MACHINE=%{_target_cpu} \
	/sbin/depmod -ae -F /boot/System.map-$kversion $kversion
    fi
}

postinst_depmod () { :
    if [ ":$kversion" = ":`uname -r`" ] ; then
	# This is a running kernel, do a depmod on the modules directory for the
	# running kernel.
	if [ -r /boot/System.map-$kversion ] ; then
	    depmod -ae -F /boot/System.map-$kversion 2>&1 || :
	else
	    depmod -ae 2>&1 || :
	fi
    elif [ -r /boot/System.map-$kversion ] ; then
	# Non-running kernels a depmod will be performed on boot by depmod
	# anyway, but try one now.
	UNAME_MACHINE=$target_cpu \
	depmod -ae -F /boot/System.map-$kversion $kversion 2>&1 || :
    fi
}

postinst_updates () { :
    local retval=0 update
    if [ -x $sbindir/$name-modules ] ; then
	gawk -f $sbindir/$name-modules -- -q -e --add-modules ${kversion} || retval=$?
    fi
    return $retval
}

postinst_symvers () { :
    # Debian kernels do no create symbol versions.  But this should not be done
    # here, because System.symvers
    local f
    f=/usr/src/$name-@VERSION@-@PACKAGE_DEBRELEASE@/$kversion/System.symver
    if [ ! -r /boot/symvers-$kversion.gz -a -r $f ] ; then
	gzip -c $f > /boot/symvers-$kversion.gz
    fi
}


postinst_base () { :
    #
    # At this point we want to ensure that our lines are added to the modules.conf (if necessary)
    # and that our preloads are added to the modules or modprobe.preload file.
    #
    postinst_mknods
    @WITH_KO_MODULES_FALSE@postinst_modconf
    postinst_preloads
    postinst_initscripts
    postinst_manpages
    postinst_manrefs
    postinst_manmacros
}

# -----------------------------------------------------------------------------
# Default functions:
# -----------------------------------------------------------------------------

configure_postinst () { :; }
reconfigure_postinst () { :; }
triggered_postinst () { :; }
abort_upgrade_postinst () { :; }
abort_remove_postinst () { :; }
abort_deconfigure_postinst () { :; }

# =============================================================================
#
# $Log$
# =============================================================================
# vim: ft=sh sw=4 noet nocin nosi formatoptions+=tcqlorn
