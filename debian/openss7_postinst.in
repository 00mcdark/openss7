#!/bin/sh
# @configure_input@
# =============================================================================
# @(#) $RCSfile$ $Name$($Revision$) $Date$
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
# This software is licensed under the GNU Affero General Public License (AGPL)
# Version 3, 19 November 2007, available at <http://www.gnu.org/licenses/>.
@mscript_header@
datarootdir=@datarootdir@
# -----------------------------------------------------------------------------
# Auxiliary functions:
# -----------------------------------------------------------------------------
#
# After we install this repository package, we need to adjust whatever
# definitions are required in either the /etc/yum/yum-plugins.d/kmod.conf or
# /etc/zypp/zypp.conf files.
#
postinst_repo () { :
}
postinst_mknods () { :
    if [ -x "@sbindir@/@STRCONF_DEVICES@" ]; then
	# ensure that devices are added
	echo "${package}: creating devices."
	@sbindir@/@STRCONF_DEVICES@ --create || :
    fi
    return 0
}
#
# At the end of a fresh install we need to add our lines to the modules.conf
# file if it exists, and it is necessary to use a modconf file (2.4 and pre
# 2.5.48 kernel), an even if the line is already there (in which case we remove
# the existing line).
#
postinst_oldmods () { :
    case @kminor@ in
	4) ;;
	5) if [ @kpatch@ -ge 48 ]; then return 0; fi ;;
	*) return 0 ;;
    esac
    conf_old="@sysconfdir@/modules.conf"
    if [ -f $conf_old ] ; then
        conf_tmp=$tmppath/modules.conf.tmp.$$
        conf_new=$tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        ( sed -e '\|^include[[:space:]].*'"@modutildir@"'/'"$base"'|d' $conf_new
          echo "include @modutildir@/$base" ) > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.dpkg-save -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
}
postinst_modconf_noupdate () { :
#   Check that our line is in the modules.conf file
    conf_old="@sysconfdir@/modules.conf"
    if ! grep -q 'include.*'"@modutildir@"'/'$base $conf_old ; then
	streams_dirs="@kmoduledir@ @kmoduledir@/../preferred @kmoduledir@/../default @kmoduledir@/../boot"
	streams_subs="@ksubdir@ misc streams"
	conf_new=$tmppath/modules.conf.new.$$
	cp -f $conf_old $conf_new
#	if not, check for an old non-rpm LiS
	if ( grep -q 'BEGIN LiS' $conf_old ) ; then
	    conf_tmp=$tmppath/modules.conf.tmp.$$
	    list=`find @kmoduledir@/$base \( -name "*.o" -o -name "*.o.gz" \)`
	    for p in $list ; do
		f=`echo $p | sed -e 's|^.*/||'`
		m=`echo $f | sed -r -e 's|\.(k)?o(\.gz)? | |'`
#		Remove references to our modules from old installation.
		sed -e '/alias[^#]*\<'$m'\>/d' $conf_new > $conf_tmp
		mv -f $conf_tmp $conf_new
#		Remove conflicting modules.
		for d in $streams_dirs ; do
		    for s in $streams_subs ; do
			rm -f -- $d/$s/$f $d/$s/boot/$f
		    done
		done
	    done
	    for d in $streams_dirs ; do
		for s in $streams_subs ; do
		    rmdir --ignore-fail-on-non-empty $d/$s/boot $d/$s $d
		done
	    done
	fi
#	check for forced over installs of older LiS or LfS rpm installations
#	or installs over older LiS or LfS autoconf installations
	streams_old=@kmoduledir@/modules.$kmodext
	if [ -d @kmoduledir@/@ksubdir@ -a -f $streams_old ] ; then
	    streams_new=$tmppath/modules.$kmodext.new.$$
	    streams_tmp=$tmppath/modules.$kmodext.tmp.$$
	    cp -f $streams_old $streams_new
	    list=`find @kmoduledir@/$base -name "*.o"`
	    for p in $list ; do
		f=`echo $p | sed -e 's|^.*/||'`
		m=`echo $f | sed -r -e 's|\.(k)?o(\.gz)? | |'`
#		Remove references to our modules from old installation.
		sed -e '/alias[^#]*\<'$m'\>/d' $streams_new > $streams_tmp
		mv -f $streams_tmp $streams_new
#		Remove conflicting modules.
		for d in $streams_dirs ; do
		    for s in $streams_subs ; do
			rm -f -- $d/$s/$f $d/$s/boot/$f
		    done
		done
	    done
	    for d in $streams_dirs ; do
		for s in $streams_subs ; do
		    rmdir --ignore-fail-on-non-empty $d/$s/boot $d/$s $d
		done
	    done
#	    can't make backups in modules directory
	    chmod --reference=$streams_old $streams_new
	    cp -f $streams_new $streams_old
	    rm -f $streams_new
	fi
	echo "include @modutildir@/$base" >> $conf_new
	chmod --reference=$conf_old $conf_new
	cp -fb --suffix=.old $conf_new $conf_old
	rm -f $conf_new
    fi
}
postinst_modconf () { :
    if [ ! -f "@sysconfdir@/modules.conf" \
	 -o "`head -1 @sysconfdir@/modules.conf`" != "### This file is automatically generated by update-modules\"" \
	 -o ! -x @sbindir@/update-modules ]
    then
	postinst_modconf_noupdate
    fi
}
postinst_modconf () { :
    conf_old=@sysconfdir@/modules.conf
    if [ -f $conf_old ] ; then
	conf_tmp=$tmppath/modules.conf.tmp.$$
	conf_new=$tmppath/modules.conf.new.$$
	cp -f -- $conf_old $conf_new
	( sed -e '\|^include[[:space:]].*'"@modutildir@"'/'"$base"'|d' $conf_new
	  echo "include @modutildir@/$base" ) > $conf_tmp
	mv -f -- $conf_tmp $conf_new
	chmod --reference=$conf_old -- $conf_new
	cp -f -b --suffix=.dpkg-save -- $conf_new $conf_old
	rm -f -- $conf_new
    fi
}
#
# At the end of a fresh install we need to add our preloads to the modules or
# modprobe.preload file, if it exists, and is necessary, and even if the lines
# are already there (in which case we remove the existing line.
#
postinst_preloads () { :
    case @kminor@ in
	4) prel_old=@sysconfdir@/modules ;;
	5)  if [ @kpatch@ -lt 48 ]
	    then prel_old=@sysconfdir@/modules
	    else prel_old=@sysconfdir@/modprobe.preload
	    fi ;;
	6) prel_old=@sysconfdir@/modprobe.preload ;;
	*) return ;;
    esac
    if [ -f $prel_old ] ; then
        prel_tmp=$tmppath/modprobe.preload.tmp.$$
        prel_new=$tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="${preloads}" ; for m in $mods ; do
            ( sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $prel_new
              echo "$m" ) > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.dpkg-save -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
}
#
# At the end of a fresh install we need to rebuild the netconfig database, but
# only if the netconfig database was built by us or does not exist.
#
postinst_netconfig () { :
    t="@sysconfdir@/netconfig"
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.dpkg-save|*.dpkg-new|*.dpkg-orig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.dpkg-save|*.dpkg-new|*.dpkg-orig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
    :
    return 0
}
#
# At the end of a fresh install we need to rebuild the sock2path database.
#
postinst_sock2path () { :
    t="@sysconfdir@/sock2path"
    cp -f -b --suffix=.dpkg-save -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.dpkg-save|*.dpkg-new) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
    :
    return 0
}
#
# This is the end of a fresh install, add init scripts if we can
#
postinst_initscripts () { :
    return
    #
    # Note that init scripts are handled by debhelper additions to this script.
    #
    list="${initfiles}" ; for i in $list ; do
        # Find the best working init script installation tool
        [ -x /sbin/insserv              ] && /sbin/insserv              $i 2>&1 && continue || :
        [ -x /sbin/chkconfig            ] && /sbin/chkconfig --add      $i 2>&1 && continue || :
        [ -x /usr/lib/lsb/install_initd ] && /usr/lib/lsb/install_initd $i 2>&1 && continue || :
    done
}
postinst_initscripts2 () { :
    #
    # Note that initscripts are updated by debian helpers, however, debian
    # helpers do not start and stop init scripts.
    #
    # Unlike rpm, we actually have a terminal here and can interact with the
    # user.
    #
    if [ ":@kversion@" = ":`uname -r`" ] ; then
	# Running kernels do need init scripts run, but only when normally
	# started in the current runlevel.
	r=`runlevel | awk '{print$2}'`
	list="$initfiles" ; for i in $list ; do
	    if [ -f @initrddir@/$i ] ; then
		if [ -L @initrddir@/../rc${r}.d/S[0-9][0-9]$i -o \
		     -L @initrddir@/rc${r}.d/S[0-9][0-9]$i ] ; then
		    /sbin/service $i start >/dev/null 2>&1 || \
		    @initrddir@/$i    start >/dev/null 2>&1 || :
		fi
	    fi
	done
    fi
}
postinst_manpages () { :
    return
    #
    # Note that manual pages are handled by debhelper additions to this script.
    #
    if which makewhatis >/dev/null 2>&1 ; then
	LANGUAGE= LANG= makewhatis -u @mandir@ || :
    fi
    if which mandb >/dev/null 2>&1 ; then
	LANGUAGE= LANG= mandb -p @mandir@ || :
    fi
}
postinst_manrefs () { :
    # some policies compress manual pages which results in compression of our ref db
    [ ! -f @mandir@/$base.refs.gz    ] || gunzip  @mandir@/$base.refs.gz
    [ ! -f @mandir@/$base.refs.bz2   ] || bunzip2 @mandir@/$base.refs.bz2
}
postinst_manmacros () { :
    # some policies compress manual pages which results in compression of our macros
    [ ! -f @mandir@/$base.macros.gz  ] || gunzip  @mandir@/$base.macros.gz
    [ ! -f @mandir@/$base.macros.bz2 ] || bunzip2 @mandir@/$base.macros.bz2
}
postinst_infofiles () { :
    return
    #
    # Note that info files are handled by debhelper additions to this script.
    #
    if [ -x /sbin/install-info ]; then
#	Older policies do not compress info files.
	for n in $manuals; do
            if [ -f @infodir@/$n.info ] ; then
                /sbin/install-info --info-dir=@infodir@ @infodir@/$n.info || :
            elif [ -f @infodir@/$n.info.gz ] ; then
                /sbin/install-info --info-dir=@infodir@ @infodir@/$n.info.gz || :
            elif [ -f @infodir@/$n.info.bz2 ] ; then
                /sbin/install-info --info-dir=@infodir@ @infodir@/$n.info.bz2 || :
            fi
        done
    fi
    :
    return 0
}
postinst_symvers () { :
    # Debian kernels do no create symbol versions.  But this should not be done
    # here, because System.symvers
    local f
    f=/usr/src/$name-@VERSION@-@PACKAGE_DEBRELEASE@/@kversion@/System.symver
    if [ ! -r /boot/symvers-@kversion@.gz -a -r $f ] ; then
	gzip -c $f > /boot/symvers-@kversion@.gz
    fi
}
# -----------------------------------------------------------------------------
# Default functions:
# -----------------------------------------------------------------------------
configure_postinst () { :; }
reconfigure_postinst () { :; }
triggered_postinst () { :; }
abort_upgrade_postinst () { :; }
abort_remove_postinst () { :; }
abort_deconfigure_postinst () { :; }
# =============================================================================
# @configure_input@
# vim: ft=sh sw=4 noet
