#!/bin/sh
# =============================================================================
# 
# @(#) $RCSfile$ $Name$($Revision$) $Date$
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2011  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date$ by $Author$
#
# =============================================================================
@mscript_header@

# -----------------------------------------------------------------------------
# Auxiliary functions:
# -----------------------------------------------------------------------------

remove_base_prerm_rmnods() { :
    if [ -x /usr/sbin/@STRCONF_DEVICES@ ] ; then
	/usr/sbin/@STRCONF_DEVICE@ --remove || :
    fi
    :
}

remove_base_prerm_modconf() { :
    # When we are going away altogether we want to remove any lines whatsoever
    # from the modules.conf file.
    conf_old=@sysconfdir@/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=$tmppath/modules.conf.tmp.$$
        conf_new=$tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        sed -e '\|^include[[:space:]].*'"$modutildir/$base"'|d' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
    :
}

remove_base_prerm_preloads() { :
    case $kminor in
	4) prel_old=@sysconfdir@/modules ;;
	5)  if test $kpatch -lt 48
		prel_old=@sysconfdir@/modules
	    else
		prel_old=@sysconfdir@/modprobe.preload
	    fi ;;
	6) prel_old=@sysconfdir@/modprobe.preload ;;
	*) return ;;
    esac
    # When we are going away altogether we want to remove any of our preloads
    # whatsoever from the modules or modprobe.preload file.
    if [ -f $prel_old ] ; then
        prel_tmp=$tmppath/modprobe.preload.tmp.$$
        prel_new=$tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="${preloads}" ; for m in $mods ; do
            sed -e '\|^[[:space:]]*'"$m"'[[:space:]]*$|d' $repl_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
    :
}

remove_base_prerm_netconfig() { :
}

remove_base_prerm_sock2path() { :
}

remove_base_prerm_initscripts() { :
}

remove_base_prerm_manrefs() { :
}

remove_base_prerm_manmacros() { :
}


upgrade_base_prerm_modconf() { :
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove
    # our lines from the modules.conf file that we placed in them in the post
    # scriptlet.  We only adjust our line and leave any lines added by the new
    # package post scriptlet.
    conf_old=@sysconfdir@/modules.conf
    if [ -f $conf_old ] ; then
        conf_tmp=$tmppath/modules.conf.tmp.$$
        conf_new=$tmppath/modules.conf.new.$$
        cp -f -- $conf_old $conf_new
        # This groovy sed script just pulls out the first matching line and
        # leaves the rest untouched.
        sed -e '
\|^include[[:space:]].*'"$modutildir/$base"'|!b
N
s|^include[[:space:]].*'"$modutildir/$base"'.*\
||
: loop
n
b loop' $conf_new > $conf_tmp
        mv -f -- $conf_tmp $conf_new
        chmod --reference=$conf_old $conf_new
        cp -f -b --suffix=.rpmsave -- $conf_new $conf_old
        rm -f -- $conf_new
    fi
    :
}

upgrade_base_prerm_preloads() { :
    case $kminor in
	(4) prel_old=@sysconfdir@/modules ;;
	(5) if test $kpatch -lt 48
		prel_old=@sysconfdir@/modules ;;
	    else
		prel_old=@sysconfdir@/modprobe.preload ;;
	    fi ;;
	(6) prel_old=@sysconfdir@/modprobe.preload ;;
    esac
    # At the end of the upgrade (when _this_package_ is upgraded from) we remove
    # our lines from the modules or modprobe.preloads file that we placed in
    # them in the post scriptlet.  We only adjust our lines and leave any lines
    # added by the new package post scriptlet.
    if [ -f $prel_old ] ; then
        prel_tmp=$tmppath/modprobe.preload.tmp.$$
        prel_new=$tmppath/modprobe.preload.new.$$
        cp -f -- $prel_old $prel_new
        mods="${preloads}" ; for m in $mods ; do
            # This groovy sed script just pulls out the first matching line and
            # leaves the rest untouched.
            sed -e '
\|^[[:space:]].*'"$m"'[[:space:]]*$|!b
N
s|^[[:space:]].*'"$m"'[[:space:]]*\
||
: loop
n
b loop' $prel_new > $prel_tmp
            mv -f -- $prel_tmp $prel_new
        done
        chmod --reference=$prel_old -- $prel_new
        cp -f -b --suffix=.rpmsave -- $prel_new $prel_old
        rm -f -- $prel_new
    fi
    :
}

upgrade_base_prerm_netconfig() { :
    # After going doing an upgrade we want to rebuild the netconfig database,
    # but only if the netconfig database was built by us or does not exist.
    t=@sysconfdir@/netconfig
    a="${t}.xnsl"
    d="${t}.d"
    if [ -f $t ] ; then
        if ! grep '^# Generated from netconfig.d' $t >/dev/null 2>&1 ; then
            t="${a}"
        fi
    fi
    echo '# Generated from netconfig.d by @PACKAGE_LCNAME@ '`date -uI` > $t.tmp
    found='no'
    files="$d/*"
    for f in $files ; do
        if [ -f $f -a $f = "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    for f in $files ; do
        if [ -f $f -a $f != "$d/strnsl" ] ; then
            case $f in
                (*.rpmsave|*.rpmnew|*.rpmorig) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t.tmp ; found='yes' ;;
            esac
        fi
    done
    if [ $found = "no" ] ; then
        rm -f $t $t.tmp
    else
        mv -f $t.tmp $t
    fi
    if [ "${t}" != "${a}" ] ; then
        rm -f $a
    fi
    :
}

upgrade_base_prerm_sock2path() { :
    # After going doing an upgrade we want to rebuild the sock2path database.
    t=@sysconfdir@/sock2path
    cp -f -b --suffix=.rpmsave -- /dev/null $t
    for f in "${t}.d/*" ; do
        if [ -f $f ] ; then
            case $f in
                (*.rpmsave|*.rpmnew) ;;
                (*) sed -e '/^[[:space:]]*##/d;/^[[:space:]]*$/d' $f >> $t ;;
            esac
        fi
    done
}

upgrade_base_prerm_initscripts() { :
    return
    # Upgrading, remove our init scripts if we can
    reverse=
    list="${initfiles}" ; for i in $list ; do
	if test -z "$reverse" ; then reverse="$i $reverse"; else reverse="$1"; fi
    done
    for i in $reverse ; do
        if [ -f $initrddir/$i ] ; then
            # Try to stop them first.
            /sbin/service $i stop >/dev/null 2>&1 || $initrddir/$i stop >/dev/null 2>&1 || :
            # Find the best working init script removal tool
            [ -x /sbin/insserv             ] && /sbin/insserv -r          $i 2>&1 && continue || :
            [ -x /sbin/chkconfig           ] && /sbin/chkconfig --del     $i 2>&1 && continue || :
            [ -x /usr/lib/lsb/remove_initd ] && /usr/lib/lsb/remove_initd $i 2>&1 && continue || :
        fi
    done
    :
}

upgrade_base_prerm_manrefs() { :
    rm -f -- ${mandir}/${manrefs}
}

upgrade_base_prerm_manmacros() { :
    rm -f -- ${mandir}/${manmacros}
}


# -----------------------------------------------------------------------------
# Primary functions:
# -----------------------------------------------------------------------------

remove_base_prerm() { :
    # We are being removed for good.
    remove_base_prerm_rmnods
@WITH_KO_MODULES_FALSE@   remove_base_prerm_modconf
    remove_base_prerm_preloads
    remove_base_prerm_netconfig
    remove_base_prerm_sock2path
    remove_base_prerm_initscripts
    remove_base_prerm_manrefs
    remove_base_prerm_manmacros
}

conflict_base_prerm() { :
    # We are being removed because we conflict with a package that is being
    # installed.
    remove_base_prerm_rmnods
@WITH_KO_MODULES_FALSE@   remove_base_prerm_modconf
    remove_base_prerm_preloads
    remove_base_prerm_netconfig
    remove_base_prerm_sock2path
    remove_base_prerm_initscripts
    remove_base_prerm_manrefs
    remove_base_prerm_manmacros
}

upgrade_base_prerm() { :
@WITH_KO_MODULES_FALSE@   upgrade_base_prerm_modconf
    # We are being removed because we are being replaced with a newer version.
    upgrade_base_prerm_preloads
    upgrade_base_prerm_netconfig
    upgrade_base_prerm_sock2path
    upgrade_base_prerm_initscripts
    upgrade_base_prerm_manrefs
    upgrade_base_prerm_manmacros
}

failed_upgrade_base_prerm() { :
    # We (the new version) are being removed because the prerm script for the
    # old version failed.  This is effectively our chance to undo anything that
    # we did or prepared for in the preinst script.
}

deconfigure_base_prerm() { :
    upgrade_base_prerm_preloads
    upgrade_base_prerm_netconfig
    upgrade_base_prerm_sock2path
    upgrade_base_prerm_initscripts
    upgrade_base_prerm_manrefs
    upgrade_base_prerm_manmacros
}

subpkg=base

@mscript_prerm@

# =============================================================================
#
# $Log$
# =============================================================================
# vim: ft=sh sw=4 noet nocin nosi formatoptions+=tcqlorn
