% -*- texinfo -*- vim: ft=texinfo
% =========================================================================
%
% @(#) $Id: dlpi_porting.texi,v 0.9.2.4 2008-11-26 12:01:52 brian Exp $
%
% =========================================================================
%
% Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
%
% All Rights Reserved.
%
% Permission is granted to make and distribute verbatim copies of this
% manual provided the copyright notice and this permission notice are
% preserved on all copies.
%
% Permission is granted to copy and distribute modified versions of this
% manual under the conditions for verbatim copying, provided that the
% entire resulting derived work is distributed under the terms of a
% permission notice identical to this one.
% 
% Since the Linux kernel and libraries are constantly changing, this
% manual page may be incorrect or out-of-date.  The author(s) assume no
% responsibility for errors or omissions, or for damages resulting from
% the use of the information contained herein.  The author(s) may not
% have taken the same level of care in the production of this manual,
% which is licensed free of charge, as they might when working
% professionally.
% 
% Formatted or processed versions of this manual, if unaccompanied by
% the source, must acknowledge the copyright and authors of this work.
%
% -------------------------------------------------------------------------
%
% U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
% on behalf of the U.S. Government ("Government"), the following
% provisions apply to you.  If the Software is supplied by the Department
% of Defense ("DoD"), it is classified as "Commercial Computer Software"
% under paragraph 252.227-7014 of the DoD Supplement to the Federal
% Acquisition Regulations ("DFARS") (or any successor regulations) and the
% Government is acquiring only the license rights granted herein (the
% license rights customarily provided to non-Government users).  If the
% Software is supplied to any unit or agency of the Government other than
% DoD, it is classified as "Restricted Computer Software" and the
% Government's rights in the Software are defined in paragraph 52.227-19
% of the Federal Acquisition Regulations ("FAR") (or any successor
% regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
% NASA Supplement to the FAR (or any successor regulations).
%
% =========================================================================
% 
% Commercial licensing and support of this software is available from
% OpenSS7 Corporation at a fee.  See http://www.openss7.com/
% 
% =========================================================================
%
% Last Modified $Date: 2008-11-26 12:01:52 $ by $Author: brian $
%
% =========================================================================
%
% $Log: dlpi_porting.texi,v $
% Revision 0.9.2.4  2008-11-26 12:01:52  brian
% - updated to FDL 1.3
%
% Revision 0.9.2.3  2008-09-20 11:04:43  brian
% - added package patchlevel
%
% Revision 0.9.2.2  2008-08-03 06:03:41  brian
% - protected agains texinfo commands in log entries
%
% Revision 0.9.2.1  2008-06-18 16:43:15  brian
% - added new files for NLI and DLPI
%
% =========================================================================

\input texinfo
@setfilename dlpi_porting.info
@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE DLPI Porting Guide
@settitle @value{MANUAL_TITLE}

@dircategory STREAMS
@direntry
* DLPI Porting: (dlpi_porting).			A DLPI Porting Guide.
@end direntry

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE DLPI Porting Guide

@comment The following copyright information goes at the head of each .info file.
@ifinfo
This file provides the @value{MANUAL_TYPE} for @value{MANUAL_TITLE}.

This is Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}, last updated @value{PACKAGE_DATE}, of
the @cite{@value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version
@value{PACKAGE_VERSION} Release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}.

Copyright @copyright{} 2001-2008  @uref{http://www.openss7.com/, OpenSS7 Corporation} @*
Copyright @copyright{} 1997-2000  @email{bidulock@@openss7.org, Brian F. G. Bidulock}

All Rights Reserved.

Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@ignore
Permission is granted to process this file through Tex and print the results,
provided the printed manual carries copying permission notice identical to this
one except for the removal of this paragraph (this paragraph not being relevant
to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided the entire resulting derived
work is distributed under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute translations of this manual into
another language, under the above conditions for modified versions.
@end ifinfo

@include texi/args.texi
@set MANUAL_TITLE @value{PACKAGE_TITLE}
@set MANUAL_TYPE DLPI Porting Guide

@ignore
@shorttitlepage @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@end ignore
@titlepage
@titlefont{@value{MANUAL_TITLE}}
@sp 0.5
@title @value{MANUAL_TYPE}
@subtitle Version @value{PACKAGE_VERSION} Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}
@subtitle Updated @value{PACKAGE_DATE}
@sp 0.2
@subtitle Package @value{PACKAGE}-@value{VERSION}
@author Brian Bidulock <@email{bidulock@@openss7.org}> for
@sp 0.2
@author The OpenSS7 Project <@uref{http://www.openss7.org/}>

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001-2008  OpenSS7 Corporation <@uref{http://www.openss7.com/}> @*
Copyright @copyright{} 1997-2000  Brian F. G. Bidulock <@email{bidulock@@openss7.org}> @*
All Rights Reserved. @*

@noindent
Published by OpenSS7 Corporation @*
1469 Jefferys Crescent @*
Edmonton, Alberta  T6L 6T1 @*
Canada @*

@noindent
This is texinfo edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} of the @value{MANUAL_TITLE}
manual, and is consistent with @value{PACKAGE_NAME} @value{PACKAGE_VERSION}.
This manual was developed under the @uref{http://www.openss7.org/, OpenSS7
Project} and was funded in part by @uref{http://www.openss7.com/, OpenSS7
Corporation}.

@noindent
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved on all
copies.

@noindent
Permission is granted to copy and distribute modified versions of this manual
under the conditions for verbatim copying, provided that the entire resulting
derived work is distributed under the terms of a permission notice identical to
this one.

@noindent
Permission is granted to copy and distribute translations of this manual into
another language, under the same conditions as for modified versions.

@vskip 0pt
@end titlepage
@page

@c Define an index of authors.
@c @defindex au

@c Define an index of makefile targets
@c @defcodeindex mk

@c Define an index of configure output variables.
@c @defcodeindex ov

@c Define an index of configure variables.
@c @defcodeindex cv

@c Define an index of options.
@c @defcodeindex op

@c Define an index of targets.
@c @defcodeindex tr

@c Define an index of commands.
@c @defcodeindex cm

@c Put the macros and variables into their own index.
@c @syncodeindex fn cp
@c @syncodeindex ov vr
@c @syncodeindex cv vr
@c @syncodeindex fn vr

@c Put everything else into one index (arbitrarily chosen to be the concept index).
@c @syncodeindex op cp
@c @syncodeindex tr cp
@c @syncodeindex cm cp

@c An index of manual pages
@defcodeindex mp

@c Define an index of primitives.
@defcodeindex pr
@c Define an index of primitive values.
@defcodeindex pv
@c Define an index of protocol states.
@defcodeindex st
@c Define an index of protocol errors.
@defcodeindex pe
@c Define an index of DLPI input-output controls.
@defcodeindex ci

@synindex tp cp
@synindex fn cp
@syncodeindex vr cp
@synindex pg cp

@syncodeindex pr cp
@syncodeindex pv cp
@syncodeindex st cp
@syncodeindex pe cp
@syncodeindex ci cp

@synindex mp cp

@include texi/macros.texi
@include texi/versions.texi

@iftex

@macro prim {name}
@code{\name\}@prindex \name\
@end macro

@macro pval {name}
@code{\name\}@pvindex \name\
@end macro

@macro perr {name}
@code{\name\}@peindex \name\
@end macro

@macro psta {name}
@code{\name\}@stindex \name\
@end macro

@macro parm {name}
@code{\name\}@vrindex \name\
@end macro

@macro dlioc {name}
@code{\name\}@ciindex \name\
@end macro

@end iftex

@ifnottex

@macro prim {name}
@code{\name\}
@end macro

@macro pval {name}
@code{\name\}
@end macro

@macro perr {name}
@code{\name\}
@end macro

@macro psta {name}
@code{\name\}
@end macro

@macro parm {name}
@code{\name\}
@end macro

@macro dlioc {name}
@code{\name\}
@end macro

@end ifnottex

@ifnottex
@node Top
@top @value{MANUAL_TITLE} @value{MANUAL_TYPE}
@unnumbered About This Manual
This is Edition @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL}, last updated @value{PACKAGE_DATE}, of
@cite{The @value{MANUAL_TITLE} @value{MANUAL_TYPE}}, for Version
@value{PACKAGE_VERSION} release @value{PACKAGE_RELEASE}@value{PACKAGE_PATCHLEVEL} of the
@value{PACKAGE_TITLE} package.
@end ifnottex

@menu
* Preface::
* Introduction::
* Porting::
* General Porting Considerations::
* Porting from DLPI::
* Porting from AIX::
* Porting from AIXlink/X.25::
* Porting from HP-UX::
* Porting from IRIX::
* Porting from LiS::
* Porting from OSF::
* Porting from PowerMAX::
* Porting from Solaris::
* Porting from Solstice X.25::
* Porting from SVR4.2::
* Porting from UnixWare::
* Developing on OpenSS7::
* Licenses::
* Indices::
@end menu

@c --------------------------------------------------------------------------

@node Preface
@unnumbered Preface

@menu
* Notice::			Notices for this manual
* Abstract::			Abstract for this manual
* Revisions::			Revisions for this manual
* Disclaimer::			IPR Disclaimers for this manual
* Acknowledgements::		Sponsors and Contributors
@end menu

@node Notice
@unnumberedsec Notice
@cindex manual notice
@cindex licensing

This version of  @command{@value{PACKAGE_TARNAME}} is a version modified by
@uref{http://www.openss7.org/, The OpenSS7 Project} that contains drivers and
modules previously part of @cite{Linux STREAMS}@footnote{@xref{Top, Top, About
This Manual, LiS, Linux STREAMS (LiS) Installation and Reference Manual}.}.  In
stark contrast to many other software packages released by
@uref{http://www.openss7.org/, The OpenSS7 Project}, this package contains code
developed by other parties.

This package is released and distributed under the @cite{AGPL} (@pxrefman{GNU
Affero General Public License}).  Please note, however, that there are different
licensing terms for the manual pages and some of the documentation (derived from
OpenGroup@footnote{Formerly X/Open and UNIX International.} publications and
other sources).  Consult the permission notices contained in the documentation
for more information.

This manual is released under the @cite{FDL} (@pxrefman{GNU Free Documentation
License}) with no invariant sections.

@node Abstract
@unnumberedsec Abstract
@cindex manual abstract

This manual provides a @cite{@value{MANUAL_TYPE}} for
@cite{@value{PACKAGE_TITLE}}.

@unnumberedsubsec Objective
@cindex manual objective

The objective of this manual is to provide a porting guide for the @dfn{STREAMS}
and @dfn{DLPI} programmer when porting @dfn{STREAMS} drivers, modules and
applications to @cite{@value{PACKAGE_TITLE}} from other major implementations of
@dfn{DLPI}, such as @cite{AIX}, @cite{AIXlink/X.25}, @cite{Digital UNIX},
@cite{HP-UX}, @cite{IRIX}, @cite{OSF}, @cite{PowerMAX}, @cite{Solaris}, @cite{Solstice X.25},
@cite{SVR4.2}, @cite{Tru64 UNIX}, @cite{UnixWare}, and others.

This guide provides information to developers on the use of the @dfn{DLPI}
interfaces and drivers at the user and kernel levels as well as the difference
between the OpenSS7 implementation of DLPI drivers and those of these other
systems.

@unnumberedsubsec Intent
@cindex manual intent

The intent of this manual is to act as a guide to porting @dfn{DLPI}
@dfn{STREAMS} modules, drivers and applications programs from other @dfn{UNIX}
implementations of @dfn{DLPI} to @cite{Linux Fast-STREAMS}@footnote{@xref{Top,
Linux Fast-STREAMS, About This Manual, STREAMS, Linux Fast-STREAMS (LfS)
Reference Manual}.}.  It is intended to be read alone and is not intended to
replace or supplement the @cite{@value{PACKAGE_TITLE}} manual pages.  For a
reference for writing code, the manual pages (see @manref{dlpi(7)}) provide a
btter reference to the programmer.  Although this describes the features of the
@cite{@value{PACKAGE_TITLE}} package, @uref{http://www.openss7.com/,OpenSS7
Corporation} is under no obligation to provide any software, system or features
listed herein.

@unnumberedsubsec Audience
@cindex manual audience

This manual is intended for a highly technical audience.  The reader should
already be familiar with @cite{Linux} kernel and user application programming,
the @cite{Linux} file system, character devices, driver input and output,
interrupts, software interrupt handling, scheduling, process contexts,
multiprocessor locks, thread programming, POSIX porgramming, etc.

This guide is intended for network and systems programmers, who use the
@dfn{STREAMS} and @dfn{DLPI} mechanism at user and kernel levels for
@cite{Linux} and @cite{UNIX} system communications services.  Readers of the
guide are expected to possess prior knowledge of the @cite{Linux} and
@cite{UNIX} system, programming, networking, and data communication.

To derive maximum use from this porting guide, it is intended that the reader
also be familiar with the user of @dfn{STREAMS} and @dfn{DLPI} under @cite{UNIX}
and @cite{POSIX} systems implementing @dfn{DLPI} drivers and applications
libraries.  The reader should certainly be familiar with the @dfn{DLPI}
implementations on the @cite{UNIX} or @cite{POSIX} system from which
@dfn{STREAMS} drivers, modules or applications are being ported.

@node Revisions
@unnumberedsec Revisions
@cindex manual revisions

Take care that you are working with a current version of this manual: you will
not be notified of updates.  To ensure that you are working with a current
version, contact the @uref{mailto:bidulock@@openss7.org,Author}, or check
@uref{http://www.openss7.org/,The OpenSS7 Project} website for a current
version.

A current version of this manual is normally distributed with the
@cite{@value{PACKAGE_TITLE}} package,
@command{@value{PACKAGE}-@value{VERSION}}.@footnote{@url{http://www.openss7.org/tarballs/@value{PACKAGE}-@value{VERSION}.tar.bz2}}

@unnumberedsubsec Version Control

@smallexample
@verbatim
$Log: dlpi_porting.texi,v $
Revision 0.9.2.4  2008-11-26 12:01:52  brian
- updated to FDL 1.3

Revision 0.9.2.3  2008-09-20 11:04:43  brian
- added package patchlevel

Revision 0.9.2.2  2008-08-03 06:03:41  brian
- protected agains texinfo commands in log entries

Revision 0.9.2.1  2008-06-18 16:43:15  brian
- added new files for NLI and DLPI
@end verbatim
@end smallexample

@unnumberedsubsec ISO 9000 Compliance

Only the @TeX{}, texinfo, or roff source for this manual is controlled.  An
opaque (printed, postscript or portable document format) version of this manual
is an @strong{UNCONTROLLED VERSION}.

@node Disclaimer
@unnumberedsec Disclaimer
@cindex manual disclaimer

@noindent
@cite{OpenSS7 Corporation} disclaims all warranties with regard to this
documentation including all implied warranties of merchantability, fitness for a
particular purpose, non-infringement, or title; that the contents of the manual
are suitable for any purpose, or that the implementation of such contents will
not infringe on any third party patents, copyrights, trademarks or other rights.
In no event shall @cite{OpenSS7 Corporation} be liable for any direct, indirect,
special or consequential damages or any damages whatsoever resulting from loss
of use, data or profits, whether in an action of contract, negligence or other
tortious action, arising out of or in connection with any use of this manual or
the performance or implementation of the contents thereof.

@noindent
@cite{OpenSS7 Corporation} reserves the right to revise this software and
documentation for any reason, including but not limited to, conformity with
standards promulgated by various agencies, utilization of advances in the state
of the technical arts, or the reflection of changes in the design of any
techniques, or procedures embodied, described, or referred to herein.
@cite{OpenSS7 Corporation} is under no obligation to provide any feature listed
herein.

@unnumberedsubsec U.S. Government Restricted Rights

If you are licensing this Software on behalf of the U.S. Government
("Government"), the following provisions apply to you.  If the Software is
supplied by the Department of Defense ("DoD"), it is classified as "Commercial
Computer Software" under paragraph 252.227-7014 of the DoD Supplement to the
Federal Acquisition Regulations ("DFARS") (or any successor regulations) and the
Government is acquiring only the license rights granted herein (the license
rights customarily provided to non-Government users).  If the Software is
supplied to any unit or agency of the Government other than DoD, it is
classified as "Restricted Computer Software" and the Government's rights in the
Software are defined in paragraph 52.227-19 of the Federal Acquisition
Regulations ("FAR") (or any successor regulations) or, in the cases of NASA, in
paragraph 18.52.227-86 of the NASA Supplement to the FAR (or any successor
regulations).

@c ----------------------------------------------------------------------------

@node Acknowledgements
@unnumberedsec Acknowledgements
@cindex credits

@include texi/funding.texi

@c ----------------------------------------------------------------------------

@node Introduction
@chapter Introduction
@cindex introduction

This guide documents the porting of @dfn{DLPI} @dfn{STREAMS} modules, drivers
and applications programs from various @dfn{UNIX} implementations to @cite{Linux
Fast-STREAMS}@footnote{@xref{Top, Linux Fast-STREAMS, About This Manual,
STREAMS, Linux Fast-STREAMS (LfS) Reference Manual}.}.

@menu
* Overview::			Overview
* Organization::		Organization
* Conventions::			Conventions
* Concepts::			Concepts
@end menu

@c ----------------------------------------------------------------------------

@node Overview
@section Overview
@cindex guide overview

This guide documents the porting of @dfn{DLPI} drivers, modules and applications
programs from various @dfn{UNIX} implementations of @dfn{DLPI} to @cite{Linux
Fast-STREAMS}@footnote{@xref{Top, Linux Fast-STREAMS, About This Manual,
STREAMS, Linux Fast-STREAMS (LfS) Reference Manual}.}.  It details some of the
differences between other implementations of @dfn{DLPI} and that of @cite{Linux
Fast-STREAMS}@footnote{@xref{Top, Linux Fast-STREAMS, About This Manual,
STREAMS, Linux Fast-STREAMS (LfS) Reference Manual}.}.

@noindent
In addition, it provides documentation on @dfn{STREAMS} drivers and modules for
@dfn{DLPI} including:

@itemize
@item Linux DLPI Driver (@file{streams-dl.o}),
@item Linux IP to DLPI Driver (@file{streams-ldl.o}),
@item DLPI to Linux IP Driver (@file{streams-ip_to_dlpi.o}), and
@item DLPI to Linux IP Module (@file{streams-ip_strm_mod.o}).
@end itemize

@c ----------------------------------------------------------------------------

@node Organization
@section Organization
@cindex guide organization

This manual is organized (loosely) into several sections as follows:

@c ----------------------------------------------------------------------------

@node Conventions
@section Conventions
@cindex guide conventions

This manual uses @cite{texinfo} typographic conventions.

@c ----------------------------------------------------------------------------

@node Concepts
@section Concepts
@cindex concepts

@c ----------------------------------------------------------------------------

@node Porting
@chapter Porting
@cindex porting

@menu
* Porting Organization::
@end menu

This guide is largely focused on porting @dfn{STREAMS} drivers, modules and
applications programs that act in the capacity of a @dfn{DLS User}.  Whereas
other documents tend to focus on simply porting drivers for specific interface
cards, that topic is adequately addressed elsewhere for the @cite{Linux}
kernel.@footnote{For writing or porting device drivers such as Ethernet card
drivers to @cite{Linux}, see the O'Reilly ``@cite{Horse}'' book: @cite{Writing
Linux Device Drivers} an its latest edition.}  Whenever a network device driver
has been written for a device under @cite{Linux}, using @cite{Linux} paradigms
and procedures, it can automatically work with @dfn{DLPI}.  Therefore, this
guide focusses on the differences between the @dfn{DLPI} interfaces that would
be experienced by the @dfn{DLS User}: @dfn{STREAMS} modules that push over DLPI
Streams; @dfn{STREAMS} drivers under which DLPI Streams are linked; and
applications programs that access the DLPI interface directly as a user-space
program.

@cite{Linux Fast-STREAMS} and each of its add-on packages, including
@cite{@value{PACKAGE_TITLE}}, ship with a wide assortment of manual pages.  Most
manual pages contain a section entitled ``@cite{COMPATIBILITY}'' that provides
compatibility and porting information for various mainstream @cite{UNIX}
implementations.  For information on the minor differences in the @dfn{STREAMS}
environment, see the @cite{Linux Fast-STREAMS} package,
@command{streams-@value{VERSION_STREAMS}}.

There are hundreds of manual pages in the @cite{@value{PACKAGE_TITLE}} package
for @dfn{DLPI}.  These manual pages can be explored best by starting with the
@manref{dlpi(7)} manual page.  The manual pages document both DLPI Revision
2.0.0 standard behaviour, as well as the @cite{@value{PACKAGE_TITLE}}
implementations of extension primitives, input-output controls, and features
documented for other operating systems including @cite{AIX},
@cite{AIXlink/X.25}, @cite{HP-UX}, @cite{IRIX}, @cite{LiS}, @cite{OSF}, @cite{PowerMAX},
@cite{Solaris}, @cite{Solstice X.25}, @cite{SVR 4}, @cite{SVR 4.2MP},
@cite{UnixWare 7}.  Although each of the @dfn{DLPI} related manual pages of
supported functions, primitives and structures provide compatibilty and porting
information, this document attempts to gather together pertinent information
concerning porting @dfn{DLPI} modules, drivers and applications programs from
various @dfn{UNIX} operating systems supporting @dfn{STREAMS} and @dfn{DLPI} to
@cite{@value{PACKAGE_TITLE}}.

@node Porting Organization
@section Porting Organization

The porting information in this guide is organized by the flavor of operating
system from which porting is being attempted.  Note that, aside from
configuration details, any system not listed here that is based on @cite{SVR 4},
@cite{SVR 4.2MP}, or on another of the implementations, should start with that
implementation's portability information.  Porting information is included for
porting from implementations based on a strict interpretation of the @dfn{DLPI}
standards, the @cite{AIX} operating system and the @cite{AIXlink/X.25} package,
the @cite{HP-UX} operating system, the @cite{IRIX} operating system, the
@cite{LiS} package, the @cite{OSF}, @cite{Digital UNIX}, or @cite{Tru64 UNIX}
operating system, the @cite{PowerMAX} operating system, the @cite{Solaris}
operating system and the @cite{Solstice X.25} or @cite{SunLink X.25} packages,
the @cite{SVR 4} and @cite{SVR 4.2MP} operating system, and the @cite{UnixWare
7} operating system.

Note that additional porting information with regard to porting @dfn{X.25}
applications from various implementations to @cite{Linux Fast-STREAMS} is
detailed in the @cite{X.25 Porting Guide} which is part of the @cite{OpenSS7
X.25} package (@file{strx25}).

Porting information is organized into sections as follows:

@ifnottex
@menu
* General Porting Considerations::
* Porting from DLPI::
* Porting from AIX::
* Porting from AIXlink/X.25::
* Porting from HP-UX::
* Porting from IRIX::
* Porting from LiS::
* Porting from OSF::
* Porting from PowerMAX::
* Porting from Solaris::
* Porting from Solstice X.25::
* Porting from SVR4.2::
* Porting from UnixWare::
* Developing on OpenSS7::
@end menu
@end ifnottex
@ifnotinfo
@multitable @columnfractions .50 .50
@item @ref{Porting from DLPI}
@tab Porting general DLPI applications.
@item @ref{Porting from AIX}
@tab Porting AIX DLPI applications.
@item @ref{Porting from AIXlink/X.25}
@tab Porting AIXlink/X.25 DLPI applications.
@item @ref{Porting from HP-UX}
@tab Porting HP-UX DLPI applications.
@item @ref{Porting from IRIX}
@tab Porting IRIX DLPI applications.
@item @ref{Porting from LiS}
@tab Porting LiS DLPI applications.
@item @ref{Porting from OSF}
@tab Porting OSF DLPI applications.
@item @ref{Porting from PowerMAX}
@tab Porting PowerMAX DLPI applications.
@item @ref{Porting from Solaris}
@tab Porting Solaris DLPI applications.
@item @ref{Porting from Solstice X.25}
@tab Porting Solstice X.25 DLPI applications.
@item @ref{Porting from SVR4.2}
@tab Porting SVR4.2 DLPI applications.
@item @ref{Porting from UnixWare}
@tab Porting UnixWare DLPI applications.
@item @ref{Developing on OpenSS7}
@tab Developing DLPI applications on OpenSS7.
@end multitable
@end ifnotinfo
@ifplaintext
@multitable @columnfractions .50 .50
@item @cite{Porting from DLPI}
@tab Porting general DLPI applications.
@item @cite{Porting from AIX}
@tab Porting AIX DLPI applications.
@item @cite{Porting from AIXlink/X.25}
@tab Porting AIXlink/X.25 DLPI applications.
@item @cite{Porting from HP-UX}
@tab Porting HP-UX DLPI applications.
@item @cite{Porting from IRIX}
@tab Porting IRIX DLPI applications.
@item @cite{Porting from LiS}
@tab Porting LiS DLPI applications.
@item @cite{Porting from OSF}
@tab Porting OSF DLPI applications.
@item @cite{Porting from PowerMAX}
@tab Porting PowerMAX DLPI applications.
@item @cite{Porting from Solaris}
@tab Porting Solaris DLPI applications.
@item @cite{Porting from Solstice X.25}
@tab Porting Solstice X.25 DLPI applications.
@item @cite{Porting from SVR4.2}
@tab Porting SVR4.2 DLPI applications.
@item @cite{Porting from UnixWare}
@tab Porting UnixWare DLPI applications.
@item @cite{Developing on OpenSS7}
@tab Developing DLPI applications on OpenSS7.
@end multitable
@end ifplaintext

@c ----------------------------------------------------------------------------

@page
@node General Porting Considerations
@chapter General Porting Considerations
@cindex general porting considerations

@menu
* Driver Addressing::
* Driver Features::
* Primitives::
* Driver Input-Output Controls::
* Device Drivers and Modules::
* Support and Add-On Libraries::
* Support and Management Utilities::
* Device and Driver Management::
@end menu

There are several aspects of porting from the various environments to
@cite{Linux Fast-STREAMS} that can be categorized roughly by the functional
interface to which the aspect corresponds.  These apects are:

@table @i
@item DLPI Driver Features

This aspect includes support for features that are pervasive over the other
aspects, but entail some service or feature that is not provided directly by the
DLPI standard specification.  Some examples are Raw Mode, LLC2 Mode, Fast Path,
and combined Connectionless and Connection-Oriented mode drivers.
@item DLPI and Extension Primitives

This aspect include support for standard DLPI primitive subsets as well as
additional implementation-specific extension primitives not found in the DLPI
standard.
@item DLPI Driver Input-Output Controls

This apsect includes the implementation-specific, or somethimes
protocol-specific, input-output controls provided in support of DLPI drivers,
modules and add-on libraries.
@item DLPI Device Drivers and Modules.

This aspect includes the @dfn{STREAMS} device drivers and pushable modules that
are provided by an implementation.  It also includes the device driver
organization (whether split into a generic interface component and a device
specific component, or not).
@item DLPI Support and Add-On Libraries

This aspect includes the shared-object support or add-on libraries that are used
to manage or provide application programming interfaces to the DLPI device
drivers.
@item DLPI Support and Management Utilities

This apsect includes utilities provided with the system that support the
configuraiton, management or trouble-shooting of DLPI drivers and modules,
whether DLPI generic, or protocol-specific.
@item DLPI Device and Driver Management

This aspect includes SNMP and CMIP agents and the associated MIBs that provide
for remote management of the DLPI device drivers and applications.
@end table

The sections that follow provide an overview of each of these aspects.  Also,
each specific porting section has sub-sections that detail each of these aspects
for a specific porting scenario.

@node Driver Addressing
@section Driver Addressing

@menu
* Driver Naming::
* PPA Selection::
* SAP Addressing::
* Primitive Addresses::
* Quality of Service Parameters::
@end menu

@node Driver Naming
@subsection Driver Naming

@node PPA Selection
@subsection PPA Selection

Some DLPI implementations provide only Style 1 drivers (that do not require PPA
selection); some provide only Style2 drivers (that require PPA selection); and,
some support both Style 1 and Style 2.  Others, like @cite{AIXlink/X.25} provide
a Style 1 driver that acts like a Style 2 driver in that the PPA is encoded in
the SAP during bind.

Some Style 2 drivers are multiplexing STREAMS drivers that need PPA-specific
Streams linked beneath the multiplexing driver.  Other Style 2 drivers have
access to all installed PPAs internal to the DLPI driver implementation.

@cite{@value{PACKAGE_TITLE}} provides fundamentally Style 2 drivers that have
access to all Linux native devices in the system but which can also be
individually accessed suing a Style 1 access to the same driver.
@cite{@value{PACKAGE_TITLE}} has Style 2 PPAs and Style 1 minor device numbers
that are based on the @var{ifIndex} of the network device.

Style 2 drivers that use a multiplexing STREAMS driver normally have some
configuration program that assigns the PPA for each linked Stream.  Some
implementations provide a mechanism whereby the DLS User can determine which
PPAs are available in the system and the characteristics of each PPA.
@cite{HP-UX} provides such a facility.

@node SAP Addressing
@subsection SAP Addressing

SAP addressing varies somewhat from implementation to implementation for LAPB,
HDLC and SDLC; however, most implementations are the same for Ethernet and LLC
SAP addressing.  For @pval{DL_CSMACD}, normally if the @parm{dl_sap} field in
the @prim{DL_BIND_REQ} contains a one-byte value, it is considered to be an LLC
SAP.  This SAP must be an even number between 0x02 and 0xFE inclusive.  For
Ethernet media, this results in an 802.2 LLC frame in an 802.3 length indicated
frame (length less than or equal to 1536).  When the @parm{dl_sap} field in
the @prim{DL_BIND_REQ} contains a two-byte value, it is considered to be an
Ethernet II EtherType.  For Ethernet media, the EtherType is carried in the
length indicator of the 802.3 frame.  For non-Ethernet media supporting LLC,
such as FDDI, Token-Ring or ATM, the framing is assumed to be SNAP with the
DSAP/SSAP of 0xAAAA, unnumbered information control field (0x03), OUI of
0x000000, and then then two-byte Ethertype, unless the Ethertype SAP bound is
itself 0xAAAA or 0xAA.  When the SAP bound is 0xAAAA or 0xAA, a subsequent bind
operation containing the control field, OUI and protocol identifier is
necessary, providing these fields in the @parm{dl_sap_length} and
@parm{dl_sap_offset} fields of the @prim{DL_SUBS_BIND_REQ}.  Some
implementations do no permit two-byte binds on SNAP and require a subsequent
bind, where as some will perform Ethernet SNAP automatically on a two-byte bind.

For LAPB, LAPF, LAPD, HDLC and SDLC, some implementations code the logical line
number (or TEI or DLCI) in the SAP, as well as whether the station is a primary
or secondary station.  Some require PPA configuration to determine whether
address fields are extended or normal.  @cite{@value{PACKAGE_TITLE}}
automatically determines whether station addresses are extended or normal from
the significant bits in the bound SAP, and uses a high byte to determine the
role of the station.  This is inconsistent accross implementations and
compatibility requires porting the DLS user to use the SAP addressing scheme
provided by @cite{@value{PACKAGE_TITLE}}.

@node Primitive Addresses
@subsection Primitive Addresses

For most implemetnations and in normal modes, the address used in the
@prim{DL_UNITDATA_REQ} or @prim{DL_CONNECT_REQ} or @prim{DL_CONNECT_RES}
primitives require the entire DLSAP of the destination to be specified.  For
Ethernet operation, this is the 6-byte MAC address (DA) of the destination (for
Token Ring the 8-byte full MAC is derived from the 6-byte MAC).  For LLC
operation, this is the 6-byte MAC address (DA) followed by the one-octet DSAP.

For LLC or SNAP operation, in normal modes the Unnumbered Information control
field (0x03) is automatically included by the driver.  In LLC2 Mode, on some
implemetnations, the DLS User must provide the control field.

Link layer headers are produced automatically in normal modes.  The SA and SSAP
are determined using the bound SAP and attached PPA, and are typically an
individual address.  When in the raw mode, addresses are not provided in the
@prim{DL_UNITDATA_REQ}, @prim{DL_DATA_REQ} or @prim{DL_HP_RAWDATA_REQ}, and the
link layer headers must be completed by the DLS User and included in the data
payload of these primitives.

@node Quality of Service Parameters
@subsection Quality of Service Parameters

Most implementations do not support quality of service parameters.

@cite{@value{PACKAGE_TITLE}} supports quality of service parameters using the
@pval{DL_QOS_CL_RANGE1}, @pval{DL_QOS_CL_SEL1} @pval{DL_QOS_CO_RANGE1}, and
@pval{DL_QOS_CO_SEL1} structure types.

@node Driver Features
@section Driver Features
@cindex features

@menu
* LAN Operation::
* WAN Operation::
* Driver Modes::
@end menu

Driver features that distinguish DLPI implementations tend to be which LAN and
WAN protocols are supported directly, and which major modes in which the driver
can operate.  Most implementations provide direct support for LAN operation,
Ethernet, SNAP and LLC Type 1, and support a Raw, LLC2, and Promiscuous Modes.
Some implementations go on to support LLC Type 2, WAN operation under LAPB, LAPD
and LAPF, and support Fast Path and combined connectionless and connect-oriented
modes.

In support of porting from as wide an array of implementations as possible,
@cite{@value{PACKAGE_TITLE}} provides support for both LAN and WAN operation,
all types, except LLC Type 3, and all driver modes.

@node LAN Operation
@subsection LAN Operation
@cindex lan operation

Lan operation breaks down into Ethernet, LLC SNAP, LLC Type 1, LLC Type 2, and
LLC Type 3 operation.  No DLPI implementations support LLC Type 3 directly.
Some implementations do not support LLC Type 2 directly, but some provide an
LLC2 mode instead.  All support Ethernet, SNAP and LLC Type 1.

For as wide a range of portability as possible, @cite{@value{PACKAGE_TITLE}}
supports EthernetII, SNAP, LLC Types 1 and 2, as well as LLC2 mode.  LLC Type 3
is not supported initially.

@subsubsection Ethernet and SNAP Operation

All DLPI implementations detailed in this document support EthernetII and
ISO/IEC 8802-2 (IEEE 802.2) SNAP operation for providing EthernetII over LLC.
Some implementations also support non-Ethernet SNAP for private or experimental
protocols.

@cite{@value{PACKAGE_TITLE}} also supports EthernetII and SNAP operation and
also provides support for non-Ethernet SNAP for private or experimental
protocols using the @prim{DL_SUBS_BIND_REQ} primitive with the
@pval{DL_HIERARCHICAL_BIND} selection.

@subsubsection LLC Type 1 Operation
@cindex llc1 operation
@cindex llc type 1 operation

All DLPI implementations detailed in this document support ISO/IEC 8802-2 (IEEE
802.2) LLC Type 1 operation as is required by ISO/IEC 8802-2 (IEEE 802.2) Class
I operation.

@cite{@value{PACKAGE_TITLE}} supports LLC TYpe 1 in a fashion similar to most
implementations through a super-set of standard DLPI primitives, extension
primitives, and implementation-specific input-output controls.

@subsubsection LLC Type 2 Operation
@cindex llc2 operation
@cindex llc type 2 operation

A number of DLPI implementations detailed in this document support ISO/IEC
8802-2 (IEEE 802.2) LLC Type 2 operation as required for ISO/IEC 8802-2 (IEEE
802.2) Class II or IV operation.  Implementations support LLC Type 2 directly
are @cite{AIX} and @cite{HP-UX}.  An add-on package to @cite{Solaris} also
supports LLC Type 2 directly.

Some DLPI implementations support LLC Type 2 indirectly by providing an
@dfn{LLC2 Mode} of operation; however, this approach does not include LLC Type 2
state machines and also does not directly support connection-oriented mode data
link service.  See @ref{LLC2 Mode}.

@cite{@value{PACKAGE_TITLE}} supports both approaches to LLC Type 2.  The DLPI
driver provides a direct LLC Type 2 approach for @dfn{STREAMS} drivers, modules
and applications needing full DLPI @pval{DL_CODLS} support, as well as a
@pval{DL_CLDLS} @dfn{LLC2 Mode} that supports implementing LLC Type 2 in the DLS
user and upper layer protocol modules such as X.25.

@subsubsection LLC Type 3 Operation
@cindex llc3 operation
@cindex llc type 3 operation

No DLPI impleentations detailed in this document support ISO/IEC 8802-2 (IEEE
802.2) LLC Type 3 operation directly as would be required for ISO/IEC 8802-2
(IEEE 802.2) Class III or IV operation.  There may be some add-on software, but
documentation for such software is not readily available.

@node WAN Operation
@subsection WAN Operation
@cindex wan operation

Few @cite{UNIX} implementations support WAN operation (LAPB, LAPF, LAPD)
directly.  A possible exception is @cite{AIX}, which appears to integrate a wide
range of data links, and @cite{UnixWare}, which appears to integrate LAPD.
Other implementations require add-on or value-add software packages to support
WAN links.

The @cite{@value{PACKAGE_TITLE}} DLPI driver supports WAN links directly,
accessing Linux native raw HDLC network devices supported by the Linux kernel.
Additional packages for X.25 and ISDN support @dfn{STREAMS} based raw HDLC
network devices in support of LAPB, LAPD and LAPF in a similar fashion.  The
full range of standard DLPI primitives, implementation specific extension
primitives, and implementation specific input-output controls are supported
across the WAN link implementations as well.

@node Driver Modes
@subsection Driver Modes

Most DLPI implementations support a @dfn{Promiscuous Mode}, and this mode is the
only major driver mode for which service primitive support is provided in the
DLPI standard.  Many implementations provide a @dfn{Raw Mode} for monitoring and
capture purposes, or for new protocol development.  Implementations that do not
provide LLC Type 2 directly often provide an @dfn{LLC2 Mode} which is useful to
avoid full @dfn{Raw Mode} when LLC Type 2 is implemented by higher protocol
modules.  Some implementations provide a @dfn{CMSA/CD Mode}; other
implementations default to this behaviour anyway.  A few implementations provide
a @dfn{Fast Path} mode of operation whereby upper layer network protocol modules
can associate a network address with a DLSAP and provide complete link-layer
header creation from a cache instead of requiring the DLPI layer to regenerate
the link-layer headers for each packet transmitted.  @cite{AIX} has a combined
LLC Type 1 (@pval{DL_CLDLS}) and LLC Type 2 (@pval{DL_CODLS}) data link service
mode whereby both connectionless and connection-oriented service can be invoked
on the same Stream.  This makes use of LLC Type 2 direct support by upper layer
protocol modules somewhat simplified.

@cite{@value{PACKAGE_TITLE}} implements all driver modes in an attempt to be
compatible with as wide a range of DLPI implementations as possible, at least at
the source-compatibility level.

@subsubsection Promiscuous Mode

A number of DLPI implementations support a @dfn{Promiscuous Mode}.  Promiscuous
mode is directly supported by the standard DLPI specification with the
@prim{DL_PROMISCON_REQ} and @prim{DL_PROMISCOFF_REQ}.  The promiscuous mode is
normally available at three levels: the physical, SAP and multicast address
level.  Promiscuous mode at the physical level is intended for monitoring at the
physical level on the link: all messages received from the wire regardless of
DLSAP are delivered to the DLS user.  Promiscuous mode at the SAP level permits
all messages intended for bound DLSAP, but for any SAP component in the DLSAP,
are delivered to the DLS user.  Promiscuous mode at the multicast address level
normally means that all messages intended for any multicast address and bound
SAP component will be delivered to the DLS user.  By its very nature, promscuous
modes are related to a connectionless data link service, @pval{DL_CLDLS}.

Some implementations support all three promiscuous levels using the standard
DLPI @prim{DL_PROMISCON_REQ} and @prim{DL_PROMISCOFF_REQ} primitives.  Others
required the use of implementation-specific input-output controls.  Sometimes
SAP level promiscous mode is implemented by binding to a special SAP value,
@pval{PROMISCUOUS_SAP}.  Some implementations do not have a promiscuous mode at
the multicast or group address level.  Yet others do no provide promiscuous
modes at all.

@cite{@value{PACKAGE_TITLE}} supports promiscuous mode using the standard DLPI
@prim{DL_PROMISCON_REQ} and @prim{DL_PROMISCOFF_REQ} primitives, but also
supports binding to the @pval{PROMISCUOUS_SAP}, activation of promicuous
modes using input-output controls: primarily @dlioc{DLIOCSPROMISC},
@dlioc{DLIOCGPROMISC}, and activation of multicast addresses using
implementation specific extensions used to enable all multicast addresses.

@subsubsection Raw Mode
@anchor{Raw Mode}
@cindex raw mode

All drivers the support the connectionless-mode data link service provide a
@dfn{raw mode}.  Drivers that do not support connectionless-mode data link
service, such as @cite{AIXlink/X.25} and @cite{Solstice X.25}, do not support a
@dfn{raw mode}.

@dfn{Raw Mode} is a specialized mode in which the driver can be placed that
permits the examination and generation of link-layer headers including MAC
addresses.  What it does is extend the information included in data packets
delivered to the DLS User with the complete link layer headers, including the
link layer addresses.  Also, data packets requested by the DLS User for
transmission also include the complete link-layer headers (including MAC
addresses).

One of the major purposes of the @dfn{raw mode} has been the interfacing of
networking device drivers to packet monitoring and capture libraries such as the
@manref{pcap(3)} library.  For this application it is quite effective when
combined with the @dfn{promiscuous mode}.

Unfortunately, this mode of operation was never standardized in the DLPI
specification, and thus implementations vary.  @cite{Solaris}, when placed in
this mode delivers packets to the DLS user with @prim{DL_DATA_IND} primitives
and expected @prim{DL_DATA_REQ} primitives from the DLS user; @cite{AIX} issues
@dfn{DL_UNITDATA_IND} or @dfn{DL_DATA_IND} primitives and expects
@dfn{DL_UNITDATA_REQ} or @dfn{DL_DATA_REQ} primitives; @cite{HP-UX} issues
@dfn{DL_HP_RAWDATA_REQ} primitives and expects @dfn{DL_HP_RAWDATA_REQ}
primitives.  Also, @cite{AIX}, @cite{Solaris} and others set the @dfn{raw mode}
using an input-output control, see @manref{dlpi_ioctl(4)}; @cite{HP-UX} uses a
specialized @parm{dl_service_mode} setting of
@pval{DL_HP_RAWDLS}.@footnote{For details on support for @cite{AIX}, see
@ref{AIX Raw Mode}, and @ref{AIXlink/X.25 Raw Mode}; for @cite{HP-UX}, see
@ref{HP-UX Raw Mode}; for @cite{LiS}, see @ref{LiS Raw Mode}; for @cite{OSF},
see @ref{OSF Raw Mode}; for @cite{PowerMAX}, see @ref{PowerMAX Raw Mode}; for
@cite{Solaris}, see @ref{Solaris Raw Mode}, and @ref{Solstice X.25 Raw Mode};
for @cite{SVR4.2}, see @ref{SVR4.2 Raw Mode}; for @cite{UnixWare}, see
@ref{UnixWare Raw Mode}.}

@subsubsection LLC2 Mode
@anchor{LLC2 Mode}
@cindex llc2 mode

Most implementations of DLPI that do not support ISO/IEC 8802-2 (IEEE 802.2) LLC
Type 2 operation directly, support an @dfn{LLC2 mode}.  Normally, for ISO/IEC
8802-2 (IEEE 802.2) LLC Type 1 operation, the link-layer headers including the
DA/SA, DSAP/SSAP and Unnumbered Information Control Field (0x03) are stripped
from the packet before it is delivered to the DLS User in a
@prim{DL_UNITDATA_IND} primitive.  Also, when the DLS User provided data for
transmission with a @prim{DL_UNITDATA_REQ} primitive, the driver adds DA/SA,
DSAP/SSAP and Unnumbered Information Control Field (0x03) before transmitting
the packet on the wire.

For LLC Type 2 operation, it is necessary that the DLS User be able to affect
the value and format of the Control Field so that the appropriate frame type can
be both received and transmitted.  Therefore, drivers that do not support the
@pval{DL_CLDLS} data link service mode, @parm{dl_service_mode}, support an
@dfn{LLC2 Mode}.  When a Stream is placed into @dfn{LLC2 Mode}, the DLS Provider
delivers and expects the control field to be part of the data payload present in
the @prim{DL_UNITDATA_IND} and @prim{DL_UNITDATA_REQ} primitives.  Other
@pval{DL_CLDLS} data link service mode operations are unaffected.  This permits
the DLS User to implement the ISO/IEC 8802-2 (IEEE 802.2) LLC Type 2 procedures
within the DLS User.

Implementations that support an @dfn{LLC2 Mode} are: @cite{LiS},@footnote{See
@ref{LiS LLC2 Mode}.} @cite{SVR4.2},@footnote{See @ref{SVR4.2 LLC2 Mode}.}
@cite{UnixWare}.@footnote{See @ref{UnixWare LLC2 Mode}.}

Implementations that provide direct support in the DLPI driver for LLC Type 2
operation do not normally have an @dfn{LLC2 Mode}.  These are: @cite{AIXlink
X.25},@footnote{See @ref{AIXlink/X.25 LLC2 Mode}.} @cite{HP-UX},@footnote{See
@ref{HP-UX LLC2 Mode}.} @cite{Solstice X.25}.@footnote{See @ref{Solstice X.25
LLC2 Mode}.}

@subsubsection CSMA/CD Mode
@anchor{CSMA/CD Mode}
@cindex csma/cd mode

@dfn{CSMA/CD Mode} is a major driver operating mode that permits both EthernetII
and ISO/IEC 8802-2 (IEEE 802.2) LLC operating over Ethernet media.  Some older
DLPI implementations required this mode to be set, otherwise, Ethernet drivers
would have to run either in a pure EthernetII mode or a pure ISO/IEC 8802-2
(IEEE 802.2) mode, but not both.

@cite{@value{PACKAGE_TITLE}} always runs in this mode (because @cite{Linux} is
set to operate in this mode for Ethernet media) and its selection is not
necessary, but is automatic.  The only wrinkle is for large MTU GiGE operation.

@subsubsection Fast Path

@dfn{Fast Path} is a major driver operating mode that provides for intermodule
coordination between the DLPI driver and upper layer protocols.  In this mode, a
mechanism is provided whereby the upper layer protocol module can determine the
link-layer headers for any given DLSAP.  The upper layer protocol module
caches these link-layer headers against the upper layer destination protocol
address (e.g. IP address) and provides those link-layer headers on each
@pval{DL_CLDLS} message send to DLPI.  Another mechanism is provided that allows
the DLS provider to indicate to the upper layer protocol module whenever
link-layer headers have been invalidated (for example, due to a
@prim{DL_SET_PHYS_ADDR_REQ} operation).  Upon receiving this indication, the
upper layer module refreshes its cache of link-layer headers by mapping needed
DLSAP addresses again.  @cite{Solaris} and @cite{HP-UX} provide such a @dfn{Fast
Path} mode of operation.

@cite{@value{PACKAGE_TITLE}} also provides @dfn{Fast Path} modes compatible with
@cite{Solaris} and @cite{HP-UX} in support of porting @dfn{STREAMS} drivers,
modules and applications to @cite{Linux}.

@subsubsection Combined Mode

Often a directly provided LLC Type 2 support in the DLPI driver is cumbersome
for upper layer protocol implementation that required both an LLC Type 1 access
for routing protocols and an LLC Type 2 access for connections.  Often, upper
layer protocol implementations will use @pval{DL_CLDLS} access in @dfn{Raw Mode}
or @dfn{LLC2 Mode} to circumvent the issue of having to link multiple Streams
for a single upper layer service.  @cite{AIX}, however, provides a combined
connectionless and connection-oriented mode to solve this issue using DLPI.  In
this mode, a Stream operates in both @pval{DL_CLDLS} and @pval{DL_CODLS} modes
simultaneously, permitting a single DLPI Stream to provide both connectionless
routing protocols as well as connection-oriented protocol connections.

In support of porting @cite{AIX} DLPI drivers, modules and applications to
@cite{Linux}, @cite{@value{PACKAGE_TITLE}} provides support for this combined
connectionless and connection-oriented mode.

@node Primitives
@section Primitives
@cindex primitives

Normally, DLPI implementations are based on the standard set of DLPI
primitives.@footnote{Data Link Provider Interface, UNIX International, Revision
2.0.0.}  Most implementations provide a subset of the management primitives, and
connectionless mode DLPI primitives.  This is usually sufficient to represent
MAC (Ethernet LAN) devices and ISO/IEC 8802-2 (IEEE 802.2) LLC Type 1 devices.
Some implementations also provide for connection-oriented mode DLPI primitives,
normally in support of ISO/IEC 8802-2 (IEEE 802.2) LLC Type 2 devices.  Most
implementations provide optional add-on softtware that uses connection-oriented
mode DLPI primitives in support of ISO/IEC 8208 (X.25) LAPB devices.  Several
implementations also provide extension primitives that support specific
management or extend the features of the DLPI.

@cite{AIX}, @cite{AIXlink/X.25}, @cite{IRIX}, @cite{LiS}, @cite{OSF},
@cite{PowerMAX}, @cite{Solstice X.25} and @cite{SVR4.2} do not document any
extension primitives for DLPI.

@cite{HP-UX} documents a number of general purpose management support extension
primitives for DLPI, as well as a set of connection-oriented mode DLPI extension
primitives designed to explicitly support management of ISO/IEC 8802-2 (IEEE
802.2) LLC Type 2 connections.
@cite{Solaris} documents a number of general purpose management support
extension primitives for DLPI, as well as a number of Solaris feature-specific
DLPI extension primitives.
@cite{UnixWare} documents a number of management support extension primitives
for DLPI.

@cite{@value{PACKAGE_TITLE}} supports all standard DLPI primitives and many
extension primitives provided by other implementations, @cite{HP-UX},
@cite{Solaris} and @cite{UnixWare}, for compatibilty and to ease porting of
@dfn{STREAMS} @dfn{DLPI} drivers, modules and applications programs to
@cite{Linux Fast-STREAMS}.

Each porting section includes a discussion of the supported standard DLPI
primitives and the extension primitives provided by each of the implementations,
and how the equivalent primitives can be best used when porting DLPI
applications to @cite{Linux Fast-STREAMS}.  Unfortunately, because the ordinal
values of extension primitives are not readily available, extension primitives
are source-compatible only.

@node Driver Input-Output Controls
@section Driver Input-Output Controls
@cindex input-output controls

Although the ability to perform input-output controls is always provided in
conjunction with @dfn{STREAMS} drivers, the @dfn{DLPI} standards do not define
or standardize on any input-output controls for @dfn{DLPI}.  As a result, almost
all implementations of @dfn{DLPI} provide management and other input-output
controls that are completely implementation-specific and not generic in any way.
Some implementations may provide for generic input-output controls across
various DLS providers within the same operating systems, however, these is only
one case of which the author is aware that the input-output controls of two
implementations match in function and name (probably from BSD deriviation): that
is the @constant{DL_IOC_HDR_INFO} input-output control.  This input-output
control is shared by both @cite{Solaris} and @cite{HP-UX}.

Some implementations, such as @cite{Solaris} and @cite{Solstice X.25}, or
@cite{AIX} and @cite{AIXlink/X.25}, define a different set of input-output
controls for non-X.25 or connectionless mode providers that are provided by X.25
or connection-oriented mode DLS providers.

Some implemetnations, such as @cite{AIX}, and @cite{Solaris}, provide a set of
input-output controls that support add-on libraries for use by DLPI
applications.

The closest set of input-output controls that are common across a number of
implementations are those provided originally by @cite{SVR4.2}.  This set is the
@dlioc{DLIOC} set of input-output controls.  This set of input-output controls,
or subsets of this set, appear to be supported by @cite{IRIX}, @cite{PowerMAX},
@cite{SVR4.2}, @cite{UnixWare 1} and @cite{2}, but appear to have been dropped
by @cite{UnixWare 7}.

@cite{@value{PACKAGE_TITLE}} provides a set of input-output controls that
includes all of the documented input-output from intended porting sources,
including those in supported of add-on applications libraries.  Unfortunately,
because the ordinal values of input-output control is not readily available,
input-output controls are, for the most part, source-compatible only.  Also,
@cite{@value{PACKAGE_TITLE}} provides an additional set of OpenSS7-specific
input-output controls intended on easing the development of SNMP and CMIP
management agents under @cite{Linux Fast-STREAMS}.

See the input-output controls section under the porting topic for each of these
implementations for more information.

@node Device Drivers and Modules
@section Device Drivers and Modules
@cindex drivers and modules

@subsection Driver Organization

Most DLPI implementations provide for two models of device driver organization:

@enumerate
@item The first organization consists of a monolithic device drivers that
implements both the lower level device driver functions (e.g., interrupt service
routines, interacting with hardware) as well as the interface functions (passing
of DLPI primitives).

Under this organization, writing a new device driver consists of writing a
complete monolithic @dfn{STREAMS} driver.
@item The second organization consists of a device driver separated into a
top-half and a bottom-half.  The top-half is concerned with the passing of DLPI
primitives with the user of the Stream and can be largely generic, and certainly
not device-specific.  The bottom-half is concerned with the interaction with the
hardware and is device specific.

Under this organization it is possible to write a new bottom-half for a specific
device without the need to write a new top-half nor to become involved with many
@dfn{STREAMS} specifics.
@end enumerate

@cite{AIX} uses the monolithic device driver approach, as does
@cite{AIXlink/X.25}.  @cite{HP-UX} provides the separated driver approach.
@cite{Solaris} provides both a separated driver approach and a monolithic driver
approach.  @cite{Solstice X.25} provides a monolithic driver approach.

@cite{@value{PACKAGE_TITLE}} provides both a separated and monolithic driver
approach.  However, the separated approach is different than that of
@cite{HP-UX} or @cite{Solaris}, and more closely related to that of @cite{OSF}.
In the @cite{Linux Fast-STREAMS} approach, the bottom-half of the device drivers
is the Linux native device driver implementation.  The top-half of the driver
provides access to Linux native device drivers using a generic DLPI layer.
Under the monolithic approach, @cite{Linux Fast-STREAMS} provides the ability to
develop a device driver using either the @dfn{DLPI} or the @cite{CDI}
interfaces.

@subsection Driver Abstraction

Regardless of specific device driver organization, some implementations provide
a mechanism whereby disparate device drivers can be accessed through a single
pseudo-device (and sometimes multiplexing) driver.

This device driver abstraction can is acheived in several ways:

@enumerate
@item through use of a generic top-half/bottom-half device driver construction,
where the top-half of the device driver is common to all device drivers;
@item through the use of add-on libraries that insulate the device user from the
disparate access methods of various underlying drivers; or,
@item through the provision of a multiplexing pseudo-device driver that collects
all device drivers under a single multiplexing driver.
@end enumerate

@cite{AIX} uses the add-on library approach with one wrinkle: the device drivers
must implement a common set of input-output controls to support the generic data
link control libraries.  @cite{AIXlink/X.25} does not provide generic access to
the data links it provides.

@cite{HP-UX} uses the top-half/bottom-half approach, and a single @file{dlpi}
device driver is used to access all devices on the system.

@cite{Solaris} uses a multiplexing driver to collect the disparate access
methods of, for example, MAC and LLC Type 1 device drivers.  @cite{Solstice
X.25} does not provide generic access to the data links it provides.

@cite{@value{PACKAGE_TITLE}} provides a single pseudo-device driver that both
provides access to Linux native devices as well a permitting monolithic
organization device Streams providing either the @dfn{CDI} or @dfn{DLPI}
interfaces to be linked under the multiplex driver and provided to DLS users in
the same fashion as Linux native devices.  Also, the driver permits these
@dfn{CDI} or @dfn{DLPI} devices to be provided for use by Linux native
applications.

Specific driver and device names provided by the various implementations are
detailed in the specific porting section.

@subsection Modules

Nearly all of the implementations provide two ipso-facto standard modules for
use with DLPI device drivers:

@table @manref
@item bufmod(4)

The buffer module is used to collect many packets into a single data transfer to
user space.  It is particularly useful when used with a DLPI driver in raw mode
and when in promiscuous mode, to group individual packets into blocks.

@item pfmod(4)

The packet filter module is used to filter packets arriving on a DLPI stream,
particularly in raw or promiscuous modes, to reduce the number of packets
delivered to user space to the minimum number of packets in which the
application is interested.
@end table

@cite{@value{PACKAGE_TITLE}} provides these two ipso-facto standard
@dfn{STREAMS} modules.  It also provides some useful modules not found in other
implementations.

Specific module names provided by the various implementations are detailed in
the specific porting section.

@node Support and Add-On Libraries
@section Support and Add-On Libraries
@cindex libraries

@dfn{DLPI} was intended to be used by applications programs directly using the
@manref{getpmsg(2s)}, @manref{putpmsg(2s)}, @manref{read(2s)},
@manref{write(2s)}, and @manref{ioctl(2s)} system calls and the interface
definitions found in the @file{sys/dlpi.h} header file.  Nevertheless, some
implementations have provided user shared-object add-on libraries for use by
DLPI applications programs that hide some of the more mundane tasks from the
DLPI application programmer, and provide a functional, rather than system call,
interface to DLPI DLS providers.

@cite{AIX} provides a Generic Data Link Control (GDLC) interface that can be
used by applications programs to access DLS providers using a common set of
functions and structures.  @cite{AIXlink/X.25} does not provide applications
program shared-object add-on libraries.

@cite{HP-UX} does not provide shared-object add-on libraries for use with DLPI.

@cite{Solaris}, receently, has provided a @file{libdlpi} shared-object add-on
library that provides a functional interface to the DLPI in a way similar to the
way that the XTI Library provides a functional interface to the TPI.
@cite{Solstice X.25} provides several libraries whose functions are intended on
providing access to management and addressing information for the DLS user and
are not used to directly interface to DLPI.

@cite{@value{PACKAGE_TITLE}} provides all of the libraries provided by the
others implementations with a set of libraries that are implemented to be
compatible with their porting source equivalents.

See the libraries sub-section in each of the specific porting sections for more
information on libraries.

@node Support and Management Utilities
@section Support and Management Utilities
@cindex utilities

All implementations provide some C-language programs and shell scripts for use
in configuring, managing and trouble-shooting the implementation.  Most of these
programs are intended on being used from the command line or by shell scripts.
One such program common to all implementations is the @manref{snoop(8)} utility.

Although some utilities such as @manref{snoop(8)} are common, @cite{AIX},
@cite{AIXlink/X.25}, @cite{HP-UX}, @cite{Solaris} and @cite{Solstice X.25} each
provide their own set of utilities.

As with @dfn{STREAMS} utilities, @cite{@value{PACKAGE_TITLE}} provides as many
of these utilities as can be implemented using the available documentation for
the utility. 

See the utilities sub-section in each of the specific porting sections for more
information on utilities.

@node Device and Driver Management
@section Device and Driver Management
@cindex management

Most implementations support management of the DLPI implementation using the
Simple Network Management Protocol (SNMP) of the IETF, using IETF-defined MIBs
specific to each device class.  No implementations currently document support
for CMIP management.

@cite{@value{PACKAGE_TITLE}} provides for SNMP management of the DLPI
implementations using IETF MIBs, OpenSS7 Enterprise-specific MIBs, and CMIP
management of the DLPI implementations using ISO/IEC GDMOs.

See the management sub-section in each of the specific porting sections for more
information on management.

@c ----------------------------------------------------------------------------

@page
@node Porting from DLPI
@chapter Porting from DLPI
@cindex Porting from DLPI

@menu
* DLPI Driver Addressing::
* DLPI Driver Features::
* DLPI Primitives::
* DLPI Input-Output Controls::
* DLPI Drivers and Modules::
* DLPI Libraries::
* DLPI Utilities::
* DLPI Management::
* DLPI Summary::
@end menu

This section includes general porting information when porting @dfn{STREAMS}
drivers or modules, or @dfn{DLPI} applications from any environment supporting
the @dfn{DLPI} to @cite{Linux Fast-STREAMS}.

Use this section if you are porting from an environment other than those
provided in the separate porting chapters, and when the environment from which
you are porting does not closely match those for which directly support is
provided in later chapters.

@node DLPI Driver Addressing
@section DLPI Driver Addressing

@menu
* DLPI Driver Naming::
* DLPI PPA Selection::
* DLPI SAP Addressing::
* DLPI Primitive Addresses::
* DLPI Quality of Service Parameters::
@end menu

@node DLPI Driver Naming
@subsection DLPI Driver Naming

@node DLPI PPA Selection
@subsection DLPI PPA Selection

Some implementations provide a Style 2 DLS provider, some a Style 1 one.  Style
2 DLPI Streams must be attached to a PPA before they can be used any further.
Style 1 DLPI Streams are immediately available for use without attachment.

To determine whether the open Stream is a Style 1 or Style 2 provider, the
@prim{DL_INFO_REQ} primitive can be issued and the responding @prim{DL_INFO_ACK}
primitive examined.  The @parm{dl_provider_style} field contains
@pval{DL_STYLE1} if the Stream is a Style 1 Stream that does not require
attachemtn.  When the field contains @pval{DL_STYLE2}, the Stream is a Style 2
provider that requires attachment before use.

@node DLPI SAP Addressing
@subsection DLPI SAP Addressing

@node DLPI Primitive Addresses
@subsection DLPI Primitive Addresses

@node DLPI Quality of Service Parameters
@subsection DLPI Quality of Service Parameters

Most implementations of DLPI do not support quality of service parameters.
@cite{@value{PACKAGE_TITLE}} supports the standard DLPI quality of service
parameters @pval{DL_QOS_CL_RANGE1}, @pval{DL_QOS_CO_SEL1},
@pval{DL_QOS_CL_RANGE1} and @pval{DL_QOS_CO_SEL1}.  If your implementation of
DLPI supports quality of service parameters and those parameters are different
from the standard DLPI quality of service parameters, they will need to be
converted to the standard structure types and exchanges in primitives described
by the DLPI standard.

Note that when @pval{DL_AUTO_XID} and @pval{DL_AUTO_TEST} flags are set in the
@parm{dl_xidtest_flg} field of the @prim{DL_BIND_REQ} primitive, OpenSS7 DLPI
drivers will perform any necessary XID or TEST DLPDU exchanges that are
necessary to negotiate end-to-end parameters.  Otherwise, available ranges are
established by local management.

@node DLPI Driver Features
@section DLPI Driver Features
@cindex DLPI features

@menu
* DLPI LAN Operation::
* DLPI WAN Operation::
* DLPI Driver Modes::
@end menu

@node DLPI LAN Operation
@subsection DLPI LAN Operation
@cindex DLPI lan operation
@cindex lan operation DLPI

@subsubsection DLPI Ethernet and SNAP Operation

@subsubsection DLPI LLC Type 1 Operation

@subsubsection DLPI LLC Type 2 Operation

@subsubsection DLPI LLC Type 3 Operation

@node DLPI WAN Operation
@subsection DLPI WAN Operation
@cindex DLPI wan operation
@cindex wan operation DLPI

@node DLPI Driver Modes
@subsection DLPI Driver Modes

@subsubsection DLPI Promiscuous Mode

Most implementations of DLPI support promiscious mode.  Normally, the supported
primitives @prim{DL_ATTACH_REQ}, @prim{DL_BIND_REQ}, @prim{DL_SUBS_BIND_REQ},
@prim{DL_ENABMULTI_REQ}, define the interface, physical address and broadcast
address (MAC), service access point (SAP), subsequent service access point
(SAP), and multicast or group addresses (MAC), for which packets are delivered
to the DLS User.  The promisuous mode primitives, @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}, act to provide a promiscous wildcard at various points
in the link layer header defined by the foregoing primitives.

When @pval{DL_PROMISC_PHYS} is specified, the Stream becomes promiscuous at the
physical level.  This means that all packets on the wire associated with the
interface identified by the attached PPA will be indicated to the DLS User.
This is the case regardless of the setting of the other promicious levels.

When @pval{DL_PROMISC_SAP} is specified, the Stream becomes promiscuous at the
SAP level.  This means that all packets on the wire that match the physical
address, and enabled broadcast, multicast or group addresses,@footnote{Note that
all broadcast, multicast and group addresses are enabled when the Stream is set
promisuous at the mutlticast address level, @pval{DL_PROMISC_MULTI}.} regardless
of the SAP that was bound with @prim{DL_BIND_REQ} or @prim{DL_SUBS_BIND_REQ},
will be delivered to the DLS User.  This promiscuous level being set has no
effect when @pval{DL_PROMISC_PHYS} is also set.

When @pval{DL_PROMISC_MULTI} is specified, the Stream becomes promiscuous at the
broadcast, multicast and group address level.  This means that all packets on
the write that match the physical address, and any broadcast, multicast or group
address, regardless of the addresses that have been enabled with
@prim{DL_ENABMULTI_REQ}, and matches enabled SAP for the Stream,@footnote{Note
that all SAPs are enabled when the Stream is set promiscuous at the SAP level,
@pval{DL_PROMISC_SAP}.} will be delivered to the DLS User.  This promiscuous
level being set has no effect when @pval{DL_PROMISC_PHYS} is also set.

@subsubsection DLPI Raw Mode
@cindex raw mode DLPI
@cindex DLPI raw mode

Most implementations of DLPI support a raw mode.  The purpose of a raw mode is
largely to permit monitoring applications, but also to permit the implementation
of protocols not anticipated by the DLPI specifications.  In raw mode,
link-layer headers are not removed from the data payload of messages delivered
to the DLPI User.  Also, link-layer headers are not added by the DLS Provider to
DLS User data submitted for transmission.  This means that not only does the DLS
User need to interpret link-layer headers on received messages itself, but it
needs to create appropriate link-layer headers for any messages for
transmission.

Raw mode is normally invoked with an input-output control.  @cite{AIX} and
@cite{Solaris} place a DLPI Stream into raw mode using an
implemetnation-specific input-output control.  @cite{HP-UX}, in constrast,
provides an implementation-specific value for the @parm{dl_service_mode}
member of the @prim{DL_BIND_REQ} primitive, @pval{DL_HP_RAWDLS}, that places a
DLPI Stream into raw mode.

Once in raw mode, some implementations differ in how raw packets are delivered
to the DLS User.

For @cite{Solaris}, when placed into raw mode, packets are delivered to the DLS
User using @prim{DL_DATA_IND} primitives.  Packets sent by the DLS User are
expected to be @prim{DL_DATA_REQ} primitives.

For @cite{AIX}, when placed into raw mode, packets are delivered to the DLS User
using @prim{DL_UNITDATA_IND} primitives, however, the primitive contains no
address fields and may be removed for @cite{AIX} at some point, after which
packets will be delivered to the DLS User using @prim{DL_DATA_IND} primitives.
Packets sent by the DLS User are expected to be @prim{DL_UNITDATA_REQ}
primitives containing no address or @prim{DL_DATA_REQ} primitives.

For @cite{HP-UX}, when placed into raw mode, packets are delivered to the DLS
User using @prim{DL_HP_RAWDATA_IND} extension primitives.  Packets sent by the
DLS User are expected to be @prim{DL_HP_RAWDATA_REQ} extension primitives.

@subsubsection DLPI LLC2 Mode
@cindex llc2 mode DLPI
@cindex DLPI llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@subsubsection DLPI CSMA/CD Mode
@anchor{DLPI CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode DLPI
@cindex DLPI csma/cd mode

@subsubsection DLPI Fast Path

@subsubsection DLPI Combined Mode

@node DLPI Primitives
@section DLPI Primitives
@cindex DLPI primitives

In some cases provided by the DLPI standard, the primitive interface may be
unsuitable in comparison to the input-output control interface.  Under
@dfn{STREAMS}, the identity of, and permissions afforded, the user passing the
@msg{M_PROTO} or @msg{M_PCPROTO} primitive to the Stream are not provided by the
put message, @manref{putpmsg(2s)}, system call.  On the other hand, the
input-output control, @manref{ioctl(2s)}, system call both identifies and
provides permissions for the invoking user.  DLPI primitives of concern in this
regard are:

@itemize
@item @prim{DL_PROMISCON_REQ},
@item @prim{DL_PROMISCOFF_REQ},
@item @prim{DL_ENABMULTI_REQ},
@item @prim{DL_DISABMULTI_REQ}, and
@item @prim{DL_GET_STATISTICS_REQ}.
@end itemize

Another approach is to not permit processes with insufficient privilege to open
the DLPI driver in the first place.  How this problem or issue is dealt with by
specific implementations has an impact on the portability of DLPI applications
programs.

@table @prim
@item DL_ATTACH_REQ

Of primary concern to porting is the specification of the @parm{dl_ppa} field
in this primitive.  DLS providers are allowed to manage their own Physical Point
of Attachment (PPA) space in implementation specific manners.  DLPI cautions
applications to obtain the PPA from passed in arguments or a management call and
pass the PPA opaquely to DLPI.  This is not always the case.  Also,
unfortunately the management subroutines available to the application for this
purpose are nowhere standardized.

@item DL_BIND_REQ
@item DL_SUBS_BIND_REQ
@item DL_DATA_REQ
@itemx DL_DATA_IND
@item DL_UNITDATA_REQ
@itemx DL_UNITDATA_IND
@item DL_PROMISCON_REQ
@itemx DL_PROMISCOFF_REQ

Not all implementations nor all DLS providers support these primitives.  This
does not mean that they do not support promiscuous modes on these devices, it
just means that some other mechanism is used to place devices in promiscuous
mode and to detect that they are in promiscous mode.

Normally these primitives are supported for DLS providers with a MAC type of
@pval{DL_ETHER}.

@item DL_ENABMULTI_REQ
@itemx DL_DISABMULTI_REQ

Not all implementations nor all DLS provider support these primitives.  This
does not mean that they do not support multicast addresses on these devices, it
just means that some other mechanism is used to manage multicast addresses on
these devices.

@end table

@node DLPI Input-Output Controls
@section DLPI Input-Output Controls
@cindex DLPI ioctls

Input-Output Control are not standardized.  However, most implementations provide some sort of
input-output control that performs the following functions:

@itemize
@item Places the DLPI Stream into raw mode, where link layer headers are
included in both @prim{DL_UNITDATA_IND} and @prim{DL_UNITDATA_REQ} primitives.
@item Resets statistics associated with a PPA, SAP or Connection.
@item A fast-path permitting the DLS user (network layer) to complete the DLSAP
address.
@item A mechanism for configuring connection-oriented mode protocol parameters
for ISO/IEC 8802-2 (IEEE 802.2) LLC Type 2 and ISO/IEC 8208 LAPB.
@item A mechanism for collecting connection statistics for ISO/IEC 8802-2 (IEEE
802.2) LLC Type 2 and ISO/IEC 8208 LAPB connections.  (For some reason the
@prim{DL_GET_STATISTICS_REQ} and @prim{DL_GET_STATISTICS_ACK} primitives are
considered insufficient.  Perhaps it is that these primitives were optionally
provided only in later DLPI standard revisions.)
@item A mechanism for obtaining the Physical Points of Attachment (PPA) for
installed devices.
@end itemize


@node DLPI Drivers and Modules
@section DLPI Drivers and Modules
@cindex DLPI drivers and modules

@node DLPI Libraries
@section DLPI Libraries
@cindex DLPI libraries

@node DLPI Utilities
@section DLPI Utilities
@cindex DLPI utilities

@node DLPI Management
@section DLPI Management
@cindex DLPI management

@node DLPI Summary
@section DLPI Summary
@cindex DLPI summary

@c ----------------------------------------------------------------------------

@page
@node Porting from AIX
@chapter Porting from AIX
@cindex Porting from AIX

@menu
* AIX Driver Addressing::
* AIX Driver Features::
* AIX Primitives::
* AIX Input-Output Controls::
* AIX Drivers and Modules::
* AIX Libraries::
* AIX Utilities::
* AIX Management::
* AIX Summary::
@end menu

This section is applicable to later releases of the @cite{AIX} operating system
which is @cite{IBM}'s @cite{UNIX System V Release 4} derived version of the
@cite{UNIX} operating system.  DLPI is documented primarily in the
``@cite{Communications Programming Concepts, Chapter 2, Data Link Provider
Interface Implemetnation}'' and the ``@cite{Technical Reference: Communications,
Volume 1, Chapter 2, Data Link Provider Interface (DLPI)}'' documentation for
the @cite{AIX} operating system.  Use this section when porting DLPI drivers,
modules and applications from base @cite{AIX} to @cite{Linux}.

@node AIX Driver Addressing
@section AIX Driver Addressing
@cindex AIX addressing

@menu
* AIX Driver Naming::
* AIX PPA Selection::
* AIX SAP Addressing::
* AIX Primitive Addresses::
* AIX Quality of Service Parameters::
@end menu

The @cite{AIX} implementation of the DLPI interface provides a Style 2 DLS
provider that supports both connectionless, @pval{DL_CLDLS}, and
connection-oriented, @pval{DL_CODLS}, data link service modes.  @cite{AIX} also
supports a combined connectionless and connection-oriented mode: see,
@ref{AIX Combined Mode}.

@node AIX Driver Naming
@subsection AIX Driver Naming

@node AIX PPA Selection
@subsection AIX PPA Selection

@node AIX SAP Addressing
@subsection AIX SAP Addressing

@node AIX Primitive Addresses
@subsection AIX Primitive Addresses

@node AIX Quality of Service Parameters
@subsection AIX Quality of Service Parameters

@node AIX Driver Features
@section AIX Driver Features
@cindex AIX features

@menu
* AIX LAN Operation::
* AIX WAN Operation::
* AIX Driver Modes::
@end menu

@node AIX LAN Operation
@subsection AIX LAN Operation
@cindex AIX lan operation
@cindex lan operation AIX

@subsubsection AIX Ethernet and SNAP Operation

@subsubsection AIX LLC Type 1 Operation

@subsubsection AIX LLC Type 2 Operation

@subsubsection AIX LLC Type 3 Operation

@node AIX WAN Operation
@subsection AIX WAN Operation
@cindex AIX wan operation
@cindex wan operation AIX

@node AIX Driver Modes
@subsection AIX Driver Modes

@menu
* AIX Promiscuous Mode::
* AIX Raw Mode::
* AIX LLC2 Mode::
* AIX CSMA/CD Mode::
* AIX Fast Path::
* AIX Combined Mode::
@end menu

@node AIX Promiscuous Mode
@subsubsection AIX Promiscuous Mode

@cite{AIX} supports a @dfn{promiscuous mode} using the standard DLPI primitives,
@prim{DL_PROMISCON_REQ} and @prim{DL_PROMISCOFF_REQ}.  @cite{AIX} supports all
three promiscuous levels, @pval{DL_PROMISC_PHYS}, @pval{DL_PROMISC_SAP} and
@pval{DL_PROMISC_MULTI}, for these primitives.  There are some minor
compatibility issues with the @prim{DL_PROMISCON_REQ} primitive (@pxref{AIX
DL_PROMISCON_REQ}).

@node AIX Raw Mode
@subsubsection AIX Raw Mode
@cindex raw mode AIX
@cindex AIX raw mode

@cite{AIX} supports a @dfn{raw mode}.  Setting a DLPI Stream to raw mode
consists of using the @dlioc{DL_PKT_FORMAT} input-output control to set the
packet format for the Stream to @pval{NS_INCLUDE_MAC}.  When set to @dfn{raw
mode}, the MAC and LLC link-layer headers are both placed in the data portion of
the message.

Messages delivered to the DLS user are delivered as @prim{DL_UNITDATA_IND}
primitives, but at some point might be restricted to @prim{DL_DATA_IND}
primitives (i.e. just the @msg{M_DATA} message block).  DLS Users should be
prepared to receive both.  Both can be handled easily by simply discarding any
@msg{M_PROTO} message block containing a @prim{DL_UNITDATA_IND} primitive and
only only processing the attached @msg{M_DATA} message block.

Messages sent to the DLS provider may be sent as @prim{DL_UNITDATA_REQ}
primitives, but at some point might be restricted to @prim{DL_DATA_REQ}
primitives (i.e. just the @msg{M_DATA} message block).  DLS Users should be
prepared to send either.  The destination address fo the @prim{DL_UNITDATA_REQ}
message block must be completed as normal, however, it is not used to create a
link-layer header for the final message, and the attached @msg{M_DATA} message
block must contain the link-layer header including the MAC addresses.

@cite{@value{PACKAGE_TITLE}} provides full source-level compatibility with this
mode by providing a source-compatible @dlioc{DL_PKG_FORMAT} input-output
control that accepts the @pval{NS_INCLDUE_MAC} format.  When the raw format is
set using this input-output control, an @cite{AIX} compataible raw mode is
applied to the Stream.

@node AIX LLC2 Mode
@subsubsection AIX LLC2 Mode
@cindex llc2 mode AIX
@cindex AIX llc2 mode

@cite{AIX} supports an @dfn{LLC2 mode}.  Setting a DLPI Stream to LLC2 mode
consists of using the @dlioc{DL_PKG_FORMAT} input-output control to set the
packet format for the Stream to @pval{NS_INCLUDE_LLC}.  When set to @dfn{LLC2
mode}, the LLC link-layer headers are placed in the data portion of the message.
Only the MAC addresses are removed or inserted when messages are received or
transmitted on the media.

Messages delivered to the DLS user are delivered as @prim{DL_UNITDATA_REQ}
primitives.  The LLC link-layer headers are included in the @msg{M_DATA} portion
of the primitive.  The destination and source addresses contained in the
@msg{M_PROTO} portion of the @prim{DL_UNITDATA_IND} primtive contain only the
MAC address and do not contain the DSAP, SSAP or SNAP portion.

Messages sent to the DLS provider are sent as @prim{DL_UNITDATA_REQ} primitives.
The @msg{M_DATA} portion of the primitive must contain the LLC link-layer
headers.  The destination and source addresses contained in the @msg{M_PROTO}
portion of the @prim{DL_UNITDATA_REQ} primitive contain only the MAC address and
do not contain the DSAP, SSAP or SNAP portion.

@cite{@value{PACKAGE_TITLE}} provides full source-lvel compatibility with this
mode by providing a source-compatible @dlioc{DL_PKG_FORMAT} input-outpu control
that accepts the @pval{NS_INCLUDE_LLC} format.  When the LLC format is set using
this input-output control, an @cite{AIX} compatible LLC2 mode is applied to the
Stream.

@node AIX CSMA/CD Mode
@subsubsection AIX CSMA/CD Mode
@cindex csma/cd mode
@cindex csma/cd mode AIX
@cindex AIX csma/cd mode

@node AIX Fast Path
@subsubsection AIX Fast Path

@cite{AIX} does not provide @dfn{fast path}.

@node AIX Combined Mode
@subsubsection AIX Combined Mode

@cite{AIX} extends the standard DLPI specification by permitting both
@pval{DL_CLDLS} and @pval{DL_CODLS} to be specified in the
@parm{dl_service_mode} field of the @prim{DL_BIND_REQ} primitive by logically
OR'ing the two values together.  (The @pval{DL_CLDLS}, @pval{DL_CODLS} and
@pval{DL_ACLDLS} values may be logically OR'ed together in the
@parm{dl_service_mode} field of the @prim{DL_INFO_ACK} primitive.)  Once the
bind has completed in this manner, both connectionless and connection-oriented
messages can be exchanged for the Stream.

@node AIX Primitives
@section AIX Primitives
@cindex AIX primitives

@menu
* AIX Supported Primitives::
* AIX Unsupported Primitives::
* AIX Extension Primitives::
@end menu

@cite{AIX} widely supports connectionless and connection-oriented DLIP standard
primitives and provides no extension primitive.  Minor extensions are provided
by extending some of the standard DLPI primitives.  Other extensions are
provided with implementation-specific input-output controls.

@node AIX Supported Primitives
@subsection AIX Supported Primitives

The following primitives are supported by @cite{AIX}:

@itemize
@item @prim{DL_ATTACH_REQ}, @prim{DL_DETACH_REQ}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.
The form of the Physical Point of Attachment (PPA) for
@cite{@value{PACKAGE_TITLE}} may differ from that of @cite{AIX}.

Care should be taken when porting DLPI drivers, modules and applications from
@cite{AIX} that the DLS user follows the recommendations of the DLPI standard
with regard to the handling of PPAs as an oqaque value.  The management system
or lookup functions from which the DLS user obtains the PPA must be adjusted to
deliver appropriate @cite{Linux Fast-STREAMS} PPAs.

@item @prim{DL_BIND_REQ}, @prim{DL_BIND_ACK}, @prim{DL_UNBIND_REQ}
@anchor{AIX DL_BIND_REQ}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.
The form of the Service Access Point (SAP) values for
@cite{@value{PACKAGE_TITLE}} may differ from that of @cite{AIX}.

@item @prim{DL_SUBS_BIND_REQ}, @prim{DL_SUBS_BIND_ACK},
@prim{DL_SUBS_UNBIND_REQ}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.
The form of the Service Access Point (SAP) values for
@cite{@value{PACKAGE_TITLE}} may differ from that of @cite{AIX}.

@item @prim{DL_INFO_REQ}, @prim{DL_INFO_ACK}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.

@item @prim{DL_PHYS_ADDR_REQ}, @prim{DL_PHYS_ADDR_ACK}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.

@item @prim{DL_ENABMULTI_REQ}, @prim{DL_DISABMULTI_REQ}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner
where they are supported by the protocol and underlying device.

@item @prim{DL_PROMISCON_REQ}
@anchor{AIX DL_PROMISCON_REQ}

@cite{AIX} documents that should this primitive be issued multiple times for the
same promicuous level, that the duplicate primitives will be acknowledged with
the @prim{DL_OK_ACK} primitive and the effects of the primitive ignored (that
is, no non-fatal error will be generated).  @cite{@value{PACKAGE_TITLE}} also
supports this behaviour in support of porting @cite{AIX} drivers, modules and
applications to @cite{Linux Fast-STREAMS}.

Nevertheless, care should be taken when porting @cite{AIX} drivers, modules and
applications to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely
upon the DLS provider not returning an error should this primitive be issued
multiple times for the same promiscuous level.

@item @prim{DL_PROMISCOFF_REQ}

@cite{@value{PACKAGE_TITLE}} supports this primitive being issued multiple times
by the DLS users for the same promiscuous level without generating a fatal or
non-fatal error.  @cite{AIX} documentation is silent on the matter.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely upon the DLS
provider returning an error should this primitive be issued multiple times for
the same promiscuous level.

@item @prim{DL_GET_STATISTICS_REQ}, @prim{DL_GET_STATISTICS_ACK}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner,
however, @cite{AIX} does not document well the format of the returned
statistics.

@item @prim{DL_ERROR_ACK}, @prim{DL_OK_ACK}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.

Care should be taken that the DLS user does not rely upon any specific
@parm{dl_unix_errno} value.

@end itemize

The following XID and TEST primitives are supported by @cite{AIX}:

@itemize
@item @prim{DL_TEST_CON},
@prim{DL_TEST_IND},
@prim{DL_TEST_REQ},
@prim{DL_TEST_RES}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.

@item @prim{DL_XID_CON},
@prim{DL_XID_IND},
@prim{DL_XID_REQ},
@prim{DL_XID_RES}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.
@end itemize

The following connectionless mode primitives are supported by @cite{AIX}:

@itemize
@item @prim{DL_UNITDATA_REQ}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.
@item @prim{DL_UNITDATA_IND}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.
@item @prim{DL_UDERROR_IND}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.

However, whenever the packet contents are available to be returned with the
error, @cite{@value{PACKAGE_TITLE}} returns the packet in the data portion
(@msg{M_DATA}) of the primitive.

Care should be taken when porting DLPI drivers, modules and applications, that
the DLS user applications must be ready to receive or discard the data portion
associated with this primitive.
@end itemize

The following connection-oriented mode primitives are supported by @cite{AIX}:

@itemize
@item @prim{DL_CONNECT_REQ}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.

However, @cite{AIX} does not support quality of service parameters,
@parm{dl_qos_length} and @parm{dl_qos_offset}, associated with this
primitive.

@cite{@value{PACKAGE_TITLE}} supports the QOS parameters described in the DLPI
standard:  when the @parm{dl_qos_length} and @parm{dl_qos_offset} field in
the primitive are zero (0), the DLS provider will propose the default quality of
service range.  Otherwise, the @parm{dl_qos_length} and @parm{dl_qos_offset}
may describe a @pval{DL_QOS_CO_RANGE1} QOS parameter structure.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{Linux} that the @parm{dl_qos_length} field in the primitive is indeed
set to zero (0) (as @cite{AIX} may, contrary to its documentation, ignore the
values).
@item @prim{DL_CONNECT_IND}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.

However, @cite{AIX} does not associate quality of service parameters,
@parm{dl_qos_length} and @parm{dl_qos_offset}, with this primitive.  Both
@parm{dl_qos_length} and @parm{dl_qos_offset} are documented as set to zero
(0) by @cite{AIX}.

@cite{@value{PACKAGE_TITLE}} supports the QOS parameters described in the DLPI
standard: when the @parm{dl_qos_length} and @parm{dl_qos_offset} fields are
set to zero (0), no quality of service information was available from the remote
station.  Otherwise, the @parm{dl_qos_length} and @parm{dl_qos_offset} will
describe a @pval{DL_QOS_CO_RANGE1} QOS parameter structure describing the range
of quality of service parameters supported by both the remote and local
providers for this data link.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{Linux} that the @parm{dl_qos_length} field in the primitive is
ignored and that the DLS user provides sufficient storage to receive the entire
primitive with quality of service parameters intact.
@item @prim{DL_CONNECT_RES}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.
@item @prim{DL_CONNECT_CON}

@cite{@value{PACKAGE_TITLE}} implements this primitive in a compatible manner.
However, @cite{AIX} does not associate quality of service parameters,
@parm{dl_qos_length} and @parm{dl_qos_offset}, with this primitive.  Both
@parm{dl_qos_length} and @parm{dl_qos_offset} are set to zero (0) by
@cite{AIX}.
@item @prim{DL_TOKEN_REQ}, @prim{DL_TOKEN_ACK}

@cite{@value{PACKAGE_TITLE}} implements these primitives in a compatible manner.
However, @cite{AIX} does not specify the form of the token.
@cite{@value{PACKAGE_TITLE}} does not use a small integer token value,
@parm{dl_token}, but rather a unsigned long value derived from the queue
pointer associated with the Stream.  Care should be taken that the DLS user
provides sufficient storage to save the entire token value.
@item @prim{DL_DATA_REQ},
@prim{DL_DATA_IND}
@item @prim{DL_DISCONNECT_REQ},
@prim{DL_DISCONNECT_IND}
@item @prim{DL_RESET_REQ},
@prim{DL_RESET_IND},
@prim{DL_RESET_RES},
@prim{DL_RESET_CON}
@end itemize

@node AIX Unsupported Primitives
@subsection AIX Unsupported Primitives

The following primitives are not supported by @cite{AIX}:

@itemize
@item @prim{DL_UDQOS_REQ}

@cite{AIX} does not support this primitive and a non-fatal error with error code
@perr{DL_NOTSUPPORTED} will be returned in response to this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely upon the DLS
provider returning a non-fatal error should this primitive be issued by the DLS
user.
@item @prim{DL_SET_PHYS_ADDR_REQ}

@cite{AIX} does not support this primitive and a non-fatal error with error code
@perr{DL_NOTSUPPORTED} will be returned in response to this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive for devices that support
setting of the physical address.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely upon the DLS
provider returning a non-fatal error should this primitive be issued by the DLS
user.
@end itemize

The following acknowledged connectionless mode primitives are not supported by @cite{AIX}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@cite{AIX} does not support these primitives and a non-fatal error with error
code @perr{DL_NOTSUPPORTED} will be returned in response to these primitives.
@cite{@value{PACKAGE_TITLE}} does not support these primitives either.
@end itemize

@node AIX Extension Primitives
@subsection AIX Extension Primitives

@cite{AIX} does not provide any extension primitives.

@node AIX Input-Output Controls
@section AIX Input-Output Controls
@cindex AIX input-output controls

@cite{AIX} provides a number of implementation-specific input-output controls
that are defined in the @file{sys/dlpi_aix.h} header file.  Input-output
controls that take an argument longer than a small integer or that take a
pointer to a buffer are required to use the @ioctlref{I_STR} STREAMS
input-output control (however, @cite{@value{PACKAGE_TITLE}} also supports
transparent input-output controls).

Implementation-specific input-output controls provided by @cite{AIX} are as
follows:

@multitable @columnfractions 0.35 0.65
@item @dlioc{DL_PKT_FORMAT} -- @tab set the packet format.
@item @dlioc{DL_INPUT_RESOLVE} -- @tab register input address resolution callback.
@item @dlioc{DL_OUTPUT_RESOLVE} -- @tab register output address resolution callback.
@item @dlioc{DL_ROUTE} -- @tab disable, query or assign a source route.
@item @dlioc{DL_TUNE_LLC} -- @tab query or alter tunable LLC parameters.
@item @dlioc{DL_ZERO_STATS} -- @tab reset local or global statistics.
@item @dlioc{DL_SET_REMADDR} -- @tab set remote address for XID/TEST.
@end multitable

Note that @cite{@value{PACKAGE_TITLE}} documents these input-output controls in
detail in the @manref{dlpi_ioctl(4)} manual page.

@node AIX Drivers and Modules
@section AIX Drivers and Modules
@cindex AIX drivers and modules

@node AIX Libraries
@section AIX Libraries
@cindex AIX libraries

@node AIX Utilities
@section AIX Utilities
@cindex AIX utilities

@node AIX Management
@section AIX Management
@cindex AIX management

@node AIX Summary
@section AIX Summary
@cindex AIX summary

@c ----------------------------------------------------------------------------

@page
@node Porting from AIXlink/X.25
@chapter Porting from AIXlink/X.25
@cindex Porting from AIXlink/X.25

@menu
* AIXlink/X.25 Driver Addressing::
* AIXlink/X.25 Driver Features::
* AIXlink/X.25 Primitives::
* AIXlink/X.25 Input-Output Controls::
* AIXlink/X.25 Drivers and Modules::
* AIXlink/X.25 Libraries::
* AIXlink/X.25 Utilities::
* AIXlink/X.25 Management::
* AIXlink/X.25 Summary::
@end menu

@node AIXlink/X.25 Driver Addressing
@section AIXlink/X.25 Driver Addressing
@cindex AIXlink/X.25 addressing

@menu
* AIXlink/X.25 Driver Naming::
* AIXlink/X.25 PPA Selection::
* AIXlink/X.25 SAP Addressing::
* AIXlink/X.25 Primitive Addresses::
* AIXlink/X.25 Quality of Service Parameters::
@end menu

@node AIXlink/X.25 Driver Naming
@subsection AIXlink/X.25 Driver Naming

@node AIXlink/X.25 PPA Selection
@subsection AIXlink/X.25 PPA Selection

@node AIXlink/X.25 SAP Addressing
@subsection AIXlink/X.25 SAP Addressing

@node AIXlink/X.25 Primitive Addresses
@subsection AIXlink/X.25 Primitive Addresses

@node AIXlink/X.25 Quality of Service Parameters
@subsection AIXlink/X.25 Quality of Service Parameters

@node AIXlink/X.25 Driver Features
@section AIXlink/X.25 Driver Features
@cindex AIXlink/X.25 features

@menu
* AIXlink/X.25 LAN Operation::
* AIXlink/X.25 WAN Operation::
* AIXlink/X.25 Driver Modes::
@end menu

@node AIXlink/X.25 LAN Operation
@subsection AIXlink/X.25 LAN Operation
@cindex AIXlink/X.25 lan operation
@cindex lan operation AIXlink/X.25

@subsubsection AIXlink/X.25 Ethernet and SNAP Operation

@subsubsection AIXlink/X.25 LLC Type 1 Operation

@subsubsection AIXlink/X.25 LLC Type 2 Operation

@subsubsection AIXlink/X.25 LLC Type 3 Operation

@node AIXlink/X.25 WAN Operation
@subsection AIXlink/X.25 WAN Operation
@cindex AIXlink/X.25 wan operation
@cindex wan operation AIXlink/X.25

@node AIXlink/X.25 Driver Modes
@subsection AIXlink/X.25 Driver Modes

@subsubsection AIXlink/X.25 Promiscuous Mode

@cite{AIXlink/X.25} does not support promiscuous mode and does not support the
@prim{DL_PROMISCON_REQ} or @prim{DL_PROMISCOFF_REQ} primitives.

@subsubsection AIXlink/X.25 Raw Mode
@anchor{AIXlink/X.25 Raw Mode}
@cindex raw mode AIXlinx/X.25
@cindex AIXlinx/X.25 raw mode

@cite{AIXlink/X.25} does not support a raw mode.

@subsubsection AIXlink/X.25 LLC2 Mode
@anchor{AIXlink/X.25 LLC2 Mode}
@cindex llc2 mode AIXlink/X.25
@cindex AIXlink/X.25 llc2 mode

@cite{AIXlink/X.25} does not support an LLC2 mode.

@subsubsection AIXlink/X.25 CSMA/CD Mode
@anchor{AIXlink/X.25 CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode AIXlink/X.25
@cindex AIXlink/X.25 csma/cd mode

@subsubsection AIXlink/X.25 Fast Path

@subsubsection AIXlink/X.25 Combined Mode

@node AIXlink/X.25 Primitives
@section AIXlink/X.25 Primitives
@cindex AIXlink/X.25 primitives

@subsection AIXlink/X.25 Supported Primitives

The following primitives are supported by @cite{AIXlink/X.25}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_BIND_REQ} -- @tab 
@item @prim{DL_BIND_ACK} -- @tab 
@item @prim{DL_ERROR_ACK} -- @tab 
@item @prim{DL_INFO_REQ} -- @tab 
@item @prim{DL_INFO_ACK} -- @tab 
@item @prim{DL_OK_ACK} -- @tab 
@item @prim{DL_UNBIND_REQ} -- @tab 
@end multitable

The following connection-oriented mode primitives are supported by @cite{AIXlink/X.25}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_CONNECT_REQ} -- @tab 
@item @prim{DL_CONNECT_CON} -- @tab 
@item @prim{DL_DISCONNECT_REQ} -- @tab 
@item @prim{DL_DISCONNECT_IND} -- @tab 
@item @prim{DL_RESET_REQ} -- @tab 
@item @prim{DL_RESET_IND} -- @tab 
@item @prim{DL_RESET_RES} -- @tab 
@item @prim{DL_RESET_CON} -- @tab 
@end multitable

@subsection AIXlink/X.25 Unsupported Primitives

The following primitives are not supported by @cite{AIXlink/X.25}:

@itemize
@item @prim{DL_ATTACH_REQ},
@prim{DL_DETACH_REQ}
@item @prim{DL_SUBS_BIND_REQ},
@prim{DL_SUBS_BIND_ACK},
@prim{DL_SUBS_UNBIND_REQ}
@item @prim{DL_ENABMULTI_REQ},
@prim{DL_DISABMULTI_REQ}
@item @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}
@item @prim{DL_PHYS_ADDR_REQ},
@prim{DL_PHYS_ADDR_ACK},
@prim{DL_SET_PHYS_ADDR_REQ}
@item @prim{DL_GET_STATISTICS_REQ},
@prim{DL_GET_STATISTICS_ACK}

@end itemize

The following XID and TEST primitives are not supported by @cite{AIXlink/X.25}:

@itemize
@item @prim{DL_TEST_REQ},
@prim{DL_TEST_IND},
@prim{DL_TEST_RES},
@prim{DL_TEST_CON},
@prim{DL_XID_REQ},
@prim{DL_XID_IND},
@prim{DL_XID_RES},
@prim{DL_XID_CON}

@end itemize

The following connection-oriented mode primitives are not supported by
@cite{AIXlink/X.25}:

@itemize
@item @prim{DL_CONNECT_IND},
@prim{DL_CONNECT_RES}

@end itemize

The following connectionless mode primitives are not supported by
@cite{AIXlink/X.25}:

@itemize
@item @prim{DL_UNITDATA_REQ},
@prim{DL_UDQOS_REQ},
@prim{DL_UNITDATA_IND},
@prim{DL_UDERROR_IND}

@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{AIXlink/X.25}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@end itemize

@subsection AIXlink/X.25 Primitive Porting Considerations

@itemize
@item @prim{DL_ATTACH_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
and the corresponding Style 2 DLS provider is optional.
@cite{@value{PACKAGE_TITLE}} does not support this primitive for Style 1 DLS
providers either.
@item @prim{DL_DETACH_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
and the corresponding Style 2 DLS provider is optional.
@cite{@value{PACKAGE_TITLE}} does not support this primitive for Style 1 DLS
providers either.
@item @prim{DL_DISABMULTI_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for LAPB either.
@item @prim{DL_ENABMULTI_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for LAPB either.
@item @prim{DL_GET_PHYS_ADDR_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for LAPB either.
@item @prim{DL_GET_PHYS_ADDR_ACK}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for LAPB either.
@item @prim{DL_SET_PHYS_ADDR_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for LAPB either.
@item @prim{DL_GET_STATISTICS_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} supports this
primitive.
@item @prim{DL_GET_STATISTICS_ACK}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} supports this
primitive.
@item @prim{DL_PROMISCOFF_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} supports this
primitive.
@item @prim{DL_PROMISCON_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} supports this
primitive.
@item @prim{DL_SUBS_BIND_ACK}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for X.25 LAPB.
@item @prim{DL_SUBS_BIND_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for X.25 LAPB.
@item @prim{DL_SUBS_UNBIND_REQ}

@cite{AIXlink/X.25} does not support this primitive.  Supporting this primitive
is optional for the DLS provider.  @cite{@value{PACKAGE_TITLE}} does not support
this primitive for X.25 LAPB.
@item @prim{DL_CONNECT_IND}

@cite{AIXlink/X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user never binds with a non-zero
@parm{dl_max_conind} value so that the DLS provider does not issue this
primitive.
@item @prim{DL_CONNECT_RES}

@cite{AIXlink/X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive.

Care should be taken when porting @cite{AIX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user never binds with a non-zero
@parm{dl_max_conind} value so that the DLS provider will not accept this
primitive.
@item @prim{DL_PROMISCON_REQ}

@cite{AIXlink/X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive even for DLS providers that
do not support or are not bound in a connectionless mode.

Care should be taken when porting @cite{AIXlink/X.25} DLPI drivers, modules or
applications to @cite{@value{PACKAGE_TITLE}} that the DLS User does not reply
upon the DLS provider returning a non-fatal error in the event that this
primitive is issued.
@item @prim{DL_PROMISCOFF_REQ}

@cite{AIXlink/X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive even for DLS providers that
do not support or are not bound in a connectionless mode.

Care should be taken when porting @cite{AIXlink/X.25} DLPI drivers, modules or
applications to @cite{@value{PACKAGE_TITLE}} that the DLS User does not reply
upon the DLS provider returning a non-fatal error in the event that this
primitive is issued.  @end itemize

@subsection AIXlink/X.25 Extension Primitives

@cite{AIXlink/X.25} does not provide any extension primitives.

@node AIXlink/X.25 Input-Output Controls
@section AIXlink/X.25 Input-Output Controls
@cindex AIXlink/X.25 input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node AIXlink/X.25 Drivers and Modules
@section AIXlink/X.25 Drivers and Modules
@cindex AIXlink/X.25 drivers and modules

@node AIXlink/X.25 Libraries
@section AIXlink/X.25 Libraries
@cindex AIXlink/X.25 libraries

@node AIXlink/X.25 Utilities
@section AIXlink/X.25 Utilities
@cindex AIXlink/X.25 utilities

@node AIXlink/X.25 Management
@section AIXlink/X.25 Management
@cindex AIXlink/X.25 management

@node AIXlink/X.25 Summary
@section AIXlink/X.25 Summary
@cindex AIXlink/X.25 summary

@c ----------------------------------------------------------------------------

@page
@node Porting from HP-UX
@chapter Porting from HP-UX
@cindex Porting from HP-UX

@menu
* HP-UX Driver Addressing::
* HP-UX Driver Features::
* HP-UX Primitives::
* HP-UX Input-Output Controls::
* HP-UX Drivers and Modules::
* HP-UX Libraries::
* HP-UX Utilities::
* HP-UX Management::
* HP-UX Summary::
@end menu

@node HP-UX Driver Addressing
@section HP-UX Driver Addressing
@cindex HP-UX addressing

@menu
* HP-UX Driver Naming::
* HP-UX PPA Selection::
* HP-UX SAP Addressing::
* HP-UX Primitive Addresses::
* HP-UX Quality of Service Parameters::
@end menu

@node HP-UX Driver Naming
@subsection HP-UX Driver Naming

@node HP-UX PPA Selection
@subsection HP-UX PPA Selection

@node HP-UX SAP Addressing
@subsection HP-UX SAP Addressing

@node HP-UX Primitive Addresses
@subsection HP-UX Primitive Addresses

@node HP-UX Quality of Service Parameters
@subsection HP-UX Quality of Service Parameters

@node HP-UX Driver Features
@section HP-UX Driver Features
@cindex HP-UX features

@menu
* HP-UX LAN Operation::
* HP-UX WAN Operation::
* HP-UX Driver Modes::
@end menu

@node HP-UX LAN Operation
@subsection HP-UX LAN Operation
@cindex HP-UX lan operation
@cindex lan operation HP-UX

@subsubsection HP-UX Ethernet and SNAP Operation

@subsubsection HP-UX LLC Type 1 Operation

@subsubsection HP-UX LLC Type 2 Operation

@subsubsection HP-UX LLC Type 3 Operation

@node HP-UX WAN Operation
@subsection HP-UX WAN Operation
@cindex HP-UX wan operation
@cindex wan operation HP-UX

@node HP-UX Driver Modes
@subsection HP-UX Driver Modes

@subsubsection HP-UX Promiscuous Mode

@subsubsection HP-UX Raw Mode
@anchor{HP-UX Raw Mode}
@cindex raw mode HP-UX
@cindex HP-UX raw mode

@cite{HP-UX} provides support for a raw mode where the link-layer headers and
included in packets both delivered to the DLS User and accepted from the DLS
User.  The @cite{HP-UX} raw mode is entered by setting the
@parm{dl_service_mode} field of the @prim{DL_BIND_REQ} primitive to
@pval{DL_HP_RAWDLS}.

When raw mode has been enabled, all packets delivered to the DLS User are
delivered as @prim{DL_HP_RAWDATA_IND} primitives; all packets accepted from the
DLS User are @prim{DL_HP_RAWDATA_REQ} primitives.

This approach differs from other approaches in several ways:

@itemize
@item Normally raw modes are initiated using implementation-defined input-output
controls.  @cite{HP-UX} uses an implementation-defined service mode instead.
@item Normally raw data messages are delivered to and accepted from the DLS User
using existing DLPI primitives.  @cite{HP-UX} uses the implementation-defined
@prim{DL_HP_RAWDATA_REQ} and @prim{DL_HP_RAWDATA_IND} primitives instead.
@end itemize

@cite{@value{PACKAGE_TITLE}} supports the @cite{HP-UX} @pval{DL_HP_RAWDLS}
service mode as well as the @prim{DL_HP_RAWDATA_IND} and
@prim{DL_HP_RAWDATA_REQ} primitives in support of the porting of DLPI drivers,
modules and applications programs from @cite{HP-UX} to @cite{Linux}.

@subsubsection HP-UX LLC2 Mode
@anchor{HP-UX LLC2 Mode}
@cindex llc2 mode HP-UX
@cindex HP-UX llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@cite{HP-UX} supports LLC2 directly using the DLPI driver and, therefore, does
not require an LLC2 mode.

@cite{@value{PACKAGE_TITLE}} also supports LLC2 directly using the DLPI driver
permitting DLPI drivers, modules and applications to be ported from @cite{HP-UX}
to @cite{Linux} without the need for an LLC2 mode.

@subsubsection HP-UX CSMA/CD Mode
@anchor{HP-UX CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode HP-UX
@cindex HP-UX csma/cd mode

@subsubsection HP-UX Fast Path

@subsubsection HP-UX Combined Mode

@node HP-UX Primitives
@section HP-UX Primitives
@cindex HP-UX primitives

@subsection HP-UX Supported Primitives

The following primitives are supported by @cite{HP-UX}:

The following connectionless mode primitives are supported by @cite{HP-UX}:

The following connection-oriented mode primitives are supported by @cite{HP-UX}:

@subsection HP-UX Unsupported Primitives

The following primitives are not supported by @cite{HP-UX}:
@itemize
@item @prim{DL_SET_PHYS_ADDR_REQ}

@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{HP-UX}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@end itemize

@subsection HP-UX Primitive Porting Considerations

@table @prim
@item DL_PROMISCON_REQ

@cite{@value{PACKAGE_TITLE}} supports this primitive being issued multiple times
by the DLS users for the same promiscuous level without generating a fatal or
non-fatal error.  @cite{HP-UX} documentation is silent on the matter.

Care should be taken when porting @cite{HP-UX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely upon the DLS
provider returning an error should this primitive be issued multiple times for
the same promiscuous level.
@item DL_PROMISCOFF_REQ

@cite{@value{PACKAGE_TITLE}} supports this primitive being issued multiple times
by the DLS users for the same promiscuous level without generating a fatal or
non-fatal error.  @cite{HP-UX} documentation is silent on the matter.

Care should be taken when porting @cite{HP-UX} drivers, modules and applications
to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely upon the DLS
provider returning an error should this primitive be issued multiple times for
the same promiscuous level.

@end table

@subsection HP-UX Extension Primitives

@cite{HP-UX} provides the following extension primitives:

@multitable @columnfractions 0.5 0.5
@item @prim{DL_HP_GET_64BIT_STATS_ACK} -- @tab 
@item @prim{DL_HP_GET_64BIT_STATS_REQ} -- @tab 
@item @prim{DL_HP_HW_RESET_REQ} -- @tab 
@item @prim{DL_HP_LINK_DOWN_IND} -- @tab 
@item @prim{DL_HP_LINK_UP_IND} -- @tab 
@item @prim{DL_HP_MULTICAST_LIST_ACK} -- @tab 
@item @prim{DL_HP_MULTICAST_LIST_REQ} -- @tab 
@item @prim{DL_HP_NOTIFY_EVENT_REQ} -- @tab 
@item @prim{DL_HP_PPA_ACK} -- @tab 
@item @prim{DL_HP_PPA_REQ} -- @tab 
@item @prim{DL_HP_RAWDATA_IND} -- @tab 
@item @prim{DL_HP_RAWDATA_REQ} -- @tab 
@item @prim{DL_HP_RESET_STATS_REQ} -- @tab 
@end multitable

@cite{HP-UX} provides the following connection-oriented mode extension
primitives:

@multitable @columnfractions 0.5 0.5
@item @prim{DL_HP_CLEAR_LOCAL_BUSY_REQ} -- @tab 
@item @prim{DL_HP_CLEAR_STATS_REQ} -- @tab 
@item @prim{DL_HP_INFO_ACK} -- @tab 
@item @prim{DL_HP_INFO_REQ} -- @tab 
@item @prim{DL_HP_SET_ACK_THRESHOLD_REQ} -- @tab 
@item @prim{DL_HP_SET_ACK_TO_REQ} -- @tab 
@item @prim{DL_HP_SET_BUSY_TO_REQ} -- @tab 
@item @prim{DL_HP_SET_LOCAL_BUSY_REQ} -- @tab 
@item @prim{DL_HP_SET_LOCAL_WIN_REQ} -- @tab 
@item @prim{DL_HP_SET_MAX_RETRIES_REQ} -- @tab 
@item @prim{DL_HP_SET_P_TO_REQ} -- @tab 
@item @prim{DL_HP_SET_REJ_TO_REQ} -- @tab 
@item @prim{DL_HP_SET_REMOTE_WIN_REQ} -- @tab 
@item @prim{DL_HP_SET_SEND_ACK_TO_REQ} -- @tab 
@end multitable

@node HP-UX Input-Output Controls
@section HP-UX Input-Output Controls
@cindex HP-UX input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node HP-UX Drivers and Modules
@section HP-UX Drivers and Modules
@cindex HP-UX drivers and modules

@node HP-UX Libraries
@section HP-UX Libraries
@cindex HP-UX libraries

@node HP-UX Utilities
@section HP-UX Utilities
@cindex HP-UX utilities

@node HP-UX Management
@section HP-UX Management
@cindex HP-UX management

@node HP-UX Summary
@section HP-UX Summary
@cindex HP-UX summary

@c ----------------------------------------------------------------------------

@page
@node Porting from IRIX
@chapter Porting from IRIX
@cindex Porting from IRIX

@menu
* IRIX Driver Addressing::
* IRIX Driver Features::
* IRIX Primitives::
* IRIX Input-Output Controls::
* IRIX Drivers and Modules::
* IRIX Libraries::
* IRIX Utilities::
* IRIX Management::
* IRIX Summary::
@end menu

@cite{IRIX} is the @cite{UNIX System V Release 4.2} based operating system which
is a product of @cite{Silicon Graphics Inc.}, or just @cite{SGI}.

@node IRIX Driver Addressing
@section IRIX Driver Addressing
@cindex IRIX addressing

@menu
* IRIX Driver Naming::
* IRIX PPA Selection::
* IRIX SAP Addressing::
* IRIX Primitive Addresses::
* IRIX Quality of Service Parameters::
@end menu

@node IRIX Driver Naming
@subsection IRIX Driver Naming

@node IRIX PPA Selection
@subsection IRIX PPA Selection

@node IRIX SAP Addressing
@subsection IRIX SAP Addressing

Directly from the @cite{IRIX} manual page:@footnote{@uref{http://techpubs.sgi.com/,dlpi(7)}}

The normal mode of operation is when a bind, @prim{DL_BIND_REQ}, is performed
with the value of the SAP, @parm{dl_sap}, information being in the rante 0x02
to 0xFE, inclusive (one-octet, even-value).  This is the same as specified under
ISO/IEC 8802-2 (IEEE 802.2) LLC, and is the onl mode of operation fro
connection-oriented (i.e. LLC Type 2) service mode.  The Sub-Network Access
Protocol (SNAP) als uses this mode of operation.  The DLSAP address for normal
mode has the following format:

@smallexample
struct llc_dlsap @{
    u_char dl_mac[6];  /* hardware address */
    u_char dl_sap;     /* LLC SAP */
@};
@end smallexample

The DLSAP address may be modified through @prim{DL_SUBS_BIND_REQ} primitive when
the SNAP is used to extend the LLC header.  The extended SNAP DLSAP addresse
have the following format:

@smallexample
struct llc_snap_dlsap @{
    u_char dl_mac[6];    /* hardware address */
    u_char dl_sap;       /* SNAP sap: 0xAA */
    u_char dl_oui[3];    /* OUI information */
    u_char dl_proto[2];  /* protocol ID */
@};
@end smallexample

DLS users should use the @type{llc_dlsap} format in constructing the
@prim{DL_UNITDATA_REQ} primitive and it is the DLS User responsibility to put
the OUI information and protocol ID in front of their data.  Upon receipt of
@prim{DL_UNITDATA_IND}, the DLSAP addresses are also of @type{llc_dlsap} format.
It is the DLS User responsibility to skip the OUI information and protocol ID
for the user data.

The DLSAP address may also be modified if source routing is used for Token Ring
networks through TEST and/or XID primitives.  The source routing information
field (rif) is appended to the end of the @type{llc_dlsap} format.  The
@prim{DL_CONNECT_REQ}, @prim{DL_CONNECT_IND}, @prim{DL_CONNECT_RES},
@prim{DL_CONNECT_CON}, primitives should also use this @type{llc_sri_dlsap}
format when source routing information is present.  The extended SRI DLSAP
addresses have the following format:

@smallexample
struct llc_sri_dlsap @{
    u_char dl_mac[6];    /* hardware address */
    u_char dl_sap;       /* LLC SAP */
    u_char dl_rif;       /* start of rif */
@};
@end smallexample

The Ethernet mode of operation occurs when a bind is performed for two bytes
(the high byte being non-zero).  When this occurs, the binding driver will be
sent packets for the Ethernet types registered for.

The DLSAP address for Ethernet mode has the following format:

@smallexample
struct llc_eth_dlsap @{
    u_char dl_mac[6];    /* hardware address */
    u_short dl_sap;      /* Ethernet SAP */
@};
@end smallexample

@node IRIX Primitive Addresses
@subsection IRIX Primitive Addresses

@node IRIX Quality of Service Parameters
@subsection IRIX Quality of Service Parameters

@node IRIX Driver Features
@section IRIX Driver Features
@cindex IRIX features

@menu
* IRIX LAN Operation::
* IRIX WAN Operation::
* IRIX Driver Modes::
@end menu

@node IRIX LAN Operation
@subsection IRIX LAN Operation
@cindex IRIX lan operation
@cindex lan operation IRIX

@subsubsection IRIX Ethernet and SNAP Operation

@subsubsection IRIX LLC Type 1 Operation

As will all of the other implementations, LLC Type 1 operation is supported.

@subsubsection IRIX LLC Type 2 Operation

@cite{IRIX} is another of the implementations that supports LLC Type 2 directly,
using the @pval{DL_CODLS} data link service and the associated
connection-oriented mode service primitives.

@subsubsection IRIX LLC Type 3 Operation

@cite{IRIX} does not support LLC Type 3, as is true for the other @cite{UNIX}
implementations.

@node IRIX WAN Operation
@subsection IRIX WAN Operation
@cindex IRIX wan operation
@cindex wan operation IRIX

@node IRIX Driver Modes
@subsection IRIX Driver Modes

@subsubsection IRIX Promiscuous Mode

@subsubsection IRIX Raw Mode
@anchor{IRIX Raw Mode}
@cindex raw mode IRIX
@cindex IRIX raw mode

@subsubsection IRIX LLC2 Mode
@anchor{IRIX LLC2 Mode}
@cindex llc2 mode IRIX
@cindex IRIX llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@cite{IRIX} supports LLC2 directly using the DLPI driver and, therefore, does
not require an LLC2 mode.

@cite{@value{PACKAGE_TITLE}} also supports LLC2 directly using the DLPI driver
permitting DLPI drivers, modules and applications to be ported from @cite{IRIX}
to @cite{Linux} without the need for an LLC2 mode.

@subsubsection IRIX CSMA/CD Mode
@anchor{IRIX CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode IRIX
@cindex IRIX csma/cd mode

@subsubsection IRIX Fast Path

@subsubsection IRIX Combined Mode

@node IRIX Primitives
@section IRIX Primitives
@cindex IRIX primitives

@subsection IRIX Supported Primitives

The following primitives are supported by @cite{IRIX}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_INFO_REQ} -- @tab 
@item @prim{DL_INFO_ACK} -- @tab 
@item @prim{DL_ERROR_ACK} -- @tab 
@item @prim{DL_OK_ACK} -- @tab 
@item @prim{DL_ATTACH_REQ} -- @tab 
@item @prim{DL_DETACH_REQ} -- @tab 
@item @prim{DL_BIND_REQ} -- @tab 
@item @prim{DL_BIND_ACK} -- @tab 
@item @prim{DL_SUBS_BIND_REQ} -- @tab 
@item @prim{DL_SUBS_BIND_ACK} -- @tab 
@item @prim{DL_SUBS_UNBIND_REQ} -- @tab 
@item @prim{DL_ENABMULTI_REQ} -- @tab 
@item @prim{DL_DISABMULTI_REQ} -- @tab 
@item @prim{DL_PHYS_ADDR_REQ} -- @tab 
@item @prim{DL_PHYS_ADDR_ACK} -- @tab 
@item @prim{DL_SET_PHYS_ADDR_ACK} -- @tab 
@item @prim{DL_XID_REQ} -- @tab 
@item @prim{DL_XID_IND} -- @tab 
@item @prim{DL_XID_RES} -- @tab 
@item @prim{DL_XID_CON} -- @tab 
@item @prim{DL_TEST_REQ} -- @tab 
@item @prim{DL_TEST_IND} -- @tab 
@item @prim{DL_TEST_RES} -- @tab 
@item @prim{DL_TEST_CON} -- @tab 
@end multitable

The following connectionless mode primitives are supported by @cite{IRIX}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_UNITDATA_REQ} -- @tab 
@item @prim{DL_UNITDATA_IND} -- @tab 
@item @prim{DL_UDERROR_IND} -- @tab 
@end multitable

The following connection-oriented mode primitives are supported by @cite{IRIX}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_TOKEN_REQ} -- @tab 
@item @prim{DL_TOKEN_ACK} -- @tab 
@item @prim{DL_CONNECT_REQ} -- @tab 
@item @prim{DL_CONNECT_IND} -- @tab 
@item @prim{DL_CONNECT_RES} -- @tab 
@item @prim{DL_CONNECT_CON} -- @tab 
@item @prim{DL_DATA_REQ} -- @tab 
@item @prim{DL_DATA_IND} -- @tab 
@item @prim{DL_RESET_REQ} -- @tab 
@item @prim{DL_RESET_IND} -- @tab 
@item @prim{DL_RESET_RES} -- @tab 
@item @prim{DL_RESET_CON} -- @tab 
@item @prim{DL_DISCONNECT_REQ} -- @tab 
@item @prim{DL_DISCONNECT_IND} -- @tab 
@end multitable

@subsection IRIX Unsupported Primitives

The following primitives are not supported by @cite{IRIX}:

@itemize
@item @prim{DL_PROMISCON_REQ}

Not supported by @cite{IRIX}, although I trust that it will respsond to the
@dlioc{DLIOCSPROMISC} input-output control, regardless of it not being
documented.
@item @prim{DL_PROMISCOFF_REQ}

Not supported by @cite{IRIX}, although I trust that it will respsond to the
@dlioc{DLIOCSPROMISC} input-output control, regardless of it not being
documented.
@item @prim{DL_GET_STATISTICS_REQ},
@prim{DL_GET_STATISTICS_ACK}

Not supported by @cite{IRIX}, although I trust that it will respsond to the
@dlioc{DLIOCGMIB} input-output control, regardless of it not being
documented.
@end itemize

The following connectionless mode primitives are not supported by @cite{IRIX}:

@itemize
@item @prim{DL_UDQOS_REQ}

@cite{IRIX} does not support quality of service parameters for connectionless
mode of operation and this primitive is therefore unnecessary and not supported.

@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{IRIX}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@cite{IRIX}, like most other @cite{UNIX} implementations, does not support
acknowledged connectionless mode data link service.  Therefore, none of these
primitives are applicable.  Note that ISO/IEC 8802-2 (IEEE 802.2) does not
require that either LLC Type 2 or LLC Type 3 be supported.

@end itemize

@subsection IRIX Extension Primitives

@cite{IRIX} provides no extension primitives.

@node IRIX Input-Output Controls
@section IRIX Input-Output Controls
@cindex IRIX input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node IRIX Drivers and Modules
@section IRIX Drivers and Modules
@cindex IRIX drivers and modules

@node IRIX Libraries
@section IRIX Libraries
@cindex IRIX libraries

@node IRIX Utilities
@section IRIX Utilities
@cindex IRIX utilities

@node IRIX Management
@section IRIX Management
@cindex IRIX management

@node IRIX Summary
@section IRIX Summary
@cindex IRIX summary

@c ----------------------------------------------------------------------------

@page
@node Porting from LiS
@chapter Porting from LiS
@cindex Porting from LiS

@menu
* LiS Driver Addressing::
* LiS Driver Features::
* LiS Primitives::
* LiS Input-Output Controls::
* LiS Drivers and Modules::
* LiS Libraries::
* LiS Utilities::
* LiS Management::
* LiS Summary::
@end menu

@node LiS Driver Addressing
@section LiS Driver Addressing
@cindex LiS addressing

@menu
* LiS Driver Naming::
* LiS PPA Selection::
* LiS SAP Addressing::
* LiS Primitive Addresses::
* LiS Quality of Service Parameters::
@end menu

@node LiS Driver Naming
@subsection LiS Driver Naming

@node LiS PPA Selection
@subsection LiS PPA Selection

@node LiS SAP Addressing
@subsection LiS SAP Addressing

@node LiS Primitive Addresses
@subsection LiS Primitive Addresses

@node LiS Quality of Service Parameters
@subsection LiS Quality of Service Parameters

@node LiS Driver Features
@section LiS Driver Features
@cindex LiS features

@menu
* LiS LAN Operation::
* LiS WAN Operation::
* LiS Driver Modes::
@end menu

@node LiS LAN Operation
@subsection LiS LAN Operation
@cindex LiS lan operation
@cindex lan operation LiS

@subsubsection LiS Ethernet and SNAP Operation

@subsubsection LiS LLC Type 1 Operation

@subsubsection LiS LLC Type 2 Operation

@subsubsection LiS LLC Type 3 Operation

@node LiS WAN Operation
@subsection LiS WAN Operation
@cindex LiS wan operation
@cindex wan operation LiS

@node LiS Driver Modes
@subsection LiS Driver Modes

@subsubsection LiS Promiscuous Mode

@subsubsection LiS Raw Mode
@anchor{LiS Raw Mode}
@cindex raw mode LiS
@cindex LiS raw mode

@subsubsection LiS LLC2 Mode
@anchor{LiS LLC2 Mode}
@cindex llc2 mode LiS
@cindex LiS llc2 mode

@subsubsection LiS CSMA/CD Mode
@anchor{LiS CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode LiS
@cindex LiS csma/cd mode

@subsubsection LiS Fast Path

@subsubsection LiS Combined Mode

@node LiS Primitives
@section LiS Primitives
@cindex LiS primitives

@node LiS Input-Output Controls
@section LiS Input-Output Controls
@cindex LiS input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node LiS Drivers and Modules
@section LiS Drivers and Modules
@cindex LiS drivers and modules

@node LiS Libraries
@section LiS Libraries
@cindex LiS libraries

@node LiS Utilities
@section LiS Utilities
@cindex LiS utilities

@node LiS Management
@section LiS Management
@cindex LiS management

@node LiS Summary
@section LiS Summary
@cindex LiS summary

@c ----------------------------------------------------------------------------

@page
@node Porting from OSF
@chapter Porting from OSF
@cindex Porting from OSF

@menu
* OSF Driver Addressing::
* OSF Driver Features::
* OSF Primitives::
* OSF Input-Output Controls::
* OSF Drivers and Modules::
* OSF Libraries::
* OSF Utilities::
* OSF Management::
* OSF Summary::
@end menu

Here the reference to ``@cite{OSF}'' refers to @cite{Digtal UNIX} and @cite{Tru64 UNIX} and all
those other names that @cite{OSF} derivatives have been called.

@node OSF Driver Addressing
@section OSF Driver Addressing
@cindex OSF addressing

@menu
* OSF Driver Naming::
* OSF PPA Selection::
* OSF SAP Addressing::
* OSF Primitive Addresses::
* OSF Quality of Service Parameters::
@end menu

Each DLPI user must establish an identity to communicate with other data link
users.  This identity consists of the following pieces of information:

@node OSF Driver Naming
@subsection OSF Driver Naming

@node OSF PPA Selection
@subsection OSF PPA Selection

Physical attachment identification identifies the physical medium over which the
DLS user communicates.  The importance of identifying the physical medium is
particularly evident on systems that are attached to multiple physical media.

The PPA is the point at which the system attaches itself to the physical
communications medium.  All communication on that physical medium funnels
through the PPA.  On systems where DLS provider supports more than one physical
medium, the DLS user must identify the medium through which it will communicate.
A PPA is identified by a unique PPA identifier.

@cite{OSF} only supports the Style 2 provider because it is more suitable for
supporting large numbers of PPAs.

To establish a list of available PPAs, @cite{OSF} provides the @dlioc{ND_GET}
input-output control.  This input-output control is a general purpose
@ioctlref{I_STR} input-output control that takes a buffer containing a
identifier string (in this case ``dl_ifnames'') and returns a output string in
the same buffer.  The output string looks something like:

@smallexample
sscc0 (PPA 1) ln0 (PPA 2) dsy9 (PPA 3) dsy1 \
(PPA 4) sl0 (PPA 5) sl1 (PPA 6) lo0
@end smallexample

The @dlioc{ND_GET} input-output control is defined as:

@smallexample
#define ND_GET (('N' << 8) + 0)
@end smallexample

@node OSF SAP Addressing
@subsection OSF SAP Addressing

The DLS user must register with the DLS provider so that the provider can
deliver protocol data units destined for that user.

The format of the DLSAP address is an unsigned character array containing the
Media Access Control (MAC) addresses followed by the bound Service Access Point
(SAP).  The SAP is usually two bytes in the case of Ethernet, or one byte in the
case of ISO/IEC 8802-2 (IEEE 802.2).  The one exception is when
@pval{DL_HIERARCHICAL_BIND} is processed.  In that case, the DLSAP address
consists of the MAC address, the SNAP SAP (0xAA), and a five-byte SNAP.

@node OSF Primitive Addresses
@subsection OSF Primitive Addresses

The format of the DLSAP address is an unsigned character array containing the
Media Access Control (MAC) addresses followed by the bound Service Access Point
(SAP).  The SAP is usually two bytes in the case of Ethernet, or one byte in the
case of ISO/IEC 8802-2 (IEEE 802.2).  The one exception is when
@pval{DL_HIERARCHICAL_BIND} is processed.  In that case, the DLSAP address
consists of the MAC address, the SNAP SAP (0xAA), and a five-byte SNAP.

@node OSF Quality of Service Parameters
@subsection OSF Quality of Service Parameters

@cite{OSF} does not support quality of service parameters.

@node OSF Driver Features
@section OSF Driver Features
@cindex OSF features

@menu
* OSF LAN Operation::
* OSF WAN Operation::
* OSF Driver Modes::
@end menu

@node OSF LAN Operation
@subsection OSF LAN Operation
@cindex OSF lan operation
@cindex lan operation OSF

@subsubsection OSF Ethernet and SNAP Operation

@subsubsection OSF LLC Type 1 Operation

@cite{OSF} @manpage{dlb(7)} driver supports LLC Type 1 and Ethernet operation in
the usual manner.

@subsubsection OSF LLC Type 2 Operation

@cite{OSF} is one of the DLPI implementations that does not directly support LLC
Type 2 operation.

@subsubsection OSF LLC Type 3 Operation

@cite{OSF}, as the other @cite{UNIX} derivatives, does not directly support LLC
Type 3 operation.

@node OSF WAN Operation
@subsection OSF WAN Operation
@cindex OSF wan operation
@cindex wan operation OSF

@node OSF Driver Modes
@subsection OSF Driver Modes

@subsubsection OSF Promiscuous Mode

It is unclears whether the @manpage{dlb(7)} driver supports promiscuous mode.
@cite{OSF} does not document input-output controls to place DLPI interfaces into
promiscuous mode and does not support the @prim{DL_PROMISCON_REQ} and
@prim{DL_PROMISCOFF_REQ} primitive.  Chances are they recommend the sockets DLI
interface instead.

@subsubsection OSF Raw Mode
@anchor{OSF Raw Mode}
@cindex raw mode OSF
@cindex OSF raw mode

It is unclear whether the @manpage{dlb(7)} driver supports an @dfn{Raw Mode}.
@cite{OSF} does not document input-output controls to place DLPI interfaces into
raw mode.  Chances are they recommend the sockets DLI interface instead.

@subsubsection OSF LLC2 Mode
@anchor{OSF LLC2 Mode}
@cindex llc2 mode OSF
@cindex OSF llc2 mode

Although @cite{OSF} does not directly support LLC Type 2 operation, it is
unclear whether the @manpage{dlb(7)} driver supports an @dfn{LLC2 Mode}.
@cite{OSF} does not document input-output controls to place DLPI interfaces into
LLC2 mode.  Chances are they recommend the sockets DLI interface instead.

@subsubsection OSF CSMA/CD Mode
@anchor{OSF CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode OSF
@cindex OSF csma/cd mode

It is unclears whether the @manpage{dlb(7)} driver supports CSMA/CD mode.
@cite{OSF} does not document input-output controls to place DLPI interfaces into
CSMA/CD mode.  Chances are they recommend the sockets DLI interface instead.

@subsubsection OSF Fast Path

@cite{OSF} does not document a Fast Path.  One of the reasons for this is that
the @cite{OSF} DLPI driver, @manpage{dlb(7)}, is really just a bridge to the
underlying BSD interfaces.  Therefore, upper layer protocols within the BSD
stack, such as IP, do not require a fast path from DLPI.

@subsubsection OSF Combined Mode

@cite{OSF} does not support connection-oriented mode, far less a combined
connectionless and connection-oriented mode.

@node OSF Primitives
@section OSF Primitives
@cindex OSF primitives

@subsection OSF Supported Primitives

The following primitives are supported by @cite{OSF}:

@itemize
@item @prim{DL_ATTACH_REQ} -- Requests that the DLS provider associate a
physical point of attachment (PPA) with a Stream.  Used on style 2 providers
only.
@item @prim{DL_DETACH_REQ} -- Request the DLS provider disassociated a physical
point of attachment(PPA) with a Stream.
@item @prim{DL_BIND_REQ} -- Requests that the DLS provider bind a DLSAP to the
Stream.  The DLS user must identify the address of the DLSAP to be bound ot the
Stream.
@item @prim{DL_BIND_ACK} -- Reports the successful bind of a DLSAP to a Stream,
and returns the bound DLSAP address to the DLS user.  Generated in response to a
DL_BIND_REQ.
@item @prim{DL_UNBIND_REQ} -- Requests that the DLS provider unbind the DLSAP
that was bound by a previous DL_BIND_REQ from this Stream.
@item @prim{DL_SUBS_BIND_REQ} -- Request the DLS provider bind a subsequent
DLSAP to a Stream.  There are two classes of subsequent bind requests:
@pval{DL_HIERARCHICAL_BIND} and @pval{DL_PEER_BIND}.
@pval{DL_HIERARCHICAL_BIND} requests are only valid for SNAPs (see the IEEE
802.1 specification) and you must have bound to the SNAP sap (0xAA) with a
@prim{DL_BIND_REQ} before issuing the @prim{DL_SUBS_BIND_REQ} for the SNAP.
@pval{DL_PEER_BIND} requests binds to additional saps but does not change the
DLSAP address of the Stream.
@item @prim{DL_SUBS_BIND_ACK} -- The positive response to a
@prim{DL_SUBS_BIND_REQ} from the DLS provider.
@item @prim{DL_SUBS_UNBIND_REQ} -- Requests the DLS provider to unbind a SAP
that was previously bound with a @prim{DL_SUBS_BIND_REQ}.
@item @prim{DL_INFO_REQ} -- Requests the DLS provider return information about
the DLPI Stream.
@item @prim{DL_INFO_ACK} -- Response to @prim{DL_INFO_REQ} primitive; conveys
information about the DLPI Stream.
@item @prim{DL_OK_ACK} -- Acknowledges to the DLS user that a previously issued
request or response primitive was successfully received.
@item @prim{DL_ERROR_ACK} -- Informs the DLS user of a previously issued request
or response that was invalid.
@item @prim{DL_ENABMULTI_REQ} -- Requests the DLS provider enable a specific
multicast address.  (The @cite{OSF} implementation requires that the state is
@psta{DS_IDLE}.
@item @prim{DL_DISABMULTI_REQ} -- Requests the DLS provider disable a specific
multicast address.
@item @prim{DL_PHYS_ADDR_REQ} -- Requests that the DLS provider return either
the default (factory) or current value of the physical address associated with
the Stream, depending upon the value of the address type selected in the
request.
@item @prim{DL_PHYS_ADDR_ACK} -- Returns the value for the physical address to
the DLS user in response to a @prim{DL_PHYS_ADDR_REQ}.
@item @prim{DL_TEST_REQ} -- Requests the DLS provider to transmit a TEST command
DLSDU on behalf of the DLS user.
@item @prim{DL_TEST_IND} -- Conveys to the DLS user that a DLSDU TEST command
DLSDU was received.
@item @prim{DL_TEST_RES} -- Requests the DLS provider to transmit a TEST
response on behalf of the DLS user.
@item @prim{DL_TEST_CON} -- Conveys that a DLSDU TEST response was received in
response to a @prim{DL_TEST_REQ}.
@item @prim{DL_XID_REQ} -- Requests the DLS provider to send an XID command
DLSUD on behalf of the DLS user.
@item @prim{DL_XID_IND} -- Conveys to the DLS user that an XID command DLSDU was
received.
@item @prim{DL_XID_RES} -- Requests the DLS provider to send an XID response
DLSDU on behalf of the DLS user.
@item @prim{DL_XID_CON} -- Conveys that a XID DLSDU was received in response to
a @prim{DL_XID_REQ}.
@end itemize

The following connectionless mode primitives are supported by @cite{OSF}:

@itemize
@item @prim{DL_UNITDATA_REQ} -- Conveys one DLSDU from the DLS user to the DLS
provider for transmission to a peer DLS user.
@item @prim{DL_UNITDATA_IND} --  Conveys one DLSDU from the DLS provider to the
DLS user.
@item @prim{DL_UDERROR_IND} -- Informs the DLS user that a previously sent
@prim{DL_UNITDATA_REQ} failed.
@end itemize

@subsection OSF Unsupported Primitives

The following primitives are not supported by @cite{OSF}:

@itemize
@item @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}

@cite{OSF} does not support promiscuous mode on the DLPI driver.  For
promiscuous mode, use the DLI sockets interface.
@item @prim{DL_GET_STATISTICS_REQ},
@prim{DL_GET_STATISTICS_ACK}

@cite{OSF} does not support statistics collection on the DLPI driver.  For
statistics collection, the MIBs or the BSD functions are used.
@item @prim{DL_SET_PHYS_ADDR_REQ}

@cite{OSF} does not support setting the physical address on the interface using
the DLPI driver.  This is possibly affected using @manpage{ifconfig(8)} or some
such BSD utility.

@end itemize

The following connectionless mode primitives are not supported by @cite{OSF}:

@itemize
@item @prim{DL_UDQOS_REQ} 

@cite{OSF} does not support quality of service parameters.

@end itemize

The following connection-oriented mode primitives are not supported by
@cite{OSF}:

@itemize
@item @prim{DL_TOKEN_REQ},
@prim{DL_TOKEN_ACK},
@prim{DL_CONNECT_REQ},
@prim{DL_CONNECT_IND},
@prim{DL_CONNECT_RES},
@prim{DL_CONNECT_CON},
@prim{DL_DATA_REQ},
@prim{DL_DATA_IND},
@prim{DL_RESET_REQ},
@prim{DL_RESET_IND},
@prim{DL_RESET_RES},
@prim{DL_RESET_CON},
@prim{DL_DISCONNECT_REQ},
@prim{DL_DISCONNECT_IND}

@cite{OSF} does not support connection-oriented data link service on the DLPI
driver and so all connection-oriented data link service mode primitives are not
supported.  It is not required to support LLC Type 2 operation on a LAN station.
@end itemize

The following acknowledged-connectionless mode primitives are not supported by
@cite{OSF}:

@itemize
@item @prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@cite{OSF} does not support acknowledged connectionless data link service on the
DLPI driver and so these primitives are not supported.  It is not required to
support acknowledged connectionless data link service LLC Type 3 on a LAN
station.

@end itemize

@subsection OSF Extension Primitives

@cite{OSF} does not provide any extension primitives.

@node OSF Input-Output Controls
@section OSF Input-Output Controls
@cindex OSF input-output controls

@cite{OSF} input-output controls are not well documented.

See @manref{dlpi_ioctl(4)} for more detail.

@itemize
@item @dlioc{ND_GET} -- Used to obtain the string representation of any number
of kernel identifiers.  In this case, ``dl_ifnames'' is used to identify the
available PPAs on the system.
@end itemize

@node OSF Drivers and Modules
@section OSF Drivers and Modules
@cindex OSF drivers and modules

@cite{OSF} basically provides a similar type of module to that provided by
@cite{@value{PACKAGE_TITLE}}: it is a DLPI driver that bridges between
@dfn{STREAMS} and the underlying BSD network device interfaces that are provided
by @cite{OSF}'s basic BSD kernel.  Therefore, the driver, @command{dlb(7)}, is
basically organized into a top-half and bottom-half, where the top-half is the
DLPI @dfn{STREAMS} driver, and the BSD network device implementation is the
bottom-half.

Unfortunately, @cite{OSF} DLPI support is somewhat lacking compared to others.
The richer interface is the sockets-based (and BSD-based) DLI interface, which
is roughly equivalent to the packet-mode sockets in Linux.  If you are porting a
DLI application, you are in the wrong place.  DLI applications should be ported
to native Linux sockets rather than DLPI.

@node OSF Libraries
@section OSF Libraries
@cindex OSF libraries

@cite{OSF} does not provide any libraries or utilities (other than basic
@dfn{STREAMS} facilities) in support of DLPI applications.

@node OSF Utilities
@section OSF Utilities
@cindex OSF utilities

Because @cite{OSF} implements a bridging driver, it provides few DLPI specific
utilities and administration tools.  Most of the tools that are provided are
BSD-style management programs and scripts intended on maintaining the BSD
networking kernel.

@node OSF Management
@section OSF Management
@cindex OSF management

Management of the @cite{OSF} networking is BSD-based and managed largely via
SNMP.

@node OSF Summary
@section OSF Summary
@cindex OSF summary

In general, porting @cite{OSF} DLPI applications to @cite{Linux} should pose
little difficulty.  The @cite{OSF} DLPI implementations is very restricted in
scope and features and any DLPI driver, module, or application should port
directly to @cite{@value{PACKAGE_TITLE}} without issue.  All of the addressing
and modes are supported buy @cite{Linux Fast-STREAMS}.  Special add-on packages
(probably based on the Spider implemetnation) are used for X.25.  See the
OpenSS7 X.25 porting guide for more information.

One simplification provided by the @cite{@value{PACKAGE_TITLE}} implementation
is that the PPA associated with a given network interface is the same as the
IETF Interface MIB @var{ifIndex} associated with that interface.  It is not
necessary to use the @dlioc{ND_GET} in the fashion of @cite{OSF} to collect
information about the mapping of interface names to interface indices.  Either
the SNMP functions can be used, or the input-output controls documented in
@manref{netdevice(7)} can be used.

@c ----------------------------------------------------------------------------

@page
@node Porting from PowerMAX
@chapter Porting from PowerMAX
@cindex Porting from PowerMAX

@menu
* PowerMAX Driver Addressing::
* PowerMAX Driver Features::
* PowerMAX Primitives::
* PowerMAX Input-Output Controls::
* PowerMAX Drivers and Modules::
* PowerMAX Libraries::
* PowerMAX Utilities::
* PowerMAX Management::
* PowerMAX Summary::
@end menu

@cite{PowerMAX OS} is the SVR 4.2MP based operating system provided by
@i{Concurrent Computer Corporation}.

@node PowerMAX Driver Addressing
@section PowerMAX Driver Addressing
@cindex PowerMAX addressing

@menu
* PowerMAX Driver Naming::
* PowerMAX PPA Selection::
* PowerMAX SAP Addressing::
* PowerMAX Primitive Addresses::
* PowerMAX Quality of Service Parameters::
@end menu

@node PowerMAX Driver Naming
@subsection PowerMAX Driver Naming

@node PowerMAX PPA Selection
@subsection PowerMAX PPA Selection

@node PowerMAX SAP Addressing
@subsection PowerMAX SAP Addressing

@cite{PowerMAX} provides the symbol @constant{PROMISCUOUS_SAP} that once bound
to acts as though @prim{DL_PROMISCON_REQ} was successful at the
@pval{DL_PROMISC_SAP} level.

@node PowerMAX Primitive Addresses
@subsection PowerMAX Primitive Addresses

@node PowerMAX Quality of Service Parameters
@subsection PowerMAX Quality of Service Parameters

@node PowerMAX Driver Features
@section PowerMAX Driver Features
@cindex PowerMAX features

@menu
* PowerMAX LAN Operation::
* PowerMAX WAN Operation::
* PowerMAX Driver Modes::
@end menu

@node PowerMAX LAN Operation
@subsection PowerMAX LAN Operation
@cindex PowerMAX lan operation
@cindex lan operation PowerMAX

@subsubsection PowerMAX Ethernet and SNAP Operation

@subsubsection PowerMAX LLC Type 1 Operation
@cindex llc1 operation
@cindex llc type 1 operation

The @cite{PowerMAX} DLPI driver supports LLC Type 1 and Ethernet operation in
the usual manner.

@subsubsection PowerMAX LLC Type 2 Operation
@cindex llc2 operation
@cindex llc type 2 operation

@cite{PowerMAX} is one of the DLPI implementations that does not directly
support LLC Type 2 operation.  However, it does not appear to have an @cite{LLC2
Mode} necessary for use by LLC2 DLS users.  This might just be a documentation
oversight.  @cite{@value{PACKAGE_TITLE}} provides the normal SVR 4.2
@dlioc{DLIOCLLC2MODE} input-output control for setting the @dfn{LLC2 Mode}.

@subsubsection PowerMAX LLC Type 3 Operation
@cindex llc3 operation
@cindex llc type 3 operation

@cite{PowerMAX}, as the other @cite{UNIX} derivatives, does not directly support
LLC Type 3 operation.

@node PowerMAX WAN Operation
@subsection PowerMAX WAN Operation
@cindex PowerMAX wan operation
@cindex wan operation PowerMAX

@node PowerMAX Driver Modes
@subsection PowerMAX Driver Modes

@subsubsection PowerMAX Promiscuous Mode

@cite{PowerMAX} provides the symbol @constant{PROMISCUOUS_SAP} that once bound
to acts as though @prim{DL_PROMISCON_REQ} was successful at the
@pval{DL_PROMISC_SAP} level.  The input-output contol command,
@dlioc{DLIOCSPROMISC} can be used to set the Stream as promiscuous at the
@pval{DL_PROMISC_PHYS} level.  The input-output control command,
@dlioc{DLIOCADDMULTI} can be used to set the Stream as promiscuous at the
@pval{DL_PROMISC_MULTI} level, but it needs to be executed once for each known
multicast or group address.

@subsubsection PowerMAX Raw Mode
@anchor{PowerMAX Raw Mode}
@cindex raw mode PowerMAX
@cindex PowerMAX raw mode

@cite{PowerMAX} does not appear to have an @dfn{Raw Mode}.  That is, it does
not document the availablity of the @dlioc{DLIOCRAWMODE} input-output control
command used by SVR4.2 to toggle the @dfn{Raw Mode}.  This might just be a
documentation oversight, in which case, @cite{@value{PACKAGE_TITLE}} provides
one anyway.

@subsubsection PowerMAX LLC2 Mode
@anchor{PowerMAX LLC2 Mode}
@cindex llc2 mode PowerMAX
@cindex PowerMAX llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@cite{PowerMAX} does not directly support LLC Type 2 operation.  Nevertheless,
it does not appear to have an @dfn{LLC2 Mode}.  That is, it does not document
the availability of the @dlioc{DLIOCLLC2MODE} input-output control command.

@subsubsection PowerMAX CSMA/CD Mode
@anchor{PowerMAX CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode PowerMAX
@cindex PowerMAX csma/cd mode

@cite{PowerMAX} documents that the @dfn{CSMA/CD Mode} can be toggled using the
usual SVR 4.2 @dlioc{DLIOCCSMACDMODE} input-output control.

@subsubsection PowerMAX Fast Path

@cite{PowerMAX} does not document a @dfn{Fast Path}.

@subsubsection PowerMAX Combined Mode

@node PowerMAX Primitives
@section PowerMAX Primitives
@cindex PowerMAX primitives

@subsection PowerMAX Supported Primitives

The following primitives are supported by @cite{PowerMAX}:

@itemize
@item @prim{DL_INFO_REQ}
@item @prim{DL_INFO_ACK}
@item @prim{DL_OK_ACK}
@item @prim{DL_ERROR_ACK}
@item @prim{DL_BIND_ACK}
@item @prim{DL_BIND_REQ}
@item @prim{DL_SUBS_BIND_ACK}
@item @prim{DL_SUBS_BIND_REQ}
@item @prim{DL_SUBS_UNBIND_REQ}
@item @prim{DL_UNBIND_REQ}
@item @prim{DL_TEST_REQ}
@item @prim{DL_TEST_CON}
@end itemize

The following connectionless mode primitives are supported by @cite{PowerMAX}:

@itemize
@item @prim{DL_UNITDATA_REQ}
@item @prim{DL_UNITDATA_IND}
@item @prim{DL_UDERROR_IND}
@end itemize

@subsection PowerMAX Unsupported Primitives

The following primitives are not supported by @cite{PowerMAX}:

@itemize
@item @prim{DL_ATTACH_REQ},
@prim{DL_DETACH_REQ}

Needed only for Style 2 and @cite{PowerMAX} is only Style 1 drivers.
@item @prim{DL_ENABMULTI_REQ},
@prim{DL_DISABMULTI_REQ}

Some of the functionality of these primitives can be achieved with the
@dlioc{DLIOCADDMULTI} and @dlioc{DLIOCDELMULTI} input-output controls.
@item @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}

Some of the functionality of this primitive can be acheived with the
@dlioc{DLIOCSPROMISC} and @dlioc{DLIOCGPROMISC} input-output controls.
@item @prim{DL_XID_REQ},
@prim{DL_XID_IND},
@prim{DL_XID_RES},
@prim{DL_XID_CON}

@cite{PowerMAX} does not appear to support XID (in interaction with the DLS
User) at all.  This does not mean that automatic XID is not supported.

@item @prim{DL_TEST_IND},
@prim{DL_TEST_RES}

@cite{PowerMAX} does not appear to support TEST indications and reponses (in
interaction with the DLS user) at all.  This does not mean that automatic TEST
is not supported.

@item @prim{DL_PHYS_ADDR_REQ},
@prim{DL_PHYS_ADDR_ACK}

Some of the functionality of this primitive can be acheived with the
@dlioc{DLIOCGENADDR} input-output control.
@item @prim{DL_SET_PHYS_ADDR_REQ}

Some of the functionality of this primitive can be acheived with the
@dlioc{DLIOCSENADDR} input-output control.
@item @prim{DL_GET_STATISTICS_REQ},
@prim{DL_GET_STATISTICS_ACK}

Some of the functionality of this primitive can be acheived with the
@dlioc{DLIOCGMIB} and @dlioc{DLIOCSMIB} input-output controls.
@end itemize

The following connectionless mode primitives are not supported by
@cite{PowerMAX}:

@itemize
@item @prim{DL_UDQOS_REQ}

@cite{PowerMAX} does not support quality of service parameters.
@end itemize

The following connection-oriented mode primitives are not supported by
@cite{PowerMAX}:

@itemize
@item @prim{DL_TOKEN_REQ},
@prim{DL_TOKEN_ACK},
@prim{DL_CONNECT_REQ},
@prim{DL_CONNECT_IND},
@prim{DL_CONNECT_RES},
@prim{DL_CONNECT_CON},
@prim{DL_DATA_REQ},
@prim{DL_DATA_IND},
@prim{DL_RESET_REQ},
@prim{DL_RESET_IND},
@prim{DL_RESET_RES},
@prim{DL_RESET_CON},
@prim{DL_DISCONNECT_REQ},
@prim{DL_DISCONNECT_IND}

These are connection-oriented mode primitives and @cite{PowerMAX} only supports
some connectionless mode primitives.
@end itemize

The following acknowledged-connectionless mode primitives are not supported by
@cite{PowerMAX}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@cite{PowerMAX} does not support acknowledged connectionless data link service
on the DLPI driver and so these primitives are not supported.  It is not
required to support acknowledged connectionless data link service LLC Type 3 on
a LAN station.

@end itemize

@subsection PowerMAX Extension Primitives

@cite{PowerMAX} does not provide any extension primitives.

@node PowerMAX Input-Output Controls
@section PowerMAX Input-Output Controls
@cindex PowerMAX input-output controls

@cite{IRIX} supports the rather typical set of SVR 4.2 data link input-output
controls as follows:

@multitable @columnfractions 0.35 0.65
@item @dlioc{DLIOCSMIB} -- @tab Set MIB.
@item @dlioc{DLIOCGMIB} -- @tab Get MIB.
@item @dlioc{DLIOCSENADDR} -- @tab Set Ethernet address.
@item @dlioc{DLIOCGENADDR} -- @tab Get Ethernet address.
@item @dlioc{DLIOCSLPCFLG} -- @tab Set local packet copy flag.
@item @dlioc{DLIOCGLPCFLG} -- @tab Get local packet copy flag.
@item @dlioc{DLIOCSPROMISC} -- @tab Toggle promiscuous state.
@item @dlioc{DLIOCGPROMISC} -- @tab Get promiscuous state.
@item @dlioc{DLIOCADDMULTI} -- @tab Add multicast address.
@item @dlioc{DLIOCDELMULTI} -- @tab Delete multicast address.
@item @dlioc{DLIOCGETMULTI} -- @tab Get multicast address list.
@item @dlioc{DLIOCDISABLE} -- @tab Disable controller.
@item @dlioc{DLIOCENABLE} -- @tab Enable controller.
@item @dlioc{DLIOCRESET} -- @tab Reset controller.
@item @dlioc{DLIOCCSMACDMODE} -- @tab Toggle CSMA-CD mode.
@end multitable

Strangely enough, the @dlioc{DLIOCLLC2MODE} and @dlioc{DLIOCRAWMODE}
input-output controls are not documented.

See @manref{dlpi_ioctl(4)} for more detail.

@node PowerMAX Drivers and Modules
@section PowerMAX Drivers and Modules
@cindex PowerMAX drivers and modules

@node PowerMAX Libraries
@section PowerMAX Libraries
@cindex PowerMAX libraries

@node PowerMAX Utilities
@section PowerMAX Utilities
@cindex PowerMAX utilities

@node PowerMAX Management
@section PowerMAX Management
@cindex PowerMAX management

@node PowerMAX Summary
@section PowerMAX Summary
@cindex PowerMAX summary

@c ----------------------------------------------------------------------------

@page
@node Porting from Solaris
@chapter Porting from Solaris
@cindex Porting from Solaris

@menu
* Solaris Driver Addressing::
* Solaris Driver Features::
* Solaris Primitives::
* Solaris Input-Output Controls::
* Solaris Drivers and Modules::
* Solaris Libraries::
* Solaris Utilities::
* Solaris Management::
* Solaris Summary::
@end menu

@node Solaris Driver Addressing
@section Solaris Driver Addressing
@cindex Solaris addressing

@menu
* Solaris Driver Naming::
* Solaris PPA Selection::
* Solaris SAP Addressing::
* Solaris Primitive Addresses::
* Solaris Quality of Service Parameters::
@end menu

@node Solaris Driver Naming
@subsection Solaris Driver Naming

@node Solaris PPA Selection
@subsection Solaris PPA Selection

@node Solaris SAP Addressing
@subsection Solaris SAP Addressing

@node Solaris Primitive Addresses
@subsection Solaris Primitive Addresses

@node Solaris Quality of Service Parameters
@subsection Solaris Quality of Service Parameters

@node Solaris Driver Features
@section Solaris Driver Features
@cindex Solaris features

@menu
* Solaris LAN Operation::
* Solaris WAN Operation::
* Solaris Driver Modes::
@end menu

@node Solaris LAN Operation
@subsection Solaris LAN Operation
@cindex Solaris lan operation
@cindex lan operation Solaris

@subsubsection Solaris Ethernet and SNAP Operation

@subsubsection Solaris LLC Type 1 Operation

@subsubsection Solaris LLC Type 2 Operation

@subsubsection Solaris LLC Type 3 Operation

@node Solaris WAN Operation
@subsection Solaris WAN Operation
@cindex Solaris wan operation
@cindex wan operation Solaris

@node Solaris Driver Modes
@subsection Solaris Driver Modes

@subsubsection Solaris Promiscuous Mode

@subsubsection Solaris Raw Mode
@anchor{Solaris Raw Mode}
@cindex raw mode Solaris
@cindex Solaris raw mode

@subsubsection Solaris LLC2 Mode
@anchor{Solaris LLC2 Mode}
@cindex llc2 mode Solaris
@cindex Solaris llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@subsubsection Solaris CSMA/CD Mode
@anchor{Solaris CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode Solaris
@cindex Solaris csma/cd mode

@subsubsection Solaris Fast Path

@subsubsection Solaris Combined Mode

@node Solaris Primitives
@section Solaris Primitives
@cindex Solaris primitives

@subsection Solaris Supported Primitives

The following primitives are supported by @cite{Solaris}:

The following connectionless mode primitives are supported by @cite{Solaris}:

The following connectionless-oriented mode primitives are supported by
@cite{Solaris}:

@subsection Solaris Unsupported Primitives

The following primitives are not supported by @cite{Solaris}:

@itemize
@item @prim{DL_SET_PHYS_ADDR_REQ}
@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{Solaris}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@end itemize

@subsection Solaris Primitive Porting Considerations

@table @prim
@item DL_PROMISCON_REQ

@cite{@value{PACKAGE_TITLE}} supports this primitive being issued multiple times
by the DLS users for the same promiscuous level without generating a fatal or
non-fatal error.  @cite{Solaris} documentation is silent on the matter.

Care should be taken when porting @cite{Solaris} drivers, modules and
applications to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely
upon the DLS provider returning an error should this primitive be issued
multiple times for the same promiscuous level.
@item DL_PROMISCOFF_REQ

@cite{@value{PACKAGE_TITLE}} supports this primitive being issued multiple times
by the DLS users for the same promiscuous level without generating a fatal or
non-fatal error.  @cite{Solaris} documentation is silent on the matter.

Care should be taken when porting @cite{Solaris} drivers, modules and
applications to @cite{@value{PACKAGE_TITLE}} that the DLS user does not rely
upon the DLS provider returning an error should this primitive be issued
multiple times for the same promiscuous level.

@end table

@subsection Solaris Extension Primitives

@cite{Solaris} provides the following extension primitives:

@itemize
@item @prim{DL_AGGR_REQ}

Requests that a DLS provider Stream be added to an aggregate.
@item @prim{DL_AGGR_IND}

Indicates that a DLS provider Stream has been added to an aggregate.
@item @prim{DL_UNAGGR_REQ}

Requests that a DLS provider Stream be removed from an aggregate.
@item @prim{DL_PASSIVE_REQ}

Requests that access be provided to an individual DLS provider Stream regardless
of it being a part of an aggregate.
@item @prim{DL_CAPABILITY_REQ}
@item @prim{DL_CAPABILITY_ACK}
@item @prim{DL_CONTROL_REQ}
@item @prim{DL_CONTROL_ACK}
@item @prim{DL_INTR_MODE_REQ}
@item @prim{DL_NOTIFY_REQ}
@item @prim{DL_NOTIFY_ACK}
@item @prim{DL_NOTIFY_IND}

@end itemize

@node Solaris Input-Output Controls
@section Solaris Input-Output Controls
@cindex Solaris input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node Solaris Drivers and Modules
@section Solaris Drivers and Modules
@cindex Solaris drivers and modules

@node Solaris Libraries
@section Solaris Libraries
@cindex Solaris libraries

@node Solaris Utilities
@section Solaris Utilities
@cindex Solaris utilities

@node Solaris Management
@section Solaris Management
@cindex Solaris management

@node Solaris Summary
@section Solaris Summary
@cindex Solaris summary

@c ----------------------------------------------------------------------------

@page
@node Porting from Solstice X.25
@chapter Porting from Solstice X.25
@cindex Porting from Solstice X.25

@menu
* Solstice X.25 Driver Addressing::
* Solstice X.25 Driver Features::
* Solstice X.25 Primitives::
* Solstice X.25 Input-Output Controls::
* Solstice X.25 Drivers and Modules::
* Solstice X.25 Libraries::
* Solstice X.25 Utilities::
* Solstice X.25 Management::
* Solstice X.25 Summary::
@end menu

@node Solstice X.25 Driver Addressing
@section Solstice X.25 Driver Addressing
@cindex Solstice X.25 addressing

@menu
* Solstice X.25 Driver Naming::
* Solstice X.25 PPA Selection::
* Solstice X.25 SAP Addressing::
* Solstice X.25 Primitive Addresses::
* Solstice X.25 Quality of Service Parameters::
@end menu

@node Solstice X.25 Driver Naming
@subsection Solstice X.25 Driver Naming

@node Solstice X.25 PPA Selection
@subsection Solstice X.25 PPA Selection

@node Solstice X.25 SAP Addressing
@subsection Solstice X.25 SAP Addressing

@node Solstice X.25 Primitive Addresses
@subsection Solstice X.25 Primitive Addresses

@node Solstice X.25 Quality of Service Parameters
@subsection Solstice X.25 Quality of Service Parameters

@node Solstice X.25 Driver Features
@section Solstice X.25 Driver Features
@cindex Solstice X.25 features

@menu
* Solstice X.25 LAN Operation::
* Solstice X.25 WAN Operation::
* Solstice X.25 Driver Modes::
@end menu

@node Solstice X.25 LAN Operation
@subsection Solstice X.25 LAN Operation
@cindex Solstice X.25 lan operation
@cindex lan operation Solstice X.25

@subsubsection Solstice X.25 Ethernet and SNAP Operation

@subsubsection Solstice X.25 LLC Type 1 Operation

@subsubsection Solstice X.25 LLC Type 2 Operation

@subsubsection Solstice X.25 LLC Type 3 Operation

@node Solstice X.25 WAN Operation
@subsection Solstice X.25 WAN Operation
@cindex Solstice X.25 wan operation
@cindex wan operation Solstice X.25

@node Solstice X.25 Driver Modes
@subsection Solstice X.25 Driver Modes

@subsubsection Solstice X.25 Promiscuous Mode

@subsubsection Solstice X.25 Raw Mode
@anchor{Solstice X.25 Raw Mode}
@cindex raw mode Solstice X.25
@cindex Solstice X.25 raw mode

@subsubsection Solstice X.25 LLC2 Mode
@anchor{Solstice X.25 LLC2 Mode}
@cindex llc2 mode Solstice X.25
@cindex Solstice X.25 llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@subsubsection Solstice X.25 CSMA/CD Mode
@anchor{Solstice X.25 CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode Solstice X.25
@cindex Solstice X.25 csma/cd mode

@subsubsection Solstice X.25 Fast Path

@subsubsection Solstice X.25 Combined Mode

@node Solstice X.25 Primitives
@section Solstice X.25 Primitives
@cindex Solstice X.25 primitives

@subsection Solstice X.25 Supported Primitives

The following primitives are supported by @cite{Solstice X.25}:

The following connection-oriented mode primitives are supported by
@cite{Solstice X.25}:

@subsection Solstice X.25 Unsupported Primitives

The following primitives are not supported by @cite{Solstice X.25}:

@itemize
@item @prim{DL_SUBS_BIND_REQ},
@prim{DL_SUBS_BIND_ACK},
@prim{DL_SUBS_UNBIND_REQ}

@item @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}

@item @prim{DL_SET_PHYS_ADDR_REQ}
@end itemize

The following connectionless mode primitives are not supported by @cite{Solstice
X.25}:

@itemize
@item @prim{DL_UNITDATA_REQ},
@prim{DL_UDQOS_REQ},
@prim{DL_UNITDATA_IND},
@prim{DL_UDERROR_IND}
@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{Solstice X.25}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@end itemize

@subsection Solstice X.25 Primitive Porting Considerations

@table @prim
@item DL_PROMISCON_REQ

@cite{Solstice X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive even for DLS providers that
do not support or are not bound in a connectionless mode.

Care should be taken when porting @cite{Solstice X.25} DLPI drivers, modules or
applications to @cite{@value{PACKAGE_TITLE}} that the DLS User does not reply
upon the DLS provider returning a non-fatal error in the event that this
primitive is issued.
@item DL_PROMISCOFF_REQ

@cite{Solstice X.25} does not support this primitive.
@cite{@value{PACKAGE_TITLE}} supports this primitive even for DLS providers that
do not support or are not bound in a connectionless mode.

Care should be taken when porting @cite{Solstice X.25} DLPI drivers, modules or
applications to @cite{@value{PACKAGE_TITLE}} that the DLS User does not reply
upon the DLS provider returning a non-fatal error in the event that this
primitive is issued.
@end table

@subsection Solstice X.25 Extension Primitives

There are no extension primitives for @cite{Solstice X.25}.

@node Solstice X.25 Input-Output Controls
@section Solstice X.25 Input-Output Controls
@cindex Solstice X.25 input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node Solstice X.25 Drivers and Modules
@section Solstice X.25 Drivers and Modules
@cindex Solstice X.25 drivers and modules

@node Solstice X.25 Libraries
@section Solstice X.25 Libraries
@cindex Solstice X.25 libraries

@node Solstice X.25 Utilities
@section Solstice X.25 Utilities
@cindex Solstice X.25 utilities

@node Solstice X.25 Management
@section Solstice X.25 Management
@cindex Solstice X.25 management

@node Solstice X.25 Summary
@section Solstice X.25 Summary
@cindex Solstice X.25 summary

@c ----------------------------------------------------------------------------

@page
@node Porting from SVR4.2
@chapter Porting from SVR4.2
@cindex Porting from SVR4.2

@menu
* SVR4.2 Driver Addressing::
* SVR4.2 Driver Features::
* SVR4.2 Primitives::
* SVR4.2 Input-Output Controls::
* SVR4.2 Drivers and Modules::
* SVR4.2 Libraries::
* SVR4.2 Utilities::
* SVR4.2 Management::
* SVR4.2 Summary::
@end menu

Here, @cite{SVR4.2} refers to ``@cite{UNIX System V Release 4.2 MP},'' and any
number of @cite{UNIX} variants based on @cite{SVR 4.2 MP}, such as
@cite{UnixWare 1.0}, @cite{UnixWare 2.0}, @cite{UnixWare 2.1}, @cite{SUPER-UX
Release 9.2}, @cite{UXP/V V10L10}, and others.

For @cite{UnixWare 7.1.x}, see @ref{Porting from UnixWare}.

Under @cite{UnixWare 1} and @cite{2}, DLPI was used to implement network
adapters.  On all version of @cite{UnixWare}, DLPI is used to implement network
protocol stacks.

@node SVR4.2 Driver Addressing
@section SVR4.2 Driver Addressing
@cindex SVR4.2 addressing

@menu
* SVR4.2 Driver Naming::
* SVR4.2 PPA Selection::
* SVR4.2 SAP Addressing::
* SVR4.2 Primitive Addresses::
* SVR4.2 Quality of Service Parameters::
@end menu

@node SVR4.2 Driver Naming
@subsection SVR4.2 Driver Naming

@node SVR4.2 PPA Selection
@subsection SVR4.2 PPA Selection

@node SVR4.2 SAP Addressing
@subsection SVR4.2 SAP Addressing

@node SVR4.2 Primitive Addresses
@subsection SVR4.2 Primitive Addresses

@node SVR4.2 Quality of Service Parameters
@subsection SVR4.2 Quality of Service Parameters

@node SVR4.2 Driver Features
@section SVR4.2 Driver Features
@cindex SVR4.2 features

@menu
* SVR4.2 LAN Operation::
* SVR4.2 WAN Operation::
* SVR4.2 Driver Modes::
@end menu

@node SVR4.2 LAN Operation
@subsection SVR4.2 LAN Operation
@cindex SVR4.2 lan operation
@cindex lan operation SVR4.2

@subsubsection SVR4.2 Ethernet and SNAP Operation

@subsubsection SVR4.2 LLC Type 1 Operation

@subsubsection SVR4.2 LLC Type 2 Operation

@subsubsection SVR4.2 LLC Type 3 Operation

@node SVR4.2 WAN Operation
@subsection SVR4.2 WAN Operation
@cindex SVR4.2 wan operation
@cindex wan operation SVR4.2

@node SVR4.2 Driver Modes
@subsection SVR4.2 Driver Modes

@subsubsection SVR4.2 Promiscuous Mode

[UnixWare 7] MDI support for promicuous mode differs from earlier driver
architectures, where multiple opens were enabled:

@dfn{DLPI} and @dfn{ODI} drivers (UnixWare 1 and 2) can issue the
@prim{DL_BIND_REQ} primitive to the @pval{PROMISCUOUS_SAP} sap.  The following
STREAMS input-output controls can then be sent:

@itemize
@item @dlioc{DLIOCGPROMISC} -- Determine state of promiscuous mode (on/off).
@item @dlioc{DLIOCSPROMISC} -- Toggle state of promiscuous mode (on/off).@footnote{@url{http://ou800doc.caldera.com/en/HDK_concepts/ddT_promiscuous.html}}
@end itemize

@subsubsection SVR4.2 Raw Mode
@anchor{SVR4.2 Raw Mode}
@cindex raw mode SVR4.2
@cindex SVR4.2 raw mode

@subsubsection SVR4.2 LLC2 Mode
@anchor{SVR4.2 LLC2 Mode}
@cindex llc2 mode SVR4.2
@cindex SVR4.2 llc2 mode

LLC2 mode is a mode provided primarily by systems that do not support the DLPI
connection-oriented mode.  It allows the DLS User to include control octets in
the data payload.  Otherwise, LLC data would normally be sent by a
@pval{DL_CLDLS} DLS provider as an Unnumbered Information (UI) frame.

@subsubsection SVR4.2 CSMA/CD Mode
@anchor{SVR4.2 CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode SVR4.2
@cindex SVR4.2 csma/cd mode

@subsubsection SVR4.2 Fast Path

@subsubsection SVR4.2 Combinded Connectionless and Connection-Oriented Modes

@node SVR4.2 Primitives
@section SVR4.2 Primitives
@cindex SVR4.2 Primitives

@node SVR4.2 Extension Primitives
@section SVR4.2 Extension Primitives
@cindex SVR4.2 Extension Primitives

@node SVR4.2 Input-Output Controls
@section SVR4.2 Input-Output Controls
@cindex SVR4.2 input-output controls

@table @asis
@item @dlioc{DLIOCSMIB} -- Get MIB statistics (DL_mib_t).
@item @dlioc{DLIOCGMIB} -- Get MIB statistics (DL_mib_t).
@item @dlioc{DLIOCSENADDR} -- Set physical (MAC) address.
@item @dlioc{DLIOCGENADDR} -- Return Ethernet (MAC) address.
@item @dlioc{DLIOCSLPCFLG} -- Set local copy packet flag (send local packets on wire).
@item @dlioc{DLIOCGLPCFLG} -- Get local copy packet flag (send local packets on wire).
@item @dlioc{DLIOCSPROMISC} -- Set promiscuous mode flag.
@item @dlioc{DLIOCGPROMISC} -- Get promiscuous mode flag.

The @prim{DL_PROMISCON_REQ} primitive is defined for DLPI 2.0.0 (UnixWare 7 and
SCO OpenServer Release 5) and the DLPI 1.x equivalent is the
@dlioc{DLIOCSPROMISC} input-output control.  Note, however, that these
primitives are NAK'ed by the DLPI module because promiscuous mode is not
implemented through DLPI (On UnixWare 7).  The only way to implement promiscuous
mode for UnixWare 7 and SCO OpenServer Release 5 is with MDI.

@item @dlioc{DLIOCADDMULTI} -- Add multicast address.
@item @dlioc{DLIOCDELMULTI} -- Delete multicast address.
@item @dlioc{DLIOCGETMULTI} -- Return list of multicast addresses.
@item @dlioc{DLIOCDISABLE} -- Disable controller -- nearest equivalent is @prim{DL_UNBIND_REQ}.
@item @dlioc{DLIOCENABLE} -- Enable controller -- nearest equivalent is @prim{DL_BIND_REQ}.
@item @dlioc{DLIOCRESET} -- Reset controller -- nearest equivalent is to close and open the driver.
@item @dlioc{DLIOCCSMACDMODE} -- Switch SAP type to RAW.
@item @dlioc{DLIOCRAWMODE} -- Toggle RAW mode (Token-Ring adapters).
@item @dlioc{DLIOCLLC2MODE} -- Toggle LLC2 mode (Token-Ring adapters).

@c
@c Note that Solaris identifies these as DLPI_1 input-output controls.  Now
@c that's going back.
@c
@c @item @dlioc{DLGADDR} -- Return Ethernet (MAC) address.
@c @item @dlioc{DLGBROAD} -- Get broadcast address.
@c @item @dlioc{DLSLLC2} -- Toggle LLC2 mode (Token-Ring adapters).
@c @item @dlioc{DLSRAW} -- Toggle RAW mode (Token-Ring adapters).

@c @item @dlioc{MACIOC_GETADDR} -- Return Ethernet (MAC) address.

@c @item @dlioc{SIOCGIFDEBUG} -- Get debug level.
@c @item @dlioc{SIOCGIFFLAGS} -- Socket I/O control to get interface flags (acknowledged and ignored).
@end table

See @manref{dlpi_ioctl(4)} for more detail.

@node SVR4.2 Drivers and Modules
@section SVR4.2 Drivers and Modules
@cindex SVR4.2 drivers and modules

@node SVR4.2 Libraries
@section SVR4.2 Libraries
@cindex SVR4.2 libraries

@node SVR4.2 Utilities
@section SVR4.2 Utilities
@cindex SVR4.2 utilities

@node SVR4.2 Management
@section SVR4.2 Management
@cindex SVR4.2 management

@node SVR4.2 Summary
@section SVR4.2 Summary
@cindex SVR4.2 summary

@c ----------------------------------------------------------------------------

@page
@node Porting from UnixWare
@chapter Porting from UnixWare
@cindex Porting from UnixWare

@menu
* UnixWare Driver Addressing::
* UnixWare Driver Features::
* UnixWare Primitives::
* UnixWare Input-Output Controls::
* UnixWare Drivers and Modules::
* UnixWare Libraries::
* UnixWare Utilities::
* UnixWare Management::
* UnixWare Summary::
@end menu

This chapter highlights porting DLPI drivers, modules and applications from
@cite{UnixWare} to @cite{OpenSS7} and @cite{Linux}.

For the purpose of the current disussion, @cite{UnixWare} refers to the
``@i{merged product},'' that is, the @cite{UnixWare 7.x.x} releases.  For
@cite{UnixWare 1.0}, @cite{1.1}, @cite{2.0}, @cite{2.1}, @cite{2.1.x} see the
section on porting from @cite{SVR4.2}, @ref{Porting from SVR4.2}.

@node UnixWare Driver Addressing
@section UnixWare Driver Addressing
@cindex UnixWare addressing

@menu
* UnixWare Driver Naming::
* UnixWare PPA Selection::
* UnixWare SAP Addressing::
* UnixWare Primitive Addresses::
* UnixWare Quality of Service Parameters::
@end menu

@node UnixWare Driver Naming
@subsection UnixWare Driver Naming

@node UnixWare PPA Selection
@subsection UnixWare PPA Selection

@node UnixWare SAP Addressing
@subsection UnixWare SAP Addressing

@node UnixWare Primitive Addresses
@subsection UnixWare Primitive Addresses

@node UnixWare Quality of Service Parameters
@subsection UnixWare Quality of Service Parameters

@node UnixWare Driver Features
@section UnixWare Driver Features
@cindex UnixWare features

@menu
* UnixWare LAN Operation::
* UnixWare WAN Operation::
* UnixWare Driver Modes::
@end menu

@node UnixWare LAN Operation
@subsection UnixWare LAN Operation
@cindex UnixWare lan operation
@cindex lan operation UnixWare

@subsubsection UnixWare Ethernet and SNAP Operation

@subsubsection UnixWare LLC Type 1 Operation

The @cite{UnixWare} DLPI driver supports LLC Type 1 and Ethernet operation in
the usual manner.

@subsubsection UnixWare LLC Type 2 Operation

@cite{UnixWare} is one of the DLPI implementations that does not directly
support LLC Type 2 operation.  Also, no @dfn{LLC2 Mode} is apparently provided.

@subsubsection UnixWare LLC Type 3 Operation

@cite{UnixWare}, as the other @cite{UNIX} derivatives, does not directly support
LLC Type 3 operation.

@node UnixWare WAN Operation
@subsection UnixWare WAN Operation
@cindex UnixWare wan operation
@cindex wan operation UnixWare

@node UnixWare Driver Modes
@subsection UnixWare Driver Modes

@subsubsection UnixWare Promiscuous Mode

Network adapter drivers normally process only those network frames containing
the MAC address of the device they  control or broadcast addresses.  When
promiscious mode is enabled, network frames bound for any MAC address are
received and passed to the MDI consumer, whether a kernel driver or user
program.  This can be useful for network troubleshooting; network monitors and
other tools rely upon promiscuous mode.

The UnixWare 7 and SCO OpenServer MDI specification provides optional support
for promiscuous mode; it is no required.  To implement promiscuous mode in an
MDI driver, you must code a `switch' statement to process the MDI
@dlioc{MACIOC_PROMISC} input-output control.  For UnixWare 7 MDI drivers, the
@command{bcfg(4dsp)} file includes the mandatory @constant{PROMISCUOUS}
parameter that must be set to `true' if the driver supports promiscuous mode, or
`false' if it does not.

These MDI elements mandate promiscuous mode behaviour:

@table @command
@item open(D2mdi)

must disable promiscuous mode if it was set by a previous MAC user that had
closed the driver before @manpage{open(2s)} was called.  Also, to ensure that
@manpage{open(2s)} is not called more than one time before @manpage{close(2s)}
is called, the drivers should fail subsequent calls to @manpage{open(2s)}.
@item close(D2mdi)

must disable promiscious mode when the MDI device is closed.
@item M_IOCTL(D7str)

includes a `switch' statement to process the @dlioc{MACIOC_PROMISC} input-output
control.

The @prim{DL_PROMISCON_REQ} primitive is defined for DLPI 2.0.0 (UnixWare 7 and
SCO OpenServer Release 5) and the DLPI 1.x equivalent is the
@dlioc{DLIOCSPROMISC} input-output control  Note, however, that these primitives
are NAK'ed by the DLPI module because promiscuous mode is not implemented
through DLPI.  The only way to implement promiscuous mode for UnixWare 7 and
SCO OpenServer Release 5 is with MDI.
@end table

To access a MDI device in promiscuous mode:

@enumerate
@item Open the @file{/dev/mdi} device.
@item Send a @prim{MAC_BIND_REQ} primitive to the device with the @manref{putmsg(2s)} or @manref{putpmsg(2s)} system call.
@item Send a @dlioc{MACIOC_PROMISC} input-output control to enable promiscous mode.
@item Read all frames with @manref{getmsg(2s)} or @manref{getpmsg(2s)} until ``done''.
@item Close the file descriptor for the @file{/dev/mdi} device.
@end enumerate

Promiscuous mode must be disabled when MDI drivers are opened (they are usually
opened eby the @dfn{DLPI} module), and the @dfn{DLPI} module will not pass the
@dlioc{MACIOC_PROMISC} input-output control to the driver, because the
underlying @prim{DL_PROMISCON_REQ} primitive is NAK'ed on @file{/dev/netX}
devices.  Because MDI drivers support only one open per device, it is not
possible to open the network adapter for both a protocol stack and a network
monitoring application at the same time.  It is therefore necessary to device an
entire network adapter to running network monitors in promiscuous mode, or to
use the network adapter card in single-user mode before @command{dlpid} has
started.

@subsubsection UnixWare Raw Mode
@anchor{UnixWare Raw Mode}
@cindex raw mode UnixWare
@cindex UnixWare raw mode

@cite{UnixWare} does not document an @dfn{Raw mode} feature, regardless of it
being supported on older versions using the @dlioc{DLIOCRAWMODE} input-output
control.

@subsubsection UnixWare LLC2 Mode
@anchor{UnixWare LLC2 Mode}
@cindex llc2 mode UnixWare
@cindex UnixWare llc2 mode

@cite{UnixWare} does not document an @dfn{LLC2 mode} feature, regardless of it
being supported on older versions using the @dlioc{DLIOCLLC2MODE} input-output
control.

@subsubsection UnixWare CSMA/CD Mode
@anchor{UnixWare CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode UnixWare
@cindex UnixWare csma/cd mode

@cite{UnixWare} does not document a @dfn{CSMA/CD mode} feature, regardless of it
being supported on older versions using the @dlioc{DLIOCCSMACDMODE} input-output
control.

@subsubsection UnixWare Fast Path

@cite{UnixWare} does not document a Fast Path feature.

@subsubsection UnixWare Combinded Connectionless and Connection-Oriented Modes

@node UnixWare Primitives
@section UnixWare Primitives
@cindex UnixWare Primitives

@subsection UnixWare Supported Primitives

The following local management primitives are supported by @cite{UnixWare}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_INFO_REQ} -- @tab request information from DLS provider.
@item @prim{DL_INFO_ACK} -- @tab respond with information to DLS user.
@item @prim{DL_OK_ACK} -- @tab primitive received successfully.
@item @prim{DL_ERROR_ACK} -- @tab primitive received in error.
@item @prim{DL_BIND_REQ} -- @tab request DLS provider to bind Stream to SAP.
@item @prim{DL_BIND_ACK} -- @tab bind of Stream to DLSAP was successful.
@item @prim{DL_SUBS_BIND_REQ} -- @tab bind to subsequent SAP or DLSAP.
@item @prim{DL_SUBS_BIND_ACK} -- @tab successfuls subsequent bind of Stream.
@item @prim{DL_SUBS_UNBIND_REQ} -- @tab request DLS provider to unbind subsequent DLSAP.
@item @prim{DL_UNBIND_REQ} -- @tab request DLS provider unbind from all DLSAPs.
@item @prim{DL_ENABMULTI_REQ} -- @tab enable multicast address.
@item @prim{DL_DISABMULTI_REQ} -- @tab disable multicast address.
@item @prim{DL_PHYS_ADDR_REQ} -- @tab request physical address.
@item @prim{DL_PHYS_ADDR_ACK} -- @tab respond with physical address.
@item @prim{DL_SET_PHYS_ADDR_REQ} -- @tab request DLS provider set physical address.
@item @prim{DL_GET_STATISTICS_REQ} -- @tab request statistics.
@item @prim{DL_GET_STATISTICS_ACK} -- @tab respond with statistics.
@end multitable

The following XID and TEST primitives are supported by @cite{UnixWare}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_XID_REQ} -- @tab request XID command DLPDU.
@item @prim{DL_XID_IND} -- @tab indicates XID command DLPDU.
@item @prim{DL_XID_RES} -- @tab request to XID response DLPDU.
@item @prim{DL_XID_CON} -- @tab indicated XID response DLPDU.
@item @prim{DL_TEST_REQ} -- @tab request TEST command DLPDU.
@item @prim{DL_TEST_IND} -- @tab indicates TEST command DLPDU.
@item @prim{DL_TEST_RES} -- @tab request to TEST response DLPDU.
@item @prim{DL_TEST_CON} -- @tab indicated TEST response DLPDU.
@end multitable

The following connectionless mode primitives are supported by @cite{UnixWare}:

@multitable @columnfractions 0.35 0.65
@item @prim{DL_UNITDATA_REQ} -- @tab convey unit data to DSL provider.
@item @prim{DL_UNITDATA_IND} -- @tab convey unit data to DLS user.
@item @prim{DL_UDERROR_IND} -- @tab convey unit data error to DLS user.
@end multitable

@subsection UnixWare Unsupported Primitives

The following local management primitives are not supoprted by @cite{UnixWare}:

@itemize
@item @prim{DL_ATTACH_REQ},
@prim{DL_DETACH_REQ}

These two primitives are not necessary as @cite{UnixWare} only provides a Style
1 driver.

@item @prim{DL_PROMISCON_REQ},
@prim{DL_PROMISCOFF_REQ}

These to primitives are not supported directly and will result in an error of
@perr{DL_NOTSUPPORTED}.  The input-output control @dlioc{DLIOCSPROMISC} is also
not supported.  Also, the DLPI driver will not pass a @dlioc{MACIOC_PROMISC} to
the MDI level.  It is necessary, according to @cite{UnixWare} documentation that
if promiscuous mode is required at the physical level, @pval{DL_PROMISC_PHYS},
that a privielged user must open an otherwise unused MDI device Stream and use
the @dlioc{MACIOC_PROMISC} input-output control on it directly.

@end itemize

The following connectionless mode primitives are not supported by
@cite{UnixWare}:

@itemize
@item @prim{DL_UDQOS_REQ}

@cite{UnixWare} does not support quality of service parameters and so this
prmitive is unnecessary.

@end itemize

The following connection-oriented mode primitives are not supported by
@cite{UnixWare}:

@itemize
@item @prim{DL_TOKEN_REQ},
@prim{DL_TOKEN_ACK},
@prim{DL_CONNECT_REQ},
@prim{DL_CONNECT_IND},
@prim{DL_CONNECT_RES},
@prim{DL_CONNECT_CON},
@prim{DL_DATA_REQ},
@prim{DL_DATA_IND},
@prim{DL_RESET_REQ},
@prim{DL_RESET_IND},
@prim{DL_RESET_RES},
@prim{DL_RESET_CON},
@prim{DL_DISCONNECT_REQ},
@prim{DL_DISCONNECT_IND}

@cite{UnixWare} does not support connection-oriented data link service on the
DLPI driver and so all connection-oriented data link service mode primitives are
not supported.  It is not required to support LLC Type 2 operation on a LAN
station.

@end itemize

The following acknowledged connectionless mode primitives are not supported by
@cite{UnixWare}:

@itemize
@item @prim{DL_DATA_ACK_REQ},
@prim{DL_DATA_ACK_IND},
@prim{DL_DATA_ACK_STATUS_IND},
@prim{DL_REPLY_REQ},
@prim{DL_REPLY_IND},
@prim{DL_REPLY_STATUS_IND},
@prim{DL_REPLY_UPDATE_REQ},
@prim{DL_REPLY_UPDATE_STATUS_IND}

@cite{UnixWare} does not support acknowledged connectionless data link service
on the DLPI driver and so these primitives are not supported.  It is not
required to support acknowledged connectionless data link service LLC Type 3 on
a LAN station.

@end itemize

@node UnixWare Extension Primitives
@section UnixWare Extension Primitives
@cindex UnixWare Extension Primitives

@cite{UnixWare} defines a number of extension primitives.  These extension
primitives are documented in the @cite{UnixWare} Intro(D7dlpi) manual page.

@cite{@value{PACKAGE_TITLE}} recognizes all of these primitives and supports
those primitives that are applicable to @cite{Linux}.  There is no public record
of the numeric values that are assigned to these primitives, so only source
compatibility is attempted.@footnote{DLPI drivers, modules and applications must
have their DLS Users recompiled including the @cite{Linux Fast-STREAMS}
definitions.}  See the individual manual pages for these primitives in the
@cite{@value{PACKAGE_TITLE}} package for more information on compability.

Following are the @cite{UnixWare} extension primitives:

@itemize

@item @prim{DL_CLEAR_SR_REQ} -- clear the source routing table

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi).  This primitive is only applicable to Token-Ring DLS
Providers.  @item @prim{DL_CLR_STATISTICS_REQ} -- clear statistics

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described in Intro(D7dlpi).
@item @prim{DL_DISABALLMULTI_REQ} -- disable all multicast addresses

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_DLPI_BILOOPMODE} -- special primitive for frame testing

@cite{@value{PACKAGE_TITLE}} recognizes but does not support this primitive as
its description in Intro(D7dlpi) is lacking.
@item @prim{DL_ENABALLMULTI_REQ} -- enable all multicast addresses

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_ISDN_MSG} -- send ISDN data plane message

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for LAPD DLS providers.  This primitive is not applicable to
LAPB, MAC, LLC1 or LLC2 DLS providers.
@item @prim{DL_MCTABLE_REQ} --  request a list of multicast MAC addresses

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_MCTABLE_ACK} -- respond with a list of multicast MAC addresses

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_SAP_STATISTICS_REQ} -- request SAP statistics

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_SAP_STATISTICS_ACK} -- respone with SAP statistics

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi) for MAC and LLC DLS providers.
@item @prim{DL_SET_SRMODE_REQ} -- set source routing mode

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi).  This primitive is only applicable to Token-Ring DLS
Providers.
@item @prim{DL_SET_SRPARMS_REQ} -- set source routing parameters

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi).  This primitive is only applicable to Token-Ring DLS
Providers.
@item @prim{DL_SRTABLE_REQ} -- request the source routing table

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi).  This primitive is only applicable to Token-Ring DLS
Providers.
@item @prim{DL_SRTABLE_ACK} -- response with the source routing table

@cite{@value{PACKAGE_TITLE}} recognizes and supports this primitive as described
in Intro(D7dlpi).  This primitive is only applicable to Token-Ring DLS
Providers.
@end itemize

@node UnixWare Input-Output Controls
@section UnixWare Input-Output Controls
@cindex UnixWare input-output controls

@ignore
@multitable @columnfractions 0.35 0.65
@item @dlioc{DLIOCSMIB} -- @tab Set MIB statistics (DL_mib_t).
@item @dlioc{DLIOCGMIB} -- @tab Get MIB statistics (DL_mib_t).
@item @dlioc{DLIOCSENADDR} -- @tab Set physical (MAC) address.
@item @dlioc{DLIOCGENADDR} -- @tab Return Ethernet (MAC) address.
@item @dlioc{DLIOCSLPCFLG} -- @tab Set local copy packet flag (send local packets on wire).
@item @dlioc{DLIOCGLPCFLG} -- @tab Get local copy packet flag (send local packets on wire).
@item @dlioc{DLIOCSPROMISC} -- @tab Set promiscuous mode flag.
@item @dlioc{DLIOCGPROMISC} -- @tab Get promiscuous mode flag.
@item @dlioc{DLIOCADDMULTI} -- @tab Add multicast address.
@item @dlioc{DLIOCDELMULTI} -- @tab Delete multicast address.
@item @dlioc{DLIOCGETMULTI} -- @tab Return list of multicast addresses.
@item @dlioc{DLIOCDISABLE} -- @tab Disable controller -- nearest equivalent is @prim{DL_UNBIND_REQ}.
@item @dlioc{DLIOCENABLE} -- @tab Enable controller -- nearest equivalent is @prim{DL_BIND_REQ}.
@item @dlioc{DLIOCRESET} -- @tab Reset controller -- nearest equivalent is to close and open the driver.
@item @dlioc{DLIOCCSMACDMODE} -- @tab Switch SAP type to RAW.
@item @dlioc{DLIOCLLC2MODE} -- @tab Toggle LLC2 mode (Token-Ring adapters).
@item @dlioc{DLIOCRAWMODE} -- @tab Toggle RAW mode (Token-Ring adapters).

@item @dlioc{DLGADDR} -- @tab Return Ethernet (MAC) address.
@item @dlioc{DLGBROAD} -- @tab Get broadcast address.
@item @dlioc{DLSLLC2} -- @tab Toggle LLC2 mode (Token-Ring adapters).
@item @dlioc{DLSRAW} -- @tab Toggle RAW mode (Token-Ring adapters).

@item @dlioc{MACIOC_GETADDR} -- @tab Return Ethernet (MAC) address.
@item @dlioc{SIOCGIFDEBUG} -- @tab Get debug level.
@item @dlioc{SIOCGIFFLAGS} -- @tab Socket I/O control to get interface flags (acknowledged and ignored).
@end multitable
@end ignore

The DLPI driver intercepts and response to the following MACIOC input-output
contorl commands:

@multitable @columnfractions 0.35 0.65
@item @dlioc{MACIOC_CLRMCA} -- @tab
@item @dlioc{MACIOC_DIAG} -- @tab
@item @dlioc{MACIOC_GETADDR} -- @tab @i{Return MAC address.}
@item @dlioc{MACIOC_GETIFSTAT} -- @tab
@item @dlioc{MACIOC_GETRADDR} -- @tab @i{Return factory MAC address.}
@item @dlioc{MACIOC_GETSTAT} -- @tab @i{Return statistics.}
@item @dlioc{MACIOC_LOCALSTAT} -- @tab
@item @dlioc{MACIOC_PROMISC} -- @tab @i{Enable promiscuous mode.}
@item @dlioc{MACIOC_SETADDR} -- @tab @i{Set MAC address.}
@item @dlioc{MACIOC_UNITSEL} -- @tab
@end multitable

The DLPI driver passes all other MACIOC input-output control commands to the MDI
driver beneath it.  Other MACIOC input-output control commands are as follows:

@multitable @columnfractions 0.35 0.65
@item @dlioc{MACIOC_CLRSTAT} -- @tab @i{Clear statistics structure.}
@item @dlioc{MACIOC_DELALLMCA} -- @tab @i{Stop receiving multicast frames.}
@item @dlioc{MACIOC_DELMCA} -- @tab @i{Stop receiving MAC frames.}
@item @dlioc{MACIOC_GETMCA} -- @tab @i{Return active multicast addresses.}
@item @dlioc{MACIOC_GETMCSIZ} -- @tab @i{Return multicast address table size.}
@item @dlioc{MACIOC_SETALLMCA} -- @tab @i{Deliver mulicast frames.}
@item @dlioc{MACIOC_SETMCA} -- @tab @i{Receive MAC frames.}
@item @dlioc{MACIOC_SETSTAT} -- @tab @i{Modify MIB attributes.}
@end multitable

See @manref{dlpi_ioctl(4)} for more detail.

@node UnixWare Drivers and Modules
@section UnixWare Drivers and Modules
@cindex UnixWare drivers and modules

@node UnixWare Libraries
@section UnixWare Libraries
@cindex UnixWare libraries

@node UnixWare Utilities
@section UnixWare Utilities
@cindex UnixWare utilities

@node UnixWare Management
@section UnixWare Management
@cindex UnixWare management

@node UnixWare Summary
@section UnixWare Summary
@cindex UnixWare summary

@c ----------------------------------------------------------------------------

@page
@node Developing on OpenSS7
@chapter Developing on OpenSS7
@cindex development

@menu
* OpenSS7 Driver Addressing::
* OpenSS7 Driver Features::
* OpenSS7 Primitives::
* OpenSS7 Input-Output Controls::
* OpenSS7 Drivers and Modules::
* OpenSS7 Libraries::
* OpenSS7 Utilities::
* OpenSS7 Management::
* OpenSS7 Summary::
@end menu

@node OpenSS7 Primitives
@section OpenSS7 Primitives
@cindex primitives

@node OpenSS7 Driver Addressing
@section OpenSS7 Driver Addressing
@cindex OpenSS7 addressing

@menu
* OpenSS7 Driver Naming::
* OpenSS7 PPA Selection::
* OpenSS7 SAP Addressing::
* OpenSS7 Primitive Addresses::
* OpenSS7 Quality of Service Parameters::
@end menu

@node OpenSS7 Driver Naming
@subsection OpenSS7 Driver Naming

@node OpenSS7 PPA Selection
@subsection OpenSS7 PPA Selection

@node OpenSS7 SAP Addressing
@subsection OpenSS7 SAP Addressing

@node OpenSS7 Primitive Addresses
@subsection OpenSS7 Primitive Addresses

@node OpenSS7 Quality of Service Parameters
@subsection OpenSS7 Quality of Service Parameters

@node OpenSS7 Driver Features
@section OpenSS7 Driver Features
@cindex features

@menu
* OpenSS7 LAN Operation::
* OpenSS7 WAN Operation::
* OpenSS7 Driver Modes::
@end menu

@node OpenSS7 LAN Operation
@subsection OpenSS7 LAN Operation
@cindex OpenSS7 lan operation
@cindex lan operation OpenSS7

@subsubsection OpenSS7 Ethernet and SNAP Operation

@subsubsection OpenSS7 LLC Type 1 Operation

@subsubsection OpenSS7 LLC Type 2 Operation

@subsubsection OpenSS7 LLC Type 3 Operation

@node OpenSS7 WAN Operation
@subsection OpenSS7 WAN Operation
@cindex OpenSS7 wan operation
@cindex wan operation OpenSS7

@node OpenSS7 Driver Modes
@subsection OpenSS7 Driver Modes

@subsubsection OpenSS7 Promiscuous Mode

@subsubsection OpenSS7 Raw Mode
@anchor{OpenSS7 Raw Mode}
@cindex raw mode OpenSS7
@cindex OpenSS7 raw mode

@cite{@value{PACKAGE_TITLE}} supports all of the other forms of @dfn{Raw Mode}
identified in this document, and particularly the @cite{AIX} input-output
control, @cite{Solaris} input-output control, @cite{HP-UX} data link service,
@cite{SVR4.2} input-output control,  and @cite{UnixWare} input-output control
approaches.

When developing new drivers that must present a @dfn{raw mode} to user-space
DLPI applications, the @cite{SVR4.2} approach is recommended for OpenSS7.  When
developing new STREAMS drivers or modules that act as DLS Users, the DLS User
can rely upon the fact that the first @msg{M_DATA} message block.

@subsubsection OpenSS7 LLC2 Mode
@anchor{OpenSS7 LLC2 Mode}
@cindex llc2 mode OpenSS7
@cindex OpenSS7 llc2 mode

@subsubsection OpenSS7 CSMA/CD Mode
@anchor{OpenSS7 CSMA/CD Mode}
@cindex csma/cd mode
@cindex csma/cd mode OpenSS7
@cindex OpenSS7 csma/cd mode

@subsubsection OpenSS7 Fast Path

@subsubsection OpenSS7 Combined Mode

@node OpenSS7 Input-Output Controls
@section OpenSS7 Input-Output Controls
@cindex input-output controls

See @manref{dlpi_ioctl(4)} for more detail.

@node OpenSS7 Drivers and Modules
@section OpenSS7 Drivers and Modules
@cindex drivers and modules

@node OpenSS7 Libraries
@section OpenSS7 Libraries
@cindex libraries

@node OpenSS7 Utilities
@section OpenSS7 Utilities
@cindex utilities

@node OpenSS7 Management
@section OpenSS7 Management
@cindex management

@node OpenSS7 Summary
@section OpenSS7 Summary
@cindex summary

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Licenses
@unnumbered Licenses
@cindex licenses

@menu
* UNIX International DLPI License::	The UII DLPI license
* GNU Affero General Public License::	The AGPL license
* GNU General Public License::		The GPL license
* GNU Lesser General Public License::	The LGPL license
* GNU Free Documentation License::	The FDL license
@end menu

@page
@include texi/uidlpi.texi
@page
@include texi/agpl3.texi
@page
@include texi/gpl3.texi
@page
@include texi/lgpl3.texi
@page
@include texi/fdl13.texi

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Indices
@unnumbered Indices
@cindex indices

@c ----------------------------------------------------------------------------

@menu
* Index::			Index of Concepts
@c * Type Index::		Index of Data Types
@c * Function Index::		Index of Functions and Macros
@c * Variable Index::		Index of Variables and Constants
@c * File Index::		Index of Files and Programs
@c * Primitive Index::		Index of Primitives
@c * Primitive Value Index::	Index of Primitive Values
@c * Protocol State Index::	Index of Protocol States
@c * Protocol Error Index::	Index of Protocol Errors
@c * Input-Output Control Index:: Index of Input-Output Controls
@c * Manual Page Index::		Index of Manual Pages Referenced
@end menu

@c ----------------------------------------------------------------------------

@node Index
@unnumberedsec Index
@printindex cp

@c @page
@c @node Type Index
@c @unnumberedsec Index of Data Types
@c @printindex tp
@c 
@c @page
@c @node Function Index
@c @unnumberedsec Index of Functions and Macros
@c @printindex fn
@c 
@c @page
@c @node Variable Index
@c @unnumberedsec Index of Variables and Constants
@c @printindex vr
@c 
@c @page
@c @node File Index
@c @unnumberedsec Index of Files and Programs
@c @printindex pg
@c 
@c @c @page
@c @c @node Option Index
@c @c @unnumberedsec Index of Configuration Options
@c @c @printindex op
@c 
@c @c @page
@c @c @node Makefile Target Index
@c @c @unnumberedsec Index of Makefile Targets
@c @c @printindex mk
@c 
@c @c @page
@c @c @node Author Index
@c @c @unnumberedsec Index of Authors
@c @c @printindex au
@c 
@c @page
@c @node Primitive Index
@c @section Primitive Index 
@c @printindex pr
@c 
@c @page
@c @node Primitive Value Index
@c @section Primitive Value Index 
@c @printindex pv
@c 
@c @page
@c @node Protocol State Index
@c @section Protocol State Index 
@c @printindex st
@c 
@c @page
@c @node Protocol Error Index
@c @section Protocol Error Index
@c @printindex pe
@c 
@c @page
@c @node Input-Output Control Index
@c @section Input-Output Control Index
@c @printindex ci
@c 
@c @page
@c @node Manual Page Index
@c @unnumberedsec Index of Manual Pages Referenced
@c @printindex mp

@c ----------------------------------------------------------------------------

@page
@shortcontents
@page
@contents
@bye

@c ============================================================================
