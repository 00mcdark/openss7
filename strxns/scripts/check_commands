#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile: check_commands,v $ $Name:  $($Revision: 0.9.2.8 $) $Date: 2005/01/20 00:53:39 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2005/01/20 00:53:39 $ by $Author: brian $
#
# =============================================================================

#
#   Tests various options of each installed program and script.  This goes
#   further than the GNU stnadard options (--help and --version) and adds a
#   few that should be present in OpenSS7 project programs and scripts.  We
#   also display the resulting information.
#
retval=0

me=`basename $0`

exec 5>$me.log

export -p >&5

function echo_v()
{
#	if test :"${MAINTAINER_MODE:-no}" = :yes ; then
		echo "$me:  : $1"
#	fi
}
function echo_t()
{
#	if test :"${MAINTAINER_MODE:-no}" = :verbose ; then
		echo "$me: T: $1"
#	fi
}
function echo_s()
{
	if test :"${MAINTAINER_MODE:-no}" = :verbose ; then
		echo "$me: S: $1"
	fi
}
function echo_d()
{
	echo "$me: D: $1" >&5
}
function echo_e()
{
	echo "$me: E: --- $1" >&2
	echo "$me: E: $1" >&5
}
function echo_w()
{
	if test :"${MAINTAINER_MODE:-no}" != :no ; then
		echo "$me: W: --- $1" >&2
	fi
	echo "$me: W: $1" >&5
}

programs="$bin_PROGRAMS $sbin_PROGRAMS $libexec_PROGRAMS"
scripts="$dist_bin_SCRIPTS $dist_sbin_SCRIPTS $dist_libexec_SCRIPTS"


#
# PROGRAMS must be built, so they always appear in the build directory, which is the current
# directory.  If we are cross-compiling we cannot test compiled programs on the build host.
#
if test -n "$programs" ; then
echo_v "testing programs"
if test :"${cross_compiling:-no}" = :no
then
	for program in $programs
	do
		echo_t "testing program `basename $program` options"
		if test ! -e ./$program ; then
			echo_e "cannot find program $program"
			retval=1
			continue;
		fi
		if test -x ./$program ; then :
			for opt in --help --version --copying
			do
				echo_t "testing $program $opt"
				echo_d "./$program $opt > ${me}_$$.out 2> ${me}_$$.err"
				./$program $opt > ${me}_$$.out 2> ${me}_$$.err \
				&& test -n "`cat ${me}_$$.out`" \
				&& test -z "`cat ${me}_$$.err`" \
				|| {
					echo_e "$program does not support $opt"
					echo_d "stderr was:"
					while read line ; do echo_d "$line" ; done < ${me}_$$.err
					echo_d "stdout was:"
					while read line ; do echo_d "$line" ; done < ${me}_$$.out
					retval=1
				}
				echo_d "rm -f ${me}_$$.out ${me}_$$.err"
				rm -f ${me}_$$.out ${me}_$$.err
			done
		else
			echo_w "$program is not executable: skipping"
		fi
	done
else
	echo_w "cross compiling: cannot test programs"

fi
fi
#
# SCRIPTS could be in the source directory or they could be derived and in the
# build directory, so we need to check for their location.
#
if test -n "$scripts" ; then
echo_v "testing scripts"
for script in $scripts
do
	echo_t "testing script `basename $script` options"
	s="./$script"
	if test ! -e $s ; then
		s="$srcdir/$script"
		if test ! -e $s ; then
			echo_e "cannot find script `basename $script`"
			retval=1
			continue;
		fi
	fi
	for opt in --help --version --copying
	do
		echo_t "testing $script $opt"
		echo_d "${SHELL} $s $opt > ${me}_$$.out 2> ${me}_$$.err"
		${SHELL} $s $opt > ${me}_$$.out 2> ${me}_$$.err \
		&& test -n "`cat ${me}_$$.out`" \
		&& test -z "`cat ${me}_$$.err`" \
		|| { 
			echo_e "$s does not support $opt"
			echo_d "stderr was:"
			while read line ; do echo_d "$line" ; done < ${me}_$$.err
			echo_d "stdout was:"
			while read line ; do echo_d "$line" ; done < ${me}_$$.out
			retval=1
		}
		echo_d "rm -f ${me}_$$.out ${me}_$$.err"
		rm -f ${me}_$$.out ${me}_$$.err
	done
done
fi

#
# For each program or script check that we have a manual page in section 1 or 8.
#
if test -n "$programs$scripts" ; then
if test :"${MAINTAINER_MODE:-no}" != :no ; then
echo_v "testing for program and script manual pages"
for prog in $scripts $programs
do
	base=`basename $prog`
	found=
	echo_t "testing for manual page $base"
	sections="1 8"
	case " $bin_PROGRAMS $dist_bin_SCRIPTS " in
		*" $prog "*)
			sections='1'
			;;
		*) ;;
	esac
	case " $sbin_PROGRAMS $dist_sbin_SCRIPTS " in
		*" $prog "*)
			sections='8'
			;;
		*) ;;
	esac
	case " $libexec_PROGRAMS $dist_libexec_SCRIPTS " in
		*" $prog "*)
			sections=''
			echo_w "skipping libexec program $prog"
			continue
			;;
		*) ;;
	esac
	for section in $sections
	do
		for dir in ./doc $srcdir/doc . $srcdir
		do
			f="$dir/man/man$section/$base.$section"
			if test -e $f
			then
				echo_s "found manual page for $base, $f"
				found="${found}${found:+ }$f"
			fi
			if test -e ${f}s
			then
				echo_s "found manual page for $base, ${f}s"
				found="${found}${found:+ }${f}s"
			fi
		done
	done
	if test -z "$found"
	then
		if test :"${MAINTAINER_MODE:-no}" != :no ; then
			echo_e "cannot find manpage for $base"
			retval=1
			continue;
		else
			echo_w "cannot find manpage for $base"
		fi
	fi
done
fi
else
	echo_w "nothing to check, skipping test"
	exit 77
fi

if test $retval -eq 1 ; then
	echo_v "--------------"
	echo_v "Error summary:"
	echo_v "--------------"
	egrep '\<E:' $top_builddir/$me.log >&2
	echo_v "--------------"
fi

exit $retval
