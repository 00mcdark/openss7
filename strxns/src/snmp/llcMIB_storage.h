/*****************************************************************************

 @(#) $Id$

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date$ by $Author$

 -----------------------------------------------------------------------------

 $Log$
 *****************************************************************************/

#ifndef __LOCAL_LLCMIB_H__
#define __LOCAL_LLCMIB_H__

#ident "@(#) $RCSfile$ $Name$($Revision$) Copyright (c) 2008-2009 Monavacon Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct llcMIB_data {
	uint llcMIB_request;
	long llcDiscontinuityTime;
	long lLCConnection2DefaultMaximumRetransmissions;
	long lLCConnection2DefaultReceivedWindowSize;
	long lLCConnection2DefaultSendWindowSize;
	long lLCConnection2DefaultAcknowledgeTimeoutValue;
	long lLCConnection2DefaultBusyStateTimeoutValue;
	long lLCConnection2DefaultPBitTimeoutValue;
	long lLCConnection2DefaultRejectTimeoutValue;
	uint8_t *lLCConnection2DefaultRoute;
	size_t lLCConnection2DefaultRouteLen;
	long lLCConnection2DefaultKStep;
	long lLCConnection2DefaultMaxSendWindowSize;
	long lLCConnection2DefaultOptionalTolerationIPDUs;
	long lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckDefaultMaximumRetransmissions;
};
struct mACDLETable_data {
	uint mACDLETable_request;
	uint mACDLETable_refs;
	uint8_t *mACDLECommunicationsEntityId;
	size_t mACDLECommunicationsEntityIdLen;
	oid *mACDLELocalSapNames;
	size_t mACDLELocalSapNamesLen;
	long mACDLEOperationalState;
	oid *mACDLEProviderEntityNames;
	size_t mACDLEProviderEntityNamesLen;
	long mACDLERowStatus;
};
struct mACTable_data {
	uint mACTable_request;
	uint mACTable_refs;
	uint8_t *mACDLECommunicationsEntityId;
	size_t mACDLECommunicationsEntityIdLen;
	long mACOperationalState;
	uint8_t *mACId;
	size_t mACIdLen;
	long mACRowStatus;
};
struct resourceTypeIdTable_data {
	uint resourceTypeIdTable_request;
	uint resourceTypeIdTable_refs;
	uint8_t *mACDLECommunicationsEntityId;
	size_t mACDLECommunicationsEntityIdLen;
	uint8_t *resourceTypeIdName;
	size_t resourceTypeIdNameLen;
	uint8_t *resourceInfoManufacturerOUI;
	size_t resourceInfoManufacturerOUILen;
	uint8_t *resourceInfoManufacturerName;
	size_t resourceInfoManufacturerNameLen;
	uint8_t *resourceInfoManufacturerProductName;
	size_t resourceInfoManufacturerProductNameLen;
	uint8_t *resourceInfoManufacturerProductVersion;
	size_t resourceInfoManufacturerProductVersionLen;
};
struct dLSAPTable_data {
	uint dLSAPTable_request;
	uint dLSAPTable_refs;
	uint8_t *mACDLECommunicationsEntityId;
	size_t mACDLECommunicationsEntityIdLen;
	uint8_t *dLSAPSapId;
	size_t dLSAPSapIdLen;
	long dLSAPSap1Address;
	oid *dLSAPUserEntityNames;
	size_t dLSAPUserEntityNamesLen;
	long dLSAPRowStatus;
};
struct lLCDLETable_data {
	uint lLCDLETable_request;
	uint lLCDLETable_refs;
	uint8_t *lLCDLECommunicationsEntityId;
	size_t lLCDLECommunicationsEntityIdLen;
	oid *lLCDLELocalSapNames;
	size_t lLCDLELocalSapNamesLen;
	long lLCDLEOperationalState;
	oid *lLCDLEProviderEntityNames;
	size_t lLCDLEProviderEntityNamesLen;
	long lLCDLERowStatus;
};
struct lLCStationTable_data {
	uint lLCStationTable_request;
	uint lLCStationTable_refs;
	uint8_t *lLCDLECommunicationsEntityId;
	size_t lLCDLECommunicationsEntityIdLen;
	uint8_t *dLSAPSapId;
	size_t dLSAPSapIdLen;
	uint8_t *lLCStationLLCName;
	size_t lLCStationLLCNameLen;
	long lLCStationMaximumLSAPsConfigured;
	long lLCStationNumberOfActiveLSAPs;
	uint8_t *lLCStationSupportedServicesTypes;
	size_t lLCStationSupportedServicesTypesLen;
	long lLCStationStatus;
	long lLCStationType1AcknowledgeTimeoutValue;
	long lLCStationType1MaximumRetryCount;
	long lLCStationMaximumPDUN3;
	long lLCStationMaximumRetransmissions4;
	long lLCStationReceiveVariableLifetime;
	long lLCStationTransmitVariableLifetime;
	long lLCStationType3AcknowledgeTimeoutValue;
	long lLCStationType3Retransmissions;
	long lLCStationAvgBufferUseSize;
	long lLCStationBufferProblems;
	long lLCStationBufferSize;
	long lLCStationMaxBufferUseSize;
	long lLCStationInactiveLSAP;
	long lLCStationPDUsDiscard;
	uint8_t *lLCStationSTRIndicator;
	size_t lLCStationSTRIndicatorLen;
	long lLCStationVersionNumber;
	long lLCStationType1AcknowledgmentTimerTimeouts;
};
struct lLCSAPTable_data {
	uint lLCSAPTable_request;
	uint lLCSAPTable_refs;
	uint8_t *lLCDLECommunicationsEntityId;
	size_t lLCDLECommunicationsEntityIdLen;
	uint8_t *dLSAPSapId;
	size_t dLSAPSapIdLen;
	uint8_t *lLCSAPName;
	size_t lLCSAPNameLen;
	uint8_t *lLCSAPAddress;
	size_t lLCSAPAddressLen;
	long lLCSAPRDE;
};
struct rDESetupTable_data {
	uint rDESetupTable_request;
	uint rDESetupTable_refs;
	uint8_t *lLCDLECommunicationsEntityId;
	size_t lLCDLECommunicationsEntityIdLen;
	uint8_t *dLSAPSapId;
	size_t dLSAPSapIdLen;
	long rDESetupAgingEnabled;
	long rDESetupAgingValue;
	long rDESetupEnableType2Reset;
	long rDESetupMaximumRouteDescriptors;
	long rDESetupMaximumResponseTime;
	long rDESetupMinimumPDUSize;
	long rDESetupRDEHold;
	long rDESetupRDEReplace;
	long rDESetupName;
	long rDESetupResetOnTestEnabled;
};
struct rDEPairTable_data {
	uint rDEPairTable_request;
	uint rDEPairTable_refs;
	uint8_t *lLCDLECommunicationsEntityId;
	size_t lLCDLECommunicationsEntityIdLen;
	uint8_t *dLSAPSapId;
	size_t dLSAPSapIdLen;
	uint8_t *rDEPairName;
	size_t rDEPairNameLen;
	long rDEPairDiscardCounter;
	long rDEPairNSRPDUCounter;
	long rDEPairNSRSelectedCounter;
	uint8_t *rDEPairRIF;
	size_t rDEPairRIFLen;
	long rDEPairSRFPDUCounter;
	long rDEPairQueryCounter;
};
struct lLCCLPMTable_data {
	uint lLCCLPMTable_request;
	uint lLCCLPMTable_refs;
	uint8_t *lLCCLPMClProtocolMachineId;
	size_t lLCCLPMClProtocolMachineIdLen;
	long lLCCLPMOperationalState;
	long lLCCLPMTotalRemoteSAPs;
	long lLCCLPMRowStatus;
};
struct lLCConnectionLessTable_data {
	uint lLCConnectionLessTable_request;
	uint lLCConnectionLessTable_refs;
	uint8_t *lLCConnectionlessName;
	size_t lLCConnectionlessNameLen;
	long lLCConnectionlessMaximumLLCInformationFieldSize;
	long lLCConnectionlessTESTReceivedABBResponse;
	long lLCConnectionlessTESTReceivedCommand;
	long lLCConnectionlessTESTReceivedResponse;
	long lLCConnectionlessTESTSentABBResponse;
	long lLCConnectionlessTESTSentCommand;
	long lLCConnectionlessTESTSentResponse;
	long lLCConnectionlessUIReceived;
	long lLCConnectionlessUISent;
	long lLCConnectionlessXIDReceivedCommand;
	long lLCConnectionlessXIDReceivedResponse;
	long lLCConnectionlessXIDSentCommand;
	long lLCConnectionlessXIDSentResponse;
};
struct lLCCOPMTable_data {
	uint lLCCOPMTable_request;
	uint lLCCOPMTable_refs;
	uint8_t *lLCCOPMCoProtocolMachineId;
	size_t lLCCOPMCoProtocolMachineIdLen;
	long lLCCOPMOperationalState;
	long lLCCOPMRowStatus;
};
struct lLCConnection2Table_data {
	uint lLCConnection2Table_request;
	uint lLCConnection2Table_refs;
	uint8_t *lLCConnection2Name;
	size_t lLCConnection2NameLen;
	long lLCConnection2MaximumRetransmissions;
	long lLCConnection2ReceivedWindowSize;
	long lLCConnection2SendWindowSize;
	long lLCConnection2AcknowledgeTimeoutValue;
	long lLCConnection2BusyStateTimeoutValue;
	long lLCConnection2PBitTimeoutValue;
	long lLCConnection2RejectTimeoutValue;
	long lLCConnection2LocalBusy;
	long lLCConnection2RemoteBusy;
	long lLCConnection2RemoteReset;
	long lLCConnection2LocalReset;
	long lLCConnection2ProviderReset;
	uint8_t *lLCConnection2Route;
	size_t lLCConnection2RouteLen;
	long lLCConnection2KStep;
	long lLCConnection2MaxSendWindowSize;
	long lLCConnection2ReceivedI;
	long lLCConnection2SentI;
	long lLCConnection2SentAcks;
	long lLCConnection2ReceivedAcks;
	long lLCConnection2ReceivedFRMR;
	long lLCConnection2SentFRMR;
	long lLCConnection2ReceivedRR;
	long lLCConnection2SentRR;
	long lLCConnection2ReceivedRNR;
	long lLCConnection2SentRNR;
	long lLCConnection2ReceivedREJ;
	long lLCConnection2SentREJ;
	long lLCConnection2ReceivedSABME;
	long lLCConnection2SentSABME;
	long lLCConnection2ReceivedUA;
	long lLCConnection2SentUA;
	long lLCConnection2ReceivedDISC;
	long lLCConnection2SentDISC;
	long lLCConnection2ReceivedDM;
	long lLCConnection2SentDM;
	long lLCConnection2PDUsDiscarded1;
	long lLCConnection2PDUsDiscarded2;
	long lLCConnection2PDURetransmissions;
	long lLCConnection2OptionalTolerationIPDUs;
	long lLCConnection2DuplicateIPDUsReceived;
	long lLCConnection2Violation;
	long lLCConnection2ProtocolState;
	long lLCConnection2AdministrativeState;
	long lLCConnection2OperationalState;
	long lLCConnection2UsageState;
	uint8_t *lLCConnection2ProceduralStatus;
	size_t lLCConnection2ProceduralStatusLen;
	uint8_t *lLCConnection2AlarmStatus;
	size_t lLCConnection2AlarmStatusLen;
};
struct lLCConnection2IVMOTable_data {
	uint lLCConnection2IVMOTable_request;
	uint lLCConnection2IVMOTable_refs;
	uint8_t *lLCConnection2IVMOName;
	size_t lLCConnection2IVMONameLen;
	ulong lLCConnection2IVMOMaximumRetransmissions;
	ulong lLCConnection2IVMOReceivedWindowSize;
	ulong lLCConnection2IVMOSendWindowSize;
	long lLCConnection2IVMOAcknowledgeTimeoutValue;
	long lLCConnection2IVMOBusyStateTimeoutValue;
	long lLCConnection2IVMOBitTimeoutValue;
	long lLCConnection2IVMORejectTimeoutValue;
	ulong lLCConnection2IVMORoute;
	ulong lLCConnection2IVMOKStep;
	ulong lLCConnection2IVMOMaxSendWindowSize;
	long lLCConnection2IVMOOptionalTolerationIPDUs;
};
struct lLCConnectionlessAckTable_data {
	uint lLCConnectionlessAckTable_request;
	uint lLCConnectionlessAckTable_refs;
	uint8_t *lLCConnectionlessAckName;
	size_t lLCConnectionlessAckNameLen;
	long lLCConnectionlessAckMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckMaximumRetransmissions;
	long lLCConnectionlessAckTESTReceivedABBResponse;
	long lLCConnectionlessAckTESTReceivedCommand;
	long lLCConnectionlessAckTESTReceivedResponse;
	long lLCConnectionlessAckTESTSentABBResponse;
	long lLCConnectionlessAckTESTSentCommand;
	long lLCConnectionlessAckTESTSentResponse;
	long lLCConnectionlessAckReceiveResources;
	long lLCConnectionlessAckUIReceived;
	long lLCConnectionlessAckUISent;
	long lLCConnectionlessAckXIDReceivedCommand;
	long lLCConnectionlessAckXIDReceivedResponse;
	long lLCConnectionlessAckXIDSentCommand;
	long lLCConnectionlessAckXIDSentResponse;
	long lLCConnectionlessAckRetransmissions;
	long lLCConnectionlessAckNoResponse;
	long lLCConnectionlessAckCommandIP;
	long lLCConnectionlessAckCommandIT;
	long lLCConnectionlessAckCommandOK;
	long lLCConnectionlessAckCommandPE;
	long lLCConnectionlessAckCommandRS;
	long lLCConnectionlessAckCommandUE;
	long lLCConnectionlessAckCommandUN;
	long lLCConnectionlessAckReceivedACCommand;
	long lLCConnectionlessAckSentACCommand;
	long lLCConnectionlessAckResponseIP;
	long lLCConnectionlessAckResponseIT;
	long lLCConnectionlessAckResponseNE;
	long lLCConnectionlessAckResponseNR;
	long lLCConnectionlessAckResponseOK;
	long lLCConnectionlessAckResponseRS;
	long lLCConnectionlessAckResponseUE;
	long lLCConnectionlessAckResponseUN;
	long lLCConnectionlessAckViolation;
};
struct lLCConnectionlessAckIVMOTable_data {
	uint lLCConnectionlessAckIVMOTable_request;
	uint lLCConnectionlessAckIVMOTable_refs;
	uint8_t *lLCConnectionlessAckIVMOName;
	size_t lLCConnectionlessAckIVMONameLen;
	long lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckIVMOMaximumRetransmissions;
	long lLCConnectionlessAckIVMORowStatus;
};

/* storage declarations */
extern struct llcMIB_data *llcMIBStorage;
extern struct header_complex_index *mACDLETableStorage;
extern struct header_complex_index *mACTableStorage;
extern struct header_complex_index *resourceTypeIdTableStorage;
extern struct header_complex_index *dLSAPTableStorage;
extern struct header_complex_index *lLCDLETableStorage;
extern struct header_complex_index *lLCStationTableStorage;
extern struct header_complex_index *lLCSAPTableStorage;
extern struct header_complex_index *rDESetupTableStorage;
extern struct header_complex_index *rDEPairTableStorage;
extern struct header_complex_index *lLCCLPMTableStorage;
extern struct header_complex_index *lLCConnectionLessTableStorage;
extern struct header_complex_index *lLCCOPMTableStorage;
extern struct header_complex_index *lLCConnection2TableStorage;
extern struct header_complex_index *lLCConnection2IVMOTableStorage;
extern struct header_complex_index *lLCConnectionlessAckTableStorage;
extern struct header_complex_index *lLCConnectionlessAckIVMOTableStorage;

/* enum definitions from the covered mib sections */

#define MACDLEOPERATIONALSTATE_DISABLED          0
#define MACDLEOPERATIONALSTATE_ENABLED           1

#define MACOPERATIONALSTATE_DISABLED             0
#define MACOPERATIONALSTATE_ENABLED              1

#define LLCDLEOPERATIONALSTATE_DISABLED          0
#define LLCDLEOPERATIONALSTATE_ENABLED           1

#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE1   0
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE2   1
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3INITIATE 2
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RECEIVEDATA 3
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RETURNDATA 4

#define LLCSTATIONSTATUS_UP                      0
#define LLCSTATIONSTATUS_DOWN                    1
#define LLCSTATIONSTATUS_OTHER                   2

#define LLCSTATIONSTRINDICATOR_NSR               0
#define LLCSTATIONSTRINDICATOR_STE               1

#define LLCSAPRDE_TRUE                           1
#define LLCSAPRDE_FALSE                          2

#define RDESETUPAGINGENABLED_TRUE                1
#define RDESETUPAGINGENABLED_FALSE               2

#define RDESETUPRDEHOLD_TRUE                     1
#define RDESETUPRDEHOLD_FALSE                    2

#define RDESETUPRDEREPLACE_TRUE                  1
#define RDESETUPRDEREPLACE_FALSE                 2

#define RDESETUPRESETONTESTENABLED_TRUE          1
#define RDESETUPRESETONTESTENABLED_FALSE         2

#define LLCCLPMOPERATIONALSTATE_DISABLED         0
#define LLCCLPMOPERATIONALSTATE_ENABLED          1

#define LLCCOPMOPERATIONALSTATE_DISABLED         0
#define LLCCOPMOPERATIONALSTATE_ENABLED          1

#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTION2PROTOCOLSTATE_DISCONNECTEDPHASE 0
#define LLCCONNECTION2PROTOCOLSTATE_LINKDICONNECTION_PHASE 1
#define LLCCONNECTION2PROTOCOLSTATE_LINK_SET_UP_PHASE 2
#define LLCCONNECTION2PROTOCOLSTATE_INFORMATION_TRANSFER_PHASE 3
#define LLCCONNECTION2PROTOCOLSTATE_FRAME_REJECT_CONDITION 4
#define LLCCONNECTION2PROTOCOLSTATE_BUSY_CONDITION 5
#define LLCCONNECTION2PROTOCOLSTATE_SENT_REJECT_CONDITION 6
#define LLCCONNECTION2PROTOCOLSTATE_SYSTEM_PARAMETERS_AND_ERROR_RECOVERY 7

#define LLCCONNECTION2ADMINISTRATIVESTATE_LOCKED 0
#define LLCCONNECTION2ADMINISTRATIVESTATE_UNLOCKED 1
#define LLCCONNECTION2ADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define LLCCONNECTION2OPERATIONALSTATE_DISABLED  0
#define LLCCONNECTION2OPERATIONALSTATE_ENABLED   1

#define LLCCONNECTION2USAGESTATE_IDLE            0
#define LLCCONNECTION2USAGESTATE_ACTIVE          1
#define LLCCONNECTION2USAGESTATE_BUSY            2

#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define LLCCONNECTION2PROCEDURALSTATUS_NOTINITIALIZED 1
#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZING 2
#define LLCCONNECTION2PROCEDURALSTATUS_REPORTING 3
#define LLCCONNECTION2PROCEDURALSTATUS_TERMINATING 4

#define LLCCONNECTION2ALARMSTATUS_UNDERREPAIR    0
#define LLCCONNECTION2ALARMSTATUS_CRITICAL       1
#define LLCCONNECTION2ALARMSTATUS_MAJOR          2
#define LLCCONNECTION2ALARMSTATUS_MINOR          3
#define LLCCONNECTION2ALARMSTATUS_ALARMOUTSTANDING 4

#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTIONLESSACKRECEIVERESOURCES_TRUE 1
#define LLCCONNECTIONLESSACKRECEIVERESOURCES_FALSE 2

#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_FALSE 2

/* notifications */
extern oid lLCConnection2Event_oid[10];
extern oid lLCClessACKEvent_oid[10];
extern oid lLCStationEvent_oid[10];

/* scalars accessible only for notify */
extern oid pdusDiscarded1_oid[11];
extern oid pdusDiscarded2_oid[11];
extern oid pduRetransmissions_oid[11];
extern oid acknowledgeTimeout_oid[11];
extern oid busyStateTimeout_oid[11];
extern oid rejectTimeout_oid[11];
extern oid pBitTimeout_oid[11];
extern oid type2Violation_oid[11];
extern oid retranmissions_oid[11];
extern oid type3Violation_oid[11];
extern oid noResponse_oid[11];
extern oid pdusDiscarded_oid[11];
extern oid bufferProblems_oid[11];

/* object id definitions */
extern oid macBasicMandatoryGroup_oid[11];
extern oid llcBasicMandatoryGroup_oid[11];
extern oid llcBasicConditionalGroup_oid[11];
extern oid llcBasicStatisticsGroup_oid[11];
extern oid llcBasicNotificationGroup_oid[11];
extern oid llcBasicParametersGroup_oid[11];
extern oid llcType1MandatoryGroup_oid[11];
extern oid llcType1StatisticsGroup_oid[11];
extern oid llcType2MandatoryGroup_oid[11];
extern oid llcType2ConditionalGroup_oid[11];
extern oid llcType2StatisticsGroup_oid[11];
extern oid llcType2InitialValuesGroup_oid[11];
extern oid llcType2InitialValueDefaultsGroup_oid[11];
extern oid llcType2NotificationGroup_oid[11];
extern oid llcType2ParametersGroup_oid[11];
extern oid llcType2RDEConditionalGroup_oid[11];
extern oid llcType3MandatoryGroup_oid[11];
extern oid llcType3ConditionalGroup_oid[11];
extern oid llcType3StatisticsGroup_oid[11];
extern oid llcType3NotificationGroup_oid[11];
extern oid llcType3ParametersGroup_oid[11];
extern oid llcType3IntialValuesGroup_oid[11];
extern oid llcType3InitialValueDefaultsGroup_oid[11];
extern oid llcTmnStateGroup_oid[11];
extern oid llcMIBCompliance_oid[11];

/* function prototypes */
/* trap function prototypes */
extern void send_lLCConnection2Event_v2trap(struct variable_list *);
extern void send_lLCClessACKEvent_v2trap(struct variable_list *);
extern void send_lLCStationEvent_v2trap(struct variable_list *);

/* variable function prototypes */
void init_llcMIB(void);
void deinit_llcMIB(void);
int term_llcMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_llcMIB;
void parse_llcMIB(const char *, char *);
SNMPCallback store_llcMIB;
void refresh_llcMIB(void);
FindVarMethod var_mACDLETable;
struct mACDLETable_data *mACDLETable_create(void);
struct mACDLETable_data *mACDLETable_duplicate(struct mACDLETable_data *);
int mACDLETable_destroy(struct mACDLETable_data **);
int mACDLETable_add(struct mACDLETable_data *);
int mACDLETable_del(struct mACDLETable_data *);
void parse_mACDLETable(const char *, char *);
SNMPCallback store_mACDLETable;
void refresh_mACDLETable(void);
FindVarMethod var_mACTable;
struct mACTable_data *mACTable_create(void);
struct mACTable_data *mACTable_duplicate(struct mACTable_data *);
int mACTable_destroy(struct mACTable_data **);
int mACTable_add(struct mACTable_data *);
int mACTable_del(struct mACTable_data *);
void parse_mACTable(const char *, char *);
SNMPCallback store_mACTable;
void refresh_mACTable(void);
FindVarMethod var_resourceTypeIdTable;
struct resourceTypeIdTable_data *resourceTypeIdTable_create(void);
struct resourceTypeIdTable_data *resourceTypeIdTable_duplicate(struct resourceTypeIdTable_data *);
int resourceTypeIdTable_destroy(struct resourceTypeIdTable_data **);
int resourceTypeIdTable_add(struct resourceTypeIdTable_data *);
int resourceTypeIdTable_del(struct resourceTypeIdTable_data *);
void parse_resourceTypeIdTable(const char *, char *);
SNMPCallback store_resourceTypeIdTable;
void refresh_resourceTypeIdTable(void);
FindVarMethod var_dLSAPTable;
struct dLSAPTable_data *dLSAPTable_create(void);
struct dLSAPTable_data *dLSAPTable_duplicate(struct dLSAPTable_data *);
int dLSAPTable_destroy(struct dLSAPTable_data **);
int dLSAPTable_add(struct dLSAPTable_data *);
int dLSAPTable_del(struct dLSAPTable_data *);
void parse_dLSAPTable(const char *, char *);
SNMPCallback store_dLSAPTable;
void refresh_dLSAPTable(void);
FindVarMethod var_lLCDLETable;
struct lLCDLETable_data *lLCDLETable_create(void);
struct lLCDLETable_data *lLCDLETable_duplicate(struct lLCDLETable_data *);
int lLCDLETable_destroy(struct lLCDLETable_data **);
int lLCDLETable_add(struct lLCDLETable_data *);
int lLCDLETable_del(struct lLCDLETable_data *);
void parse_lLCDLETable(const char *, char *);
SNMPCallback store_lLCDLETable;
void refresh_lLCDLETable(void);
FindVarMethod var_lLCStationTable;
struct lLCStationTable_data *lLCStationTable_create(void);
struct lLCStationTable_data *lLCStationTable_duplicate(struct lLCStationTable_data *);
int lLCStationTable_destroy(struct lLCStationTable_data **);
int lLCStationTable_add(struct lLCStationTable_data *);
int lLCStationTable_del(struct lLCStationTable_data *);
void parse_lLCStationTable(const char *, char *);
SNMPCallback store_lLCStationTable;
void refresh_lLCStationTable(void);
FindVarMethod var_lLCSAPTable;
struct lLCSAPTable_data *lLCSAPTable_create(void);
struct lLCSAPTable_data *lLCSAPTable_duplicate(struct lLCSAPTable_data *);
int lLCSAPTable_destroy(struct lLCSAPTable_data **);
int lLCSAPTable_add(struct lLCSAPTable_data *);
int lLCSAPTable_del(struct lLCSAPTable_data *);
void parse_lLCSAPTable(const char *, char *);
SNMPCallback store_lLCSAPTable;
void refresh_lLCSAPTable(void);
FindVarMethod var_rDESetupTable;
struct rDESetupTable_data *rDESetupTable_create(void);
struct rDESetupTable_data *rDESetupTable_duplicate(struct rDESetupTable_data *);
int rDESetupTable_destroy(struct rDESetupTable_data **);
int rDESetupTable_add(struct rDESetupTable_data *);
int rDESetupTable_del(struct rDESetupTable_data *);
void parse_rDESetupTable(const char *, char *);
SNMPCallback store_rDESetupTable;
void refresh_rDESetupTable(void);
FindVarMethod var_rDEPairTable;
struct rDEPairTable_data *rDEPairTable_create(void);
struct rDEPairTable_data *rDEPairTable_duplicate(struct rDEPairTable_data *);
int rDEPairTable_destroy(struct rDEPairTable_data **);
int rDEPairTable_add(struct rDEPairTable_data *);
int rDEPairTable_del(struct rDEPairTable_data *);
void parse_rDEPairTable(const char *, char *);
SNMPCallback store_rDEPairTable;
void refresh_rDEPairTable(void);
FindVarMethod var_lLCCLPMTable;
struct lLCCLPMTable_data *lLCCLPMTable_create(void);
struct lLCCLPMTable_data *lLCCLPMTable_duplicate(struct lLCCLPMTable_data *);
int lLCCLPMTable_destroy(struct lLCCLPMTable_data **);
int lLCCLPMTable_add(struct lLCCLPMTable_data *);
int lLCCLPMTable_del(struct lLCCLPMTable_data *);
void parse_lLCCLPMTable(const char *, char *);
SNMPCallback store_lLCCLPMTable;
void refresh_lLCCLPMTable(void);
FindVarMethod var_lLCConnectionLessTable;
struct lLCConnectionLessTable_data *lLCConnectionLessTable_create(void);
struct lLCConnectionLessTable_data *lLCConnectionLessTable_duplicate(struct lLCConnectionLessTable_data *);
int lLCConnectionLessTable_destroy(struct lLCConnectionLessTable_data **);
int lLCConnectionLessTable_add(struct lLCConnectionLessTable_data *);
int lLCConnectionLessTable_del(struct lLCConnectionLessTable_data *);
void parse_lLCConnectionLessTable(const char *, char *);
SNMPCallback store_lLCConnectionLessTable;
void refresh_lLCConnectionLessTable(void);
FindVarMethod var_lLCCOPMTable;
struct lLCCOPMTable_data *lLCCOPMTable_create(void);
struct lLCCOPMTable_data *lLCCOPMTable_duplicate(struct lLCCOPMTable_data *);
int lLCCOPMTable_destroy(struct lLCCOPMTable_data **);
int lLCCOPMTable_add(struct lLCCOPMTable_data *);
int lLCCOPMTable_del(struct lLCCOPMTable_data *);
void parse_lLCCOPMTable(const char *, char *);
SNMPCallback store_lLCCOPMTable;
void refresh_lLCCOPMTable(void);
FindVarMethod var_lLCConnection2Table;
struct lLCConnection2Table_data *lLCConnection2Table_create(void);
struct lLCConnection2Table_data *lLCConnection2Table_duplicate(struct lLCConnection2Table_data *);
int lLCConnection2Table_destroy(struct lLCConnection2Table_data **);
int lLCConnection2Table_add(struct lLCConnection2Table_data *);
int lLCConnection2Table_del(struct lLCConnection2Table_data *);
void parse_lLCConnection2Table(const char *, char *);
SNMPCallback store_lLCConnection2Table;
void refresh_lLCConnection2Table(void);
FindVarMethod var_lLCConnection2IVMOTable;
struct lLCConnection2IVMOTable_data *lLCConnection2IVMOTable_create(void);
struct lLCConnection2IVMOTable_data *lLCConnection2IVMOTable_duplicate(struct lLCConnection2IVMOTable_data *);
int lLCConnection2IVMOTable_destroy(struct lLCConnection2IVMOTable_data **);
int lLCConnection2IVMOTable_add(struct lLCConnection2IVMOTable_data *);
int lLCConnection2IVMOTable_del(struct lLCConnection2IVMOTable_data *);
void parse_lLCConnection2IVMOTable(const char *, char *);
SNMPCallback store_lLCConnection2IVMOTable;
void refresh_lLCConnection2IVMOTable(void);
FindVarMethod var_lLCConnectionlessAckTable;
struct lLCConnectionlessAckTable_data *lLCConnectionlessAckTable_create(void);
struct lLCConnectionlessAckTable_data *lLCConnectionlessAckTable_duplicate(struct lLCConnectionlessAckTable_data *);
int lLCConnectionlessAckTable_destroy(struct lLCConnectionlessAckTable_data **);
int lLCConnectionlessAckTable_add(struct lLCConnectionlessAckTable_data *);
int lLCConnectionlessAckTable_del(struct lLCConnectionlessAckTable_data *);
void parse_lLCConnectionlessAckTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckTable;
void refresh_lLCConnectionlessAckTable(void);
FindVarMethod var_lLCConnectionlessAckIVMOTable;
struct lLCConnectionlessAckIVMOTable_data *lLCConnectionlessAckIVMOTable_create(void);
struct lLCConnectionlessAckIVMOTable_data *lLCConnectionlessAckIVMOTable_duplicate(struct lLCConnectionlessAckIVMOTable_data *);
int lLCConnectionlessAckIVMOTable_destroy(struct lLCConnectionlessAckIVMOTable_data **);
int lLCConnectionlessAckIVMOTable_add(struct lLCConnectionlessAckIVMOTable_data *);
int lLCConnectionlessAckIVMOTable_del(struct lLCConnectionlessAckIVMOTable_data *);
void parse_lLCConnectionlessAckIVMOTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckIVMOTable;
void refresh_lLCConnectionlessAckIVMOTable(void);

WriteMethod write_mACDLELocalSapNames;
WriteMethod write_mACDLEProviderEntityNames;
WriteMethod write_mACDLERowStatus;
WriteMethod write_mACRowStatus;
WriteMethod write_dLSAPSap1Address;
WriteMethod write_dLSAPUserEntityNames;
WriteMethod write_dLSAPRowStatus;
WriteMethod write_lLCDLELocalSapNames;
WriteMethod write_lLCDLEProviderEntityNames;
WriteMethod write_lLCDLERowStatus;
WriteMethod write_lLCStationLLCName;
WriteMethod write_lLCStationSupportedServicesTypes;
WriteMethod write_lLCStationType1AcknowledgeTimeoutValue;
WriteMethod write_lLCStationType1MaximumRetryCount;
WriteMethod write_lLCStationMaximumPDUN3;
WriteMethod write_lLCStationMaximumRetransmissions4;
WriteMethod write_lLCStationReceiveVariableLifetime;
WriteMethod write_lLCStationTransmitVariableLifetime;
WriteMethod write_lLCStationType3AcknowledgeTimeoutValue;
WriteMethod write_lLCStationBufferSize;
WriteMethod write_lLCStationSTRIndicator;
WriteMethod write_lLCStationVersionNumber;
WriteMethod write_rDESetupAgingEnabled;
WriteMethod write_rDESetupAgingValue;
WriteMethod write_rDESetupEnableType2Reset;
WriteMethod write_rDESetupMaximumRouteDescriptors;
WriteMethod write_rDESetupMaximumResponseTime;
WriteMethod write_rDESetupMinimumPDUSize;
WriteMethod write_rDESetupRDEHold;
WriteMethod write_rDESetupRDEReplace;
WriteMethod write_rDESetupResetOnTestEnabled;
WriteMethod write_lLCCLPMRowStatus;
WriteMethod write_lLCConnectionlessName;
WriteMethod write_lLCConnectionlessMaximumLLCInformationFieldSize;
WriteMethod write_lLCCOPMRowStatus;
WriteMethod write_lLCConnection2Name;
WriteMethod write_lLCConnection2MaximumRetransmissions;
WriteMethod write_lLCConnection2ReceivedWindowSize;
WriteMethod write_lLCConnection2SendWindowSize;
WriteMethod write_lLCConnection2AcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2BusyStateTimeoutValue;
WriteMethod write_lLCConnection2PBitTimeoutValue;
WriteMethod write_lLCConnection2RejectTimeoutValue;
WriteMethod write_lLCConnection2RemoteBusy;
WriteMethod write_lLCConnection2RemoteReset;
WriteMethod write_lLCConnection2LocalReset;
WriteMethod write_lLCConnection2ProviderReset;
WriteMethod write_lLCConnection2Route;
WriteMethod write_lLCConnection2KStep;
WriteMethod write_lLCConnection2MaxSendWindowSize;
WriteMethod write_lLCConnection2SentAcks;
WriteMethod write_lLCConnection2ReceivedAcks;
WriteMethod write_lLCConnection2ReceivedFRMR;
WriteMethod write_lLCConnection2SentFRMR;
WriteMethod write_lLCConnection2ReceivedRR;
WriteMethod write_lLCConnection2SentRR;
WriteMethod write_lLCConnection2ReceivedRNR;
WriteMethod write_lLCConnection2SentRNR;
WriteMethod write_lLCConnection2ReceivedREJ;
WriteMethod write_lLCConnection2SentREJ;
WriteMethod write_lLCConnection2ReceivedSABME;
WriteMethod write_lLCConnection2SentSABME;
WriteMethod write_lLCConnection2ReceivedUA;
WriteMethod write_lLCConnection2SentUA;
WriteMethod write_lLCConnection2ReceivedDISC;
WriteMethod write_lLCConnection2SentDISC;
WriteMethod write_lLCConnection2ReceivedDM;
WriteMethod write_lLCConnection2SentDM;
WriteMethod write_lLCConnection2PDUsDiscarded1;
WriteMethod write_lLCConnection2PDUsDiscarded2;
WriteMethod write_lLCConnection2PDURetransmissions;
WriteMethod write_lLCConnection2OptionalTolerationIPDUs;
WriteMethod write_lLCConnection2DuplicateIPDUsReceived;
WriteMethod write_lLCConnection2Violation;
WriteMethod write_lLCConnection2AdministrativeState;
WriteMethod write_lLCConnection2AlarmStatus;
WriteMethod write_lLCConnection2IVMOMaximumRetransmissions;
WriteMethod write_lLCConnection2IVMOReceivedWindowSize;
WriteMethod write_lLCConnection2IVMOSendWindowSize;
WriteMethod write_lLCConnection2IVMOAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2IVMOBusyStateTimeoutValue;
WriteMethod write_lLCConnection2IVMOBitTimeoutValue;
WriteMethod write_lLCConnection2IVMORejectTimeoutValue;
WriteMethod write_lLCConnection2IVMORoute;
WriteMethod write_lLCConnection2IVMOKStep;
WriteMethod write_lLCConnection2IVMOMaxSendWindowSize;
WriteMethod write_lLCConnection2IVMOOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckReceiveResources;
WriteMethod write_lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckIVMOMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckIVMORowStatus;
WriteMethod write_lLCConnection2DefaultMaximumRetransmissions;
WriteMethod write_lLCConnection2DefaultReceivedWindowSize;
WriteMethod write_lLCConnection2DefaultSendWindowSize;
WriteMethod write_lLCConnection2DefaultAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2DefaultBusyStateTimeoutValue;
WriteMethod write_lLCConnection2DefaultPBitTimeoutValue;
WriteMethod write_lLCConnection2DefaultRejectTimeoutValue;
WriteMethod write_lLCConnection2DefaultRoute;
WriteMethod write_lLCConnection2DefaultKStep;
WriteMethod write_lLCConnection2DefaultMaxSendWindowSize;
WriteMethod write_lLCConnection2DefaultOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckDefaultMaximumRetransmissions;
#endif				/* __LOCAL_LLCMIB_H__ */
