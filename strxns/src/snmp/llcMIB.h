/*****************************************************************************

 @(#) $Id: llcMIB.h,v 0.9.2.1 2008-12-27 15:42:07 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2008-12-27 15:42:07 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: llcMIB.h,v $
 Revision 0.9.2.1  2008-12-27 15:42:07  brian
 - correct ignore file

 *****************************************************************************/

#ifndef __LOCAL_LLCMIB_H__
#define __LOCAL_LLCMIB_H__

#ident "@(#) $RCSfile: llcMIB.h,v $ $Name: OpenSS7-0_9_2 $($Revision: 0.9.2.1 $) Copyright (c) 2001-2008 OpenSS7 Corporation."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct llcMIB_data {
	uint llcMIB_request;

	int32_t llcDiscontinuityTime;
	int32_t lLCConnection2DefaultMaximumRetransmissions;
	int32_t lLCConnection2DefaultReceivedWindowSize;
	int32_t lLCConnection2DefaultSendWindowSize;
	int32_t lLCConnection2DefaultAcknowledgeTimeoutValue;
	int32_t lLCConnection2DefaultBusyStateTimeoutValue;
	int32_t lLCConnection2DefaultPBitTimeoutValue;
	int32_t lLCConnection2DefaultRejectTimeoutValue;
	char *lLCConnection2DefaultRoute;
	int lLCConnection2DefaultRouteLen;
	int32_t lLCConnection2DefaultKStep;
	int32_t lLCConnection2DefaultMaxSendWindowSize;
	int32_t lLCConnection2DefaultOptionalTolerationIPDUs;
	int32_t lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
	int32_t lLCConnectionlessAckDefaultMaximumRetransmissions;
};
struct mACDLETable_data {
	uint mACDLETable_request;
	char *mACDLECommunicationsEntityId;
	int mACDLECommunicationsEntityIdLen;
	oid *mACDLELocalSapNames;
	int mACDLELocalSapNamesLen;
	int32_t mACDLEOperationalState;
	oid *mACDLEProviderEntityNames;
	int mACDLEProviderEntityNamesLen;
	int32_t mACDLERowStatus;
};
struct mACTable_data {
	uint mACTable_request;
	char *mACDLECommunicationsEntityId;
	int mACDLECommunicationsEntityIdLen;
	int32_t mACOperationalState;
	char *mACId;
	int mACIdLen;
	int32_t mACRowStatus;
};
struct resourceTypeIdTable_data {
	uint resourceTypeIdTable_request;
	char *mACDLECommunicationsEntityId;
	int mACDLECommunicationsEntityIdLen;
	char *resourceTypeIdName;
	int resourceTypeIdNameLen;
	char *resourceInfoManufacturerOUI;
	int resourceInfoManufacturerOUILen;
	char *resourceInfoManufacturerName;
	int resourceInfoManufacturerNameLen;
	char *resourceInfoManufacturerProductName;
	int resourceInfoManufacturerProductNameLen;
	char *resourceInfoManufacturerProductVersion;
	int resourceInfoManufacturerProductVersionLen;
};
struct dLSAPTable_data {
	uint dLSAPTable_request;
	char *mACDLECommunicationsEntityId;
	int mACDLECommunicationsEntityIdLen;
	char *dLSAPSapId;
	int dLSAPSapIdLen;
	int32_t dLSAPSap1Address;
	oid *dLSAPUserEntityNames;
	int dLSAPUserEntityNamesLen;
	int32_t dLSAPRowStatus;
};
struct lLCDLETable_data {
	uint lLCDLETable_request;
	char *lLCDLECommunicationsEntityId;
	int lLCDLECommunicationsEntityIdLen;
	oid *lLCDLELocalSapNames;
	int lLCDLELocalSapNamesLen;
	int32_t lLCDLEOperationalState;
	oid *lLCDLEProviderEntityNames;
	int lLCDLEProviderEntityNamesLen;
	int32_t lLCDLERowStatus;
};
struct lLCStationTable_data {
	uint lLCStationTable_request;
	char *lLCDLECommunicationsEntityId;
	int lLCDLECommunicationsEntityIdLen;
	char *dLSAPSapId;
	int dLSAPSapIdLen;
	char *lLCStationLLCName;
	int lLCStationLLCNameLen;
	int32_t lLCStationMaximumLSAPsConfigured;
	int32_t lLCStationNumberOfActiveLSAPs;
	char *lLCStationSupportedServicesTypes;
	int lLCStationSupportedServicesTypesLen;
	int32_t lLCStationStatus;
	int32_t lLCStationType1AcknowledgeTimeoutValue;
	int32_t lLCStationType1MaximumRetryCount;
	int32_t lLCStationMaximumPDUN3;
	int32_t lLCStationMaximumRetransmissions4;
	int32_t lLCStationReceiveVariableLifetime;
	int32_t lLCStationTransmitVariableLifetime;
	int32_t lLCStationType3AcknowledgeTimeoutValue;
	int32_t lLCStationType3Retransmissions;
	int32_t lLCStationAvgBufferUseSize;
	int32_t lLCStationBufferProblems;
	int32_t lLCStationBufferSize;
	int32_t lLCStationMaxBufferUseSize;
	int32_t lLCStationInactiveLSAP;
	int32_t lLCStationPDUsDiscard;
	char *lLCStationSTRIndicator;
	int lLCStationSTRIndicatorLen;
	int32_t lLCStationVersionNumber;
	int32_t lLCStationType1AcknowledgmentTimerTimeouts;
};
struct lLCSAPTable_data {
	uint lLCSAPTable_request;
	char *lLCDLECommunicationsEntityId;
	int lLCDLECommunicationsEntityIdLen;
	char *dLSAPSapId;
	int dLSAPSapIdLen;
	char *lLCSAPName;
	int lLCSAPNameLen;
	char *lLCSAPAddress;
	int lLCSAPAddressLen;
	int32_t lLCSAPRDE;
};
struct rDESetupTable_data {
	uint rDESetupTable_request;
	char *lLCDLECommunicationsEntityId;
	int lLCDLECommunicationsEntityIdLen;
	char *dLSAPSapId;
	int dLSAPSapIdLen;
	int32_t rDESetupAgingEnabled;
	int32_t rDESetupAgingValue;
	int32_t rDESetupEnableType2Reset;
	int32_t rDESetupMaximumRouteDescriptors;
	int32_t rDESetupMaximumResponseTime;
	int32_t rDESetupMinimumPDUSize;
	int32_t rDESetupRDEHold;
	int32_t rDESetupRDEReplace;
	int32_t rDESetupName;
	int32_t rDESetupResetOnTestEnabled;
};
struct rDEPairTable_data {
	uint rDEPairTable_request;
	char *lLCDLECommunicationsEntityId;
	int lLCDLECommunicationsEntityIdLen;
	char *dLSAPSapId;
	int dLSAPSapIdLen;
	char *rDEPairName;
	int rDEPairNameLen;
	int32_t rDEPairDiscardCounter;
	int32_t rDEPairNSRPDUCounter;
	int32_t rDEPairNSRSelectedCounter;
	char *rDEPairRIF;
	int rDEPairRIFLen;
	int32_t rDEPairSRFPDUCounter;
	int32_t rDEPairQueryCounter;
};
struct lLCCLPMTable_data {
	uint lLCCLPMTable_request;
	char *lLCCLPMClProtocolMachineId;
	int lLCCLPMClProtocolMachineIdLen;
	int32_t lLCCLPMOperationalState;
	int32_t lLCCLPMTotalRemoteSAPs;
	int32_t lLCCLPMRowStatus;
};
struct lLCConnectionLessTable_data {
	uint lLCConnectionLessTable_request;
	char *lLCConnectionlessName;
	int lLCConnectionlessNameLen;
	int32_t lLCConnectionlessMaximumLLCInformationFieldSize;
	int32_t lLCConnectionlessTESTReceivedABBResponse;
	int32_t lLCConnectionlessTESTReceivedCommand;
	int32_t lLCConnectionlessTESTReceivedResponse;
	int32_t lLCConnectionlessTESTSentABBResponse;
	int32_t lLCConnectionlessTESTSentCommand;
	int32_t lLCConnectionlessTESTSentResponse;
	int32_t lLCConnectionlessUIReceived;
	int32_t lLCConnectionlessUISent;
	int32_t lLCConnectionlessXIDReceivedCommand;
	int32_t lLCConnectionlessXIDReceivedResponse;
	int32_t lLCConnectionlessXIDSentCommand;
	int32_t lLCConnectionlessXIDSentResponse;
};
struct lLCCOPMTable_data {
	uint lLCCOPMTable_request;
	char *lLCCOPMCoProtocolMachineId;
	int lLCCOPMCoProtocolMachineIdLen;
	int32_t lLCCOPMOperationalState;
	int32_t lLCCOPMRowStatus;
};
struct lLCConnection2Table_data {
	uint lLCConnection2Table_request;
	char *lLCConnection2Name;
	int lLCConnection2NameLen;
	int32_t lLCConnection2MaximumRetransmissions;
	int32_t lLCConnection2ReceivedWindowSize;
	int32_t lLCConnection2SendWindowSize;
	int32_t lLCConnection2AcknowledgeTimeoutValue;
	int32_t lLCConnection2BusyStateTimeoutValue;
	int32_t lLCConnection2PBitTimeoutValue;
	int32_t lLCConnection2RejectTimeoutValue;
	int32_t lLCConnection2LocalBusy;
	int32_t lLCConnection2RemoteBusy;
	int32_t lLCConnection2RemoteReset;
	int32_t lLCConnection2LocalReset;
	int32_t lLCConnection2ProviderReset;
	char *lLCConnection2Route;
	int lLCConnection2RouteLen;
	int32_t lLCConnection2KStep;
	int32_t lLCConnection2MaxSendWindowSize;
	int32_t lLCConnection2ReceivedI;
	int32_t lLCConnection2SentI;
	int32_t lLCConnection2SentAcks;
	int32_t lLCConnection2ReceivedAcks;
	int32_t lLCConnection2ReceivedFRMR;
	int32_t lLCConnection2SentFRMR;
	int32_t lLCConnection2ReceivedRR;
	int32_t lLCConnection2SentRR;
	int32_t lLCConnection2ReceivedRNR;
	int32_t lLCConnection2SentRNR;
	int32_t lLCConnection2ReceivedREJ;
	int32_t lLCConnection2SentREJ;
	int32_t lLCConnection2ReceivedSABME;
	int32_t lLCConnection2SentSABME;
	int32_t lLCConnection2ReceivedUA;
	int32_t lLCConnection2SentUA;
	int32_t lLCConnection2ReceivedDISC;
	int32_t lLCConnection2SentDISC;
	int32_t lLCConnection2ReceivedDM;
	int32_t lLCConnection2SentDM;
	int32_t lLCConnection2PDUsDiscarded1;
	int32_t lLCConnection2PDUsDiscarded2;
	int32_t lLCConnection2PDURetransmissions;
	int32_t lLCConnection2OptionalTolerationIPDUs;
	int32_t lLCConnection2DuplicateIPDUsReceived;
	int32_t lLCConnection2Violation;
	int32_t lLCConnection2ProtocolState;
	int32_t lLCConnection2AdministrativeState;
	int32_t lLCConnection2OperationalState;
	int32_t lLCConnection2UsageState;
	char *lLCConnection2ProceduralStatus;
	int lLCConnection2ProceduralStatusLen;
	char *lLCConnection2AlarmStatus;
	int lLCConnection2AlarmStatusLen;
};
struct lLCConnection2IVMOTable_data {
	uint lLCConnection2IVMOTable_request;
	char *lLCConnection2IVMOName;
	int lLCConnection2IVMONameLen;
	uint32_t lLCConnection2IVMOMaximumRetransmissions;
	uint32_t lLCConnection2IVMOReceivedWindowSize;
	uint32_t lLCConnection2IVMOSendWindowSize;
	int32_t lLCConnection2IVMOAcknowledgeTimeoutValue;
	int32_t lLCConnection2IVMOBusyStateTimeoutValue;
	int32_t lLCConnection2IVMOBitTimeoutValue;
	int32_t lLCConnection2IVMORejectTimeoutValue;
	uint32_t lLCConnection2IVMORoute;
	uint32_t lLCConnection2IVMOKStep;
	uint32_t lLCConnection2IVMOMaxSendWindowSize;
	int32_t lLCConnection2IVMOOptionalTolerationIPDUs;
};
struct lLCConnectionlessAckTable_data {
	uint lLCConnectionlessAckTable_request;
	char *lLCConnectionlessAckName;
	int lLCConnectionlessAckNameLen;
	int32_t lLCConnectionlessAckMaximumLLCInformationFieldSize;
	int32_t lLCConnectionlessAckMaximumRetransmissions;
	int32_t lLCConnectionlessAckTESTReceivedABBResponse;
	int32_t lLCConnectionlessAckTESTReceivedCommand;
	int32_t lLCConnectionlessAckTESTReceivedResponse;
	int32_t lLCConnectionlessAckTESTSentABBResponse;
	int32_t lLCConnectionlessAckTESTSentCommand;
	int32_t lLCConnectionlessAckTESTSentResponse;
	int32_t lLCConnectionlessAckReceiveResources;
	int32_t lLCConnectionlessAckUIReceived;
	int32_t lLCConnectionlessAckUISent;
	int32_t lLCConnectionlessAckXIDReceivedCommand;
	int32_t lLCConnectionlessAckXIDReceivedResponse;
	int32_t lLCConnectionlessAckXIDSentCommand;
	int32_t lLCConnectionlessAckXIDSentResponse;
	int32_t lLCConnectionlessAckRetransmissions;
	int32_t lLCConnectionlessAckNoResponse;
	int32_t lLCConnectionlessAckCommandIP;
	int32_t lLCConnectionlessAckCommandIT;
	int32_t lLCConnectionlessAckCommandOK;
	int32_t lLCConnectionlessAckCommandPE;
	int32_t lLCConnectionlessAckCommandRS;
	int32_t lLCConnectionlessAckCommandUE;
	int32_t lLCConnectionlessAckCommandUN;
	int32_t lLCConnectionlessAckReceivedACCommand;
	int32_t lLCConnectionlessAckSentACCommand;
	int32_t lLCConnectionlessAckResponseIP;
	int32_t lLCConnectionlessAckResponseIT;
	int32_t lLCConnectionlessAckResponseNE;
	int32_t lLCConnectionlessAckResponseNR;
	int32_t lLCConnectionlessAckResponseOK;
	int32_t lLCConnectionlessAckResponseRS;
	int32_t lLCConnectionlessAckResponseUE;
	int32_t lLCConnectionlessAckResponseUN;
	int32_t lLCConnectionlessAckViolation;
};
struct lLCConnectionlessAckIVMOTable_data {
	uint lLCConnectionlessAckIVMOTable_request;
	char *lLCConnectionlessAckIVMOName;
	int lLCConnectionlessAckIVMONameLen;
	int32_t lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
	int32_t lLCConnectionlessAckIVMOMaximumRetransmissions;
	int32_t lLCConnectionlessAckIVMORowStatus;
};

/* storage declarations */
extern struct llcMIB_data *llcMIBStorage;
extern struct header_complex_index *mACDLETableStorage;
extern struct header_complex_index *mACTableStorage;
extern struct header_complex_index *resourceTypeIdTableStorage;
extern struct header_complex_index *dLSAPTableStorage;
extern struct header_complex_index *lLCDLETableStorage;
extern struct header_complex_index *lLCStationTableStorage;
extern struct header_complex_index *lLCSAPTableStorage;
extern struct header_complex_index *rDESetupTableStorage;
extern struct header_complex_index *rDEPairTableStorage;
extern struct header_complex_index *lLCCLPMTableStorage;
extern struct header_complex_index *lLCConnectionLessTableStorage;
extern struct header_complex_index *lLCCOPMTableStorage;
extern struct header_complex_index *lLCConnection2TableStorage;
extern struct header_complex_index *lLCConnection2IVMOTableStorage;
extern struct header_complex_index *lLCConnectionlessAckTableStorage;
extern struct header_complex_index *lLCConnectionlessAckIVMOTableStorage;

/* enum definitions from the covered mib sections */

#define MACDLEOPERATIONALSTATE_DISABLED          0
#define MACDLEOPERATIONALSTATE_ENABLED           1

#define MACOPERATIONALSTATE_DISABLED             0
#define MACOPERATIONALSTATE_ENABLED              1

#define LLCDLEOPERATIONALSTATE_DISABLED          0
#define LLCDLEOPERATIONALSTATE_ENABLED           1

#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE1   0
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE2   1
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3INITIATE 2
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RECEIVEDATA 3
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RETURNDATA 4

#define LLCSTATIONSTATUS_UP                      0
#define LLCSTATIONSTATUS_DOWN                    1
#define LLCSTATIONSTATUS_OTHER                   2

#define LLCSTATIONSTRINDICATOR_NSR               0
#define LLCSTATIONSTRINDICATOR_STE               1

#define LLCSAPRDE_TRUE                           1
#define LLCSAPRDE_FALSE                          2

#define RDESETUPAGINGENABLED_TRUE                1
#define RDESETUPAGINGENABLED_FALSE               2

#define RDESETUPRDEHOLD_TRUE                     1
#define RDESETUPRDEHOLD_FALSE                    2

#define RDESETUPRDEREPLACE_TRUE                  1
#define RDESETUPRDEREPLACE_FALSE                 2

#define RDESETUPRESETONTESTENABLED_TRUE          1
#define RDESETUPRESETONTESTENABLED_FALSE         2

#define LLCCLPMOPERATIONALSTATE_DISABLED         0
#define LLCCLPMOPERATIONALSTATE_ENABLED          1

#define LLCCOPMOPERATIONALSTATE_DISABLED         0
#define LLCCOPMOPERATIONALSTATE_ENABLED          1

#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTION2PROTOCOLSTATE_DISCONNECTEDPHASE 0
#define LLCCONNECTION2PROTOCOLSTATE_LINKDICONNECTION_PHASE 1
#define LLCCONNECTION2PROTOCOLSTATE_LINK_SET_UP_PHASE 2
#define LLCCONNECTION2PROTOCOLSTATE_INFORMATION_TRANSFER_PHASE 3
#define LLCCONNECTION2PROTOCOLSTATE_FRAME_REJECT_CONDITION 4
#define LLCCONNECTION2PROTOCOLSTATE_BUSY_CONDITION 5
#define LLCCONNECTION2PROTOCOLSTATE_SENT_REJECT_CONDITION 6
#define LLCCONNECTION2PROTOCOLSTATE_SYSTEM_PARAMETERS_AND_ERROR_RECOVERY 7

#define LLCCONNECTION2ADMINISTRATIVESTATE_LOCKED 0
#define LLCCONNECTION2ADMINISTRATIVESTATE_UNLOCKED 1
#define LLCCONNECTION2ADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define LLCCONNECTION2OPERATIONALSTATE_DISABLED  0
#define LLCCONNECTION2OPERATIONALSTATE_ENABLED   1

#define LLCCONNECTION2USAGESTATE_IDLE            0
#define LLCCONNECTION2USAGESTATE_ACTIVE          1
#define LLCCONNECTION2USAGESTATE_BUSY            2

#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define LLCCONNECTION2PROCEDURALSTATUS_NOTINITIALIZED 1
#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZING 2
#define LLCCONNECTION2PROCEDURALSTATUS_REPORTING 3
#define LLCCONNECTION2PROCEDURALSTATUS_TERMINATING 4

#define LLCCONNECTION2ALARMSTATUS_UNDERREPAIR    0
#define LLCCONNECTION2ALARMSTATUS_CRITICAL       1
#define LLCCONNECTION2ALARMSTATUS_MAJOR          2
#define LLCCONNECTION2ALARMSTATUS_MINOR          3
#define LLCCONNECTION2ALARMSTATUS_ALARMOUTSTANDING 4

#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTIONLESSACKRECEIVERESOURCES_TRUE 1
#define LLCCONNECTIONLESSACKRECEIVERESOURCES_FALSE 2

#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_FALSE 2

/* function prototypes */
void init_llcMIB(void);
void deinit_llcMIB(void);
int term_llcMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_llcMIB;
void parse_llcMIB(const char *, char *);
SNMPCallback store_llcMIB;
void refresh_llcMIB(void);
FindVarMethod var_mACDLETable;
void parse_mACDLETable(const char *, char *);
SNMPCallback store_mACDLETable;
void refresh_mACDLETable(void);
FindVarMethod var_mACTable;
void parse_mACTable(const char *, char *);
SNMPCallback store_mACTable;
void refresh_mACTable(void);
FindVarMethod var_resourceTypeIdTable;
void parse_resourceTypeIdTable(const char *, char *);
SNMPCallback store_resourceTypeIdTable;
void refresh_resourceTypeIdTable(void);
FindVarMethod var_dLSAPTable;
void parse_dLSAPTable(const char *, char *);
SNMPCallback store_dLSAPTable;
void refresh_dLSAPTable(void);
FindVarMethod var_lLCDLETable;
void parse_lLCDLETable(const char *, char *);
SNMPCallback store_lLCDLETable;
void refresh_lLCDLETable(void);
FindVarMethod var_lLCStationTable;
void parse_lLCStationTable(const char *, char *);
SNMPCallback store_lLCStationTable;
void refresh_lLCStationTable(void);
FindVarMethod var_lLCSAPTable;
void parse_lLCSAPTable(const char *, char *);
SNMPCallback store_lLCSAPTable;
void refresh_lLCSAPTable(void);
FindVarMethod var_rDESetupTable;
void parse_rDESetupTable(const char *, char *);
SNMPCallback store_rDESetupTable;
void refresh_rDESetupTable(void);
FindVarMethod var_rDEPairTable;
void parse_rDEPairTable(const char *, char *);
SNMPCallback store_rDEPairTable;
void refresh_rDEPairTable(void);
FindVarMethod var_lLCCLPMTable;
void parse_lLCCLPMTable(const char *, char *);
SNMPCallback store_lLCCLPMTable;
void refresh_lLCCLPMTable(void);
FindVarMethod var_lLCConnectionLessTable;
void parse_lLCConnectionLessTable(const char *, char *);
SNMPCallback store_lLCConnectionLessTable;
void refresh_lLCConnectionLessTable(void);
FindVarMethod var_lLCCOPMTable;
void parse_lLCCOPMTable(const char *, char *);
SNMPCallback store_lLCCOPMTable;
void refresh_lLCCOPMTable(void);
FindVarMethod var_lLCConnection2Table;
void parse_lLCConnection2Table(const char *, char *);
SNMPCallback store_lLCConnection2Table;
void refresh_lLCConnection2Table(void);
FindVarMethod var_lLCConnection2IVMOTable;
void parse_lLCConnection2IVMOTable(const char *, char *);
SNMPCallback store_lLCConnection2IVMOTable;
void refresh_lLCConnection2IVMOTable(void);
FindVarMethod var_lLCConnectionlessAckTable;
void parse_lLCConnectionlessAckTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckTable;
void refresh_lLCConnectionlessAckTable(void);
FindVarMethod var_lLCConnectionlessAckIVMOTable;
void parse_lLCConnectionlessAckIVMOTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckIVMOTable;
void refresh_lLCConnectionlessAckIVMOTable(void);

WriteMethod write_mACDLELocalSapNames;
WriteMethod write_mACDLEProviderEntityNames;
WriteMethod write_mACDLERowStatus;
WriteMethod write_mACRowStatus;
WriteMethod write_dLSAPSap1Address;
WriteMethod write_dLSAPUserEntityNames;
WriteMethod write_dLSAPRowStatus;
WriteMethod write_lLCDLELocalSapNames;
WriteMethod write_lLCDLEProviderEntityNames;
WriteMethod write_lLCDLERowStatus;
WriteMethod write_lLCStationLLCName;
WriteMethod write_lLCStationSupportedServicesTypes;
WriteMethod write_lLCStationType1AcknowledgeTimeoutValue;
WriteMethod write_lLCStationType1MaximumRetryCount;
WriteMethod write_lLCStationMaximumPDUN3;
WriteMethod write_lLCStationMaximumRetransmissions4;
WriteMethod write_lLCStationReceiveVariableLifetime;
WriteMethod write_lLCStationTransmitVariableLifetime;
WriteMethod write_lLCStationType3AcknowledgeTimeoutValue;
WriteMethod write_lLCStationBufferSize;
WriteMethod write_lLCStationSTRIndicator;
WriteMethod write_lLCStationVersionNumber;
WriteMethod write_rDESetupAgingEnabled;
WriteMethod write_rDESetupAgingValue;
WriteMethod write_rDESetupEnableType2Reset;
WriteMethod write_rDESetupMaximumRouteDescriptors;
WriteMethod write_rDESetupMaximumResponseTime;
WriteMethod write_rDESetupMinimumPDUSize;
WriteMethod write_rDESetupRDEHold;
WriteMethod write_rDESetupRDEReplace;
WriteMethod write_rDESetupResetOnTestEnabled;
WriteMethod write_lLCCLPMRowStatus;
WriteMethod write_lLCConnectionlessName;
WriteMethod write_lLCConnectionlessMaximumLLCInformationFieldSize;
WriteMethod write_lLCCOPMRowStatus;
WriteMethod write_lLCConnection2Name;
WriteMethod write_lLCConnection2MaximumRetransmissions;
WriteMethod write_lLCConnection2ReceivedWindowSize;
WriteMethod write_lLCConnection2SendWindowSize;
WriteMethod write_lLCConnection2AcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2BusyStateTimeoutValue;
WriteMethod write_lLCConnection2PBitTimeoutValue;
WriteMethod write_lLCConnection2RejectTimeoutValue;
WriteMethod write_lLCConnection2RemoteBusy;
WriteMethod write_lLCConnection2RemoteReset;
WriteMethod write_lLCConnection2LocalReset;
WriteMethod write_lLCConnection2ProviderReset;
WriteMethod write_lLCConnection2Route;
WriteMethod write_lLCConnection2KStep;
WriteMethod write_lLCConnection2MaxSendWindowSize;
WriteMethod write_lLCConnection2SentAcks;
WriteMethod write_lLCConnection2ReceivedAcks;
WriteMethod write_lLCConnection2ReceivedFRMR;
WriteMethod write_lLCConnection2SentFRMR;
WriteMethod write_lLCConnection2ReceivedRR;
WriteMethod write_lLCConnection2SentRR;
WriteMethod write_lLCConnection2ReceivedRNR;
WriteMethod write_lLCConnection2SentRNR;
WriteMethod write_lLCConnection2ReceivedREJ;
WriteMethod write_lLCConnection2SentREJ;
WriteMethod write_lLCConnection2ReceivedSABME;
WriteMethod write_lLCConnection2SentSABME;
WriteMethod write_lLCConnection2ReceivedUA;
WriteMethod write_lLCConnection2SentUA;
WriteMethod write_lLCConnection2ReceivedDISC;
WriteMethod write_lLCConnection2SentDISC;
WriteMethod write_lLCConnection2ReceivedDM;
WriteMethod write_lLCConnection2SentDM;
WriteMethod write_lLCConnection2PDUsDiscarded1;
WriteMethod write_lLCConnection2PDUsDiscarded2;
WriteMethod write_lLCConnection2PDURetransmissions;
WriteMethod write_lLCConnection2OptionalTolerationIPDUs;
WriteMethod write_lLCConnection2DuplicateIPDUsReceived;
WriteMethod write_lLCConnection2Violation;
WriteMethod write_lLCConnection2AdministrativeState;
WriteMethod write_lLCConnection2AlarmStatus;
WriteMethod write_lLCConnection2IVMOMaximumRetransmissions;
WriteMethod write_lLCConnection2IVMOReceivedWindowSize;
WriteMethod write_lLCConnection2IVMOSendWindowSize;
WriteMethod write_lLCConnection2IVMOAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2IVMOBusyStateTimeoutValue;
WriteMethod write_lLCConnection2IVMOBitTimeoutValue;
WriteMethod write_lLCConnection2IVMORejectTimeoutValue;
WriteMethod write_lLCConnection2IVMORoute;
WriteMethod write_lLCConnection2IVMOKStep;
WriteMethod write_lLCConnection2IVMOMaxSendWindowSize;
WriteMethod write_lLCConnection2IVMOOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckReceiveResources;
WriteMethod write_lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckIVMOMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckIVMORowStatus;
WriteMethod write_lLCConnection2DefaultMaximumRetransmissions;
WriteMethod write_lLCConnection2DefaultReceivedWindowSize;
WriteMethod write_lLCConnection2DefaultSendWindowSize;
WriteMethod write_lLCConnection2DefaultAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2DefaultBusyStateTimeoutValue;
WriteMethod write_lLCConnection2DefaultPBitTimeoutValue;
WriteMethod write_lLCConnection2DefaultRejectTimeoutValue;
WriteMethod write_lLCConnection2DefaultRoute;
WriteMethod write_lLCConnection2DefaultKStep;
WriteMethod write_lLCConnection2DefaultMaxSendWindowSize;
WriteMethod write_lLCConnection2DefaultOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckDefaultMaximumRetransmissions;

#endif				/* __LOCAL_LLCMIB_H__ */
