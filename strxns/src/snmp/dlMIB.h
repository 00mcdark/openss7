/*****************************************************************************

 @(#) $Id: dlMIB.h,v 0.9.2.3 2009-01-02 15:04:23 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacom Limited <http://www.monavacom.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-01-02 15:04:23 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: dlMIB.h,v $
 Revision 0.9.2.3  2009-01-02 15:04:23  brian
 - updated agents

 Revision 0.9.2.2  2008-12-31 16:04:55  brian
 - updated mibs

 Revision 0.9.2.1  2008-12-27 15:42:07  brian
 - correct ignore file

 *****************************************************************************/

#ifndef __LOCAL_DLMIB_H__
#define __LOCAL_DLMIB_H__

#ident "@(#) $RCSfile: dlMIB.h,v $ $Name:  $($Revision: 0.9.2.3 $) Copyright (c) 2008-2009 Monavacom Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct dlMIB_data {
	uint dlMIB_request;
	long llcDiscontinuityTime;
	long sLPConnectionDefaultInterfaceType;
	long sLPConnectionDefaultK;
	long sLPConnectionDefaultN1;
	long sLPConnectionDefaultN2;
	long sLPConnectionDefaultSequenceModulus;
	long sLPConnectionDefaultT1Timer;
	long sLPConnectionDefaultT2Timer;
	long sLPConnectionDefaultT3Timer;
	long sLPConnectionDefaultT4Timer;
	long lLCConnection2DefaultMaximumRetransmissions;
	long lLCConnection2DefaultReceivedWindowSize;
	long lLCConnection2DefaultSendWindowSize;
	long lLCConnection2DefaultAcknowledgeTimeoutValue;
	long lLCConnection2DefaultBusyStateTimeoutValue;
	long lLCConnection2DefaultPBitTimeoutValue;
	long lLCConnection2DefaultRejectTimeoutValue;
	uint8_t *lLCConnection2DefaultRoute;
	size_t lLCConnection2DefaultRouteLen;
	long lLCConnection2DefaultKStep;
	long lLCConnection2DefaultMaxSendWindowSize;
	long lLCConnection2DefaultOptionalTolerationIPDUs;
	long lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckDefaultMaximumRetransmissions;
};
struct communicationsEntityTable_data {
	uint communicationsEntityTable_request;
	uint communicationsEntityTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	oid *communicationsEntityLocalSapNames;
	size_t communicationsEntityLocalSapNamesLen;
	long communicationsEntityOperationalState;
};
struct sap1Table_data {
	uint sap1Table_request;
	uint sap1Table_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	ulong sap1Address;
	oid *sap1UserEntityNames;
	size_t sap1UserEntityNamesLen;
};
struct sap2Table_data {
	uint sap2Table_request;
	uint sap2Table_refs;
	uint8_t *sapId;
	size_t sapIdLen;
	uint8_t *sap2Address;
	size_t sap2AddressLen;
	oid *sap2UserEntityNames;
	size_t sap2UserEntityNamesLen;
	oid *sap2ProviderEntityNames;
	size_t sap2ProviderEntityNamesLen;
};
struct clProtocolMachineTable_data {
	uint clProtocolMachineTable_request;
	uint clProtocolMachineTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	long clProtocolMachineOperationalState;
	long clProtocolMachineTotalRemoteSAPs;
};
struct coProtocolMachineTable_data {
	uint coProtocolMachineTable_request;
	uint coProtocolMachineTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long coProtocolMachineOperationalState;
};
struct singlePeerConnectionTable_data {
	uint singlePeerConnectionTable_request;
	uint singlePeerConnectionTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	oid *underlyingConnectionNames;
	size_t underlyingConnectionNamesLen;
	oid *suppportedConnectionNames;
	size_t suppportedConnectionNamesLen;
};
struct physicalEntityTable_data {
	uint physicalEntityTable_request;
	uint physicalEntityTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	oid *physicalEntityPhysicalEntityTitles;
	size_t physicalEntityPhysicalEntityTitlesLen;
};
struct physicalSAPTable_data {
	uint physicalSAPTable_request;
	uint physicalSAPTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	long physicalSAPRowStatus;
};
struct dataCircuitTable_data {
	uint dataCircuitTable_request;
	uint dataCircuitTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long dataCircuitBitErrorsReceived;
	long dataCircuitBitErrorsTransmitted;
	uint8_t *dataCircuitBitErrorsThreshold;
	size_t dataCircuitBitErrorsThresholdLen;
	long dataCircuitType;
	uint8_t *dataCircuitPhysicalMediaNames;
	size_t dataCircuitPhysicalMediaNamesLen;
	uint8_t *dataCircuitPhysicalInterfaceType;
	size_t dataCircuitPhysicalInterfaceTypeLen;
	uint8_t *dataCircuitPhysicalInterfaceStandard;
	size_t dataCircuitPhysicalInterfaceStandardLen;
	long dataCircuitSynchronizationMode;
	uint8_t *dataCircuitTransmissionCoding;
	size_t dataCircuitTransmissionCodingLen;
	long dataCircuitTransmissionMode;
	uint8_t *dataCircuitTransmissionRate;
	size_t dataCircuitTransmissionRateLen;
	long dataCircuitRowStatus;
};
struct physicalConnectionTable_data {
	uint physicalConnectionTable_request;
	uint physicalConnectionTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	uint8_t *physicalConnectionEndpointIdentifier;
	size_t physicalConnectionEndpointIdentifierLen;
	long physicalConnectionPortNumber;
	long physicalConnectionRowStatus;
};
struct datalinkEntityTable_data {
	uint datalinkEntityTable_request;
	uint datalinkEntityTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	oid *datalinkEntityProviderEntityNames;
	size_t datalinkEntityProviderEntityNamesLen;
	long datalinkEntityRowStatus;
};
struct dLSAPTable_data {
	uint dLSAPTable_request;
	uint dLSAPTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	long dLSAPRowStatus;
};
struct lAPBDLETable_data {
	uint lAPBDLETable_request;
	uint lAPBDLETable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	long lAPBDLEmT1Timer;
	long lAPBDLEmT3Timer;
	long lAPBDLEmW;
	long lAPBDLEmXSend;
	long lAPBDLEmXReceive;
	long lAPBDLEmT2Timer;
	long lAPBDLEreceivedMlpResets;
	long lAPBDLEtimesMT1Expired;
	long lAPBDLEIframesReassignments;
	long lAPBDLEmlpFramesReceived;
	long lAPBDLEmlpFramesSent;
	long lAPBDLEmlpFramesOutsideWindowGuard;
	long lAPBDLEreceivedMlpFramesInGuardRegion;
	long lAPBDLERowStatus;
};
struct sLPPMTable_data {
	uint sLPPMTable_request;
	uint sLPPMTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long sLPPMadministrativeState;
	long sLPPMRowStatus;
};
struct sLPConnectionTable_data {
	uint sLPConnectionTable_request;
	uint sLPConnectionTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	long sLPConnectionInterfaceType;
	long sLPConnectionK;
	long sLPConnectionN1;
	long sLPConnectionN2;
	long sLPConnectionSequenceModulus;
	long sLPConnectionT1Timer;
	long sLPConnectionT2Timer;
	long sLPConnectionFCSErrorsReceived;
	long sLPConnectionFRMRsReceived;
	long sLPConnectionFRMRsSent;
	long sLPConnectionIFrameDataOctetsReceived;
	long sLPConnectionIFrameDataOctetsSent;
	long sLPConnectionIFramesReceived;
	long sLPConnectionIFramesSent;
	long sLPConnectionPollsReceived;
	long sLPConnectionREJsReceived;
	long sLPConnectionREJsSent;
	long sLPConnectionRNRsReceived;
	long sLPConnectionRNRsSent;
	long sLPConnectionSABMsReceived;
	long sLPConnectionSABMsSent;
	long sLPConnectionProtocolState;
	long sLPConnectionTimesT1Expired;
	long sLPConnectionT3Timer;
	long sLPConnectionTimesT3Expired;
	long sLPConnectionT4Timer;
	long sLPConnectionTimesT4Expired;
	long sLPConnectionAbnormalLinkDisconnectsReceived;
	long sLPConnectionAbnormalLinkDisconnectsSent;
	long sLPConnectionLinkResetsReceived;
	long sLPConnectionLinkResetsSent;
	long sLPConnectionTimesN2Reached;
	long sLPConnectionAdministrativeState;
	long sLPConnectionOperationalState;
	long sLPConnectionUsageState;
	uint8_t *sLPConnectionProceduralStatus;
	size_t sLPConnectionProceduralStatusLen;
	uint8_t *sLPConnectionAlarmStatus;
	size_t sLPConnectionAlarmStatusLen;
	long sLPConnectionRowStatus;
};
struct sLPConnectionIVMOTable_data {
	uint sLPConnectionIVMOTable_request;
	uint sLPConnectionIVMOTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	uint8_t *sLPConnectionIVMOid;
	size_t sLPConnectionIVMOidLen;
	long sLPConnectionIVMOinterfaceType;
	long sLPConnectionIVMOk;
	long sLPConnectionIVMOn1;
	long sLPConnectionIVMOn2;
	long sLPConnectionIVMOsequenceModulus;
	long sLPConnectionIVMOt1Timer;
	long sLPConnectionIVMOt2Timer;
	long sLPConnectionIVMOt3Timer;
	long sLPConnectionIVMOt4Timer;
	long sLPConnectionIVMORowStatus;
};
struct mACDLETable_data {
	uint mACDLETable_request;
	uint mACDLETable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	long mACDLERowStatus;
};
struct mACTable_data {
	uint mACTable_request;
	uint mACTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	long mACOperationalState;
	uint8_t *mACId;
	size_t mACIdLen;
	long mACRowStatus;
};
struct lLCDLETable_data {
	uint lLCDLETable_request;
	uint lLCDLETable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	long lLCDLERowStatus;
};
struct lLCCLPMTable_data {
	uint lLCCLPMTable_request;
	uint lLCCLPMTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	long lLCCLPMRowStatus;
};
struct lLCCOPMTable_data {
	uint lLCCOPMTable_request;
	uint lLCCOPMTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long lLCCOPMRowStatus;
};
struct resourceTypeIdTable_data {
	uint resourceTypeIdTable_request;
	uint resourceTypeIdTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *resourceTypeIdName;
	size_t resourceTypeIdNameLen;
	uint8_t *resourceInfoManufacturerOUI;
	size_t resourceInfoManufacturerOUILen;
	uint8_t *resourceInfoManufacturerName;
	size_t resourceInfoManufacturerNameLen;
	uint8_t *resourceInfoManufacturerProductName;
	size_t resourceInfoManufacturerProductNameLen;
	uint8_t *resourceInfoManufacturerProductVersion;
	size_t resourceInfoManufacturerProductVersionLen;
};
struct lLCStationTable_data {
	uint lLCStationTable_request;
	uint lLCStationTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	uint8_t *lLCStationLLCName;
	size_t lLCStationLLCNameLen;
	long lLCStationMaximumLSAPsConfigured;
	long lLCStationNumberOfActiveLSAPs;
	uint8_t *lLCStationSupportedServicesTypes;
	size_t lLCStationSupportedServicesTypesLen;
	long lLCStationStatus;
	long lLCStationType1AcknowledgeTimeoutValue;
	long lLCStationType1MaximumRetryCount;
	long lLCStationMaximumPDUN3;
	long lLCStationMaximumRetransmissions4;
	long lLCStationReceiveVariableLifetime;
	long lLCStationTransmitVariableLifetime;
	long lLCStationType3AcknowledgeTimeoutValue;
	long lLCStationType3Retransmissions;
	long lLCStationAvgBufferUseSize;
	long lLCStationBufferProblems;
	long lLCStationBufferSize;
	long lLCStationMaxBufferUseSize;
	long lLCStationInactiveLSAP;
	long lLCStationPDUsDiscard;
	uint8_t *lLCStationSTRIndicator;
	size_t lLCStationSTRIndicatorLen;
	long lLCStationVersionNumber;
	long lLCStationType1AcknowledgmentTimerTimeouts;
};
struct lLCSAPTable_data {
	uint lLCSAPTable_request;
	uint lLCSAPTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	uint8_t *lLCSAPName;
	size_t lLCSAPNameLen;
	uint8_t *lLCSAPAddress;
	size_t lLCSAPAddressLen;
	long lLCSAPRDE;
};
struct rDESetupTable_data {
	uint rDESetupTable_request;
	uint rDESetupTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	long rDESetupAgingEnabled;
	long rDESetupAgingValue;
	long rDESetupEnableType2Reset;
	long rDESetupMaximumRouteDescriptors;
	long rDESetupMaximumResponseTime;
	long rDESetupMinimumPDUSize;
	long rDESetupRDEHold;
	long rDESetupRDEReplace;
	long rDESetupName;
	long rDESetupResetOnTestEnabled;
};
struct rDEPairTable_data {
	uint rDEPairTable_request;
	uint rDEPairTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *sapId;
	size_t sapIdLen;
	uint8_t *rDEPairName;
	size_t rDEPairNameLen;
	long rDEPairDiscardCounter;
	long rDEPairNSRPDUCounter;
	long rDEPairNSRSelectedCounter;
	uint8_t *rDEPairRIF;
	size_t rDEPairRIFLen;
	long rDEPairSRFPDUCounter;
	long rDEPairQueryCounter;
};
struct lLCConnectionLessTable_data {
	uint lLCConnectionLessTable_request;
	uint lLCConnectionLessTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *lLCConnectionlessName;
	size_t lLCConnectionlessNameLen;
	long lLCConnectionlessMaximumLLCInformationFieldSize;
	long lLCConnectionlessTESTReceivedABBResponse;
	long lLCConnectionlessTESTReceivedCommand;
	long lLCConnectionlessTESTReceivedResponse;
	long lLCConnectionlessTESTSentABBResponse;
	long lLCConnectionlessTESTSentCommand;
	long lLCConnectionlessTESTSentResponse;
	long lLCConnectionlessUIReceived;
	long lLCConnectionlessUISent;
	long lLCConnectionlessXIDReceivedCommand;
	long lLCConnectionlessXIDReceivedResponse;
	long lLCConnectionlessXIDSentCommand;
	long lLCConnectionlessXIDSentResponse;
};
struct lLCConnection2Table_data {
	uint lLCConnection2Table_request;
	uint lLCConnection2Table_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *lLCConnection2Name;
	size_t lLCConnection2NameLen;
	long lLCConnection2MaximumRetransmissions;
	long lLCConnection2ReceivedWindowSize;
	long lLCConnection2SendWindowSize;
	long lLCConnection2AcknowledgeTimeoutValue;
	long lLCConnection2BusyStateTimeoutValue;
	long lLCConnection2PBitTimeoutValue;
	long lLCConnection2RejectTimeoutValue;
	long lLCConnection2LocalBusy;
	long lLCConnection2RemoteBusy;
	long lLCConnection2RemoteReset;
	long lLCConnection2LocalReset;
	long lLCConnection2ProviderReset;
	uint8_t *lLCConnection2Route;
	size_t lLCConnection2RouteLen;
	long lLCConnection2KStep;
	long lLCConnection2MaxSendWindowSize;
	long lLCConnection2ReceivedI;
	long lLCConnection2SentI;
	long lLCConnection2SentAcks;
	long lLCConnection2ReceivedAcks;
	long lLCConnection2ReceivedFRMR;
	long lLCConnection2SentFRMR;
	long lLCConnection2ReceivedRR;
	long lLCConnection2SentRR;
	long lLCConnection2ReceivedRNR;
	long lLCConnection2SentRNR;
	long lLCConnection2ReceivedREJ;
	long lLCConnection2SentREJ;
	long lLCConnection2ReceivedSABME;
	long lLCConnection2SentSABME;
	long lLCConnection2ReceivedUA;
	long lLCConnection2SentUA;
	long lLCConnection2ReceivedDISC;
	long lLCConnection2SentDISC;
	long lLCConnection2ReceivedDM;
	long lLCConnection2SentDM;
	long lLCConnection2PDUsDiscarded1;
	long lLCConnection2PDUsDiscarded2;
	long lLCConnection2PDURetransmissions;
	long lLCConnection2OptionalTolerationIPDUs;
	long lLCConnection2DuplicateIPDUsReceived;
	long lLCConnection2Violation;
	long lLCConnection2ProtocolState;
	long lLCConnection2AdministrativeState;
	long lLCConnection2OperationalState;
	long lLCConnection2UsageState;
	uint8_t *lLCConnection2ProceduralStatus;
	size_t lLCConnection2ProceduralStatusLen;
	uint8_t *lLCConnection2AlarmStatus;
	size_t lLCConnection2AlarmStatusLen;
};
struct lLCConnection2IVMOTable_data {
	uint lLCConnection2IVMOTable_request;
	uint lLCConnection2IVMOTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	uint8_t *lLCConnection2IVMOName;
	size_t lLCConnection2IVMONameLen;
	ulong lLCConnection2IVMOMaximumRetransmissions;
	ulong lLCConnection2IVMOReceivedWindowSize;
	ulong lLCConnection2IVMOSendWindowSize;
	long lLCConnection2IVMOAcknowledgeTimeoutValue;
	long lLCConnection2IVMOBusyStateTimeoutValue;
	long lLCConnection2IVMOBitTimeoutValue;
	long lLCConnection2IVMORejectTimeoutValue;
	ulong lLCConnection2IVMORoute;
	ulong lLCConnection2IVMOKStep;
	ulong lLCConnection2IVMOMaxSendWindowSize;
	long lLCConnection2IVMOOptionalTolerationIPDUs;
};
struct lLCConnectionlessAckTable_data {
	uint lLCConnectionlessAckTable_request;
	uint lLCConnectionlessAckTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *lLCConnectionlessAckName;
	size_t lLCConnectionlessAckNameLen;
	long lLCConnectionlessAckMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckMaximumRetransmissions;
	long lLCConnectionlessAckTESTReceivedABBResponse;
	long lLCConnectionlessAckTESTReceivedCommand;
	long lLCConnectionlessAckTESTReceivedResponse;
	long lLCConnectionlessAckTESTSentABBResponse;
	long lLCConnectionlessAckTESTSentCommand;
	long lLCConnectionlessAckTESTSentResponse;
	long lLCConnectionlessAckReceiveResources;
	long lLCConnectionlessAckUIReceived;
	long lLCConnectionlessAckUISent;
	long lLCConnectionlessAckXIDReceivedCommand;
	long lLCConnectionlessAckXIDReceivedResponse;
	long lLCConnectionlessAckXIDSentCommand;
	long lLCConnectionlessAckXIDSentResponse;
	long lLCConnectionlessAckRetransmissions;
	long lLCConnectionlessAckNoResponse;
	long lLCConnectionlessAckCommandIP;
	long lLCConnectionlessAckCommandIT;
	long lLCConnectionlessAckCommandOK;
	long lLCConnectionlessAckCommandPE;
	long lLCConnectionlessAckCommandRS;
	long lLCConnectionlessAckCommandUE;
	long lLCConnectionlessAckCommandUN;
	long lLCConnectionlessAckReceivedACCommand;
	long lLCConnectionlessAckSentACCommand;
	long lLCConnectionlessAckResponseIP;
	long lLCConnectionlessAckResponseIT;
	long lLCConnectionlessAckResponseNE;
	long lLCConnectionlessAckResponseNR;
	long lLCConnectionlessAckResponseOK;
	long lLCConnectionlessAckResponseRS;
	long lLCConnectionlessAckResponseUE;
	long lLCConnectionlessAckResponseUN;
	long lLCConnectionlessAckViolation;
};
struct lLCConnectionlessAckIVMOTable_data {
	uint lLCConnectionlessAckIVMOTable_request;
	uint lLCConnectionlessAckIVMOTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *lLCConnectionlessAckIVMOName;
	size_t lLCConnectionlessAckIVMONameLen;
	long lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
	long lLCConnectionlessAckIVMOMaximumRetransmissions;
	long lLCConnectionlessAckIVMORowStatus;
};
struct networkEntityTable_data {
	uint networkEntityTable_request;
	uint networkEntityTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *networkEntityTitles;
	size_t networkEntityTitlesLen;
	uint8_t *networkEntitySystemTypes;
	size_t networkEntitySystemTypesLen;
	long networkEntityRowStatus;
};
struct nSAPTable_data {
	uint nSAPTable_request;
	uint nSAPTable_refs;
	uint8_t *sapId;
	size_t sapIdLen;
	long nSAPRowStatus;
};
struct cLNSTable_data {
	uint cLNSTable_request;
	uint cLNSTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	long cLNSAdministrativeState;
	uint8_t *cLNSSupportedProtocols;
	size_t cLNSSupportedProtocolsLen;
	uint8_t *cLNSOperationalSystemType;
	size_t cLNSOperationalSystemTypeLen;
	long cLNSOctetsSentCounter;
	long cLNSOctetsReceivedCounter;
	long cLNSSegmentsReceived;
	long cLNSSegmentsDiscarded;
	long cLNSAssemblingSegmentsDiscarded;
	long cLNSErrorReportsReceived;
	long cLNSpDUDiscards;
	long cLNSCongestionDiscards;
	long cLNSMaximumLifetime;
	long cLNSEnableChecksum;
	long cLNSRowStatus;
};
struct cLNSISISTable_data {
	uint cLNSISISTable_request;
	uint cLNSISISTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *cLNSISISversion;
	size_t cLNSISISversionLen;
	long cLNSISISiSType;
	uint8_t *cLNSISISsystemId;
	size_t cLNSISISsystemIdLen;
	long cLNSISISmaximumPathSplits;
	long cLNSISISminimumLSPTransmissionInterval;
	long cLNSISISmaximumLSPGenerationInterval;
	long cLNSISISminimumBroadcastLSPTransmissionInterval;
	long cLNSISIScompleteSNPInterval;
	long cLNSISISoriginatingL1LSPBufferSize;
	uint8_t *cLNSISISmanualAreaAddresses;
	size_t cLNSISISmanualAreaAddressesLen;
	long cLNSISISmaximumAreaAddresses;
	long cLNSISISminimumLSPGenerationInterval;
	long cLNSISISpollESHelloRate;
	long cLNSISISpartialSNPInterval;
	long cLNSISISwaitingTime;
	long cLNSISISdRISISHelloTimer;
	long cLNSISISl1State;
	uint8_t *cLNSISISareaAddresses;
	size_t cLNSISISareaAddressesLen;
	long cLNSISIScorruptedLSPsDetected;
	long cLNSISISlSPL1DatabaseOverloads;
	long cLNSISISmanualAddressesDroppedFromAreas;
	long cLNSISISattemptsToExceedMaximumSequenceNumber;
	long cLNSISISsequenceNumberSkips;
	long cLNSISISownLSPPurges;
	long cLNSISISiDFieldLengthMismatches;
	long cLNSISISmaximumAreaAddressesMismatches;
	long cLNSISISoriginatingLSPBufferSizeMismatches;
	long cLNSISISlSPTooLargeToPropagate;
	uint8_t *cLNSISISareaTransmitPassword;
	size_t cLNSISISareaTransmitPasswordLen;
	uint8_t *cLNSISISareaReceivePasswords;
	size_t cLNSISISareaReceivePasswordsLen;
	long cLNSISISauthenticationFailures;
	long cLNSISISRowStatus;
};
struct cLNSISISLevel2Table_data {
	uint cLNSISISLevel2Table_request;
	uint cLNSISISLevel2Table_refs;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long cLNSISISLevel2maximumVirtualAdjacencies;
	uint8_t *cLNSISISLevel2partitionAreaAddresses;
	size_t cLNSISISLevel2partitionAreaAddressesLen;
	uint8_t *cLNSISISLevel2partitionDesignatedL2IntermediateSystem;
	size_t cLNSISISLevel2partitionDesignatedL2IntermediateSystemLen;
	long cLNSISISLevel2partitionVirtualLinkChanges;
	long cLNSISISLevel2originatingL2LSPBufferSize;
	long cLNSISISLevel2l2State;
	long cLNSISISLevel2lSPL2DatabaseOverloads;
	uint8_t *cLNSISISLevel2domainTransmitPassword;
	size_t cLNSISISLevel2domainTransmitPasswordLen;
	uint8_t *cLNSISISLevel2domainReceivePasswords;
	size_t cLNSISISLevel2domainReceivePasswordsLen;
	long cLNSISISLevel2RowStatus;
};
struct linkageTable_data {
	uint linkageTable_request;
	uint linkageTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *protocolMachineId;
	size_t protocolMachineIdLen;
	uint8_t *linkageId;
	size_t linkageIdLen;
	long linkageOperationalState;
	long linkageAdministrativeState;
	uint8_t *linkageSnServiceProvider;
	size_t linkageSnServiceProviderLen;
	oid *linkageSnSAP;
	size_t linkageSnSAPLen;
	uint8_t *linkageOperationalProtocols;
	size_t linkageOperationalProtocolsLen;
	uint8_t *linkageISiSO9542OperationalSubsets;
	size_t linkageISiSO9542OperationalSubsetsLen;
	uint8_t *linkageISHoldingTimerMultiplier;
	size_t linkageISHoldingTimerMultiplierLen;
	uint8_t *linkageISISConfigurationTimer;
	size_t linkageISISConfigurationTimerLen;
	uint8_t *linkageISSuggestedEsConfigurationTimer;
	size_t linkageISSuggestedEsConfigurationTimerLen;
	uint8_t *linkageISRedirectHoldingTime;
	size_t linkageISRedirectHoldingTimeLen;
	long linkageISESReachabilityChanges;
	long linkageISInvalid9542PDUs;
	uint8_t *linkageESiSO9542OperationalSubsets;
	size_t linkageESiSO9542OperationalSubsetsLen;
	uint8_t *linkageESHoldingTimerMultiplier;
	size_t linkageESHoldingTimerMultiplierLen;
	uint8_t *linkageESManualISSNPAAddress;
	size_t linkageESManualISSNPAAddressLen;
	uint8_t *linkageESDefaultESConfigTimer;
	size_t linkageESDefaultESConfigTimerLen;
	uint8_t *linkageESActiveESConfigTimer;
	size_t linkageESActiveESConfigTimerLen;
	long linkageESISReachabilityChanges;
	long linkageESInvalid9542PDUs;
	long linkageEnableChecksum;
	uint8_t *linkageInitialMinimumTimer;
	size_t linkageInitialMinimumTimerLen;
	uint8_t *linkageReserveTimer;
	size_t linkageReserveTimerLen;
	uint8_t *linkageIdleTimer;
	size_t linkageIdleTimerLen;
	long linkageSNDCFCallsPlaced;
	long linkageSNDCFCallsFailed;
	long linkageCODLCallsPlaced;
	long linkageCODLCallsFailed;
	uint8_t *linkageISISType;
	size_t linkageISISTypeLen;
	uint8_t *linkageISISiSISHelloTimer;
	size_t linkageISISiSISHelloTimerLen;
	uint8_t *linkageISISl1DefaultMetric;
	size_t linkageISISl1DefaultMetricLen;
	uint8_t *linkageISISl1DelayMetric;
	size_t linkageISISl1DelayMetricLen;
	uint8_t *linkageISISl1ExpenseMetric;
	size_t linkageISISl1ExpenseMetricLen;
	uint8_t *linkageISISl1ErrorMetric;
	size_t linkageISISl1ErrorMetricLen;
	uint8_t *linkageISISexternalDomain;
	size_t linkageISISexternalDomainLen;
	long linkageISISchangedInAdjacencyState;
	long linkageISISinitialisationFailures;
	long linkageISISrejectedAdjacencies;
	long linkageISISiSISControlPDUsSent;
	long linkageISISiSISControlPDUsReceived;
	long linkageISISiDFieldLenthMismatches;
	long linkageISISmaximumAreaAddressesMismatches;
	uint8_t *linkageISIScircuitTransmitPassword;
	size_t linkageISIScircuitTransmitPasswordLen;
	uint8_t *linkageISIScircuitReceivedPasswords;
	size_t linkageISIScircuitReceivedPasswordsLen;
	long linkageISISauthenticationFailures;
	uint8_t *linkageISISl1IntermediateSystemPriority;
	size_t linkageISISl1IntermediateSystemPriorityLen;
	uint8_t *linkageISISl1CircuitID;
	size_t linkageISISl1CircuitIDLen;
	uint8_t *linkageISISl1DesignatedIntermediateSystem;
	size_t linkageISISl1DesignatedIntermediateSystemLen;
	long linkageISISlanL1DesignatedIntermediateSystemChanges;
	uint8_t *linkageISIScallEstablishmentDefaultMetricIncrement;
	size_t linkageISIScallEstablishmentDefaultMetricIncrementLen;
	uint8_t *linkageISIScallEstablishmentDelayMetricIncrement;
	size_t linkageISIScallEstablishmentDelayMetricIncrementLen;
	uint8_t *linkageISIScallEstablishmentExpenseMetricIncrement;
	size_t linkageISIScallEstablishmentExpenseMetricIncrementLen;
	uint8_t *linkageISIScallEstablishmentErrorMetricIncrement;
	size_t linkageISIScallEstablishmentErrorMetricIncrementLen;
	uint8_t *linkageISISptPtCircuitID;
	size_t linkageISISptPtCircuitIDLen;
	uint8_t *linkageISISoutgoingCallIVMO;
	size_t linkageISISoutgoingCallIVMOLen;
	uint8_t *linkageISISneighborSNPAAddress;
	size_t linkageISISneighborSNPAAddressLen;
	uint8_t *linkageISISl2DefaultMetric;
	size_t linkageISISl2DefaultMetricLen;
	uint8_t *linkageISISl2DelayMetric;
	size_t linkageISISl2DelayMetricLen;
	uint8_t *linkageISISl2ExpenseMetric;
	size_t linkageISISl2ExpenseMetricLen;
	uint8_t *linkageISISl2ErrorMetric;
	size_t linkageISISl2ErrorMetricLen;
	long linkageISISmanualL2OnlyMode;
	uint8_t *linkageISISl2IntermediateSystemPriority;
	size_t linkageISISl2IntermediateSystemPriorityLen;
	uint8_t *linkageISISl2CircuitID;
	size_t linkageISISl2CircuitIDLen;
	uint8_t *linkageISISl2DesignatedIntermediateSystem;
	size_t linkageISISl2DesignatedIntermediateSystemLen;
	long linkageISISlanL2DesignatedIntermediteSystemChanges;
	long linkageRowStatus;
};
struct cONSTable_data {
	uint cONSTable_request;
	uint cONSTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	long cONSAdministrativeState;
	uint8_t *cONSOperationalSystemType;
	size_t cONSOperationalSystemTypeLen;
	long cONSRowStatus;
};
struct networkConnectionTable_data {
	uint networkConnectionTable_request;
	uint networkConnectionTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *coProtocolMachineId;
	size_t coProtocolMachineIdLen;
	uint8_t *connectionId;
	size_t connectionIdLen;
	uint8_t *networkConnectionLocalNSAPMO;
	size_t networkConnectionLocalNSAPMOLen;
	uint8_t *networkConnectionRemoteNSAPAddress;
	size_t networkConnectionRemoteNSAPAddressLen;
	long networkConnectionRowStatus;
};
struct x25PLETable_data {
	uint x25PLETable_request;
	uint x25PLETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	long x25PLEoperationalState;
	long x25PLEadministrativeState;
	uint8_t *x25PLEprotocolVersionSupported;
	size_t x25PLEprotocolVersionSupportedLen;
	uint8_t *x25PLElocalDTEAddress;
	size_t x25PLElocalDTEAddressLen;
	long x25PLEMode;
	uint8_t *x25PLEdefaultThroughputClasses;
	size_t x25PLEdefaultThroughputClassesLen;
	uint8_t *x25PLEflowControlParameterNegotiation;
	size_t x25PLEflowControlParameterNegotiationLen;
	uint8_t *x25PLEdefaultPackageSizes;
	size_t x25PLEdefaultPackageSizesLen;
	uint8_t *x25PLEthroughputClassNegotiation;
	size_t x25PLEthroughputClassNegotiationLen;
	uint8_t *x25PLEsNserviceProvider;
	size_t x25PLEsNserviceProviderLen;
	uint8_t *x25PLEsNsAP;
	size_t x25PLEsNsAPLen;
	uint8_t *x25PElogicalChannelAssignments;
	size_t x25PElogicalChannelAssignmentsLen;
	long x25PLEinterfaceMode;
	uint8_t *x25PLEdefaultThroughputClass;
	size_t x25PLEdefaultThroughputClassLen;
	uint8_t *x25PLEflowControlNegotiationPermitted;
	size_t x25PLEflowControlNegotiationPermittedLen;
	long x25PLEcallDeflectionSubscription;
	uint8_t *x25PLEmaxActiveCircuits;
	size_t x25PLEmaxActiveCircuitsLen;
	uint8_t *x25PLErestartTime;
	size_t x25PLErestartTimeLen;
	uint8_t *x25PLEdefaultPacketSize;
	size_t x25PLEdefaultPacketSizeLen;
	uint8_t *x25PLEdefaultWindowSize;
	size_t x25PLEdefaultWindowSizeLen;
	uint8_t *x25PLEminimumRecallTimer;
	size_t x25PLEminimumRecallTimerLen;
	uint8_t *x25PLErestartCount;
	size_t x25PLErestartCountLen;
	uint8_t *x25PLEsN_ServiceProvider;
	size_t x25PLEsN_ServiceProviderLen;
	uint8_t *x25PLEsN_SA_P;
	size_t x25PLEsN_SA_PLen;
	uint8_t *x25PLElogicalChannelAssignments;
	size_t x25PLElogicalChannelAssignmentsLen;
	uint8_t *x25PLEpacketSequencing;
	size_t x25PLEpacketSequencingLen;
	uint8_t *x25PLEoctetsSentCounter;
	size_t x25PLEoctetsSentCounterLen;
	uint8_t *x25PLEoctetsReceivedCounter;
	size_t x25PLEoctetsReceivedCounterLen;
	uint8_t *x25PLEdataPacketsSent;
	size_t x25PLEdataPacketsSentLen;
	uint8_t *x25PLEdataPacketsReceived;
	size_t x25PLEdataPacketsReceivedLen;
	uint8_t *x25PLEcallAttempts;
	size_t x25PLEcallAttemptsLen;
	uint8_t *x25PLEcallsConnected;
	size_t x25PLEcallsConnectedLen;
	long x25PLEproviderInitiatedDisconnects;
	uint8_t *x25PLEcallTimeouts;
	size_t x25PLEcallTimeoutsLen;
	uint8_t *x25PLEclearTimeouts;
	size_t x25PLEclearTimeoutsLen;
	uint8_t *x25PLEremotelyInitiatedResets;
	size_t x25PLEremotelyInitiatedResetsLen;
	uint8_t *x25PLEdataRetransmissionTimerExpiries;
	size_t x25PLEdataRetransmissionTimerExpiriesLen;
	uint8_t *x25PLEproviderInitiatedResets;
	size_t x25PLEproviderInitiatedResetsLen;
	uint8_t *x25PLEresetTimeouts;
	size_t x25PLEresetTimeoutsLen;
	uint8_t *x25PLEremotelyInitiatedRestarts;
	size_t x25PLEremotelyInitiatedRestartsLen;
	uint8_t *x25PLErestartCountsExceeded;
	size_t x25PLErestartCountsExceededLen;
	uint8_t *x25PLEprotocolErrorsDetectedLocally;
	size_t x25PLEprotocolErrorsDetectedLocallyLen;
	uint8_t *x25PLEprotocolErrorsAccusedOf;
	size_t x25PLEprotocolErrorsAccusedOfLen;
	uint8_t *x25PLEcallEstablishmentRetryCountsExceeded;
	size_t x25PLEcallEstablishmentRetryCountsExceededLen;
	uint8_t *x25PLEclearCountsExceeded;
	size_t x25PLEclearCountsExceededLen;
	uint8_t *x25PLEpLEClientMOName;
	size_t x25PLEpLEClientMONameLen;
	uint8_t *x25PLEregistrationRequestTime;
	size_t x25PLEregistrationRequestTimeLen;
	uint8_t *x25PLEregistrationRequestCount;
	size_t x25PLEregistrationRequestCountLen;
	long x25PLEregistrationPermitted;
	long x25PLERowStatus;
};
struct x25PLE_DTETable_data {
	uint x25PLE_DTETable_request;
	uint x25PLE_DTETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	long x25PLE_DTEcallDeflectionSubscription;
	uint8_t *x25PLE_DTEcallRequestResponseTimer;
	size_t x25PLE_DTEcallRequestResponseTimerLen;
	uint8_t *x25PLE_DTEextendedPacketSequenceNumbering;
	size_t x25PLE_DTEextendedPacketSequenceNumberingLen;
	uint8_t *x25PLE_DTEmaxActiveCircuits;
	size_t x25PLE_DTEmaxActiveCircuitsLen;
	uint8_t *x25PLE_DTEminimumRecallTimer;
	size_t x25PLE_DTEminimumRecallTimerLen;
	uint8_t *x25PLE_DTEresetRequestResponseTimer;
	size_t x25PLE_DTEresetRequestResponseTimerLen;
	uint8_t *x25PLE_DTErestartRequestRetransmissionCount;
	size_t x25PLE_DTErestartRequestRetransmissionCountLen;
	uint8_t *x25PLE_DTErestartRequestResponseTimer;
	size_t x25PLE_DTErestartRequestResponseTimerLen;
	uint8_t *x25PLE_DTEclearRequestResponseTimer;
	size_t x25PLE_DTEclearRequestResponseTimerLen;
	uint8_t *x25PLE_DTEinterruptResponseTimer;
	size_t x25PLE_DTEinterruptResponseTimerLen;
	uint8_t *x25PLE_DTEresetRequestRetransmissionCount;
	size_t x25PLE_DTEresetRequestRetransmissionCountLen;
	uint8_t *x25PLE_DTEclearRequestRetransmissionCount;
	size_t x25PLE_DTEclearRequestRetransmissionCountLen;
	long x25PLE_DTEcallAttempts;
	long x25PLE_DTEprotocolErrorsDetectedLocally;
	long x25PLE_DTEprotocolErrorsAccusedOf;
	long x25PLE_DTEcallEstablishmentRetryCountsExceeded;
	long x25PLE_DTEoctetsReceivedCounter;
	long x25PLE_DTEoctetsSentCounter;
	long x25PLE_DTEcallTimeouts;
	long x25PLE_DTEcallsConnected;
	long x25PLE_DTEclearCountsExceeded;
	long x25PLE_DTEclearTimeouts;
	long x25PLE_DTEdataPacketsReceived;
	long x25PLE_DTEdataPacketsSent;
	long x25PLE_DTEdataRetransmissionTimerExpiries;
	long x25PLE_DTEproviderInitiatedResets;
	long x25PLE_DTEproviderInitiatedDisconnects;
	long x25PLE_DTEremotelyInitiatedResets;
	long x25PLE_DTEremotelyInitiatedRestarts;
	long x25PLE_DTEresetTimeouts;
	long x25PLE_DTErestartCountsExceeded;
	uint8_t *x25PLE_DTEwindowStatusTransmissionTimer;
	size_t x25PLE_DTEwindowStatusTransmissionTimerLen;
	uint8_t *x25PLE_DTEwindowRotationTimer;
	size_t x25PLE_DTEwindowRotationTimerLen;
	uint8_t *x25PLE_DTEdataPacketRetransmissionCount;
	size_t x25PLE_DTEdataPacketRetransmissionCountLen;
	uint8_t *x25PLE_DTErejectResponseTimer;
	size_t x25PLE_DTErejectResponseTimerLen;
	uint8_t *x25PLE_DTErejectRetransmissionCount;
	size_t x25PLE_DTErejectRetransmissionCountLen;
	uint8_t *x25PLE_DTEregistrationRequestResponseTimer;
	size_t x25PLE_DTEregistrationRequestResponseTimerLen;
	uint8_t *x25PLE_DTEregistrationRequestRetransmissionCount;
	size_t x25PLE_DTEregistrationRequestRetransmissionCountLen;
	long x25PLE_DTEregistrationPermitted;
};
struct x25PLE_DCETable_data {
	uint x25PLE_DCETable_request;
	uint x25PLE_DCETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	long x25PLE_DCEcallAttempts;
	long x25PLE_DCEcallsConnected;
	long x25PLE_DCEcUG;
	long x25PLE_DCEfastSelectAcceptance;
	long x25PLE_DCEincomingCallsBarred;
	long x25PLE_DCEoneWayLogicalChannelOutgoing;
	long x25PLE_DCEoutgoingCallsBarred;
	long x25PLE_DCEdataPacketsReceived;
	long x25PLE_DCEdataPacketsSent;
	long x25PLE_DCEinterruptPacketsReceived;
	long x25PLE_DCEinterruptPacketsSent;
	long x25PLE_DCEinterruptTimerExpiries;
	long x25PLE_DCEoctetsReceivedCounter;
	long x25PLE_DCEoctetsSentCounter;
	long x25PLE_DCEproviderInitiatedDisconnects;
	long x25PLE_DCEproviderInitiatedResets;
	long x25PLE_DCEremotelyInitiatedRestarts;
	long x25PLE_DCEremotelyInitiatedResets;
	long x25PLE_DCEresetTimeouts;
	long x25PLE_DCEx25SegmentsReceived;
	long x25PLE_DCEx25SegmentsSent;
	long x25PLE_DCEbilateralCUG;
	long x25PLE_DCEbilateralCUGWithOutgoingAccess;
	long x25PLE_DCEcallDeflectionSubscription;
	long x25PLE_DCEcallRedirection;
	long x25PLE_DCEchargingInformation;
	long x25PLE_DCEcUGWithIncomingAccess;
	long x25PLE_DCEcUGWithOutgoingAccess;
	long x25PLE_DCEdBitModification;
	uint8_t *x25PLE_DCEdefaultThroughputClassesAssignment;
	size_t x25PLE_DCEdefaultThroughputClassesAssignmentLen;
	uint8_t *x25PLE_DCEextendedPacketSequenceNumbering;
	size_t x25PLE_DCEextendedPacketSequenceNumberingLen;
	long x25PLE_DCEhuntGroup;
	long x25PLE_DCEincomingCallBarredWithinCUG;
	long x25PLE_DCElocalChargingPrevention;
	uint8_t *x25PLE_DCEnonStandardDefaultPacketSizes;
	size_t x25PLE_DCEnonStandardDefaultPacketSizesLen;
	uint8_t *x25PLE_DCEnonStandardDefaultWindowSizes;
	size_t x25PLE_DCEnonStandardDefaultWindowSizesLen;
	long x25PLE_DCEnUIOverride;
	long x25PLE_DCEnUISubscription;
	long x25PLE_DCEoneWayLogicalChannelIncoming;
	long x25PLE_DCEonlineFacilityRegistration;
	long x25PLE_DCEoutgoingCallBarredWithinCUG;
	long x25PLE_DCEpacketRetransmission;
	long x25PLE_DCEreverseChargingAcceptance;
	long x25PLE_DCErOASubscription;
	long x25PLE_DCEclearIndication;
	uint8_t *x25PLE_DCEincomingCall;
	size_t x25PLE_DCEincomingCallLen;
	uint8_t *x25PLE_DCEresetIndication;
	size_t x25PLE_DCEresetIndicationLen;
	uint8_t *x25PLE_DCErestartIndication;
	size_t x25PLE_DCErestartIndicationLen;
};
struct x25PLEIVMOTable_data {
	uint x25PLEIVMOTable_request;
	uint x25PLEIVMOTable_refs;
	uint8_t *x25PLEIVMOId;
	size_t x25PLEIVMOIdLen;
	uint8_t *x25PLEIVMOlocalDTEAddress;
	size_t x25PLEIVMOlocalDTEAddressLen;
	uint8_t *x25PLEIVMOlogicalChannelAssignments;
	size_t x25PLEIVMOlogicalChannelAssignmentsLen;
	uint8_t *x25PLEIVMOsN_ServiceProvider;
	size_t x25PLEIVMOsN_ServiceProviderLen;
	uint8_t *x25PLEIVMOdefaultPacketSizes;
	size_t x25PLEIVMOdefaultPacketSizesLen;
	uint8_t *x25PLEIVMOdefaultThroughputClasses;
	size_t x25PLEIVMOdefaultThroughputClassesLen;
	uint8_t *x25PLEIVMOdefaultWindowSizes;
	size_t x25PLEIVMOdefaultWindowSizesLen;
	uint8_t *x25PLEIVMOflowControlParameterNegotiation;
	size_t x25PLEIVMOflowControlParameterNegotiationLen;
	uint8_t *x25PLEIVMOthroughputClassNegotiation;
	size_t x25PLEIVMOthroughputClassNegotiationLen;
	uint8_t *x25PLEIVMOx25PLEMode;
	size_t x25PLEIVMOx25PLEModeLen;
	long x25PLEIVMOinterfaceMode;
	uint8_t *x25PLEIVMOdefaultThroughputClass;
	size_t x25PLEIVMOdefaultThroughputClassLen;
	uint8_t *x25PLEIVMOflowControlNegotiationPermitted;
	size_t x25PLEIVMOflowControlNegotiationPermittedLen;
	long x25PLEIVMOcallDeflectionSubscription;
	uint8_t *x25PLEIVMOmaxActiveCircuits;
	size_t x25PLEIVMOmaxActiveCircuitsLen;
	uint8_t *x25PLEIVMOrestartTime;
	size_t x25PLEIVMOrestartTimeLen;
	uint8_t *x25PLEIVMOdefaultPacketSize;
	size_t x25PLEIVMOdefaultPacketSizeLen;
	uint8_t *x25PLEIVMOdefaultWindowSize;
	size_t x25PLEIVMOdefaultWindowSizeLen;
	uint8_t *x25PLEIVMOminimumRecallTimer;
	size_t x25PLEIVMOminimumRecallTimerLen;
	uint8_t *x25PLEIVMOrestartCount;
	size_t x25PLEIVMOrestartCountLen;
	uint8_t *x25PLEIVMOpacketSequencing;
	size_t x25PLEIVMOpacketSequencingLen;
	uint8_t *x25PLEIVMOregistrationRequestTime;
	size_t x25PLEIVMOregistrationRequestTimeLen;
	uint8_t *x25PLEIVMOregistrationRequestCount;
	size_t x25PLEIVMOregistrationRequestCountLen;
	long x25PLEIVMOregistrationPermitted;
	long x25PLEIVMORowStatus;
};
struct x25PLEIVMO_DTETable_data {
	uint x25PLEIVMO_DTETable_request;
	uint x25PLEIVMO_DTETable_refs;
	uint8_t *x25PLEIVMOId;
	size_t x25PLEIVMOIdLen;
	long x25PLEIVMO_DTEcallDeflectionSubscription;
	uint8_t *x25PLEIVMO_DTEcallRequestResponseTimer;
	size_t x25PLEIVMO_DTEcallRequestResponseTimerLen;
	uint8_t *x25PLEIVMO_DTEextendedPacketSequenceNumbering;
	size_t x25PLEIVMO_DTEextendedPacketSequenceNumberingLen;
	uint8_t *x25PLEIVMO_DTEmaxActiveCircuits;
	size_t x25PLEIVMO_DTEmaxActiveCircuitsLen;
	uint8_t *x25PLEIVMO_DTEminimumRecallTimer;
	size_t x25PLEIVMO_DTEminimumRecallTimerLen;
	uint8_t *x25PLEIVMO_DTEresetRequestResponseTimer;
	size_t x25PLEIVMO_DTEresetRequestResponseTimerLen;
	uint8_t *x25PLEIVMO_DTErestartRequestRetransmissionCount;
	size_t x25PLEIVMO_DTErestartRequestRetransmissionCountLen;
	uint8_t *x25PLEIVMO_DTErestartRequestResponseTimer;
	size_t x25PLEIVMO_DTErestartRequestResponseTimerLen;
	uint8_t *x25PLEIVMO_DTEclearRequestResponseTimer;
	size_t x25PLEIVMO_DTEclearRequestResponseTimerLen;
	uint8_t *x25PLEIVMO_DTEinterruptResponseTimer;
	size_t x25PLEIVMO_DTEinterruptResponseTimerLen;
	uint8_t *x25PLEIVMO_DTEresetRequestRetransmissionCount;
	size_t x25PLEIVMO_DTEresetRequestRetransmissionCountLen;
	uint8_t *x25PLEIVMO_DTEclearRequestRetransmissionCount;
	size_t x25PLEIVMO_DTEclearRequestRetransmissionCountLen;
	uint8_t *x25PLEIVMO_DTEcallAttempts;
	size_t x25PLEIVMO_DTEcallAttemptsLen;
	uint8_t *x25PLEIVMO_DTEprotocolErrorsDetectedLocally;
	size_t x25PLEIVMO_DTEprotocolErrorsDetectedLocallyLen;
	uint8_t *x25PLEIVMO_DTEprotocolErrorsAccusedOf;
	size_t x25PLEIVMO_DTEprotocolErrorsAccusedOfLen;
	uint8_t *x25PLEIVMO_DTEcallEstablishmentRetryCountsExceeded;
	size_t x25PLEIVMO_DTEcallEstablishmentRetryCountsExceededLen;
	long x25PLEIVMO_DTEoctetsReceivedCounter;
	long x25PLEIVMO_DTEoctetsSentCounter;
	long x25PLEIVMO_DTEcallTimeouts;
	long x25PLEIVMO_DTEcallsConnected;
	long x25PLEIVMO_DTEclearCountsExceeded;
	long x25PLEIVMO_DTEclearTimeouts;
	long x25PLEIVMO_DTEdataPacketsReceived;
	long x25PLEIVMO_DTEdataPacketsSent;
	long x25PLEIVMO_DTEdataRetransmissionTimerExpiries;
	long x25PLEIVMO_DTEproviderInitiatedResets;
	long x25PLEIVMO_DTEproviderInitiatedDisconnects;
	long x25PLEIVMO_DTEremotelyInitiatedResets;
	long x25PLEIVMO_DTEremotelyInitiatedRestarts;
	long x25PLEIVMO_DTEresetTimeouts;
	long x25PLEIVMO_DTErestartCountsExceeded;
	uint8_t *x25PLEIVMO_DTEwindowStatusTransmissionTimer;
	size_t x25PLEIVMO_DTEwindowStatusTransmissionTimerLen;
	uint8_t *x25PLEIVMO_DTEwindowRotationTimer;
	size_t x25PLEIVMO_DTEwindowRotationTimerLen;
	uint8_t *x25PLEIVMO_DTEdataPacketRetransmissionCount;
	size_t x25PLEIVMO_DTEdataPacketRetransmissionCountLen;
	uint8_t *x25PLEIVMO_DTErejectResponseTimer;
	size_t x25PLEIVMO_DTErejectResponseTimerLen;
	uint8_t *x25PLEIVMO_DTErejectRetransmissionCount;
	size_t x25PLEIVMO_DTErejectRetransmissionCountLen;
	uint8_t *x25PLEIVMO_DTEregistrationRequestResponseTimer;
	size_t x25PLEIVMO_DTEregistrationRequestResponseTimerLen;
	uint8_t *x25PLEIVMO_DTEregistrationRequestRetransmissionCount;
	size_t x25PLEIVMO_DTEregistrationRequestRetransmissionCountLen;
	long x25PLEIVMO_DTEregistrationPermitted;
	long x25PLEIVMO_DTERowStatus;
};
struct x25PLEIVMO_DCETable_data {
	uint x25PLEIVMO_DCETable_request;
	uint x25PLEIVMO_DCETable_refs;
	uint8_t *x25PLEIVMOId;
	size_t x25PLEIVMOIdLen;
	long x25PLEIVMO_DCERowStatus;
};
struct virtualCallTable_data {
	uint virtualCallTable_request;
	uint virtualCallTable_refs;
	uint8_t *virtualCallId;
	size_t virtualCallIdLen;
	uint8_t *virtualCallChannel;
	size_t virtualCallChannelLen;
	uint8_t *virtualCallPacketSize;
	size_t virtualCallPacketSizeLen;
	uint8_t *virtualCallWindowSize;
	size_t virtualCallWindowSizeLen;
	uint8_t *virtualCallOctetsSentCounter;
	size_t virtualCallOctetsSentCounterLen;
	uint8_t *virtualCallOctetsReceivedCounter;
	size_t virtualCallOctetsReceivedCounterLen;
	uint8_t *virtualCallDataPacketsSent;
	size_t virtualCallDataPacketsSentLen;
	uint8_t *virtualCallDataPacketsReceived;
	size_t virtualCallDataPacketsReceivedLen;
	uint8_t *virtualCallRemotelyInitiatedResets;
	size_t virtualCallRemotelyInitiatedResetsLen;
	uint8_t *virtualCallDataRetransmissionTimerExpiries;
	size_t virtualCallDataRetransmissionTimerExpiriesLen;
	uint8_t *virtualCallProviderInitiatedResets;
	size_t virtualCallProviderInitiatedResetsLen;
	uint8_t *virtualCallResetTimeouts;
	size_t virtualCallResetTimeoutsLen;
	uint8_t *virtualCallInterruptPacketsSent;
	size_t virtualCallInterruptPacketsSentLen;
	uint8_t *virtualCallInterruptPacketsReceived;
	size_t virtualCallInterruptPacketsReceivedLen;
	uint8_t *virtualCallInterruptTimerExpiries;
	size_t virtualCallInterruptTimerExpiriesLen;
};
struct virtualCircuitTable_data {
	uint virtualCircuitTable_request;
	uint virtualCircuitTable_refs;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *virtualCircuitLogicalChannel;
	size_t virtualCircuitLogicalChannelLen;
	uint8_t *virtualCircuitPacketSizes;
	size_t virtualCircuitPacketSizesLen;
	uint8_t *virtualCircuitThroughputClasses;
	size_t virtualCircuitThroughputClassesLen;
	uint8_t *virtualCircuitWindowSizes;
	size_t virtualCircuitWindowSizesLen;
};
struct virtualCircuit_DTETable_data {
	uint virtualCircuit_DTETable_request;
	uint virtualCircuit_DTETable_refs;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	long virtualCircuit_DTEoctetsSentCounter;
	long virtualCircuit_DTEoctetsReceivedCounter;
	long virtualCircuit_DTEdataPacketsReceived;
	long virtualCircuit_DTEdataPacketsSent;
	long virtualCircuit_DTEdataRetransmissionTimerExpiries;
	long virtualCircuit_DTEinterruptPacketsReceived;
	long virtualCircuit_DTEinterruptPacketsSent;
	long virtualCircuit_DTEinterruptTimerExpiries;
	long virtualCircuit_DTEproviderInitiatedResets;
	long virtualCircuit_DTEremotelyInitiatedResets;
	long virtualCircuit_DTEresetTimeouts;
};
struct virtualCircuit_DCETable_data {
	uint virtualCircuit_DCETable_request;
	uint virtualCircuit_DCETable_refs;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	long virtualCircuit_DCEdataPacketsReceived;
	long virtualCircuit_DCEdataPacketsSent;
	long virtualCircuit_DCEinterruptPacketsReceived;
	long virtualCircuit_DCEinterruptPacketsSent;
	long virtualCircuit_DCEinterruptTimerExpiries;
	long virtualCircuit_DCEoctetsReceivedCounter;
	long virtualCircuit_DCEoctetsSentCounter;
	long virtualCircuit_DCEproviderInitiatedDisconnects;
	long virtualCircuit_DCEproviderInitiatedResets;
	long virtualCircuit_DCEremotelyInitiatedRestarts;
	long virtualCircuit_DCEremotelyInitiatedResets;
	long virtualCircuit_DCEresetTimeouts;
	long virtualCircuit_DCEx25SegmentsReceived;
	long virtualCircuit_DCEx25SegmentsSent;
};
struct permanentVirtualCircuitTable_data {
	uint permanentVirtualCircuitTable_request;
	uint permanentVirtualCircuitTable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCallId;
	size_t virtualCallIdLen;
	uint8_t *permanentVirtualCircuitChannel;
	size_t permanentVirtualCircuitChannelLen;
	long permanentVirtualCircuitRowStatus;
};
struct permanentVirtualCircuit_DTETable_data {
	uint permanentVirtualCircuit_DTETable_request;
	uint permanentVirtualCircuit_DTETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *permanentVirtualCircuit_DTElogicalChannel;
	size_t permanentVirtualCircuit_DTElogicalChannelLen;
	uint8_t *permanentVirtualCircuit_DTEpacketSizes;
	size_t permanentVirtualCircuit_DTEpacketSizesLen;
	uint8_t *permanentVirtualCircuit_DTEthroughputClasses;
	size_t permanentVirtualCircuit_DTEthroughputClassesLen;
	uint8_t *permanentVirtualCircuit_DTEwindowSizes;
	size_t permanentVirtualCircuit_DTEwindowSizesLen;
	long permanentVirtualCircuit_DTERowStatus;
};
struct permanentVirtualCircuit_DCETable_data {
	uint permanentVirtualCircuit_DCETable_request;
	uint permanentVirtualCircuit_DCETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *permanentVirtualCircuit_DCEchargingDirection;
	size_t permanentVirtualCircuit_DCEchargingDirectionLen;
	uint8_t *permanentVirtualCircuit_DCElogicalChannel;
	size_t permanentVirtualCircuit_DCElogicalChannelLen;
	uint8_t *permanentVirtualCircuit_DCEpacketSizes;
	size_t permanentVirtualCircuit_DCEpacketSizesLen;
	uint8_t *permanentVirtualCircuit_DCEthroughputClasses;
	size_t permanentVirtualCircuit_DCEthroughputClassesLen;
	uint8_t *permanentVirtualCircuit_DCEwindowSizes;
	size_t permanentVirtualCircuit_DCEwindowSizesLen;
	long permanentVirtualCircuit_DCEoperationalState;
	uint8_t *permanentVirtualCircuit_DCEremoteDTEAddress;
	size_t permanentVirtualCircuit_DCEremoteDTEAddressLen;
	uint8_t *permanentVirtualCircuit_DCEremoteLogicalChannel;
	size_t permanentVirtualCircuit_DCEremoteLogicalChannelLen;
	long permanentVirtualCircuit_DCERowStatus;
};
struct virtualCallIVMOTable_data {
	uint virtualCallIVMOTable_request;
	uint virtualCallIVMOTable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCallIVMOId;
	size_t virtualCallIVMOIdLen;
	long virtualCallIVMOfastSelect;
	uint8_t *virtualCallIVMOpacketSizes;
	size_t virtualCallIVMOpacketSizesLen;
	uint8_t *virtualCallIVMOreverseCharging;
	size_t virtualCallIVMOreverseChargingLen;
	uint8_t *virtualCallIVMOthroughputClasses;
	size_t virtualCallIVMOthroughputClassesLen;
	uint8_t *virtualCallIVMOwindowSizes;
	size_t virtualCallIVMOwindowSizesLen;
	uint8_t *virtualCallIVMOproposedPacketSize;
	size_t virtualCallIVMOproposedPacketSizeLen;
	uint8_t *virtualCallIVMOproposedWindowSize;
	size_t virtualCallIVMOproposedWindowSizeLen;
	uint8_t *virtualCallIVMOacceptReverseCharging;
	size_t virtualCallIVMOacceptReverseChargingLen;
	uint8_t *virtualCallIVMOproposeReverseCharging;
	size_t virtualCallIVMOproposeReverseChargingLen;
	uint8_t *virtualCallIVMOcallTime;
	size_t virtualCallIVMOcallTimeLen;
	uint8_t *virtualCallIVMOresetTime;
	size_t virtualCallIVMOresetTimeLen;
	uint8_t *virtualCallIVMOclearTime;
	size_t virtualCallIVMOclearTimeLen;
	uint8_t *virtualCallIVMOinterruptTime;
	size_t virtualCallIVMOinterruptTimeLen;
	uint8_t *virtualCallIVMOresetCount;
	size_t virtualCallIVMOresetCountLen;
	uint8_t *virtualCallIVMOclearCount;
	size_t virtualCallIVMOclearCountLen;
	uint8_t *virtualCallIVMOwindowTime;
	size_t virtualCallIVMOwindowTimeLen;
	uint8_t *virtualCallIVMOdataRetransmissionTime;
	size_t virtualCallIVMOdataRetransmissionTimeLen;
	uint8_t *virtualCallIVMOdataRetransmissionCount;
	size_t virtualCallIVMOdataRetransmissionCountLen;
	uint8_t *virtualCallIVMOrejectTime;
	size_t virtualCallIVMOrejectTimeLen;
	uint8_t *virtualCallIVMOrejectCount;
	size_t virtualCallIVMOrejectCountLen;
	long virtualCallIVMORowStatus;
};
struct switchedVirtualCallTable_data {
	uint switchedVirtualCallTable_request;
	uint switchedVirtualCallTable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCallId;
	size_t virtualCallIdLen;
	uint8_t *switchedVirtualCalldirection;
	size_t switchedVirtualCalldirectionLen;
	uint8_t *switchedVirtualCallremoteDTEAddress;
	size_t switchedVirtualCallremoteDTEAddressLen;
	uint8_t *switchedVirtualCallthroughputClass;
	size_t switchedVirtualCallthroughputClassLen;
	uint8_t *switchedVirtualCallredirectReason;
	size_t switchedVirtualCallredirectReasonLen;
	uint8_t *switchedVirtualCalloriginallyCalledAddress;
	size_t switchedVirtualCalloriginallyCalledAddressLen;
	uint8_t *switchedVirtualCallcallingAddressExtension;
	size_t switchedVirtualCallcallingAddressExtensionLen;
	uint8_t *switchedVirtualCallcalledAddressExtension;
	size_t switchedVirtualCallcalledAddressExtensionLen;
	long switchedVirtualCallRowStatus;
};
struct virtualCall_DTETable_data {
	uint virtualCall_DTETable_request;
	uint virtualCall_DTETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *virtualCall_DTEcallingAddressExtension;
	size_t virtualCall_DTEcallingAddressExtensionLen;
	uint8_t *virtualCall_DTEcalledAddressExtension;
	size_t virtualCall_DTEcalledAddressExtensionLen;
	uint8_t *virtualCall_DTEdirection;
	size_t virtualCall_DTEdirectionLen;
	long virtualCall_DTEfastSelect;
	uint8_t *virtualCall_DTEoriginallyCalledAddress;
	size_t virtualCall_DTEoriginallyCalledAddressLen;
	uint8_t *virtualCall_DTEredirectReason;
	size_t virtualCall_DTEredirectReasonLen;
	uint8_t *virtualCall_DTEremoteDTEAddress;
	size_t virtualCall_DTEremoteDTEAddressLen;
	uint8_t *virtualCall_DTEreverseCharging;
	size_t virtualCall_DTEreverseChargingLen;
	long virtualCall_DTERowStatus;
};
struct virtualCall_DCETable_data {
	uint virtualCall_DCETable_request;
	uint virtualCall_DCETable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *virtualCall_DCEchargingDirection;
	size_t virtualCall_DCEchargingDirectionLen;
	uint8_t *virtualCall_DCEcUGSelection;
	size_t virtualCall_DCEcUGSelectionLen;
	uint8_t *virtualCall_DCEdirection;
	size_t virtualCall_DCEdirectionLen;
	long virtualCall_DCEfastSelect;
	uint8_t *virtualCall_DCEremoteDTEAddress;
	size_t virtualCall_DCEremoteDTEAddressLen;
	uint8_t *virtualCall_DCEtransitDelaySelectionAndIndication;
	size_t virtualCall_DCEtransitDelaySelectionAndIndicationLen;
	uint8_t *virtualCall_DCEbilateralCUGSelection;
	size_t virtualCall_DCEbilateralCUGSelectionLen;
	long virtualCall_DCEcallRedirectionDeflectionNotification;
	long virtualCall_DCEcalledLineAddressModifiedNotification;
	uint8_t *virtualCall_DCEcUGWithOutgoingAccessSelection;
	size_t virtualCall_DCEcUGWithOutgoingAccessSelectionLen;
	uint8_t *virtualCall_DCEnUISelection;
	size_t virtualCall_DCEnUISelectionLen;
	uint8_t *virtualCall_DCEreverseCharging;
	size_t virtualCall_DCEreverseChargingLen;
	uint8_t *virtualCall_DCErOASelection;
	size_t virtualCall_DCErOASelectionLen;
	long virtualCall_DCERowStatus;
};
struct dSeriesCountsTable_data {
	uint dSeriesCountsTable_request;
	uint dSeriesCountsTable_refs;
	uint8_t *x25PLEId;
	size_t x25PLEIdLen;
	uint8_t *virtualCircuitId;
	size_t virtualCircuitIdLen;
	uint8_t *dSeriesId;
	size_t dSeriesIdLen;
	long dSeriesResetRequestIndicationPackets;
	long dSeriesSegmentsSent;
	long dSeriesSegmentsReceived;
	long dSeriesRowStatus;
};
struct adjacencyTable_data {
	uint adjacencyTable_request;
	uint adjacencyTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *linkageId;
	size_t linkageIdLen;
	uint8_t *adjacencyId;
	size_t adjacencyIdLen;
	long adjacencyState;
	uint8_t *neighbourSNPAAddress;
	size_t neighbourSNPAAddressLen;
	long neighbourSystemType;
	uint8_t *neighbourSystemIds;
	size_t neighbourSystemIdsLen;
	long adjacencyUsage;
	uint8_t *areaAddressesOfNeighbour;
	size_t areaAddressesOfNeighbourLen;
	long holdingTimer;
	long priorityOfNeighbour;
	long adjacencyRowStatus;
};
struct virtualAdjacencyTable_data {
	uint virtualAdjacencyTable_request;
	uint virtualAdjacencyTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *virtualAdjacencyNetworkEntityTitle;
	size_t virtualAdjacencyNetworkEntityTitleLen;
	long virtualAdjacencyMetric;
};
struct destinationTable_data {
	uint destinationTable_request;
	uint destinationTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *destinationAddressPrefix;
	size_t destinationAddressPrefixLen;
	long destinationDefaultMetricPathCost;
	uint8_t *destinationDefaultMetricOutputAdjacencies;
	size_t destinationDefaultMetricOutputAdjacenciesLen;
	long destinationDelayMetricPathCost;
	uint8_t *destinationDelayMetricOutputAdjacencies;
	size_t destinationDelayMetricOutputAdjacenciesLen;
	long destinationExpenseMetricPathCost;
	uint8_t *destinationExpenseMetricOutputAdjacencies;
	size_t destinationExpenseMetricOutputAdjacenciesLen;
	long destinationErrorMetricPathCost;
	uint8_t *destinationErrorMetricOutputAdjacencies;
	size_t destinationErrorMetricOutputAdjacenciesLen;
};
struct destinationSystemTable_data {
	uint destinationSystemTable_request;
	uint destinationSystemTable_refs;
	uint8_t *communicationsEntityId;
	size_t communicationsEntityIdLen;
	uint8_t *clProtocolMachineId;
	size_t clProtocolMachineIdLen;
	uint8_t *destinationSystemNetworkEntityTitle;
	size_t destinationSystemNetworkEntityTitleLen;
	long destinationSystemMetricType;
	long desintationSystemMetric;
	oid *destinationSystemAdjacency;
	size_t destinationSystemAdjacencyLen;
};
struct destinationAreaTable_data {
	uint destinationAreaTable_request;
	uint destinationAreaTable_refs;
	uint8_t *destinationAreaId;
	size_t destinationAreaIdLen;
};
struct reachableAddressTable_data {
	uint reachableAddressTable_request;
	uint reachableAddressTable_refs;
	uint8_t *reachableAddressId;
	size_t reachableAddressIdLen;
	uint8_t *reachableAddressPrefix;
	size_t reachableAddressPrefixLen;
	long reachableAddressMappingType;
	long reachableAddressDefaultMetric;
	long reachableAddressDelayMetric;
	long reachableAddressExpenseMetric;
	long reachableAddressErrorMetric;
	long reachableAddressDefaultMetricType;
	long reachableAddressDelayMetricType;
	long reachableAddressExpenseMetricType;
	long reachableAddressErrorMetricType;
	long reachableAddressOperationalState;
	long reachableAddressAdministrativeState;
	uint8_t *reachableAddressSNPAAddresses;
	size_t reachableAddressSNPAAddressesLen;
	uint8_t *reachableAddressSNPAMask;
	size_t reachableAddressSNPAMaskLen;
	uint8_t *reachableAddressSNPAPrefix;
	size_t reachableAddressSNPAPrefixLen;
	long reachableAddressRowStatus;
};

/* storage declarations */
extern struct dlMIB_data *dlMIBStorage;
extern struct header_complex_index *communicationsEntityTableStorage;
extern struct header_complex_index *sap1TableStorage;
extern struct header_complex_index *sap2TableStorage;
extern struct header_complex_index *clProtocolMachineTableStorage;
extern struct header_complex_index *coProtocolMachineTableStorage;
extern struct header_complex_index *singlePeerConnectionTableStorage;
extern struct header_complex_index *physicalEntityTableStorage;
extern struct header_complex_index *physicalSAPTableStorage;
extern struct header_complex_index *dataCircuitTableStorage;
extern struct header_complex_index *physicalConnectionTableStorage;
extern struct header_complex_index *datalinkEntityTableStorage;
extern struct header_complex_index *dLSAPTableStorage;
extern struct header_complex_index *lAPBDLETableStorage;
extern struct header_complex_index *sLPPMTableStorage;
extern struct header_complex_index *sLPConnectionTableStorage;
extern struct header_complex_index *sLPConnectionIVMOTableStorage;
extern struct header_complex_index *mACDLETableStorage;
extern struct header_complex_index *mACTableStorage;
extern struct header_complex_index *lLCDLETableStorage;
extern struct header_complex_index *lLCCLPMTableStorage;
extern struct header_complex_index *lLCCOPMTableStorage;
extern struct header_complex_index *resourceTypeIdTableStorage;
extern struct header_complex_index *lLCStationTableStorage;
extern struct header_complex_index *lLCSAPTableStorage;
extern struct header_complex_index *rDESetupTableStorage;
extern struct header_complex_index *rDEPairTableStorage;
extern struct header_complex_index *lLCConnectionLessTableStorage;
extern struct header_complex_index *lLCConnection2TableStorage;
extern struct header_complex_index *lLCConnection2IVMOTableStorage;
extern struct header_complex_index *lLCConnectionlessAckTableStorage;
extern struct header_complex_index *lLCConnectionlessAckIVMOTableStorage;
extern struct header_complex_index *networkEntityTableStorage;
extern struct header_complex_index *nSAPTableStorage;
extern struct header_complex_index *cLNSTableStorage;
extern struct header_complex_index *cLNSISISTableStorage;
extern struct header_complex_index *cLNSISISLevel2TableStorage;
extern struct header_complex_index *linkageTableStorage;
extern struct header_complex_index *cONSTableStorage;
extern struct header_complex_index *networkConnectionTableStorage;
extern struct header_complex_index *x25PLETableStorage;
extern struct header_complex_index *x25PLE_DTETableStorage;
extern struct header_complex_index *x25PLE_DCETableStorage;
extern struct header_complex_index *x25PLEIVMOTableStorage;
extern struct header_complex_index *x25PLEIVMO_DTETableStorage;
extern struct header_complex_index *x25PLEIVMO_DCETableStorage;
extern struct header_complex_index *virtualCallTableStorage;
extern struct header_complex_index *virtualCircuitTableStorage;
extern struct header_complex_index *virtualCircuit_DTETableStorage;
extern struct header_complex_index *virtualCircuit_DCETableStorage;
extern struct header_complex_index *permanentVirtualCircuitTableStorage;
extern struct header_complex_index *permanentVirtualCircuit_DTETableStorage;
extern struct header_complex_index *permanentVirtualCircuit_DCETableStorage;
extern struct header_complex_index *virtualCallIVMOTableStorage;
extern struct header_complex_index *switchedVirtualCallTableStorage;
extern struct header_complex_index *virtualCall_DTETableStorage;
extern struct header_complex_index *virtualCall_DCETableStorage;
extern struct header_complex_index *dSeriesCountsTableStorage;
extern struct header_complex_index *adjacencyTableStorage;
extern struct header_complex_index *virtualAdjacencyTableStorage;
extern struct header_complex_index *destinationTableStorage;
extern struct header_complex_index *destinationSystemTableStorage;
extern struct header_complex_index *destinationAreaTableStorage;
extern struct header_complex_index *reachableAddressTableStorage;

/* enum definitions from the covered mib sections */

#define COMMUNICATIONSENTITYOPERATIONALSTATE_DISABLED 0
#define COMMUNICATIONSENTITYOPERATIONALSTATE_ENABLED 1

#define CLPROTOCOLMACHINEOPERATIONALSTATE_DISABLED 0
#define CLPROTOCOLMACHINEOPERATIONALSTATE_ENABLED 1

#define COPROTOCOLMACHINEOPERATIONALSTATE_DISABLED 0
#define COPROTOCOLMACHINEOPERATIONALSTATE_ENABLED 1

#define DATACIRCUITTYPE_END_SYSTEM               0
#define DATACIRCUITTYPE_RELAY_SYSTEM             1

#define DATACIRCUITSYNCHRONIZATIONMODE_SYNCHRONOUS 0
#define DATACIRCUITSYNCHRONIZATIONMODE_ASYNCHRONOUS 1

#define DATACIRCUITTRANSMISSIONMODE_SIMPLEX      0
#define DATACIRCUITTRANSMISSIONMODE_DUPLEX       1
#define DATACIRCUITTRANSMISSIONMODE_HALF_DUPLEX  2

#define SLPPMADMINISTRATIVESTATE_LOCKED          0
#define SLPPMADMINISTRATIVESTATE_UNLOCKED        1
#define SLPPMADMINISTRATIVESTATE_SHUTTINGDOWN    2

#define SLPCONNECTIONINTERFACETYPE_DTE           0
#define SLPCONNECTIONINTERFACETYPE_DCE           1

#define SLPCONNECTIONPROTOCOLSTATE_DISCONNECTEDPHASE 0
#define SLPCONNECTIONPROTOCOLSTATE_LINKDISCONNECTION_PHASE 1
#define SLPCONNECTIONPROTOCOLSTATE_LINK_SET_UP_PHASE 2
#define SLPCONNECTIONPROTOCOLSTATE_INFORMATION_TRANSFER_PHASE 3
#define SLPCONNECTIONPROTOCOLSTATE_FRAME_REJECT_CONDITION 4
#define SLPCONNECTIONPROTOCOLSTATE_BUSY_CONDITION 5
#define SLPCONNECTIONPROTOCOLSTATE_SENT_REJECT_CONDITION 6
#define SLPCONNECTIONPROTOCOLSTATE_SYSTEM_PARAMETERS_AND_ERROR_RECOVERY 7

#define SLPCONNECTIONADMINISTRATIVESTATE_LOCKED  0
#define SLPCONNECTIONADMINISTRATIVESTATE_UNLOCKED 1
#define SLPCONNECTIONADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define SLPCONNECTIONOPERATIONALSTATE_DISABLED   0
#define SLPCONNECTIONOPERATIONALSTATE_ENABLED    1

#define SLPCONNECTIONUSAGESTATE_IDLE             0
#define SLPCONNECTIONUSAGESTATE_ACTIVE           1
#define SLPCONNECTIONUSAGESTATE_BUSY             2

#define SLPCONNECTIONPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define SLPCONNECTIONPROCEDURALSTATUS_NOTINITIALIZED 1
#define SLPCONNECTIONPROCEDURALSTATUS_INITIALIZING 2
#define SLPCONNECTIONPROCEDURALSTATUS_REPORTING  3
#define SLPCONNECTIONPROCEDURALSTATUS_TERMINATING 4

#define SLPCONNECTIONALARMSTATUS_UNDERREPAIR     0
#define SLPCONNECTIONALARMSTATUS_CRITICAL        1
#define SLPCONNECTIONALARMSTATUS_MAJOR           2
#define SLPCONNECTIONALARMSTATUS_MINOR           3
#define SLPCONNECTIONALARMSTATUS_ALARMOUTSTANDING 4

#define SLPCONNECTIONIVMOINTERFACETYPE_DTE       0
#define SLPCONNECTIONIVMOINTERFACETYPE_DCE       1

#define MACOPERATIONALSTATE_DISABLED             0
#define MACOPERATIONALSTATE_ENABLED              1

#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE1   0
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE2   1
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3INITIATE 2
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RECEIVEDATA 3
#define LLCSTATIONSUPPORTEDSERVICESTYPES_TYPE3RETURNDATA 4

#define LLCSTATIONSTATUS_UP                      0
#define LLCSTATIONSTATUS_DOWN                    1
#define LLCSTATIONSTATUS_OTHER                   2

#define LLCSTATIONSTRINDICATOR_NSR               0
#define LLCSTATIONSTRINDICATOR_STE               1

#define LLCSAPRDE_TRUE                           1
#define LLCSAPRDE_FALSE                          2

#define RDESETUPAGINGENABLED_TRUE                1
#define RDESETUPAGINGENABLED_FALSE               2

#define RDESETUPRDEHOLD_TRUE                     1
#define RDESETUPRDEHOLD_FALSE                    2

#define RDESETUPRDEREPLACE_TRUE                  1
#define RDESETUPRDEREPLACE_FALSE                 2

#define RDESETUPRESETONTESTENABLED_TRUE          1
#define RDESETUPRESETONTESTENABLED_FALSE         2

#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2OPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTION2PROTOCOLSTATE_DISCONNECTEDPHASE 0
#define LLCCONNECTION2PROTOCOLSTATE_LINKDICONNECTION_PHASE 1
#define LLCCONNECTION2PROTOCOLSTATE_LINK_SET_UP_PHASE 2
#define LLCCONNECTION2PROTOCOLSTATE_INFORMATION_TRANSFER_PHASE 3
#define LLCCONNECTION2PROTOCOLSTATE_FRAME_REJECT_CONDITION 4
#define LLCCONNECTION2PROTOCOLSTATE_BUSY_CONDITION 5
#define LLCCONNECTION2PROTOCOLSTATE_SENT_REJECT_CONDITION 6
#define LLCCONNECTION2PROTOCOLSTATE_SYSTEM_PARAMETERS_AND_ERROR_RECOVERY 7

#define LLCCONNECTION2ADMINISTRATIVESTATE_LOCKED 0
#define LLCCONNECTION2ADMINISTRATIVESTATE_UNLOCKED 1
#define LLCCONNECTION2ADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define LLCCONNECTION2OPERATIONALSTATE_DISABLED  0
#define LLCCONNECTION2OPERATIONALSTATE_ENABLED   1

#define LLCCONNECTION2USAGESTATE_IDLE            0
#define LLCCONNECTION2USAGESTATE_ACTIVE          1
#define LLCCONNECTION2USAGESTATE_BUSY            2

#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define LLCCONNECTION2PROCEDURALSTATUS_NOTINITIALIZED 1
#define LLCCONNECTION2PROCEDURALSTATUS_INITIALIZING 2
#define LLCCONNECTION2PROCEDURALSTATUS_REPORTING 3
#define LLCCONNECTION2PROCEDURALSTATUS_TERMINATING 4

#define LLCCONNECTION2ALARMSTATUS_UNDERREPAIR    0
#define LLCCONNECTION2ALARMSTATUS_CRITICAL       1
#define LLCCONNECTION2ALARMSTATUS_MAJOR          2
#define LLCCONNECTION2ALARMSTATUS_MINOR          3
#define LLCCONNECTION2ALARMSTATUS_ALARMOUTSTANDING 4

#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2IVMOOPTIONALTOLERATIONIPDUS_FALSE 2

#define LLCCONNECTIONLESSACKRECEIVERESOURCES_TRUE 1
#define LLCCONNECTIONLESSACKRECEIVERESOURCES_FALSE 2

#define NETWORKENTITYSYSTEMTYPES_ES              0
#define NETWORKENTITYSYSTEMTYPES_IS              1

#define CLNSADMINISTRATIVESTATE_LOCKED           0
#define CLNSADMINISTRATIVESTATE_UNLOCKED         1
#define CLNSADMINISTRATIVESTATE_SHUTTINGDOWN     2

#define CLNSOPERATIONALSYSTEMTYPE_ES             0
#define CLNSOPERATIONALSYSTEMTYPE_IS             1

#define CLNSENABLECHECKSUM_TRUE                  1
#define CLNSENABLECHECKSUM_FALSE                 2

#define CLNSISISL1STATE_OFF                      0
#define CLNSISISL1STATE_ON                       1
#define CLNSISISL1STATE_WAITING                  2

#define CLNSISISLEVEL2L2STATE_OFF                0
#define CLNSISISLEVEL2L2STATE_ON                 1
#define CLNSISISLEVEL2L2STATE_WAITING            2

#define LINKAGEOPERATIONALSTATE_DISABLED         0
#define LINKAGEOPERATIONALSTATE_ENABLED          1

#define LINKAGEADMINISTRATIVESTATE_LOCKED        0
#define LINKAGEADMINISTRATIVESTATE_UNLOCKED      1
#define LINKAGEADMINISTRATIVESTATE_SHUTTINGDOWN  2

#define LINKAGEENABLECHECKSUM_TRUE               1
#define LINKAGEENABLECHECKSUM_FALSE              2

#define LINKAGEISISMANUALL2ONLYMODE_TRUE         1
#define LINKAGEISISMANUALL2ONLYMODE_FALSE        2

#define CONSADMINISTRATIVESTATE_LOCKED           0
#define CONSADMINISTRATIVESTATE_UNLOCKED         1
#define CONSADMINISTRATIVESTATE_SHUTTINGDOWN     2

#define CONSOPERATIONALSYSTEMTYPE_ES             0
#define CONSOPERATIONALSYSTEMTYPE_IS             1

#define X25PLEOPERATIONALSTATE_DISABLED          0
#define X25PLEOPERATIONALSTATE_ENABLED           1

#define X25PLEADMINISTRATIVESTATE_LOCKED         0
#define X25PLEADMINISTRATIVESTATE_UNLOCKED       1
#define X25PLEADMINISTRATIVESTATE_SHUTTINGDOWN   2

#define X25PLEMODE_DTE                           0
#define X25PLEMODE_DCE                           1
#define X25PLEMODE_DTEASDCE                      2

#define X25PLEINTERFACEMODE_DTE                  0
#define X25PLEINTERFACEMODE_DCE                  1
#define X25PLEINTERFACEMODE_DTEASDCE             2

#define X25PLECALLDEFLECTIONSUBSCRIPTION_TRUE    1
#define X25PLECALLDEFLECTIONSUBSCRIPTION_FALSE   2

#define X25PLEREGISTRATIONPERMITTED_TRUE         1
#define X25PLEREGISTRATIONPERMITTED_FALSE        2

#define X25PLE_DTECALLDEFLECTIONSUBSCRIPTION_TRUE 1
#define X25PLE_DTECALLDEFLECTIONSUBSCRIPTION_FALSE 2

#define X25PLE_DTEREGISTRATIONPERMITTED_TRUE     1
#define X25PLE_DTEREGISTRATIONPERMITTED_FALSE    2

#define X25PLE_DCECUG_TRUE                       1
#define X25PLE_DCECUG_FALSE                      2

#define X25PLE_DCEFASTSELECTACCEPTANCE_TRUE      1
#define X25PLE_DCEFASTSELECTACCEPTANCE_FALSE     2

#define X25PLE_DCEINCOMINGCALLSBARRED_TRUE       1
#define X25PLE_DCEINCOMINGCALLSBARRED_FALSE      2

#define X25PLE_DCEONEWAYLOGICALCHANNELOUTGOING_TRUE 1
#define X25PLE_DCEONEWAYLOGICALCHANNELOUTGOING_FALSE 2

#define X25PLE_DCEOUTGOINGCALLSBARRED_TRUE       1
#define X25PLE_DCEOUTGOINGCALLSBARRED_FALSE      2

#define X25PLE_DCEBILATERALCUG_TRUE              1
#define X25PLE_DCEBILATERALCUG_FALSE             2

#define X25PLE_DCEBILATERALCUGWITHOUTGOINGACCESS_TRUE 1
#define X25PLE_DCEBILATERALCUGWITHOUTGOINGACCESS_FALSE 2

#define X25PLE_DCECALLDEFLECTIONSUBSCRIPTION_TRUE 1
#define X25PLE_DCECALLDEFLECTIONSUBSCRIPTION_FALSE 2

#define X25PLE_DCECALLREDIRECTION_TRUE           1
#define X25PLE_DCECALLREDIRECTION_FALSE          2

#define X25PLE_DCECHARGINGINFORMATION_TRUE       1
#define X25PLE_DCECHARGINGINFORMATION_FALSE      2

#define X25PLE_DCECUGWITHINCOMINGACCESS_TRUE     1
#define X25PLE_DCECUGWITHINCOMINGACCESS_FALSE    2

#define X25PLE_DCECUGWITHOUTGOINGACCESS_TRUE     1
#define X25PLE_DCECUGWITHOUTGOINGACCESS_FALSE    2

#define X25PLE_DCEDBITMODIFICATION_TRUE          1
#define X25PLE_DCEDBITMODIFICATION_FALSE         2

#define X25PLE_DCEHUNTGROUP_TRUE                 1
#define X25PLE_DCEHUNTGROUP_FALSE                2

#define X25PLE_DCEINCOMINGCALLBARREDWITHINCUG_TRUE 1
#define X25PLE_DCEINCOMINGCALLBARREDWITHINCUG_FALSE 2

#define X25PLE_DCELOCALCHARGINGPREVENTION_TRUE   1
#define X25PLE_DCELOCALCHARGINGPREVENTION_FALSE  2

#define X25PLE_DCENUIOVERRIDE_TRUE               1
#define X25PLE_DCENUIOVERRIDE_FALSE              2

#define X25PLE_DCENUISUBSCRIPTION_TRUE           1
#define X25PLE_DCENUISUBSCRIPTION_FALSE          2

#define X25PLE_DCEONEWAYLOGICALCHANNELINCOMING_TRUE 1
#define X25PLE_DCEONEWAYLOGICALCHANNELINCOMING_FALSE 2

#define X25PLE_DCEONLINEFACILITYREGISTRATION_TRUE 1
#define X25PLE_DCEONLINEFACILITYREGISTRATION_FALSE 2

#define X25PLE_DCEOUTGOINGCALLBARREDWITHINCUG_TRUE 1
#define X25PLE_DCEOUTGOINGCALLBARREDWITHINCUG_FALSE 2

#define X25PLE_DCEPACKETRETRANSMISSION_TRUE      1
#define X25PLE_DCEPACKETRETRANSMISSION_FALSE     2

#define X25PLE_DCEREVERSECHARGINGACCEPTANCE_TRUE 1
#define X25PLE_DCEREVERSECHARGINGACCEPTANCE_FALSE 2

#define X25PLE_DCEROASUBSCRIPTION_TRUE           1
#define X25PLE_DCEROASUBSCRIPTION_FALSE          2

#define X25PLEIVMOINTERFACEMODE_DTE              0
#define X25PLEIVMOINTERFACEMODE_DCE              1
#define X25PLEIVMOINTERFACEMODE_DTEASDCE         2

#define X25PLEIVMOCALLDEFLECTIONSUBSCRIPTION_TRUE 1
#define X25PLEIVMOCALLDEFLECTIONSUBSCRIPTION_FALSE 2

#define X25PLEIVMOREGISTRATIONPERMITTED_TRUE     1
#define X25PLEIVMOREGISTRATIONPERMITTED_FALSE    2

#define X25PLEIVMO_DTECALLDEFLECTIONSUBSCRIPTION_TRUE 1
#define X25PLEIVMO_DTECALLDEFLECTIONSUBSCRIPTION_FALSE 2

#define X25PLEIVMO_DTEREGISTRATIONPERMITTED_TRUE 1
#define X25PLEIVMO_DTEREGISTRATIONPERMITTED_FALSE 2

#define PERMANENTVIRTUALCIRCUIT_DCEOPERATIONALSTATE_DISABLED 0
#define PERMANENTVIRTUALCIRCUIT_DCEOPERATIONALSTATE_ENABLED 1

#define VIRTUALCALLIVMOFASTSELECT_NOTSPECIFIED   0
#define VIRTUALCALLIVMOFASTSELECT_FASTSELECT     1
#define VIRTUALCALLIVMOFASTSELECT_FASTSELECTWITHRESTRICTEDRESPONSE 2
#define VIRTUALCALLIVMOFASTSELECT_NOFASTSELECT   3

#define VIRTUALCALL_DTEFASTSELECT_NOTSPECIFIED   0
#define VIRTUALCALL_DTEFASTSELECT_FASTSELECT     1
#define VIRTUALCALL_DTEFASTSELECT_FASTSELECTWITHRESTRICTEDRESPONSE 2
#define VIRTUALCALL_DTEFASTSELECT_NOFASTSELECT   3

#define VIRTUALCALL_DCEFASTSELECT_NOTSPECIFIED   0
#define VIRTUALCALL_DCEFASTSELECT_FASTSELECT     1
#define VIRTUALCALL_DCEFASTSELECT_FASTSELECTWITHRESTRICTEDRESPONSE 2
#define VIRTUALCALL_DCEFASTSELECT_NOFASTSELECT   3

#define VIRTUALCALL_DCECALLREDIRECTIONDEFLECTIONNOTIFICATION_TRUE 1
#define VIRTUALCALL_DCECALLREDIRECTIONDEFLECTIONNOTIFICATION_FALSE 2

#define VIRTUALCALL_DCECALLEDLINEADDRESSMODIFIEDNOTIFICATION_TRUE 1
#define VIRTUALCALL_DCECALLEDLINEADDRESSMODIFIEDNOTIFICATION_FALSE 2

#define ADJACENCYSTATE_INITIALIZING              0
#define ADJACENCYSTATE_UP                        1
#define ADJACENCYSTATE_FAILED                    2
#define ADJACENCYSTATE_DOWN                      3

#define NEIGHBOURSYSTEMTYPE_UNKNOWN              0
#define NEIGHBOURSYSTEMTYPE_ENDSYSTEM            1
#define NEIGHBOURSYSTEMTYPE_INTERMEDIATESYSTEM   2
#define NEIGHBOURSYSTEMTYPE_L1INTERMEDIATESYSTEM 3
#define NEIGHBOURSYSTEMTYPE_L2INTERMEIDATESYSTEM 4

#define ADJACENCYUSAGE_UNDEFINED                 0
#define ADJACENCYUSAGE_LEVEL1                    1
#define ADJACENCYUSAGE_LEVEL2                    2
#define ADJACENCYUSAGE_LEVEL1AND2                3

#define DESTINATIONSYSTEMMETRICTYPE_DEFAULT      0
#define DESTINATIONSYSTEMMETRICTYPE_DELAY        1
#define DESTINATIONSYSTEMMETRICTYPE_EXPENSE      2
#define DESTINATIONSYSTEMMETRICTYPE_ERROR        3

#define REACHABLEADDRESSMAPPINGTYPE_NONE         0
#define REACHABLEADDRESSMAPPINGTYPE_EXPLICIT     1
#define REACHABLEADDRESSMAPPINGTYPE_EXTRACTIDI   2
#define REACHABLEADDRESSMAPPINGTYPE_EXTRACTDSP   3

#define REACHABLEADDRESSDEFAULTMETRICTYPE_INTERNAL 0
#define REACHABLEADDRESSDEFAULTMETRICTYPE_EXTERNAL 1

#define REACHABLEADDRESSDELAYMETRICTYPE_INTERNAL 0
#define REACHABLEADDRESSDELAYMETRICTYPE_EXTERNAL 1

#define REACHABLEADDRESSEXPENSEMETRICTYPE_INTERNAL 0
#define REACHABLEADDRESSEXPENSEMETRICTYPE_EXTERNAL 1

#define REACHABLEADDRESSERRORMETRICTYPE_INTERNAL 0
#define REACHABLEADDRESSERRORMETRICTYPE_EXTERNAL 1

#define REACHABLEADDRESSOPERATIONALSTATE_DISABLED 0
#define REACHABLEADDRESSOPERATIONALSTATE_ENABLED 1

#define REACHABLEADDRESSADMINISTRATIVESTATE_LOCKED 0
#define REACHABLEADDRESSADMINISTRATIVESTATE_UNLOCKED 1
#define REACHABLEADDRESSADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define SLPCONNECTIONDEFAULTINTERFACETYPE_DTE    0
#define SLPCONNECTIONDEFAULTINTERFACETYPE_DCE    1

#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_TRUE 1
#define LLCCONNECTION2DEFAULTOPTIONALTOLERATIONIPDUS_FALSE 2

#define CONSTRAINTVIOLATION_TRUE                 1
#define CONSTRAINTVIOLATION_FALSE                2

#define NOTIFICATIONVIRTUALLINKCHANGE_DELETED    0
#define NOTIFICATIONVIRTUALLINKCHANGE_CREATED    1

#define NOTIFICATIONDESIGNATEDINTERMEDIATESYSTEMCHANGE_RESIGNED 0
#define NOTIFICATIONDESIGNATEDINTERMEDIATESYSTEMCHANGE_ELECTED 1

#define NOTIFICATIONOVERLOADSTATECHANGE_ON       0
#define NOTIFICATIONOVERLOADSTATECHANGE_WAITING  1

#define RESERVEDNAME_TRUE                        1
#define RESERVEDNAME_FALSE                       2

/* notifications */
extern oid lLCConnection2Event_oid[10];
extern oid lLCClessACKEvent_oid[10];
extern oid lLCStationEvent_oid[10];

/* scalars accessible only for notify */
extern oid physicalBitErrorThresholdReached_oid[11];
extern oid physicalConnectionError_oid[11];
extern oid phsyicalConnectionEstablished_oid[11];
extern oid physicalLossOfSignal_oid[11];
extern oid physicalLossOfSynchronization_oid[11];
extern oid fRMR_oid[11];
extern oid pdusDiscarded1_oid[11];
extern oid pdusDiscarded2_oid[11];
extern oid pduRetransmissions_oid[11];
extern oid acknowledgeTimeout_oid[11];
extern oid busyStateTimeout_oid[11];
extern oid rejectTimeout_oid[11];
extern oid pBitTimeout_oid[11];
extern oid type2Violation_oid[11];
extern oid retranmissions_oid[11];
extern oid type3Violation_oid[11];
extern oid noResponse_oid[11];
extern oid pdusDiscarded_oid[11];
extern oid bufferProblems_oid[11];
extern oid notificationPDUHeader_oid[11];
extern oid reachabilityChange_oid[11];
extern oid notificationData_oid[11];
extern oid constraintViolation_oid[11];
extern oid notificationReceivingAdjacency_oid[11];
extern oid notificationIDLength_oid[11];
extern oid notificationAreaAddress_oid[11];
extern oid notificationAreaAddresses_oid[11];
extern oid notificationSourceId_oid[11];
extern oid notificationMaximumAreaAddresses_oid[11];
extern oid notificationVirtualLinkChange_oid[11];
extern oid notificationVirtualLinkAddress_oid[11];
extern oid notificationSystemId_oid[11];
extern oid notificationVersion_oid[11];
extern oid notificationDesignatedIntermediateSystemChange_oid[11];
extern oid notificationOverloadStateChange_oid[11];
extern oid reservedName_oid[11];
extern oid notificationLSPHeader_oid[11];

/* object id definitions */

/* function prototypes */
void init_dlMIB(void);
void deinit_dlMIB(void);
int term_dlMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_dlMIB;
void parse_dlMIB(const char *, char *);
SNMPCallback store_dlMIB;
void refresh_dlMIB(void);
FindVarMethod var_communicationsEntityTable;
struct communicationsEntityTable_data *communicationsEntityTable_create(void);
int communicationsEntityTable_destroy(struct communicationsEntityTable_data **);
int communicationsEntityTable_add(struct communicationsEntityTable_data *);
int communicationsEntityTable_del(struct communicationsEntityTable_data *);
void parse_communicationsEntityTable(const char *, char *);
SNMPCallback store_communicationsEntityTable;
void refresh_communicationsEntityTable(void);
FindVarMethod var_sap1Table;
struct sap1Table_data *sap1Table_create(void);
int sap1Table_destroy(struct sap1Table_data **);
int sap1Table_add(struct sap1Table_data *);
int sap1Table_del(struct sap1Table_data *);
void parse_sap1Table(const char *, char *);
SNMPCallback store_sap1Table;
void refresh_sap1Table(void);
FindVarMethod var_sap2Table;
struct sap2Table_data *sap2Table_create(void);
int sap2Table_destroy(struct sap2Table_data **);
int sap2Table_add(struct sap2Table_data *);
int sap2Table_del(struct sap2Table_data *);
void parse_sap2Table(const char *, char *);
SNMPCallback store_sap2Table;
void refresh_sap2Table(void);
FindVarMethod var_clProtocolMachineTable;
struct clProtocolMachineTable_data *clProtocolMachineTable_create(void);
int clProtocolMachineTable_destroy(struct clProtocolMachineTable_data **);
int clProtocolMachineTable_add(struct clProtocolMachineTable_data *);
int clProtocolMachineTable_del(struct clProtocolMachineTable_data *);
void parse_clProtocolMachineTable(const char *, char *);
SNMPCallback store_clProtocolMachineTable;
void refresh_clProtocolMachineTable(void);
FindVarMethod var_coProtocolMachineTable;
struct coProtocolMachineTable_data *coProtocolMachineTable_create(void);
int coProtocolMachineTable_destroy(struct coProtocolMachineTable_data **);
int coProtocolMachineTable_add(struct coProtocolMachineTable_data *);
int coProtocolMachineTable_del(struct coProtocolMachineTable_data *);
void parse_coProtocolMachineTable(const char *, char *);
SNMPCallback store_coProtocolMachineTable;
void refresh_coProtocolMachineTable(void);
FindVarMethod var_singlePeerConnectionTable;
struct singlePeerConnectionTable_data *singlePeerConnectionTable_create(void);
int singlePeerConnectionTable_destroy(struct singlePeerConnectionTable_data **);
int singlePeerConnectionTable_add(struct singlePeerConnectionTable_data *);
int singlePeerConnectionTable_del(struct singlePeerConnectionTable_data *);
void parse_singlePeerConnectionTable(const char *, char *);
SNMPCallback store_singlePeerConnectionTable;
void refresh_singlePeerConnectionTable(void);
FindVarMethod var_physicalEntityTable;
struct physicalEntityTable_data *physicalEntityTable_create(void);
int physicalEntityTable_destroy(struct physicalEntityTable_data **);
int physicalEntityTable_add(struct physicalEntityTable_data *);
int physicalEntityTable_del(struct physicalEntityTable_data *);
void parse_physicalEntityTable(const char *, char *);
SNMPCallback store_physicalEntityTable;
void refresh_physicalEntityTable(void);
FindVarMethod var_physicalSAPTable;
struct physicalSAPTable_data *physicalSAPTable_create(void);
int physicalSAPTable_destroy(struct physicalSAPTable_data **);
int physicalSAPTable_add(struct physicalSAPTable_data *);
int physicalSAPTable_del(struct physicalSAPTable_data *);
void parse_physicalSAPTable(const char *, char *);
SNMPCallback store_physicalSAPTable;
void refresh_physicalSAPTable(void);
FindVarMethod var_dataCircuitTable;
struct dataCircuitTable_data *dataCircuitTable_create(void);
int dataCircuitTable_destroy(struct dataCircuitTable_data **);
int dataCircuitTable_add(struct dataCircuitTable_data *);
int dataCircuitTable_del(struct dataCircuitTable_data *);
void parse_dataCircuitTable(const char *, char *);
SNMPCallback store_dataCircuitTable;
void refresh_dataCircuitTable(void);
FindVarMethod var_physicalConnectionTable;
struct physicalConnectionTable_data *physicalConnectionTable_create(void);
int physicalConnectionTable_destroy(struct physicalConnectionTable_data **);
int physicalConnectionTable_add(struct physicalConnectionTable_data *);
int physicalConnectionTable_del(struct physicalConnectionTable_data *);
void parse_physicalConnectionTable(const char *, char *);
SNMPCallback store_physicalConnectionTable;
void refresh_physicalConnectionTable(void);
FindVarMethod var_datalinkEntityTable;
struct datalinkEntityTable_data *datalinkEntityTable_create(void);
int datalinkEntityTable_destroy(struct datalinkEntityTable_data **);
int datalinkEntityTable_add(struct datalinkEntityTable_data *);
int datalinkEntityTable_del(struct datalinkEntityTable_data *);
void parse_datalinkEntityTable(const char *, char *);
SNMPCallback store_datalinkEntityTable;
void refresh_datalinkEntityTable(void);
FindVarMethod var_dLSAPTable;
struct dLSAPTable_data *dLSAPTable_create(void);
int dLSAPTable_destroy(struct dLSAPTable_data **);
int dLSAPTable_add(struct dLSAPTable_data *);
int dLSAPTable_del(struct dLSAPTable_data *);
void parse_dLSAPTable(const char *, char *);
SNMPCallback store_dLSAPTable;
void refresh_dLSAPTable(void);
FindVarMethod var_lAPBDLETable;
struct lAPBDLETable_data *lAPBDLETable_create(void);
int lAPBDLETable_destroy(struct lAPBDLETable_data **);
int lAPBDLETable_add(struct lAPBDLETable_data *);
int lAPBDLETable_del(struct lAPBDLETable_data *);
void parse_lAPBDLETable(const char *, char *);
SNMPCallback store_lAPBDLETable;
void refresh_lAPBDLETable(void);
FindVarMethod var_sLPPMTable;
struct sLPPMTable_data *sLPPMTable_create(void);
int sLPPMTable_destroy(struct sLPPMTable_data **);
int sLPPMTable_add(struct sLPPMTable_data *);
int sLPPMTable_del(struct sLPPMTable_data *);
void parse_sLPPMTable(const char *, char *);
SNMPCallback store_sLPPMTable;
void refresh_sLPPMTable(void);
FindVarMethod var_sLPConnectionTable;
struct sLPConnectionTable_data *sLPConnectionTable_create(void);
int sLPConnectionTable_destroy(struct sLPConnectionTable_data **);
int sLPConnectionTable_add(struct sLPConnectionTable_data *);
int sLPConnectionTable_del(struct sLPConnectionTable_data *);
void parse_sLPConnectionTable(const char *, char *);
SNMPCallback store_sLPConnectionTable;
void refresh_sLPConnectionTable(void);
FindVarMethod var_sLPConnectionIVMOTable;
struct sLPConnectionIVMOTable_data *sLPConnectionIVMOTable_create(void);
int sLPConnectionIVMOTable_destroy(struct sLPConnectionIVMOTable_data **);
int sLPConnectionIVMOTable_add(struct sLPConnectionIVMOTable_data *);
int sLPConnectionIVMOTable_del(struct sLPConnectionIVMOTable_data *);
void parse_sLPConnectionIVMOTable(const char *, char *);
SNMPCallback store_sLPConnectionIVMOTable;
void refresh_sLPConnectionIVMOTable(void);
FindVarMethod var_mACDLETable;
struct mACDLETable_data *mACDLETable_create(void);
int mACDLETable_destroy(struct mACDLETable_data **);
int mACDLETable_add(struct mACDLETable_data *);
int mACDLETable_del(struct mACDLETable_data *);
void parse_mACDLETable(const char *, char *);
SNMPCallback store_mACDLETable;
void refresh_mACDLETable(void);
FindVarMethod var_mACTable;
struct mACTable_data *mACTable_create(void);
int mACTable_destroy(struct mACTable_data **);
int mACTable_add(struct mACTable_data *);
int mACTable_del(struct mACTable_data *);
void parse_mACTable(const char *, char *);
SNMPCallback store_mACTable;
void refresh_mACTable(void);
FindVarMethod var_lLCDLETable;
struct lLCDLETable_data *lLCDLETable_create(void);
int lLCDLETable_destroy(struct lLCDLETable_data **);
int lLCDLETable_add(struct lLCDLETable_data *);
int lLCDLETable_del(struct lLCDLETable_data *);
void parse_lLCDLETable(const char *, char *);
SNMPCallback store_lLCDLETable;
void refresh_lLCDLETable(void);
FindVarMethod var_lLCCLPMTable;
struct lLCCLPMTable_data *lLCCLPMTable_create(void);
int lLCCLPMTable_destroy(struct lLCCLPMTable_data **);
int lLCCLPMTable_add(struct lLCCLPMTable_data *);
int lLCCLPMTable_del(struct lLCCLPMTable_data *);
void parse_lLCCLPMTable(const char *, char *);
SNMPCallback store_lLCCLPMTable;
void refresh_lLCCLPMTable(void);
FindVarMethod var_lLCCOPMTable;
struct lLCCOPMTable_data *lLCCOPMTable_create(void);
int lLCCOPMTable_destroy(struct lLCCOPMTable_data **);
int lLCCOPMTable_add(struct lLCCOPMTable_data *);
int lLCCOPMTable_del(struct lLCCOPMTable_data *);
void parse_lLCCOPMTable(const char *, char *);
SNMPCallback store_lLCCOPMTable;
void refresh_lLCCOPMTable(void);
FindVarMethod var_resourceTypeIdTable;
struct resourceTypeIdTable_data *resourceTypeIdTable_create(void);
int resourceTypeIdTable_destroy(struct resourceTypeIdTable_data **);
int resourceTypeIdTable_add(struct resourceTypeIdTable_data *);
int resourceTypeIdTable_del(struct resourceTypeIdTable_data *);
void parse_resourceTypeIdTable(const char *, char *);
SNMPCallback store_resourceTypeIdTable;
void refresh_resourceTypeIdTable(void);
FindVarMethod var_lLCStationTable;
struct lLCStationTable_data *lLCStationTable_create(void);
int lLCStationTable_destroy(struct lLCStationTable_data **);
int lLCStationTable_add(struct lLCStationTable_data *);
int lLCStationTable_del(struct lLCStationTable_data *);
void parse_lLCStationTable(const char *, char *);
SNMPCallback store_lLCStationTable;
void refresh_lLCStationTable(void);
FindVarMethod var_lLCSAPTable;
struct lLCSAPTable_data *lLCSAPTable_create(void);
int lLCSAPTable_destroy(struct lLCSAPTable_data **);
int lLCSAPTable_add(struct lLCSAPTable_data *);
int lLCSAPTable_del(struct lLCSAPTable_data *);
void parse_lLCSAPTable(const char *, char *);
SNMPCallback store_lLCSAPTable;
void refresh_lLCSAPTable(void);
FindVarMethod var_rDESetupTable;
struct rDESetupTable_data *rDESetupTable_create(void);
int rDESetupTable_destroy(struct rDESetupTable_data **);
int rDESetupTable_add(struct rDESetupTable_data *);
int rDESetupTable_del(struct rDESetupTable_data *);
void parse_rDESetupTable(const char *, char *);
SNMPCallback store_rDESetupTable;
void refresh_rDESetupTable(void);
FindVarMethod var_rDEPairTable;
struct rDEPairTable_data *rDEPairTable_create(void);
int rDEPairTable_destroy(struct rDEPairTable_data **);
int rDEPairTable_add(struct rDEPairTable_data *);
int rDEPairTable_del(struct rDEPairTable_data *);
void parse_rDEPairTable(const char *, char *);
SNMPCallback store_rDEPairTable;
void refresh_rDEPairTable(void);
FindVarMethod var_lLCConnectionLessTable;
struct lLCConnectionLessTable_data *lLCConnectionLessTable_create(void);
int lLCConnectionLessTable_destroy(struct lLCConnectionLessTable_data **);
int lLCConnectionLessTable_add(struct lLCConnectionLessTable_data *);
int lLCConnectionLessTable_del(struct lLCConnectionLessTable_data *);
void parse_lLCConnectionLessTable(const char *, char *);
SNMPCallback store_lLCConnectionLessTable;
void refresh_lLCConnectionLessTable(void);
FindVarMethod var_lLCConnection2Table;
struct lLCConnection2Table_data *lLCConnection2Table_create(void);
int lLCConnection2Table_destroy(struct lLCConnection2Table_data **);
int lLCConnection2Table_add(struct lLCConnection2Table_data *);
int lLCConnection2Table_del(struct lLCConnection2Table_data *);
void parse_lLCConnection2Table(const char *, char *);
SNMPCallback store_lLCConnection2Table;
void refresh_lLCConnection2Table(void);
FindVarMethod var_lLCConnection2IVMOTable;
struct lLCConnection2IVMOTable_data *lLCConnection2IVMOTable_create(void);
int lLCConnection2IVMOTable_destroy(struct lLCConnection2IVMOTable_data **);
int lLCConnection2IVMOTable_add(struct lLCConnection2IVMOTable_data *);
int lLCConnection2IVMOTable_del(struct lLCConnection2IVMOTable_data *);
void parse_lLCConnection2IVMOTable(const char *, char *);
SNMPCallback store_lLCConnection2IVMOTable;
void refresh_lLCConnection2IVMOTable(void);
FindVarMethod var_lLCConnectionlessAckTable;
struct lLCConnectionlessAckTable_data *lLCConnectionlessAckTable_create(void);
int lLCConnectionlessAckTable_destroy(struct lLCConnectionlessAckTable_data **);
int lLCConnectionlessAckTable_add(struct lLCConnectionlessAckTable_data *);
int lLCConnectionlessAckTable_del(struct lLCConnectionlessAckTable_data *);
void parse_lLCConnectionlessAckTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckTable;
void refresh_lLCConnectionlessAckTable(void);
FindVarMethod var_lLCConnectionlessAckIVMOTable;
struct lLCConnectionlessAckIVMOTable_data *lLCConnectionlessAckIVMOTable_create(void);
int lLCConnectionlessAckIVMOTable_destroy(struct lLCConnectionlessAckIVMOTable_data **);
int lLCConnectionlessAckIVMOTable_add(struct lLCConnectionlessAckIVMOTable_data *);
int lLCConnectionlessAckIVMOTable_del(struct lLCConnectionlessAckIVMOTable_data *);
void parse_lLCConnectionlessAckIVMOTable(const char *, char *);
SNMPCallback store_lLCConnectionlessAckIVMOTable;
void refresh_lLCConnectionlessAckIVMOTable(void);
FindVarMethod var_networkEntityTable;
struct networkEntityTable_data *networkEntityTable_create(void);
int networkEntityTable_destroy(struct networkEntityTable_data **);
int networkEntityTable_add(struct networkEntityTable_data *);
int networkEntityTable_del(struct networkEntityTable_data *);
void parse_networkEntityTable(const char *, char *);
SNMPCallback store_networkEntityTable;
void refresh_networkEntityTable(void);
FindVarMethod var_nSAPTable;
struct nSAPTable_data *nSAPTable_create(void);
int nSAPTable_destroy(struct nSAPTable_data **);
int nSAPTable_add(struct nSAPTable_data *);
int nSAPTable_del(struct nSAPTable_data *);
void parse_nSAPTable(const char *, char *);
SNMPCallback store_nSAPTable;
void refresh_nSAPTable(void);
FindVarMethod var_cLNSTable;
struct cLNSTable_data *cLNSTable_create(void);
int cLNSTable_destroy(struct cLNSTable_data **);
int cLNSTable_add(struct cLNSTable_data *);
int cLNSTable_del(struct cLNSTable_data *);
void parse_cLNSTable(const char *, char *);
SNMPCallback store_cLNSTable;
void refresh_cLNSTable(void);
FindVarMethod var_cLNSISISTable;
struct cLNSISISTable_data *cLNSISISTable_create(void);
int cLNSISISTable_destroy(struct cLNSISISTable_data **);
int cLNSISISTable_add(struct cLNSISISTable_data *);
int cLNSISISTable_del(struct cLNSISISTable_data *);
void parse_cLNSISISTable(const char *, char *);
SNMPCallback store_cLNSISISTable;
void refresh_cLNSISISTable(void);
FindVarMethod var_cLNSISISLevel2Table;
struct cLNSISISLevel2Table_data *cLNSISISLevel2Table_create(void);
int cLNSISISLevel2Table_destroy(struct cLNSISISLevel2Table_data **);
int cLNSISISLevel2Table_add(struct cLNSISISLevel2Table_data *);
int cLNSISISLevel2Table_del(struct cLNSISISLevel2Table_data *);
void parse_cLNSISISLevel2Table(const char *, char *);
SNMPCallback store_cLNSISISLevel2Table;
void refresh_cLNSISISLevel2Table(void);
FindVarMethod var_linkageTable;
struct linkageTable_data *linkageTable_create(void);
int linkageTable_destroy(struct linkageTable_data **);
int linkageTable_add(struct linkageTable_data *);
int linkageTable_del(struct linkageTable_data *);
void parse_linkageTable(const char *, char *);
SNMPCallback store_linkageTable;
void refresh_linkageTable(void);
FindVarMethod var_cONSTable;
struct cONSTable_data *cONSTable_create(void);
int cONSTable_destroy(struct cONSTable_data **);
int cONSTable_add(struct cONSTable_data *);
int cONSTable_del(struct cONSTable_data *);
void parse_cONSTable(const char *, char *);
SNMPCallback store_cONSTable;
void refresh_cONSTable(void);
FindVarMethod var_networkConnectionTable;
struct networkConnectionTable_data *networkConnectionTable_create(void);
int networkConnectionTable_destroy(struct networkConnectionTable_data **);
int networkConnectionTable_add(struct networkConnectionTable_data *);
int networkConnectionTable_del(struct networkConnectionTable_data *);
void parse_networkConnectionTable(const char *, char *);
SNMPCallback store_networkConnectionTable;
void refresh_networkConnectionTable(void);
FindVarMethod var_x25PLETable;
struct x25PLETable_data *x25PLETable_create(void);
int x25PLETable_destroy(struct x25PLETable_data **);
int x25PLETable_add(struct x25PLETable_data *);
int x25PLETable_del(struct x25PLETable_data *);
void parse_x25PLETable(const char *, char *);
SNMPCallback store_x25PLETable;
void refresh_x25PLETable(void);
FindVarMethod var_x25PLE_DTETable;
struct x25PLE_DTETable_data *x25PLE_DTETable_create(void);
int x25PLE_DTETable_destroy(struct x25PLE_DTETable_data **);
int x25PLE_DTETable_add(struct x25PLE_DTETable_data *);
int x25PLE_DTETable_del(struct x25PLE_DTETable_data *);
void parse_x25PLE_DTETable(const char *, char *);
SNMPCallback store_x25PLE_DTETable;
void refresh_x25PLE_DTETable(void);
FindVarMethod var_x25PLE_DCETable;
struct x25PLE_DCETable_data *x25PLE_DCETable_create(void);
int x25PLE_DCETable_destroy(struct x25PLE_DCETable_data **);
int x25PLE_DCETable_add(struct x25PLE_DCETable_data *);
int x25PLE_DCETable_del(struct x25PLE_DCETable_data *);
void parse_x25PLE_DCETable(const char *, char *);
SNMPCallback store_x25PLE_DCETable;
void refresh_x25PLE_DCETable(void);
FindVarMethod var_x25PLEIVMOTable;
struct x25PLEIVMOTable_data *x25PLEIVMOTable_create(void);
int x25PLEIVMOTable_destroy(struct x25PLEIVMOTable_data **);
int x25PLEIVMOTable_add(struct x25PLEIVMOTable_data *);
int x25PLEIVMOTable_del(struct x25PLEIVMOTable_data *);
void parse_x25PLEIVMOTable(const char *, char *);
SNMPCallback store_x25PLEIVMOTable;
void refresh_x25PLEIVMOTable(void);
FindVarMethod var_x25PLEIVMO_DTETable;
struct x25PLEIVMO_DTETable_data *x25PLEIVMO_DTETable_create(void);
int x25PLEIVMO_DTETable_destroy(struct x25PLEIVMO_DTETable_data **);
int x25PLEIVMO_DTETable_add(struct x25PLEIVMO_DTETable_data *);
int x25PLEIVMO_DTETable_del(struct x25PLEIVMO_DTETable_data *);
void parse_x25PLEIVMO_DTETable(const char *, char *);
SNMPCallback store_x25PLEIVMO_DTETable;
void refresh_x25PLEIVMO_DTETable(void);
FindVarMethod var_x25PLEIVMO_DCETable;
struct x25PLEIVMO_DCETable_data *x25PLEIVMO_DCETable_create(void);
int x25PLEIVMO_DCETable_destroy(struct x25PLEIVMO_DCETable_data **);
int x25PLEIVMO_DCETable_add(struct x25PLEIVMO_DCETable_data *);
int x25PLEIVMO_DCETable_del(struct x25PLEIVMO_DCETable_data *);
void parse_x25PLEIVMO_DCETable(const char *, char *);
SNMPCallback store_x25PLEIVMO_DCETable;
void refresh_x25PLEIVMO_DCETable(void);
FindVarMethod var_virtualCallTable;
struct virtualCallTable_data *virtualCallTable_create(void);
int virtualCallTable_destroy(struct virtualCallTable_data **);
int virtualCallTable_add(struct virtualCallTable_data *);
int virtualCallTable_del(struct virtualCallTable_data *);
void parse_virtualCallTable(const char *, char *);
SNMPCallback store_virtualCallTable;
void refresh_virtualCallTable(void);
FindVarMethod var_virtualCircuitTable;
struct virtualCircuitTable_data *virtualCircuitTable_create(void);
int virtualCircuitTable_destroy(struct virtualCircuitTable_data **);
int virtualCircuitTable_add(struct virtualCircuitTable_data *);
int virtualCircuitTable_del(struct virtualCircuitTable_data *);
void parse_virtualCircuitTable(const char *, char *);
SNMPCallback store_virtualCircuitTable;
void refresh_virtualCircuitTable(void);
FindVarMethod var_virtualCircuit_DTETable;
struct virtualCircuit_DTETable_data *virtualCircuit_DTETable_create(void);
int virtualCircuit_DTETable_destroy(struct virtualCircuit_DTETable_data **);
int virtualCircuit_DTETable_add(struct virtualCircuit_DTETable_data *);
int virtualCircuit_DTETable_del(struct virtualCircuit_DTETable_data *);
void parse_virtualCircuit_DTETable(const char *, char *);
SNMPCallback store_virtualCircuit_DTETable;
void refresh_virtualCircuit_DTETable(void);
FindVarMethod var_virtualCircuit_DCETable;
struct virtualCircuit_DCETable_data *virtualCircuit_DCETable_create(void);
int virtualCircuit_DCETable_destroy(struct virtualCircuit_DCETable_data **);
int virtualCircuit_DCETable_add(struct virtualCircuit_DCETable_data *);
int virtualCircuit_DCETable_del(struct virtualCircuit_DCETable_data *);
void parse_virtualCircuit_DCETable(const char *, char *);
SNMPCallback store_virtualCircuit_DCETable;
void refresh_virtualCircuit_DCETable(void);
FindVarMethod var_permanentVirtualCircuitTable;
struct permanentVirtualCircuitTable_data *permanentVirtualCircuitTable_create(void);
int permanentVirtualCircuitTable_destroy(struct permanentVirtualCircuitTable_data **);
int permanentVirtualCircuitTable_add(struct permanentVirtualCircuitTable_data *);
int permanentVirtualCircuitTable_del(struct permanentVirtualCircuitTable_data *);
void parse_permanentVirtualCircuitTable(const char *, char *);
SNMPCallback store_permanentVirtualCircuitTable;
void refresh_permanentVirtualCircuitTable(void);
FindVarMethod var_permanentVirtualCircuit_DTETable;
struct permanentVirtualCircuit_DTETable_data *permanentVirtualCircuit_DTETable_create(void);
int permanentVirtualCircuit_DTETable_destroy(struct permanentVirtualCircuit_DTETable_data **);
int permanentVirtualCircuit_DTETable_add(struct permanentVirtualCircuit_DTETable_data *);
int permanentVirtualCircuit_DTETable_del(struct permanentVirtualCircuit_DTETable_data *);
void parse_permanentVirtualCircuit_DTETable(const char *, char *);
SNMPCallback store_permanentVirtualCircuit_DTETable;
void refresh_permanentVirtualCircuit_DTETable(void);
FindVarMethod var_permanentVirtualCircuit_DCETable;
struct permanentVirtualCircuit_DCETable_data *permanentVirtualCircuit_DCETable_create(void);
int permanentVirtualCircuit_DCETable_destroy(struct permanentVirtualCircuit_DCETable_data **);
int permanentVirtualCircuit_DCETable_add(struct permanentVirtualCircuit_DCETable_data *);
int permanentVirtualCircuit_DCETable_del(struct permanentVirtualCircuit_DCETable_data *);
void parse_permanentVirtualCircuit_DCETable(const char *, char *);
SNMPCallback store_permanentVirtualCircuit_DCETable;
void refresh_permanentVirtualCircuit_DCETable(void);
FindVarMethod var_virtualCallIVMOTable;
struct virtualCallIVMOTable_data *virtualCallIVMOTable_create(void);
int virtualCallIVMOTable_destroy(struct virtualCallIVMOTable_data **);
int virtualCallIVMOTable_add(struct virtualCallIVMOTable_data *);
int virtualCallIVMOTable_del(struct virtualCallIVMOTable_data *);
void parse_virtualCallIVMOTable(const char *, char *);
SNMPCallback store_virtualCallIVMOTable;
void refresh_virtualCallIVMOTable(void);
FindVarMethod var_switchedVirtualCallTable;
struct switchedVirtualCallTable_data *switchedVirtualCallTable_create(void);
int switchedVirtualCallTable_destroy(struct switchedVirtualCallTable_data **);
int switchedVirtualCallTable_add(struct switchedVirtualCallTable_data *);
int switchedVirtualCallTable_del(struct switchedVirtualCallTable_data *);
void parse_switchedVirtualCallTable(const char *, char *);
SNMPCallback store_switchedVirtualCallTable;
void refresh_switchedVirtualCallTable(void);
FindVarMethod var_virtualCall_DTETable;
struct virtualCall_DTETable_data *virtualCall_DTETable_create(void);
int virtualCall_DTETable_destroy(struct virtualCall_DTETable_data **);
int virtualCall_DTETable_add(struct virtualCall_DTETable_data *);
int virtualCall_DTETable_del(struct virtualCall_DTETable_data *);
void parse_virtualCall_DTETable(const char *, char *);
SNMPCallback store_virtualCall_DTETable;
void refresh_virtualCall_DTETable(void);
FindVarMethod var_virtualCall_DCETable;
struct virtualCall_DCETable_data *virtualCall_DCETable_create(void);
int virtualCall_DCETable_destroy(struct virtualCall_DCETable_data **);
int virtualCall_DCETable_add(struct virtualCall_DCETable_data *);
int virtualCall_DCETable_del(struct virtualCall_DCETable_data *);
void parse_virtualCall_DCETable(const char *, char *);
SNMPCallback store_virtualCall_DCETable;
void refresh_virtualCall_DCETable(void);
FindVarMethod var_dSeriesCountsTable;
struct dSeriesCountsTable_data *dSeriesCountsTable_create(void);
int dSeriesCountsTable_destroy(struct dSeriesCountsTable_data **);
int dSeriesCountsTable_add(struct dSeriesCountsTable_data *);
int dSeriesCountsTable_del(struct dSeriesCountsTable_data *);
void parse_dSeriesCountsTable(const char *, char *);
SNMPCallback store_dSeriesCountsTable;
void refresh_dSeriesCountsTable(void);
FindVarMethod var_adjacencyTable;
struct adjacencyTable_data *adjacencyTable_create(void);
int adjacencyTable_destroy(struct adjacencyTable_data **);
int adjacencyTable_add(struct adjacencyTable_data *);
int adjacencyTable_del(struct adjacencyTable_data *);
void parse_adjacencyTable(const char *, char *);
SNMPCallback store_adjacencyTable;
void refresh_adjacencyTable(void);
FindVarMethod var_virtualAdjacencyTable;
struct virtualAdjacencyTable_data *virtualAdjacencyTable_create(void);
int virtualAdjacencyTable_destroy(struct virtualAdjacencyTable_data **);
int virtualAdjacencyTable_add(struct virtualAdjacencyTable_data *);
int virtualAdjacencyTable_del(struct virtualAdjacencyTable_data *);
void parse_virtualAdjacencyTable(const char *, char *);
SNMPCallback store_virtualAdjacencyTable;
void refresh_virtualAdjacencyTable(void);
FindVarMethod var_destinationTable;
struct destinationTable_data *destinationTable_create(void);
int destinationTable_destroy(struct destinationTable_data **);
int destinationTable_add(struct destinationTable_data *);
int destinationTable_del(struct destinationTable_data *);
void parse_destinationTable(const char *, char *);
SNMPCallback store_destinationTable;
void refresh_destinationTable(void);
FindVarMethod var_destinationSystemTable;
struct destinationSystemTable_data *destinationSystemTable_create(void);
int destinationSystemTable_destroy(struct destinationSystemTable_data **);
int destinationSystemTable_add(struct destinationSystemTable_data *);
int destinationSystemTable_del(struct destinationSystemTable_data *);
void parse_destinationSystemTable(const char *, char *);
SNMPCallback store_destinationSystemTable;
void refresh_destinationSystemTable(void);
FindVarMethod var_destinationAreaTable;
struct destinationAreaTable_data *destinationAreaTable_create(void);
int destinationAreaTable_destroy(struct destinationAreaTable_data **);
int destinationAreaTable_add(struct destinationAreaTable_data *);
int destinationAreaTable_del(struct destinationAreaTable_data *);
void parse_destinationAreaTable(const char *, char *);
SNMPCallback store_destinationAreaTable;
void refresh_destinationAreaTable(void);
FindVarMethod var_reachableAddressTable;
struct reachableAddressTable_data *reachableAddressTable_create(void);
int reachableAddressTable_destroy(struct reachableAddressTable_data **);
int reachableAddressTable_add(struct reachableAddressTable_data *);
int reachableAddressTable_del(struct reachableAddressTable_data *);
void parse_reachableAddressTable(const char *, char *);
SNMPCallback store_reachableAddressTable;
void refresh_reachableAddressTable(void);

WriteMethod write_physicalEntityPhysicalEntityTitles;
WriteMethod write_dataCircuitBitErrorsThreshold;
WriteMethod write_dataCircuitType;
WriteMethod write_dataCircuitPhysicalMediaNames;
WriteMethod write_dataCircuitPhysicalInterfaceType;
WriteMethod write_dataCircuitPhysicalInterfaceStandard;
WriteMethod write_dataCircuitSynchronizationMode;
WriteMethod write_dataCircuitTransmissionCoding;
WriteMethod write_dataCircuitTransmissionMode;
WriteMethod write_dataCircuitTransmissionRate;
WriteMethod write_dataCircuitRowStatus;
WriteMethod write_physicalConnectionEndpointIdentifier;
WriteMethod write_physicalConnectionPortNumber;
WriteMethod write_physicalConnectionRowStatus;
WriteMethod write_datalinkEntityProviderEntityNames;
WriteMethod write_datalinkEntityRowStatus;
WriteMethod write_dLSAPRowStatus;
WriteMethod write_lAPBDLEmT1Timer;
WriteMethod write_lAPBDLEmT3Timer;
WriteMethod write_lAPBDLEmW;
WriteMethod write_lAPBDLEmXSend;
WriteMethod write_lAPBDLEmXReceive;
WriteMethod write_lAPBDLEmT2Timer;
WriteMethod write_lAPBDLERowStatus;
WriteMethod write_sLPPMadministrativeState;
WriteMethod write_sLPPMRowStatus;
WriteMethod write_sLPConnectionInterfaceType;
WriteMethod write_sLPConnectionK;
WriteMethod write_sLPConnectionN1;
WriteMethod write_sLPConnectionN2;
WriteMethod write_sLPConnectionSequenceModulus;
WriteMethod write_sLPConnectionT1Timer;
WriteMethod write_sLPConnectionT2Timer;
WriteMethod write_sLPConnectionT3Timer;
WriteMethod write_sLPConnectionT4Timer;
WriteMethod write_sLPConnectionAdministrativeState;
WriteMethod write_sLPConnectionRowStatus;
WriteMethod write_sLPConnectionIVMOinterfaceType;
WriteMethod write_sLPConnectionIVMOk;
WriteMethod write_sLPConnectionIVMOn1;
WriteMethod write_sLPConnectionIVMOn2;
WriteMethod write_sLPConnectionIVMOsequenceModulus;
WriteMethod write_sLPConnectionIVMOt1Timer;
WriteMethod write_sLPConnectionIVMOt2Timer;
WriteMethod write_sLPConnectionIVMOt3Timer;
WriteMethod write_sLPConnectionIVMOt4Timer;
WriteMethod write_sLPConnectionIVMORowStatus;
WriteMethod write_mACDLERowStatus;
WriteMethod write_mACRowStatus;
WriteMethod write_lLCDLERowStatus;
WriteMethod write_lLCCLPMRowStatus;
WriteMethod write_lLCCOPMRowStatus;
WriteMethod write_lLCStationLLCName;
WriteMethod write_lLCStationSupportedServicesTypes;
WriteMethod write_lLCStationType1AcknowledgeTimeoutValue;
WriteMethod write_lLCStationType1MaximumRetryCount;
WriteMethod write_lLCStationMaximumPDUN3;
WriteMethod write_lLCStationMaximumRetransmissions4;
WriteMethod write_lLCStationReceiveVariableLifetime;
WriteMethod write_lLCStationTransmitVariableLifetime;
WriteMethod write_lLCStationType3AcknowledgeTimeoutValue;
WriteMethod write_lLCStationBufferSize;
WriteMethod write_lLCStationSTRIndicator;
WriteMethod write_lLCStationVersionNumber;
WriteMethod write_rDESetupAgingEnabled;
WriteMethod write_rDESetupAgingValue;
WriteMethod write_rDESetupEnableType2Reset;
WriteMethod write_rDESetupMaximumRouteDescriptors;
WriteMethod write_rDESetupMaximumResponseTime;
WriteMethod write_rDESetupMinimumPDUSize;
WriteMethod write_rDESetupRDEHold;
WriteMethod write_rDESetupRDEReplace;
WriteMethod write_rDESetupResetOnTestEnabled;
WriteMethod write_lLCConnectionlessName;
WriteMethod write_lLCConnectionlessMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnection2Name;
WriteMethod write_lLCConnection2MaximumRetransmissions;
WriteMethod write_lLCConnection2ReceivedWindowSize;
WriteMethod write_lLCConnection2SendWindowSize;
WriteMethod write_lLCConnection2AcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2BusyStateTimeoutValue;
WriteMethod write_lLCConnection2PBitTimeoutValue;
WriteMethod write_lLCConnection2RejectTimeoutValue;
WriteMethod write_lLCConnection2Route;
WriteMethod write_lLCConnection2KStep;
WriteMethod write_lLCConnection2MaxSendWindowSize;
WriteMethod write_lLCConnection2OptionalTolerationIPDUs;
WriteMethod write_lLCConnection2AdministrativeState;
WriteMethod write_lLCConnection2AlarmStatus;
WriteMethod write_lLCConnection2IVMOMaximumRetransmissions;
WriteMethod write_lLCConnection2IVMOReceivedWindowSize;
WriteMethod write_lLCConnection2IVMOSendWindowSize;
WriteMethod write_lLCConnection2IVMOAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2IVMOBusyStateTimeoutValue;
WriteMethod write_lLCConnection2IVMOBitTimeoutValue;
WriteMethod write_lLCConnection2IVMORejectTimeoutValue;
WriteMethod write_lLCConnection2IVMORoute;
WriteMethod write_lLCConnection2IVMOKStep;
WriteMethod write_lLCConnection2IVMOMaxSendWindowSize;
WriteMethod write_lLCConnection2IVMOOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckReceiveResources;
WriteMethod write_lLCConnectionlessAckIVMOMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckIVMOMaximumRetransmissions;
WriteMethod write_lLCConnectionlessAckIVMORowStatus;
WriteMethod write_networkEntityTitles;
WriteMethod write_networkEntitySystemTypes;
WriteMethod write_networkEntityRowStatus;
WriteMethod write_nSAPRowStatus;
WriteMethod write_cLNSAdministrativeState;
WriteMethod write_cLNSSupportedProtocols;
WriteMethod write_cLNSOperationalSystemType;
WriteMethod write_cLNSMaximumLifetime;
WriteMethod write_cLNSEnableChecksum;
WriteMethod write_cLNSRowStatus;
WriteMethod write_cONSAdministrativeState;
WriteMethod write_cONSOperationalSystemType;
WriteMethod write_cONSRowStatus;
WriteMethod write_x25PLEIVMO_DCERowStatus;
WriteMethod write_permanentVirtualCircuitRowStatus;
WriteMethod write_switchedVirtualCallRowStatus;
WriteMethod write_virtualCall_DTERowStatus;
WriteMethod write_dSeriesRowStatus;
WriteMethod write_neighbourSNPAAddress;
WriteMethod write_neighbourSystemIds;
WriteMethod write_adjacencyRowStatus;
WriteMethod write_destinationDefaultMetricPathCost;
WriteMethod write_destinationDefaultMetricOutputAdjacencies;
WriteMethod write_destinationDelayMetricPathCost;
WriteMethod write_destinationDelayMetricOutputAdjacencies;
WriteMethod write_destinationExpenseMetricPathCost;
WriteMethod write_destinationExpenseMetricOutputAdjacencies;
WriteMethod write_destinationErrorMetricPathCost;
WriteMethod write_destinationErrorMetricOutputAdjacencies;
WriteMethod write_reachableAddressPrefix;
WriteMethod write_reachableAddressMappingType;
WriteMethod write_reachableAddressDefaultMetric;
WriteMethod write_reachableAddressDelayMetric;
WriteMethod write_reachableAddressExpenseMetric;
WriteMethod write_reachableAddressErrorMetric;
WriteMethod write_reachableAddressDefaultMetricType;
WriteMethod write_reachableAddressDelayMetricType;
WriteMethod write_reachableAddressExpenseMetricType;
WriteMethod write_reachableAddressErrorMetricType;
WriteMethod write_reachableAddressAdministrativeState;
WriteMethod write_reachableAddressSNPAAddresses;
WriteMethod write_reachableAddressSNPAMask;
WriteMethod write_reachableAddressSNPAPrefix;
WriteMethod write_reachableAddressRowStatus;
WriteMethod write_sLPConnectionDefaultInterfaceType;
WriteMethod write_sLPConnectionDefaultK;
WriteMethod write_sLPConnectionDefaultN1;
WriteMethod write_sLPConnectionDefaultN2;
WriteMethod write_sLPConnectionDefaultSequenceModulus;
WriteMethod write_sLPConnectionDefaultT1Timer;
WriteMethod write_sLPConnectionDefaultT2Timer;
WriteMethod write_sLPConnectionDefaultT3Timer;
WriteMethod write_sLPConnectionDefaultT4Timer;
WriteMethod write_lLCConnection2DefaultMaximumRetransmissions;
WriteMethod write_lLCConnection2DefaultReceivedWindowSize;
WriteMethod write_lLCConnection2DefaultSendWindowSize;
WriteMethod write_lLCConnection2DefaultAcknowledgeTimeoutValue;
WriteMethod write_lLCConnection2DefaultBusyStateTimeoutValue;
WriteMethod write_lLCConnection2DefaultPBitTimeoutValue;
WriteMethod write_lLCConnection2DefaultRejectTimeoutValue;
WriteMethod write_lLCConnection2DefaultRoute;
WriteMethod write_lLCConnection2DefaultKStep;
WriteMethod write_lLCConnection2DefaultMaxSendWindowSize;
WriteMethod write_lLCConnection2DefaultOptionalTolerationIPDUs;
WriteMethod write_lLCConnectionlessAckDefaultMaximumLLCInformationFieldSize;
WriteMethod write_lLCConnectionlessAckDefaultMaximumRetransmissions;
#endif				/* __LOCAL_DLMIB_H__ */
