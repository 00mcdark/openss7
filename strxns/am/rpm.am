# vim: ft=automake
# =============================================================================
# 
# @(#) $RCSfile: rpm.am,v $ $Name:  $($Revision: 0.9.2.36 $) $Date: 2005/01/27 08:01:48 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2005  OpenSS7 Corporation <http://www.openss7.com>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, write to the Free Software Foundation, Inc., 675 Mass
# Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any success regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2005/01/27 08:01:48 $ by $Author: brian $
#
# =============================================================================

if PUBLIC_RELEASE

tardir = $(PACKAGE_TARNAME)-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)

$(tardir).lsm: $(PACKAGE_TARNAME).lsm
	cat $< > $@

LSM = $(tardir).lsm $(PACKAGE_TARNAME).lsm

else

tardir = $(PACKAGE_TARNAME)-bin-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)

LSM =

endif

EXTRA_DIST += $(LSM)

ALL_LOCAL += $(LSM)

RPM_ARCHIVES = $(tardir).tar.gz $(tardir).tar.bz2

if BUILD_RPMS

#
#   These are some rules that I use for generating source and binary RPMs
#   using automake.  I need to package releases using RPM.  The following
#   rules accomplish that for most packages.
#

RPMFLAGS  = -vv
SRPMFLAGS = $(RPMFLAGS) --nodeps

RPMICONS = \
	--define "_gif_icon $(PACKAGE_TARNAME).gif" \
	--define "_xpm_icon $(PACKAGE_TARNAME).xpm"

RPMOPTS = \
	--define "__source_payload w9.bzdio" \
	--define "__binary_payload w9.bzdio" \
	--define "_topdir $(PACKAGE_RPMTOPDIR)" \
	$(PACKAGE_OPTIONS)

RPMBOPTS = \
	--define "extrarelease $(PACKAGE_RPMEXTRA)" \
	--define "distribution $(PACKAGE_RPMDIST)" \
	--define "_gif $(PACKAGE_TARNAME).gif" \
	--define "_xpm $(PACKAGE_TARNAME).xpm" \
	$(RPMOPTS)


RPMSOPTS = \
	--define "_signature gpg" \
	--define "_gpg_path $(GNUPGHOME)" \
	--define "_gpg_name $(GNUPGUSER)" \
	--define "_gpgbin $(GPG)" \
	$(RPMOPTS)


RPMTARGET = $(target)

EXTRA_DIST += $(PACKAGE_TARNAME).spec $(PACKAGE_TARNAME).gif $(PACKAGE_TARNAME).xpm

#
#   This builds an SRPM for the current target.  Note: rpm demands icon in
#   current directory
#
srpm-am:
	$(MAKE) $(AM_MAKEFLAGS) distdir='$(tardir)' dist
	$(mkinstalldirs) $(PACKAGE_RPMTOPDIR)/BUILD $(PACKAGE_RPMTOPDIR)/SRPMS $(PACKAGE_RPMTOPDIR)/SPECS $(PACKAGE_RPMTOPDIR)/SOURCES $(PACKAGE_RPMTOPDIR)/RPMS
	cp -pf ./$(tardir).tar.bz2 $(PACKAGE_RPMTOPDIR)/SOURCES
	cp -pf $(top_srcdir)/$(PACKAGE_TARNAME).gif $(PACKAGE_RPMTOPDIR)/SOURCES
	cp -pf $(top_srcdir)/$(PACKAGE_TARNAME).xpm $(PACKAGE_RPMTOPDIR)/SOURCES
	cp -pf $(PACKAGE_TARNAME).spec $(PACKAGE_RPMTOPDIR)/SPECS
	$(RPMBUILD) -bs $(SRPMFLAGS) $(AM_SRPMFLAGS) $(RPMOPTS) $(RPMICONS) --target $(target) -- $(PACKAGE_TARNAME).spec

#
#   This is the type of thing that needs to be included in the master makefile
#   to build rpms for the current target, we also build any defined
#   AM_RPMTARGETS
#
all-rpms: srpm
	@targets="$(RPMTARGET) $(AM_RPMTARGETS)" ; \
	for t in $$targets ; do \
		echo "$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --target $$t --" $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm; \
		$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --target $$t -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm; \
	done

lis-rpms:
	$(MAKE) $(AM_MAKEFLAGS) RPMBOPTS='$(RPMBOPTS) --define "_with_lis --with-lis"' all-rpms

lfs-rpms:
	$(MAKE) $(AM_MAKEFLAGS) RPMBOPTS='$(RPMBOPTS) --define "_with_lfs --with-lfs"' all-rpms

AM_RPMSMAKETARGETS =

if WITH_LIS
AM_RPMSMAKETARGETS += lis-rpms
endif
if WITH_LFS
AM_RPMSMAKETARGETS += lfs-rpms
endif
if WITH_LIS
else
if WITH_LFS
else
AM_RPMSMAKETARGETS += all-rpms
endif
endif

rpms-am: $(AM_RPMSMAKETARGETS)

sign-am:
	@archives="$(RPM_ARCHIVES)" ; \
	for f in $$archives ; do \
		if test ! -f $$f ; then \
			$(MAKE) $(AM_MAKEFLAGS) srpm || :; \
			break ; \
		fi ; \
	done ; \
	if test ! -f $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm ; then \
		$(MAKE) $(AM_MAKEFLAGS) srpm || :; \
	fi ; \
	for f in $$archives ; do \
		if test -f $$f ; then \
			rm -f -- $$f.asc ; \
			user="$(GNUPGUSER)" ; user="$${user:+ -u }$$user" ; \
			home="$(GNUPGHOME)" ; home="$${home:+ --homedir }$$home" ; \
			echo "$(GPG) -ba$$user$$home -- $$f" ; \
			$(GPG) -ba$$user$$home -- $$f || :; \
		fi ; \
	done ; \
	if test -f $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm ; then \
		echo "$(RPM) --resign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm" ; \
		$(RPM) --resign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm || :; \
	fi

#
#   Note that older rpms (particularly those used by SuSE) are too stupid to handle the --with and
#   --without popt syntax, so we have to expand them to --defines.
#
all-rebuild:
	@if test ! -f $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm ; then \
		$(MAKE) $(AM_MAKEFLAGS) srpm ; \
	fi ; \
	kernels="`( find $(DESTDIR)/lib/modules -type d -name '2\.4\.*' | sort -r ) 2>/dev/null`" ; \
	targets="$(RPMTARGET) $(AM_RPMTARGETS)" ; \
	for t in $$targets ; do \
		for k in $$kernels ; do \
			k=`basename $$k` ; \
			if test -e $(DESTDIR)/lib/modules/$$k/build/Makefile ; then \
				echo "$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --define \"_without_tools --without-tools\" --define \"_kversion $$k\" --target $$t -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm" ; \
				$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --define "_without_tools --without-tools" --define "_kversion $$k" --target $$t -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm || :; \
			fi ; \
		done ; \
		echo "$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --define \"_without_modules --without-modules\" --define \"_kversion $$k\" --target $$t -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm" ; \
		$(RPMBUILD) --rebuild $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMBOPTS) --define "_without_modules --without-modules" --define "_kversion $$k" --target $$t -- $(PACKAGE_RPMTOPDIR)/SRPMS/$(tardir).src.rpm || :; \
	done

lis-rebuild:
	$(MAKE) $(AM_MAKEFLAGS) RPMBOPTS='$(RPMBOPTS) --define "_with_lis --with-lis"' all-rebuild || :

lfs-rebuild:
	$(MAKE) $(AM_MAKEFLAGS) RPMBOPTS='$(RPMBOPTS) --define "_with_lfs --with-lfs"' all-rebuild || :

AM_REBUILDMAKETARGETS =

if WITH_LIS
AM_REBUILDMAKETARGETS += lis-rebuild
endif
if WITH_LFS
AM_REBUILDMAKETARGETS += lfs-rebuild
endif
if WITH_LIS
else
if WITH_LFS
else
AM_REBUILDMAKETARGETS += all-rebuild
endif
endif

rebuild-am: $(AM_REBUILDMAKETARGETS)

resign-am: sign
	@list="`find $(PACKAGE_RPMTOPDIR)/RPMS -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
	if test -z "$$list" ; then \
		$(MAKE) $(AM_MAKEFLAGS) rebuild ; \
		list="`find $(PACKAGE_RPMTOPDIR)/RPMS -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
		if test -z "$$list" ; then \
			exit 1 ; \
		fi ; \
	fi ; \
	echo "$(RPM) --resign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $$list" ; \
	$(RPM) --resign $(RPMFLAGS) $(AM_SRPMFLAGS) $(RPMSOPTS) -- $$list

EXTRA_DIST += .rpmepoch .rpmrelease

else

srpm-am:
	$(MAKE) $(AM_MAKEFLAGS) distdir='$(tardir)' dist

rpms-am: srpm

sign-am:
	@archives="$(RPM_ARCHIVES)" ; \
	for f in $$archives ; do \
		if test ! -f $$f ; then \
			$(MAKE) $(AM_MAKEFLAGS) srpm ; \
			break ; \
		fi ; \
	done ; \
	for f in $$archives ; do \
		if test -f $$f ; then \
			rm -f -- $$f.asc ; \
			user="$(GNUPGUSER)" ; user="$${user:+ -u }$$user" ; \
			home="$(GNUPGHOME)" ; home="$${home:+ --homedir }$$home" ; \
			echo "$(GPG) -ba$$user$$home -- $$f" ; \
			$(GPG) -ba$$user$$home -- $$f ; \
		fi ; \
	done

rebuild-am:
	@archives="$(RPM_ARCHIVES)" ; \
	for f in $$archives ; do \
		if test ! -f $$f ; then \
			$(MAKE) $(AM_MAKEFLAGS) srpm ; \
			break ; \
		fi ; \
	done

resign-am: sign

endif

clean-lsms:

clean-archives:

clean-rpms:

clean-sign:

distclean-lsms:
	@if test -n "$(LSM)" ; then \
		echo "rm -f -- $(LSM)" ; \
		rm -f -- $(LSM) ; \
	fi

distclean-archives:
	@if test -n "$(DIST_ARCHIVES)" ; then \
		echo "rm -f -- $(DIST_ARCHIVES)" ; \
		rm -f -- $(DIST_ARCHIVES) ; \
	fi

distclean-rpms:
	@if test -n "$(PACKAGE_RPMTOPDIR)" ; then \
		topdir="$(PACKAGE_RPMTOPDIR)/" ; \
	else \
		topdir="./" ; \
		echo "rm -fr -- BUILD RPMS SOURCES" ; \
		rm -fr -- BUILD RPMS SOURCES ; \
	fi ; \
	if test -d $${topdir}RPMS ; then \
		list="`find $${topdir}RPMS -name '$(PACKAGE_TARNAME)-*-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE)$(PACKAGE_RPMEXTRA).*.rpm' 2>/dev/null`" ; \
		for f in $$list ; do \
			echo " rm -f -- $$f" ; \
			rm -f -- $$f ; \
		done ; \
	fi
	@archives="$(RPM_ARCHIVES)" ; \
	for f in $$archives ; do \
		echo " rm -f -- $$f" ; \
		rm -f -- $$f ; \
	done

distclean-srpm:
	@if test -n "$(PACKAGE_RPMTOPDIR)" ; then \
		topdir="$(PACKAGE_RPMTOPDIR)/" ; \
	else \
		topdir="./" ; \
		echo "rm -fr -- SPECS SRPMS" ; \
		rm -fr -- SPECS SRPMS ; \
	fi
	rm -f -- $(PACKAGE_TARNAME).gif
	rm -f -- $(PACKAGE_TARNAME).xpm

distclean-sign:
	@archives="$(RPM_ARCHIVES)" ; \
	for f in $$archives ; do \
		echo " rm -f -- $$f.asc" ; \
		rm -f -- $$f.asc ; \
	done

maintainer-clean-lsms:
	@if test -n "$(srcdir)/$(LSM)" ; then \
		echo " rm -f -- $(srcdir)/$(LSM)" ; \
		rm -f -- $(srcdir)/$(LSM) ; \
	fi

maintainer-clean-archives:
	rm -f -- *.gz *.bz2

maintainer-clean-rpms:
	rm -rf -- BUILD RPMS SOURCES

maintainer-clean-srpm:
	rm -rf -- SPECS SRPMS
	@if test -n "$(PACKAGE_RPMTOPDIR)" ; then \
		topdir="$(PACKAGE_RPMTOPDIR)/" ; \
	else \
		topdir="./" ; \
		echo "rm -fr -- SPECS SRPMS" ; \
		rm -fr -- SPECS SRPMS ; \
	fi ; \
	if test -d $${topdir}SRPMS ; then \
		list="`find $${topdir}SRPMS -name '$(PACKAGE_TARNAME)-$(PACKAGE_VERSION)-$(PACKAGE_RELEASE).src.rpm' 2>/dev/null`" ; \
		for f in $$list ; do \
			echo " rm -f -- $$f" ; \
			rm -f -- $$f ; \
		done ; \
	fi

maintainer-clean-sign:
	rm -f -- *.asc

CLEAN_LOCAL += clean-lsms clean-archives clean-rpms clean-sign

DISTCLEAN_LOCAL += distclean-lsms distclean-archives distclean-srpm distclean-rpms distclean-sign

MAINTAINER_CLEAN_LOCAL += maintainer-clean-lsms maintainer-clean-archives maintainer-clean-srpm \
	maintainer-clean-rpms maintainer-clean-sign

.PHONY: srpm rpms all-rpms lis-rpms lfs-rpms sign rebuild all-rebuild lis-rebuild lfs-rebuild resign \
	clean-lsms clean-archives clean-rpms clean-sign distclean-lsms distclean-archives \
	distclean-srpm distclean-rpms distclean-sign maintainer-clean-lsms \
	maintainer-clean-archives maintainer-clean-srpm maintainer-clean-rpms maintainer-clean-sign

# vim: ft=automake
