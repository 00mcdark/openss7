OpenSS7 -- kernel module notes.  2011-02-12
$Id: NOTES.kmod,v 1.1.2.2 2011-03-17 07:01:26 brian Exp $
Copyright (c) 2008-2011  Monavacon Limited. <http://www.monavacon.com/>
Copyright (c) 2001-2008  OpenSS7 Corporation. <http://www.openss7.com/>
Copyright (c) 1997-2001  Brian Bidulock <bidulock@openss7.org>
See the end for copying conditions (for this file).


Kernel Upgrades:
================

Weak Updates
------------

On recent distributions, kernel modules can be updated automatically
using the kABI method.  This method is applicable to all RPM-based
distributions.  The method uses kernel symbol and symset 'Requires' and
'Provides' capabilities to determine the compatability of kernel modules
with an upgraded kernel (typically security updates).  The scripts

  /sbin/weak-modules (on redhat)
  /usr/lib/module-init-tools/weak-modules  (on SuSE)
  /usr/lib/module-init-tools/weak-modules2 (on SuSE)

are used.  OpenSS7 kernel modules cannot have weak-updates applied.  This
is because, unbeknownst to the kABI approach, our kernel modules may be
accessing kernel symbols inside the kernel by address (particularly the
specfs.ko module).  Therefore, the weak update will update exported
kernel symbols but will break non-exported ones.

RedHat Approach:

The fedora/redhat form (weak-modules) only performs weak updates for
kernel modules that are in /lib/modules/$(uname -r)/extra.  Because we
do not install our kernel modules in extra, the fedora/redhat form will
not attempt to perform weak-updates on our (openss7) modules.

The fedora/redhat form (weak-modules) will, however, attempt to perform
weak updates on kernel modules (whether under RPM or not) that exist in
the /lib/modules/$(uname -r)/extra subdirectory.  However, to resolve
whether a given kernel supports the weak update, the symbols from
/boot/symvers-$(uname r).gz (i.e. provided "by the kernel and mainline
modules") are checked against the symbols from the kernel module
acquired using /sbin/modprobe with the --dump-modversions flag.  The
issue here is that the /boot/symvers-$(uname -r).gz is simply a
compressed form of the Module.symvers file generated when the kernel and
its associated modules are built.  Therefore, if this file is not
supplemented with STREAMS symbols, modules that depend on STREAMS
symbols will simply not be updated.  Fedora/redhat provide the symvers
file in the kernel package, so it should always be available when weak
updates are performed.  (Weak updates are normally performed in the
%postin script in the kernel rpm package.)

Therefore, to ensure that the weak-modules process is begin performed
correctly, it is necessary that we slip STREAMS symbols into the
/boot/symvers-$(uname -r).gz file.  This can be accomplished by using a
%triggerin and %triggerun trigger script.  When a kernel is installed,
the openss7-kernel package triggerin script is triggerred after the
kernel files have been installed and any %post script run for the
kernel.  This %post kernel script will include running weak-modules that
will fail for STREAMS modules.  When the openss7-kernel %triggerin
script is run, we strap our Module.symvers symbols into
/boot/symvers-$(uname -r).gz and rerun weak-modules to peform a weak
module update on any STREAMS modules.  If /boot/symvers-$(uname -r).gz
does not exist, we can create it by concatenating our System.symvers and
Module.symvers files from the openss7-kernel package.  We used to place
these files in the openss7-devel-kernel package, but they need to now be
moved to the openss7-kernel package.

SuSE Approach:

The SuSE Code 11 KMP form (weak-modules2) is somewhat different in that
it uses an rpm search on "*-kmp-$flavor" to determine the install kernel
modules that are suitable for weak-updates.  To keep the SuSE version
from performing weak-updates on our kernel module sub-package, simply do
not name it in accordance with the SuSE KMP conventions.

The SuSE Code 10 form (weak-modules) is similary to that of the RedHat
approach.  It performs weak updates for kernel modules that are in
/lib/modules/$(uname -r)/{extra,updates}.  Because we do not install or
kernel modules in {extra,updates}, the SuSE Code 10 form will not
attempt to perform weak-updates on our (openss7) modules.

The SuSE Code 11 KMP form (weak-modules2) will, however, attempt to
perform weak updates on kernel modules that follow the SuSE KMP
specification.  This includes special naming and only updates modules
that are installed under RPM and have a name of the form
'*-kmp-$flavor'.  It does not matter, however, whether the kernel
modules themselves are installed in the 'extra' or 'updates' module
subdirectory.  To check whether modules are suitable for weak update,
/sbin/depmod is used with the special SuSE '-E' flag which is fed the
/boot/symvers-$(uname -r).gz file, or, in the absence of that file, the
'-F' flag is used with the /boot/System.map-$(uname -r) file.  Now, of
course, the System.map file only contains the kernel exported by the the
kernel proper and none of the associated modules.  This is only a
problem when a KMP uses symbols from modules of the kernel instead of
the kernel proper.

Therefore, to ensure that the weak modules process is being performed
correctly, it is necessary that we slip STREAMS symbols into the
/boot/symvers-$(uname -r).gz file.  This can eb accomplished by using a
%triggerin and %triggerun trigger script.  When a kernel or kernel-devel
package is installed, the openss7-kernel or openss7-kernel-devel package
triggerin script is triggered after the kernel files have been installed
and any %post script run for the kernel.  This %post kernel script will
include any running weak-modules2 that will ignore STREAMS modules
(unless they are also KMP modules).  When the openss7-kernel %triggerin
script is run, create the /boot/symvers-$(uname -r).gz file using the
System.symvers and Modules.symvers files from the openss7-kernel
package and run the Code 11 weak-updates2 again so that any KMP modules
depending on STREAMS will be weak updated.  Also, when the
openss7-kernel-devel %triggerin script is run, recreate the
/boot/symvers-$(uname -r).gz file, because our version will be
overwritten by the installation of the kernel-devel package.

The SuSE Code 10 form (weak-modules) will, however, attempt to perform
weak updates on kernel modules (whether under RPM or not) that exist in
the /lib/modules/$(uname -r)/extra subdirectory.  However, to resolve
whether a given kernel modules supports the weak update, the symbols
from /boot/symvers-$(uname -r).gz (i.e. provided "by the kernel and
mainline modules") are checked against the symbols from the kernel
module acquired using /sbin/modeprobe with the --dump-modversions flag.
The issue here is that the /boot/symvers-$(uname -r).gz is simply a
compressed form of the Module.symvers file generated when the kernel and
its associated modules are built.  Therefore, if this file is not
supplemented with STREAMS symbols, modules that depend on STREAMS
symbols will simply not be updated.  A wrinkle is that SuSE Code 11 has
the /boot/symvers-$(uname -r).gz file provided by the kernel-devel
package instead of the kernel package.  Without the symvers file
present, weak-updates will simply not be performed in this way.

Therefore, to ensure that the weak modules process is begin performed
correctly, it is necessary that we slip STREAMS symbols into the
/boot/symvers-$(uname -r).gz file.  This can be accomplished by using a
%triggerin and %triggerun trigger script.  When a kernel is installed,
the openss7-kernel package triggerin script is triggerred after the
kernel files have been installed and any %post script run for the
kernel.  This %post kernel script will include running weak-modules2
that will ignore STREAMS modules (unless they are also KMP modules, see
above).  When the openss7-kernel %triggerin script is run, we strap our
Module.symvers symbols into /boot/symvers-$(uname -r).gz and run the
Code 10 weak-modules to peform a weak module update on any STREAMS
modules.  We must also rerun weak-modules2 to weak-update any KMP
modules that exist in the /lib/modules/$(uname -r)/extra subdirectory,
as the SuSE weak-modules script only considers the 'updates'
subdirectory.  If /boot/symvers-$(uname -r).gz does not exist (because
the kernel-devel package is not loaded), we can create it by
concatenating our System.symvers and Module.symvers files from the
openss7-kernel package.  (We used to place these files in the
openss7-devel-kernel package, but they need to now be moved to the
openss7-kernel package.)

Kernel Updates:
---------------

There are two fundamental ways of signalling updates to kernel modules
when kernels are updated: the Fedora way and the SuSE way.

RedHat Approach:

The Fedora/RHEL/CentOS way is to use the yum-fedorakmod (now, yum-kmod)
plugin to yum.  The plugin works as follows:

- To find available kernel modules it finds all available packages in
  all repositories that provide 'kernel-modules'.

- To find installed kernel modules it finds all packages that provide
  'kernel-modules'.

- When a kernel is added, it attempts to also resolve all installed
  kernel modules against the new kernel considering all available kernel
  modules.  If it cannot resolve, the resolution failure is provided and
  the kernel is not updated.

There are two configuration options for yum-kmod: pinkernels and
installforallkernels.  The default for both is unset.

- pinkernels, when set, requires that there be a kernel module package
  for the new kernel that is the same as each kernel module package that
  was built _with_ the running kernel.  This does not affect us because
  this is only for in-tree modules.

- installforallkernels, when set, attempts to upgrade kernel modules for
  all installed kernels.  This likely does no affect us either.

The wrinkles with the fedora kmod approach are as follows:

- The rpm package name must be the same for all kernels.  This means
  that the kernel version must be embedded in the rpm package version.

- Because the kernel version is in the rpm package version, rpm packages
  cannot be upgraded without removing the package for an older kernel
  version.  Therefore, yum was set to always install and not upgrade any
  rpm package providing 'kernel-modules'.

- The approach places 'Provides: %{name}-kmod' and 'Provides:
  kmod-%{name}' into the kmod rpm package.  I don't know what this is
  for.

- Many kernel module packages (such as for CentOS 5.5) do not place the
  kernel version in the %{version} or %{release}.  This appears to mean
  that only one set of kernel modules (of the same version) are possible
  in each of the 'main' and 'updates' repositories.  We don't really
  want that and would prefer to have a single repository.

- We will need to require that yum-kmod (or yum-fedorakmod) is
  installed.  We can put this dependency in our openss7-repo rpm, such
  as 'Requries: yum-kmod', or/also in the openss7-kernel package.

- another possible approach is providing our own YUM plugin in the
  openss7-repo package.

SuSE Approach:

For Code 9, SuSE used the kernel-update-tool behind YaST2 to perform a
similary approach.  For Code 10 and 11, this was integrated into
libzypp.

The SuSE approach appears to use the same upgrade resolution approach as
RedHat, which is embedding the kernel version in the version string for
the modules rpm package.  However, the SuSE approach does not use
'kernel-modules'.  Some notes:

- recent code version put 'Provides: multiversion(kernel)' in KMP
  packages.  There is a corresponding option (in /etc/zypp/zypp.conf)
  named 'multiversion'.  This option identifies which rpm packages are
  permitted to have multiple versions installed.  It can be set to
  'provides:multiversion(kernel)' to permit multiple versions of kernels
  and multiple versions of any package that provides
  multiversion(kernel).  This, therefore, applies to any kernel module
  package, whether it uses weak-updates or not.  Therefore, we always
  define 'Provides: multiversion(kernel)'.

  Note that, by default, SuSE does not load more that one kernel
  version at a time.  There are several flavors for each version of
  kernel, but SuSE does not normally load more than one version.
  Setting the multiversion = kernel, then more than one version of
  kernel will be loaded, but that does not handle KMP or other kernel
  modules.  So, when set to other than the default, multiversion should
  be set to 'provides:multiversion(kernel)' to permit multiple versions
  of openss7-kernel modules to be loaded.  This is similar to the Fedora
  approach of always installing (instead of upgrading) packages that
  provide 'kernel-modules'.

- older code versions put 'Requires: kernel%{kernel_flavor}' and newer
  code versions put 'Enhances: kernel%{kernel_flavor}', where the
  'Enhances' keyword is new only to the SuSE rpm program.

- all code versions include 'Provides: %{name}-kmp%{kernel_flavor}' and
  'Provides: %{name}-kmp'.

- all code version require that the version string be
  %{version}_%{kernel_string}, where %{kernel_string} is the kernel
  %version, without the flavor, and y'-'_'.

Summing it all up:
------------------

The %{version} of the kernel modules package will contain the kernel
version and not the %{name} as previously.  This is so that yum and
zypper can see an upgrade path from one kernel version of the modules to
another.

'Provides: kernel-modules = %{_kversion}' is used to signal yum that
multiple versions are to be maintained for the same package.  Yum does
not necessarily need yum-kmod to do this.

'Provides: multiversion(kernel)' are used to signal yum and zypper that
mutliple versions are to be maintained for the same package.


Detailed description of yum-kmod:

- the actions are taken as a post-resolve hook.

- get  a list of installed kernels and a list of installed modules.

- the list of installed kernels is any installed RPMs that provide
  kernel-%{arch} for any supported architecture.

- the list of installed modules is a list of any installed RPMs that
  provide 'kernel-modules'.

- For each member in the transaction, if the member is a kernel and the
  kernel is being removed, remove the kernel from the list of installed
  kernels.  If the member provides 'kernel-modules' and is to be
  installed or upgraded to, add the package from the transaction into the
  new modules packages list.  If the member is a kernel and is to be
  installed or upgraded to, add the kernel to the new kernels list.

- When the 'pinkernels' option is set, the intent is to neither install
  nor upgrade a new kernel until matching modules are available.

  For all of the packages that require a kernel (or kernel symbol set)
  for an installed kernel, search for 'Provides: %{name}-kmod' and use
  %{name}-kmod as the name of the package regardless of what its real
  %name may be.  For each kernel to be installed, ensure that there is a
  package that provides %{name}-kmod and requires the new kernel (or
  kernel symbol set) in the transaction set.  Otherwise, the new kernel
  is removed from the update list.

  Note that this means that 'yum update kernel' is likely to always fail
  because it does not have the necessary kernel modules to be updated as
  well; however, 'yum update' will succeed to install the new kernel
  only when there are updates available for the corresponding kernel
  modules as well.  This is ok.  We need to set pinkernels in
  /etc/yum/yum-plugins.d/kmod.conf.

- When the 'installallkmods' option is set, collect all of the kmod
  names (%(name)-kmod) for the entire transaction set.  If the kmod name
  is in any available modules, mark them as interesting.  If there are
  interesting modules that are not already installed for a kernel, mark
  them for installation.  This has the effect of adding kernel modules
  that become available for installed kernels to be installed as well.

  We probably want to set the 'installallkmods' option as well.

- For each new module in the transaction resulting from the actions
  above, if the new module requires the same kernel (kernel-%{arch}) or
  requires any of the same kernel symbol sets, 'kernel(', as an already
  installed module of the same name, then remove the old version of the
  module.  (Remember the default for packages providing 'kernel-modules'
  is 'install' rather than 'upgrade'.  Removing the old version in this
  case, simply changes that back to an upgrade.)

  Note that this has significant ramifications on how we build kernel
  modules.  The assumption seems to be that if we have any kernel symbol
  sets in our requirements, then we are a kABI module.  Our openss7
  kernel module packages should then NOT CONTAIN ANY KERNEL SYMBOL SET
  definitions.  This might be a bug in yum-kmod, but there is nothing we
  can do.

Tricks:
-------

Tricks for keeping OpenSS7 kernel modules from not being weak-updated
using RH weak-modules or SuSE weak-modules2 from module-init-tools:

-----

=========================================================================

 Copyright (c) 2008-2011  Monavacon Limited  <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation  <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian Bidulock  <bidulock@openss7.org>

 All Rights Reserved.

 Permission is granted to make and distribute verbatim copies of this
 manual provided the copyright notice and this permission notice are
 preserved on all copies.

 Permission is granted to copy and distribute modified versions of this
 manual under the conditions for verbatim copying, provided that the
 entire resulting derived work is distributed under the terms of a
 permission notice identical to this one

 Since the Linux kernel and libraries are constantly changing, this
 manual page may be incorrect or out-of-date.  The author(s) assume no
 responsibility for errors or omissions, or for damages resulting from
 the use of the information contained herein.  The author(s) may not
 have taken the same level of care in the production of this manual,
 which is licensed free of charge, as they might when working
 professionally.

 Formatted or processed versions of this manual, if unaccompanied by the
 source, must acknowledge the copyright and authors of this work.

-------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
 on behalf of the U.S. Government ("Government"), the following
 provisions apply to you.  If the Software is supplied by the Department
 of Defense ("DoD"), it is classified as "Commercial Computer Software"
 under paragraph 252.227-7014 of the DoD Supplement to the Federal
 Acquisition Regulations ("DFARS") (or any successor regulations) and
 the Government is acquiring only the license rights granted herein (the
 license rights customarily provided to non-Government users).  If the
 Software is supplied to any unit or agency of the Government other than
 DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19
 of the Federal Acquisition Regulations ("FAR") (or any successor
 regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
 NASA Supplement to the FAR (or any successor regulations).

=========================================================================

 Commercial licensing and support of this software is available from
 OpenSS7 Corporation at a fee.  See http://www.openss7.com/

=========================================================================
vim: ft=README tw=72 nocindent nosmartindent formatoptions+=tcqlorn
