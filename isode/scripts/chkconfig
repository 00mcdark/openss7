#!/bin/bash
# =============================================================================
# 
# @(#) $RCSfile: chkconfig,v $ $Name: OpenSS7-0_9_2 $($Revision: 0.9.2.7 $) $Date: 2008-04-28 09:23:10 $
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# -----------------------------------------------------------------------------
#
# Last Modified $Date: 2008-04-28 09:23:10 $ by $Author: brian $
#
# =============================================================================

#
# This is a cut-down bash script version of the redhat/IRIX chkconfig command
# that also detects whether a redhat or debian style init directory exists and
# accepts the automake DESTDIR export.
#

echo='echo'
SHELL='/bin/sh'
SED='sed'

# Check that we have a working $ECHO.
if test "X$1" = X--no-reexec; then
    # Discard the --no-reexec flag, and continue
    shift
elif test "X`($ECHO '\t') 2>/dev/null`" = 'X\t'; then
    :
else
    exec $SHELL "$0" --no-reexec ${1+"$@"}
fi

if test "X$1" = X--fallback-echo ; then
    shift
    cat <<EOF
$*
EOF
    exit 0
fi

program=`$ECHO "$0" | ${SED} -e 's%^.*/%%'`
modename="$program"
reexec="$SHELL $0"

help="Try '$program --help' for more information."
mkdir="mkdir"
mv="mv -f"
rm="rm -f"

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed="${SED}"' -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'
# test EBCDIC or ASCII
case `$ECHO A|od -x` in
 *[Cc]1*) # EBCDIC based system
  SP2NL="tr '\100' '\n'"
  NL2SP="tr '\r\n' '\100\100'"
  ;;
 *) # Assume ASCII based system
  SP2NL="tr '\040' '\012'"
  NL2SP="tr '\015\012' '\040\040'"
  ;;
esac

# NLS nuisances.
# Only set LANG and LC_ALL to C if already set.
# These must not be set unconditionally because not all systems understand
# e.g. LANG=C (notably SCO).
# We save the old values to restore during execute mode.
if test "${LC_ALL+set}" = set; then
  save_LC_ALL="$LC_ALL"; LC_ALL=C; export LC_ALL
fi
if test "${LANG+set}" = set; then
  save_LANG="$LANG"; LANG=C; export LANG
fi

# Make sure IFS has a sensible default
: ${IFS=" 	"}

chkconfig_letters='abcdefghijklmnopqrstuvwxyz'
chkconfig_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
chkconfig_Letters=$strconf_letters$strconf_LETTERS
chkconfig_numbers='0123456789'
chkconfig_alphano=$strconf_Letters$strconf_numbers
chkconfig_uppercase="$SED y%*$strconf_letters%P$strconf_LETTERS%;s%[^_$strconf_alphano]%_%g"
chkconfig_tokenize="$SED s%[^a-zA-Z0-9]%_%g"

# Defaults

default_command="list"
default_filesrch=""

command=
filename=
debug=0
verbose=1

function version()
{
    if test ${show:-yes} = no ; then
	return
    fi
    cat <<EOF
$ident
Copyright (c) 2001-2007  OpenSS7 Corporation.  All Rights Reserved.
Distributed under GPL Version 3, included here by reference.
See '$program --copying' for copying permissions.
EOF
}

function usage()
{
    if test ${show:-yes} = no ; then
	return
    fi
    cat <<EOF
Usage:
    $program [options] {-l|--list} [NAME]
    $program [options] {-a|--add} NAME
    $program [options] {-d|--del} NAME
    $program [options] [{-L|--level} LEVELS] NAME <on|off|reset>
    $program [options] [{-L|--level} LEVELS] NAME
    $program {-h|--help}
    $program {-V|--version}
    $program {-C|--copying}
EOF
}

function help()
{
    if test ${show:-yes} = no ; then
	return
    fi
    usage
    cat <<EOF
Commands:
    -l, --list
    -a, --add
    -d, --del
Arguments:
    NAME
	the name of the service
Options:
    -L, --level LEVELS
	specify the levels to which the command applies
    -n, --dryrun
	don't perform any actions, just check them
    -Q, --quiet
	suppress normal output
    -D, --debug [LEVEL]
	increase or set debugging verbosity
    -v, --verbose [LEVEL]
	increase or set output verbosity
    -h, --help
	prints this usage information and exits
    -V, --version
	prints the version and exits
    -C, --copying
	prints copying permissions and exits
Environment:
    DESTDIR
	the location of the target directory
    rootdir
	the location of the root directory
EOF
}

function copying()
{
    if test ${show:-yes} = no ; then
	return
    fi
    cat <<EOF
--------------------------------------------------------------------------------
$ident
--------------------------------------------------------------------------------
Copyright (c) 2001-2007  OpenSS7 Corporation <http://www.openss7.com/>
Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>

All Rights Reserved.
--------------------------------------------------------------------------------
This program is free software; you can  redistribute  it and/or modify  it under
the terms  of the GNU General Public License  as  published by the Free Software
Foundation; version 3 of the License.

This program is distributed in the hope that it will  be useful, but WITHOUT ANY
WARRANTY; without even  the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should  have received a copy of the GNU  General  Public License  along with
this program.   If not, see <http://www.gnu.org/licenses/>, or write to the Free
Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--------------------------------------------------------------------------------
U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf
of the U.S. Government ("Government"), the following provisions apply to you. If
the Software is supplied by the  Department of Defense ("DoD"), it is classified
as "Commercial  Computer  Software"  under  paragraph  252.227-7014  of the  DoD
Supplement  to the  Federal Acquisition Regulations  ("DFARS") (or any successor
regulations) and the  Government  is acquiring  only the  license rights granted
herein (the license rights customarily provided to non-Government users). If the
Software is supplied to any unit or agency of the Government  other than DoD, it
is  classified as  "Restricted Computer Software" and the Government's rights in
the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition
Regulations ("FAR")  (or any successor regulations) or, in the cases of NASA, in
paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor
regulations).
--------------------------------------------------------------------------------
Commercial  licensing  and  support of this  software is  available from OpenSS7
Corporation at a fee.  See http://www.openss7.com/
--------------------------------------------------------------------------------
EOF
}

function syntax_error()
{
    if test ${verbose:-0} -gt 0 ; then
	$ECHO "$program: syntax error -- $1" >&2
	( usage ) >&2
    fi
    exit 2
}

function option_unrec()
{
    opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
    syntax_error "'$opt' unrecognized"
}

function option_noarg()
{
    opt=`$ECHO -n "X$1" | $Xsed -e 's|=.*||'`
    syntax_error "'$opt' does not accept an argument"
}

function option_needarg()
{
    syntax_error "'$1' requires an argument"
}

function option_after()
{
    syntax_error "'$1' cannot occur after '$2'"
}

function option_with()
{
    syntax_error "'$1' cannot occur with '$2'"
}

function args_toomany()
{
    syntax_error "excess arguments '$1'"
}

function args_toofew()
{
    syntax_error "'$1' mode needs $2 arguments"
}

# Parse our command line options once, thoroughly.
while test "$#" -gt 0 -o ":$more" != ":"
do
    if test ":$more" != ":" ; then arg="-$more" ; more= ; else arg="$1" ; shift ; fi
    # check for attached option argument
    case $arg in
	--level=* | --leve=* | --lev=* | --le=* | --L=* | \
	--verbose=* | --verbos=* | --verb=* | --ver=* | --v=* | \
	--debug=* | --debu=* | --deb=* | --de=* | --d=* )
	    optarg=`$ECHO "X$arg" | $Xsed -e 's/[-_a-zA-Z0-9]*=//'` ;;
	--*=*)
	    option_noarg $arg ;;
	-[ladQDvhVC])
	    optarg= ;;
	-[ladQDvhVC]*)
	    optarg=
	    more=`$ECHO "X$arg" | $Xsed -e 's|-[ladQDvhVC]||'`
	    eval "arg=\`$ECHO \"X$arg\" | $Xsed -e 's|$more||'\`"
	    ;;
	-[L])
	    optarg= ;;
	-[L]*)
	    optarg=`$ECHO "X$arg" | $Xsed -e 's|-[L]||'` ;;
	*)
	    optarg= ;;
    esac
    # check for optional or required option argument
    if test -n "$prev" ; then
	case $arg in
	    -*) # optional arguments not forthcoming
		case $prev in
		    debug | verbose) eval "(($prev++))" ;;
		    # the rest have required arguments
		    level)
			option_needarg $prevopt ;;
		esac
		prev= ; prevopt=
		;;
	    *) # if the previous option needs an argument, assign it.
		eval "$prev=\"\$arg\""
		prev= ; prevopt=
		continue
		;;
	esac
    fi
    # Have we seen a non-optional argument yet?
    case $arg in
	--help | --h | --Help | --H | -h | -H | -\? | --\?)
	    if test ":$comand" != ":" -a ":$command" != ":help" ; then option_after $arg --$command ; fi
	    command='help'
	    ;;
	--version | --versio | --versi | --vers | -V)
	    if test ":$comand" != ":" -a ":$command" != ":version" ; then option_after $arg --$command ; fi
	    command='version'
	    ;;
	--copying | --copyin | --copyi | --copy | --cop | --co | --c | -C)
	    if test ":$comand" != ":" -a ":$command" != ":copying" ; then option_after $arg --$command ; fi
	    command='copying'
	    ;;
	--verbose | --verbos | --verbo | --verb)
	    prevopt="$arg"
	    prev='verbose'
	    ;;
	-v)
	    ((verbose++))
	    ;;
	--verbose=* | --verbos=* | --verbo=* | --verb=*)
	    verbose="$optarg"
	    ;;
	--debug | --debu | --deb)
	    prevopt="$arg"
	    prev='debug'
	    ;;
	-D)
	    $ECHO "$program: enabling shell trace mode" 1>&2
	    set -x
	    ;;
	--debug=* | --debu=* | --deb=*)
	    debug="$optarg"
	    ;;
	--dry-run | --dryrun | --n | -n)
	    run=no
	    ;;
	--quiet | --silent | -Q)
	    show=no
	    verbose=0
	    debug=0
	    ;;
	--level | --leve | --lev | --le | --L | -L)
	    prevopt="$arg"
	    prev='level'
	    ;;
	--level=* | --leve=* | --lev=* | --le=* | --L=* | -L*)
	    level="$optarg"
	    ;;
	--list | --lis | --li | --l | -l)
	    if test ":$comand" != ":" -a ":$command" != ":list" ; then option_after $arg --$command ; fi
	    command='list'
	    ;;
	--add | --ad | --a | -a)
	    if test ":$comand" != ":" -a ":$command" != ":add" ; then option_after $arg --$command ; fi
	    command='add'
	    ;;
	--del | --de | --d | -d)
	    if test ":$comand" != ":" -a ":$command" != ":del" ; then option_after $arg --$command ; fi
	    command='del'
	    ;;
	--)
	    # end of options
	    break
	    ;;
	-*)
	    option_unrec $arg
	    ;;
	*)
	    nonopt="${nonopt}${nonopt:+ }'$arg'"
	    ;;
    esac
done

# hit end of list wanting arguments
case $prev in
    # these have optional arguments
    debug | verbose) eval "(($prev++))" ;;
    # the rest have required arguments
    level)
	option_needarg $prevopt ;;
esac

declare -a args

if test x"$nonopt${nonopt:+ }${1+$@}" != "x" ; then
    eval "args=($nonopt${nonopt:+ }${1+$@})"
else
    args=
fi

# parse non-option arguments
case ":$command" in 
    (:help|:version|:copying)
	$command
	exit 0
	;;
    (:list)
	if test ${#args[*]} -gt 1 ; then
	    args_toomany "${args[*]}"
	fi
	name="${args[0]}"
	;;
    (:add|:del)
	if test ${#args[*]} -lt 1 ; then
	    args_toofew $command 1
	fi
	if test ${#args[*]} -gt 1 ; then
	    args_toomany "${args[*]}"
	fi
	name="${args[0]}"
	;;
    (:)
	if test ${#args[*]} -gt 2 ; then
	    args_toomany "${args[*]}"
	fi
	name="${args[0]}"
	command="${args[1]}"
	case ":$command" in
	    (:) command='test' ;;
	    (:on|:off|:reset) ;;
	    (:*) syntax_error "action must be one of 'on' 'off' or 'reset', not '$command'" ;;
	esac
	if test -z "$name" ; then
	    version
	    usage
	    exit 0
	fi
	;;
    (:*)
	$ECHO "$program: fatal error" >&2
	exit 1
	;;
esac

# silently ignore any invalid levels
level_orig="$level"
level=`$ECHO "$level" | sed -e 's|[^0123456S]||g'`

# assign all defaults
case ":$command" in
    (:on|:off)
	level="${level:-345}"
	;;
    (:reset)
	level="${level:-0123456S}"
	;;
    (:test)
	level="${level:-`runlevel | sed -e 's|.*[[:space:]]||'`}"
	if test ${#level} -gt 1 ; then
	    syntax_error "levels must be one character instead of '$level'"
	fi
	;;
    (:*)
	if test -n "$level_orig" ; then
	    option_with '--level' "--$command"
	fi
	;;
esac

trace_flags=
if test $debug -gt 0 ; then
    trace_flags='x'
fi
if test $debug -gt 1 ; then
    trace_flags='vx'
fi
if test -n "$trace_flags" ; then
    chk_trace_on="set -$trace_flags"
    chk_trace_off="set +$trace_flags"
else
    chk_trace_on=
    chk_trace_off=
fi

$chk_trace_on

style='redhat'
# this is both redhat and debian style init directory
# under redhat style it is a symbolic link to /etc/rc.d/init.d
initrddir="${DESTDIR}${rootdir}/etc/rc.d/init.d"
if test ! -d $initrddir ; then
    initrddir="${DESTDIR}${rootdir}/etc/init.d"
    if test ! -d $initrddir ; then
	$ECHO "Cannot find init directory in '$initdir'" >&2
	exit 1
    fi
fi

rcddir="${DESTDIR}${rootdir}/etc/rc.d"
if test -d $rcddir ; then
    style='redhat'
else
    style='debian'
    rcddir="${DESTDIR}${rootdir}/etc"
fi

# sanity check
rcdirs=`find $rcddir -type d -a -name 'rc[0-6S].d'`
if test -z "$rcdirs" ; then
    $ECHO "Cannot find symbolic link runlevel directories '${rcddir}/rc[0-6S].d'" >&2
    exit 1
fi

case ":$style" in
    (:redhat)
	sysconfdir="${DESTDIR}${rootdir}/etc/sysconfig"
	;;
    {:debian)
	sysconfdir="${DESTDIR}${rootdir}/etc/default"
	;;
esac
if test ! -d $sysconfdir ; then
    $ECHO "Cannot find init script configuration directory '${sysconfdir}'" >&2
    exit 1
fi


# find all of the kill or start links
links=`find $rcddir -type l -a -name "[KS][0-9][0-9]$name"`

mylinks=
for link in $links ; do
    if test "$(basename $(readlink $link))" = "$name" ; then
	mylinks="${mylinks}${mylinks:+ }$link"
    fi
done

#
# tags to look for
#
#   chkconfig:
#   description:
#   config:
#   processname:
#   pidfile:
#   probe:	    (true or false, has the newer probe method)
#   hide:	    (true or false, hide from what I do not know)
#   clock:	    (probably an error in the apmd script)
#   LIC:	    (license??)
#

declare -a names
names=(`grep -l '^#[[:space:]]*chkconfig:' $initrddir/* 2>/dev/null | sed -e 's|.*/||'`)

if test -n "$name" ; then
    if test ! -f $initrddir/$name ; then
	$ECHO "error reading information on service $name: No such file or directory" >&2
	exit 1
    fi
    case " ${names[*]} " in
	(*" $name "*) ;;
	(*) $ECHO "service $name does not support chkconfig" >&2 ; exit 1 ;;
    esac
fi

if test -n "$name" ; then
# parse the headers
    cmd=`grep '^#[[:space:]]*chkconfig:' $initrddir/$name | head -1`
    cmd=`echo "$cmd" | sed -e 's|^#[[:space:]]*chkconfig:[[:space:]]*||'`
    args=( $cmd )
    slevs=`echo "${args[0]}" | sed -e 's|[^0123456S]||g'`
    sprio="${args[1]}"
    kprio="${args[2]}"
    slevs=`$ECHO "$slevs" | sed -e 's|.|& |g;s| $||'`
else
    args=()
fi

$chk_trace_off

# find all of the start links


case ":$command" in
    (:list)
	$chk_trace_on
	test -n "$name" && names=($name)
	for n in ${names[*]} ; do
	    n=`basename $n`
	    foundone=
	    badone=
	    line=`printf "%-16s" "$n"`
	    for l in 0 1 2 3 4 5 6 ; do
		if test -e $rcddir/rc${l}.d/S[0-9][0-9]$n ; then
		    line="$line`printf \"%-8s\" \"$l:on\"`"
		    foundone=yes
		elif test -e $rcddir/rc${l}.d/K[0-9][0-9]$n ; then
		    line="$line`printf \"%-8s\" \"$l:off\"`"
		    foundone=yes
		else
		    line="$line`printf \"%-8s\" \"$l:-\"`"
		    badone=yes
		fi
	    done
	    line="$line`printf \"\n\"`"
	    if test -n "$foundone" -a -z "$badone" ; then
		$chk_trace_off
		echo "$line"
		$chk_trace_on
	    fi
	done
	$chk_trace_off
	;;
    (:add)
	$chk_trace_on
	for l in 0 1 2 3 4 5 6 ; do
	    if test ! -d $rcddir/rc${l}.d ; then
		mkdir -p -- $rcddir/rc${l}.d
	    fi
	    pushd $rcddir/rc${l}.d >/dev/null
	    case " $slevs " in
		(*" $l "*)
		    [ -L S${sprio}${name} -a "$(readlink S${sprio}${name})" = ../init.d/$name ] \
		    || ln -sf ../init.d/$name S${sprio}${name} || :
		    ;;
		(*)
		    [ -L K${kprio}${name} -a "$(readlink K${kprio}${name})" = ../init.d/$name ] \
		    || ln -sf ../init.d/$name K${kprio}${name} || :
		    ;;
	    esac
	    popd >/dev/null
	done
	$chk_trace_off
	;;
    (:del)
	$chk_trace_on
	for l in 0 1 2 3 4 5 6 ; do
	    if test ! -d $rcddir/rc${l}.d ; then
		continue
	    fi
	    pushd $rcddir/rc${l}.d >/dev/null
	    case " $slevs " in
		(*" $l "*)
		    [ -L S${sprio}${name} -a "$(readlink S${sprio}${name})" = ../init.d/$name ] \
		    && rm -f -- S${sprio}${name}
		    ;;
		(*)
		    [ -L K${kprio}${name} -a "$(readlink K${kprio}${name})" = ../init.d/$name ] \
		    && rm -f -- K${kprio}${name}
		    ;;
	    esac
	    popd >/dev/null
	done
	$chk_trace_off
	;;
    (:test)
	$chk_trace_on
	cmd="$command"
	$chk_trace_off
	;;
    (:on)
	$chk_trace_on
	cmd="$command"
	$chk_trace_off
	;;
    (:off)
	$chk_trace_on
	cmd="$command"
	$chk_trace_off
	;;
    (:reset)
	$chk_trace_on
	cmd="$command"
	$chk_trace_off
	;;
esac

# =============================================================================
#
# $Log: chkconfig,v $
# Revision 0.9.2.7  2008-04-28 09:23:10  brian
# - updated script headers for release
#
# Revision 0.9.2.6  2007/08/12 18:08:02  brian
# - more header corrections
#
# Revision 0.9.2.5  2007/08/12 17:47:20  brian
# - updated script headers
#
# =============================================================================
# vim: ft=sh sw=4
