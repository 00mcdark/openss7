@c -*- texinfo -*- vim: ft=texinfo
@c =========================================================================
@c
@c @(#) $Id: install.texi,v 0.9.2.80 2008-08-02 16:39:09 brian Exp $
@c
@c =========================================================================
@c
@c Copyright (c) 2001-2008  OpenSS7 Corporation <www.openss7.com>
@c Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock@openss7.org>
@c
@c All Rights Reserved.
@c
@c Permission is granted to make and distribute verbatim copies of this
@c manual provided the copyright notice and this permission notice are
@c preserved on all copies.
@c
@c Permission is granted to copy and distribute modified versions of this
@c manual under the conditions for verbatim copying, provided that the
@c entire resulting derived work is distributed under the terms of a
@c permission notice identical to this one.
@c 
@c Since the Linux kernel and libraries are constantly changing, this
@c manual page may be incorrect or out-of-date.  The author(s) assume no
@c responsibility for errors or omissions, or for damages resulting from
@c the use of the information contained herein.  The author(s) may not
@c have taken the same level of care in the production of this manual,
@c which is licensed free of charge, as they might when working
@c professionally.
@c 
@c Formatted or processed versions of this manual, if unaccompanied by
@c the source, must acknowledge the copyright and authors of this work.
@c
@c -------------------------------------------------------------------------
@c
@c U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
@c on behalf of the U.S. Government ("Government"), the following
@c provisions apply to you.  If the Software is supplied by the Department
@c of Defense ("DoD"), it is classified as "Commercial Computer Software"
@c under paragraph 252.227-7014 of the DoD Supplement to the Federal
@c Acquisition Regulations ("DFARS") (or any successor regulations) and the
@c Government is acquiring only the license rights granted herein (the
@c license rights customarily provided to non-Government users).  If the
@c Software is supplied to any unit or agency of the Government other than
@c DoD, it is classified as "Restricted Computer Software" and the
@c Government's rights in the Software are defined in paragraph 52.227-19
@c of the Federal Acquisition Regulations ("FAR") (or any successor
@c regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
@c NASA Supplement to the FAR (or any successor regulations).
@c
@c =========================================================================
@c 
@c Commercial licensing and support of this software is available from
@c OpenSS7 Corporation at a fee.  See http://www.openss7.com/
@c 
@c =========================================================================
@c
@c Last Modified $Date: 2008-08-02 16:39:09 $ by $Author: brian $
@c
@c =========================================================================

@set pkgtype release
@set PACKAGE_CVSMODULE @value{PACKAGE}
@set package @value{PACKAGE_LCNAME}
@set pkgexample @value{PACKAGE_LCNAME}

@menu
* Downloading::			Downloading the package
* Configuration::		Configuration of the package
* Building::			Building the package
* Installing::			Installing the package
* Removing::			Removing the package
* Loading::			Loading the package
* Maintenance::			Maintaining the package
@end menu

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Downloading
@section Downloading
@cindex downloading

The @value{PACKAGE_TITLE} package releases can be downloaded from the downloads page of
@uref{http://www.openss7.org/download.html, The OpenSS7 Project}.
@ignore
The master package is currently only available as a tar ball.@footnote{At a later date this
@value{PACKAGE_TITLE} might be enhanced to build separate master package RPMs and DEBs, but as the
objective of the @value{PACKAGE_TITLE} was for development purposes, this is on the back-burner.}
@end ignore
The package is available as a binary RPM (for popular architectures) a source RPM, Debian binary DEB
and source DSC, or as a tar ball.
If you are using a browsable viewer, you can obtain the OpenSS7 release of
@command{@value{PACKAGE_NAME}} from the links in the sections that follow.

By far the easiest (most repeatable and manageable) form for installing and using @cite{OpenSS7}
packages is to download and install individual packages from binary RPM or DEB.  If binary RPMs or
DEBs are not available for your distribution, but your distribution supports @manref{rpm(1)} or
@manref{dpkg(1)}, the next best method for installing and using @cite{OpenSS7} packages is to
download and rebuild the source RPMs or DSCs.

If your architecture does not support @manpage{rpm(1)} or @manpage{dpkg(1)} at all, or you have
special needs (such as cross-compiling for embedded targets), the final resort method is to
download, configure, build and install from tarball.  In this later case, the easiest way to build
and install @cite{OpenSS7} packages from tarball is to use the tarball for the
@cite{OpenSS7 Master Package}, @command{openss7-@value{VERSION_OPENSS7}}.

@menu
* Downloading the Binary RPM::		the easiest approach
* Downloading the Debian DEB::		the easiest approach for Debian
* Downloading the Source RPM::		the next best approach
* Downloading the Debian DSC::		the next best approach for Debian
* Downloading the Tar Ball::		last resort
* Downloading from CVS::		mid-release download
@end menu

@c ----------------------------------------------------------------------------

@node Downloading the Binary RPM
@subsection Downloading the Binary RPM
@cindex downloading, binary rpms
@cindex binary rpms

To install from binary RPM, you will need several of the RPM for a complete installation.  Binary
RPM fall into several categories.  To download and install a complete package requires the
appropriate RPM from each of the several categories below, as applicable.  Some release packages do
not provide RPMs in each of the several categories.

To install from Binary RPM, you will need all of the following kernel
independent packages for your architecture, and one of the kernel-dependent
packages from the next section.

@subsubheading Independent RPM
Independent RPM are
dependent on neither the Linux kernel version, nor the @dfn{STREAMS} package.
For example, the
source package
@samp{@value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm},
is not dependent on
kernel
nor @dfn{STREAMS} package.

@noindent
All of the following kernel and @dfn{STREAMS} independent RPM are required for your architecture.
Binary RPMs listed here are for example only: additional binary RPMs are
available from the downloads site.  If your architecture is not available, you
can build binary RPM from the source RPM (see @pxrefman{Building from the Source
RPM}).

@subsubheading Architecture Independent
@table @asis
@item @uref{http://www.openss7.org/rpms/RPMS/noarch/@value{PACKAGE}-dev-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--dev} package contains the device definitions necessary
to run applications programs developed for @value{PACKAGE_TITLE}.@footnote{Not
all distributions support the @samp{%dev} RPM macro: a case in point is the SuSE
8.0 distribution which uses an older version of @manpage{rpm(1)}.  Distributions
that do not support the @samp{%dev} macro will build devices as a @samp{%post}
operation.  Note also that not all release packages contain devices.  Only
packages that provide @dfn{STREAMS} character device drivers need devices, and then
only when the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{http://www.openss7.org/rpms/RPMS/noarch/@value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--doc} package contains this manual in plain text,
postscript, @file{pdf} and @file{html} forms, along with the meta-information from the
@file{@value{PACKAGE_NAME}} package.  It also contains all of the manual pages
necessary for developing @value{PACKAGE_TITLE} applications and
@value{PACKAGE_TITLE} @dfn{STREAMS} modules or drivers.

@item @uref{http://www.openss7.org/rpms/RPMS/noarch/@value{PACKAGE}-init-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}@--init@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--init} package contains the @command{init} scripts and provides
the @samp{postinst} scripts necessary to create kernel module preloads and modules
definitions for all kernel module @samp{core} subpackages.

@item @uref{http://www.openss7.org/rpms/RPMS/noarch/@value{PACKAGE}-source-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.noarch.rpm,, @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.noarch@-.rpm}
The @file{@value{PACKAGE}@--source} package contains the source code necessary for
building the @value{PACKAGE_TITLE} release.  It includes the @manpage{autoconf(1)}
configuration utilities necessary to create and distribute tarballs, @file{rpm} and
@file{deb}/@file{dsc}.
@footnote{Note that not all releases have source RPM packages.  Release packages
that do not contain kernel modules do not generate a source RPM package.}
@end table

@subsubheading Architecture Dependent
@table @asis
@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-devel-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--devel} package contains library archives for static
compilation, header files to develop @value{PACKAGE_TITLE} modules and drivers.
This also includes the header files and static libraries required to compile
@value{PACKAGE_TITLE} applications programs.

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-lib-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--lib} package contains the run-time shared libraries
necessary to run application programs and utilities developed for the
@file{@value{PACKAGE_NAME}} package.
@footnote{Note that not all release packages contain shared libraries, and,
therefore, not all release packages contain this package.}

@ignore
@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-util-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.
@end ignore
@end table

@subsubheading STREAMS-Dependent RPM
@dfn{STREAMS}-Dependent RPM are dependent upon the specific @dfn{STREAMS} package being
used, either @cite{Linux STREAMS} or @cite{Linux Fast-STREAMS}.  Packages
dependent upon @cite{Linux STREAMS} will have @file{LiS} in the package name.
Packages dependent upon @cite{Linux Fast-STREAMS} will have @file{streams} in
the package name.  Note that some @dfn{STREAMS}-Dependent RPM are also
Kernel-Dependent RPM as described below.

@noindent
One of the following @dfn{STREAMS}-Dependent packages is required for your
architecture.  If your architecture is not on the list, you can build binary RPM
from the source RPM (see @pxrefman{Building from the Source RPM}).

@table @asis
@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-LiS-util-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
@dfn{STREAMS}-specific library, it is a @dfn{STREAMS}-Dependent package.  Use the
@file{@value{PACKAGE}@--LiS@--util} package if you have @cite{LiS} installed.

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-streams-util-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
@dfn{STREAMS}-specific library, it is a @dfn{STREAMS}-Dependent package.  Use the
@file{@value{PACKAGE}@--streams@--util} package if you have streams installed.
@end table

@subsubheading Kernel-Dependent RPM
Kernel-Dependent RPM are dependent on specific Linux Kernel Binary RPM releases.
Packages are provided for popular released @cite{RedHat} kernels.  Packages
dependent upon @cite{RedHat} or other kernel RPM will have the @samp{_kversion}
kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary RPM from the source RPM (see @pxrefman{Building from the
Source RPM}).@footnote{Note that on @cite{Mandrakelinux}, unlike other RPM
kernel distributions, kernel packages for the ix86 architectures are always
placed in i586 architecture packages regardless of the true processor
architecture of the kernel package.  @file{configure} detects this and builds
the appropriate packages.}

@table @asis
@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-core-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--core} package contains the loadable kernel modules
that depend only on the kernel.  This package is heavily tied to the kernel for
which it was compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.  Note also that only release
packages that contain kernel modules will contain a @file{core} subpackage.}

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-info-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--info} package@footnote{Note that only release packages
that contain kernel modules and that export versioned symbols will contain a
@file{info} subpackage.  Also, this subpackage is only applicable to 2.4 series
kernels and is not necessary and not built for 2.6 series kernels.} contains the
module symbol version information for the @file{core} subpackage, above.  It is
possible to load this subpackage and compile modules that use the exported
symbols without loading the actual kernel modules (from the @file{core}
subpackage above).  This package is heavily tied to the kernel for which it was
compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-LiS-core-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} @dfn{STREAMS} modules and drivers.  This package is
heavily tied to the @dfn{STREAMS} package and kernel for which it was compiled.  This
particular package applies to @file{LiS} (@cite{Linux STREAMS}) on kernel
version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-streams-core-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} @dfn{STREAMS} modules and drivers.  This package is
heavily tied to the @dfn{STREAMS} package and kernel for which it was compiled.  This
particular package applies to @file{streams} (@cite{Linux Fast@--STREAMS}) on
kernel version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-LiS-info-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--LiS@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{LiS@--info} subpackage.} contains the module symbol version
information for the @file{LiS@--core} subpackage, above.  It is possible to load
this subpackage and compile modules that use the exported symbols without loaded
the actual kernel modules (from the @file{LiS@--core} subpackage above).  This
package is heavily tied to the @dfn{STREAMS} package and kernel for which it was
compiled.  This particular package applies to @file{LiS} (@cite{Linux STREAMS})
on kernel version @samp{@value{_kversion}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/rpms/RPMS/i686/@value{PACKAGE}-streams-info-@value{_kversion}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm,, @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm}
The @file{@value{PACKAGE}@--streams@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{streams@--info} subpackage.} contains the module symbol version
information for the @file{streams@--core} subpackage, above.  It is possible to
load this subpackage and compile modules that use the exported symbols without
loaded the actual kernel modules (from the @file{streams@--core} subpackage
above).  This package is heavily tied to the @dfn{STREAMS} package and kernel for
which it was compiled.  This particular package applies to @file{streams}
(@cite{Linux Fast@--STREAMS}) on kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}
@end table

@subsubheading Configuration and Installation
To configure, build and install the binary RPM, @xrefman{Configuring the Binary
RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DEB
@subsection Downloading the Debian DEB
@cindex downloading, debian debs
@cindex binary debs

To install from binary DEB, you will need several of the DEB for a complete installation.  Binary
DEB fall into several categories.  To download and install a complete package requires the
appropriate DEB from each of the several categories below,
as applicable.  Some release packages do not provide DEBs in each of the several categories.

To install from Binary DEB, you will need all of the following kernel
independent packages for your architecture,
and one of the kernel-dependent packages from the next section.

@subsubheading Independent DEB
Independent DEB are dependent on neither the Linux kernel version, nor the @dfn{STREAMS} package.  For
example, the source package
@samp{@value{PACKAGE}@--source_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}, is not
dependent on kernel nor @dfn{STREAMS} package.

@noindent
All of the following kernel and @dfn{STREAMS}
independent DEB are required for your architecture.
Binary DEBs listed here are for example only: additional binary DEBs are available from the
downloads site.  If your architecture is not available, you can build binary DEB from the Debian DSC
(see @pxrefman{Building from the Debian DSC}).

@subsubheading Architecture Independent
@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-dev_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}@--dev_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--dev} package contains the device definitions necessary to run
applications programs developed for @value{PACKAGE_TITLE}.  @footnote{Note that not all release
packages contain devices.  Only packages that provide @dfn{STREAMS} character device drivers need
devices, and then only when the @samp{specfs} or @samp{devfsd} is not being used.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-doc_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}@--doc_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--doc} package contains this manual in plain text, postscript, @file{pdf} and @file{html}
forms, along with the meta-information from the @file{@value{PACKAGE_NAME}} package.  It also
contains all of the manual pages necessary for developing @value{PACKAGE_TITLE} applications and
@value{PACKAGE_TITLE} @dfn{STREAMS} modules or drivers.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-init_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}@--init_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--init} package contains the @command{init} scripts and provides the postinst
scripts necessary to create kernel module preloads and modules definitions for all kernel module
@samp{core} subpackages.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-source_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_all.deb,, @value{PACKAGE}@--source_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_all@-.deb}
The @file{@value{PACKAGE}@--source} package contains the source code necessary for
building the @value{PACKAGE_TITLE} release.  It includes the @manpage{autoconf(1)}
configuration utilities necessary to create and distribute tarballs, rpms and
deb/dscs.
@footnote{Note that not all releases have source DEB packages.  Release packages
that do not contain kernel modules do not generate a source DEB package.}
@end table

@subsubheading Architecture Dependent
@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-devel_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--devel_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--devel} package contains library archives for static
compilation, header files to develop @value{PACKAGE_TITLE} modules and drivers.
This also includes the header files and static libraries required to compile
@value{PACKAGE_TITLE} applications programs.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-lib_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--lib_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--lib} package contains the run-time shared libraries
necessary to run application programs and utilities developed for the
@file{@value{PACKAGE_NAME}} package.
@footnote{Note that not all release packages contain shared libraries, and,
therefore, not all release packages contain this package.}

@ignore
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-util_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.
@end ignore
@end table

@subsubheading STREAMS-Dependent DEB
@dfn{STREAMS}-Dependent DEB are dependent upon the specific @dfn{STREAMS} package being
used, either @cite{Linux STREAMS} or @cite{Linux Fast-STREAMS}.  Packages
dependent upon @cite{Linux STREAMS} will have @file{LiS} in the package name.
Packages dependent upon @cite{Linux Fast-STREAMS} will have @file{streams} in
the package name.  Note that some @dfn{STREAMS}-Dependent DEB are also
Kernel-Dependent DEB as described below.

@noindent
One of the following @dfn{STREAMS}-Dependent packages is required for your
architecture.  If your architecture is not on the list, you can build binary DEB
from the Debian DSC (see @pxrefman{Building from the Debian DSC}).

@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-LiS-util_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--LiS@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
@dfn{STREAMS}-specific library, it is a @dfn{STREAMS}-Dependent package.  Use the
@file{@value{PACKAGE}@--LiS@--util} package if you have @cite{LiS} installed.

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-streams-util_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--streams@--util_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--util} package provides administrative and
configuration test utilities and commands associated with the
@value{PACKAGE_TITLE} package.  Because this package must link a
@dfn{STREAMS}-specific library, it is a @dfn{STREAMS}-Dependent package.  Use the
@file{@value{PACKAGE}@--streams@--util} package if you have streams installed.
@end table

@subsubheading Kernel-Dependent DEB
Kernel-Dependent DEB are dependent on specific Linux Kernel Binary DEB releases.
Packages are provided for popular released @cite{Debian} kernels.  Packages
dependent upon @cite{Debian} or other kernel DEB will have the @samp{_kversion}
kernel package version in the package name.

One of the following Kernel-Dependent packages is required for your architecture
and kernel version.  If your architecture or kernel version is not on the list,
you can build binary DEB from the source DEB (see @pxrefman{Building from the
Debian DSC}).@footnote{Note that on @cite{Mandrakelinux}, unlike other DEB
kernel distributions, kernel packages for the ix86 architectures are always
placed in i586 architecture packages regardless of the true processor
architecture of the kernel package.  @file{configure} detects this and builds
the appropriate packages.}

@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-core-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--core} package contains the loadable kernel modules
that depend only on the kernel.  This package is heavily tied to the kernel for
which it was compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.  Note also that only release
packages that contain kernel modules will contain a @file{core} subpackage.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-info-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--info} package@footnote{Note that only release packages
that contain kernel modules and that export versioned symbols will contain a
@file{info} subpackage.  Also, this subpackage is only applicable to 2.4 series
kernels and is not necessary and not built for 2.6 series kernels.} contains the
module symbol version information for the @file{core} subpackage, above.  It is
possible to load this subpackage and compile modules that use the exported
symbols without loading the actual kernel modules (from the @file{core}
subpackage above).  This package is heavily tied to the kernel for which it was
compiled.  This particular package applies to kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-LiS-core-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--LiS@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} @dfn{STREAMS} modules and drivers.  This package is
heavily tied to the @dfn{STREAMS} package and kernel for which it was compiled.  This
particular package applies to @file{LiS} (@cite{Linux STREAMS}) on kernel
version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-streams-core-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--streams@--core@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--core} package contains the kernel modules that
provide the @value{PACKAGE_TITLE} @dfn{STREAMS} modules and drivers.  This package is
heavily tied to the @dfn{STREAMS} package and kernel for which it was compiled.  This
particular package applies to @file{streams} (@cite{Linux Fast@--STREAMS}) on
kernel version @samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-LiS-info-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--LiS@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--LiS@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{LiS@--info} subpackage.} contains the module symbol version
information for the @file{LiS@--core} subpackage, above.  It is possible to load
this subpackage and compile modules that use the exported symbols without loaded
the actual kernel modules (from the @file{LiS@--core} subpackage above).  This
package is heavily tied to the @dfn{STREAMS} package and kernel for which it was
compiled.  This particular package applies to @file{LiS} (@cite{Linux STREAMS})
on kernel version @samp{@value{_kversion}}.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@item @uref{http://www.openss7.org/debian/@value{PACKAGE}-streams-info-@value{_kversion}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_i386.deb,, @value{PACKAGE}@--streams@--info@--@value{_kversion}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}_i386@-.deb}
The @file{@value{PACKAGE}@--streams@--info} package@footnote{Note that only release
packages that contain kernel modules and that export versioned symbols will
contain a @file{streams@--info} subpackage.} contains the module symbol version
information for the @file{streams@--core} subpackage, above.  It is possible to
load this subpackage and compile modules that use the exported symbols without
loaded the actual kernel modules (from the @file{streams@--core} subpackage
above).  This package is heavily tied to the @dfn{STREAMS} package and kernel for
which it was compiled.  This particular package applies to @file{streams}
(@cite{Linux Fast@--STREAMS}) on kernel version
@samp{@value{_kversion}}.@footnote{Note that the @samp{_kversion} of
@samp{@value{_kversion}} is only an example.}
@end table

@subsubheading Configuration and Installation
To configure, build and install the Debian DEB, @xrefman{Configuring the Debian
DEB}.

@c ----------------------------------------------------------------------------

@node Downloading the Source RPM
@subsection Downloading the Source RPM
@cindex downloading, source srpm
@cindex source rpms

If you cannot obtain a binary RPM for your architecture, or would like to roll you own binary RPM,
download the following source RPM.

@table @asis
@item @uref{http://www.openss7.org/rpms/SRPMS/@value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}.src.rpm,, @value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm}
This is the source RPM for the package.  From this source RPM it is possible to build binary RPM for
any supported architecture and for any 2.4 or 2.6 kernel,
for either @cite{Linux STREAMS} or @cite{Linux Fast@--STREAMS}.
@end table

@subsubheading Configuration
To configure the source RPM, @xrefman{Configuring the Source RPM}.

@c ----------------------------------------------------------------------------

@node Downloading the Debian DSC
@subsection Downloading the Debian DSC
@cindex downloading, debian dscs
@cindex source dscs

If you cannot obtain a binary DEB for your architecture, or would like to roll your own DEB,
download the following Debian DSC.

@table @asis
@item @uref{http://www.openss7.org/debian/@value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc,, @value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.dsc}
@itemx @uref{http://www.openss7.org/debian/@value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.tar.gz,, @value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.tar@-.gz}
This is the Debian DSC for the package.  From this Debian DSC it is possible to build binary DEB for
any supported architecture and for any 2.4 or 2.6 kernel,
for either @cite{Linux STREAMS} or @cite{Linux Fast@--STREAMS}.
@end table

@subsubheading Configuration
To configure the source RPM, @xrefman{Configuring the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Downloading the Tar Ball
@subsection Downloading the Tar Ball
@cindex downloading, tar ball
@cindex tar ball

For non-@manpage{rpm(1)} and non-@manpage{dpkg(1)} architectures,
download the tarball as follows:

@table @asis
@item @uref{http://www.openss7.org/@value{PACKAGE}-@value{VERSION}.tar.gz,, @value{PACKAGE}@--@value{VERSION}@-.tar@-.gz}
@itemx @uref{http://www.openss7.org/@value{PACKAGE}-@value{VERSION}.tar.bz2,, @value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2}
These are the @manpage{tar(1)} balls for the release.  These @manpage{tar(1)} balls contain the
@manpage{autoconf(1)} distribution which includes all the source necessary for building and
installing the package.  These tarballs will even build Source RPM and Binary RPM on
@manpage{rpm(1)} architectures and Debian DSC and DEB on @manpage{dpkg(1)} architectures.
@end table

The tar ball may be downloaded easily with @manpage{wget(1)} as follows:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

@noindent
or

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.gz
@end example
@end cartouche

Note that you will need an @cite{OpenSS7 Project} user name and password to download release
candidates (which are only available to subscribers and sponsors of the @cite{OpenSS7 Project}).

@subsubheading  Unpacking the Archive

After downloading one of the tar balls, unpack the archive using one of the
following commands:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.gz
% tar -xzvf @value{PACKAGE}-@value{VERSION}.tar.gz
@end example
@end cartouche

@noindent
or

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}-@value{VERSION}.tar.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

@noindent
Either will create a subdirectory name
@file{@value{PACKAGE}-@value{VERSION}}
containing all of the files and subdirectories for the
@command{@value{PACKAGE_NAME}} package.


@subsubheading Configuration
To configure and install the tar ball, @xrefman{Configuring the Tar Ball}.

@c ----------------------------------------------------------------------------

@node Downloading from CVS
@subsection Downloading from CVS
@cindex checkout, cvs
@cindex cvs

If you are a subscriber or sponsor of @uref{http://www.openss7.org/, The OpenSS7 Project} with CVS
archive access privileges then you can download release, mid-release or release candidate versions
of the @file{@value{PACKAGE_NAME}} package from the project CVS archive.

The @value{PACKAGE_TITLE} package is located in the @file{@value{PACKAGE_CVSMODULE}} module of
@file{/var/cvs}.  For release tag information, see @refman{Releases}.

To access the archive from the project CVS pserver, use the following commands to check out a
version from the archive:

@cartouche
@example
% export CVSROOT='-d:pserver:@var{username}@@cvs.openss7.com:2401/var/cvs'
% cvs login
Password: *********
% cvs co -r @value{PACKAGE}_@value{VERSION} @value{PACKAGE_CVSMODULE}
% cvs logout
@end example
@end cartouche

It is, of course, possible to check out by date or by other criteria.  For more information, see
@manref{cvs(1)}.

@subsubheading Preparing the CVS Working Directory

Although public releases of the @file{@value{PACKAGE_NAME}} package do not require reconfiguration,
creating a configurable directory from the CVS archive requires tools not normally distributed with
the other releases.

The build host requires the following GNU tools:

@itemize
@item @command{m4 1.4.11}
@item @command{autoconf 2.62}
@item @command{automake 1.10.1}
@item @command{libtool 2.2.4}
@item @command{gettext 0.17}
@item @command{flex 2.5.33}
@item @command{bison 2.3}
@end itemize

Most desktop development GNU/Linux distributions wil have these tools; however, some non-development
or server-style installations might not and they must be installed separately.@footnote{Older
version of bison (2.0) and the older version of flex (2.5.4a) are also suitable.  Where possible,
use the more recent bison 2.3 and flex 2.5.33.}

Also, these tools can be acquired from the @url{http://www.fsf.org/,FSF website} in the free
software directory, and also at the following locations:

@itemize
@item @url{http://www.openss7.org/tarballs/m4-1.4.11.tar.bz2,m4-1.4.11}
@item @url{http://www.openss7.org/tarballs/autoconf-2.62.tar.bz2,autoconf-2.62}
@item @url{http://www.openss7.org/tarballs/automake-1.10.1.tar.bz2,automake-1.10.1}
@item @url{http://www.openss7.org/tarballs/libtool-2.2.4.tar.gz,libtool-2.2.4}
@item @url{http://www.openss7.org/tarballs/gettext-0.17.tar.gz,gettext-0.17}
@item @url{http://www.openss7.org/tarballs/flex-2.5.33.tar.bz2,flex-2.5.33}
@item @url{http://www.openss7.org/tarballs/bison-2.3.tar.bz2,bison-2.3}
@end itemize

It should be stressed that, in particular, the @manpage{autoconf(1)}, and @manpage{automake(1)},
must be at version releases @command{2.62} and @command{1.10.1}.  @emph{The versions normally
distributed in some mainstream GNU/Linux distributions are, in fact, much older than these
versions.}@footnote{A notable exception is Debian and Fedora 7.  Note that on Fedora 7 the
@command{gettext-devel} package must be installed.}  GNU version of these packages configured and
installed to default directories will install in @file{/usr/local/} allowing them to coexist with
distribution installed versions.

For building documentation, the build host also requires the following documentation tools:

@itemize
@item @command{gs 8.15}
@item @command{tetex 3.0}
@item @command{texinfo 4.11}
@item @command{transfig 3.2.5}
@item @command{imagemagick 6.2.4}
@item @command{groff 1.17.2}
@item @command{gnuplot 3.7}
@item @command{latex2html 1.71}
@end itemize

Most desktop GNU/Linux distributions will have these tools; however, some server-style installations
(e.g. @cite{Ubuntu}-server, @cite{SLES 9} or @cite{Fedora 6 or 7}) will not and they must be
installed separately.@footnote{In particular, for @cite{CentOS}, @cite{Fedora
6 or 7}, the @command{tetex-latex} and @command{gnuplot} packages must be loaded as well.  Note also
that the @command{latex2html} used to be part of the textex package (or subpackages) but is now
often packaged on its own.}

For uncooked manual pages, the entire @manpage{groff(1)} package is required on @cite{Debian} and
@cite{Ubuntu} systems (the base package does not include @manpage{grefer(1)} which is used extensively by
uncooked manual pages).  The following will get what you need:

@cartouche
@example
Debian: % apt-get install groff_ext
Ubuntu: % apt-get install groff
@end example
@end cartouche

In addition, the build host requires a complete tool chain for compiling for the target host,
including kernel tools such as @manref{genksyms(8)} and others.

If you wish to package @file{rpms} on an @manpage{rpm(1)} system, or @file{debs} on a
@manpage{dpkg(1)} system, you will need the appropriate tool chain.  Systems based on
@manpage{rpm(1)}
typically have the necessary tool chain available, however, @manpage{dpkg(1)} systems do not.  The
following on a @cite{Debian} or @cite{Ubuntu} system will get what you need:

@cartouche
@example
% apt-get install debhelper
% apt-get install fakeroot
@end example
@end cartouche

To generate a configuration script and the necessary scriptlets required by the GNU
@manpage{autoconf(1)} system, execute the following commands on the working directory:

@cartouche
@example
% autoreconf -fiv @value{PACKAGE_CVSMODULE}
@end example
@end cartouche

@noindent
where, @file{@value{PACKAGE_CVSMODULE}} is the name of the directory to where the working copy was
checked out under the previous step.  This command generates the @file{configure} script and
other missing pieces that are normally distributed with the release Tar Balls, SRPMs and DSCs.

Make sure that @samp{autoreconf --version} returns @samp{2.62}.  Otherwise, you may need to perform
something like the following:

@cartouche
@example
% PATH="/usr/local/bin:$PATH"
% autoreconf -fiv @value{PACKAGE_CVSMODULE}
@end example
@end cartouche

@noindent
After reconfiguring the directory, the package can then be configured and built using the same
instructions as are used for the Tar Ball, see @refman{Configuring the Tar Ball}, and @refman{Building
from the Tar Ball}.

Do note, however, that @manpage{make(1)} will rebuild the documentation that is normally released
with the package.  Additional tools may be necessary for building the documentation.  To avoid
building and installing the documentation, use the @option{--disable-devel} or
@option{--disable-docs} option to configure described in @refman{Configuring the Tar Ball}.

When configuring the package in a working directory and while working a change-compile-test cycle
that involves configuration macros or documentation, I find it of great advantage to invoke the GNU
@file{configure} options @option{--enable-maintainer-mode}, @option{--enable-dependency-tracking}
and @option{--disable-devel}.  The first of these three options will add maintainer-specific targets
to any generated @file{Makefile}, the second option will invoke automatic dependency tracking within
the @file{Makefile} so rebuilds after changes to macro, source or documentation files will be
automatically rebuilt; and the last option will suppress rebuilding and reinstalling documentation
manual pages and header files.  Header files will still be available under the @file{/usr/src}
directory.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Configuration
@section Configuration
@cindex configuration

@menu
* Configuring the Binary RPM::		the easiest approach
* Configuring the Debian DEB::		the easiest approach for Debian
* Configuring the Source RPM::		the next best approach
* Configuring the Debian DSC::		the next best approach for Debian
* Configuring the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Configuring the Binary RPM
@subsection Configuring the Binary RPM
@cindex configuring, binary rpms
@cindex binary rpms

In general the binary RPM do not require any configuration, however, during installation it is
possible to relocate some of the installation directories.  This allows some degree of
customization.  Relocations that are available on the binary RPM are as follows:

@table @file
@item @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--core@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/lib/@-modules/@-@value{_kversion}}
This relocatable directory contains the kernel modules that provide the
@value{PACKAGE_NAME} @dfn{STREAMS} core, drivers and modules.@footnote{Note that the
@samp{_kversion} of @samp{@value{_kversion}} is only an example.}
@end table

@item @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--info@--@value{_kversion}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}/usr/@-include/@-@value{PACKAGE}/@-@value{_kversion}}
This relocatable directory contains the kernel module exported symbol
information that allows other kernel modules to be compiled against the correct
version of the @value{PACKAGE} package.@footnote{Note that the @samp{_kversion}
of @samp{@value{_kversion}} is only an example.  Also, note that the @samp{info}
subpackage is only applicable to the 2.4 kernel series.}
@end table

@item @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--dev@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
(not relocatable)

@item @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--devel@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains @value{PACKAGE} libraries.
@item @file{@value{_rootdir}@value{_includedir}/@-@value{PACKAGE}}
This relocatable directory contains @value{PACKAGE} header files.
@end table

@item @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--doc@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_datadir}/@-doc}
This relocatable directory contains all package specific documentation
(including this manual).  The subdirectory in this directory is the
@file{@value{PACKAGE}@--@value{VERSION}} directory.
@item @file{@value{_rootdir}@value{_infodir}}
This relocatable directory contains info files (including the info version of
this manual).
@item @file{@value{_rootdir}@value{_mandir}}
This relocatable directory contains manual pages.
@end table

@item @value{PACKAGE}@--LiS@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--lib@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_libdir}}
This relocatable directory contains the run-time shared libraries necessary to
run applications programs and utilities developed for @value{PACKAGE_TITLE}.
@item @file{@value{_rootdir}@value{_datadir}/@-locale}
This relocatable directory contains the locale information for shared library
files.
@end table

@item @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--source@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_prefix}/@-src}
This relocatable directory contains the source code.
@end table

@item @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--LiS@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@itemx @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@cindex @value{PACKAGE}@--streams@--util@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}@-.i686@-.rpm
@table @asis
@item @file{@value{_rootdir}@value{_bindir}}
This relocatable directory contains binary programs and utilities.
@item @file{@value{_rootdir}@value{_sbindir}}
This relocatable directory contains system binary programs and utilities.
@item @file{@value{_rootdir}@value{_libexecdir}}
This relocatable directory contains test programs.
@item @file{@value{_rootdir}@value{_sysconfdir}}
This relocatable directory contains @command{init} scripts and configuration information.
@end table

@end table

@subsubheading Installation
To install the binary RPM, @xrefman{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DEB
@subsection Configuring the Debian DEB
@cindex configuring, binary debs
@cindex binary debs

In general the binary DEB do not require any configuration.

@subsubheading Installation
To install the Debian DEB, @xrefman{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Configuring the Source RPM
@subsection Configuring the Source RPM
@cindex configuring, source srpm
@cindex source rpms

When building from the source RPM (@pxrefman{Building from the Source RPM}), the rebuild process uses a
number of macros from the user's @file{.rpmmacros} file as described in @manref{rpm(8)}.

Following is an example of the @file{~/.rpmmacros} file that I use for rebuilding RPMS:

@cartouche
@smallexample
#
# RPM macros for building rpms
#

%_topdir /usr/src/openss7.rpms

%vendor OpenSS7 Corporation
%distribution OpenSS7
%disturl http://www.openss7.org/
%packager Brian Bidulock <bidulock@@openss7.org>
%url http://www.openss7.org/

%_signature gpg
%_gpg_path /home/brian/.gnupg
%_gpg_name openss7@@openss7.org
%_gpgbin /usr/bin/gpg

%_source_payload w9.bzdio
%_binary_payload w9.bzdio

%_unpackaged_files_terminate_build 1
%_missing_doc_files_terminate_build 1
%_enable_debug_packages 1

# 
# Template for debug information sub-package.
# with our little addition of release
# 
%debug_package \
%ifnarch noarch\
%global __debug_package 1\
%package debug\
Summary: Debug information for package %@{name@}\
Group: Development/Debug\
AutoReqProv: 0\
%@{?fullrelease:Release: %@{fullrelease@}@}\
%description debug\
This package provides debug information for package %@{name@}.\
Debug information is useful when developing applications that use this\
package or when debugging this package.\
%files debug -f debugfiles.list\
%defattr(-,root,root)\
%endif\
%@{nil@}

@end smallexample
@end cartouche


When building from the source RPM (@pxrefman{Building from the Source RPM}), it is possible to pass a
number of additional configuration options to the @manpage{rpmbuild(1)} process.

The additional configuration options are described below.

Note that distributions that use older versions of rpm do not have the @option{--with} or
@option{--without} options defined.  To achieve the same effect as:
@example
--with someparm=somearg
@end example
do:
@example
--define "_with_someparm --with-someparm=somearg"
@end example

This is a generic description of common @manpage{rpmbuild(1)} options.  Not all @manpage{rpmbuild(1)}
options are applicable to all SRPMs.
Options that are kernel module specific are only applicable to SRPMs that
build kernel modules.
@dfn{STREAMS} options are only applicable to SRPMs that provide or require
@dfn{STREAMS}.

@table @code
@item --define "_kversion $PACKAGE_KVERSION"
@vindex PACKAGE_KVERSION
@opindex k-release
Specifies the kernel version other than the running kernel for which to build.  If
@command{_kversion} is not defined when rebuilding, the environment variable @var{PACKAGE_KVERSION}
is used.  If the environment variable @var{PACKAGE_KVERSION} is not defined, then the version of the
running kernel (i.e. discovered with @samp{uname -r}) is used as the target version for
kernel-dependent packages.  This option can also be defined in an @file{.rpmspec} file using the
macro name @samp{_kversion}.

@item --with checks
@itemx --without checks
@opindex checks
Enable or disable preinstall checks.  Each packages supports a number of preinstall checks that can
be performed by invoking the @samp{check} target with @manpage{automake(1)}.  These currently consist of
checking each kernel module for unresolved kernel symbols, checking for documentation for exported
kernel module symbols, checking for documentation for exported library symbols, checking for
standard options for build and installable programs, checking for documentation for built and
installable programs.  Normally these checks are only run in maintainer mode, but can be enabled and
disabled with this option.

@ignore
@item --with autotest
@itemx --without autotest
@opindex autotest
@end ignore

@item --with k-optimize=HOW
@itemx --without k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or @var{quick}.  @var{size}
compiles kernel modules @code{-Os}, @var{speed} compiles kernel modules @code{-O3}, and @var{quick}
compiles kernel modules @code{-O0}.  The default is @var{normal}.  Use with care.

@item --with cooked-manpages
@itemx --without cooked-manpages
@opindex cooked-manpages
Some systems do not like @manpage{grefer(1)} references in manual pages.@footnote{In particular, some
@cite{Debian} systems do not load the @manpage{groff(1)} extensions package and do not have
@manpage{grefer(1)} installed.  Although this is an oversight on the configuration of the particular
@cite{Debian} system, we accomodate such misconfiguration with this feature.}  This option will cook
@manpage{soelim(1)}, @manpage{refer(1)}, @manpage{tbl(1)} and @manpage{pic(1)} commands from the manual pages and
also strip @manpage{groff(1)} comments.  The default is to leave manual pages uncooked: they are actually
smaller that way.

@item --with public
@itemx --without public
@opindex public
Release public packages or private packages.  This option has no effect on the
@file{@value{PACKAGE_NAME}} package.  The default is to release public packages.

@item --with k-debug
@itemx --without k-debug
@opindex k-debug
Specifies whether kernel debugging is to be performed on the build kernel modules.  Mutually
exclusive with @code{test} and @code{safe} below.  This has the effect of removing static and inline
attributes from functions and invoking all debugging macros in the code.  The default is to not
perform kernel debugging.

@item --with k-test
@itemx --without k-test
@opindex k-test
Specifies whether kernel testing is to be performed.  Mutually exclusive with @code{debug} above and
@code{safe} below.  This has the effect of removing static and inline attributes from functions and
invoking most debugging macros in the code.  The default is to not perform kernel testing.

@item --with k-safe
@itemx --without k-safe
@opindex k-safe
Specifies whether kernel saftey is to be performed.  Mutually exclusive with @code{debug} and
@code{test} above.  This has the effect of invoking some more pedantic assertion macros in the code.
The default is not to apply kernel safety.

@item --with k-inline
@itemx --without k-inline
@opindex k-inline
Specifies whether kernel @code{inline} functions are to be placed inline.  This has the effect of
adding the @option{-finline-functions} flag to @var{CFLAGS} for compiling kernel modules.  Linux 2.4
kernels are normally compiled @option{-O2} which does not respect the @code{inline} directive.  This
compiles kernel modules with @option{-finline-functions} to get closer to @option{-O3} optimization.
For better optimization controls, @xrefman{Configuring the Tar Ball}.

@item --with k-modversions
@itemx --without k-modversions
@opindex k-modversions
Specifies whether kernel symbol versions are to be applied to symbols exported by package kernel
modules.  The default is to version exported module symbols.  This package does not export symbols
so this option has no effect.

@item --with devfs
@itemx --without devfs
Specifies whether the build is for a device file system daemon enabled system with autoloading, or
not.  The default is to build for @manpage{devfsd(1)} autoloading when @var{CONFIG_DEVFS_FS} is defined in the
target kernel.  The @samp{rebuild} target uses this option to signal to the RPM spec file that the
@samp{dev} subpackage need not be built.  This option does not appear when the package has no
devices.

@item --with devel
@itemx --without devel
@opindex devel
Specifies whether to build development environment packages such as those that include header files,
static libraries, manual pages and @manpage{texinfo(1)} documentation.  The default is to build development
environment packages.  This option can be useful when building for an embedded target where only the
runtime components are desired.

@item --with docs
@itemx --without docs
@opindex docs
Specifies whether to build and install major documentation such manual pages and
@manpage{texinfo(1)} documentation.  The default is to build and install documentation.  This option
can be useful when building for an embedded target where only the runtime and static compile
components are desired, but not major documentation.  This option does not override the setting of
@code{--without devel}.

@item --with tools
@itemx --without tools
@opindex tools
Specifies whether user space packages are to be built.  The default is to build user space packages.
This option can be useful when rebuilding for multiple architectures and target kernels.  The
@samp{rebuild} @manpage{automake(1)} target uses this feature when rebuilding for all available architectures
and kernels, to rebuild user packages once per architecture instead of once per kernel.

@item --with modules
@itemx --without modules
@opindex modules
Specifies whether kernel modules packages are to be built.  The default is to build kernel module
packages.  This option can be useful when rebuilding for multiple architectures and target kernels.
The @samp{rebuild} @manpage{automake(1)} target uses this feature to rebuild for all available architectures
and kernels.

@item --with lis
@itemx --without lis
@opindex lis
Specifies that the package is to be rebuilt against @cite{Linux STREAMS}.  The default is to
automatically identify whether @file{LiS} or @file{streams} is loaded on the build system and build
accordingly.

@item --with lfs
@itemx --without lfs
@opindex lfs
Specifies that the package is to be rebuilt against @cite{Linux Fast-STREAMS}.  The default is to
automatically identify whether @file{LiS} or @file{streams} is loaded on the build system and build
accordingly.
@end table

@include rpm.texi

In general, the default values of these options are sufficient for most purposes and no options need
be provided when rebuilding the Source RPMs.

@subsubheading Build
To build from the source RPM, @xrefman{Building from the Source RPM}.

@c ----------------------------------------------------------------------------

@node Configuring the Debian DSC
@subsection Configuring the Debian DSC
@cindex configuring, source dscs
@cindex source dscs

The Debian DSC can be configured by passing options in the environment variable
@var{BUILD_DEBOPTIONS}.  The options placed in this variable take the same form as those passed to
the @file{configure} script, @xrefman{Configuring the Tar Ball}.  For an example, @xrefman{Building
from the Debian DSC}.

@subsubheading Build
To build from the Debian DSC, @xrefman{Building from the Debian DSC}.

@c ----------------------------------------------------------------------------

@node Configuring the Tar Ball
@subsection Configuring the Tar Ball
@cindex configuring, tar ball
@cindex tar ball

All of the normal GNU @manpage{autoconf(1)} configuration options and environment variables apply.
Additional options and environment variables are provided to tailor or customize the build and are
described below.

@menu
* Configure Options::		Options to @file{configure}
* Environment Variables::	Environment variables to @file{configure}
@end menu

@c ----------------------------------------------------------------------------

@node Configure Options
@subsubsection Configure Options
@cindex configure options

This is a generic description of common @file{configure} options that are in addition to those
provided by @manpage{autoconf(1)}, @manpage{automake(1)}, @manpage{libtool(1)} and @manpage{gettext(1)}.

Not all @file{configure} options are applicable to all @value{pkgtype} packages.
Options that are kernel module specific are only applicable to @value{pkgtype}
packages that build kernel modules.
@dfn{STREAMS} options are only applicable to @value{pkgtype} packages that
provide or require @dfn{STREAMS}.

Following are the additional @file{configure} options, their meaning and use:

@table @command
@item --enable-checks
@itemx --disable-checks
@opindex checks
Enable or disable preinstall checks.  Each @value{pkgtype} package supports a number of preinstall
checks that can be performed by invoking the @samp{check} target with @manpage{make(1)}.  These
currently consist of checking each kernel module for unresolved kernel symbols, checking for
documentation for exported kernel module symbols, checking for documentation for exported library
symbols, checking for standard options for build and installable programs, checking for
documentation for built and installable programs.  Normally these checks are only run in maintainer
mode, but can be enabled and disabled with this option.

@item --enable-autotest
@itemx --disable-autotest
@opindex autotest
Enable or disable pre- and post-installation testing.  Each @value{pkgtype} package supports a
number of @command{autotest} test suites that can be performed by invoking the @samp{installcheck}
target with @manpage{make(1)}.  These currently consist of running installed modules, commands and
binaries against a number of specific test cases.  Normally these checks are only run in maintainer
mode, but can be enabled and disabled with this option.

@item --disable-compress-manpages
@opindex compress-manpages
Compress manual pages with @samp{gzip -9} or @samp{bzip2 -9} or leave them uncompressed.  The default is
to compress manual pages with @samp{gzip -9} or @samp{bzip2 -9} if a single compressed manual page exists in
the target installation directory (@option{--mandir}).  This disables automatic compression.

@item --disable-public
@opindex public
Disable public release.  This option is not usable on public releases and only has a usable effect
on @value{PACKAGE_TITLE} when the package is acquired from CVS.  In particular, the @cite{STREAMS
SS7/VoIP/ISDN/SIGTRAN Stacks} (@command{strss7-@value{VERSION_STRSS7}}) @value{pkgtype} package has a large
number of non-public components.  Specifying this option will cause the package to build and install
all private release components in addition to the public release components.  This option affects
all @value{pkgtype} packages.  Most @value{pkgtype} packages do not have private release components.

@item --disable-initscripts
@opindex initscripts
Disables the installation of @command{init} scripts.
The default is to configure and install @command{init} scripts and their associated
configuration files.

Although the default is to install @command{init} scripts, installation attempts to detect a System V @command{init}
script configuration, and if one is not found, the @command{init} scripts are installed into the appropriate
directories, but the symbolic links to the run level script directories are not generated and the
script is not invoked.  Therefore, it is safe to leave this option unchanged, even on distributions
that do not support System V @command{init} script layout.

@item --disable-32bit-libs
@opindex 32bit-libs
Disables the build and install of 32-bit compatibility libraries and test binaries on 64-bit systems
that support 32-bit compatibility.  The default is to build and install 32-bit compatibility
libraries and test binaries.  This option can be usefule when configuring for an embedded target
where only native shared libraries and binaries are desired.

@item --disable-devel
@opindex devel
Disables the installation of development environment components such as header files, static
libraries, manual pages and @manpage{texinfo(1)} documentation.  The default is to install development
environment components.  This option can be useful when configuring for an embedded target where
only the runtime components are desired, or when performing a edit-compile-test cycle.

@item --disable-docs
@opindex docs
Disables the build and installation of major documentation such manual pages and
@manpage{texinfo(1)} documentation.  The default is to build and install documentation.  This option
can be useful when building for an embedded target where only the runtime and static compile
components are desired, but not major documentation.  This option does not override the setting of
@option{--disable-devel}.

@item --enable-tools
@opindex tools
Specifies whether user space programs and libraries are to be built and installed.  The default is
to build and install user space programs and libraries.  This option can be useful when rebuilding
for multiple architectures and target kernels, particularly under @manpage{rpm(1)} or
@manpage{dpkg(1)}.  The @samp{rebuild} @manpage{automake(1)} target uses this feature when rebuilding
RPMs for all available architectures and kernels, to rebuild user packages once per architecture
instead of once per kernel.

@item --enable-modules
@opindex modules
Specifies whether kernel modules are to be built and installed.  The default is to build and install
kernel modules.  This option can be useful when rebuilding for multiple architectures and target
kernels, particularly under @manpage{rpm(1)} or @manpage{dpkg(1)}.  The @samp{rebuild}
@manpage{automake(1)} target uses this feature to rebuild for all available architectures and
kernels.
This option has no effect for @value{pkgtype} packages that do not provide kernel modules.

@item --enable-arch
@opindex arch
Specifies whether architectural dependent package components are to be built and installed.  This
option can be useful when rebuilding for multiple architectures and target kernels, particularly
under @manpage{dpkg(1)}.  The default is to configure, build and install architecture dependent
package components.
This option has no effect for @value{pkgtype} packages that do not provide architecture dependent
components.

@item --enable-indep
@opindex indep
Specifies whether architecture independent package components are to be built and installed.  This
option can be useful when rebuilding for multiple architectures and target kernels, particularly
under @manpage{dpkg(1)}.  The default is to configure, build and install architecture independent
package components.
This options has no effect for @value{pkgtype} packages that do not provide architecture independent
components.

@item --enable-k-inline
@opindex k-inline
Enable kernel inline functions.  Most Linux kernels build without @option{-finline-functions}.  This
option adds the @option{-finline-functions} and @option{-Winline} flags to the compilation of kernel
modules.  Use with care.
This option has no effect for @value{pkgtype} packages that do not provide kernel modules.

@item --enable-k-safe
@opindex k-safe
Enable kernel module run-time safety checks.  Specifies whether kernel safety is to be performed.
This option is mutually exclusive with @option{--enable-k-test} and @option{--enable-k-debug} below.
This has the effect of invoking some more pedantic assertion macros in the code.  The default is not
to apply kernel safety.
This option has no effect for @value{pkgtype} packages that have are no kernel modules.

@item --enable-k-test
@opindex k-test
Enable kernel module run-time testing.  Specifies whether kernel testing is to be performed.  This
option is mutually exclusive with @option{--enable-k-safe} above and @option{--enable-k-debug}
below.  This has the effect of remove @code{static} and @code{inline} attributes from functions and
invoking most non-performance affecting debugging macros in the code.  The default is not to perform
kernel testing.
This option has no effect for @value{pkgtype} packages that do not provide kernel modules.

@item --enable-k-debug
@opindex k-debug
Enable kernel module run-time debugging.  Specifies whether kernel debugging is to be performed.
This option is mutually exclusive with @option{--enable-k-safe} and @option{--enable-k-test} above.
This has the effect of removing @code{static} and @code{inline} attributes from functions and
invoking all debugging macros in the code (including performance-affecting debug macros).  The
default is to not perform kernel debugging.
This option has no effect for @value{pkgtype} packages that do not provide kernel modules.

@itemx --disable-k-modversions
@opindex k-modversions
Disable module versions on @command{@value{PACKAGE_NAME}} symbols.  Specifies whether kernel symbol
versions are to be used on symbols exported from built @command{@value{PACKAGE_NAME}} modules.  The
default is to provide kernel symbol versions on all exported symbols.
This option has no effect for @value{pkgtype} packages that do not provide kernel modules.

@item --enable-devfs
@itemx --disable-devfs
@opindex devfs
Specifies whether the build is for a device file system daemon enabled system with autoloading, or
not.  The default is to build for @manpage{devfsd(8)} autoloading when @var{CONFIG_DEVFS_FS} is
defined in the target kernel.  The @samp{reuild} @manpage{automake(1)} target uses this option to
signal to the RPM spec file that the @samp{dev} subpackage need not be built.  This option has no
effect for @value{pkgtype} packages that do not provide devices.

@item --with-gpg-user=GNUPGUSER
@opindex gpg-user
Specify the @manref{gpg(1)} @samp{GNUPGUSER} for signing RPMs and tarballs.  The default is the
content of the environment variable @var{GNUPGUSER}.  If unspecified, the @manpage{gpg(1)} program
will normally use the user name of the account invoking the @manpage{gpg(1)} program.  For building
source RPMs, the RPM macro @samp{_gpg_name} will override this setting.

@item --with-gpg-home=GNUPGHOME
@opindex gpg-home
Specify the @samp{GNUPGHOME} directory for signing RPMs and tarballs.  The default is the user's
@file{~/.gpg} directory.  For building source RPMs, the RPM macro @samp{_gpg_path} will override
this setting.

@item --with-pkg-epoch=EPOCH
@opindex pkg-epoch
Specifies the epoch for the package.  This is neither used for @manpage{rpm(1)} nor
@manpage{dpkg(1)} packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgepoch} file in the @value{pkgtype} package source directory or, if that
file does not exist, zero (0).

@item --with-pkg-release=RELEASE
@opindex pkg-release
Specifies the release for the package.  This is neither used for @manpage{rpm(1)} nor
@manpage{dpkg(1)} packages, it applies to the tarball release as a whole.  The default is the
contents of the @file{.pkgrelease} file in the @value{pkgtype} package source directory or, if that
file does not exist, one (1).  This is the number after the last point in the package version
number.

@item --with-pkg-distdir=DIR
@opindex pkg-distdir
Specifies the distribution directory for the package.  This is used by the maintainer for building
distributions of tarballs.  This is the directory into which archives are copied for distribution.
The default is the top build directory.

@item --with-cooked-manpages
@opindex cooked-manpages
Convert manual pages to remove macro dependencies and @manpage{grefer(1)} references.  Some systems
do not like @manpage{grefer(1)} references in manual pages.@footnote{In particular, some @cite{Debian}
or @cite{Ubuntu} systems do not load the @manpage{groff(1)} extensions package and do not have
@manpage{grefer(1)} installed.  Although this is an oversight on the configuration of the particular
@cite{Debian} or @cite{Ubuntu} system, we accomodate such misconfiguration with this feature.} This
option will cook @manpage{soelim(1)}, @manpage{refer(1)}, @manpage{tbl(1)} and @manpage{pic(1)}
commands from the manual pages and also strip @manpage{groff(1)} comments.  The default is to leave
manual pages uncooked (they are actually smaller that way).

@item --with-rpm-epoch=PACKAGE_EPOCH
@opindex rpm-epoch
Specify the @samp{PACKAGE_EPOCH} for the RPM spec file.  The default is to use the RPM epoch
contained in the @value{pkgtype} package file @file{.rpmepoch}.

@item --with-rpm-release=PACKAGE_RPMRELEASE
@opindex rpm-release
Specify the @samp{PACKAGE_RPMRELEASE} for the RPM @file{spec} file.  The default is to use the RPM release
contained in the @value{pkgtype} package file @file{.rpmrelease}.

@item --with-rpm-extra=PACKAGE_RPMEXTRA
@opindex rpm-extra
Specify the @samp{PACKAGE_RPMEXTRA} extra release information for the RPM spec file.  The default is
to use the RPM extra release information contained in the @value{pkgtype} package file
@file{.rpmextra}.  Otherwise, this value will be determined from automatic detection of the RPM
distribution.

@item --with-rpm-topdir=PACKAGE_RPMTOPDIR
@opindex rpm-topdir
Specify the @samp{PACKAGE_RPMTOPDIR} top directory for RPMs.  If specified with a null
@samp{PACKAGE_RPMTOPDIR}, the default directory for the RPM distribution will be used.  If this
option is not provided on the command line, the top build directory will be used as the RPM top
directory as well.

@item --with-deb-epoch=EPOCH
@opindex deb-epoch
Specify the @samp{PACKAGE_DEBEPOCH} for the DEB control file.  The default is to use the DEB epoch
contained in the @value{pkgtype} package file @file{.debepoch}.

@item --with-deb-release=RELEASE
@opindex deb-release
Specify the @samp{PACKAGE_DEBRELEASE} for the DEB control file.  The default is to use the DEB
release contained in the @value{pkgtype} package file @file{.debrelease}.

@item --with-deb-topdir=DIR
@opindex deb-topdir
Specify the @samp{PACKAGE_DEBTOPDIR} top directory for DEBs.  If specified with a null
@samp{PACKAGE_DEBTOPDIR}, the default directory for the DEB distribution will be used.  If this
option is not provided on the command line, the top build directory will be used as the DEB top
directory as well.

@item --with-k-release=PACKAGE_KRELEASE
@opindex k-release
Specify the @samp{PACKAGE_KRELEASE} release of the Linux kernel for which the build is targeted.
When not cross compiling, if this option is not set, the build will be targeted at the kernel
running in the build environment (e.g., @samp{uname -r}).  When cross-compiling this option must be
specified or the configure script will generate an error and terminate.

@ignore
@item --with-k-prefix=K-PREFIX-DIR
@opindex k-prefix
Specify the @samp{K-PREFIX-DIR} kernel directory prefix for install.  The default is the root
directory (@file{/}) of the build machine.  This directory is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-rootdir=K-ROOTDIR
@opindex k-rootdir
Specify the @samp{K-ROOTDIR} root directory for configure.  The default is the setting of
environment variable @var{DESTDIR}, and if @var{DESTDIR} is not set, the root directory (@file{/})
of the build machine.  This directory is normally located by the @file{configure} script and need
only be provided for special cross-build environments or when requested by a @file{configure}
script error message.
@end ignore

@item --with-k-linkage=PACKAGE_KLINKAGE
@opindex k-linkage
Specify the @samp{PACKAGE_KLINKAGE} for kernel module linkage.  This can be one of the following:
@itemize
@item @samp{loadable} -- loadable kernel modules
@item @samp{linkable} -- linkable kernel objects
@end itemize
The default is to build loadable kernel modules.

@item --with-k-modules=K-MODULES-DIR
@opindex k-modules
Specify the @samp{K-MODULES-DIR} directory to which kernel modules will be installed.  The default
is based on the option @option{--with-k-release}, @option{--with-k-prefix} and
@option{--with-k-rootdir}.  The default is @file{DESTDIR}/@-@file{K@--MODULES@--DIR} which is
typically @file{@var{DESTDIR}/@-lib/@-modules/@-@var{PACKAGE_KRELEASE}/@-}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-build=K-BUILD-DIR
@opindex k-build
Specify the @samp{K-BUILD-DIR} base kernel build directory in which configured kernel source
resides.  The default is @file{@var{DESTDIR}/@-@var{K@--MODULES@--DIR}/@-build}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-source=K-SOURCE-DIR
@opindex k-build
Specify the @samp{K-SOURCE-DIR} base kernel build directory in which configured kernel source
resides.  The default is @file{@var{DESTDIR}/@-@var{K@--MODULES@--DIR}/@-source}.  This directory is
normally located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-modver=K-MODVER-FILE
@opindex k-sysmap
Specify the @samp{K-MODVER-FILE} kernel module versions file.  The default is
@file{@var{K@--BUILD@--DIR}/@-Module.symvers}.  This file is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-sysmap=K-SYSMAP-FILE
@opindex k-sysmap
Specify the @samp{K-SYSMAP-FILE} kernel system map file.  The default is
@file{@var{K@--BUILD@--DIR}/@-System.map}.  This file is normally located by the @file{configure}
script and need only be provided for special cross-build environments or when requested by a
@file{configure} script error message.

@ignore
@item --with-k-includes=K-INCLUDES-DIR
@opindex k-includes
Specify the @samp{K-INCLUDES-DIR} include directory of the kernel for which the build is targeted.
The default is @file{@var{DESTDIR}/@-@var{K@--BUILD@--DIR}/@-include}.  This directory is normally
located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.
@end ignore

@item --with-k-archdir=K-ARCHDIR
@opindex k-archdir
Specify the @samp{K-ARCHDIR} kernel source architecture specific directory.  The default is
@file{@var{DESTDIR}/@-@var{K@--SOURCE@--DIR}/@-arch}.  This directory is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-machdir=K-MACHDIR
@opindex k-machdir
Specify the @samp{K-MACHDIR} kernel source machine specific directory.  The default is
@file{@var{DESTDIR}/@-@var{K@--SOURCE@--DIR}/@-@var{target_cpu}}.  This directory is normally
located by the @file{configure} script and need only be provided for special cross-build
environments or when requested by a @file{configure} script error message.

@item --with-k-config=K-CONFIG
@opindex k-config
Specify the @samp{K-CONFIG} kernel configuration file.  The default is
@file{@var{BOOT}/@-config@--@var{K@--RELEASE}}.  This configuration file is normally located by the
@file{configure} script and need only be provided for special cross-build environments or when
requested by a @file{configure} script error message.

@item --with-k-optimize=HOW
@itemx --without-k-optimize
@opindex k-optimize
Specify @samp{HOW} optimization, @var{normal}, @var{size}, @var{speed} or @var{quick}.  @var{size}
compiles kernel modules @code{-Os}, @var{speed} compiles kernel modules @code{-O3}, and @var{quick}
compiles kernel modules @code{-O0}.  The default is @var{normal}.  Use with care.  The most common
use of this option is to specify @option{--with-k-optimize=speed --disable-k-safe} to compile for
maximum performance.  Nevertheless, even these setting are @dfn{ricing} and the resulting kernel
modules will only be about 5% faster.

@item --with-lis[=LIS-DIR]
@itemx --without-lis
@opindex lis
Specify the @samp{LIS-DIR} directory in which to find @cite{LiS} headers.  Also specifies that the build is
to be made against Linux STREAMS.  The default is @file{/usr/@-include/@-LiS} if it exists,
@samp{no} otherwise.  This directory is normally located by the @file{configure} script and need
only be provided for special cross-build environments or when requested by a @file{configure}
script error message.  This option has no effect on @value{pkgtype} packages that do not use the
@dfn{STREAMS} subsystem.

@item --with-lfs[=LFS-DIR]
@itemx --without-lfs
@opindex lfs
Specify the @samp{LFS-DIR} directory in which to find @cite{LfS} headers.  Also specifies that the build is
to be made against Linux Fast-STREAMS.  The default is @file{/usr/@-include/@-streams} if it exists,
@samp{no} otherwise.  This directory is normally located by the @file{configure} script and need
only be provided for special cross-build environments or when requested by a @file{configure}
script error message.  This option has no effect on @value{pkgtype} packages that do not use the
@dfn{STREAMS} subsystem.

@item --with-strconf-master=STRCONF_CONFIG
@opindex strconf-master
Specify the @samp{STRCONF_CONFIG} file name to which the configuration master file is written.  The
default is @file{Config.master}.
This option has no effect on @value{pkgtype} packages that do not use the @dfn{STREAMS} subsystem
and the strconf scripts.
This option should not be specified when configuring the master package as the setting for all
add-on packages will conflict.

@item --with-base-major=STRCONF_MAJBASE
@opindex base-major
Start numbering for major devices at @samp{STRCONF_MAJBASE}.  The default is @samp{230}.
This option has no effect on @value{pkgtype} packages that do not use the @dfn{STREAMS} subsystem
and the strconf scripts.
This option should not be specified when configuring the master package as the setting for all
add-on packages will conflict.

@end table

@include configure.texi

@c ----------------------------------------------------------------------------

@node Environment Variables
@subsubsection Environment Variables
@cindex configure environment variables

Following are additional environment variables to @file{configure}, their meaning and use:

@vtable @var
@item GPG
GPG signature command.  This is used for signing distributions by the maintainer.  By default,
@file{configure} will search for this tool.

@item GNUPGUSER
GPG user name.  This is used for signing distributions by the maintainer.

@item GNUPGHOME
GPG home directory.  This is used for signing distributions by the maintainer.

@item GPGPASSWD
GPG password for signing.  This is used for signing distributions by the maintainer.  This
environment variable is not maintained by the @file{configure} script and should only be used on
an isolated system.

@item SOELIM
Roff source elimination command, @manref{soelim(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{soelim(1)} command.  By default, @file{configure} will search for this tool.

@item REFER
Roff references command, @manref{refer(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{refer(1)} command.  By default, @file{configure} will search for this tool.

@item TBL
Roff table command, @manref{tbl(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{tbl(1)} command.  By default, @file{configure} will search for this tool.

@item PIC
Roff picture command, @manref{pic(1)}.  This is only necessary when the option
@option{--with-cooked-manpages} has been specified and @file{configure} cannot find the proper
@manpage{pic(1)} command.  By default, @file{configure} will search for this tool.

@item GZIP
Default compression options provided to @command{GZIP_CMD}.

@item GZIP_CMD
Manpages (and kernel modules) compression commands, @manref{gzip(1)}.  This is only necessary when
the option @option{--without-compressed-manpages} has @emph{not} been specified and
@file{configure} cannot find the proper @manpage{gzip(1)} command.  By default,
@file{configure} will search for this tool.

@item BZIP2
Default compression options provided to @command{BZIP2_CMD}

@item BZIP2_CMD
Manpages compression commands, @manref{bzip2(1)}.  This is only necessary when the option
@option{--without-compressed-manpages} has @emph{not} been specified and @file{configure} cannot
find the proper @manpage{bzip2(1)} command.  By default, @file{configure} will search for this
tool.

@item MAKEWHATIS
Manpages apropros database rebuild command, @manref{makewhatis(8)}.  By default, @file{configure}
will search for this tool.  By default, @file{configure} will search for this tool.

@item CHKCONFIG
Chkconfig command, @manref{chkconfig(8)}.  This was used for installation of @command{init} scripts.  All
packages now come with @manpage{init_install(8)} and @manpage{init_remove(8)} scripts used to install and
remove @command{init} scripts on both RPM and Debian systems.

@item RPM
Rpm command, @manref{rpm(1)}.  This is only necessary for RPM builds.  By default,
@file{configure} will search for this tool.

@item RPMBUILD
Build RPM command, @manref{rpmbuild(1)}.  This is only necessary for RPM builds.  By default,
@file{configure} will search for this tool.  @manpage{rpm(1)} will be used instead of
@manpage{rpmbuild(1)} only if @manpage{rpmbuild(1)} cannot be found.

@item DPKG
Dpkg comand, @manref{dpkg(1)}.  This command is used for building Debian packages.  By default,
@file{configure} will search for this tool.

@item DPKG_SOURCE
Dpkg-source command, @manref{dpkg-source(1)}.  This command is used for building Debian dsc
packages.  By default, @file{configure} will search for this tool.

@item DPKG_BUILDPACKAGE
Dpkg-buildpackage command, @manref{dpkg-buildpackage(1)}.  This command is used for building Debian
deb packages.  By default, @file{configure} will search for this tool.

@item DEB_BUILD_ARCH
Debian build architecture.
This variable is used for building Debian packages.
The default is the autoconf build architecture.

@item DEB_BUILD_GNU_CPU
Debian build cpu.
This variable is used for building Debian packages.
The default is the autoconf build cpu.

@item DEB_BUILD_GNU_SYSTEM
Debian build os.
This variable is used for building Debian packages.
The default is the autoconf build os.

@item DEB_BUILD_GNU_TYPE
Debian build alias.
This variable is used for building Debian packages.
The default is the autoconf build alias.

@item DEB_HOST_ARCH
Debian host architecture.
This variable is used for building Debian packages.
The default is the autoconf host architecture.

@item DEB_HOST_GNU_CPU
Debian host cpu.
This variable is used for building Debian packages.
The default is the autoconf host cpu.

@item DEB_HOST_GNU_SYSTEM
Debian host os.
This variable is used for building Debian packages.
The default is the autoconf host os.

@item DEB_HOST_GNU_TYPE
Debian host alias.
This variable is used for building Debian packages.
The default is the autoconf host alias.

@item LDCONFIG
Configure loader command, @manref{ldconfig(8)}.  Command used to configure the loader when libraries
are installed.  By default, @file{configure} will search for this tool.

@item DESTDIR
Cross build root directory.  Specifies the root directory for build and installation.

@item DEPMOD
Build kernel module dependencies command, @manref{depmod(8)}.  This is used during installation of
kernel modules to a running kernel to rebuild the modules dependency database.  By default,
@file{configure} will search for this tool.

@item MODPROBE
Probe kernel module dependencies command, @manref{modprobe(8)}.  This is used during installation of
kernel modules to a running kernel to remove old modules.  By default, @file{configure} will
search for this tool.

@item LSMOD
List kernel modules command, @manref{lsmod(8)}.  This is used during installation of kernel modules
to a running kernel to detect old modules for removal.  By default, @file{configure} will search
for this tool.

@item LSOF
List open files command, @manref{lsof(1)}.  This is used during installation of kernel modules to a
running kernel to detect old modules for removal.  Processes owning the old kernel modules will be
killed and the module removed.  If the process restarts, the new module will be demand loaded.  By
default, @file{configure} will search for this tool.

@item GENKSYMS
Generate kernel symbols command, @manref{genksyms(8)}.  This is used for generating module symbol
versions during build.  By default, @file{configure} will search for this tool.

@item KGENKSYMS
Linux 2.6 generate kernel symbols command, @manref{genksyms(8)}.  This is used for generating module
symbol version during build.  By default, @file{configure} will search for this tool.

@item OBJDUMP
Object dumping command, @manref{objdump(1)}.  This is used for listing information about object
files.  By default, @file{configure} will search for this tool.

@item NM
Object symbol listing command, @manref{nm(1)}.  This is used for listing information about object
files.  By default, @file{configure} will search for this tool.

@item MODPOST_CACHE
Cache file for @manpage{modpost(1)}.  The version of the @command{modpost.sh} script that ships with each package
can cache information to a cache file to speed multiple builds.  This environment variable is used
to specify a cache file.

@item AUTOM4TE
Autom4te command, @manref{autom4te(1)}.  This is the executable used by @command{autotest} for pre- and
post-installation checks.  By default, @file{configure} will search for this tool.

@item AUTOTEST
Autotest macro build command, @manpage{autom4te(1)}.  This is the executable used by @command{autotest} for
pre- and post-installation checks.  By default, @file{configure} will search for this tool.
@end vtable

@subsubsection Build
To build from the tar ball, @xrefman{Building from the Tar Ball}.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Building
@section Building
@cindex building

@menu
* Building from the Source RPM::	the next best approach
* Building from the Debian DSC::	the next best approach for Debian
* Building from the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Building from the Source RPM
@subsection Building from the Source RPM
@cindex building, source srpm
@cindex source rpms

If you have downloaded the necessary source RPM (@pxrefman{Downloading the Source RPM}), then the
following instructions will rebuild the binary RPMs on your system.  Once the binary RPMs are
rebuilt, you may install them as described above (@pxrefman{Installing the Binary RPM}).

@noindent
The source RPM is rebuilt to binary RPMs as follows:

@cartouche
@example
% wget http://www.openss7.org/@-rpms/@-SRPMS/@-@value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
% rpmbuild --rebuild -vv @value{PACKAGE}-@value{VERSION}-@value{PACKAGE_RPMRELEASE}.src.rpm
@end example
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to tweak the resulting
binaries, @xrefman{Configuring the Source RPM}.  These options are provided on the @manpage{rpm(1)}
command line.  For example:

@cartouche
@example
% rpmbuild --rebuild -vv --target athlon-redhat-linux \ 
  --define "_kversion @value{_kversion}" \ 
  --with lfs -- @value{PACKAGE}@--@value{VERSION}@--@value{PACKAGE_RPMRELEASE}@-.src@-.rpm
@end example
@end cartouche

@noindent
will rebuild binary RPM
for the @samp{@value{_kversion}} kernel
for the @samp{athlon} architecture against the @cite{Linux Fast-STREAMS} @dfn{STREAMS} package.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary RPM, @xrefman{Installing the Binary RPM}.

@c ----------------------------------------------------------------------------

@node Building from the Debian DSC
@subsection Building from the Debian DSC
@cindex building, source dscs
@cindex source dscs

If you have downloaded the necessary Debian DSC (@pxrefman{Downloading the Debian DSC}), then the
following instructions will rebuild the binary DEBs on your system.  Once the binary DEBs are
rebuilt, you may install them as described above (@pxrefman{Installing the Debian DEB}).

@noindent
The Debian DSC is rebuilt to binary DEBs as follows:

@cartouche
@example
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.dsc
% wget http://www.openss7.org/@-debian/@-@value{PACKAGE}_@value{VERSION}@--@value{PACKAGE_DEBRELEASE}@-.tar@-.gz
% dpkg-buildpackage -v @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end example
@end cartouche

@noindent
The rebuild process can also recognize a number of options that can be used to tweak the resulting
binaries, @xrefman{Configuring the Debian DSC}.  These options are provided in the environment variable
@var{BUILD_DPKGOPTIONS} and have the same form as the options to @file{configure},
@xrefman{Configuring the Tar Ball}.  For example:

@cartouche
@example
% BUILD_DEBOPTIONS='
        --with-lfs
        --with-k-release=@value{_kversion}
        --host=athlon-debian-linux-gnu'
  dpkg-buildpackage -v \
  @value{PACKAGE}_@value{VERSION}-@value{PACKAGE_DEBRELEASE}.dsc
@end example
@end cartouche

@noindent
will rebuild binary DEB
for the @samp{@value{_kversion}} kernel
for the @samp{athlon} architecture against the @cite{Linux Fast-STREAMS} @dfn{STREAMS} package.
@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is only an example.}

@subsubheading Installation

To install the resulting binary DEB, @xrefman{Installing the Debian DEB}.

@c ----------------------------------------------------------------------------

@node Building from the Tar Ball
@subsection Building from the Tar Ball
@cindex building, tar ball
@cindex tar ball

If you have downloaded the tar ball (@pxrefman{Downloading the Tar Ball}), then the following
instructions will rebuild the package on your system.  (Note that the build process does not
required @command{root} privilege.)

@subsubsection Native Build

Following is an example of a native build against the running kernel:

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% tar -xjvf @value{PACKAGE}-@value{VERSION}.tar.bz2
% pushd @value{PACKAGE}-@value{VERSION}
% ./configure
% make
% popd
@end example
@end cartouche

@subsubsection Cross-Build

Following is an example for a cross-build.  The kernel release version must always be specified for
a cross-build.@footnote{Because it @emph{is} a cross-build, the kernel version on the build machine
is unlikely to be the kernel version of the target machine, except by coincidence.}  If you are
cross-building, specify the root for the build with environment variable @var{DESTDIR}.  The
cross-compile host must also be specified if different from the build host.  Either the compiler and
other tools must be in the usual places where GNU @manpage{autoconf(1)} can find them, or they must
be specified with declarations such as @samp{CC=/usr/@-lib/@-ppc@--linux/@-gcc} on the
@file{configure} command line.

@cartouche
@example
% wget http://www.openss7.org/@-@value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% tar -xjvf @value{PACKAGE}@--@value{VERSION}@-.tar@-.bz2
% pushd @value{PACKAGE}@--@value{VERSION}
% ./configure DESTDIR="/some/@-other/@-root" \ 
	--with-k-release=2.4.18 --host sparc-linux
% make
% popd
@end example
@end cartouche

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Installing
@section Installing
@cindex installing

@menu
* Installing the Binary RPM::		the easiest approach
* Installing the Debian DEB::		the easiest approach for Debian
* Installing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Installing the Binary RPM
@subsection Installing the Binary RPM
@cindex installing, binary rpms
@cindex binary rpms

If you have downloaded the necessary binary RPMs (@pxrefman{Downloading the Binary RPM}), or have
rebuilt binary RPMs using the source RPM (@pxrefman{Building from the Source RPM}), then the following
instructions will install the RPMs on your system. For additional information on @manpage{rpm(1)}, see
@manref{rpm(8)}.

@cartouche
@example
% pushd RPMS/i686
% rpm -ihv @value{PACKAGE}-*-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end example
@end cartouche

@noindent
You must have the correct binary RPMs downloaded or built for this to be successful.

Some of the packages are relocatable and can have final installation directories altered with the
@option{--relocate} option to @manpage{rpm(1)}, see @manref{rpm(8)}.
For example, the following will relocate the documentation and info directories:

@cartouche
@example
% pushd RPMS/i686
% rpm -ihv \ 
        --relocate '/usr/share/doc=/usr/local/share/doc' \ 
        --relocate '/usr/share/info=/usr/local/share/info' \ 
        -- @value{PACKAGE}-doc-@value{VERSION}-@value{PACKAGE_RPMRELEASE}@value{PACKAGE_RPMEXTRA}.i686.rpm
@end example
@end cartouche

@noindent
The previous example will install the @file{@value{PACKAGE}-doc} package by will relocate the
documentation an info directory contents to the @file{/usr/local} version.

@c ----------------------------------------------------------------------------

@node Installing the Debian DEB
@subsection Installing the Debian DEB
@cindex installing, binary debs
@cindex binary debs

If you have downloaded the necessary Debian DEBs (@pxrefman{Downloading the Debian DEB}), or have
rebuild binary DEBs using the Debian DSC (@pxrefman{Building from the Debian DSC}), then the following
instructions will install the DEBs on your system.  For additional information see @manref{dpkg(8)}.

@cartouche
@example
% pushd debian
% dpkg -iv @value{PACKAGE}-*_@value{VERSION}-@value{PACKAGE_DEBRELEASE}_*.deb
@end example
@end cartouche

@noindent
You must have the correct @file{.deb} files downloaded or build for this to be successful.

@c ----------------------------------------------------------------------------

@node Installing the Tar Ball
@subsection Installing the Tar Ball
@cindex installing, tar ball
@cindex tar ball

After the build process (@pxrefman{Building from the Tar Ball}), installation only requires execution
of one of two @manpage{automake(1)} targets:

@table @asis
@item @samp{make install}
The @samp{install} @manpage{automake(1)} target will install all the components of the package.
Root privilege is required to successfully invoke this target.

@item @samp{make install-strip}
The @samp{install-strip} @manpage{automake(1)} target will install all the components of the
package, but will strip unnecessary information out of the objects and compress manual pages.  Root
privilege is required to successfully invoke this target.
@end table

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Removing
@section Removing
@cindex removing

@menu
* Removing the Binary RPM::		the easiest approach
* Removing the Debian DEB::		the easiest approach for Debian
* Removing the Source RPM::		the next best approach
* Removing the Debian DSC::		the next best approach for Debian
* Removing the Tar Ball::		last resort
@end menu

@c ----------------------------------------------------------------------------

@node Removing the Binary RPM
@subsection Removing the Binary RPM
@cindex removing, binary rpms
@cindex binary rpms

To remove an installed version of the binary RPMs (whether obtained from the OpenSS7 binary RPM
releases, or whether created by the source RPM), execute the following command:

@cartouche
@example
% rpm -evv `rpm -qa | grep '^@value{PACKAGE}-'`
@end example
@end cartouche

For more information see @manref{rpm(1)}.

@c ----------------------------------------------------------------------------

@node Removing the Debian DEB
@subsection Removing the Debian DEB
@cindex removing, binary debs
@cindex binary debs

To remove and installed version of the Debian DEB (whether obtained from the OpenSS7 binary DEB
releases, or whether created by the Debian DSC), execute the following command:

@cartouche
@example
% dpkg -ev `dpkg -l | grep '^@value{PACKAGE}-'`
@end example
@end cartouche

For more information see @manref{dpkg(8)}.

@c ----------------------------------------------------------------------------

@node Removing the Source RPM
@subsection Removing the Source RPM
@cindex removing, source srpm
@cindex source rpms

To remove all the installed binary RPM build from the source RPM, see @refman{Removing the Binary RPM}.
Then simply remove the binary RPM package files and source RPM file.  A command such as:

@cartouche
@example
% find / -name '@value{PACKAGE}-*.rpm' -type f -print0 | xargs --null rm -f
@end example
@end cartouche

@noindent
should remove all @file{@value{PACKAGE_NAME}} RPMs from your system.

@c ----------------------------------------------------------------------------

@node Removing the Debian DSC
@subsection Removing the Debian DSC
@cindex removing, source dscs
@cindex source dscs

To remove all the installed binary DEB build from the Debian DSC, see @refman{Removing the Debian DEB}.
Then simply remove the binary DEB package files and Debian DSC file.  A command such as:

@cartouche
@example
% find / \( -name '@value{PACKAGE}-*.deb' \
         -o -name '@value{PACKAGE}-*.dsc' \
         -o -name '@value{PACKAGE}-*.tar.* \
         \) -type f -print0 | xargs --null rm -f
@end example
@end cartouche

@noindent
should remove all @file{@value{PACKAGE_NAME}} DEBs, DSCs and TARs from your system.

@c ----------------------------------------------------------------------------

@node Removing the Tar Ball
@subsection Removing the Tar Ball
@cindex removing, tar ball
@cindex tar ball

To remove a version installed from tar ball, change to the build directory where the package was
built and use the @samp{uninstall} @manpage{automake(1)} target as follows:

@cartouche
@example
% cd /usr/src/@value{PACKAGE}
% make uninstall
% cd ..
% rm -fr @value{PACKAGE}-@value{VERSION}
% rm -f @value{PACKAGE}-@value{VERSION}.tar.gz
% rm -f @value{PACKAGE}-@value{VERSION}.tar.bz2
@end example
@end cartouche

If you have inadvertently removed the build directory and, therefore, no longer have a configured
directory from which to execute @samp{make uninstall}, then perform all of the steps for
configuration and installation (@pxrefman{Installing the Tar Ball}) except the final installation and
then perform the steps above.

@c ----------------------------------------------------------------------------
@c ----------------------------------------------------------------------------

@node Loading
@section Loading
@cindex loading

@subsection Normal Module Loading

When @value{PACKAGE_TITLE} installs, modules and drivers belonging to @value{pkgtype} packages are
normally configured for demand loading.  The @samp{install} and @samp{install-strip}
@manpage{automake(1)}
@mkindex all
@mkindex install
@mkindex install-strip
targets will make the necessary changes to the @file{/etc/@-modules@-.conf} file and place the
modules in an appropriate place in
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{package}}.
The @samp{make install} process should have copied the kernel module files @file{streams-*.o} to the
directory
@file{@value{_rootdir}/@-lib/@-modules/@-@value{_kversion}/@-@value{package}}.
This means that to load any of these modules, you can simply execute, for example, @samp{modprobe
stream-@var{somedriver}}.@footnote{Note that the @samp{_kversion} of @samp{@value{_kversion}} is
only an example.}

@subsubsection Linux Fast-STREAMS Module Loading

The @file{@value{PACKAGE}} demand load system supports both the old @command{kerneld} and the new
@command{kmod} mechanisms for demand loading kernel modules.

The convention for @file{@value{PACKAGE}} kernel loadable object files is:
@itemize @bullet
@item Their name start with "streams-".
@item They are placed in @file{/@-lib@-/@-modules@-/@-@value{_kversion}@-/@-streams@-/@-}, where @samp{@value{_kversion}} is an example kernel version.
@pgindex /lib/@-modules/@-@value{_kversion}/@-streams/@-
@end itemize

If your kernel has been built using the @file{kerneld} daemon, then @file{@value{PACKAGE_NAME}}
kernel modules will automatically load as soon as the @dfn{STREAMS} module is pushed or the driver
is opened.  The @samp{make install} process makes the necessary changes to the
@file{@value{_rootdir}/@-etc/@-modules.conf} file.  After the install, you will see lines like the
following added to your @file{@value{_rootdir}/@-etc/@-modules.conf} file:

@cartouche
@example
prune modules.@value{pkgexample}
if -f /lib/modules/`uname -r`/modules.@value{pkgexample}
include /lib/modules/`uname -r`/modules.@value{pkgexample}
endif
@end example
@end cartouche

@noindent
which will provide for demand loading of the modules if they have been built and installed for the
running kernel.  The @file{/lib/@-modules/@-@command{`uname -r`}/@-modules.@value{pkgexample}} file
looks like this:

@cartouche
@smallexample
alias char-major-245  streams-@var{some_driver}
alias char-major-246  streams-@var{other_driver}
@end smallexample
@end cartouche

Note that @dfn{STREAMS} modules are not listed in this file, but will be loaded by name using
@file{kerneld} if available.

@cite{Linux Fast-STREAMS} has a wider range of kernel module loading mechanisms than is provided by
the deprecated @cite{LiS}.  For mechanisms used for kernel module loading under @cite{Linux
Fast-STREAMS}, @xref{Top, About This Manual, , STREAMS, Linux Fast-STREAMS Reference Manual}.

@subsubsection Linux STREAMS Module Loading

@cite{LiS} is deprecated and this section has been deleted.

@node Maintenance
@section Maintenance

@menu
* Makefile Targets::
@end menu

@node Makefile Targets
@subsection Makefile Targets

@manpage{automake(1)} has many targets, not all of which are obvious to the casual user.  In
addition, @cite{OpenSS7} @manpage{automake(1)} files have additional rules added to make maintaining
and releasing a package somewhat easier.  This list of targets provides some help with what targets
can be invoked, what they do, and what they hope to achieve.  The available targets are as follows:

@menu
* User Targets::
* Maintainer Targets::
* Clean Targets::
* Manual Page Targets::
* Release Targets::
* Logging Targets::
* Problem Report Targets::
* Release Archive Targets::
* RPM Build Targets::
* Debian Build Targets::
* Documentation Targets::
@end menu

@node User Targets
@subsubsection User Targets

The following are normal targets intended to be invoked by installers of the package.  They are
concerned with compiling, checking the compile, installing, checking the installation, and
removing the package.

@table @samp
@item [all]
@mkindex all
This is also the default target.  It compiles the package and all @value{pkgtype} packages selected
by @file{configure}.  This is performed after configuring the source with @samp{configure}.  A
@file{Makefile} stub is provided so that if the package has not had @manpage{autoreconf(1)} run
(such as when checked out from CVS, the package will attempt to run @samp{autoreconf -fiv}.

All @cite{OpenSS7 Project} packages are configured without maintainer mode and without dependency
tracking by default.  This speeds compilation of the package for one-time builds.  This also means
that if you are developing using the source package (edit-compile-test cycle), changes made to
source files will not cause the automatic rebuilding due to dependencies.  There are two ways to
enable dependency tracking: specify @option{--enable-maintainer-mode} to @file{configure}; or,
specify @option{--enable-dependency-tracking} to @file{configure}.  I use the former during my
edit-compile-test cycle.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.

@item check
@mkindex check
All @cite{OpenSS7 Project} @value{pkgtype} packages provide check scripts for the check target.
This step is performed after compiling the package and will run all of the @samp{check} programs
against the compiled binaries.  Which checks are performed depends on whether
@option{--enable-maintainer-mode} was specified to @file{configure}.  If in maintainer mode,
checks that assist with the release of the package will be run (such as checking that all manual
pages load properly and that they have required sections.)  We recommend running the check stage
before installing, because it catches problems that might keep the installed package from
functioning properly.

Another way to enable the greater set of checks, without invoking maintainer mode, is to specify
@option{--enable-checks} to @file{configure}.  For more information, see @refman{Pre-installation
Checks}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target, although the functions
performed are customized for the @cite{OpenSS7 Project}.  This target does not require root
privilege.

@item install
@itemx install-strip
@mkindex install
@mkindex install-strip
The @samp{install} target installs the package by installing each @value{pkgtype} package.  This
target also performs some actions similar to the pre- and post-install scripts used by packaging
tools such as @manpage{rpm(1)} or @manpage{dpkg(1)}.  The @samp{install-strip} target strips
unnecessary symbols from executables and kernel modules before installing.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target requires root
privilege.

@item installcheck
@mkindex installcheck
All @cite{OpenSS7 Project} packages provide test scripts for the @samp{installcheck} target.  Test
scripts are created and run using @command{autotest} (part of the @manpage{autoconf(1)} package).
Which test suites are run and how extensive they are depends on whether
@option{--enable-maintainer-mode} was specified to @file{configure}.  When in maintainer mode,
all test suites will be run.  When not in maintainer mode, only a few post-install checks will be
performed, but the test suites themselves will be installed in
@file{@value{_libexecdir}/@value{package}}@footnote{@file{@value{_libexecdir}/@value{package}}
is just an example, the actual location is @file{$@{libexecdir@}/$@{PACKAGE@}}, which varies from
distribution to distribution (as some distributions such as Mandriva do not have a libexec
directory).} for later use.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege.  Tests requiring root privilege will be skipped when run as a regular user.  Tests
requiring regular account privileges will be skipped when run as root.

@item retest
@mkindex retest
To complement the @samp{installcheck} target above, all @cite{OpenSS7 Project} packages provide the
@samp{retest} target as a means to rerun failed conformance test suite test cases.  The @samp{retest}
target is provided because some test cases in the test suites have delicate timing considerations
that allow them to fail sporadically.  Invoking this target will retest the failed cases until no
cases that are not expected failures remain.

This is an @cite{OpenSS7 Project} specific makefile target.  As with @samp{installcheck}, this
target might require root privilege.  Tests requiring root privilege will be skipped when run as a
regular user.  Tests requiring regular account privileges will be skipped when run as root.

@item uninstall
@mkindex uninstall
This target will reverse the steps taken to install the package.  This target also performs pre- and
post- erase scripts used by packaging tools such as @cite{rpm} or @cite{dpkg}.  You need to have a
configured build directory from which to execute this target, however, you do not need to have
compiled any of the files in that build directory.@footnote{Therefore, it is possible to download
the package, configure it, and then uninstall it.  This is handy if you do not have the sources used
to build and install the package immediately available.}

The @samp{uninstall} target unfortunately removes add-on packages in the same order in which they
were installed.  This is not good for the @cite{OpenSS7 Master Package}, where the @samp{remove}
target should be used instead.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target requires root
privilege.

@item remove
@mkindex remove
This target is like @samp{uninstall} with the exception that it removes add-on packages in the
reverse order that installation was performed.@footnote{This is useful from the @cite{OpenSS7 Master
Package}.}

This is an @cite{OpenSS7 Project} specific makefile target.  This target requires root privilege.
@end table

@node Maintainer Targets
@subsubsection Maintainer Targets

The following targets are targets intended for use by maintainers of the package, or those
responsible for release and packaging of a derivative work of the package.  Some of these targets
are only effective when maintainer mode has been invoked (@option{--enable-maintainer-mode} specified
to @file{configure}.)

@table @samp
@item dist
@mkindex dist
Creates a distribution package (tarball) in the top level build directory.  @cite{OpenSS7 Project}
packages distribute two archives: a @samp{gzip tar} archive and a @samp{bzip tar} archive.  These
archives will have the name @file{@value{PACKAGE}-@value{VERSION}.tar.gz} and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.

@item distcheck
@mkindex distcheck
This target is intended for use when releasing the package.  It creates the @manpage{tar(1)} archives
above and then unpacks the tarball in a source directory, configures in a separate build directory,
compiles the package, installs the package in a separate install directory, tests the install
package to ensure that some components work, and, finally, uses the unpacked source tree to build
another tarball.  If you have added or removed files from the package, this is a good way to ensure
that everything is still stable for release.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target does not require
root privilege.
@end table

@node Clean Targets
@subsubsection Clean Targets

@table @samp
@item mostlyclean
@mkindex mostlyclean
Cleans out most of the files from the compile stage.  This target is helpful if you have not enabled
dependency tracking and need to recompile with changes.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.
This target does not require root privilege.

@item clean
@mkindex clean
Cleans all the files from the build directory generated during the @samp{make [all]} phase.  It does
not, however, remove files from the directory left there from the @file{configure} run.  Use the
@samp{distclean} target to remove those too.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item distclean
@mkindex distclean
This target cleans out the directories left behind by @samp{distcheck} and removes all the
@file{configure} and generated files from the build directory.  This will effectively remove all
the files in the build directory, with the except of files that belong to you or some other process.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item maintainer-clean
@mkindex maintainer-clean
This target not only removes files from the build directory, it removes generated files from the
source directory as well.  Care should be taken when invoking this target, because it removes files
generated by the maintainer and distributed with the archive that might require special tools to
regenerate.  These special tools might only be available to the maintainer.@footnote{Theoretically
this is true, however, the @cite{OpenSS7 Project} does not use any maintainer programs that are not
generally available (i.e. open source).}
It also means that you probably need a full blown Linux system to rebuild the package. For more
information, see @refman{Downloading from CVS}.

This is a standard @cite{GNU} @manpage{automake(1)} makefile target.  This target might require root
privilege if the @samp{installcheck} target or the @command{testsuite} was invoked with root
privilege (leaving files belonging to root).

@item check-clean
@mkindex check-clean
This target removes log files left behind by the @samp{check} target.  By default, the check scripts
append to log files in the top level build directory.  This target can be used to clean out those
log files before the next run.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Manual Page Targets
@subsubsection Manual Page Targets

The following targets are used to build, install and uninstall just the manual pages from the
distribution.  These targets are good for creating a distribution of just the manual pages.  When
building atop multiple packages, these targets recurse down through each package.

@table @samp
@item mans
@mkindex mans
Build all of the manual pages.  This involves performing parameter substitution on manual pages and
optionally cooking the manual pages if @option{--with-cooked-manpages} was requested during
configuration.

@item install-mans
@mkindex install-mans
Installs the manual pages under @var{DESTDIR}.  Specify @var{DESTDIR} to place the manual pages
wherever you see fit.  If @var{DESTDIR} is not specified on the command line, the manual pages will
be installed in the normal installation directory.

@item uninstall-mans
@mkindex uninstall-mans
Uninstalls the manual pages from @var{DESTDIR}.  Specify @var{DESTDIR} to indicate where to remove
the manual pages from.  If @var{DESTDIR} is not specified on the command line, the manual pages will
be removed from the normal installation directory.
@end table

@node Release Targets
@subsubsection Release Targets

The following are targets used to generate complete releases into the package distribution
directory.  These are good for unattended and NFS builds, which is what I use them for.  Also, when
building from atop multiple packages, these targets also recurse down through each package.

@table @samp
@item release
@mkindex release
Build all of the things necessary to generate a release.  On an @manpage{rpm(1)} system this is the
distribution archives, the source rpm, and the architecture dependent and architecture independent
binary rpms.  All items are placed in the package distribution directory that can be specified with
the @option{--with-pkg-distdir=DIR} option to @file{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release
@mkindex forced-release
The @samp{release} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign
@mkindex release-sign
You will be prompted for a password, unless to specify it to make with the @var{GNUPGPASS} variable.
For unattended or non-interactive builds with signing, you can do that as: @samp{make
GNUPGPASS=mypasswd release-sign}

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item forced-release-sign
@mkindex forced-release-sign
The @samp{release-sign} target will not regenerate any files that already exist in the package
distribution directory.  This forced target will.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean
@mkindex release-clean
This target will remove all distribution files for the current package from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Logging Targets
@subsubsection Logging Targets

For convenience, to log the output of a number of targets to a file, log targets are defined.  The
log file itself is used as the target to make, but make invokes the target minus a @file{.log}
suffix.  So, for example, to log the results of target @samp{foo}, invoke the target @samp{foo.log}.
The only target that this does not apply to is @samp{compile.log}.  When you invoke the target
@samp{compile.log} a simple @manpage{automake(1)} is invoked and logged to the file @file{compile.log}.
The @samp{foo.log} rule applies to all other targets.  This does not work for all targets, just a
selected few.@footnote{Note that because logging targets invoke a pipe, @manpage{automake(1)} does not
return the correct return status (always returns success if the @manpage{tee(1)} operation is
successful).  Therefore, these targets should not be invoked by scripts that need to use the return
value from @manpage{automake(1)}.} Following are the logging targets:

@subsubheading Common Logging Targets

Common logging targets correspond to normal user @manpage{automake(1)} makefile targets as follows:

@table @samp
@item compile.log
@mkindex compile.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{[all]}.

@item check.log
@mkindex check.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{check}.

@item install.log
@mkindex install.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{install}.

@item installcheck.log
@mkindex installcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{installcheck}.

@item uninstall.log
@mkindex uninstall.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{uninstall}.

@item remove.log
@mkindex remove.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{remove}
target.
@end table

@subsubheading Maintainer Logging Targets

Maintainer logging targets correspond to maintainer mode @manpage{automake(1)} makefile targets as
follows:

@table @samp
@item dist.log
@mkindex dist.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{dist}.

@item distcheck.log
@mkindex distcheck.log
This is an @cite{OpenSS7 Project} specific makefile target,
but it invokes the standard @cite{GNU} @manpage{automake(1)} makefile target
@samp{distcheck}.

@item srpm.log
@mkindex srpm.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{srpm}
target.

@item rebuild.log
@mkindex rebuild.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{rebuild}
target.

@item resign.log
@mkindex resign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{resign}
target.

@item release.log
@mkindex release.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{release}
target.

@item release-sign.log
@mkindex release-sign.log
This is an @cite{OpenSS7 Project} specific makefile target,
that invokes the @cite{OpenSS7 Project}
@samp{release-sign}
target.
@end table

If you want to add one, simply add it to @var{LOGGING_TARGETS} in @file{Makefile.am}.

@node Problem Report Targets
@subsubsection Problem Report Targets

To ease problem report generation, all logging targets will automatically generate a problem report
suitable for mailing in the file @file{@i{target}.pr} for target @samp{@i{target}.log}.  This
problem report file is in the form of an email and can be sent using the included @command{send-pr}
script or by invoking the @samp{send-pr} makefile target.

There are two additional problem report targets:

@table @samp
@item pr
@mkindex pr
The @samp{pr} target is for independently generating a problem report outside of the build or
installation process.  The target will automatically generate a problem report skeleton suitable for
editing and mailing in the file @file{problem.pr}.  This problem report file is in the form of an
email and can be edited and sent directly, or sent using the included @command{send-pr} script or
by invoking the @samp{send-pr} target.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item send-pr
@mkindex send-pr
The @samp{send-pr} target is for finalizing and mailing a problem report generated either inside or
outside the build and installation process.  The target will automatically finalize and mail the
@file{problem.pr} problem report if it has changed since the last time that @samp{send-pr} was
invoked.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege (unless the problem report file was generated as root).
@end table

@node Release Archive Targets
@subsubsection Release Archive Targets

The following targets are used to generate and clean distribution archive and signature files.
Whereas the @samp{dist} target affects archives in the top build directory, the
@samp{release-archive} targets affects archives in the package distribution directory (either the
top build directory or that specified with @option{--with-pkg-distdir=DIR} to @file{configure}).

You can change the directory to which packages are distributed by using the
@option{--with-pkg-distdir=DIR} option to @file{configure}.  The default directory is the top build
directory.

@table @samp
@item release-archives
@mkindex release-archives
This target creates the distribution archive files if they have not already been created.  This not
only runs the @samp{dist} target, but also copies the files to the distribution directory, which, by
default is the top build directory.

The files generated are named:

@file{@value{PACKAGE}-@value{VERSION}.tar.gz}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2}

You can change this distribution directory with the @option{--with-pkg-distdir} option to
@file{configure}.  See @samp{./configure --help} for more details on options.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-sign-archives
@mkindex release-sign-archives
This target is like @samp{release-archives}, except that it also signs the archives using a
@cite{GPG} detached signature.  You will be prompted for a password unless you pass the
@var{GNUPGPASS} variable to make.  For automated or unattended builds, pass the @var{GNUPGPASS}
variable like so:

@samp{make GNUPGPASS=mypasswd release-sign-archives}

Signature files will be named:

@file{@value{PACKAGE}-@value{VERSION}.tar.gz.asc}
and
@file{@value{PACKAGE}-@value{VERSION}.tar.bz2.asc}

These files will be moved to the package distribution directory with the plain text archives.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item release-clean-archives
@mkindex release-clean-archives
This target will clean the release archives and signature files from the package distribution
directory.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node RPM Build Targets
@subsubsection RPM Build Targets

On @manpage{rpm(1)} systems, or systems sporting rpm packaging tools, the following targets are used to
generate @manpage{rpm(1)} release packages.  The epoch and release number can be controlled by the
contents of the @file{.rpmepoch} and @file{.rpmrelease} files, or with the
@option{--with-rpm-epoch=EPOCH} and @option{--with-rpm-release=RELEASE} options to @file{configure}.
See @samp{configure --help} for more information on options.  We always use release number @samp{1}.
You can use release numbers above @samp{1}.

@table @samp
@item srpm
@mkindex srpm
This target generates the source rpm for the package (without signing the source rpm).  The source
rpm will be named: @file{@value{PACKAGE}-@value{VERSION}-1.srpm}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rpms
@mkindex rpms
This target is responsible for generating all of the package binary rpms for the architecture.  The
binary rpms will be named:

@file{@value{PACKAGE}-*-@value{VERSION}-1.*.rpm}

where the stars indicate the subpackage and the architecture.  Both the architecture specific
subpackages (binary objects) and the architecture independent (@file{.noarch}) subpackages will be
built unless the the former was disabled with the option @option{--disable-arch}, or the later with
the option @option{--disable-indep}, passed to @file{configure}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sign
@itemx srpm-sign
@mkindex sign
@mkindex srpm-sign
These two targets are the same.  When invoked, they will add a signature to the source rpm file,
provided that the file does not already have a signature.  You will be prompted for a password if a
signature is required.  Automated or unattended builds can be achieved by using the @command{emake}
expect script, included in
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item rebuild
@mkindex rebuild
This target accepts searches out a list of kernel names from the @file{$@{DESTDIR@}/lib/modules}
directory and builds rpms for those kernels and for each of a set of architectures given in the
@var{AM_RPMTARGETS} variable to make.  This is convenience target for building a group of rpms on a
given build machine.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item resign
@mkindex resign
This target will search out and sign, with a @cite{GPG} signature, the source rpm, and all of the
binary rpms for this package that can be found in the package distribution directory.  This target
will prompt for a @cite{GPG} password.  Automated or unattended builds can be achieved with the
@command{emake} expect script located here:
@file{$@{srcdir@}/scripts/emake}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Debian Build Targets
@subsubsection Debian Build Targets

On Debian systems, or systems sporting Debian packaging tools, the following targets are used to
generate Debian release packages.  The release number can be controlled by the contents of the
@file{.debrelease} file, or with the @option{--with-debrelease=RELEASENUMBER} option to
@file{configure}.  See @samp{configure --help} for more information on options.

@table @samp
@item dsc
@mkindex dsc
This target will build the Debian source change package (@file{.dsc} file).  We use release number
@samp{0} so that the entire tarball is included in the @file{dsc} file.  You can use release number
@samp{1} for the same purposes.  Release numbers above @samp{1} will not include the entire tarball.
The @file{.dsc} file will be named: @file{@value{PACKAGE}_@value{VERSION}-0.dsc}.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item sigs
@mkindex sigs
This target signs the @file{.deb} files.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item debs
@mkindex debs
This target will build the Debian binary package (@file{.deb} file) from the @file{.dsc} created
above.  (This target will also create the @file{.dsc} if it has not been created already.)  The
subpackage @file{.deb} files will be named: @file{@value{PACKAGE}-*_@value{VERSION}-0_*.deb}, where
the stars indicate the subpackage and the architecture.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.

@item csig
@mkindex csig
This target signs the @file{.dsc} file.  You will be prompted for a password, unless to specify it
to make with the @var{GNUPGPASS} variable.

This is an @cite{OpenSS7 Project} specific makefile target.
This target does not require root privilege.
@end table

@node Documentation Targets
@subsubsection Documentation Targets

On systems that have @manref{doxygen(1)} documentation tool, the following targets are used to
generate doxygen html documentation:

@table @samp
@item doxy
@mkindex doxy
This target generates @manref{doxygen(1)} documetnation from suitably marked sources.  File
containing the necessary documentation marks are discovered automatically by @command{configure}.
Doxygen documentation can be generated bus is not distributed.  Documentation is cerated in the
subdirectory @file{doc/html}.
@end table
