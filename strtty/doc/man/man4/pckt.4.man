'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) $Id: pckt.4.man,v 0.9.2.1 2006/09/29 11:40:04 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2006  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2006/09/29 11:40:04 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: pckt.4.man,v $
.\" Revision 0.9.2.1  2006/09/29 11:40:04  brian
.\" - new files for strtty package and manual pages
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strtty.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strtty.macros
.\"
.\"
.TH PCKT 4 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ System File Formats"
.\"
.\"
.SH NAME
.B pckt
\- \fISTREAMS\fR Packet Mode Module
.\"
.\"
.SH SYNOPSIS
.HP
.BI "int fd = open(" \fR\(lq/dev/ptmx\(rq\fP ", " \fRO_RDWR\fP );
.HP
.BI "int ioctl(" fd ", " \fRI_PUSH\fP ", " \fR\(lqpckt\(rq\fP );
.\"
.\"
.SH DESCRIPTION
.PP
.B pckt
is a
.IR STREAMS (9)
module that is pushed over the control end of a
.IR STREAMS -based
master pseudo-terminal device,
.BR pty (4),
to packetize messages sent by the slave side of
a pseudo-terminal that would otherwise be processed by the Stream head.  This
allows the user process on the master side of the pseudo-terminal to be
informed of state changes.
.PP
To enable the packet mode on the master side of a pseudo-terminal,
.BR pty (4),
the master side user process must push the
.RI \(lq pckt \(rq
module using the
.BR I_PUSH (7)
.I STREAMS
input-output control command.
.PP
Once packet mode has been enabled on the Stream by pushing the
.B pckt
module, all
all write-side,
.BR write (2s),
.BR putmsg (2),
.BR putpmsg (2s)
operations, are unaltered.
When the user process writes or puts a message to the Stream, it is passed to
the slave by the pseudo-terminal device,
.BR pty (4),
as normal.
.PP
In the packet mode, read-side,
.BR read (2s),
.BR getmsg (2),
.BR getpmsg (2s)
operations, are altered.
The
.B pckt
module intercepts certain
.IR STREAMS (9)
messages that would otherwise be processed by a real
.BR tty (4)
driver, and converts them into
.BR M_PROTO (9)
messages that can be subsequently read by the user process using
.BR read (2s),
.BR getmsg (2),
or
.BR getpmsg (2s).
(Normally, without the
.B pckt
module pushed, these intercepted messages would be processed by the Stream
head.)
.PP
Messages are encapsulated (packetized) by transforming them into
.BR M_DATA (9)
messages and prepending an
.BR M_PROTO (9)
message block that contains the original value of the message type (before it
was overwritten with
.BR M_DATA (9))
in the
.BR M_PROTO (9)
message block.
.PP
Message types that are transformed in this fashion are:
.BR M_DATA (9),
.BR M_FLUSH (9),
.BR M_IOCTL (9),
.BR M_PCPROTO (9),
.BR M_PROTO (9),
.BR M_READ (9),
.BR M_START (9),
.BR M_STARTI (9),
.BR M_STOP "(9) and "
.BR M_STOPI (9).
Other messages are passed to the Stream head unchanged.
Of the messages packetized, most are simply packetized and passed to the
Stream head to be read by the user process.  Several receive special treatment
as follows:
.TP \w'\fBM_FLUSH\fR(9)\(em'u
.BR M_FLUSH (9)
The pseudo-terminal device,
.BR pty (4),
slave side reverses the send of the
.BR M_FLUSH (9)
flush bits so that they can be used directly by the master side Stream head.
This is similar to the
.BR pipemod (4)
module.  To provide an encapsulated message that contains flush bits that are
exactly as they were issued by the user of the slave side of the
.BR pty (4),
.B pckt
reverses the
.BR FLUSHR " and " FLUSHW
bits before packetizing the
.BR M_FLUSH (9)
message.
Also, because every Stream must respond to
.BR M_FLUSH (9)
by flushing queues,
.B pckt
also passes the
.BR M_FLUSH (9)
message to the Stream head.  However, to preserve packetized messages that may
be sitting on the Stream head read queue, the read side is not flushed and the
.B FLUSHR
bit in any
.BR M_FLUSH (9)
message passed to the Stream head will be cleared.
.RS
.PP
The result is as follows, depending on the value of the
.BR M_FLUSH (9)
bits:
.TP \w'\fBFLUSHRW\fR\(em'u
.B FLUSHR
The bits are set to
.B FLUSHW
and the message is packetized.  No
.BR M_FLUSH (9)
message is sent to the Stream head.
.TP
.B FLUSHW
The bits are set to
.BR FLUSHR
and the message is packetized.  An
.BR M_FLUSH (9)
message is sent to the Stream head containing the
.B FLUSHW
flag.
.TP
.B FLUSHRW
The bits are set to
.B FLUSHRW
and the message is packetized.  An
.BR M_FLUSH (9)
message is sent to the Stream head containing only the
.BR FLUSHW
flag.
.RE
.TP
.BR M_IOCTL (9)
The
.BR M_IOCTL (9)
message is packetized as normal on 32-bit systems.  On 64-bit systems, where
the user process that pushed the
.B pckt
module on the master side of the pseudo-terminal,
.BR pty (4),
device is a 32-bit process, the
.BR iocblk (9)
structure contained in the message block is transformed by the
.B pckt
module into a 32-bit representation of the
.BR iocblk (9)
structure
.RB ( "struct iocblk32" )
before being packetized.
.IP ""
It is possible for the
.BR pkct (4)
module to determine whether the master process is a 32-bit or 64-bit process (remember that only one
open of the master side of a pseudo-terminal is permitted) by whether the
.B FILP32
flag was passed in the
.IR oflags
argument to the
.BR qi_qopen (9)
procedure of the 
.B pckt
module.  Also, the
.B IOC_ILP32
flag is set in the
.I ioc_flag
field of the
.BR iocblk (9)
structure indicates the data model of the sender; however, the data model of the sender happens to
be the slave side.
.IP ""
.BR ptem (4)
only sends the following input-output controls to the master side:
.BR TCSETA ,
.BR TCSETAW ,
.BR TCSETAF ,
.BR TCSETS ,
.BR TCSETSW ,
.BR TCSETSF ,
.BR TCSBRK  " and "
.BR TIOCSWINSZ .
.BR TCSETA ,
.BR TCSETAW ,
.BR TCSETAF ,
have an argument containing a
.BR termio (5)
structure;
.BR TCSETS ,
.BR TCSETSW ,
.BR TCSETSF ,
have an argument containing a
.BR termios (5)
structure;
.BR TCSBRK ,
has an integer argument;
.BR TIOCSWINSZ ,
has an argumnet containing a
.BR winsize (5)
structure.
These three structures are all made up of
.BR short s,
.BR int s,
and
.BR char s,
and do not require conversion.
.IP ""
Although
.BR M_IOCTL (9)
messages are packetized, there is no way for the user process to acknowledge
the message.  (Normally the default Stream head behaviour is to send a
.BR M_IOCNAK (9)
message in response to any
.BR M_IOCTL (9)
message received at the Stream head.)
The
.BR M_IOCTL (9)
message arriving at the master side of a pseudo-terminal are have normally been sent by the
pseudo-terminal emulation module,
.BR ptem (4),
that was pushed on the slave side.  These
.BR M_IOCTL (9)
messages are copies of the ones for which the
.BR ptem (4)
module has already returned positive acknowledgement via
.BR M_IOCACK (9)
messages back to
.BR ldterm (4).
(In case the
.B pkct
module was not pushed, the
.BR ptem (4)
module discards any
.BR M_IOCNAK (9)
messages that might have been sent by the Stream head in response to arriving
.BR M_IOCTL (9)
messages.)
.TP
.BR M_READ (9)
The
.BR M_READ (9)
message is packetized as normal on 32-bit systems.  On 64-bit systems, where
the user process that pushed the
.B pckt
module on the master side of the pseudo-terminal,
.BR pty (4),
device is a 32-bit process, the
.B size_t
count contained in the message block is transformed by the
.B pckt
module into a 32-bit representation of the
.B size_t
.RB ( size32_t )
before being packetized.
.PP
The user process reading the master side of the pseudo-terminal device is
responsible for any other 64-bit to 32-bit conversions that might be required
on data structures contained in other messages of which the
.B pckt
module is unaware.
.\"
.\"
.PP
The
.B pckt
module does the following:
.IP \(bu \w'\(bu\(em'u
When a message is passed to this module on its write queue, the modules does no processing and
passes the mssage to the next module or driver.
.IP \(bu
The
.B pckt
modules creates an
.BR M_PROTO (9)
message when one of the following messages is passed to it:
.BR M_DATA (9),
.BR M_IOCTL (9),
.BR M_PROTO (9),
.BR M_PCPROTO (9),
.BR M_FLUSH (9),
.BR M_START (9),
.BR M_STOP (9),
.BR M_STARTI (9),
.BR M_STOPI "(9) and
.BR M_READ (9).
.IP ""
All other messages are passed through.  The
.BR M_PROTO (9)
message is passed upstream and retreived when the user issues
.BR getmsg (2).
.IP \(bu
If the message is an
.BR M_FLUSH (9)
message,
.B pckt
does the following:
.IP ""
If the flag is
.BR FLUSHW ,
it is changed to
.B FLUSHR
(because
.B FLUSHR
was the original flag before the
.BR pts (4)
driver changed it),
packetized into a
.BR M_PROTO (9)
message, and passed upstream.
To prevent the Stream head's read queue from being flushed, the original
.BR M_FLUSH (9)
message must not be passed upstream.
.IP ""
If the flag is
.BR FLUSHR ,
it is changed to
.BR FLUSHW ,
packetized into an
.BR M_PROTO (9)
message, and passed upstream.  To flush write queues properly, an
.BR M_FLUSH (9)
message with the
.B FLUSHW
flag set is also sent upstream.
.IP ""
If the flag is
.BR FLUSHRW ,
the message with both flags set is packetized and passed upstream.  An
.BR M_FLUSH (9)
message with only the
.B FLUSHW
flag set is sent upstream.
.\"
.\"
.SH USAGE
.PP
When a master wishes to use the control side of a pseudo-terminal in the
packet mode, the
.B pckt
module is normally pushed on the master side of a pseudo-terminal,
.BR pty (4),
device before any call to
.BR fork (2)
or
.BR exec (2)
that invokes the slave process.  This ensures that there are no messages queued
at the master side Stream head before the module is pushed.
.RB ( pckt
does not check the Stream head read queue when it is pushed, as
.BR tirdwr (4)
does.)
.PP
The
.B pckt
module is not normally popped from the Stream, but the Stream is simply closed
once an end-of-file has been read or the Stream is hung up by the slave side.
.\"
.\"
.SH IOCTLS
.PP
The
.B pckt
module does not process and intput-output controls of its own.
.\"
.\"
.SH NOTICES
.PP
The user process reading the master side of the pseudo-terminal device,
.BR pty (4),
is responsible for separating data originally contained in
.BR M_DATA (9)
message blocks, from the control portion.  So, for example, the
.BR M_IOCTL (9)
message consists of one
.BR M_IOCTL (9)
message block and a string of
.BR M_DATA (9)
message blocks.  Once packetized, these will be transformed into one
.BR M_PROTO (9)
message block containing the original
.B M_IOCTL
message type, followed by the entire message made up of
.BR M_DATA (9)
message blocks.  It is the user's responsibility to separate the data portion
of a message read by
.BR getmsg (2)
into the original
.BR M_IOCTL (9)
portion and the
.BR M_DATA (9)
portion.  Doing so will always make some assumptions about the length of the
original leading message block in the message.
.PP
The
.BR M_CTL (9)
message is conspicuous by its absence in the list of packetized messages.
Nevertheless, it is not possible for the user process to send an
.BR M_CTL (9)
in response.
.\"
.\"
.\".SH EXAMPLES
.\".PP
.\"
.\"
.SH MODULES
.PP
.B pckt
is a
.I STREAMS
module named
.RI \(lq pckt \(rq.
.\"
.\"
.SH "SEE ALSO"
.PP
.BR pty (4),
.BR tty (4),
.BR pipemod (4),
.BR iocblk (9),
.IR STREAMS (9),
.BR I_PUSH (7),
.BR write (2s),
.BR putmsg (2),
.BR putpmsg (2s),
.BR read (2s),
.BR getmsg (2),
.BR getpmsg (2s),
.BR M_PROTO (9),
.BR M_DATA (9),
.BR M_FLUSH (9),
.BR M_IOCTL (9),
.BR M_PCPROTO (9),
.BR M_READ (9),
.BR M_START (9),
.BR M_STARTI (9),
.BR M_STOP (9),
.BR M_STOPI (9).
.\"
.\"
.SH BUGS
.PP
.B pckt
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.B pckt
is compatible with
.IR "SVR 4.2" ,
.[
svr42
.]
and implementations based on
.IR "SVR 4.2" ,
.[
svr42
.]
such as
.IR Solaris \(rg,
.[
soldoc
.]
.IR OSF/1 \(rg,
.[
osfdoc
.]
and
.IR UnixWare \(rg,
.[
uw7doc
.]
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.IR Solaris \(rg
.[
soldoc
.]
and
.IR OSF/1 \(rg
.[
osfdoc
.]
document the reversal of the
.BR M_FLUSH (9)
flush bits.
.IR OSF/1 \(rg
.[
osfdoc
.]
has an error in its documentation with regard to the handling of the
.B FLUSHRW
bits for packetization.
.IP \(em
.IR UnixWare \(rg
.[
uw7doc
.]
documents that the original message type is contained in the first four
(4) bytes of the
.BR M_PROTO (9)
message block delivered to the Stream head in packet mode.  (This is
presumably to maintain structure alignment on the data part of the message if
read from the Stream using the control-data mode of
.BR read (2s).
.IR Solaris \(rg
.[
soldoc
.]
places the original message type in the first (and only) byte of the
.BR M_PROTO (9)
message block.
.IR OSF/1 \(rg
does not document the number of message bytes contained in the
.BR M_PROTO (9)
message block.
.IP ""
Portable programs will use
.BR getmsg (2)
or
.BR getpmsg (2)
to retrieve the messages and will examine the length of the control part of
the message before attempting to interpret the bytes within the control part
of the message.
.IP \(em
.IR UnixWare \(rg
does not include
.BR M_START (9)
is the list of processed messages in its documentation.
.[
uw7doc
.]
As
.BR M_START (9)
is a message commonly sent by
.BR ldterm (4)
to a terminal device,
.BR tty (4),
this is probably a documentation error.
.PP
See
.BR STREAMS (9)
for more compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2,
.[
svr42
.]
SVID,
.[
svid
.]
XID,
.[
xbd5
.]
SUSv2,
.[
susv2
.]
SUSv3.
.[
susv3
.]
.\"
.\"
.SH HISTORY
.PP
.B pckt
first appeared in SVR 3.
.[
svr3
.]
.\"
.\"
.[
$LIST$
.]
.TI
