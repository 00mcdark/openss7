#!/bin/bash

# This script reads from stdin and outputs any relevant information that need to
# be included in the package.

ulimit -c 0

# First, find out where we are so that we can include other scripts.

args=("$@")
script=$(basename $0)
where=`(cd $(dirname $0); pwd)`
vendor=`(rpm --showrc | grep ' _host_vendor' | awk '{print$3}') 2>/dev/null`

which_tool() {
    old_PATH="$PATH"
    PATH="$PATH:$where:$where/find-provides.d:/usr/lib/rpm/${vendor:-redhat}/find-provides.d:/usr/lib/rpm/${vendor:-redhat}:/usr/lib/rpm"
    which $1
    PATH="$old_PATH"
}

what_tool() {
    old_PATH="$PATH"
    PATH="$PATH:/usr/lib/rpm/${vendor:-redhat}/find-provides.d:/usr/lib/rpm/${vendor:-redhat}:/usr/lib/rpm:$where/find-provides.d:$where"
    which $1
    PATH="$old_PATH"
}

searchlist=($where /usr/lib/rpm /usr/lib/rpm/redhat)

exelist=()
scriptlist=()
solist=()
libtoolist=()
perllist=()
pythonlist=()
tcllist=()
kmodlist=()
jarlist=()
pkgconfiglist=()
executables=()
others=()

while read f ; do
    case "$f" in
	(*.la)
	    libtoollist=("${libtoollist[@]}" "$f")
	    continue
	    ;;
	(*.pm|*.pl|*.ph)
	    perllist=("${perllist[@]}" "$f")
	    continue
	    ;;
	(*.ko|*.ko.gz)
	    kmodlist=("${kmodlist[@]}" "$f")
	    continue
	    ;;
	(*.jar|*.zip|*.war)
	    jarlist=("${jarlist[@]}" "$f")
	    continue
	    ;;
	(*.pc)
	    pkgconfiglist=("${pkgconfiglist[@]}" "$f")
	    continue
	    ;;
	(*.py)
	    pythonlist=("${pythonlist[@]}" "$f")
	    continue
	    ;;
	(*.tcl)
	    tcllist=("${tcllist[@]}" "$f")
	    continue
	    ;;
	(*.so|*.so.*)
	    solist=("${solist[@]}" "$f")
	    continue
	    ;;
    esac
    if [ -x "$f" ] ; then
	executables=("${executables[@]}" "$f")
    fi
done

#classify executables
#echo "D: Building: exelist" >&2
#exelist=("${exelist[@]}" \
#	$(printf "%s\0" "${executables[@]}" | xargs -0 -r file | \
#	egrep -v ':.* (commands|script) ' | grep ':.*executable' | \
#	cut -d: -f1))

#echo "D: Building: scriptlist" >&2
#scriptlist=("${scriptlist[@]}" \
#	$(printf "%s\0" "${executables[@]}" | xargs -0 -r file | \
#	egrep ':.* (commands|script) ' | \
#	cut -d: -f1))

echo "D: Building: solist" >&2
solist=("${solist[@]}" \
	$(printf "%s\0" "${executables[@]}" | xargs -0 -r file | \
	grep ':.*shared object' | \
	cut -d: -f1))

# --- Shared objects.
if [ -n "$solist" ] ; then
    tool=$(which_tool "find-provides.so")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${solist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# --- libtool
if [ -n "$libtoollist" ] ; then
    tool=$(which_tool "find-provides.libtool")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${libtoollist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# --- Perl modules.
if [ -n "$perllist" ] ; then
    tool=$(which_tool "perl.prov")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${perllist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# --- Python modules.
if [ -n "$pythonlist" ] ; then
    tool=$(which_tool "python.prov")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${pythonlist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# --- Tcl modules.
if [ -n "$tcllist" ] ; then
    tool=$(which_tool "tcl.prov")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${tcllist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# # --- extra scripts
# for dir in "${searchlist[@]}" ; do
#     if [ -d $dir/find-provides.d ] ; then
# 	for s in $dir/find-provides.d/*.prov ; do
# 	    if [ -x "$s" ] ; then
# 		var=$(echo "$s" | awk '{ gsub("[^a-zA-Z0-9]", "_"); print "extra_" $0; }')
# 		eval "tmp=\$$var"
# 		if [ :$tmp != :done ] ; then
# 		    printf "%s\n" "${filelist[@]}" | \
# 		    $s "${args[@]}" | sort -u
# 		    eval "$var=done"
# 		fi
# 	    fi
# 	done
#     fi
# done

# --- pkgconfig
if [ -n "$pkgconfiglist" ] ; then
    tool=$(which_tool "find-provides.pkgconfig")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${pkgconfiglist[@]}" | \
	$tool "${args[@]}" | sort -u
    fi
fi

# -- kernel module exported symbols
if [ -n "$kmodlist" ] ; then
    tool=$(which_tool "find-provides.kmod")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${kmodlist[@]}" | \
	$tool "${args[@]}"
    else
	tool=$(which_tool "kmod.prov")
	if [ -n "$tool" -a -x "$tool" ] ; then
	    echo "D: Executing: $tool" >&2
	    printf "%s\n" "${kmodlist[@]}" | \
	    $tool "${args[@]}"
	fi
	tool=$(which_tool "find-provides.ksyms")
	if [ -n "$tool" -a -x "$tool" ] ; then
	    echo "D: Executing: $tool" >&2
	    printf "%s\n" "${kmodlist[@]}" | \
	    $tool "${args[@]}" | sort -bu
	fi
	tool=$(which_tool "modalias.prov")
	if [ -n "$tool" -a -x "$tool" ] ; then
	    echo "D: Executing: $tool" >&2
	    printf "%s\n" "${kmodlist[@]}" | \
	    $tool "${args[@]}" | sort -bu
	fi
	tool=$(which_tool "firmware.prov")
	if [ -n "$tool" -a -x "$tool" ] ; then
	    echo "D: Executing: $tool" >&2
	    printf "%s\n" "${kmodlist[@]}" | \
	    $tool "${args[@]}" | sort -bu
	fi
    fi
fi

# -- Java jar files
if [ -n "$jarlist" ] ; then
    tool=$(which_tool "find-provides.java")
    if [ -n "$tool" -a -x "$tool" ] ; then
	echo "D: Executing: $tool" >&2
	printf "%s\n" "${jarlist[@]}" | \
	$tool "${args[@]}" | sort -bu
    fi
fi

exit 0

# =============================================================================
#
# @(#) scripts/find-provides
#
# -----------------------------------------------------------------------------
#
# Copyright (c) 2008-2015  Monavacon Limited <http://www.monavacon.com/>
# Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
# Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>
#
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>, or write to
# the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
# -----------------------------------------------------------------------------
#
# U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
# behalf of the U.S. Government ("Government"), the following provisions apply
# to you.  If the Software is supplied by the Department of Defense ("DoD"), it
# is classified as "Commercial Computer Software" under paragraph 252.227-7014
# of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
# successor regulations) and the Government is acquiring only the license rights
# granted herein (the license rights customarily provided to non-Government
# users).  If the Software is supplied to any unit or agency of the Government
# other than DoD, it is classified as "Restricted Computer Software" and the
# Government's rights in the Software are defined in paragraph 52.227-19 of the
# Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
# the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
# (or any successor regulations).
#
# -----------------------------------------------------------------------------
#
# Commercial licensing and support of this software is available from OpenSS7
# Corporation at a fee.  See http://www.openss7.com/
#
# =============================================================================
# vim: tw=80 sw=4 nocin nosi
