
TrafficMode ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is a textual convention that provides a traffic mode for a SIGTRAN user
		 adaptation layer.  It can take on values of activeStandby, loadShare or broadCast,
		 or an implementation defined type."
	SYNTAX		AutonomousType
	::= { sigtranTC 1 }

activeStandby OBJECT-IDENTITY
	STATUS		current
	DESCRIPTION
		"This is the SIGTRAN UA defined active-standby traffic mode type."
	::= { sigtranTrafficMode 1 }

loadShare OBJECT-IDENTITY
	STATUS		current
	DESCRIPTION
		"This is the SIGTRAN UA defined load-share traffic mode type."
	::= { sigtranTrafficMode 2 }

broadCast OBJECT-IDENTITY
	STATUS		current
	DESCRIPTION
		"This is the SIGTRAN UA defined broadcast traffic mode type."
	::= { sigtranTrafficMode 3 }

RegistrationPolicy TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is a  textual convention that provides a registration policy for SIGTRAN user
		 adaptation layers.  It can take on values of forbidden, permitted or required.
		
		 When forbidden, at an SG, the SG will not permit an ASP to dynamically register a
		 link or routing key associated with an AS; at an ASP, the ASP will not attempt to
		 dynamically register a link or routing key associated with an AS.
		
		 When permitted, at an SG, the SG will permit, but not require, an ASP to register a
		 link or routing key before activating the associated AS using its IID or RC; at an
		 ASP, the ASP will only attempt to dynamically register a link or routing key when
		 it has not been provisioned with an IID or RC value for the AS.
		
		 When required, at an SG, the SG will require an ASP to register a link or routing
		 key before activating the asscoiated AS using its IID or RC; at an ASP, the ASP
		 will dynamically register a link or routing key even when it knows the IID or RC
		 value from configuration data."
	SYNTAX		INTEGER {
				unknown(0),
				forbidden(1),
				permitted(2),
				required(3)
			}
	::= { sigtranTC 2 }

AspState ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is a textual convention that provides ASP state at an SG or ASP.  When down,
		 the ASP has not initiated an ASP Up procedure or has completed an ASP Down
		 procedure; when initializing, the ASP is executing the ASP Up procedure; when
		 terminating, the ASP is executing the ASP Down procedure, and when up, the ASP has
		 completed the ASP Up procedure."
	SYNTAX		INTEGER {
				down(0),
				initializing(1),
				terminating(2),
				up(3)
			}
	::= { sigtranTC 2 }

AsState ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is a textual convention that provides AS state at an SG or ASP.  When down,
		 the ASP has not completed an ASP Up procedure or has completed an ASP Down
		 procedure.  When inactive an ASP has completed an ASP Up procedure or has completed
		 an ASP Inactive procedure.  When activating, an ASP is performing an ASP Active
		 procedure.  When deactivating, and ASP is performing an ASP Inactive procedure.
		 When active and ASP has completed an ASP Active procedure."
	SYNTAX		INTEGER {
				down(0),
				initializing(1),
				terminating(2),
				inactive(3),
				activating(4),
				deactivating(5),
				active(6)
			}
	::= { sigtranTC 3 }

InterfaceIdentifier ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is the integer interface identifier (IID) used by
		 IUA, V5UA and M2UA.  This identifier uniquely
		 identifies an interface (D-channel, V5.2 control
		 channel, signalling link) at an SG.  This value should
		 never be zero for practical reasons."
	SYNTAX		INTEGER (1..4294967295)
	::= { sigtranTC 4 }

InterfaceIdentifierText ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This is the text-based interface identifier (Text-IID)
		 use IUA, V5UA and M2UA.  This identifier uniquely
		 identifies an interface (D-channel, V5.2 control
		 channel, signalling link) at an SG.  This value must
		 not be a NULL string, for practical reasons.  The
		 alphabet is ANSI X3.4-1986 (ASCII).  For practical
		 reasons, the string should not contain control
		 characters, nor leading not trailing whitespace."
	SYNTAX		OCTET STRING (1..255)
	::= { sigtranTC 5 }

SigtranOptions ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This text convention provides options associated with 
		 Application Server Processes or Signalling Gateways.  

		 When the aspext(0) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-aspext.

		 When sginfo(1) is set, the ASP/SG supports 
		 draft-bidulock-sigtran-sginfo.  

		 When the loadgrp(3) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-loadgrp.

		 When the corid(4) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-corid.
		 
		 When the regext(5) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-regext.
		 
		 When the sessid(6) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-sessid.
		 
		 When the dynamic(7) bit is set, the ASP/SG supports 
		 dynamic registration.
		 
		 When the aspcong(8) bit is set, the ASP/SG supports 
		 draft-bidulock-sigtran-aspcong.
		 
		 When the textiid(9) bit is set, the ASP/SG supports 
		 text based interface identifiers."
	SYNTAX		BITS {
				aspext(0),
				sginfo(1),
				loadsel(2),
				loadgrp(3),
				corid(4),
				regext(5),
				sessid(6),
				dynamic(7),
				aspcong(8),
				textiid(9)
			}
	::= { sigtranTC 6 }

AspIdPolicy ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This textual convention provides a policy for the ASP 
		 Identifier option for SIGTRAN UAs.
		 
		 When permitted(0), the ASP will provide an ASP 
		 identifier when the SGP indicates that one is required 
		 but will first attempt ASP Up procedures without one.  
		 The SGP will accept an ASP Identifier but will not 
		 require one.

		 When required(1), the ASP will always provide an ASP 
		 Identifier and the SGP will always require one.
		 
		 When forbidden(2), the ASP will not provide an ASP 
		 Identifier and the SGP will ignore any provided ASP 
		 Identifier."
	SYNTAX		INTEGER {
				unknown(0),
				permitted(1),
				required(2),
				forbidden(3),
			}
	::= { sigtranTC 7 }

AssociationPolicy ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"This textual convention determines the policy with 
		 regard to forming and dropping SCTP associations.  
		 There are three policies described here:

		 unknown(0) means that the decision as to when to form 
		 and relase SCTP assocations is left to the 
		 implemenation.

		 always(1) means that SCTP associations are formed 
		 whenever they are able to be formed.  SCTP association 
		 stay connected until they are explicitly disabled.

		 ondemand(2) means that SCTP associations are formed 
		 only when they are needed, that is, whenever there is a 
		 local AS that attempts to activate and is served by an 
		 SG.  When there is no longer any local AS for the 
		 association, the SCTP asslocation is shut down.

		 other(3) is intended to handle some other 
		 implementation specific method."
	SYNTAX		INTEGER {
				unknown(0),
				always(1),
				ondemand(2),
				other(3)
			}

RestorationPolicy ::= TEXTUAL-CONVENTION
	STATUS		current
	DESCRIPTION
		"Restoration of SCTP associations and execution of the ASP Up procedures can be 
		 peformed manually (via a management station), or automatically (by the XUA 
		 implementation).  To prevent associations and the ASP Up procedure from 
		 oscillating rapidly between the ESTABLISHED or ASP Up and ASP Down or CLOSED 
		 states, an SCTP association oscillation filtering procedure shall be provided.  
		 The procedure is applicable in all cases where automatic restoration and 
		 removal of SCTP associations to and from service is used.  The procedure is not 
		 invoked if restoration to or remove from service is intiated manually.  
		 Association osciallation filtering is a local procedure.  Five procedures are 
		 optionally provided:

		 manual(0), provides manual association restoration to and removal from service 
		 only (management action is required and no automatic restoration is attempted);

		 simple(1), provides association oscillation filtering based on ITU-T Q.704 link 
		 oscillation filtering procedures and uses two timers, T17;

		 procedureA(2), provides association oscillation filtering based on ANSI 
		 T1.111.4 link osciallation procedure A and uses one timer, T32A;

		 procedureB(3), provides association oscillation filtering based on ANSI 
		 T1.111.4 link oscilation procedure B and uses two timers, T33A and T34A; and,

		 other(4), provides an implementation dependent link oscillation procedure based 
		 on implementation defined parameters.

		 Note that one timer, T19A, is applicable to all automatic restoration 
		 procedures, simple(1), procedureA(2), procedureB(3) and other(4)."
	REFERENCE
		"ITU-T Rec. Q.704 (1996), ANSI T1.111.4/2000"
	SYNTAX	INTEGER {
			manual(0),
			simple(1),
			procedureA(2),
			procedureB(3),
			other(4)
		}
		

-- vim: comments=\b\:\-\-,\:\-\-,\f\b\:- fo+=tcqlornw tw=96 nocin nosi
