/*****************************************************************************

 @(#) $Id: m2uaMIB.h,v 0.9.2.8 2009-02-18 20:18:43 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacon Limited <http://www.monavacon.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-02-18 20:18:43 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: m2uaMIB.h,v $
 Revision 0.9.2.8  2009-02-18 20:18:43  brian
 - updated agents

 Revision 0.9.2.7  2009-01-19 13:31:37  brian
 - updating standalone agents

 Revision 0.9.2.6  2009-01-10 17:31:00  brian
 - agent updates

 Revision 0.9.2.5  2009-01-04 13:16:09  brian
 - updated agents

 Revision 0.9.2.4  2009-01-03 10:50:59  brian
 - updated agent

 Revision 0.9.2.3  2009-01-02 15:04:09  brian
 - updated agents

 Revision 0.9.2.2  2008-12-31 16:04:41  brian
 - updated mibs

 Revision 0.9.2.1  2008-12-27 10:01:52  brian
 - updated mibs and stubs

 *****************************************************************************/

#ifndef __LOCAL_M2UAMIB_H__
#define __LOCAL_M2UAMIB_H__

#ident "@(#) $RCSfile: m2uaMIB.h,v $ $Name:  $($Revision: 0.9.2.8 $) Copyright (c) 2008-2009 Monavacon Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */

extern const char sa_program[];
extern int sa_fclose;			/* default close files between requests */
extern int sa_changed;			/* indication to reread MIB configuration */
extern int sa_stats_refresh;		/* indications that statistics, the mib or its tables need to be refreshed */
extern int sa_request;			/* request number for per-request actions */

/* our storage structure(s) */
struct m2uaMIB_data {
	uint m2uaMIB_request;
	ulong m2uaAsNextIndex;		/* ReadOnly */
	ulong m2uaIfNextIndex;		/* ReadOnly */
	ulong m2uaAspNextIndex;		/* ReadOnly */
	ulong m2uaSgNextIndex;		/* ReadOnly */
};
struct m2uaAsTable_data {
	uint m2uaAsTable_request;
	uint m2uaAsTable_refs;
	ulong m2uaAsIndex;		/* NoAccess */
	uint8_t *m2uaAsName;		/* Create */
	size_t m2uaAsNameLen;
	long m2uaAsAdministrativeState;	/* Create */
	long m2uaAsOperationalState;	/* ReadOnly */
	uint8_t *m2uaAsProceduralStatus;	/* ReadOnly */
	size_t m2uaAsProceduralStatusLen;
	long m2uaASUsageState;		/* ReadOnly */
	long m2uaAsStatus;		/* Create */
};
struct m2uaIfTable_data {
	uint m2uaIfTable_request;
	uint m2uaIfTable_refs;
	ulong m2uaIfIndex;		/* NoAccess */
	uint8_t *m2uaIfName;		/* Create */
	size_t m2uaIfNameLen;
	ulong m2uaIfAsIndex;		/* Create */
	long m2uaIfIdNum;		/* Create */
	uint8_t *m2uaIfIdName;		/* Create */
	size_t m2uaIfIdNameLen;
	long m2uaIfAdministrativeState;	/* Create */
	long m2uaIfOperationalState;	/* ReadOnly */
	uint8_t *m2uaIfProceduralStatus;	/* ReadOnly */
	size_t m2uaIfProceduralStatusLen;
	long m2uaIfUsageState;		/* ReadOnly */
	oid *m2uaIfEquipment;		/* Create */
	size_t m2uaIfEquipmentLen;
	long m2uaIfMaxSifSize;		/* Create */
	long m2uaIfTransmissionRate;	/* Create */
	long m2uaIfCic;			/* Create */
	long m2uaIfRowStatus;		/* Create */
};
struct m2uaAsIfTable_data {
	uint m2uaAsIfTable_request;
	uint m2uaAsIfTable_refs;
	ulong m2uaIfIndex;		/* NoAccess */
};
struct m2uaAspTable_data {
	uint m2uaAspTable_request;
	uint m2uaAspTable_refs;
	ulong m2uaAspIndex;		/* ReadOnly */
	uint8_t *m2uaAspName;		/* ReadOnly */
	size_t m2uaAspNameLen;
	ulong m2uaSgIndex;		/* Create */
	long m2uaAspAdministrativeState;	/* ReadWrite */
	long m2uaAspOperationalState;	/* ReadWrite */
	long m2uaAspUsageState;		/* ReadOnly */
	uint8_t *m2uaAspProceduralStatus;	/* ReadOnly */
	size_t m2uaAspProceduralStatusLen;
	long m2uaAspState;		/* ReadOnly */
	long m2uaAspRowStatus;		/* Create */
};
struct m2uaAspSgTable_data {
	uint m2uaAspSgTable_request;
	uint m2uaAspSgTable_refs;
	ulong m2uaAspIndex;		/* ReadOnly */
	ulong m2uaSgIndex;		/* Create */
	ulong m2uaAspSgAspId;		/* ReadWrite */
	long m2uaAspSgAspPort;		/* ReadWrite */
	long m2uaAspSgAspState;		/* ReadOnly */
	long m2uaAspSgAdministrativeState;	/* ReadWrite */
};
struct m2uaSgTable_data {
	uint m2uaSgTable_request;
	uint m2uaSgTable_refs;
	ulong m2uaSgIndex;		/* ReadOnly */
	uint8_t *m2uaSgName;		/* Create */
	size_t m2uaSgNameLen;
	long m2uaSgRowStatus;		/* Create */
};
struct m2uaSgAspTable_data {
	uint m2uaSgAspTable_request;
	uint m2uaSgAspTable_refs;
	ulong m2uaSgIndex;		/* Create */
	ulong m2uaAspIndex;		/* ReadOnly */
	ulong m2uaSgAspId;		/* ReadWrite */
	long m2uaSgAspPort;		/* ReadWrite */
	long m2uaSgAspState;		/* ReadOnly */
	long m2uaSgAspAdministrativeState;	/* ReadWrite */
	long m2uaSgAspOperationalState;	/* ReadOnly */
};
struct m2uaSgAspAsTable_data {
	uint m2uaSgAspAsTable_request;
	uint m2uaSgAspAsTable_refs;
	ulong m2uaSgIndex;		/* Create */
	ulong m2uaAspIndex;		/* ReadOnly */
	ulong m2uaAsIndex;		/* NoAccess */
	long m2uaSgAspAsRegistrationRequired;	/* ReadWrite */
	long m2uaSgAspAsState;		/* ReadOnly */
	long m2uaSgAspAsAdministrativeState;	/* ReadWrite */
	long m2uaSgAspAsOperationalState;	/* ReadOnly */
};
struct m2uaSgAsTable_data {
	uint m2uaSgAsTable_request;
	uint m2uaSgAsTable_refs;
	ulong m2uaSgIndex;		/* Create */
	ulong m2uaAsIndex;		/* NoAccess */
	oid *m2uaSgAsTrafficMode;	/* Create */
	size_t m2uaSgAsTrafficModeLen;
	long m2uaSgAsState;		/* ReadWrite */
	long m2uaSgAsAdministrativeState;	/* ReadWrite */
	long m2uaSgAsOperationalState;	/* ReadOnly */
	long m2uaSgAsRowStatus;		/* Create */
};

/* storage declarations */
extern struct m2uaMIB_data *m2uaMIBStorage;
extern struct header_complex_index *m2uaAsTableStorage;
extern struct header_complex_index *m2uaIfTableStorage;
extern struct header_complex_index *m2uaAsIfTableStorage;
extern struct header_complex_index *m2uaAspTableStorage;
extern struct header_complex_index *m2uaAspSgTableStorage;
extern struct header_complex_index *m2uaSgTableStorage;
extern struct header_complex_index *m2uaSgAspTableStorage;
extern struct header_complex_index *m2uaSgAspAsTableStorage;
extern struct header_complex_index *m2uaSgAsTableStorage;

/* enum definitions from the covered mib sections */

#define M2UAASADMINISTRATIVESTATE_LOCKED         0
#define M2UAASADMINISTRATIVESTATE_UNLOCKED       1
#define M2UAASADMINISTRATIVESTATE_SHUTTINGDOWN   2

#define M2UAASOPERATIONALSTATE_DISABLED          0
#define M2UAASOPERATIONALSTATE_ENABLED           1

#define M2UAASPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPROCEDURALSTATUS_NOTINITIALIZED    1
#define M2UAASPROCEDURALSTATUS_INITIALIZING      2
#define M2UAASPROCEDURALSTATUS_REPORTING         3
#define M2UAASPROCEDURALSTATUS_TERMINATING       4

#define M2UAASUSAGESTATE_IDLE                    0
#define M2UAASUSAGESTATE_ACTIVE                  1
#define M2UAASUSAGESTATE_BUSY                    2

#define M2UAIFADMINISTRATIVESTATE_LOCKED         0
#define M2UAIFADMINISTRATIVESTATE_UNLOCKED       1
#define M2UAIFADMINISTRATIVESTATE_SHUTTINGDOWN   2

#define M2UAIFOPERATIONALSTATE_DISABLED          0
#define M2UAIFOPERATIONALSTATE_ENABLED           1

#define M2UAIFPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAIFPROCEDURALSTATUS_NOTINITIALIZED    1
#define M2UAIFPROCEDURALSTATUS_INITIALIZING      2
#define M2UAIFPROCEDURALSTATUS_REPORTING         3
#define M2UAIFPROCEDURALSTATUS_TERMINATING       4

#define M2UAIFUSAGESTATE_IDLE                    0
#define M2UAIFUSAGESTATE_ACTIVE                  1
#define M2UAIFUSAGESTATE_BUSY                    2

#define M2UAIFMAXSIFSIZE_LSL                     0
#define M2UAIFMAXSIFSIZE_HSL                     1
#define M2UAIFMAXSIFSIZE_ATM                     2

#define M2UAIFTRANSMISSIONRATE_UNKNOWN           0
#define M2UAIFTRANSMISSIONRATE_MODEM             1
#define M2UAIFTRANSMISSIONRATE_DS0A              2
#define M2UAIFTRANSMISSIONRATE_DS0               3
#define M2UAIFTRANSMISSIONRATE_T1J1              4
#define M2UAIFTRANSMISSIONRATE_E1                5
#define M2UAIFTRANSMISSIONRATE_ATM               6

#define M2UAASPADMINISTRATIVESTATE_LOCKED        0
#define M2UAASPADMINISTRATIVESTATE_UNLOCKED      1
#define M2UAASPADMINISTRATIVESTATE_SHUTTINGDOWN  2

#define M2UAASPOPERATIONALSTATE_DISABLED         0
#define M2UAASPOPERATIONALSTATE_ENABLED          1

#define M2UAASPUSAGESTATE_IDLE                   0
#define M2UAASPUSAGESTATE_ACTIVE                 1
#define M2UAASPUSAGESTATE_BUSY                   2

#define M2UAASPPROCEDURALSTATUS_INITIALIZATIONREQUIRED 0
#define M2UAASPPROCEDURALSTATUS_NOTINITIALIZED   1
#define M2UAASPPROCEDURALSTATUS_INITIALIZING     2
#define M2UAASPPROCEDURALSTATUS_REPORTING        3
#define M2UAASPPROCEDURALSTATUS_TERMINATING      4

#define M2UAASPSTATE_ASPDOWN                     0
#define M2UAASPSTATE_ASPUP                       1

#define M2UAASPSGASPSTATE_DOWN                   1
#define M2UAASPSGASPSTATE_INITIALIZING           2
#define M2UAASPSGASPSTATE_TERMINATING            3
#define M2UAASPSGASPSTATE_UP                     4

#define M2UAASPSGADMINISTRATIVESTATE_LOCKED      0
#define M2UAASPSGADMINISTRATIVESTATE_UNLOCKED    1
#define M2UAASPSGADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UASGASPSTATE_DOWN                      1
#define M2UASGASPSTATE_INITIALIZING              2
#define M2UASGASPSTATE_TERMINATING               3
#define M2UASGASPSTATE_UP                        4

#define M2UASGASPADMINISTRATIVESTATE_LOCKED      0
#define M2UASGASPADMINISTRATIVESTATE_UNLOCKED    1
#define M2UASGASPADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UASGASPOPERATIONALSTATE_DISABLED       0
#define M2UASGASPOPERATIONALSTATE_ENABLED        1

#define M2UASGASPASREGISTRATIONREQUIRED_UNKNOWN  1
#define M2UASGASPASREGISTRATIONREQUIRED_FORBIDDEN 2
#define M2UASGASPASREGISTRATIONREQUIRED_PERMITTED 3
#define M2UASGASPASREGISTRATIONREQUIRED_REQUIRED 4

#define M2UASGASPASSTATE_DOWN                    1
#define M2UASGASPASSTATE_INITIALIZING            2
#define M2UASGASPASSTATE_TERMINATING             3
#define M2UASGASPASSTATE_INACTIVE                4
#define M2UASGASPASSTATE_ACTIVATING              5
#define M2UASGASPASSTATE_DEACTIVATING            6
#define M2UASGASPASSTATE_ACTIVE                  7

#define M2UASGASPASADMINISTRATIVESTATE_LOCKED    0
#define M2UASGASPASADMINISTRATIVESTATE_UNLOCKED  1
#define M2UASGASPASADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UASGASPASOPERATIONALSTATE_DISABLED     0
#define M2UASGASPASOPERATIONALSTATE_ENABLED      1

#define M2UASGASSTATE_DOWN                       1
#define M2UASGASSTATE_INITIALIZING               2
#define M2UASGASSTATE_TERMINATING                3
#define M2UASGASSTATE_INACTIVE                   4
#define M2UASGASSTATE_ACTIVATING                 5
#define M2UASGASSTATE_DEACTIVATING               6
#define M2UASGASSTATE_ACTIVE                     7

#define M2UASGASADMINISTRATIVESTATE_LOCKED       0
#define M2UASGASADMINISTRATIVESTATE_UNLOCKED     1
#define M2UASGASADMINISTRATIVESTATE_SHUTTINGDOWN 2

#define M2UASGASOPERATIONALSTATE_DISABLED        0
#define M2UASGASOPERATIONALSTATE_ENABLED         1

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */

/* function prototypes */
/* trap function prototypes */

/* variable function prototypes */
void init_m2uaMIB(void);
void deinit_m2uaMIB(void);
int term_m2uaMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_m2uaMIB;
void parse_m2uaMIB(const char *, char *);
SNMPCallback store_m2uaMIB;
void refresh_m2uaMIB(int);
FindVarMethod var_m2uaAsTable;
struct m2uaAsTable_data *m2uaAsTable_create(void);
struct m2uaAsTable_data *m2uaAsTable_duplicate(struct m2uaAsTable_data *);
int m2uaAsTable_destroy(struct m2uaAsTable_data **);
int m2uaAsTable_add(struct m2uaAsTable_data *);
int m2uaAsTable_del(struct m2uaAsTable_data *);
void parse_m2uaAsTable(const char *, char *);
SNMPCallback store_m2uaAsTable;
void refresh_m2uaAsTable(int);
FindVarMethod var_m2uaIfTable;
struct m2uaIfTable_data *m2uaIfTable_create(void);
struct m2uaIfTable_data *m2uaIfTable_duplicate(struct m2uaIfTable_data *);
int m2uaIfTable_destroy(struct m2uaIfTable_data **);
int m2uaIfTable_add(struct m2uaIfTable_data *);
int m2uaIfTable_del(struct m2uaIfTable_data *);
void parse_m2uaIfTable(const char *, char *);
SNMPCallback store_m2uaIfTable;
void refresh_m2uaIfTable(int);
FindVarMethod var_m2uaAsIfTable;
struct m2uaAsIfTable_data *m2uaAsIfTable_create(void);
struct m2uaAsIfTable_data *m2uaAsIfTable_duplicate(struct m2uaAsIfTable_data *);
int m2uaAsIfTable_destroy(struct m2uaAsIfTable_data **);
int m2uaAsIfTable_add(struct m2uaAsIfTable_data *);
int m2uaAsIfTable_del(struct m2uaAsIfTable_data *);
void parse_m2uaAsIfTable(const char *, char *);
SNMPCallback store_m2uaAsIfTable;
void refresh_m2uaAsIfTable(int);
FindVarMethod var_m2uaAspTable;
struct m2uaAspTable_data *m2uaAspTable_create(void);
struct m2uaAspTable_data *m2uaAspTable_duplicate(struct m2uaAspTable_data *);
int m2uaAspTable_destroy(struct m2uaAspTable_data **);
int m2uaAspTable_add(struct m2uaAspTable_data *);
int m2uaAspTable_del(struct m2uaAspTable_data *);
void parse_m2uaAspTable(const char *, char *);
SNMPCallback store_m2uaAspTable;
void refresh_m2uaAspTable(int);
FindVarMethod var_m2uaAspSgTable;
struct m2uaAspSgTable_data *m2uaAspSgTable_create(void);
struct m2uaAspSgTable_data *m2uaAspSgTable_duplicate(struct m2uaAspSgTable_data *);
int m2uaAspSgTable_destroy(struct m2uaAspSgTable_data **);
int m2uaAspSgTable_add(struct m2uaAspSgTable_data *);
int m2uaAspSgTable_del(struct m2uaAspSgTable_data *);
void parse_m2uaAspSgTable(const char *, char *);
SNMPCallback store_m2uaAspSgTable;
void refresh_m2uaAspSgTable(int);
FindVarMethod var_m2uaSgTable;
struct m2uaSgTable_data *m2uaSgTable_create(void);
struct m2uaSgTable_data *m2uaSgTable_duplicate(struct m2uaSgTable_data *);
int m2uaSgTable_destroy(struct m2uaSgTable_data **);
int m2uaSgTable_add(struct m2uaSgTable_data *);
int m2uaSgTable_del(struct m2uaSgTable_data *);
void parse_m2uaSgTable(const char *, char *);
SNMPCallback store_m2uaSgTable;
void refresh_m2uaSgTable(int);
FindVarMethod var_m2uaSgAspTable;
struct m2uaSgAspTable_data *m2uaSgAspTable_create(void);
struct m2uaSgAspTable_data *m2uaSgAspTable_duplicate(struct m2uaSgAspTable_data *);
int m2uaSgAspTable_destroy(struct m2uaSgAspTable_data **);
int m2uaSgAspTable_add(struct m2uaSgAspTable_data *);
int m2uaSgAspTable_del(struct m2uaSgAspTable_data *);
void parse_m2uaSgAspTable(const char *, char *);
SNMPCallback store_m2uaSgAspTable;
void refresh_m2uaSgAspTable(int);
FindVarMethod var_m2uaSgAspAsTable;
struct m2uaSgAspAsTable_data *m2uaSgAspAsTable_create(void);
struct m2uaSgAspAsTable_data *m2uaSgAspAsTable_duplicate(struct m2uaSgAspAsTable_data *);
int m2uaSgAspAsTable_destroy(struct m2uaSgAspAsTable_data **);
int m2uaSgAspAsTable_add(struct m2uaSgAspAsTable_data *);
int m2uaSgAspAsTable_del(struct m2uaSgAspAsTable_data *);
void parse_m2uaSgAspAsTable(const char *, char *);
SNMPCallback store_m2uaSgAspAsTable;
void refresh_m2uaSgAspAsTable(int);
FindVarMethod var_m2uaSgAsTable;
struct m2uaSgAsTable_data *m2uaSgAsTable_create(void);
struct m2uaSgAsTable_data *m2uaSgAsTable_duplicate(struct m2uaSgAsTable_data *);
int m2uaSgAsTable_destroy(struct m2uaSgAsTable_data **);
int m2uaSgAsTable_add(struct m2uaSgAsTable_data *);
int m2uaSgAsTable_del(struct m2uaSgAsTable_data *);
void parse_m2uaSgAsTable(const char *, char *);
SNMPCallback store_m2uaSgAsTable;
void refresh_m2uaSgAsTable(int);

WriteMethod write_m2uaAsName;
WriteMethod write_m2uaAsAdministrativeState;
WriteMethod write_m2uaAsStatus;
WriteMethod write_m2uaIfName;
WriteMethod write_m2uaIfAsIndex;
WriteMethod write_m2uaIfIdNum;
WriteMethod write_m2uaIfIdName;
WriteMethod write_m2uaIfAdministrativeState;
WriteMethod write_m2uaIfEquipment;
WriteMethod write_m2uaIfMaxSifSize;
WriteMethod write_m2uaIfTransmissionRate;
WriteMethod write_m2uaIfCic;
WriteMethod write_m2uaIfRowStatus;
WriteMethod write_m2uaSgIndex;
WriteMethod write_m2uaAspAdministrativeState;
WriteMethod write_m2uaAspOperationalState;
WriteMethod write_m2uaAspRowStatus;
WriteMethod write_m2uaSgIndex;
WriteMethod write_m2uaAspSgAspId;
WriteMethod write_m2uaAspSgAspPort;
WriteMethod write_m2uaAspSgAdministrativeState;
WriteMethod write_m2uaSgName;
WriteMethod write_m2uaSgRowStatus;
WriteMethod write_m2uaSgIndex;
WriteMethod write_m2uaSgAspId;
WriteMethod write_m2uaSgAspPort;
WriteMethod write_m2uaSgAspAdministrativeState;
WriteMethod write_m2uaSgIndex;
WriteMethod write_m2uaSgAspAsRegistrationRequired;
WriteMethod write_m2uaSgAspAsAdministrativeState;
WriteMethod write_m2uaSgIndex;
WriteMethod write_m2uaSgAsTrafficMode;
WriteMethod write_m2uaSgAsState;
WriteMethod write_m2uaSgAsAdministrativeState;
WriteMethod write_m2uaSgAsRowStatus;
#endif				/* __LOCAL_M2UAMIB_H__ */
