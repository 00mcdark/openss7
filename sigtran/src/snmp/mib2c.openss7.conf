# mib2c.storage.conf:
#
#  This is a special mib2c.conf file that assumes that you want to do
#  all storage of information locally rather than pulling the
#  information from another source outside the agent (EG, the
#  kernel).  To accomplish this, it defines a structure for the
#  storage of tables and assumes you want to use the header_complex
#  functions for retrieving and storing that data in a local data
#  store.  It even writes a .conf file parser for you and sets you up
#  for being able to do persistant storage fairly simply.
#
#  In short:  it trys to do almost all of the work for you...  Almost...

# 
# Define types of data by mib type, and translate into needed C code.
#

# We need to get some extra stuff into the variable declarations
# before sourcing the main mib2c.vartypes.conf file below.
type:		OCTETSTR
storage:	    char   *${name};
storage:	    size_t  ${name}Len;
varlenname:	StorageTmp->${name}Len
vartest:	  if (StorageTmp->${name} == NULL) {
vartest:	    config_perror(\"invalid specification for ${name}\");
vartest:	    return;
vartest:	  }
vartest:
action:	             tmpvar = StorageTmp->$name;
action:	             tmplen = StorageTmp->${name}Len;
action:	             memdup((void *) &StorageTmp->$name, var_val, var_val_len);
action:	             StorageTmp->${name}Len = var_val_len;
undo:	             SNMP_FREE(StorageTmp->${name});
undo:	             StorageTmp->${name} = tmpvar;
undo:	             StorageTmp->${name}Len = tmplen;
commit:		     SNMP_FREE(tmpvar);
sizeofstart:	
sizeofend:	Len
tmpvar:		char *
casttmp:	strdup((char *) tmpvar);
action2:	     memdup((void *) &StorageNew->$name, vp->val.string, vp->val_len);
action2:	     StorageNew->${name}Len = vp->val_len;
action3:	     StorageNew->${name} = strdup(\"$mib->{defaultValue}\");
action3:	     StorageNew->${name}Len = strlen(\"$mib->{defaultValue}\");
#
type:		INTEGER
storage:	    long    $name;
storageret:	&
varlenname:	tmpint
sizeofstart:	sizeof(
sizeofend:	)
tmpvar:		long
action:	             tmpvar = StorageTmp->$name;
action:	             StorageTmp->${name} = *((long *) var_val);
undo:	             StorageTmp->${name} = tmpvar;
casttmp:	tmpvar;
action2:	     StorageNew->$name = *vp->val.integer;
action3:	     StorageNew->${name} = $mib->{defaultValue};
#
type:		UNSIGNED32
storage:	    u_long    $name;
storageret:	&
varlenname:	tmpint
sizeofstart:	sizeof(
sizeofend:	)
tmpvar:		u_long
action:	             tmpvar = StorageTmp->$name;
action:	             StorageTmp->${name} = *((u_long *) var_val);
undo:	             StorageTmp->${name} = tmpvar;
casttmp:	tmpvar;
action2:	     StorageNew->$name = *vp->val.integer;
action3:	     StorageNew->${name} = $mib->{defaultValue};
#
type:		OBJECTID
storage:	    oid     *$name;
storage:	    size_t   ${name}Len;
varlenname:	StorageTmp->${name}Len
vartest:	  if (StorageTmp->${name} == NULL) {
vartest:	    config_perror(\"invalid specification for ${name}\");
vartest:	    return;
vartest:	  }
vartest:
action:	             tmpvar = StorageTmp->$name;
action:	             tmplen = StorageTmp->${name}Len;
action:	             memdup((void *) &StorageTmp->$name, var_val, var_val_len);
action:	             StorageTmp->${name}Len = var_val_len/sizeof(oid);
undo:	             SNMP_FREE(StorageTmp->${name});
undo:	             StorageTmp->${name} = tmpvar;
undo:	             StorageTmp->${name}Len = tmplen;
commit:		     SNMP_FREE(tmpvar);
sizeofstart:	
sizeofend:	Len
tmpvar:		oid *
casttmp:	(oid *) tmpvar;
freetmp:	SNMP_FREE(tmpvar);
action2:	     memdup((void *) &StorageNew->$name, (u_char *)vp->val.oid, vp->val_len);
action2:	     StorageNew->${name}Len = vp->val_len/sizeof(oid);
action3:	     /* StorageNew->${name} = $mib->{defaultValue}; */
#
type:		COUNTER64
storage:	    struct counter64 $name;
storageret:	&
varlenname:	tmpint
sizeofstart:	sizeof(
sizeofend:	)
tmpvar:		struct counter64
action:	             tmpvar = StorageTmp->$name;
action:	             StorageTmp->${name} = *((struct counter64 *) var_val);
undo:	             StorageTmp->${name} = tmpvar;
casttmp:	tmpvar;
action2:	     StorageNew->$name = *vp->val.counter64;
action3:	     StorageNew->${name} = 0;

############################################################################
# source variable typing information:
include: mib2c.vartypes.conf

# Begin code template section
############################################################################
# variable statemnts used in a couple of places below
############################################################################
type:	code-varInits
code:	  /* variables we may use later */
code:	  static long long_ret;
code:	  static u_long ulong_ret;
code:	  static u_char string[SPRINT_MAX_LEN];
code:	  static oid objid[MAX_OID_LEN];
code:	  static struct counter64 c64;

############################################################################
# The .h file
############################################################################
type:	code-dot-h
#code:	#ifndef _MIBGROUP_${MIBNAME}_H
#code:	#define _MIBGROUP_${MIBNAME}_H
code:	#ifndef __LOCAL_${MIBNAME}_H__
code:	#define __LOCAL_${MIBNAME}_H__
code:
code:	/*
code:	 * This file was generated by mib2c and is intended for use as a mib module
code:	 * for the ucd-snmp snmpd agent.
code:	 */
code:
#code:	/* we may use header_complex from the header_complex module */
#code:	
#code:	config_require(header_complex)
#code:
code:	/* our storage structure(s) */
code:
code:	struct ${mibName}_data { unsigned int ${mibName}_request; $variables{'code-structure-mib'}{'processed'} };
code:
code:	$variables{'code-structure-per-table'}{'processed'}
code:
code:	/* enum definitions from the covered mib sections */
code:
code:	$variables{'code-enums'}{'processed'}
code:
#code:	/* function prototypes */
#code:
#code:	void   init_$mibName(void);
#code:	$variables{'code-var-table-decl'}{'processed'}
#code:	$variables{'code-write-func-decl'}{'processed'}
#code:	$variables{'code-write-rowstatus-decl'}{'processed'}
#code:
#code:	/* we may use header_generic and header_simple_table from the util_funcs module */
#code:	
#code:	config_require(util_funcs)
#code:
code:	/* function prototypes */
code:
code:	void   init_$mibName(void);
code:
code:	FindVarMethod var_$mibName;
code:	void parse_$mibName(const char *, char *);
code:	SNMPCallback store_$mibName;
code:
code:	$variables{'code-var-table-decl'}{'processed'}
code:	$variables{'code-write-func-decl'}{'processed'}
code:
#code:	#endif /* _MIBGROUP_${MIBNAME}_H */
code:	#endif /* __LOCAL_${MIBNAME}_H__ */

#
# Table refresh variable declarations.
#
type:		code-refresh-decl
processtable:	code-refresh-decl

code:	static volatile int ${vtable}_refresh = 1;
#
# Structure definition line.
#
type:		code-structure-mib
process:	code-structure-mib
skipif:		$vroutine ne $mibName
code:	" . eval ("\"$variables{$mib->{'type'}}{'storage'}\"") . "

#
# Structure definition, one per table
#
type:		code-structure-per-table
processtable:	code-structure-per-table

code:	struct ${vtable}_data { unsigned int ${vtable}_request; $variables{$vtable}{'code-structure'}{'processed'} };

#
# Structure storage arrays, one per table
#
type:		code-structure-storage
processtable:	code-structure-storage

code:	static struct header_complex_index *${vtable}Storage = NULL;

#
# Structure definition line.
#
type:	code-structure
process: code-structure

code:	" . eval ("\"$variables{$mib->{'type'}}{'storage'}\"") . "
#$variables{$i}{'code'}\""evalstr(
#
# ENUM definitions
#
type:		code-enums
process:	code-enums
skipif: $mib->{'textualConvention'} eq "RowStatus" || $mib->{'textualConvention'} eq "StorageType"

code:	" . eval{ my ($i, $x); foreach $i (sort {$mib->{'enums'}{$a} <=> $mib->{'enums'}{$b}} keys(%{$mib->{'enums'}})) { $x .= sprintf("#define %-40s %d\n","${NAME}_" . uc($i),$mib->{'enums'}{$i}); } $x =~ s/-/_/g; $x; } . "

############################################################################
# The .c file, top
############################################################################
type:	code-main-part
code:	/* This file was generated by mib2c and is intended for use as
code:	   a mib module for the ucd-snmp snmpd agent. */
code:
#code:	/* This should always be included first before anything else */
#code:	#include <config.h>
#code:	#if HAVE_STDLIB_H
#code:	#include <stdlib.h>
#code:	#endif
#code:	#if HAVE_STRING_H
#code:	#include <string.h>
#code:	#else
#code:	#include <strings.h>
#code:	#endif
#code:	
#code:	/* minimal include directives */
#code:	#include \"mibincl.h\"
#code:	#include \"header_complex.h\"
#code:	#include \"$outputName.h\"
#code:	#include \"snmp-tc.h\"
#code:	
code:	#include <ucd-snmp/ucd-snmp-config.h>
code:	#include <ucd-snmp/ucd-snmp-includes.h>
code:	#include <ucd-snmp/ucd-snmp-agent-includes.h>
code:	#include <ucd-snmp/callback.h>
code:	#include <ucd-snmp/snmp-tc.h>
code:	#include <ucd-snmp/default_store.h>
code:	#include <ucd-snmp/snmp_alarm.h>
code:
code:	/* The following header files are mangled in most recent net-snmp releases so
code:	 * the versions from UCD-SNMP 4.2.5 are included here.  */
code:	#if defined HAVE_LIBNETSNMP
code:	#else  /* defined HAVE_LIBNETSNMP */
code:	#endif /* defined HAVE_LIBNETSNMP */
code:
code:	/* These are messed up on both. */
code:	#include \"ds_agent.h\"
code:
code:	#ifdef HAVE_UCD_SNMP_UTIL_FUNCS_H
code:	#include <ucd-snmp/util_funcs.h>
code:	/* Many recent net-snmp UCD compatible headers do not declard header_generic. */
code:	int header_generic(struct variable *, oid *, size_t *, int, size_t *, WriteMethod **);
code:	#else  /* HAVE_UCD_SNMP_UTIL_FUNCS_H */
code:	#include \"util_funcs.h\"
code:	#endif /* HAVE_UCD_SNMP_UTIL_FUNCS_H */
code:
code:	#ifdef HAVE_UCD_SNMP_HEADER_COMPLEX_H
code:	#include <ucd-snmp/header_complex.h>
code:	#else  /* HAVE_UCD_SNMP_HEADER_COMPLEX_H */
code:	#include \"header_complex.h\"
code:	#endif /* HAVE_UCD_SNMP_HEADER_COMPLEX_H */
code:
code:	/* This one is the other way around: it is just fine for net-snmp, but
code:	 * ucd-snmp does not provide the header file at all.  */
code:	#ifdef HAVE_UCD_SNMP_MIB_MODULES_H
code:	#include <ucd-snmp/mib_modules.h>
code:	#else  /* HAVE_UCD_SNMP_MIB_MODULES_H */
code:	#ifdef HAVE_NET_SNMP_AGENT_MIB_MODULES_H
code:	#include <net-snmp/agent/mib_modules.h>
code:	#else  /* HAVE_NET_SNMP_AGENT_MIB_MODULES_H */
code:	#include \"mib_modules.h\"
code:	#endif /* HAVE_NET_SNMP_AGENT_MIB_MODULES_H */
code:	#endif /* HAVE_UCD_SNMP_MIB_MODULES_H */
code:
code:	#include \"$outputName.h\"
code:
code:	#include <stdint.h>
code:	#include <signal.h>
code:	#include <sys/stat.h>		/* for struct stat, fstat() */
code:	#include <sys/types.h>
code:	#include <unistd.h>
code:	#include <stdlib.h>
code:	#include <pwd.h>		/* for getpwuid() getpwnam() */
code:	#include <grp.h>		/* for getgrgid() getgrnam() */
code:	#include <libgen.h>		/* for basename() */
code:	#include <fcntl.h>		/* for O_CREAT */
code:
code:	#include <sys/sysctl.h>		/* for sysctl */
code:	#include <errno.h>
code:	#include <string.h>
code:
code:	#ifdef _GNU_SOURCE
code:	#include <getopt.h>
code:	#endif
code:
code:	static const char sa_program[] = \"$mibname\";
code:
code:	static int sa_dump = 0;			/* default packet dump */
code:	static int sa_debug = 0;		/* default no debug */
code:	static int sa_nomead = 1;		/* default daemon mode */
code:	static int sa_output = 1;		/* default normal output */
code:	static int sa_agentx = 1;		/* default agentx mode */
code:	static int sa_alarms = 1;		/* default application alarms */
code:	static int sa_fclose = 1;		/* default close files between requests */
code:
code:	static int sa_logaddr = 0;		/* log addresses */
code:	static int sa_logfillog = 0;		/* log to sa_logfile */
code:	static int sa_logstderr = 0;		/* log to standard error */
code:	static int sa_logstdout = 0;		/* log to standard output */
code:	static int sa_logsyslog = 0;		/* log to system logs */
code:	static int sa_logcallog = 0;		/* log to callback logs */
code:	static int sa_appendlog = 0;		/* append to log file without truncating */
code:
code:	static char sa_logfile[256] = \"/var/log/$mibname.log\";
code:	static char sa_pidfile[256] = \"/var/run/$mibname.pid\";
code:	static char sa_sysctlf[256] = \"/etc/$mibname.conf\";
code:
code:	#define MY_FACILITY(__pri)	(LOG_DAEMON|(__pri))
code:
code:	int allow_severity = LOG_ERR;
code:	int deny_severity = LOG_ERR;
code:
code:	/* file stream for log file */
code:	static FILE *stdlog = NULL;
code:
code:	/* file descriptor for MIB use */
code:	static int sa_fd = 0;
code:
code:	/* indication to reread MIB configuration */
code:	static int sa_changed = 1;
code:
code:	/* request number for per-request actions */
code:	static int sa_request = 1;
code:
code:	/* indications that statistics, the mib or its tables need to be refreshed */
code:	static int sa_stats_refresh = 1;
code:
code:	static volatile int ${mibName}_refresh = 1;
code:
code:	$variables{'code-refresh-decl'}{'processed'}
code:
code:	/* 
code:	 * ${mibName}_variables_oid:
code:	 *   this is the top level oid that we want to register under.  This
code:	 *   is essentially a prefix, with the suffix appearing in the
code:	 *   variable below.
code:	 */
code:
code:	oid ${mibName}_variables_oid[] = { $commaoid };
code:
code:	$variables{'code-write-rowstatus-oid'}{'processed'}
code:
code:	/* 
code:	 * variable$varlen ${mibName}_variables:
code:	 *   this variable defines function callbacks and type return information 
code:	 *   for the $mibName mib section 
code:	 */
code:
code:	struct variable$varlen ${mibName}_variables[] = {
code:	/*  magic number        , variable type , ro/rw , callback fn  , L, oidsuffix */
code:	$variables{'variable-structure-info'}{'processed'}
code:	};
code:	/*    (L = length of the oidsuffix) */
code:
code:	static struct ${mibName}_data *${mibName}Storage = NULL;
code:
code:	/* global storage of our data, saved in and configured by header_complex() */
code:	$variables{'code-structure-storage'}{'processed'}
code:
code:	/*
code:	 * init_$mibName():
code:	 *   Initialization routine.  This is called when the agent starts up.
code:	 *   At a minimum, registration of your variables should take place here.
code:	 */
code:	void init_$mibName(void) {
code:	  DEBUGMSGTL((\"$mibName\", \"initializing...  \"));
code:
code:	  /* register ourselves with the agent to handle our mib tree */
code:	  REGISTER_MIB(\"$mibName\", ${mibName}_variables, variable$varlen,\
code:	               ${mibName}_variables_oid);
code:
code:	  /* register our config handler(s) to deal with registrations */
code:	snmpd_register_config_handler(\"$mibName\", parse_$mibName, NULL, \"HELP STRING\");
code:	$variables{'code-parser-registration'}{'processed'}
code:
code:	  /* we need to be called back later to store our data */
code:	  snmp_register_callback(SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA,
code:	                         store_$mibName, NULL);
code:	$variables{'code-store-registration'}{'processed'}
code:
code:	  /* place any other initialization junk you need here */
code:
code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	}
code:	
code:	/*
code:	 * ${mibName}_add(): adds a structure node for scalars
code:	 */
code:	int
code:	${mibName}_add(struct ${mibName}_data *thedata)
code:	{
code:	  DEBUGMSGTL((\"$mibName\", \"adding data...  \"));
code:	
code:	  ${mibName}Storage = thedata;
code:	
code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	  return SNMPERR_SUCCESS;
code:	}
code:	
code:	/*
code:	 * parse_${mibName}():
code:	 *   parses .conf file entries needed to configure the mib.
code:	 */
code:	void
code:	parse_${mibName}(const char *token, char *line)
code:	{
code:	  size_t tmpint;
code:	  struct ${mibName}_data *StorageTmp = SNMP_MALLOC_STRUCT(${mibName}_data);
code:	
code:	  DEBUGMSGTL((\"$mibName\", \"parsing config...  \"));
code:	
code:	  if (StorageTmp == NULL) {
code:	    config_perror(\"malloc failure\");
code:	    return;
code:	  }
code:	
code:	  $variables{'code-config-scalar'}{'processed'}
code:	
code:	  ${mibName}_add(StorageTmp);
code:	
code:	  (void) tmpint;
code:	
code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	}
code:	
code:	/*
code:	 * store_${mibName}():
code:	 *   stores .conf file entries needed to configure the mib.
code:	 */
code:	int
code:	store_$mibName(int majorID, int minorID, void *serverarg, void *clientarg) {
code:	  char line[SNMP_MAXBUF];
code:	  char *cptr;
code:	  size_t tmpint;
code:	  struct ${mibName}_data *StorageTmp;
code:	
code:	  DEBUGMSGTL((\"$mibName\", \"storing data...  \"));
code:	
code:	  StorageTmp = ${mibName}Storage;
code:	
code:	  (void) tmpint;
code:	
code:	 /* XXX: if (StorageTmp->${mibName}StorageType == ST_NONVOLATILE) { */
code:	
code:	        memset(line,0,sizeof(line));
code:	        strcat(line, \"$mibName \");
code:	        cptr = line + strlen(line);
code:	
code:	$variables{$mibName}{'code-persistent-sections'}{'processed'}
code:	
code:	    snmpd_store_config(line);
code:	 /* } */
code:	  return SNMPERR_SUCCESS;
code:	}
code:	
code:	/**
code:	 * refresh_$mibName: refresh $mibName scalars
code:	 *
code:	 * Normally, the values retrieved from the operating system are cached.
code:	 * When the agent receives a SIGPOLL from an open STREAMS configuration
code:	 * or administrative driver Stream, the STREAMS subsystem indicates to
code:	 * the agent that the cache has been invalidated and that it should
code:	 * reread scalars and tables from the STREAMS susbystem.  This function
code:	 * is used when the agent starts for the first time, or after a SIGPOLL
code:	 * has been received (and a scalar has been requested).
code:	 */
code:	void
code:	refresh_$mibName(void)
code:	{
code:	  if (${mibName}_refresh == 0)
code:	    return;
code:	  ${mibName}_refresh = 0;
code:	
code:	  /* Update scalars as required here... */
code:	
code:	}
code:	
code:	/*
code:	 * var_$mibName():
code:	 *   This function is called every time the agent gets a request for
code:	 *   a scalar variable that might be found within your mib section
code:	 *   registered above.  It is up to you to do the right thing and
code:	 *   return the correct value.
code:	 *     You should also correct the value of \"var_len\" if necessary.
code:	 *
code:	 *   Please see the documentation for more information about writing
code:	 *   module extensions, and check out the examples in the examples
code:	 *   and mibII directories.
code:	 */
code:	u_char *
code:	var_$mibName(struct variable *vp, 
code:	                oid     *name, 
code:	                size_t  *length, 
code:	                int     exact, 
code:	                size_t  *var_len, 
code:	                WriteMethod **write_method)
code:	{
code:	  struct ${mibName}_data *StorageTmp = ${mibName}Storage;
#code:	
#code:	$variables{'code-varInits'}{'code'}
code:	
code:	  if (header_generic(vp,name,length,exact,var_len,write_method)
code:	                                  == MATCH_FAILED )
code:	    return NULL;
code:	
code:	  /* Refresh the MIB values if required. */
code:	  refresh_$mibName();
code:	
code:	  (void) StorageTmp;
code:	
code:	  /* This is where we do the value assignments for the mib results. */
code:	
code:	  switch(vp->magic) {\n\n
code:	$variables{$mibName}{'code-case-statements'}{'processed'}
code:	    default:
code:	      ERROR_MSG(\"\");
code:	  }
code:	  return NULL;
code:	}
code:
code:
code:	$variables{'code-parser'}{'processed'}
code:
code:	$variables{'code-var_table'}{'processed'}
code:
code:	$variables{'code-write-func'}{'processed'}
code:
code:	$variables{'code-write-scalar-func'}{'processed'}
code:
code:	$variables{'code-write-rowstatus'}{'processed'}
code:
code:	static void
code:	sa_version(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	%2\$s\\n\\
code:	Copyright (c) 2001-2008  OpenSS7 Corporation.  All Rights Reserved.\\n\\
code:	Distributed under Affero GPL Version 3, included here by reference.\\n\\
code:	See `%1\$s --copying' for copying permissions.\\n\\
code:	\", argv[0], ident);
code:	}
code:	
code:	static void
code:	sa_usage(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stderr, \"\\
code:	Usage:\\n\\
code:	    %1\$s [general-options] [options] [arguments]\\n\\
code:	    %1\$s {-H|--help-directives}\\n\\
code:	    %1\$s {-h|--help}\\n\\
code:	    %1\$s {-V|--version}\\n\\
code:	    %1\$s {-C|--copying}\\n\\
code:	\", argv[0]);
code:	}
code:	
code:	static void
code:	sa_help(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	Usage:\\n\\
code:	    %1\$s [general-options] [options] [arguments]\\n\\
code:	    %1\$s {-h|--help}\\n\\
code:	    %1\$s {-V|--version}\\n\\
code:	    %1\$s {-C|--copying}\\n\\
code:	Arguments:\\n\\
code:	    None.\\n\\
code:	Options:\\n\\
code:	    -a, --log-addresses\\n\\
code:	        log addresses of connecting management stations.\\n\\
code:	    -A, --append\\n\\
code:	        append to logfiles without truncating.\\n\\
code:	    -c, --config-file CONFIGFILE\\n\\
code:	        use configuration file CONFIGFILE.\\n\\
code:	    -C, --config-only\\n\\
code:	        only load configuration given by -c option.\\n\\
code:	    -d, --dump\\n\\
code:	        dump sent and received PDUs.\\n\\
code:	    -D, --debug [LEVEL]\\n\\
code:	        set debugging verbosity to LEVEL.\\n\\
code:	    -D, --debug-tokens [TOKEN[,TOKEN]*]\\n\\
code:	        debug specified TOKEN's.\\n\\
code:	    -f, --dont-fork\\n\\
code:	        run in the foreground.\\n\\
code:	    -g, --gid, --groupid GID\\n\\
code:	        become group GID after listening.\\n\\
code:	    -h, --help, -?, --?\\n\\
code:	        print usage information and exit.\\n\\
code:	    -H, --help-directives\\n\\
code:	        print config directives and exit.\\n\\
code:	    -I, --initialize [-]MODULE[,MODULE]*\\n\\
code:	        initialize (or not, '-') these MODULE's.\\n\\
code:	    -k, --keep-open\\n\\
code:	        keep system files open between requests.\\n\\
code:	    -l, --log-file [LOGFILE]\\n\\
code:	        log to log file name LOGFILE.  [default: /var/log/$mibname.log]\\n\\
code:	    -L, --log-stderr\\n\\
code:	        log to controlling terminal standard error.\\n\\
code:	    -m, --mibs [+]MIB[,MIB]*\\n\\
code:	        load these (additional '+') MIBs.\\n\\
code:	    -M, --master\\n\\
code:	        run as SNMP master instead of AgentX sub-agent.\\n\\
code:	    -M, --mibdirs [+]MIBDIR[:MIBDIR]*\\n\\
code:	        search these (additional, '+') colon separated directories for MIBs.\\n\\
code:	    -n, --nodaemon\\n\\
code:	        run in the foreground.\\n\\
code:	    -n, --name NAME\\n\\
code:	        use NAME for configuration file base.  [default: $mibname]\\n\\
code:	    -p, --port PORTNUM\\n\\
code:	        listen on port number PORTNUM.  [default: 161]\\n\\
code:	    -p, --pidfile PIDFILE\\n\\
code:	        write daemon pid to PIDFILE.  [default: /var/run/$mibname.pid]\\n\\
code:	    -P, --pidfile PIDFILE\\n\\
code:	        write daemon pid to PIDFILE.  [default: /var/run/$mibname.pid]\\n\\
code:	    -q, --quiet\\n\\
code:	        suppress normal output.\\n\\
code:	    -q, --quick\\n\\
code:	        abbreviate output for machine readability.\\n\\
code:	    -r, --noroot\\n\\
code:	        do not require root privilege.\\n\\
code:	    -s, --log-syslog\\n\\
code:	        log to system logs.\\n\\
code:	    -S, --sysctl-file FILENAME\\n\\
code:	        write sysctl config file FILENAME.  [default: /etc/streams.conf]\\n\\
code:	    -t, --agent-alarms\\n\\
code:	        agent blocks {SIGALARM}.\\n\\
code:	    -T, --transport [TRANSPORT]\\n\\
code:	        default transport TRANSPORT.  [default: udp]\\n\\
code:	    -u, --uid, --userid UID\\n\\
code:	        become user UID after listening.\\n\\
code:	    -U, --dont-remove-pidfile\\n\\
code:	        do not remove PIDFILE when shutting down.\\n\\
code:	    -v, --version\\n\\
code:	        print version information and exit.\\n\\
code:	    -V, --verbose [LEVEL]\\n\\
code:	        be verbose to LEVEL.  [default: 1]\\n\\
code:	    -x, --agentx-socket [SOCKET]\\n\\
code:	        master AgentX on SOCKET.  [default: /var/agentx/master]\\n\\
code:	    -X, --agentx\\n\\
code:	        run as AgentX sub-agent instead of master (the default).\\n\\
code:	    -y, --copying\\n\\
code:	        print copying information and exit.\\n\\
code:	\", argv[0]);
code:	}
code:	
code:	static void
code:	sa_copying(int argc, char *argv[])
code:	{
code:		if (!sa_output && !sa_debug)
code:			return;
code:		fprintf(stdout, \"\\
code:	--------------------------------------------------------------------------------\\n\\
code:	%1\$s\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com>\\n\\
code:	Copyright (c) 1997-2000  Brian F. G. Bidulock <bidulock\@openss7.org>\\n\\
code:	\\n\\
code:	All Rights Reserved.\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	This program is free software; you can  redistribute  it and/or modify  it under\\n\\
code:	the terms of the GNU Affero General Public License as published by the Free\\n\\
code:	Software Foundation; Version 3 of the License.\\n\\
code:	\\n\\
code:	This program is distributed in the hope that it will  be useful, but WITHOUT ANY\\n\\
code:	WARRANTY; without even  the implied warranty of MERCHANTABILITY or FITNESS FOR A\\n\\
code:	PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.\\n\\
code:	\\n\\
code:	You should have received a copy of the GNU  Affero  General Public License along\\n\\
code:	with this program.   If not, see <http://www.gnu.org/licenses/>, or write to the\\n\\
code:	Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on behalf\\n\\
code:	of the U.S. Government (\\\"Government\\\"), the following provisions apply to you. If\\n\\
code:	the Software is supplied by the  Department of Defense (\\\"DoD\\\"), it is classified\\n\\
code:	as \\\"Commercial  Computer  Software\\\"  under  paragraph  252.227-7014  of the  DoD\\n\\
code:	Supplement  to the  Federal Acquisition Regulations  (\\\"DFARS\\\") (or any successor\\n\\
code:	regulations) and the  Government  is acquiring  only the  license rights granted\\n\\
code:	herein (the license rights customarily provided to non-Government users). If the\\n\\
code:	Software is supplied to any unit or agency of the Government  other than DoD, it\\n\\
code:	is  classified as  \\\"Restricted Computer Software\\\" and the Government's rights in\\n\\
code:	the Software  are defined  in  paragraph 52.227-19  of the  Federal  Acquisition\\n\\
code:	Regulations (\\\"FAR\\\")  (or any successor regulations) or, in the cases of NASA, in\\n\\
code:	paragraph  18.52.227-86 of  the  NASA  Supplement  to the FAR (or any  successor\\n\\
code:	regulations).\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	Commercial  licensing  and  support of this  software is  available from OpenSS7\\n\\
code:	Corporation at a fee.  See http://www.openss7.com/\\n\\
code:	--------------------------------------------------------------------------------\\n\\
code:	\", ident);
code:	}
code:	
code:	void
code:	sa_help_directives(int argc, char *argv[])
code:	{
code:		ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_NO_ROOT_ACCESS, 1);
code:		init_agent(\"$mibName\");
code:		 // init_mib_modules();
code:		init_mib();
code:		init_snmp(\"$mibName\");
code:		snmp_log(MY_FACILITY(LOG_INFO), \"Configuration directives understood:\\n\");
code:		 /* Unfortunately, read_config_print_usage() uses snmp_log(), meaning that it can only be
code:		   writen to standard error and not standard output. */
code:		read_config_print_usage(\"    \");
code:	}
code:	
code:	static int
code:	sa_sig_register(int signum, RETSIGTYPE(*handler) (int))
code:	{
code:		sigset_t mask;
code:		struct sigaction act;
code:	
code:		act.sa_handler = handler ? handler : SIG_DFL;
code:		act.sa_flags = handler ? SA_RESTART : 0;
code:		sigemptyset(&act.sa_mask);
code:		if (sigaction(signum, &act, NULL))
code:			return (-1);
code:		sigemptyset(&mask);
code:		sigaddset(&mask, signum);
code:		sigprocmask(handler ? SIG_UNBLOCK : SIG_BLOCK, &mask, NULL);
code:		return (0);
code:	}
code:	
code:	static int sa_alm_signal = 0;
code:	static int sa_pol_signal = 0;
code:	static int sa_hup_signal = 0;
code:	static int sa_int_signal = 0;
code:	static int sa_trm_signal = 0;
code:	
code:	static int sa_alm_handle = 0;
code:	
code:	void
code:	sa_alm_callback(unsigned int req, void *arg)
code:	{
code:		if (req == sa_alm_handle)
code:			sa_alm_handle = 0;
code:		sa_alm_signal = 1;
code:		return;
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_alm_handler(int signum)
code:	{
code:		sa_alm_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static void
code:	sa_snmp_alm_handler(unsigned int reg, void *clientarg)
code:	{
code:		sa_alm_signal = 1;
code:		return;
code:	}
code:	
code:	static int
code:	sa_alm_catch(void)
code:	{
code:		if (sa_alarms)
code:			return sa_sig_register(SIGALRM, &sa_alm_handler);
code:		return (-1);
code:	}
code:	
code:	static int
code:	sa_alm_block(void)
code:	{
code:		if (sa_alarms)
code:			return sa_sig_register(SIGALRM, NULL);
code:		if (sa_alm_handle) {
code:			unsigned int handle = sa_alm_handle;
code:	
code:			sa_alm_handle = 0;
code:			snmp_alarm_unregister(handle);
code:		}
code:		return (0);
code:	}
code:	
code:	static int
code:	sa_alm_action(void)
code:	{
code:		sa_alm_signal = 0;
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_pol_handler(int signum)
code:	{
code:		sa_pol_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_pol_catch(void)
code:	{
code:		return sa_sig_register(SIGPOLL, &sa_pol_handler);
code:	}
code:	
code:	static int
code:	sa_pol_block(void)
code:	{
code:		return sa_sig_register(SIGPOLL, NULL);
code:	}
code:	
code:	/*
code:	 * Both the sc(4) module and sad(4) driver issue an M_PCSIG message with
code:	 * SIGPOLL to the stream head whenever the STREAMS configuration or autopush
code:	 * configuration changes, indicating to the agent which has the sc(4) or
code:	 * sad(4) Stream open that it is necessary to reread information from the
code:	 * kernel.  This fact is merely recorded, as this information is not read each
code:	 * time that a configuration change occurs, but only after a request from some
code:	 * portion of that information occurs. This condition is also set when the
code:	 * sc(4) and sad(4) Streams are first opened. The SIGPOLL will also deliver in
code:	 * siginfo the file descriptor issuing the signal, so we could distiguish
code:	 * between sc(4) and sad(4) signals, but since one can be pushed over the
code:	 * other, there is little point in distinguishing.
code:	 *
code:	 * sc(4) or sad(4) also should be modified to provide the general streams
code:	 * statistics supported here; even though they are available through the /proc
code:	 * filesystem on Linux Fast-STREAMS.
code:	 */
code:	static int
code:	sa_pol_action(void)
code:	{
code:		sa_pol_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_INFO), \"%s: Caught SIGPOLL, will re-read data structures\",
code:			 sa_program);
code:		sa_changed = 1;
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_hup_handler(int signum)
code:	{
code:		sa_hup_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_hup_catch(void)
code:	{
code:		if (sa_agentx)
code:			return sa_sig_register(SIGHUP, &sa_hup_handler);
code:		return (-1);
code:	}
code:	
code:	static int
code:	sa_hup_block(void)
code:	{
code:		return sa_sig_register(SIGHUP, NULL);
code:	}
code:	
code:	static int
code:	sa_hup_action(void)
code:	{
code:		 /* There are several times that we might be sent a SIGHUP.  We might be sent a SIGHUP by
code:		   logrotate asking us to close and reopen our log files. */
code:		sa_hup_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"Caught SIGHUP, reopening files.\");
code:		if (sa_output > 1)
code:			snmp_log(MY_FACILITY(LOG_NOTICE), \"Reopening output file %s\", sa_logfile);
code:		if (sa_logfillog != 0) {
code:			fflush(stdlog);
code:			fclose(stdlog);
code:			snmp_disable_filelog();
code:			if ((stdlog = freopen(sa_logfile, sa_appendlog ? \"a\" : \"w\", stdlog)) == NULL) {
code:				 /* I hope we have another log sink. */
code:				snmp_log(MY_FACILITY(LOG_ERR), \"%s\", strerror(errno));
code:				snmp_log(MY_FACILITY(LOG_ERR), \"Could not reopen log file %s\", sa_logfile);
code:			}
code:			snmp_enable_filelog(sa_logfile, sa_appendlog);
code:		}
code:		return (0);
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_int_handler(int signum)
code:	{
code:		sa_int_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_int_catch(void)
code:	{
code:		return sa_sig_register(SIGINT, &sa_int_handler);
code:	}
code:	
code:	static int
code:	sa_int_block(void)
code:	{
code:		return sa_sig_register(SIGINT, NULL);
code:	}
code:	
code:	static void sa_exit(int retval);
code:	
code:	static int
code:	sa_int_action(void)
code:	{
code:		sa_int_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"%s: Caught SIGINT, shutting down\", sa_program);
code:		sa_exit(0);
code:		return (0);		/* should be no return */
code:	}
code:	
code:	static RETSIGTYPE
code:	sa_trm_handler(int signum)
code:	{
code:		sa_trm_signal = 1;
code:		return (RETSIGTYPE) (0);
code:	}
code:	
code:	static int
code:	sa_trm_catch(void)
code:	{
code:		return sa_sig_register(SIGTERM, &sa_trm_handler);
code:	}
code:	
code:	static int
code:	sa_trm_block(void)
code:	{
code:		return sa_sig_register(SIGTERM, NULL);
code:	}
code:	
code:	static void sa_exit(int retval);
code:	
code:	static int
code:	sa_trm_action(void)
code:	{
code:		sa_trm_signal = 0;
code:		snmp_log(MY_FACILITY(LOG_WARNING), \"%s: Caught SIGTERM, shutting down\", sa_program);
code:		sa_exit(0);
code:		return (0);		/* should be no return */
code:	}
code:	
code:	static void
code:	sa_sig_catch(void)
code:	{
code:		sa_alm_catch();
code:		sa_pol_catch();
code:		sa_hup_catch();
code:		sa_int_catch();
code:		sa_trm_catch();
code:	}
code:	
code:	static void
code:	sa_sig_block(void)
code:	{
code:		sa_alm_block();
code:		sa_pol_block();
code:		sa_hup_block();
code:		sa_int_block();
code:		sa_trm_block();
code:	}
code:	
code:	int
code:	sa_start_timer(long duration)
code:	{
code:		if (sa_alarms) {
code:			struct itimerval setting = {
code:				{0, 0},
code:				{duration / 1000, (duration % 1000) * 1000}
code:			};
code:	
code:			if (sa_alm_catch())
code:				return (-1);
code:			if (setitimer(ITIMER_REAL, &setting, NULL))
code:				return (-1);
code:			sa_alm_signal = 0;
code:			return (0);
code:		} else {
code:	#if defined NETSNMP_DS_APPLICATION_ID
code:			struct timeval setting = {
code:				duration / 1000, (duration % 1000) * 1000
code:			};
code:	
code:			sa_alm_handle = snmp_alarm_register_hr(setting, 0, sa_snmp_alm_handler, NULL);
code:	#else
code:			sa_alm_handle =
code:			    snmp_alarm_register((duration + 999) / 1000, 0, sa_snmp_alm_handler, NULL);
code:	#endif
code:			return (sa_alm_handle ? 0 : -1);
code:		}
code:	}
code:	
code:	static void
code:	sa_exit(int retval)
code:	{
code:		if (retval)
code:			snmp_log(MY_FACILITY(LOG_ERR), \"%s: Exiting %d\", sa_program, retval);
code:		else
code:			snmp_log(MY_FACILITY(LOG_NOTICE), \"%s: Exiting %d\", sa_program, retval);
code:		fflush(stdout);
code:		fflush(stderr);
code:		sa_sig_block();
code:		closelog();
code:		exit(retval);
code:	}
code:	
code:	static void
code:	sa_init_logging(int argc, char *argv[])
code:	{
code:		static char progname[256];
code:	
code:		 /* The purpose of this function is to bring logging up before forking (and while still in
code:		   the foreground) so that we can use the snmp_log() function before and during forking if
code:		   necessary.  Note that the default configuration for snmp_log() is to send all logs to
code:		   standard error. */
code:		strncpy(progname, basename(argv[0]), sizeof(progname));
code:	
code:		snmp_disable_log();
code:		if (sa_logfillog) {
code:			snmp_enable_filelog(sa_logfile, sa_appendlog);
code:		}
code:		if (sa_logstderr | sa_logstdout) {
code:	#if defined LOG_PERROR
code:			 /* Note that when we have Linux LOG_PERROR, and logs go both to syslog and stderr,
code:			   it is better to use the LOG_PERROR than to use snmp_log()'s print to stderr, as
code:			   the former is better formated. */
code:			if (!sa_logsyslog)
code:				snmp_enable_stderrlog();
code:	#else				/* defined LOG_PERROR */
code:			snmp_enable_stderrlog();
code:	#endif				/* defined LOG_PERROR */
code:		}
code:		if (sa_logsyslog) {
code:	#if !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT
code:			snmp_enable_syslog();
code:	#else				/* !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT */
code:			snmp_enable_syslog_ident(\"$mibName\", LOG_DAEMON);
code:	#endif				/* !defined HAVE_SNMP_ENABLE_SYSLOG_IDENT */
code:			 /* Note that the way that snmp sets up the logger is not really the way we want it,
code:			   so close the log and reopen it the way we want. */
code:			closelog();
code:	#if defined LOG_PERROR
code:			openlog(\"$mibName\", LOG_PID | LOG_CONS | LOG_NDELAY | (sa_logstderr ? LOG_PERROR : 0),
code:				MY_FACILITY(0));
code:	#else				/* defined LOG_PERROR */
code:			openlog(\"$mibName\", LOG_PID | LOG_CONS | LOG_NDELAY, MY_FACILITY(0));
code:	#endif				/* defined LOG_PERROR */
code:		}
code:		if (sa_logcallog) {
code:			snmp_enable_calllog();
code:		}
code:	}
code:	
code:	static void
code:	sa_enter(int argc, char *argv[])
code:	{
code:		if (sa_nomead) {
code:			pid_t pid;
code:	
code:			if ((pid = fork()) < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			} else if (pid != 0) {
code:				 /* parent exits */
code:				exit(0);
code:			}
code:			setsid();	/* become a session leader */
code:			 /* fork once more for SVR4 */
code:			if ((pid = fork()) < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			} else if (pid != 0) {
code:				 /* parent responsible for writing pid file */
code:				if (sa_nomead || sa_pidfile[0] != '\\0') {
code:					FILE *pidf;
code:	
code:					 /* initialize default filename */
code:					if (sa_pidfile[0] == '\\0')
code:						snprintf(sa_pidfile, sizeof(sa_pidfile), \"/var/run/%s.pid\",
code:							 sa_program);
code:					if (sa_output > 1) {
code:						snmp_log(MY_FACILITY(LOG_NOTICE),
code:							 \"%s: Writing daemon pid to file %s\", sa_program,
code:							 sa_pidfile);
code:					}
code:					if ((pidf = fopen(sa_pidfile, \"w+\"))) {
code:						fprintf(pidf, \"%d\", (int) pid);
code:						fflush(pidf);
code:						fclose(pidf);
code:					} else {
code:						snmp_log(MY_FACILITY(LOG_ERR), \"%s: %m\", sa_program);
code:						snmp_log(MY_FACILITY(LOG_ERR),
code:							 \"%s: Could not write pid to file %s\", sa_program,
code:							 sa_pidfile);
code:						sa_exit(2);
code:						 /* no return */
code:					}
code:				}
code:				 /* parent exits */
code:				exit(0);
code:			}
code:			 /* child continues */
code:			 /* release current directory */
code:			if (chdir(\"/\") < 0) {
code:				perror(argv[0]);
code:				exit(2);
code:			}
code:			umask(0);	/* clear file creation mask */
code:			 /* rearrange file streams */
code:			fclose(stdin);
code:		}
code:		 /* continue as foreground or background */
code:		sa_init_logging(argc, argv);
code:		sa_sig_catch();
code:		snmp_log(MY_FACILITY(LOG_NOTICE), \"%s: Startup complete.\", sa_program);
code:	}
code:	
code:	static void
code:	sa_mloop(int argc, char *argv[])
code:	{
code:		if (sa_agentx) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as AgentX client\\n\", argv[0]);
code:			 /* run as an AgentX client */
code:			ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 1);
code:		} else {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as SNMP master agent\\n\",
code:					 argv[0]);
code:			 /* run as SNMP master */
code:			ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 0);
code:		}
code:	
code:		if (sa_alarms) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using application alarms\\n\", argv[0]);
code:			 /* use application alarms */
code:			ds_set_boolean(DS_LIBRARY_ID, DS_LIB_ALARM_DONT_USE_SIG, 1);
code:		}
code:	
code:		 /* initialize agent */
code:		init_agent(\"$mibName\");
code:	
code:		 /* initialize MIB */
code:		init_$mibName();
code:	
code:		 /* initialize SNMP */
code:		init_snmp(\"$mibName\");
code:	
code:		if (!sa_agentx) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: running as SNMP master\\n\", argv[0]);
code:	#if !defined NETSNMP_DS_APPLICATION_ID
code:			init_master_agent(710, NULL, NULL);
code:	#else
code:			init_master_agent();
code:	#endif
code:		}
code:	
code:		for (;;) {
code:			int retval;
code:	
code:			 /* to use select or poll you need to use the snmp_select_info() to obtain the fd of 
code:			   the agentx socket and add it to the fdset. */
code:			 /* note that SIGALRM is used by snmp: use the snmp_alarm() api instead */
code:	
code:	#if 0
code:			if (snmp_select() == 0) {
code:				if (sa_alarms == 0)
code:					run_alarms();
code:			}
code:	#endif
code:			retval = agent_check_and_process(1);	/* 0 == don't block */
code:	
code:			if (retval == 0) {
code:				 /* alarm occurred, alarm conditions checked */
code:			} else if (retval == -1) {
code:				 /* error (or signal) ocurred */
code:				if (sa_alm_signal) {
code:					sa_alm_action();
code:				}
code:				if (sa_pol_signal) {
code:					sa_pol_action();
code:				}
code:				if (sa_hup_signal) {
code:					sa_hup_action();
code:				}
code:				if (sa_int_signal) {
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\",
code:							 argv[0]);
code:					snmp_shutdown(\"$mibName\");
code:					sa_int_action();	/* no return */
code:				}
code:				if (sa_trm_signal) {
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\",
code:							 argv[0]);
code:					snmp_shutdown(\"$mibName\");
code:					sa_trm_action();	/* no return */
code:				}
code:			} else if (retval > 0) {
code:				 /* processed packets */
code:				if (sa_fclose) {
code:					 /* close files after each request */
code:					if (sa_fd != 0) {
code:						int fd = sa_fd;
code:	
code:						sa_fd = 0;
code:						close(fd);
code:					}
code:				}
code:				sa_stats_refresh = 1;
code:				sa_request++;
code:			}
code:		}
code:	
code:		if (sa_debug)
code:			snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: shutting down\\n\", argv[0]);
code:		snmp_shutdown(\"$mibName\");
code:	}
code:	
code:	int
code:	main(int argc, char *argv[])
code:	{
code:		for (;;) {
code:			int c, val, fd;
code:			char *cptr;
code:			struct passwd *pw;
code:			struct group *gr;
code:			struct stat st;
code:	
code:	#if defined _GNU_SOURCE
code:			int option_index = 0;
code:	                /* *INDENT-OFF* */
code:	                static struct option long_options[] = {
code:	                        {\"log-addresses\",	no_argument,		NULL, 'a'},
code:	                        {\"append\",		no_argument,		NULL, 'A'},
code:	                        {\"config-file\",		required_argument,	NULL, 'c'},
code:	                        {\"no-configs\",		no_argument,		NULL, 'C'},
code:	                        {\"dump\",		no_argument,		NULL, 'd'},
code:	                        {\"debug\",		optional_argument,	NULL, 'D'},
code:	                        {\"debug-tokens\",	optional_argument,	NULL, 'D'},
code:	                        {\"dont-fork\",		no_argument,		NULL, 'f'},
code:	                        {\"gid\",			required_argument,	NULL, 'g'},
code:	                        {\"groupid\",		required_argument,	NULL, 'g'},
code:	                        {\"help\",		no_argument,		NULL, 'h'},
code:	                        {\"?\",			no_argument,		NULL, 'h'},
code:	                        {\"help-directives\",	no_argument,		NULL, 'H'},
code:	                        {\"initialize\",		required_argument,	NULL, 'I'},
code:	                        {\"init-modules\",	required_argument,	NULL, 'I'},
code:	                        {\"keep-open\",		no_argument,		NULL, 'k'},
code:	                        {\"log-file\",		optional_argument,	NULL, 'l'},
code:	                        {\"logfile\",		optional_argument,	NULL, 'l'},
code:	                        {\"Lf\",			optional_argument,	NULL, 'l'},
code:	                        {\"LF\",			required_argument,	NULL, 'l'},
code:	                        {\"log-stderr\",		no_argument,		NULL, 'L'},
code:	                        {\"Le\",			no_argument,		NULL, 'L'},
code:	                        {\"LE\",			required_argument,	NULL, 'L'},
code:	                        {\"mibs\",		required_argument,	NULL, 'm'},
code:	                        {\"master\",		no_argument,		NULL, 'M'},
code:	                        {\"mibdirs\",		required_argument,	NULL, 'M'},
code:	                        {\"nodaemon\",		no_argument,		NULL, 'n'},
code:	                        {\"name\",		required_argument,	NULL, 'n'},
code:	                        {\"dry-run\",		no_argument,		NULL, 'N'},
code:	                        {\"log-stdout\",		no_argument,		NULL, 'o'},
code:	                        {\"Lo\",			no_argument,		NULL, 'o'},
code:	                        {\"LO\",			required_argument,	NULL, 'o'},
code:	                        {\"port\",		required_argument,	NULL, 'p'},
code:	                        {\"pidfile\",		required_argument,	NULL, 'P'},
code:	                        {\"quiet\",		no_argument,		NULL, 'q'},
code:	                        {\"quick\",		no_argument,		NULL, 'q'},
code:	                        {\"noroot\",		no_argument,		NULL, 'r'},
code:	                        {\"log-syslog\",		no_argument,		NULL, 's'},
code:	                        {\"Ls\",			no_argument,		NULL, 's'},
code:	                        {\"LS\",			required_argument,	NULL, 's'},
code:	                        {\"syslog\",		no_argument,		NULL, 's'},
code:	                        {\"sysctl-file\",		required_argument,	NULL, 'S'},
code:	                        {\"agent-alarms\",	no_argument,		NULL, 't'},
code:	                        {\"transport\",		optional_argument,	NULL, 'T'},
code:	                        {\"uid\",			required_argument,	NULL, 'u'},
code:	                        {\"userid\",		required_argument,	NULL, 'u'},
code:	                        {\"dont-remove-pidfile\",	no_argument,		NULL, 'U'},
code:	                        {\"leave-pidfile\",	no_argument,		NULL, 'U'},
code:	                        {\"version\",		no_argument,		NULL, 'v'},
code:	                        {\"verbose\",		optional_argument,	NULL, 'V'},
code:	                        {\"agentx-socket\",	required_argument,	NULL, 'x'},
code:	                        {\"agentx\",		no_argument,		NULL, 'X'},
code:	                        {\"copying\",		no_argument,		NULL, 'y'},
code:	#if 0
code:	                        {\"directory\",		required_argument,	NULL, 'd'},
code:	                        {\"basename\",		required_argument,	NULL, 'b'},
code:	                        {\"outfile\",		required_argument,	NULL, 'o'},
code:	                        {\"errfile\",		required_argument,	NULL, 'e'},
code:	#endif
code:	                        { 0, }
code:	                };
code:	                /* *INDENT-ON* */
code:	
code:			c = getopt_long_only(argc, argv,
code:					     \":aAc:CdD::fg:hHI:kl::L::m:M::n::o::p:P:qrs::S:tT::u:UvV::x:Xy\",
code:					     long_options, &option_index);
code:	#else				/* defined _GNU_SOURCE */
code:			c = getopt(argc, argv,
code:				   \":aAc:CdD::fg:hHI:kl::L::m:M::n::o::p:P:qrs::S:tT::u:UvV::x:Xy\");
code:	#endif				/* defined _GNU_SOURCE */
code:			if (c == -1) {
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: done options processing\\n\",
code:						 argv[0]);
code:				break;
code:			}
code:			switch (c) {
code:			case 0:
code:				goto bad_usage;
code:			case 'a':	/* -a, --log-addresses */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging addresses\\n\",
code:						 argv[0]);
code:				sa_logaddr++;
code:				break;
code:			case 'A':	/* -A, --append */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will not truncate logfile\\n\",
code:						 argv[0]);
code:	#if defined NETSNMP_DS_LIB_APPEND_LOGFILES
code:				ds_set_boolean(DS_LIBRARY_ID, NETSNMP_DS_LIB_APPEND_LOGFILES, 1);
code:	#endif				/* defined NETSNMP_DS_LIB_APPEND_LOGFILES */
code:				sa_appendlog = 1;
code:				break;
code:			case 'c':	/* -c, --config-file CONFIGFILE */
code:				if (optarg == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: using configuration file %s\\n\", argv[0], optarg);
code:				ds_set_string(DS_LIBRARY_ID, DS_LIB_OPTIONALCONFIG, optarg);
code:				break;
code:			case 'C':	/* -C, --no-configs */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: not reading default config files\\n\", argv[0]);
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_DONT_READ_CONFIGS, 1);
code:				break;
code:			case 'd':	/* -d, --dump */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting packet dump\\n\",
code:						 argv[0]);
code:				sa_dump = 1;
code:				 // snmp_set_dump_packet(sa_dump);
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_DUMP_PACKET, sa_dump);
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, sa_dump);
code:				break;
code:			case 'D':	/* -D, --debug [LEVEL], --debug-tokens [TOKENS] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: increasing debug verbosity\\n\",
code:						 argv[0]);
code:				if (optarg == NULL) {
code:					 /* no option: must be -D, --debug */
code:					sa_debug++;
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: debug level is now %d\\n\", argv[0], sa_debug);
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: debugging all tokens\\n\", argv[0]);
code:					if (sa_debug)
code:						debug_register_tokens(\"ALL\");
code:				} else {
code:					cptr = optarg;
code:					if ((val = strtol(optarg, &cptr, 0)) < 0)
code:						goto bad_option;
code:					if (*cptr == '\\0') {
code:						 /* it is just a number, must be -D, --debug [LEVEL] */
code:						sa_debug = val;
code:						if (sa_debug)
code:							snmp_log(MY_FACILITY(LOG_DEBUG),
code:								 \"%s: debug level is now %d\\n\", argv[0],
code:								 sa_debug);
code:					} else {
code:						 /* not a number, must be -D, --debug-tokens TOKENS */
code:						if (sa_debug)
code:							snmp_log(MY_FACILITY(LOG_DEBUG),
code:								 \"%s: debugging tokens %s\\n\", argv[0],
code:								 optarg);
code:						debug_register_tokens(optarg);
code:					}
code:				}
code:				break;
code:			case 'f':	/* -f, --dont-fork */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: suppressing daemon mode\\n\",
code:						 argv[0]);
code:				sa_nomead = 0;
code:				break;
code:			case 'u':	/* -u, --uid, --userid UID */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0)
code:					goto bad_option;
code:				 /* UID can be name or number */
code:				if ((pw =
code:				     (*cptr == '\\0') ? getpwuid((uid_t) val) : getpwnam(optarg)) == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will run as uid %s(%d)\\n\",
code:						 argv[0], pw->pw_name, pw->pw_uid);
code:				ds_set_int(DS_APPLICATION_ID, DS_AGENT_USERID, pw->pw_uid);
code:				break;
code:			case 'g':	/* -g, --gid, --groupdid GID */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0)
code:					goto bad_option;
code:				 /* GID can be name or number */
code:				if ((gr =
code:				     (*cptr == '\\0') ? getgrgid((gid_t) val) : getgrnam(optarg)) == NULL)
code:					goto bad_option;
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will run as gid %s(%d)\\n\",
code:						 argv[0], gr->gr_name, gr->gr_gid);
code:				ds_set_int(DS_APPLICATION_ID, DS_AGENT_GROUPID, gr->gr_gid);
code:				break;
code:			case 'h':	/* -h, --help, -?, --? */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing help message\\n\",
code:						 argv[0]);
code:				sa_help(argc, argv);
code:				exit(0);
code:			case 'H':	/* -H, --help-directives */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing config directives\\n\",
code:						 argv[0]);
code:				sa_help_directives(argc, argv);
code:				exit(0);
code:			case 'I':	/* -I, --init-modules, --initialize MODULE[{,| |:}MODULE]* */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: will initialize modules: %s\\n\", argv[0], optarg);
code:				add_to_init_list(optarg);
code:				break;
code:			case 'k':	/* -k, --keep-open */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: keeping files open\\n\",
code:						 argv[0]);
code:				sa_fclose = 0;
code:				break;
code:			case 'l':	/* -l, --log-file, --logfile, -Lf, -LF p1[-p2] [LOGFILE] */
code:				if (optarg != NULL)
code:					strncpy(sa_logfile, optarg, sizeof(sa_logfile));
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: will log to file %s\\n\",
code:						 argv[0], sa_logfile);
code:				sa_logfillog = 1;
code:				break;
code:			case 'L':	/* -L, --log-stderr, -Le, -LE p1[-p2] */
code:				 /* Note that the recent NET-SNMP version of this option is far more
code:				   complicated: -Le is the same as the old version of the option; -Lf
code:				   LOGFILE is like the -l option; -Ls is like the -s option; -Lo logs
code:				   messages to standard output; -LX p1[-p2] [LOGFILE], where X = E, F, S or 
code:				   O, logs priority p1 and above to X, or p1 thru p2 to X. */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to standard error\\n\",
code:						 argv[0]);
code:				sa_logstderr = 1;
code:				break;
code:			case 'm':	/* -m, --mibs MIBS */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using MIBS %s\\n\", argv[0],
code:						 optarg);
code:				break;
code:			case 'M':	/* -M, --master or -M, --mibdirs MIBDIRS */
code:				if (optarg) {
code:					 /* -M, --mibdirs MIBDIRS */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using MIBDIRS %s\\n\",
code:							 argv[0], optarg);
code:				} else {
code:					 /* -M, --master */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: setting SNMP master\\n\", argv[0]);
code:					sa_agentx = 0;
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 0);
code:				}
code:				break;
code:			case 'n':	/* -n, --nodaemon or -n, --name NAME */
code:				if (optarg) {
code:					 /* -n, --name NAME */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using name %s\\n\",
code:							 argv[0], optarg);
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PROGNAME, optarg);
code:				} else {
code:					 /* -n, --nodaemon */
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: suppressing deamon mode\\n\", argv[0]);
code:					sa_nomead = 0;
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PROGNAME,
code:						      basename(argv[0]));
code:				}
code:				break;
code:			case 'N':	/* -N, --dry-run */
code:	#if defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: setting for dry-runs startup\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, NETSNMP_DS_AGENT_QUIT_IMMEDIATELY, 1);
code:				break;
code:	#else				/* defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY */
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: -N option not supported\\n\", argv[0]);
code:				goto bad_option;
code:	#endif				/* defined NETSNMP_DS_AGENT_QUIT_IMMEDIATELY */
code:			case 'o':	/* -o, --log-stdout, -Lo, -LO p1[-p2] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to stdout\\n\",
code:						 argv[0]);
code:				sa_logstdout = 1;
code:				break;
code:			case 'p':	/* -p, --port PORTNUM or -p, --pidfile PIDFILE */
code:				cptr = optarg;
code:				if ((val = strtol(optarg, &cptr, 0)) < 0 || val > 16383)
code:					goto bad_option;
code:				if (*cptr == '\\0') {
code:					char buf[4096];
code:	
code:					 /* -p, --port PORTNUM */
code:					if ((cptr = ds_get_string(DS_APPLICATION_ID, DS_AGENT_PORTS)))
code:						snprintf(buf, sizeof(buf), \"%s,%s\", cptr, optarg);
code:					else
code:						strncpy(buf, optarg, sizeof(buf));
code:					ds_set_string(DS_APPLICATION_ID, DS_AGENT_PORTS, buf);
code:					break;
code:				}
code:				 /* fall through */
code:			case 'P':	/* -p, -P, --pidfile PIDFILE */
code:				if (optarg) {
code:					 /* either it exists */
code:					if (stat(optarg, &st) == -1) {
code:						 /* or we can create it */
code:						if ((fd = open(optarg, O_CREAT, 0600)) == -1) {
code:							perror(argv[0]);
code:							goto bad_option;
code:						}
code:						close(fd);
code:					}
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: setting pid file to %s\\n\", argv[0], optarg);
code:					strncpy(sa_pidfile, optarg, sizeof(sa_pidfile));
code:				}
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using pidfile %s\\n\", argv[0],
code:						 sa_pidfile);
code:				break;
code:			case 'q':	/* -q, --quiet, --quick */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: suppressing normal output\\n\",
code:						 argv[0]);
code:				sa_debug = 0;
code:				sa_output = 0;
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 0);
code:				 // snmp_set_quick_print();
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_QUICK_PRINT, 1);
code:				break;
code:			case 'r':	/* -r, --noroot */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: setting for non-root access\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_NO_ROOT_ACCESS, 1);
code:				break;
code:			case 's':	/* -s, --log-syslog, -Ls, -LS p1[-p2] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: logging to system logs\\n\",
code:						 argv[0]);
code:				sa_logsyslog = 1;
code:				break;
code:			case 'S':	/* -S, -sysctl-file FILENAME */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: using %s for backing\\n\",
code:						 argv[0], optarg);
code:				strncpy(sa_sysctlf, optarg, sizeof(sa_sysctlf));
code:				break;
code:			case 't':	/* -t, --agent-alarms */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting agent alarms\\n\",
code:						 argv[0]);
code:				sa_alarms = 0;
code:				ds_set_boolean(DS_LIBRARY_ID, DS_LIB_ALARM_DONT_USE_SIG, 1);
code:				break;
code:			case 'T':	/* -T, --transport [TRANSPORT] */
code:				if (optarg == NULL)
code:					goto udp_transport;
code:				if (!strcasecmp(\"TCP\", optarg)) {
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: setting default transport to TCP\\n\", argv[0]);
code:					val = ds_get_int(DS_APPLICATION_ID, DS_AGENT_FLAGS);
code:					val |= SNMP_FLAGS_STREAM_SOCKET;
code:					ds_set_int(DS_APPLICATION_ID, DS_AGENT_FLAGS, val);
code:				} else if (!strcasecmp(\"UDP\", optarg)) {
code:				      udp_transport:
code:					if (sa_debug)
code:						snmp_log(MY_FACILITY(LOG_DEBUG),
code:							 \"%s: setting default transport to UDP\\n\", argv[0]);
code:					val = ds_get_int(DS_APPLICATION_ID, DS_AGENT_FLAGS);
code:					val &= ~SNMP_FLAGS_STREAM_SOCKET;
code:					ds_set_int(DS_APPLICATION_ID, DS_AGENT_FLAGS, val);
code:				} else
code:					goto bad_option;
code:				break;
code:			case 'U':
code:	#if defined NETSNMP_DS_AGENT_LEAVE_PIDFILE
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: will leave pidfile after shutdown\\n\", argv[0]);
code:				ds_set_boolean(DS_APPLICATION_ID, NETSNMP_DS_AGENT_LEAVE_PIDFILE, 1);
code:	#else
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: -U option not supported\\n\");
code:				goto bad_option;
code:	#endif				/* defined NETSNMP_DS_AGENT_LEAVE_PIDFILE */
code:				break;
code:			case 'v':	/* -v, --version */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing version message\\n\",
code:						 argv[0]);
code:				sa_version(argc, argv);
code:				exit(0);
code:			case 'V':	/* -V, --verbose [LEVEL] */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: increasing output verbosity\\n\", argv[0]);
code:				if (optarg == NULL) {
code:					sa_output++;
code:				} else {
code:					if ((val = strtol(optarg, NULL, 0)) < 0)
code:						goto bad_option;
code:					sa_output = val;
code:				}
code:				if (sa_output > 1)
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 1);
code:				else
code:					ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_VERBOSE, 0);
code:				break;
code:			case 'x':	/* -x, --agentx-socket SOCKET */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG),
code:						 \"%s: setting AgentX socket to %s\\n\", argv[0], optarg);
code:				ds_set_string(DS_APPLICATION_ID, DS_AGENT_X_SOCKET, optarg);
code:				 // ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_AGENTX_MASTER, 1);
code:				break;
code:			case 'X':	/* -X, --agentx */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: setting AgentX sub-agent\\n\",
code:						 argv[0]);
code:				sa_agentx = 1;
code:				ds_set_boolean(DS_APPLICATION_ID, DS_AGENT_ROLE, 1);
code:				break;
code:			case 'y':	/* -y, --copying */
code:				if (sa_debug)
code:					snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: printing copying message\\n\",
code:						 argv[0]);
code:				sa_copying(argc, argv);
code:				exit(0);
code:			case '?':
code:			case ':':
code:			default:
code:			      bad_option:
code:				optind--;
code:				goto bad_nonopt;
code:			      bad_nonopt:
code:				if (sa_output || sa_debug) {
code:					if (optind < argc) {
code:						fprintf(stderr, \"%s: syntax error near '\", argv[0]);
code:						while (optind < argc)
code:							fprintf(stderr, \"%s \", argv[optind++]);
code:						fprintf(stderr, \"'\\n\");
code:					} else {
code:						fprintf(stderr, \"%s: missing option or argument\", argv[0]);
code:						fprintf(stderr, \"\\n\");
code:					}
code:					fflush(stderr);
code:				      bad_usage:
code:					sa_usage(argc, argv);
code:				}
code:				exit(2);
code:			}
code:		}
code:		if (optind < argc) {
code:			if (sa_debug)
code:				snmp_log(MY_FACILITY(LOG_DEBUG), \"%s: excess non-option arguments\\n\",
code:					 argv[0]);
code:			goto bad_nonopt;
code:		}
code:		sa_enter(argc, argv);	/* daemonize if necessary */
code:		sa_mloop(argc, argv);	/* execute main loop */
code:		exit(0);
code:	}

############################################################################
# var_ function for tables, which is handled specially and used above
#
#   Note: $vtable is set to the table name in the processtable loop.
############################################################################

#
# header file defs first
#
type:		code-var-table-decl
processtable:	code-var-table-decl

code:	FindVarMethod var_$vtable;
code:	void parse_$vtable(const char *, char *);
code:	SNMPCallback store_$vtable;

#
# .conf Store Code per table
#
type:		code-store-registration
processtable:	code-store-registration
code:	  snmp_register_callback(SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_STORE_DATA,
code:		  store_$vtable, NULL);
#
# .conf Parser Code per table
#
type:		code-parser-registration
processtable:	code-parser-registration
code:	  snmpd_register_config_handler(\"$vtable\", parse_$vtable, NULL,
code:	                                \"HELP STRING\");

type:		code-varlist-add
process:	code-varlist-add
skipif:		$variables{$vroutine}{$name}{'isanindex'} != 1
code:	  /* $name */
code:	  snmp_varlist_add_variable(&vars, NULL, 0, $variables{$mib->{type}}{asnType}, (u_char *) $variables{$mib->{type}}{'storageret'}thedata->$name, $variables{$mib->{type}}{'sizeofstart'}thedata->$name$variables{$mib->{type}}{'sizeofend'});
#code:	  snmp_varlist_add_variable(&vars, NULL, 0, $variables{$mib->{type}}{asnType}, ($variables{$mib->{type}}{'cast'}) thedata->$name, $variables{$mib->{type}}{'sizeofstart'}thedata->$name$variables{$mib->{type}}{'sizeofend'}); /* $name */

type:		code-parser
processtable:	code-parser

code:	/* 
code:	 * ${vtable}_add(): adds a structure node to our data set 
code:	 */
code:	int
code:	${vtable}_add(struct ${vtable}_data *thedata) {
code:	  struct variable_list *vars = NULL;
code:
#code:	  DEBUGMSGTL((\"$mibName\", \"adding data...  \"));
code:	  DEBUGMSGTL((\"$vtable\", \"adding data...  \"));
code:	 /* add the index variables to the varbind list, which is 
code:	    used by header_complex to index the data */
code:
code:	$variables{$vtable}{'code-varlist-add'}{'processed'}
code:
code:	  header_complex_add_data(&${vtable}Storage, vars, thedata);
code:	  DEBUGMSGTL((\"$vtable\",\"registered an entry\\n\"));
code:
#code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	  DEBUGMSGTL((\"$vtable\", \"done.\\n\"));
code:	  return SNMPERR_SUCCESS;
code:	}
code:
code:	/*
code:	 * parse_$vtable():
code:	 *   parses .conf file entries needed to configure the mib.
code:	 */
code:	void
code:	parse_$vtable(const char *token, char *line) {
code:	  size_t tmpint;
code:	  struct ${vtable}_data *StorageTmp = SNMP_MALLOC_STRUCT(${vtable}_data);
#code:	  struct variable_list *vars = NULL;
code:
#code:	    DEBUGMSGTL((\"$mibName\", \"parsing config...  \"));
code:	    DEBUGMSGTL((\"$vtable\", \"parsing config...  \"));
code:
code:	  if (StorageTmp == NULL) {
code:	    config_perror(\"malloc failure\");
code:	    return;
code:	  }
code:
code:	$variables{$vtable}{'code-parser-sections'}{'processed'}
code:
code:	  ${vtable}_add(StorageTmp);
code:	    
#code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	  DEBUGMSGTL((\"$vtable\", \"done.\\n\"));
code:	}
code:
code:
code:	/*
code:	 * store_$vtable():
code:	 *   stores .conf file entries needed to configure the mib.
code:	 */
code:	int
code:	store_$vtable(int majorID, int minorID, void *serverarg, void *clientarg) {
code:	  char line[SNMP_MAXBUF];
code:	  char *cptr;
code:	  size_t tmpint;
code:	  struct ${vtable}_data *StorageTmp;
code:	  struct header_complex_index *hcindex;
code:
#code:	  DEBUGMSGTL((\"$mibName\", \"storing data...  \"));
code:	  DEBUGMSGTL((\"$vtable\", \"storing data...  \"));
code:
code:	  for(hcindex=${vtable}Storage; hcindex != NULL; 
code:	      hcindex = hcindex->next) {
code:	    StorageTmp = (struct ${vtable}_data *) hcindex->data;
code:
code:	/*   XXX:  if (StorageTmp->${vtable}StorageType == ST_NONVOLATILE) { */
code:
code:	        memset(line,0,sizeof(line));
code:	        strcat(line, \"$vtable \");
code:	        cptr = line + strlen(line);
code:
code:	$variables{$vtable}{'code-persistent-sections'}{'processed'}
code:
code:	    snmpd_store_config(line);
code:	/*   } */
code:	  }
#code:	  DEBUGMSGTL((\"$mibName\", \"done.\\n\"));
code:	  DEBUGMSGTL((\"$vtable\", \"done.\\n\"));
code:	  return SNMPERR_SUCCESS;
code:	}

# individual sections for the parser
type:		code-parser-sections
process:	code-parser-sections
#skipif:		$mib->{'access'} =~ /NoAccess/
skipif:			$mib->{'label'} =~ /(Entry|Table)$/
code:	  line = read_config_read_data($variables{$mib->{type}}{asnType}, line, &StorageTmp->$name, &" . eval ("\"$variables{$mib->{type}}{varlenname}\"") . ");
code:	" . eval ("\"$variables{$mib->{type}}{vartest}\"") . "

#
# .conf persistent save Code per table
#
type:		code-persistent-sections
process:	code-persistent-sections
#skipif:		$mib->{'access'} =~ /NoAccess/
skipif:			$mib->{'label'} =~ /(Entry|Table)$/
code:	    cptr = read_config_store_data($variables{$mib->{type}}{asnType}, cptr, &StorageTmp->$name, &" . eval ("\"$variables{$mib->{type}}{varlenname}\"") . ");

#
# Code code per table
#
type:		code-var_table
processtable:	code-var_table

code:	/**
code:	 * refresh_$vtable(): refresh $vtable
code:	 *
code:	 * Normally the values retrieved from the operating system are cached.
code:	 * When the agent receives a SIGPOLL from an open STREAMS configuration
code:	 * or administrative driver Stream, the STREAMS subsystem indicates to
code:	 * the agent that the cache has been invalidated and that it should
code:	 * reread tables from the STREAMS subsystem.  This function is used when
code:	 * the agent start for the first time, or after a SIGPOLL has been
code:	 * received (and a row or column has been requested).
code:	 */
code:	void
code:	refresh_$vtable(void)
code:	{
code:	  if (${vtable}_refresh == 0)
code:	    return;
code:	  ${vtable}_refresh = 0;
code:	
code:	  /* Here, update the table as required... */
code:	
code:	}
code:	
code:	/**
code:	 * refresh_${vtable}_row(): refresh $vtable row
code:	 *
code:	 * Normally the values retrieved from the operating system are cached.
code:	 * However, if a row contains temporal values, such as statistics
code:	 * counters, gauges, timestamps, or other transient columns, it may be
code:	 * necessary to refresh the row on some other basis, but normally only
code:	 * once per request.
code:	 */
code:	void
code:	refresh_${vtable}_row(struct ${vtable}_data *StorageTmp)
code:	{
code:	  if (StorageTmp->${vtable}_request == sa_request)
code:	    return;
code:	  StorageTmp->${vtable}_request = sa_request;
code:	}
code:	
code:	/*
code:	 * var_$vtable():
code:	 *   Handle this table separately from the scalar value case.
code:	 *   The workings of this are basically the same as for var_$mibName above.
code:	 */
code:	u_char *
code:	var_$vtable(struct variable *vp,
code:	    	    oid     *name,
code:	    	    size_t  *length,
code:	    	    int     exact,
code:	    	    size_t  *var_len,
code:	    	    WriteMethod **write_method)
code:	{
code:
code:	struct ${vtable}_data *StorageTmp = NULL;
code:
code:	  DEBUGMSGTL((\"$mibName\", \"var_$vtable: Entering...  \\n\"));
code:	
code:	  /* Make sure that the storage data does not need to be refreshed
code:	     before checking the header. */
code:	  refresh_$vtable();
code:	
code:	  /* This assumes you have registered all your data properly
code:	     with header_complex_add() somewhere before this. */
code:	  if ((StorageTmp =
code:	       header_complex(${vtable}Storage, vp,name,length,exact,
code:	                           var_len,write_method)) == NULL)
code:	    return NULL;
code:	
code:	  refresh_${vtable}_row(StorageTmp);
code:	
code:	  /* This is where we do the value assignments for the mib results. */
code:	
code:	  switch(vp->magic) {\n\n
code:	$variables{$vtable}{'code-case-statements'}{'processed'}
code:	    default:
code:	      ERROR_MSG(\"\");
code:	  }
code:	  return NULL;
code:	}


############################################################################
# case statement sections
############################################################################
type:		code-case-statements
process:	code-case-statements
skipif:		$mib->{'access'} =~ /NoAccess/ || ( $variables{$vroutine}{$name}{'isanindex'} == 1 && $variables{$vroutine}{$name}{'ismyindex'} != 1 )

code:		    case $NAME:
code:		        " . (($mib->{'access'} =~ /ReadWrite|WriteOnly|Create/) ? "*write_method = write_$mib->{label};" : "*write_method = NULL; /* read-only */") . "
code:		        *var_len = $variables{$mib->{'type'}}{'sizeofstart'}StorageTmp->$mib->{label}$variables{$mib->{'type'}}{'sizeofend'};
code:		        return (u_char *) $variables{$mib->{'type'}}{'storageret'}StorageTmp->$mib->{label};
code:		

############################################################################
# storage structure information
############################################################################
type:		variable-structure-info
process:	variable-structure-info
skipif:		$mib->{'access'} =~ /NoAccess/ || $variables{$name}{'myoid'} != 1
code:		" . sprintf("#define   %-20s  $count", $NAME) . "
code:		" . sprintf("  { %-20s, %-14s, %-6.6s, %s, %d, { %s } },", $NAME, $variables{$mib->{'type'}}{'asnType'}, $accessToUCD{$mib->{'access'}}, "var_$vroutine", $depth-1, $subid) . "

############################################################################
# write function definition, also appended to the end of the .c file.
############################################################################
#
# Header info: declair write functions for set processing
#
process:	code-write-func-decl
type:		code-write-func-decl
skipif:		$mib->{'access'} !~ /Write|Create/
code:		WriteMethod write_$name;
#
#
#
process:	code-config-scalar
type:		code-config-scalar
skipif:		$vroutine ne $mibName || $mib->{'access'} =~ /NoAccess/ || $variables{$vroutine}{$name}{'asanindex'} == 1
code:		line = read_config_read_data($variables{$mib->{type}}{asnType}, line, &StorageTmp->$name, &" . eval ("\"$variables{$mib->{type}}{varlenname}\"") . ");
#
# C code
#
type:		code-write-scalar-func
process:	code-write-scalar-func
skipif:		$vroutine ne $mibName || $mib->{'access'} !~ /Write|Create/
code:	int
code:	write_$name(int      action,
code:	            u_char   *var_val,
code:	            u_char   var_val_type,
code:	            size_t   var_val_len,
code:	            u_char   *statP,
code:	            oid      *name,
code:	            size_t    name_len)
code:	{
code:	  static $variables{$mib->{'type'}}{tmpvar} tmpvar;
code:	  struct ${vroutine}_data *StorageTmp = NULL;
code:	  DEBUGMSGTL((\"$mibName\", \"write_$name entering action=%d...  \\n\", action));
code:	  if ((StorageTmp =
code:	    ${vroutine}Storage) == NULL)
code:	      return SNMP_ERR_NOSUCHNAME; /* remove if you support creation here */
code:
code:	  switch ( action ) {
code:	        case RESERVE1:
code:	          if (var_val_type != $variables{$mib->{'type'}}{asnType}){
#code:	              fprintf(stderr, \"write to $name not $variables{$mib->{'type'}}{asnType}\\n\");
code:	              snmp_log(MY_FACILITY(LOG_NOTICE), \"write to $name not $variables{$mib->{'type'}}{asnType}\\n\");
code:	              return SNMP_ERR_WRONGTYPE;
code:	          }
code:	          if (var_val_len > sizeof($variables{$mib->{'type'}}{tmpvar})) {
code:	              snmp_log(MY_FACILITY(LOG_NOTICE), \"write to $name: bad length\\n\");
code:	              return SNMP_ERR_WRONGLENGTH;
code:	          }
code:	          /* Note: " . (defined $mib->{'defaultValue'} ? "default value $mib->{'defaultValue'}" : "no default") . " */
code:	          /* Note: ranges " . eval{ my ($e, $x); foreach $e (@{$mib->{'ranges'}}) { $x .= " $e->{low}..$e->{high}"; } if ($x eq "") { $x = "(none)"; } $x; } . " */
#code:	          if ((tmpvar = *(($variables{$mib->{'type'}}{tmpvar} *) var_val)) < 0) {
#code:	              snmp_log(MY_FACILITY(LOG_NOTICE), \"write to $name: bad value %d\\n\",
#code:	                       (int) tmpvar);
#code:	              return SNMP_ERR_WRONGVALUE;
#code:	          }
code:	          break;
code:
code:	        case RESERVE2:
code:	             /* memory reseveration, final preparation... */
code:	          break;
code:
code:	        case FREE:
code:	             /* Release any resources that have been allocated */
code:	          break;
code:
code:	        case ACTION:
code:	             /* The variable has been stored in $variables{$mib->{'type'}}{variable} for
code:	             you to use, and you have just been asked to do something with
code:	             it.  Note that anything done here must be reversable in the UNDO case */
code:		".eval ("\"$variables{$mib->{type}}{action}\"")."
code:	          break;
code:
code:	        case UNDO:
code:	             /* Back out any changes made in the ACTION case */
code:		".eval ("\"$variables{$mib->{type}}{undo}\"")."
code:	          break;
code:
code:	        case COMMIT:
code:	        {
code:	             /* Things are working well, so it's now safe to make the change
code:	             permanently.  Make sure that anything done here can't fail! */
code:		".eval ("\"$variables{$mib->{'type'}}{'commit'}\"")."
code:	          break;
code:	        }
code:	  }
code:	  return SNMP_ERR_NOERROR;
code:	}
code:
#
# C code
#
type:		code-write-func
process:	code-write-func
skipif:		$vroutine eq $mibName || $mib->{'textualConvention'} eq "RowStatus" || $mib->{'access'} !~ /Write|Create/
code:	int
code:	write_$name(int      action,
code:	            u_char   *var_val,
code:	            u_char   var_val_type,
code:	            size_t   var_val_len,
code:	            u_char   *statP,
code:	            oid      *name,
code:	            size_t    name_len)
code:	{
code:	  static $variables{$mib->{'type'}}{tmpvar} tmpvar;
code:	  struct ${vroutine}_data *StorageTmp = NULL;
code:	  static size_t tmplen;
code:	  size_t newlen=name_len - (sizeof(${mibName}_variables_oid)/sizeof(oid) + $depth - 1);
code:
code:	  (void) tmplen; /* not always used */
code:	  DEBUGMSGTL((\"$mibName\", \"write_$name entering action=%d...  \\n\", action));
code:	  if ((StorageTmp =
code:	       header_complex(${vroutine}Storage, NULL,
code:	                      &name[sizeof(${mibName}_variables_oid)/sizeof(oid) + $depth - 1], 
code:	                      &newlen, 1, NULL, NULL)) == NULL)
code:	      return SNMP_ERR_NOSUCHNAME; /* remove if you support creation here */
code:
code:	  switch ( action ) {
code:	        case RESERVE1:
code:	          if (var_val_type != $variables{$mib->{'type'}}{asnType}){
#code:	              fprintf(stderr, \"write to $name not $variables{$mib->{'type'}}{asnType}\\n\");
code:	              snmp_log(MY_FACILITY(LOG_NOTICE), \"write to $name not $variables{$mib->{'type'}}{asnType}\\n\");
code:	              return SNMP_ERR_WRONGTYPE;
code:	          }
code:	          break;
code:
code:	        case RESERVE2:
code:	             /* memory reseveration, final preparation... */
code:	          break;
code:
code:	        case FREE:
code:	             /* Release any resources that have been allocated */
code:	          break;
code:
code:	        case ACTION:
code:	             /* The variable has been stored in $variables{$mib->{'type'}}{variable} for
code:	             you to use, and you have just been asked to do something with
code:	             it.  Note that anything done here must be reversable in the UNDO case */
code:		".eval ("\"$variables{$mib->{type}}{action}\"")."
code:	          break;
code:
code:	        case UNDO:
code:	             /* Back out any changes made in the ACTION case */
code:		".eval ("\"$variables{$mib->{type}}{undo}\"")."
code:	          break;
code:
code:	        case COMMIT:
code:	        {
code:	             /* Things are working well, so it's now safe to make the change
code:	             permanently.  Make sure that anything done here can't fail! */
code:		".eval ("\"$variables{$mib->{'type'}}{'commit'}\"")."
code:	          break;
code:	        }
code:	  }
code:	  return SNMP_ERR_NOERROR;
code:	}
code:
code:
############################################################################
# copy memory from varlist
############################################################################
type:		code-varlist-copy
process:	code-varlist-copy
skipif:		$variables{$vroutine}{$name}{'isanindex'} != 1
code:	            ".eval("\"$variables{$mib->{type}}{action2}\"")."
code:	            vp = vp->next_variable;
#code:	            memdup((void *) &(StorageNew->$name), 
#code:	                   vp->val.$variables{$mib->{'type'}}{varlisttype},
#code:	                   vp->val.string,
#code:	                   vp->val_len);
#code:	            StorageNew->${name}Len = vp->val_len;
############################################################################
# fill out default values in row
############################################################################
type:		code-default-values
process:	code-default-values
skipif:		!$mib->{'defaultValue'}
code:		".eval("\"$variables{$mib->{type}}{action3}\"")."
############################################################################
# add null pointers to a varlist; value to be parsed later
############################################################################
type:		code-varlist-add-null
process:	code-varlist-add-null
skipif:		$variables{$vroutine}{$name}{'isanindex'} != 1
code:	  	  snmp_varlist_add_variable(&vars, NULL, 0, $variables{$mib->{'type'}}{asnType}, NULL, 0); /* $name */
############################################################################
# write function definition for a RowStatus object, 
#   - allows for creation/deletion.
############################################################################
#
# Header info: declair write functions for set processing
#
process:	code-write-rowstatus-decl
type:		code-write-rowstatus-decl
skipif:		$mib->{'textualConvention'} ne "RowStatus"
code:		WriteMethod write_$name;
#
#
#
process:	code-write-rowstatus-oid
type:		code-write-rowstatus-oid
skipif:		$mib->{'textualConvention'} ne "RowStatus"
code:		oid ${vroutine}_variables_oid[] = { " .( stripone dotstocomma $mib->{'objectID'} ). " };
#
# code
#
type:		code-write-rowstatus
process:	code-write-rowstatus
skipif:		$mib->{'textualConvention'} ne "RowStatus"
code:	int
code:	write_$name(int      action,
code:	            u_char   *var_val,
code:	            u_char   var_val_type,
code:	            size_t   var_val_len,
code:	            u_char   *statP,
code:	            oid      *name,
code:	            size_t    name_len)
code:	{
code:	  struct ${vroutine}_data *StorageTmp = NULL;
code:	  static struct ${vroutine}_data *StorageNew, *StorageDel;
code:	  size_t newlen=name_len - (sizeof(${vroutine}_variables_oid)/sizeof(oid) + 3 - 1);
code:	  static int old_value;
code:	  int set_value;
code:	  static struct variable_list *vars, *vp;
code:	  struct header_complex_index *hciptr;
#code:	  char who[MAX_OID_LEN], flagName[MAX_OID_LEN];
code:
code:	  StorageTmp =
code:	    header_complex(${vroutine}Storage, NULL,
code:	                   &name[sizeof(${vroutine}_variables_oid)/sizeof(oid) + 3 - 1], 
code:	                   &newlen, 1, NULL, NULL);
code:	  
code:	  
code:	  if (var_val_type != ASN_INTEGER || var_val == NULL){
#code:	    fprintf(stderr, \"write to $name not ASN_INTEGER\\n\");
code:	    snmp_log(MY_FACILITY(LOG_NOTICE), \"write to $name not ASN_INTEGER\\n\");
code:	    return SNMP_ERR_WRONGTYPE;
code:	  }
code:	  set_value = *((int *) var_val);
code:
code:	  /* check legal range, and notReady is reserved for us, not a user */
code:	  if (set_value < 1 || set_value > 6 || set_value == RS_NOTREADY)
code:	    return SNMP_ERR_INCONSISTENTVALUE;
code:	    
code:	  switch ( action ) {
code:	        case RESERVE1:
code:		  /* stage one: test validity */
code:	          if (StorageTmp == NULL) {
code:	            /* create the row now? */
code:
code:	            /* ditch illegal values now */
code:	            if (set_value == RS_ACTIVE || set_value == RS_NOTINSERVICE)
code:	              return SNMP_ERR_INCONSISTENTVALUE;
code:	    
code:	            /* destroying a non-existent row is actually legal */
code:	            if (set_value == RS_DESTROY) {
code:	              return SNMP_ERR_NOERROR;
code:	            }
code:
code:	            /* illegal creation values */
code:	            if (set_value == RS_ACTIVE || set_value == RS_NOTINSERVICE) {
code:	              return SNMP_ERR_INCONSISTENTVALUE;
code:	            }
code:	          } else {
code:	            /* row exists.  Check for a valid state change */
code:	            if (set_value == RS_CREATEANDGO || set_value == RS_CREATEANDWAIT) {
code:	              /* can't create a row that exists */
code:	              return SNMP_ERR_INCONSISTENTVALUE;
code:	            }
code:		    /* XXX: interaction with row storage type needed */
code:	          }
code:	          break;
code:
code:
code:	        case RESERVE2:
code:	          /* memory reseveration, final preparation... */
code:	          if (StorageTmp == NULL) {
code:	            /* creation */
code:	            vars = NULL;
code:
code:	$variables{$vroutine}{'code-varlist-add-null'}{'processed'}
code:	                    
code:	            if (header_complex_parse_oid(&(name[sizeof(${vroutine}_variables_oid)/sizeof(oid)+2]), newlen,
code:	                                         vars) != SNMPERR_SUCCESS) {
code:	              /* XXX: free, zero vars */
code:	              return SNMP_ERR_INCONSISTENTNAME;
code:	            }
code:	            vp = vars;
code:
code:	            StorageNew = SNMP_MALLOC_STRUCT(${vroutine}_data);
code:	$variables{$vroutine}{'code-varlist-copy'}{'processed'}
code:
code:
code:	            /* XXX: fill in default row values here into StorageNew */
code:
code:	$variables{$vroutine}{'code-default-values'}{'processed'}
code:
code:	            StorageNew->$name = set_value;
code:	            /* XXX: free, zero vars, no longer needed? */
code:	          }
code:	          
code:	          break;
code:
code:
code:	        case FREE:
code:	          /* XXX: free, zero vars */
code:	          /* Release any resources that have been allocated */
code:	          break;
code:
code:
code:	        case ACTION:
code:	             /* The variable has been stored in set_value for you to
code:	             use, and you have just been asked to do something with
code:	             it.  Note that anything done here must be reversable in
code:	             the UNDO case */
code:	             
code:	             if (StorageTmp == NULL) {
code:	               /* row creation, so add it */
code:	               if (StorageNew != NULL)
code:	                 ${vroutine}_add(StorageNew);
code:	               /* XXX: ack, and if it is NULL? */
code:	             } else if (set_value != RS_DESTROY) {
code:	               /* set the flag? */
code:	               old_value = StorageTmp->$name;
code:	               StorageTmp->$name = *((int *) var_val);
code:	             } else {
code:	               /* destroy...  extract it for now */
code:	               hciptr =
code:	                 header_complex_find_entry(${vroutine}Storage,
code:	                                           StorageTmp);
code:	               StorageDel =
code:	                 header_complex_extract_entry(&${vroutine}Storage,
code:	                                              hciptr);
code:	             }
code:	          break;
code:
code:
code:	        case UNDO:
code:	             /* Back out any changes made in the ACTION case */
code:	             if (StorageTmp == NULL) {
code:	               /* row creation, so remove it again */
code:	               hciptr =
code:	                 header_complex_find_entry(${vroutine}Storage,
code:	                                           StorageTmp);
code:	               StorageDel =
code:	                 header_complex_extract_entry(&${vroutine}Storage,
code:	                                              hciptr);
code:	               /* XXX: free it */
code:	             } else if (StorageDel != NULL) {
code:	               /* row deletion, so add it again */
code:	               ${vroutine}_add(StorageDel);
code:	             } else {
code:	               StorageTmp->$name = old_value;
code:	             }
code:	          break;
code:
code:
code:	        case COMMIT:
code:	        {
code:	             /* Things are working well, so it's now safe to make the change
code:	             permanently.  Make sure that anything done here can't fail! */
code:	          if (StorageDel != NULL) {
code:	            StorageDel = 0;
code:	            /* XXX: free it, its dead */
code:	          } else {
code:	            if (StorageTmp && StorageTmp->$name == RS_CREATEANDGO) {
code:	                StorageTmp->$name = RS_ACTIVE;
code:	            } else if (StorageTmp &&
code:	                       StorageTmp->$name == RS_CREATEANDWAIT) {
code:	                StorageTmp->$name = RS_NOTINSERVICE;
code:	            }
code:	          }
code:	          break;
code:	        }
code:	  }
code:	  return SNMP_ERR_NOERROR;
code:	}
code:
