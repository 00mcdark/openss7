/*****************************************************************************

 @(#) $Id: m2paMIB.h,v 0.9.2.4 2009-01-03 10:50:58 brian Exp $

 -----------------------------------------------------------------------------

 Copyright (c) 2008-2009  Monavacom Limited <http://www.monavacom.com/>
 Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
 Copyright (c) 1997-2001  Brian F. G. Bidulock <bidulock@openss7.org>

 All Rights Reserved.

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; version 3 of the License.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>, or
 write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
 02139, USA.

 -----------------------------------------------------------------------------

 U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software on
 behalf of the U.S. Government ("Government"), the following provisions apply
 to you.  If the Software is supplied by the Department of Defense ("DoD"), it
 is classified as "Commercial Computer Software" under paragraph 252.227-7014
 of the DoD Supplement to the Federal Acquisition Regulations ("DFARS") (or any
 successor regulations) and the Government is acquiring only the license rights
 granted herein (the license rights customarily provided to non-Government
 users).  If the Software is supplied to any unit or agency of the Government
 other than DoD, it is classified as "Restricted Computer Software" and the
 Government's rights in the Software are defined in paragraph 52.227-19 of the
 Federal Acquisition Regulations ("FAR") (or any successor regulations) or, in
 the cases of NASA, in paragraph 18.52.227-86 of the NASA Supplement to the FAR
 (or any successor regulations).

 -----------------------------------------------------------------------------

 Commercial licensing and support of this software is available from OpenSS7
 Corporation at a fee.  See http://www.openss7.com/

 -----------------------------------------------------------------------------

 Last Modified $Date: 2009-01-03 10:50:58 $ by $Author: brian $

 -----------------------------------------------------------------------------

 $Log: m2paMIB.h,v $
 Revision 0.9.2.4  2009-01-03 10:50:58  brian
 - updated agent

 Revision 0.9.2.3  2009-01-02 15:04:08  brian
 - updated agents

 Revision 0.9.2.2  2008-12-31 16:04:40  brian
 - updated mibs

 Revision 0.9.2.1  2008-12-27 10:01:52  brian
 - updated mibs and stubs

 *****************************************************************************/

#ifndef __LOCAL_M2PAMIB_H__
#define __LOCAL_M2PAMIB_H__

#ident "@(#) $RCSfile: m2paMIB.h,v $ $Name:  $($Revision: 0.9.2.4 $) Copyright (c) 2008-2009 Monavacom Limited."

/*
 * This file was generated by mib2c and is intended for use as a mib module
 * for the ucd-snmp snmpd agent.
 */
/* our storage structure(s) */
struct m2paMIB_data {
	uint m2paMIB_request;
	long m2paDefaultSctpNoDelay;
	ulong m2paDefaultSctpMaxseg;
	long m2paDefaultSctpHeartbeatItvl;
	long m2paDefaultSctpHeartbeat;
	long m2paDefaultSctpRtoInitial;
	long m2paDefaultSctpRtoMin;
	long m2paDefaultSctpRtoMax;
	ulong m2paDefaultSctpPathMaxRetrans;
	long m2paDefaultSctpCookieLife;
	long m2paDefaultSctpCookieInc;
	ulong m2paDefaultSctpMaxInitRetries;
	ulong m2paDefaultSctpMaxBurst;
	ulong m2paDefaultSctpAssocMaxRetrans;
	long m2paDefaultSctpSackDelay;
	long m2paDefaultSctpLifetime;
};
struct m2paProtocolProfileTable_data {
	uint m2paProtocolProfileTable_request;
	uint m2paProtocolProfileTable_refs;
	uint8_t *m2paProtocolProfileId;
	size_t m2paProtocolProfileIdLen;
	ulong m2paN1;
	long m2paProving;
	long m2paManagementProvingState;
	long m2paLoopDelayLower;
	long m2paLoopDelayUpper;
	ulong m2paTransmissionRateIntervalLower;
	ulong m2paTransmissionRateIntervalUpper;
	long m2paSctpNoDelay;
	ulong m2paSctpMaxseg;
	long m2paSctpHeartbeatItvl;
	long m2paSctpHeartbeat;
	long m2paSctpRtoInitial;
	long m2paSctpRtoMin;
	long m2paSctpRtoMax;
	ulong m2paSctpPathMaxRetrans;
	long m2paSctpCookieLife;
	long m2paSctpCookieInc;
	ulong m2paSctpMaxInitRetries;
	ulong m2paSctpMaxBurst;
	ulong m2paSctpAssocMaxRetrans;
	long m2paSctpSackDelay;
	long m2paSctpLifetime;
	long m2paTimerT1;
	long m2paTimerT2;
	long m2paTimerT2L;
	long m2paTimerT2H;
	long m2paTimerT3;
	long m2paTimerT4N;
	long m2paTimerT4E;
	long m2paTimerT6;
	long m2paTimerT7;
	ulong m2paTransCongThresholdAbatementL1Messages;
	ulong m2paTransCongThresholdAbatementL1Octets;
	ulong m2paTransCongThresholdOnsetL1Messages;
	ulong m2paTransCongThresholdOnsetL1Octets;
	ulong m2paProvingAttempts;
	ulong m2paNumberOfThresholdLevels;
	long m2paCongestionCounting;
	long m2paCongestionReportingBaseObject;
	long m2paTimerTx;
	long m2paTimerTy;
	ulong m2paNumberOfCongestionStates;
	ulong m2paInitialLevelOfCongestion;
	ulong m2paReceiveCongestionThresholdAbatement;
	ulong m2paReceiveCongestionThresholdOnset;
	ulong m2paReceiveCongestionThresholdDiscard;
	uint8_t *m2paProtocolProfileName;
	size_t m2paProtocolProfileNameLen;
	ulong m2paTransCongThresholdAbatementL2Messages;
	ulong m2paTransCongThresholdAbatementL2Octets;
	ulong m2paTransCongThresholdOnsetL2Messages;
	ulong m2paTransCongThresholdOnsetL2Octets;
	ulong m2paTransCongThresholdAbatementL3Messages;
	ulong m2paTransCongThresholdAbatementL3Octets;
	ulong m2paTransCongThresholdOnsetL3Messages;
	ulong m2paTransCongThresholdOnsetL3Octets;
	ulong m2paTransCongThresholdDiscardL1Messages;
	ulong m2paTransCongThresholdDiscardL1Octets;
	ulong m2paTransCongThresholdDiscardL2Messages;
	ulong m2paTransCongThresholdDiscardL2Octets;
	ulong m2paTransCongThresholdDiscardL3Messages;
	ulong m2paTransCongThresholdDiscardL3Octets;
	long m2paProtocolProfileRowStatus;
};

/* storage declarations */
extern struct m2paMIB_data *m2paMIBStorage;
extern struct header_complex_index *m2paProtocolProfileTableStorage;

/* enum definitions from the covered mib sections */

#define M2PAPROVING_TRUE                         1
#define M2PAPROVING_FALSE                        2

#define M2PAMANAGEMENTPROVINGSTATE_NORMAL        0
#define M2PAMANAGEMENTPROVINGSTATE_EMERGENCY     1
#define M2PAMANAGEMENTPROVINGSTATE_NEUTRAL       2

#define M2PASCTPNODELAY_TRUE                     1
#define M2PASCTPNODELAY_FALSE                    2

#define M2PASCTPHEARTBEAT_TRUE                   1
#define M2PASCTPHEARTBEAT_FALSE                  2

#define M2PACONGESTIONCOUNTING_OCTET             0
#define M2PACONGESTIONCOUNTING_MESSAGE           1
#define M2PACONGESTIONCOUNTING_BOTH              2

#define M2PACONGESTIONREPORTINGBASEOBJECT_ROUTESET 0
#define M2PACONGESTIONREPORTINGBASEOBJECT_LINKSETOFCONGESTEDROUTESET 1
#define M2PACONGESTIONREPORTINGBASEOBJECT_LINKOFCONGESTEDROUTESET 2
#define M2PACONGESTIONREPORTINGBASEOBJECT_CONGESTEDLINKOFCONGESTEDROUTE 3

#define M2PADEFAULTSCTPNODELAY_TRUE              1
#define M2PADEFAULTSCTPNODELAY_FALSE             2

#define M2PADEFAULTSCTPHEARTBEAT_TRUE            1
#define M2PADEFAULTSCTPHEARTBEAT_FALSE           2

/* notifications */

/* scalars accessible only for notify */

/* object id definitions */

/* function prototypes */
void init_m2paMIB(void);
void deinit_m2paMIB(void);
int term_m2paMIB(int majorID, int minorID, void *serverarg, void *clientarg);
FindVarMethod var_m2paMIB;
void parse_m2paMIB(const char *, char *);
SNMPCallback store_m2paMIB;
void refresh_m2paMIB(void);
FindVarMethod var_m2paProtocolProfileTable;
struct m2paProtocolProfileTable_data *m2paProtocolProfileTable_create(void);
struct m2paProtocolProfileTable_data *m2paProtocolProfileTable_duplicate(struct m2paProtocolProfileTable_data *);
int m2paProtocolProfileTable_destroy(struct m2paProtocolProfileTable_data **);
int m2paProtocolProfileTable_add(struct m2paProtocolProfileTable_data *);
int m2paProtocolProfileTable_del(struct m2paProtocolProfileTable_data *);
void parse_m2paProtocolProfileTable(const char *, char *);
SNMPCallback store_m2paProtocolProfileTable;
void refresh_m2paProtocolProfileTable(void);

WriteMethod write_m2paN1;
WriteMethod write_m2paProving;
WriteMethod write_m2paManagementProvingState;
WriteMethod write_m2paLoopDelayLower;
WriteMethod write_m2paLoopDelayUpper;
WriteMethod write_m2paTransmissionRateIntervalLower;
WriteMethod write_m2paTransmissionRateIntervalUpper;
WriteMethod write_m2paSctpNoDelay;
WriteMethod write_m2paSctpMaxseg;
WriteMethod write_m2paSctpHeartbeatItvl;
WriteMethod write_m2paSctpHeartbeat;
WriteMethod write_m2paSctpRtoInitial;
WriteMethod write_m2paSctpRtoMin;
WriteMethod write_m2paSctpRtoMax;
WriteMethod write_m2paSctpPathMaxRetrans;
WriteMethod write_m2paSctpCookieLife;
WriteMethod write_m2paSctpCookieInc;
WriteMethod write_m2paSctpMaxInitRetries;
WriteMethod write_m2paSctpMaxBurst;
WriteMethod write_m2paSctpAssocMaxRetrans;
WriteMethod write_m2paSctpSackDelay;
WriteMethod write_m2paSctpLifetime;
WriteMethod write_m2paTimerT1;
WriteMethod write_m2paTimerT2;
WriteMethod write_m2paTimerT2L;
WriteMethod write_m2paTimerT2H;
WriteMethod write_m2paTimerT3;
WriteMethod write_m2paTimerT4N;
WriteMethod write_m2paTimerT4E;
WriteMethod write_m2paTimerT6;
WriteMethod write_m2paTimerT7;
WriteMethod write_m2paTransCongThresholdAbatementL1Messages;
WriteMethod write_m2paTransCongThresholdAbatementL1Octets;
WriteMethod write_m2paTransCongThresholdOnsetL1Messages;
WriteMethod write_m2paTransCongThresholdOnsetL1Octets;
WriteMethod write_m2paProvingAttempts;
WriteMethod write_m2paNumberOfThresholdLevels;
WriteMethod write_m2paCongestionCounting;
WriteMethod write_m2paCongestionReportingBaseObject;
WriteMethod write_m2paTimerTx;
WriteMethod write_m2paTimerTy;
WriteMethod write_m2paNumberOfCongestionStates;
WriteMethod write_m2paInitialLevelOfCongestion;
WriteMethod write_m2paReceiveCongestionThresholdAbatement;
WriteMethod write_m2paReceiveCongestionThresholdOnset;
WriteMethod write_m2paReceiveCongestionThresholdDiscard;
WriteMethod write_m2paProtocolProfileName;
WriteMethod write_m2paTransCongThresholdAbatementL2Messages;
WriteMethod write_m2paTransCongThresholdAbatementL2Octets;
WriteMethod write_m2paTransCongThresholdOnsetL2Messages;
WriteMethod write_m2paTransCongThresholdOnsetL2Octets;
WriteMethod write_m2paTransCongThresholdAbatementL3Messages;
WriteMethod write_m2paTransCongThresholdAbatementL3Octets;
WriteMethod write_m2paTransCongThresholdOnsetL3Messages;
WriteMethod write_m2paTransCongThresholdOnsetL3Octets;
WriteMethod write_m2paTransCongThresholdDiscardL1Messages;
WriteMethod write_m2paTransCongThresholdDiscardL1Octets;
WriteMethod write_m2paTransCongThresholdDiscardL2Messages;
WriteMethod write_m2paTransCongThresholdDiscardL2Octets;
WriteMethod write_m2paTransCongThresholdDiscardL3Messages;
WriteMethod write_m2paTransCongThresholdDiscardL3Octets;
WriteMethod write_m2paProtocolProfileRowStatus;
WriteMethod write_m2paDefaultSctpNoDelay;
WriteMethod write_m2paDefaultSctpMaxseg;
WriteMethod write_m2paDefaultSctpHeartbeatItvl;
WriteMethod write_m2paDefaultSctpHeartbeat;
WriteMethod write_m2paDefaultSctpRtoInitial;
WriteMethod write_m2paDefaultSctpRtoMin;
WriteMethod write_m2paDefaultSctpRtoMax;
WriteMethod write_m2paDefaultSctpPathMaxRetrans;
WriteMethod write_m2paDefaultSctpCookieLife;
WriteMethod write_m2paDefaultSctpCookieInc;
WriteMethod write_m2paDefaultSctpMaxInitRetries;
WriteMethod write_m2paDefaultSctpMaxBurst;
WriteMethod write_m2paDefaultSctpAssocMaxRetrans;
WriteMethod write_m2paDefaultSctpSackDelay;
WriteMethod write_m2paDefaultSctpLifetime;
#endif				/* __LOCAL_M2PAMIB_H__ */
