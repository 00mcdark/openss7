'\" rtp
.\" -*- nroff -*- vim: ft=nroff
.\"
.\" @(#) $Id: freezestr.9.man,v 0.9 2004/03/01 02:44:10 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (C) 2001-2003  OpenSS7 Corporation <www.openss7.com>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any success
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2004/03/01 02:44:10 $ by $Author: brian $
.\"
.\" =========================================================================
.so streams.macros
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database streams.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.\"
.\"
.TH FREEZESTR 9 "$Date: 2004/03/01 02:44:10 $" "$Name:  $" "Linux Fast-STREAMS DDI/DKI"
.\"
.\"
.SH NAME
.B freezestr
\- freeze the state of a stream queue
.\"
.\"
.SH SYNOPSIS
.PP
.B #undef _SOL_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.HP
.BI "pl_t freezestr(queue_t *" q );
.sp 2
.PP
.B #define _SOL_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.HP
.BI "void freezestr(queue_t *" q );
.\"
.\"
.SH ARGUMENTS
.TP
.I q
the queue (and indirectly the stream) to freeze.
.\"
.\"
.SH DESCRIPTION
.PP
.BR freezestr ()
freezes the state of the queue,
.IR q,
and the stream containing
.IR q .
A queue cannot be altered while frozen.
The purpose of
.BR freezestr ()
is to lock the state of the
.I q
so that its members can be accessed directly.
.PP
.BR freezestr ()
blocks entry to all queue procedures,
.BR qopen (9)
.BR qclose (9),
.BR put (9)
and
.BR srv (9),
and all synchronous callbacks,
.BR qtimeout (9),
.BR qbufcall (9),
.BR qwriter (9),
.BR mi_bufcall (9),
.BR streams_put (9),
.BR weldq (9),
.BR unweldq (9),



.BR freezestr ()
waits until all other threads in
.BR qopen (9),
.BR qclose (9),
.BR put (9)
and
.BR srv (9)
procedures,
.BR qbufcall (9)
and
.BR qtimeout (9)
callback functions,
and
.BR qwriter (9)
callouts functions
in the stream containing
.I q
exit.
.BR freezestr ()
then locks the stream so that all other threads will be blocked from entering
those functions with the exception of the current thread.
.PP
In addition, the queue specified by
.I q
is locked and all other threads will be blocked from executing queue
manipulation functions
.BR appq (9),
.BR bcanget (9),
.BR bcanput (9),
.BR canget (9),
.BR canput (9),
.BR flushband (9),
.BR flushq (9),
.BR getq (9),
.BR insq (9),
.BR putbq (9),
.BR putq (9),
.BR rmvq (9),
.BR setq (9),
.BR strqget (9)
and
.BR strqset (9)
for the locked queue (including the calling thread) and local interrupts will
be supressed.
.PP
A procedure that freezes as stream queue with
.BR freezestr ()
must thaw the stream queue with
.BR unfreezestr (9)
before returning.
.\"
.\"
.SH RETURN
.PP
For compatiblity with
.BR Solaris \(rg,
.[
solspg
.]
if
.B _SOL_SOURCE
is defined before including the
.I stream.h
and
.I ddi.h
headers, 
.BR freezestr ()
returns
.BR void .
.PP
For compatibility with
.BR SUPER-UX \(rg
.[
suxspg
.]
and
.BR UnixWare \(rg,
.[
uw7spg
.]
if
.B _SOL_SOURCE
is undefined before including the
.I stream.h
and
.I ddi.h
headers,
.BR freezestr ()
returns a
.B pl_t
priority level to be supplied to
.BR unfreezestr (9).
.\"
.\"
.SH ERRORS
.PP
.BR freezestr ()
always succeeds.
.\"
.\"
.SH CONTEXT
.PP
.BR freezestr ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts and interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR freezestr ()
is MP-safe; however,
the caller is responsible for the validity of the reference
.IR q .
References to
.I q
from a procedure, callout or callback predicated on the queue pair to which
.I q
belongs
are guaranteed valid.
The caller must guarantee validity from call outs, callbacks, soft interrupts
and interrupt service routines not predicated on the queue pair to which
.I q
belongs.
.\"
.\"
.SH NOTICES
.PP
.BR freezestr ()
does not block or synchronize with
.BR bufcall (9),
.BR esbbcall (9),
or
.BR timeout (9)
callback functions.  Separate means are required to ensure exclusion of those
functions.
.PP
.BR freezestr ()
does not affect the operation of
.BR qprocson (9)
and
.BR qprocsoff (9)
which are separate facilities.
.PP
Calling
.BR freezestr ()
from any context will disable local interrupts on the calling processor.  As
local interrupts will remain disabled until
.BR unfreezestr (9)
is called, the period for which a driver or module freezes a stream is
critical and has an impact on system performance.
.PP
.BR freezestr ()
called twice for the same queue will result in single-party deadlock of the
calling processor.
.PP
The caller must not call queue
.I STREAMS
utility functions that manipulate queue state.  These functions include
.BR bcanget (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR canget (9),
.BR canput (9),
.BR canputnext (9),
.BR enableok (9),
.BR flushband (9),
.BR flushq (9),
.BR getq (9),
.BR noenable (9),
.BR put (9),
.BR putbq (9),
.BR putq (9),
.BR qcountstrm (9),
.BR qenable (9),
.BR qprocsoff (9),
.BR qprocson (9),
.BR qreply (9),
.BR qsize (9),
.BR SAMESTR (9).
.\".BR appq (9),
.\".BR insq (9),
.\".BR rmvq (9),
.\".BR setq (9),
.\".BR strqget (9),
.\".BR strqset (9).
Calling these functions with a frozen queue will result in single-party
deadlock of the calling processor.
.PP
.BR freezestr ()
called with a private queue pair allocated with
.BR allocq (9)
will only lock the queue and cannot freeze the stream or block procedures,
callouts and callbacks.  It cannot prevent
.I q->q_next
from being changed.  For private queue pairs, it is the caller's
responsibility to protect the queue linkage and synchronize procedures.
.PP
The
.I q->q_flag
member is never protected against writes by freezing the stream.  The
.I q->q_flag
member must be considered a read-only field or must be accessed with atomic
bit operations.
.PP
A procedure calling
.BR freezestr ()
and returning without calling
.BR unfreezestr (9)
will indefinitely postpone interrupts on the calling processor, manipulation
of the stream (qopen, qclose), and and queue procedures (insq, rmvq) on the
frozen queue.
.\"
.\"
.SH EXAMPLES
.PP
Following is an example (but not a terribly useful one) of the use of
.BR freezestr ():
.sp
.nf
\fC\s-2\
...
freezestr(q);
{
   if ((mp = q->q_first) &&
       mp->b_datap->db_type == M_PCPROTO &&
       *((ulong *) mp->b_rptr) == T_INFO_ACK && !mp->b_next)
      qenable(q);
}
unfreezestr(q);
...
\fC\s+2
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR allocq (9)
.BR appq (9),
.BR bcanget (9),
.BR bcanput (9),
.BR bcanputnext (9),
.BR bufcall (9),
.BR canget (9),
.BR canput (9),
.BR canputnext (9),
.BR enableok (9),
.BR esbbcall (9),
.BR flushband (9),
.BR flushq (9),
.BR getq (9),
.BR insq (9),
.BR noenable (9),
.BR put (9)
.BR putbq (9),
.BR putq (9),
.BR qbufcall (9)
.BR qclose (9),
.BR qcountstrm (9),
.BR qenable (9),
.BR qopen (9),
.BR qprocsoff (9)
.BR qprocson (9)
.BR qreply (9),
.BR qsize (9),
.BR qtimeout (9)
.BR qwriter (9)
.BR rmvq (9),
.BR SAMESTR (9).
.BR setq (9),
.BR srv (9),
.BR STREAMS (9),
.BR strqget (9),
.BR strqset (9),
.BR timeout (9),
.BR unfreezestr (9).
.\"
.\"
.SH BUGS
.PP
.BR freezestr ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR freezestr ()
is compatible with
.BR "SVR 4.2 MP DDI/DKI"
.[
usldk
.]
and systems based on
.BR "SVR 4 MP" ,
with the following portability considerations:
.IP \(bu
.BR Solaris \(rg,
.[
solspg
.]
.BR SUPER-UX \(rg,
.[
suxspg
.]
and
.BR UnixWare \(rg,
.[
uw7spg
.]
provide this function.
.IP \(bu
.BR AIX \(rg,
.[
aixspg
.]
.BR HP-UP \(rg,
.[
hpuxspg
.]
.BR OSF \(rg,
.[
osfspg
.]
.BR UXP/V \(rg
.[
uxpspg
.]
and
.BR LiS
.[
lis
.]
do not provide this function.
.RB ( HP-UX \(rg
provides the symbols, but they do nothing.)
.IP \(bu
.BR Solaris \(rg
provides the function prototype:
.BI "void freezestr(queue_t *" q ).
All the others provide the prototype
.BI "pl_t freezestr(queue_t *" q ).
.IP \(bu
.B "SVR 4.2 MP DDI/DKI"
specifies that the following functions cannot be called on a frozen stream:
.BR bcanput (9),
.BR bcanputnext (9),
.BR canput (9),
.BR canputnext (9),
.BR enableok (9),
.BR flushband (9),
.BR flushq (9),
.BR getq (9),
.BR noenable (9),
.BR put (9),
.BR putb (9),
.BR putq (9),
.BR qenable (9),
.BR qprocsoff (9),
.BR qprocson (9),
.BR qreply (9),
.BR qsize (9),
.BR SAMESTR (9).
.IP \(bu
.BR "SVR 4.2 MP DDI/DKI"
specifies that the following functions must have the stream frozen across the
call:
.BR insq (9),
.BR rmvq (9),
.BR strqget (9),
.BR strqset (9).
.IP \(bu
Binary compatibility is not guaranteed.
.PP
See
.BR STREAMS (9)
for additional compatibility information.
.\"
.\"
.SH CONFORMANCE
.PP
SVR 4.2 MP DDI/DKI.
.[
usldk
.]
.\"
.\"
.SH HISTORY
.PP
A version of
.BR freezestr ()
first appeared in SVR 4 MP.
.[
svr42
.]
.\"
.\"
.[
$LIST$
.]
.TI
