'\" rtp
.\" -*- nroff -*- vim: ft=nroff nocin nosi
.\"
.\" @(#) $Id: mi_acquire.9.man,v 0.9.2.2 2008-04-28 16:47:03 brian Exp $
.\"
.\" =========================================================================
.\"
.\" Copyright (c) 2001-2008  OpenSS7 Corporation <http://www.openss7.com/>
.\"
.\" All Rights Reserved.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.  The author(s) will take no responsibility in it.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" -------------------------------------------------------------------------
.\"
.\" U.S. GOVERNMENT RESTRICTED RIGHTS.  If you are licensing this Software
.\" on behalf of the U.S. Government ("Government"), the following
.\" provisions apply to you.  If the Software is supplied by the Department
.\" of Defense ("DoD"), it is classified as "Commercial Computer Software"
.\" under paragraph 252.227-7014 of the DoD Supplement to the Federal
.\" Acquisition Regulations ("DFARS") (or any successor regulations) and the
.\" Government is acquiring only the license rights granted herein (the
.\" license rights customarily provided to non-Government users).  If the
.\" Software is supplied to any unit or agency of the Government other than
.\" DoD, it is classified as "Restricted Computer Software" and the
.\" Government's rights in the Software are defined in paragraph 52.227-19
.\" of the Federal Acquisition Regulations ("FAR") (or any successor
.\" regulations) or, in the cases of NASA, in paragraph 18.52.227-86 of the
.\" NASA Supplement to the FAR (or any successor regulations).
.\"
.\" =========================================================================
.\" 
.\" Commercial licensing and support of this software is available from
.\" OpenSS7 Corporation at a fee.  See http://www.openss7.com/
.\" 
.\" =========================================================================
.\"
.\" Last Modified $Date: 2008-04-28 16:47:03 $ by $Author: brian $
.\"
.\" -------------------------------------------------------------------------
.\"
.\" $Log: mi_acquire.9.man,v $
.\" Revision 0.9.2.2  2008-04-28 16:47:03  brian
.\" - updates for release
.\"
.\" Revision 0.9.2.1  2007/08/12 15:20:23  brian
.\" - added new files
.\"
.\" =========================================================================
.R1
bracket-label "\fR[\fB" "\fR]" "\fR, \fB"
no-default-database
database strcompat.refs
accumulate
move-punctuation
abbreviate A
join-authors ", " ", " " and "
et-al " et al" 2 3
abbreviate-label-ranges ".."
sort-adjacent-labels
.R2
.so strcompat.macros
.\"
.\"
.TH MI_ACQUIRE 9 "@PACKAGE_DATE@" "@PACKAGE@-@VERSION@" "@PACKAGE_TITLE@ DDI/DKI"
.\"
.\"
.SH NAME
.B mi_acquire
\- try to lock a queue private structure
.\"
.\"
.SH SYNOPSIS
.PP
.B #define _MPS_SOURCE
.br
.B #include <sys/stream.h>
.br
.B #include <sys/ddi.h>
.br
.B #include <sys/mpsddi.h>
.HP
.BI "caddr_t \fRmi_acquire(\fPcaddr_t " ptr ", queue_t *" q \fR)\fP;
.\"
.\"
.SH ARGUMENTS
.PP
.TP
.I ptr
a pointer to the private structure that is to be acquired (locked).
.TP
.I q
a pointer to the active queue of the queue pair requesting the lock.
.\"
.\"
.SH INTERFACE
.PP
.IR MPS \(rg-specific
DDI.
.PP
.I "Linux Fast-STREAMS"
specific.
.\"
.\"
.SH DESCRIPTION
.PP
.BR mi_acquire (),
.BR mi_acquire_sleep (9),
and
.BR mi_release (9)
are a set of per queue pair Stream locking functions that can be used with the
functions from the
.BR mi_open_comm (9)
family.
.PP
.BR mi_acquire ()
attempts to lock the private structure associated with the pointer,
.IR ptr .
When successful, the function returns a pointer to the private stucture.  When
unsuccessful, the queue
.IR q ,
is scheduled to be enabled with
.BR qenable (9)
when the structure is unlocked by the current lock holder, and
.B NULL
is returned.
.\"
.\"
.SH USAGE
.PP
.BR mi_acquire ()
simplifies the implementation of private structure locks for fully MP-safe
.IR STREAMS (9)
modules and drivers.  The function attempts to lock the private structure
associated with the private structure pointer,
.IR ptr ,
and serializes access to the associated private structure.  While the lock is
held, access to the private structure is exclusive to the lock holder.
.PP
.BR mi_acquire ()
is called at the beginning of put or service procedure execution when the
procedure wishes exclusive access to the private structure (perhaps to alter
state variables).
.PP
When
.BR mi_acquire ()
fails, the caller should cause any message that was to be processed under the
lock to be placed (back) onto message queue,
.IR q .
When the lock is released by the current lock holder, the message queue,
.IR q ,
will be enabled.
.\"
.\"
.SH RETURN
.PP
When
.BR mi_acquire ()
succeeds, it returns a pointer to the locked private structure
.IR ptr ;
when unsuccessful, it returns
.B NULL
and schedules queue,
.IR q ,
for later service processing.
.\"
.\"
.SH ERRORS
.PP
.BR mi_acquire ()
fails and returns
.B NULL
when there is no private structure associated with pointer,
.IR ptr ;
or, when it was not possible to immediately lock the structure.  The
difference can be determined by examining
.I ptr
for
.BR NULL .
.\"
.\"
.SH CONTEXT
.PP
.BR mi_acquire ()
can be called from any context, including user context, module procedures,
callouts, callbacks, soft interrupts (tasklets and bottom halves), and
interrupt service routines.
.\"
.\"
.SH MP-STREAMS
.PP
.BR mi_acquire ()
is MP-safe, however, it is the responsibility of the caller to ensure the
validity of passed in pointers across the call.  See
.RI \(lq EXAMPLES \(rq.
.\"
.\"
.SH NOTICES
.PP
.BR mi_acquire ()
must only be called for a private structure that was allocated with
.BR mi_alloc (9)
or
.BR mi_alloc_sleep (9),
or one of the other private structure allocation functions from the
.BR mi_open_comm (9)
family of functions.
.PP
Any queue that uses
.BR mi_acquire (9)
should have a queue service procedure.
.PP
Each successful call to
.BR mi_acquire ()
must be matched with a corresponding call to
.BR mi_release (9)
or processor or process deadlock may occur.
.PP
The lock acquired by
.BR mi_acquire ()
on the private structure associated with pointer,
.IR ptr ,
is not a recursive lock.  That is, if
.BR mi_acquire ()
is called twice for the same pointer,
.IR ptr ,
and with no intervening
.BR mi_release (9),
and the first call to
.BR mi_acquire ()
succeeds, the second call will fail.  This is the best behaviour for
.IR STREAMS (9)
put and service procedures which are seldomly written with reentrancy in mind.
.\"
.\"
.SH IMPLEMENTATION
.PP
.BR mi_acquire ()
is implemented using basic lock functions.  See
.BR LOCK (9)
and
.BR TRYLOCK (9)
for more information.
.\"
.\"
.SH EXAMPLES
.PP
The following is an example of the canonical use of
.BR mi_acquire ():
.PP
.nf
\fC\s-1\
static inline int
do_r_proto(queue_t *q, mblk_t *mp)
{
    struct priv *priv = PRIV(q);

    read_lock(&mux_lock);
    if (!\f(CB\)mi_acquire\fP((caddr_t) priv->other, q)) {
        read_unlock(&mux_lock);
        return (EAGAIN);
    }
    read_unlock(&mux_lock);

    /* ... */
    /* process the message */
    /* ... */

    \f(CB\)mi_release\fP((caddr_t) priv->other);
    return (0);
}

static inline int
do_msg(queue_t *q, mblk_t *mp)
{
    switch (DB_TYPE(mp)) {
    case M_FLUSH:
        do_r_flush(q, mp);
    case M_PROTO:
        do_r_proto(q, mp);
    default:
        putnext(q, mp);
    }
}

static streamscall int
do_rput(queue_t *q, mblk_t *mp)
{
    if ((pcmsg(DB_TYPE(mp))
         && (q->q_first || (q->q_flag & QSVCBUSY)))
        || do_msg(q, mp))
        putq(q, mp);
    return (0);
}

static streamscall int
do_rsrv(queue_t *q)
{
    mblk_t *mp;

    while ((mp = getq(q))) {
        if (do_msg(q, mp)) {
            putbq(q, mp);
            break;
        }
    }
    return (0);
}
\s+1\fP
.fi
.\"
.\"
.SH "SEE ALSO"
.PP
.BR mi_acquire_sleep (9),
.BR mi_release (9),
.BR TRYLOCK (9),
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR STREAMS (9).
.\"
.\"
.SH BUGS
.PP
.BR mi_acquire ()
has no known bugs.
.\"
.\"
.SH COMPATIBILITY
.PP
.BR mi_acquire ()
is
compatible with
.IR MPS \(rg,
.IR AIX \(rg,
.IR MacOT \(rg,
and
.IR Solaris \(rg,
with the following portability considerations:
.IP \(em \w'\(em\(em'u
.BR mi_acquire ()
is an OpenSS7 Project specific implementation of an
.IR MPS \(rg-compatible
function and should not be used by portable
.I STREAMS
drivers and modules.
.IP \(em
.BR mi_acquire ()
is provided for use with SS7 drivers and modules that need some automatic locking of queue pair
private structure for speed and efficiency.
.IP \(em
.BR mi_acquire ()
does not exist in any other
.IR MPS \(rg
implementation other than
.IR "Linux Fast-STREAMS" .
.PP
See
.BR mpscompat (9),
.BR aixcompat (9),
.BR maccompat (9),
.BR suncompat (9),
and
.BR STREAMS (9)
for additional compatibility considerations.
.\"
.\"
.SH CONFORMANCE
.PP
Conforms to
.B OpenSS7
documentation.
.\"
.\"
.SH HISTORY
.PP
.BR mi_acquire ()
is new for
.BR "@PACKAGE_TITLE@" .
It is largely equivalent to the
.BR ss7_trylock (9)
SS7 common function that appeared in early releases of the
.B strss7
package and is also contained in
.BR "@PACKAGE_TITLE@" .
.\"
.\"
.[
$LIST$
.]
.TI
